declare module 'activex-mshtml' {
        declare  class MSHTML$_BEHAVIOR_EVENT {
  constructor(...args: empty): mixed;
static +BEHAVIOR_EVENT_Max: Class<MSHTML$_BEHAVIOR_EVENT__BEHAVIOR_EVENT_Max> & MSHTML$_BEHAVIOR_EVENT__BEHAVIOR_EVENT_Max & 2147483647;// 2147483647
static +BEHAVIOREVENT_APPLYSTYLE: Class<MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_APPLYSTYLE> & MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_APPLYSTYLE & 2;// 2
static +BEHAVIOREVENT_CONTENTREADY: Class<MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_CONTENTREADY> & MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_CONTENTREADY & 0;// 0
static +BEHAVIOREVENT_CONTENTSAVE: Class<MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_CONTENTSAVE> & MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_CONTENTSAVE & 4;// 4
static +BEHAVIOREVENT_DOCUMENTCONTEXTCHANGE: Class<MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_DOCUMENTCONTEXTCHANGE> & MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_DOCUMENTCONTEXTCHANGE & 3;// 3
static +BEHAVIOREVENT_DOCUMENTREADY: Class<MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_DOCUMENTREADY> & MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_DOCUMENTREADY & 1;// 1
static +BEHAVIOREVENT_FIRST: Class<MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_FIRST> & MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_FIRST & 0;// 0
static +BEHAVIOREVENT_LAST: Class<MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_LAST> & MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_LAST & 4;// 4

}

declare class MSHTML$_BEHAVIOR_EVENT__BEHAVIOR_EVENT_Max mixins MSHTML$_BEHAVIOR_EVENT {}
declare class MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_APPLYSTYLE mixins MSHTML$_BEHAVIOR_EVENT {}
declare class MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_CONTENTREADY mixins MSHTML$_BEHAVIOR_EVENT {}
declare class MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_CONTENTSAVE mixins MSHTML$_BEHAVIOR_EVENT {}
declare class MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_DOCUMENTCONTEXTCHANGE mixins MSHTML$_BEHAVIOR_EVENT {}
declare class MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_DOCUMENTREADY mixins MSHTML$_BEHAVIOR_EVENT {}
declare class MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_FIRST mixins MSHTML$_BEHAVIOR_EVENT {}
declare class MSHTML$_BEHAVIOR_EVENT__BEHAVIOREVENT_LAST mixins MSHTML$_BEHAVIOR_EVENT {}


declare  class MSHTML$_BEHAVIOR_EVENT_FLAGS {
  constructor(...args: empty): mixed;
static +BEHAVIOR_EVENT_FLAGS_Max: Class<MSHTML$_BEHAVIOR_EVENT_FLAGS__BEHAVIOR_EVENT_FLAGS_Max> & MSHTML$_BEHAVIOR_EVENT_FLAGS__BEHAVIOR_EVENT_FLAGS_Max & 2147483647;// 2147483647
static +BEHAVIOREVENTFLAGS_BUBBLE: Class<MSHTML$_BEHAVIOR_EVENT_FLAGS__BEHAVIOREVENTFLAGS_BUBBLE> & MSHTML$_BEHAVIOR_EVENT_FLAGS__BEHAVIOREVENTFLAGS_BUBBLE & 1;// 1
static +BEHAVIOREVENTFLAGS_STANDARDADDITIVE: Class<MSHTML$_BEHAVIOR_EVENT_FLAGS__BEHAVIOREVENTFLAGS_STANDARDADDITIVE> & MSHTML$_BEHAVIOR_EVENT_FLAGS__BEHAVIOREVENTFLAGS_STANDARDADDITIVE & 2;// 2

}

declare class MSHTML$_BEHAVIOR_EVENT_FLAGS__BEHAVIOR_EVENT_FLAGS_Max mixins MSHTML$_BEHAVIOR_EVENT_FLAGS {}
declare class MSHTML$_BEHAVIOR_EVENT_FLAGS__BEHAVIOREVENTFLAGS_BUBBLE mixins MSHTML$_BEHAVIOR_EVENT_FLAGS {}
declare class MSHTML$_BEHAVIOR_EVENT_FLAGS__BEHAVIOREVENTFLAGS_STANDARDADDITIVE mixins MSHTML$_BEHAVIOR_EVENT_FLAGS {}


declare  class MSHTML$_BEHAVIOR_LAYOUT_INFO {
  constructor(...args: empty): mixed;
static +BEHAVIOR_LAYOUT_INFO_Max: Class<MSHTML$_BEHAVIOR_LAYOUT_INFO__BEHAVIOR_LAYOUT_INFO_Max> & MSHTML$_BEHAVIOR_LAYOUT_INFO__BEHAVIOR_LAYOUT_INFO_Max & 2147483647;// 2147483647
static +BEHAVIORLAYOUTINFO_FULLDELEGATION: Class<MSHTML$_BEHAVIOR_LAYOUT_INFO__BEHAVIORLAYOUTINFO_FULLDELEGATION> & MSHTML$_BEHAVIOR_LAYOUT_INFO__BEHAVIORLAYOUTINFO_FULLDELEGATION & 1;// 1
static +BEHAVIORLAYOUTINFO_MAPSIZE: Class<MSHTML$_BEHAVIOR_LAYOUT_INFO__BEHAVIORLAYOUTINFO_MAPSIZE> & MSHTML$_BEHAVIOR_LAYOUT_INFO__BEHAVIORLAYOUTINFO_MAPSIZE & 4;// 4
static +BEHAVIORLAYOUTINFO_MODIFYNATURAL: Class<MSHTML$_BEHAVIOR_LAYOUT_INFO__BEHAVIORLAYOUTINFO_MODIFYNATURAL> & MSHTML$_BEHAVIOR_LAYOUT_INFO__BEHAVIORLAYOUTINFO_MODIFYNATURAL & 2;// 2

}

declare class MSHTML$_BEHAVIOR_LAYOUT_INFO__BEHAVIOR_LAYOUT_INFO_Max mixins MSHTML$_BEHAVIOR_LAYOUT_INFO {}
declare class MSHTML$_BEHAVIOR_LAYOUT_INFO__BEHAVIORLAYOUTINFO_FULLDELEGATION mixins MSHTML$_BEHAVIOR_LAYOUT_INFO {}
declare class MSHTML$_BEHAVIOR_LAYOUT_INFO__BEHAVIORLAYOUTINFO_MAPSIZE mixins MSHTML$_BEHAVIOR_LAYOUT_INFO {}
declare class MSHTML$_BEHAVIOR_LAYOUT_INFO__BEHAVIORLAYOUTINFO_MODIFYNATURAL mixins MSHTML$_BEHAVIOR_LAYOUT_INFO {}


declare  class MSHTML$_BEHAVIOR_LAYOUT_MODE {
  constructor(...args: empty): mixed;
static +BEHAVIOR_LAYOUT_MODE_Max: Class<MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIOR_LAYOUT_MODE_Max> & MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIOR_LAYOUT_MODE_Max & 2147483647;// 2147483647
static +BEHAVIORLAYOUTMODE_FINAL_PERCENT: Class<MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIORLAYOUTMODE_FINAL_PERCENT> & MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIORLAYOUTMODE_FINAL_PERCENT & 32768;// 32768
static +BEHAVIORLAYOUTMODE_MAXWIDTH: Class<MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIORLAYOUTMODE_MAXWIDTH> & MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIORLAYOUTMODE_MAXWIDTH & 4;// 4
static +BEHAVIORLAYOUTMODE_MEDIA_RESOLUTION: Class<MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIORLAYOUTMODE_MEDIA_RESOLUTION> & MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIORLAYOUTMODE_MEDIA_RESOLUTION & 16384;// 16384
static +BEHAVIORLAYOUTMODE_MINWIDTH: Class<MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIORLAYOUTMODE_MINWIDTH> & MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIORLAYOUTMODE_MINWIDTH & 2;// 2
static +BEHAVIORLAYOUTMODE_NATURAL: Class<MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIORLAYOUTMODE_NATURAL> & MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIORLAYOUTMODE_NATURAL & 1;// 1

}

declare class MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIOR_LAYOUT_MODE_Max mixins MSHTML$_BEHAVIOR_LAYOUT_MODE {}
declare class MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIORLAYOUTMODE_FINAL_PERCENT mixins MSHTML$_BEHAVIOR_LAYOUT_MODE {}
declare class MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIORLAYOUTMODE_MAXWIDTH mixins MSHTML$_BEHAVIOR_LAYOUT_MODE {}
declare class MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIORLAYOUTMODE_MEDIA_RESOLUTION mixins MSHTML$_BEHAVIOR_LAYOUT_MODE {}
declare class MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIORLAYOUTMODE_MINWIDTH mixins MSHTML$_BEHAVIOR_LAYOUT_MODE {}
declare class MSHTML$_BEHAVIOR_LAYOUT_MODE__BEHAVIORLAYOUTMODE_NATURAL mixins MSHTML$_BEHAVIOR_LAYOUT_MODE {}


declare  class MSHTML$_BEHAVIOR_RELATION {
  constructor(...args: empty): mixed;
static +BEHAVIOR_CHILD: Class<MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_CHILD> & MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_CHILD & 2;// 2
static +BEHAVIOR_FIRSTRELATION: Class<MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_FIRSTRELATION> & MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_FIRSTRELATION & 0;// 0
static +BEHAVIOR_LASTRELATION: Class<MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_LASTRELATION> & MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_LASTRELATION & 3;// 3
static +BEHAVIOR_PARENT: Class<MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_PARENT> & MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_PARENT & 1;// 1
static +BEHAVIOR_RELATION_Max: Class<MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_RELATION_Max> & MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_RELATION_Max & 2147483647;// 2147483647
static +BEHAVIOR_SAMEELEMENT: Class<MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_SAMEELEMENT> & MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_SAMEELEMENT & 0;// 0
static +BEHAVIOR_SIBLING: Class<MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_SIBLING> & MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_SIBLING & 3;// 3

}

declare class MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_CHILD mixins MSHTML$_BEHAVIOR_RELATION {}
declare class MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_FIRSTRELATION mixins MSHTML$_BEHAVIOR_RELATION {}
declare class MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_LASTRELATION mixins MSHTML$_BEHAVIOR_RELATION {}
declare class MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_PARENT mixins MSHTML$_BEHAVIOR_RELATION {}
declare class MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_RELATION_Max mixins MSHTML$_BEHAVIOR_RELATION {}
declare class MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_SAMEELEMENT mixins MSHTML$_BEHAVIOR_RELATION {}
declare class MSHTML$_BEHAVIOR_RELATION__BEHAVIOR_SIBLING mixins MSHTML$_BEHAVIOR_RELATION {}


declare  class MSHTML$_BEHAVIOR_RENDER_INFO {
  constructor(...args: empty): mixed;
static +BEHAVIOR_RENDER_INFO_Max: Class<MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIOR_RENDER_INFO_Max> & MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIOR_RENDER_INFO_Max & 2147483647;// 2147483647
static +BEHAVIORRENDERINFO_3DSURFACE: Class<MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_3DSURFACE> & MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_3DSURFACE & 2097152;// 2097152
static +BEHAVIORRENDERINFO_ABOVECONTENT: Class<MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_ABOVECONTENT> & MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_ABOVECONTENT & 40;// 40
static +BEHAVIORRENDERINFO_AFTERBACKGROUND: Class<MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_AFTERBACKGROUND> & MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_AFTERBACKGROUND & 2;// 2
static +BEHAVIORRENDERINFO_AFTERCONTENT: Class<MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_AFTERCONTENT> & MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_AFTERCONTENT & 8;// 8
static +BEHAVIORRENDERINFO_AFTERFOREGROUND: Class<MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_AFTERFOREGROUND> & MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_AFTERFOREGROUND & 32;// 32
static +BEHAVIORRENDERINFO_ALLLAYERS: Class<MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_ALLLAYERS> & MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_ALLLAYERS & 255;// 255
static +BEHAVIORRENDERINFO_BEFOREBACKGROUND: Class<MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_BEFOREBACKGROUND> & MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_BEFOREBACKGROUND & 1;// 1
static +BEHAVIORRENDERINFO_BEFORECONTENT: Class<MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_BEFORECONTENT> & MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_BEFORECONTENT & 4;// 4
static +BEHAVIORRENDERINFO_DISABLEALLLAYERS: Class<MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_DISABLEALLLAYERS> & MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_DISABLEALLLAYERS & 3840;// 3840
static +BEHAVIORRENDERINFO_DISABLEBACKGROUND: Class<MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_DISABLEBACKGROUND> & MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_DISABLEBACKGROUND & 256;// 256
static +BEHAVIORRENDERINFO_DISABLECONTENT: Class<MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_DISABLECONTENT> & MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_DISABLECONTENT & 1024;// 1024
static +BEHAVIORRENDERINFO_DISABLENEGATIVEZ: Class<MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_DISABLENEGATIVEZ> & MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_DISABLENEGATIVEZ & 512;// 512
static +BEHAVIORRENDERINFO_DISABLEPOSITIVEZ: Class<MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_DISABLEPOSITIVEZ> & MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_DISABLEPOSITIVEZ & 2048;// 2048
static +BEHAVIORRENDERINFO_HITTESTING: Class<MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_HITTESTING> & MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_HITTESTING & 4096;// 4096
static +BEHAVIORRENDERINFO_SURFACE: Class<MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_SURFACE> & MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_SURFACE & 1048576;// 1048576

}

declare class MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIOR_RENDER_INFO_Max mixins MSHTML$_BEHAVIOR_RENDER_INFO {}
declare class MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_3DSURFACE mixins MSHTML$_BEHAVIOR_RENDER_INFO {}
declare class MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_ABOVECONTENT mixins MSHTML$_BEHAVIOR_RENDER_INFO {}
declare class MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_AFTERBACKGROUND mixins MSHTML$_BEHAVIOR_RENDER_INFO {}
declare class MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_AFTERCONTENT mixins MSHTML$_BEHAVIOR_RENDER_INFO {}
declare class MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_AFTERFOREGROUND mixins MSHTML$_BEHAVIOR_RENDER_INFO {}
declare class MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_ALLLAYERS mixins MSHTML$_BEHAVIOR_RENDER_INFO {}
declare class MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_BEFOREBACKGROUND mixins MSHTML$_BEHAVIOR_RENDER_INFO {}
declare class MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_BEFORECONTENT mixins MSHTML$_BEHAVIOR_RENDER_INFO {}
declare class MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_DISABLEALLLAYERS mixins MSHTML$_BEHAVIOR_RENDER_INFO {}
declare class MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_DISABLEBACKGROUND mixins MSHTML$_BEHAVIOR_RENDER_INFO {}
declare class MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_DISABLECONTENT mixins MSHTML$_BEHAVIOR_RENDER_INFO {}
declare class MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_DISABLENEGATIVEZ mixins MSHTML$_BEHAVIOR_RENDER_INFO {}
declare class MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_DISABLEPOSITIVEZ mixins MSHTML$_BEHAVIOR_RENDER_INFO {}
declare class MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_HITTESTING mixins MSHTML$_BEHAVIOR_RENDER_INFO {}
declare class MSHTML$_BEHAVIOR_RENDER_INFO__BEHAVIORRENDERINFO_SURFACE mixins MSHTML$_BEHAVIOR_RENDER_INFO {}


declare  class MSHTML$_bodyScroll {
  constructor(...args: empty): mixed;
static +bodyScroll_Max: Class<MSHTML$_bodyScroll__bodyScroll_Max> & MSHTML$_bodyScroll__bodyScroll_Max & 2147483647;// 2147483647
static +bodyScrollauto: Class<MSHTML$_bodyScroll__bodyScrollauto> & MSHTML$_bodyScroll__bodyScrollauto & 4;// 4
static +bodyScrolldefault: Class<MSHTML$_bodyScroll__bodyScrolldefault> & MSHTML$_bodyScroll__bodyScrolldefault & 3;// 3
static +bodyScrollno: Class<MSHTML$_bodyScroll__bodyScrollno> & MSHTML$_bodyScroll__bodyScrollno & 2;// 2
static +bodyScrollyes: Class<MSHTML$_bodyScroll__bodyScrollyes> & MSHTML$_bodyScroll__bodyScrollyes & 1;// 1

}

declare class MSHTML$_bodyScroll__bodyScroll_Max mixins MSHTML$_bodyScroll {}
declare class MSHTML$_bodyScroll__bodyScrollauto mixins MSHTML$_bodyScroll {}
declare class MSHTML$_bodyScroll__bodyScrolldefault mixins MSHTML$_bodyScroll {}
declare class MSHTML$_bodyScroll__bodyScrollno mixins MSHTML$_bodyScroll {}
declare class MSHTML$_bodyScroll__bodyScrollyes mixins MSHTML$_bodyScroll {}


declare  class MSHTML$_BoolValue {
  constructor(...args: empty): mixed;
static +BoolValue_Max: Class<MSHTML$_BoolValue__BoolValue_Max> & MSHTML$_BoolValue__BoolValue_Max & 2147483647;// 2147483647
static +False: Class<MSHTML$_BoolValue__False> & MSHTML$_BoolValue__False & 0;// 0
static +True: Class<MSHTML$_BoolValue__True> & MSHTML$_BoolValue__True & 1;// 1

}

declare class MSHTML$_BoolValue__BoolValue_Max mixins MSHTML$_BoolValue {}
declare class MSHTML$_BoolValue__False mixins MSHTML$_BoolValue {}
declare class MSHTML$_BoolValue__True mixins MSHTML$_BoolValue {}


declare  class MSHTML$_CARET_DIRECTION {
  constructor(...args: empty): mixed;
static +CARET_DIRECTION_BACKWARD: Class<MSHTML$_CARET_DIRECTION__CARET_DIRECTION_BACKWARD> & MSHTML$_CARET_DIRECTION__CARET_DIRECTION_BACKWARD & 2;// 2
static +CARET_DIRECTION_FORWARD: Class<MSHTML$_CARET_DIRECTION__CARET_DIRECTION_FORWARD> & MSHTML$_CARET_DIRECTION__CARET_DIRECTION_FORWARD & 3;// 3
static +CARET_DIRECTION_INDETERMINATE: Class<MSHTML$_CARET_DIRECTION__CARET_DIRECTION_INDETERMINATE> & MSHTML$_CARET_DIRECTION__CARET_DIRECTION_INDETERMINATE & 0;// 0
static +CARET_DIRECTION_Max: Class<MSHTML$_CARET_DIRECTION__CARET_DIRECTION_Max> & MSHTML$_CARET_DIRECTION__CARET_DIRECTION_Max & 2147483647;// 2147483647
static +CARET_DIRECTION_SAME: Class<MSHTML$_CARET_DIRECTION__CARET_DIRECTION_SAME> & MSHTML$_CARET_DIRECTION__CARET_DIRECTION_SAME & 1;// 1

}

declare class MSHTML$_CARET_DIRECTION__CARET_DIRECTION_BACKWARD mixins MSHTML$_CARET_DIRECTION {}
declare class MSHTML$_CARET_DIRECTION__CARET_DIRECTION_FORWARD mixins MSHTML$_CARET_DIRECTION {}
declare class MSHTML$_CARET_DIRECTION__CARET_DIRECTION_INDETERMINATE mixins MSHTML$_CARET_DIRECTION {}
declare class MSHTML$_CARET_DIRECTION__CARET_DIRECTION_Max mixins MSHTML$_CARET_DIRECTION {}
declare class MSHTML$_CARET_DIRECTION__CARET_DIRECTION_SAME mixins MSHTML$_CARET_DIRECTION {}


declare  class MSHTML$_COORD_SYSTEM {
  constructor(...args: empty): mixed;
static +COORD_SYSTEM_CLIENT: Class<MSHTML$_COORD_SYSTEM__COORD_SYSTEM_CLIENT> & MSHTML$_COORD_SYSTEM__COORD_SYSTEM_CLIENT & 5;// 5
static +COORD_SYSTEM_CONTAINER: Class<MSHTML$_COORD_SYSTEM__COORD_SYSTEM_CONTAINER> & MSHTML$_COORD_SYSTEM__COORD_SYSTEM_CONTAINER & 2;// 2
static +COORD_SYSTEM_CONTENT: Class<MSHTML$_COORD_SYSTEM__COORD_SYSTEM_CONTENT> & MSHTML$_COORD_SYSTEM__COORD_SYSTEM_CONTENT & 3;// 3
static +COORD_SYSTEM_FRAME: Class<MSHTML$_COORD_SYSTEM__COORD_SYSTEM_FRAME> & MSHTML$_COORD_SYSTEM__COORD_SYSTEM_FRAME & 4;// 4
static +COORD_SYSTEM_GLOBAL: Class<MSHTML$_COORD_SYSTEM__COORD_SYSTEM_GLOBAL> & MSHTML$_COORD_SYSTEM__COORD_SYSTEM_GLOBAL & 0;// 0
static +COORD_SYSTEM_Max: Class<MSHTML$_COORD_SYSTEM__COORD_SYSTEM_Max> & MSHTML$_COORD_SYSTEM__COORD_SYSTEM_Max & 2147483647;// 2147483647
static +COORD_SYSTEM_PARENT: Class<MSHTML$_COORD_SYSTEM__COORD_SYSTEM_PARENT> & MSHTML$_COORD_SYSTEM__COORD_SYSTEM_PARENT & 1;// 1

}

declare class MSHTML$_COORD_SYSTEM__COORD_SYSTEM_CLIENT mixins MSHTML$_COORD_SYSTEM {}
declare class MSHTML$_COORD_SYSTEM__COORD_SYSTEM_CONTAINER mixins MSHTML$_COORD_SYSTEM {}
declare class MSHTML$_COORD_SYSTEM__COORD_SYSTEM_CONTENT mixins MSHTML$_COORD_SYSTEM {}
declare class MSHTML$_COORD_SYSTEM__COORD_SYSTEM_FRAME mixins MSHTML$_COORD_SYSTEM {}
declare class MSHTML$_COORD_SYSTEM__COORD_SYSTEM_GLOBAL mixins MSHTML$_COORD_SYSTEM {}
declare class MSHTML$_COORD_SYSTEM__COORD_SYSTEM_Max mixins MSHTML$_COORD_SYSTEM {}
declare class MSHTML$_COORD_SYSTEM__COORD_SYSTEM_PARENT mixins MSHTML$_COORD_SYSTEM {}


declare  class MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL {
  constructor(...args: empty): mixed;
static +DCML_ERROR: Class<MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL__DCML_ERROR> & MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL__DCML_ERROR & 2;// 2
static +DCML_INFORMATIONAL: Class<MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL__DCML_INFORMATIONAL> & MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL__DCML_INFORMATIONAL & 0;// 0
static +DCML_WARNING: Class<MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL__DCML_WARNING> & MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL__DCML_WARNING & 1;// 1
static +DEV_CONSOLE_MESSAGE_LEVEL_Max: Class<MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL__DEV_CONSOLE_MESSAGE_LEVEL_Max> & MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL__DEV_CONSOLE_MESSAGE_LEVEL_Max & 2147483647;// 2147483647

}

declare class MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL__DCML_ERROR mixins MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL {}
declare class MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL__DCML_INFORMATIONAL mixins MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL {}
declare class MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL__DCML_WARNING mixins MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL {}
declare class MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL__DEV_CONSOLE_MESSAGE_LEVEL_Max mixins MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL {}


declare  class MSHTML$_DISPLAY_BREAK {
  constructor(...args: empty): mixed;
static +DISPLAY_BREAK_Block: Class<MSHTML$_DISPLAY_BREAK__DISPLAY_BREAK_Block> & MSHTML$_DISPLAY_BREAK__DISPLAY_BREAK_Block & 1;// 1
static +DISPLAY_BREAK_Break: Class<MSHTML$_DISPLAY_BREAK__DISPLAY_BREAK_Break> & MSHTML$_DISPLAY_BREAK__DISPLAY_BREAK_Break & 2;// 2
static +DISPLAY_BREAK_Max: Class<MSHTML$_DISPLAY_BREAK__DISPLAY_BREAK_Max> & MSHTML$_DISPLAY_BREAK__DISPLAY_BREAK_Max & 2147483647;// 2147483647
static +DISPLAY_BREAK_None: Class<MSHTML$_DISPLAY_BREAK__DISPLAY_BREAK_None> & MSHTML$_DISPLAY_BREAK__DISPLAY_BREAK_None & 0;// 0

}

declare class MSHTML$_DISPLAY_BREAK__DISPLAY_BREAK_Block mixins MSHTML$_DISPLAY_BREAK {}
declare class MSHTML$_DISPLAY_BREAK__DISPLAY_BREAK_Break mixins MSHTML$_DISPLAY_BREAK {}
declare class MSHTML$_DISPLAY_BREAK__DISPLAY_BREAK_Max mixins MSHTML$_DISPLAY_BREAK {}
declare class MSHTML$_DISPLAY_BREAK__DISPLAY_BREAK_None mixins MSHTML$_DISPLAY_BREAK {}


declare  class MSHTML$_DISPLAY_GRAVITY {
  constructor(...args: empty): mixed;
static +DISPLAY_GRAVITY_Max: Class<MSHTML$_DISPLAY_GRAVITY__DISPLAY_GRAVITY_Max> & MSHTML$_DISPLAY_GRAVITY__DISPLAY_GRAVITY_Max & 2147483647;// 2147483647
static +DISPLAY_GRAVITY_NextLine: Class<MSHTML$_DISPLAY_GRAVITY__DISPLAY_GRAVITY_NextLine> & MSHTML$_DISPLAY_GRAVITY__DISPLAY_GRAVITY_NextLine & 2;// 2
static +DISPLAY_GRAVITY_PreviousLine: Class<MSHTML$_DISPLAY_GRAVITY__DISPLAY_GRAVITY_PreviousLine> & MSHTML$_DISPLAY_GRAVITY__DISPLAY_GRAVITY_PreviousLine & 1;// 1

}

declare class MSHTML$_DISPLAY_GRAVITY__DISPLAY_GRAVITY_Max mixins MSHTML$_DISPLAY_GRAVITY {}
declare class MSHTML$_DISPLAY_GRAVITY__DISPLAY_GRAVITY_NextLine mixins MSHTML$_DISPLAY_GRAVITY {}
declare class MSHTML$_DISPLAY_GRAVITY__DISPLAY_GRAVITY_PreviousLine mixins MSHTML$_DISPLAY_GRAVITY {}


declare  class MSHTML$_DISPLAY_MOVEUNIT {
  constructor(...args: empty): mixed;
static +DISPLAY_MOVEUNIT_BottomOfWindow: Class<MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_BottomOfWindow> & MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_BottomOfWindow & 6;// 6
static +DISPLAY_MOVEUNIT_CurrentLineEnd: Class<MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_CurrentLineEnd> & MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_CurrentLineEnd & 4;// 4
static +DISPLAY_MOVEUNIT_CurrentLineStart: Class<MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_CurrentLineStart> & MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_CurrentLineStart & 3;// 3
static +DISPLAY_MOVEUNIT_Max: Class<MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_Max> & MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_Max & 2147483647;// 2147483647
static +DISPLAY_MOVEUNIT_NextLine: Class<MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_NextLine> & MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_NextLine & 2;// 2
static +DISPLAY_MOVEUNIT_PreviousLine: Class<MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_PreviousLine> & MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_PreviousLine & 1;// 1
static +DISPLAY_MOVEUNIT_TopOfWindow: Class<MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_TopOfWindow> & MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_TopOfWindow & 5;// 5

}

declare class MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_BottomOfWindow mixins MSHTML$_DISPLAY_MOVEUNIT {}
declare class MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_CurrentLineEnd mixins MSHTML$_DISPLAY_MOVEUNIT {}
declare class MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_CurrentLineStart mixins MSHTML$_DISPLAY_MOVEUNIT {}
declare class MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_Max mixins MSHTML$_DISPLAY_MOVEUNIT {}
declare class MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_NextLine mixins MSHTML$_DISPLAY_MOVEUNIT {}
declare class MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_PreviousLine mixins MSHTML$_DISPLAY_MOVEUNIT {}
declare class MSHTML$_DISPLAY_MOVEUNIT__DISPLAY_MOVEUNIT_TopOfWindow mixins MSHTML$_DISPLAY_MOVEUNIT {}


declare  class MSHTML$_DOM_EVENT_PHASE {
  constructor(...args: empty): mixed;
static +DEP_AT_TARGET: Class<MSHTML$_DOM_EVENT_PHASE__DEP_AT_TARGET> & MSHTML$_DOM_EVENT_PHASE__DEP_AT_TARGET & 2;// 2
static +DEP_BUBBLING_PHASE: Class<MSHTML$_DOM_EVENT_PHASE__DEP_BUBBLING_PHASE> & MSHTML$_DOM_EVENT_PHASE__DEP_BUBBLING_PHASE & 3;// 3
static +DEP_CAPTURING_PHASE: Class<MSHTML$_DOM_EVENT_PHASE__DEP_CAPTURING_PHASE> & MSHTML$_DOM_EVENT_PHASE__DEP_CAPTURING_PHASE & 1;// 1
static +DOM_EVENT_PHASE_Max: Class<MSHTML$_DOM_EVENT_PHASE__DOM_EVENT_PHASE_Max> & MSHTML$_DOM_EVENT_PHASE__DOM_EVENT_PHASE_Max & 2147483647;// 2147483647

}

declare class MSHTML$_DOM_EVENT_PHASE__DEP_AT_TARGET mixins MSHTML$_DOM_EVENT_PHASE {}
declare class MSHTML$_DOM_EVENT_PHASE__DEP_BUBBLING_PHASE mixins MSHTML$_DOM_EVENT_PHASE {}
declare class MSHTML$_DOM_EVENT_PHASE__DEP_CAPTURING_PHASE mixins MSHTML$_DOM_EVENT_PHASE {}
declare class MSHTML$_DOM_EVENT_PHASE__DOM_EVENT_PHASE_Max mixins MSHTML$_DOM_EVENT_PHASE {}


declare  class MSHTML$_DomConstructor {
  constructor(...args: empty): mixed;
static +DomConstructor_Max: Class<MSHTML$_DomConstructor__DomConstructor_Max> & MSHTML$_DomConstructor__DomConstructor_Max & 2147483647;// 2147483647
static +DomConstructorAttr: Class<MSHTML$_DomConstructor__DomConstructorAttr> & MSHTML$_DomConstructor__DomConstructorAttr & 1;// 1
static +DomConstructorBehaviorUrnsCollection: Class<MSHTML$_DomConstructor__DomConstructorBehaviorUrnsCollection> & MSHTML$_DomConstructor__DomConstructorBehaviorUrnsCollection & 2;// 2
static +DomConstructorBookmarkCollection: Class<MSHTML$_DomConstructor__DomConstructorBookmarkCollection> & MSHTML$_DomConstructor__DomConstructorBookmarkCollection & 3;// 3
static +DomConstructorCompatibleInfo: Class<MSHTML$_DomConstructor__DomConstructorCompatibleInfo> & MSHTML$_DomConstructor__DomConstructorCompatibleInfo & 4;// 4
static +DomConstructorCompatibleInfoCollection: Class<MSHTML$_DomConstructor__DomConstructorCompatibleInfoCollection> & MSHTML$_DomConstructor__DomConstructorCompatibleInfoCollection & 5;// 5
static +DomConstructorControlRangeCollection: Class<MSHTML$_DomConstructor__DomConstructorControlRangeCollection> & MSHTML$_DomConstructor__DomConstructorControlRangeCollection & 6;// 6
static +DomConstructorCSSCurrentStyleDeclaration: Class<MSHTML$_DomConstructor__DomConstructorCSSCurrentStyleDeclaration> & MSHTML$_DomConstructor__DomConstructorCSSCurrentStyleDeclaration & 7;// 7
static +DomConstructorCSSRuleList: Class<MSHTML$_DomConstructor__DomConstructorCSSRuleList> & MSHTML$_DomConstructor__DomConstructorCSSRuleList & 8;// 8
static +DomConstructorCSSRuleStyleDeclaration: Class<MSHTML$_DomConstructor__DomConstructorCSSRuleStyleDeclaration> & MSHTML$_DomConstructor__DomConstructorCSSRuleStyleDeclaration & 9;// 9
static +DomConstructorCSSStyleDeclaration: Class<MSHTML$_DomConstructor__DomConstructorCSSStyleDeclaration> & MSHTML$_DomConstructor__DomConstructorCSSStyleDeclaration & 10;// 10
static +DomConstructorCSSStyleRule: Class<MSHTML$_DomConstructor__DomConstructorCSSStyleRule> & MSHTML$_DomConstructor__DomConstructorCSSStyleRule & 11;// 11
static +DomConstructorCSSStyleSheet: Class<MSHTML$_DomConstructor__DomConstructorCSSStyleSheet> & MSHTML$_DomConstructor__DomConstructorCSSStyleSheet & 12;// 12
static +DomConstructorDataTransfer: Class<MSHTML$_DomConstructor__DomConstructorDataTransfer> & MSHTML$_DomConstructor__DomConstructorDataTransfer & 13;// 13
static +DomConstructorDOMImplementation: Class<MSHTML$_DomConstructor__DomConstructorDOMImplementation> & MSHTML$_DomConstructor__DomConstructorDOMImplementation & 14;// 14
static +DomConstructorElement: Class<MSHTML$_DomConstructor__DomConstructorElement> & MSHTML$_DomConstructor__DomConstructorElement & 15;// 15
static +DomConstructorEvent: Class<MSHTML$_DomConstructor__DomConstructorEvent> & MSHTML$_DomConstructor__DomConstructorEvent & 16;// 16
static +DomConstructorHistory: Class<MSHTML$_DomConstructor__DomConstructorHistory> & MSHTML$_DomConstructor__DomConstructorHistory & 17;// 17
static +DomConstructorHTCElementBehaviorDefaults: Class<MSHTML$_DomConstructor__DomConstructorHTCElementBehaviorDefaults> & MSHTML$_DomConstructor__DomConstructorHTCElementBehaviorDefaults & 18;// 18
static +DomConstructorHTMLAnchorElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLAnchorElement> & MSHTML$_DomConstructor__DomConstructorHTMLAnchorElement & 19;// 19
static +DomConstructorHTMLAreaElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLAreaElement> & MSHTML$_DomConstructor__DomConstructorHTMLAreaElement & 20;// 20
static +DomConstructorHTMLAreasCollection: Class<MSHTML$_DomConstructor__DomConstructorHTMLAreasCollection> & MSHTML$_DomConstructor__DomConstructorHTMLAreasCollection & 21;// 21
static +DomConstructorHTMLBaseElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLBaseElement> & MSHTML$_DomConstructor__DomConstructorHTMLBaseElement & 22;// 22
static +DomConstructorHTMLBaseFontElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLBaseFontElement> & MSHTML$_DomConstructor__DomConstructorHTMLBaseFontElement & 23;// 23
static +DomConstructorHTMLBGSoundElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLBGSoundElement> & MSHTML$_DomConstructor__DomConstructorHTMLBGSoundElement & 24;// 24
static +DomConstructorHTMLBlockElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLBlockElement> & MSHTML$_DomConstructor__DomConstructorHTMLBlockElement & 25;// 25
static +DomConstructorHTMLBodyElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLBodyElement> & MSHTML$_DomConstructor__DomConstructorHTMLBodyElement & 26;// 26
static +DomConstructorHTMLBRElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLBRElement> & MSHTML$_DomConstructor__DomConstructorHTMLBRElement & 27;// 27
static +DomConstructorHTMLButtonElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLButtonElement> & MSHTML$_DomConstructor__DomConstructorHTMLButtonElement & 28;// 28
static +DomConstructorHTMLCollection: Class<MSHTML$_DomConstructor__DomConstructorHTMLCollection> & MSHTML$_DomConstructor__DomConstructorHTMLCollection & 29;// 29
static +DomConstructorHTMLCommentElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLCommentElement> & MSHTML$_DomConstructor__DomConstructorHTMLCommentElement & 30;// 30
static +DomConstructorHTMLDDElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLDDElement> & MSHTML$_DomConstructor__DomConstructorHTMLDDElement & 31;// 31
static +DomConstructorHTMLDivElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLDivElement> & MSHTML$_DomConstructor__DomConstructorHTMLDivElement & 32;// 32
static +DomConstructorHTMLDListElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLDListElement> & MSHTML$_DomConstructor__DomConstructorHTMLDListElement & 34;// 34
static +DomConstructorHTMLDocument: Class<MSHTML$_DomConstructor__DomConstructorHTMLDocument> & MSHTML$_DomConstructor__DomConstructorHTMLDocument & 33;// 33
static +DomConstructorHTMLDTElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLDTElement> & MSHTML$_DomConstructor__DomConstructorHTMLDTElement & 35;// 35
static +DomConstructorHTMLEmbedElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLEmbedElement> & MSHTML$_DomConstructor__DomConstructorHTMLEmbedElement & 36;// 36
static +DomConstructorHTMLFieldSetElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLFieldSetElement> & MSHTML$_DomConstructor__DomConstructorHTMLFieldSetElement & 37;// 37
static +DomConstructorHTMLFontElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLFontElement> & MSHTML$_DomConstructor__DomConstructorHTMLFontElement & 38;// 38
static +DomConstructorHTMLFormElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLFormElement> & MSHTML$_DomConstructor__DomConstructorHTMLFormElement & 39;// 39
static +DomConstructorHTMLFrameElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLFrameElement> & MSHTML$_DomConstructor__DomConstructorHTMLFrameElement & 40;// 40
static +DomConstructorHTMLFrameSetElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLFrameSetElement> & MSHTML$_DomConstructor__DomConstructorHTMLFrameSetElement & 41;// 41
static +DomConstructorHTMLGenericElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLGenericElement> & MSHTML$_DomConstructor__DomConstructorHTMLGenericElement & 42;// 42
static +DomConstructorHTMLHeadElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLHeadElement> & MSHTML$_DomConstructor__DomConstructorHTMLHeadElement & 43;// 43
static +DomConstructorHTMLHeadingElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLHeadingElement> & MSHTML$_DomConstructor__DomConstructorHTMLHeadingElement & 44;// 44
static +DomConstructorHTMLHRElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLHRElement> & MSHTML$_DomConstructor__DomConstructorHTMLHRElement & 45;// 45
static +DomConstructorHTMLHtmlElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLHtmlElement> & MSHTML$_DomConstructor__DomConstructorHTMLHtmlElement & 46;// 46
static +DomConstructorHTMLIFrameElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLIFrameElement> & MSHTML$_DomConstructor__DomConstructorHTMLIFrameElement & 47;// 47
static +DomConstructorHTMLImageElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLImageElement> & MSHTML$_DomConstructor__DomConstructorHTMLImageElement & 48;// 48
static +DomConstructorHTMLInputElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLInputElement> & MSHTML$_DomConstructor__DomConstructorHTMLInputElement & 49;// 49
static +DomConstructorHTMLIsIndexElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLIsIndexElement> & MSHTML$_DomConstructor__DomConstructorHTMLIsIndexElement & 50;// 50
static +DomConstructorHTMLLabelElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLLabelElement> & MSHTML$_DomConstructor__DomConstructorHTMLLabelElement & 51;// 51
static +DomConstructorHTMLLegendElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLLegendElement> & MSHTML$_DomConstructor__DomConstructorHTMLLegendElement & 52;// 52
static +DomConstructorHTMLLIElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLLIElement> & MSHTML$_DomConstructor__DomConstructorHTMLLIElement & 53;// 53
static +DomConstructorHTMLLinkElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLLinkElement> & MSHTML$_DomConstructor__DomConstructorHTMLLinkElement & 54;// 54
static +DomConstructorHTMLMapElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLMapElement> & MSHTML$_DomConstructor__DomConstructorHTMLMapElement & 55;// 55
static +DomConstructorHTMLMarqueeElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLMarqueeElement> & MSHTML$_DomConstructor__DomConstructorHTMLMarqueeElement & 56;// 56
static +DomConstructorHTMLMetaElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLMetaElement> & MSHTML$_DomConstructor__DomConstructorHTMLMetaElement & 57;// 57
static +DomConstructorHTMLModelessDialog: Class<MSHTML$_DomConstructor__DomConstructorHTMLModelessDialog> & MSHTML$_DomConstructor__DomConstructorHTMLModelessDialog & 58;// 58
static +DomConstructorHTMLNamespaceInfo: Class<MSHTML$_DomConstructor__DomConstructorHTMLNamespaceInfo> & MSHTML$_DomConstructor__DomConstructorHTMLNamespaceInfo & 59;// 59
static +DomConstructorHTMLNamespaceInfoCollection: Class<MSHTML$_DomConstructor__DomConstructorHTMLNamespaceInfoCollection> & MSHTML$_DomConstructor__DomConstructorHTMLNamespaceInfoCollection & 60;// 60
static +DomConstructorHTMLNextIdElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLNextIdElement> & MSHTML$_DomConstructor__DomConstructorHTMLNextIdElement & 61;// 61
static +DomConstructorHTMLNoShowElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLNoShowElement> & MSHTML$_DomConstructor__DomConstructorHTMLNoShowElement & 62;// 62
static +DomConstructorHTMLObjectElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLObjectElement> & MSHTML$_DomConstructor__DomConstructorHTMLObjectElement & 63;// 63
static +DomConstructorHTMLOListElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLOListElement> & MSHTML$_DomConstructor__DomConstructorHTMLOListElement & 64;// 64
static +DomConstructorHTMLOptionElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLOptionElement> & MSHTML$_DomConstructor__DomConstructorHTMLOptionElement & 65;// 65
static +DomConstructorHTMLParagraphElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLParagraphElement> & MSHTML$_DomConstructor__DomConstructorHTMLParagraphElement & 66;// 66
static +DomConstructorHTMLParamElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLParamElement> & MSHTML$_DomConstructor__DomConstructorHTMLParamElement & 67;// 67
static +DomConstructorHTMLPhraseElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLPhraseElement> & MSHTML$_DomConstructor__DomConstructorHTMLPhraseElement & 68;// 68
static +DomConstructorHTMLPluginsCollection: Class<MSHTML$_DomConstructor__DomConstructorHTMLPluginsCollection> & MSHTML$_DomConstructor__DomConstructorHTMLPluginsCollection & 69;// 69
static +DomConstructorHTMLPopup: Class<MSHTML$_DomConstructor__DomConstructorHTMLPopup> & MSHTML$_DomConstructor__DomConstructorHTMLPopup & 70;// 70
static +DomConstructorHTMLScriptElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLScriptElement> & MSHTML$_DomConstructor__DomConstructorHTMLScriptElement & 71;// 71
static +DomConstructorHTMLSelectElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLSelectElement> & MSHTML$_DomConstructor__DomConstructorHTMLSelectElement & 72;// 72
static +DomConstructorHTMLSpanElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLSpanElement> & MSHTML$_DomConstructor__DomConstructorHTMLSpanElement & 73;// 73
static +DomConstructorHTMLStyleElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLStyleElement> & MSHTML$_DomConstructor__DomConstructorHTMLStyleElement & 74;// 74
static +DomConstructorHTMLTableCaptionElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLTableCaptionElement> & MSHTML$_DomConstructor__DomConstructorHTMLTableCaptionElement & 75;// 75
static +DomConstructorHTMLTableCellElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLTableCellElement> & MSHTML$_DomConstructor__DomConstructorHTMLTableCellElement & 76;// 76
static +DomConstructorHTMLTableColElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLTableColElement> & MSHTML$_DomConstructor__DomConstructorHTMLTableColElement & 77;// 77
static +DomConstructorHTMLTableElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLTableElement> & MSHTML$_DomConstructor__DomConstructorHTMLTableElement & 78;// 78
static +DomConstructorHTMLTableRowElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLTableRowElement> & MSHTML$_DomConstructor__DomConstructorHTMLTableRowElement & 79;// 79
static +DomConstructorHTMLTableSectionElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLTableSectionElement> & MSHTML$_DomConstructor__DomConstructorHTMLTableSectionElement & 80;// 80
static +DomConstructorHTMLTextAreaElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLTextAreaElement> & MSHTML$_DomConstructor__DomConstructorHTMLTextAreaElement & 81;// 81
static +DomConstructorHTMLTextElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLTextElement> & MSHTML$_DomConstructor__DomConstructorHTMLTextElement & 82;// 82
static +DomConstructorHTMLTitleElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLTitleElement> & MSHTML$_DomConstructor__DomConstructorHTMLTitleElement & 83;// 83
static +DomConstructorHTMLUListElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLUListElement> & MSHTML$_DomConstructor__DomConstructorHTMLUListElement & 84;// 84
static +DomConstructorHTMLUnknownElement: Class<MSHTML$_DomConstructor__DomConstructorHTMLUnknownElement> & MSHTML$_DomConstructor__DomConstructorHTMLUnknownElement & 85;// 85
static +DomConstructorImage: Class<MSHTML$_DomConstructor__DomConstructorImage> & MSHTML$_DomConstructor__DomConstructorImage & 86;// 86
static +DomConstructorLocation: Class<MSHTML$_DomConstructor__DomConstructorLocation> & MSHTML$_DomConstructor__DomConstructorLocation & 87;// 87
static +DomConstructorMax: Class<MSHTML$_DomConstructor__DomConstructorMax> & MSHTML$_DomConstructor__DomConstructorMax & 107;// 107
static +DomConstructorNamedNodeMap: Class<MSHTML$_DomConstructor__DomConstructorNamedNodeMap> & MSHTML$_DomConstructor__DomConstructorNamedNodeMap & 88;// 88
static +DomConstructorNavigator: Class<MSHTML$_DomConstructor__DomConstructorNavigator> & MSHTML$_DomConstructor__DomConstructorNavigator & 89;// 89
static +DomConstructorNodeList: Class<MSHTML$_DomConstructor__DomConstructorNodeList> & MSHTML$_DomConstructor__DomConstructorNodeList & 90;// 90
static +DomConstructorObject: Class<MSHTML$_DomConstructor__DomConstructorObject> & MSHTML$_DomConstructor__DomConstructorObject & 0;// 0
static +DomConstructorOption: Class<MSHTML$_DomConstructor__DomConstructorOption> & MSHTML$_DomConstructor__DomConstructorOption & 91;// 91
static +DomConstructorScreen: Class<MSHTML$_DomConstructor__DomConstructorScreen> & MSHTML$_DomConstructor__DomConstructorScreen & 92;// 92
static +DomConstructorSelection: Class<MSHTML$_DomConstructor__DomConstructorSelection> & MSHTML$_DomConstructor__DomConstructorSelection & 93;// 93
static +DomConstructorStaticNodeList: Class<MSHTML$_DomConstructor__DomConstructorStaticNodeList> & MSHTML$_DomConstructor__DomConstructorStaticNodeList & 94;// 94
static +DomConstructorStorage: Class<MSHTML$_DomConstructor__DomConstructorStorage> & MSHTML$_DomConstructor__DomConstructorStorage & 95;// 95
static +DomConstructorStyleSheetList: Class<MSHTML$_DomConstructor__DomConstructorStyleSheetList> & MSHTML$_DomConstructor__DomConstructorStyleSheetList & 96;// 96
static +DomConstructorStyleSheetPage: Class<MSHTML$_DomConstructor__DomConstructorStyleSheetPage> & MSHTML$_DomConstructor__DomConstructorStyleSheetPage & 97;// 97
static +DomConstructorStyleSheetPageList: Class<MSHTML$_DomConstructor__DomConstructorStyleSheetPageList> & MSHTML$_DomConstructor__DomConstructorStyleSheetPageList & 98;// 98
static +DomConstructorText: Class<MSHTML$_DomConstructor__DomConstructorText> & MSHTML$_DomConstructor__DomConstructorText & 99;// 99
static +DomConstructorTextRange: Class<MSHTML$_DomConstructor__DomConstructorTextRange> & MSHTML$_DomConstructor__DomConstructorTextRange & 100;// 100
static +DomConstructorTextRangeCollection: Class<MSHTML$_DomConstructor__DomConstructorTextRangeCollection> & MSHTML$_DomConstructor__DomConstructorTextRangeCollection & 101;// 101
static +DomConstructorTextRectangle: Class<MSHTML$_DomConstructor__DomConstructorTextRectangle> & MSHTML$_DomConstructor__DomConstructorTextRectangle & 102;// 102
static +DomConstructorTextRectangleList: Class<MSHTML$_DomConstructor__DomConstructorTextRectangleList> & MSHTML$_DomConstructor__DomConstructorTextRectangleList & 103;// 103
static +DomConstructorWindow: Class<MSHTML$_DomConstructor__DomConstructorWindow> & MSHTML$_DomConstructor__DomConstructorWindow & 104;// 104
static +DomConstructorXDomainRequest: Class<MSHTML$_DomConstructor__DomConstructorXDomainRequest> & MSHTML$_DomConstructor__DomConstructorXDomainRequest & 105;// 105
static +DomConstructorXMLHttpRequest: Class<MSHTML$_DomConstructor__DomConstructorXMLHttpRequest> & MSHTML$_DomConstructor__DomConstructorXMLHttpRequest & 106;// 106

}

declare class MSHTML$_DomConstructor__DomConstructor_Max mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorAttr mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorBehaviorUrnsCollection mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorBookmarkCollection mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorCompatibleInfo mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorCompatibleInfoCollection mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorControlRangeCollection mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorCSSCurrentStyleDeclaration mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorCSSRuleList mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorCSSRuleStyleDeclaration mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorCSSStyleDeclaration mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorCSSStyleRule mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorCSSStyleSheet mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorDataTransfer mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorDOMImplementation mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorEvent mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHistory mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTCElementBehaviorDefaults mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLAnchorElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLAreaElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLAreasCollection mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLBaseElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLBaseFontElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLBGSoundElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLBlockElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLBodyElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLBRElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLButtonElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLCollection mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLCommentElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLDDElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLDivElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLDListElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLDocument mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLDTElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLEmbedElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLFieldSetElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLFontElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLFormElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLFrameElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLFrameSetElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLGenericElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLHeadElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLHeadingElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLHRElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLHtmlElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLIFrameElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLImageElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLInputElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLIsIndexElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLLabelElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLLegendElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLLIElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLLinkElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLMapElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLMarqueeElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLMetaElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLModelessDialog mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLNamespaceInfo mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLNamespaceInfoCollection mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLNextIdElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLNoShowElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLObjectElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLOListElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLOptionElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLParagraphElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLParamElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLPhraseElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLPluginsCollection mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLPopup mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLScriptElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLSelectElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLSpanElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLStyleElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLTableCaptionElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLTableCellElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLTableColElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLTableElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLTableRowElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLTableSectionElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLTextAreaElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLTextElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLTitleElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLUListElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorHTMLUnknownElement mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorImage mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorLocation mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorMax mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorNamedNodeMap mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorNavigator mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorNodeList mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorObject mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorOption mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorScreen mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorSelection mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorStaticNodeList mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorStorage mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorStyleSheetList mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorStyleSheetPage mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorStyleSheetPageList mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorText mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorTextRange mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorTextRangeCollection mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorTextRectangle mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorTextRectangleList mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorWindow mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorXDomainRequest mixins MSHTML$_DomConstructor {}
declare class MSHTML$_DomConstructor__DomConstructorXMLHttpRequest mixins MSHTML$_DomConstructor {}


declare  class MSHTML$_ELEMENT_ADJACENCY {
  constructor(...args: empty): mixed;
static +ELEM_ADJ_AfterBegin: Class<MSHTML$_ELEMENT_ADJACENCY__ELEM_ADJ_AfterBegin> & MSHTML$_ELEMENT_ADJACENCY__ELEM_ADJ_AfterBegin & 1;// 1
static +ELEM_ADJ_AfterEnd: Class<MSHTML$_ELEMENT_ADJACENCY__ELEM_ADJ_AfterEnd> & MSHTML$_ELEMENT_ADJACENCY__ELEM_ADJ_AfterEnd & 3;// 3
static +ELEM_ADJ_BeforeBegin: Class<MSHTML$_ELEMENT_ADJACENCY__ELEM_ADJ_BeforeBegin> & MSHTML$_ELEMENT_ADJACENCY__ELEM_ADJ_BeforeBegin & 0;// 0
static +ELEM_ADJ_BeforeEnd: Class<MSHTML$_ELEMENT_ADJACENCY__ELEM_ADJ_BeforeEnd> & MSHTML$_ELEMENT_ADJACENCY__ELEM_ADJ_BeforeEnd & 2;// 2
static +ELEMENT_ADJACENCY_Max: Class<MSHTML$_ELEMENT_ADJACENCY__ELEMENT_ADJACENCY_Max> & MSHTML$_ELEMENT_ADJACENCY__ELEMENT_ADJACENCY_Max & 2147483647;// 2147483647

}

declare class MSHTML$_ELEMENT_ADJACENCY__ELEM_ADJ_AfterBegin mixins MSHTML$_ELEMENT_ADJACENCY {}
declare class MSHTML$_ELEMENT_ADJACENCY__ELEM_ADJ_AfterEnd mixins MSHTML$_ELEMENT_ADJACENCY {}
declare class MSHTML$_ELEMENT_ADJACENCY__ELEM_ADJ_BeforeBegin mixins MSHTML$_ELEMENT_ADJACENCY {}
declare class MSHTML$_ELEMENT_ADJACENCY__ELEM_ADJ_BeforeEnd mixins MSHTML$_ELEMENT_ADJACENCY {}
declare class MSHTML$_ELEMENT_ADJACENCY__ELEMENT_ADJACENCY_Max mixins MSHTML$_ELEMENT_ADJACENCY {}


declare  class MSHTML$_ELEMENT_CORNER {
  constructor(...args: empty): mixed;
static +ELEMENT_CORNER_BOTTOM: Class<MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_BOTTOM> & MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_BOTTOM & 3;// 3
static +ELEMENT_CORNER_BOTTOMLEFT: Class<MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_BOTTOMLEFT> & MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_BOTTOMLEFT & 7;// 7
static +ELEMENT_CORNER_BOTTOMRIGHT: Class<MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_BOTTOMRIGHT> & MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_BOTTOMRIGHT & 8;// 8
static +ELEMENT_CORNER_LEFT: Class<MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_LEFT> & MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_LEFT & 2;// 2
static +ELEMENT_CORNER_Max: Class<MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_Max> & MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_Max & 2147483647;// 2147483647
static +ELEMENT_CORNER_NONE: Class<MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_NONE> & MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_NONE & 0;// 0
static +ELEMENT_CORNER_RIGHT: Class<MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_RIGHT> & MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_RIGHT & 4;// 4
static +ELEMENT_CORNER_TOP: Class<MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_TOP> & MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_TOP & 1;// 1
static +ELEMENT_CORNER_TOPLEFT: Class<MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_TOPLEFT> & MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_TOPLEFT & 5;// 5
static +ELEMENT_CORNER_TOPRIGHT: Class<MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_TOPRIGHT> & MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_TOPRIGHT & 6;// 6

}

declare class MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_BOTTOM mixins MSHTML$_ELEMENT_CORNER {}
declare class MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_BOTTOMLEFT mixins MSHTML$_ELEMENT_CORNER {}
declare class MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_BOTTOMRIGHT mixins MSHTML$_ELEMENT_CORNER {}
declare class MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_LEFT mixins MSHTML$_ELEMENT_CORNER {}
declare class MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_Max mixins MSHTML$_ELEMENT_CORNER {}
declare class MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_NONE mixins MSHTML$_ELEMENT_CORNER {}
declare class MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_RIGHT mixins MSHTML$_ELEMENT_CORNER {}
declare class MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_TOP mixins MSHTML$_ELEMENT_CORNER {}
declare class MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_TOPLEFT mixins MSHTML$_ELEMENT_CORNER {}
declare class MSHTML$_ELEMENT_CORNER__ELEMENT_CORNER_TOPRIGHT mixins MSHTML$_ELEMENT_CORNER {}


declare  class MSHTML$_ELEMENT_TAG_ID {
  constructor(...args: empty): mixed;
static +ELEMENT_TAG_ID_Max: Class<MSHTML$_ELEMENT_TAG_ID__ELEMENT_TAG_ID_Max> & MSHTML$_ELEMENT_TAG_ID__ELEMENT_TAG_ID_Max & 2147483647;// 2147483647
static +TAGID_A: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_A> & MSHTML$_ELEMENT_TAG_ID__TAGID_A & 2;// 2
static +TAGID_ABBR: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_ABBR> & MSHTML$_ELEMENT_TAG_ID__TAGID_ABBR & 110;// 110
static +TAGID_ACRONYM: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_ACRONYM> & MSHTML$_ELEMENT_TAG_ID__TAGID_ACRONYM & 3;// 3
static +TAGID_ADDRESS: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_ADDRESS> & MSHTML$_ELEMENT_TAG_ID__TAGID_ADDRESS & 4;// 4
static +TAGID_APPLET: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_APPLET> & MSHTML$_ELEMENT_TAG_ID__TAGID_APPLET & 5;// 5
static +TAGID_AREA: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_AREA> & MSHTML$_ELEMENT_TAG_ID__TAGID_AREA & 6;// 6
static +TAGID_ARTICLE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_ARTICLE> & MSHTML$_ELEMENT_TAG_ID__TAGID_ARTICLE & 199;// 199
static +TAGID_ASIDE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_ASIDE> & MSHTML$_ELEMENT_TAG_ID__TAGID_ASIDE & 200;// 200
static +TAGID_AUDIO: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_AUDIO> & MSHTML$_ELEMENT_TAG_ID__TAGID_AUDIO & 192;// 192
static +TAGID_B: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_B> & MSHTML$_ELEMENT_TAG_ID__TAGID_B & 7;// 7
static +TAGID_BASE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_BASE> & MSHTML$_ELEMENT_TAG_ID__TAGID_BASE & 8;// 8
static +TAGID_BASEFONT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_BASEFONT> & MSHTML$_ELEMENT_TAG_ID__TAGID_BASEFONT & 9;// 9
static +TAGID_BDO: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_BDO> & MSHTML$_ELEMENT_TAG_ID__TAGID_BDO & 10;// 10
static +TAGID_BGSOUND: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_BGSOUND> & MSHTML$_ELEMENT_TAG_ID__TAGID_BGSOUND & 11;// 11
static +TAGID_BIG: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_BIG> & MSHTML$_ELEMENT_TAG_ID__TAGID_BIG & 12;// 12
static +TAGID_BLINK: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_BLINK> & MSHTML$_ELEMENT_TAG_ID__TAGID_BLINK & 13;// 13
static +TAGID_BLOCKQUOTE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_BLOCKQUOTE> & MSHTML$_ELEMENT_TAG_ID__TAGID_BLOCKQUOTE & 14;// 14
static +TAGID_BODY: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_BODY> & MSHTML$_ELEMENT_TAG_ID__TAGID_BODY & 15;// 15
static +TAGID_BR: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_BR> & MSHTML$_ELEMENT_TAG_ID__TAGID_BR & 16;// 16
static +TAGID_BUTTON: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_BUTTON> & MSHTML$_ELEMENT_TAG_ID__TAGID_BUTTON & 17;// 17
static +TAGID_CANVAS: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_CANVAS> & MSHTML$_ELEMENT_TAG_ID__TAGID_CANVAS & 195;// 195
static +TAGID_CAPTION: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_CAPTION> & MSHTML$_ELEMENT_TAG_ID__TAGID_CAPTION & 18;// 18
static +TAGID_CENTER: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_CENTER> & MSHTML$_ELEMENT_TAG_ID__TAGID_CENTER & 19;// 19
static +TAGID_CITE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_CITE> & MSHTML$_ELEMENT_TAG_ID__TAGID_CITE & 20;// 20
static +TAGID_CODE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_CODE> & MSHTML$_ELEMENT_TAG_ID__TAGID_CODE & 21;// 21
static +TAGID_COL: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_COL> & MSHTML$_ELEMENT_TAG_ID__TAGID_COL & 22;// 22
static +TAGID_COLGROUP: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_COLGROUP> & MSHTML$_ELEMENT_TAG_ID__TAGID_COLGROUP & 23;// 23
static +TAGID_COMMAND: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_COMMAND> & MSHTML$_ELEMENT_TAG_ID__TAGID_COMMAND & 220;// 220
static +TAGID_COMMENT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_COMMENT> & MSHTML$_ELEMENT_TAG_ID__TAGID_COMMENT & 24;// 24
static +TAGID_COMMENT_RAW: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_COMMENT_RAW> & MSHTML$_ELEMENT_TAG_ID__TAGID_COMMENT_RAW & 25;// 25
static +TAGID_COUNT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_COUNT> & MSHTML$_ELEMENT_TAG_ID__TAGID_COUNT & 224;// 224
static +TAGID_DATALIST: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_DATALIST> & MSHTML$_ELEMENT_TAG_ID__TAGID_DATALIST & 217;// 217
static +TAGID_DD: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_DD> & MSHTML$_ELEMENT_TAG_ID__TAGID_DD & 26;// 26
static +TAGID_DEL: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_DEL> & MSHTML$_ELEMENT_TAG_ID__TAGID_DEL & 27;// 27
static +TAGID_DETAILS: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_DETAILS> & MSHTML$_ELEMENT_TAG_ID__TAGID_DETAILS & 221;// 221
static +TAGID_DFN: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_DFN> & MSHTML$_ELEMENT_TAG_ID__TAGID_DFN & 28;// 28
static +TAGID_DIR: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_DIR> & MSHTML$_ELEMENT_TAG_ID__TAGID_DIR & 29;// 29
static +TAGID_DIV: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_DIV> & MSHTML$_ELEMENT_TAG_ID__TAGID_DIV & 30;// 30
static +TAGID_DL: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_DL> & MSHTML$_ELEMENT_TAG_ID__TAGID_DL & 31;// 31
static +TAGID_DOCTYPE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_DOCTYPE> & MSHTML$_ELEMENT_TAG_ID__TAGID_DOCTYPE & 196;// 196
static +TAGID_DT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_DT> & MSHTML$_ELEMENT_TAG_ID__TAGID_DT & 32;// 32
static +TAGID_EM: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_EM> & MSHTML$_ELEMENT_TAG_ID__TAGID_EM & 33;// 33
static +TAGID_EMBED: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_EMBED> & MSHTML$_ELEMENT_TAG_ID__TAGID_EMBED & 34;// 34
static +TAGID_FIELDSET: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_FIELDSET> & MSHTML$_ELEMENT_TAG_ID__TAGID_FIELDSET & 35;// 35
static +TAGID_FIGCAPTION: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_FIGCAPTION> & MSHTML$_ELEMENT_TAG_ID__TAGID_FIGCAPTION & 201;// 201
static +TAGID_FIGURE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_FIGURE> & MSHTML$_ELEMENT_TAG_ID__TAGID_FIGURE & 202;// 202
static +TAGID_FONT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_FONT> & MSHTML$_ELEMENT_TAG_ID__TAGID_FONT & 36;// 36
static +TAGID_FOOTER: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_FOOTER> & MSHTML$_ELEMENT_TAG_ID__TAGID_FOOTER & 203;// 203
static +TAGID_FORM: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_FORM> & MSHTML$_ELEMENT_TAG_ID__TAGID_FORM & 37;// 37
static +TAGID_FRAME: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_FRAME> & MSHTML$_ELEMENT_TAG_ID__TAGID_FRAME & 38;// 38
static +TAGID_FRAMESET: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_FRAMESET> & MSHTML$_ELEMENT_TAG_ID__TAGID_FRAMESET & 39;// 39
static +TAGID_GENERIC: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_GENERIC> & MSHTML$_ELEMENT_TAG_ID__TAGID_GENERIC & 40;// 40
static +TAGID_H1: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_H1> & MSHTML$_ELEMENT_TAG_ID__TAGID_H1 & 41;// 41
static +TAGID_H2: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_H2> & MSHTML$_ELEMENT_TAG_ID__TAGID_H2 & 42;// 42
static +TAGID_H3: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_H3> & MSHTML$_ELEMENT_TAG_ID__TAGID_H3 & 43;// 43
static +TAGID_H4: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_H4> & MSHTML$_ELEMENT_TAG_ID__TAGID_H4 & 44;// 44
static +TAGID_H5: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_H5> & MSHTML$_ELEMENT_TAG_ID__TAGID_H5 & 45;// 45
static +TAGID_H6: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_H6> & MSHTML$_ELEMENT_TAG_ID__TAGID_H6 & 46;// 46
static +TAGID_HEAD: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_HEAD> & MSHTML$_ELEMENT_TAG_ID__TAGID_HEAD & 47;// 47
static +TAGID_HEADER: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_HEADER> & MSHTML$_ELEMENT_TAG_ID__TAGID_HEADER & 204;// 204
static +TAGID_HGROUP: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_HGROUP> & MSHTML$_ELEMENT_TAG_ID__TAGID_HGROUP & 205;// 205
static +TAGID_HR: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_HR> & MSHTML$_ELEMENT_TAG_ID__TAGID_HR & 48;// 48
static +TAGID_HTML: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_HTML> & MSHTML$_ELEMENT_TAG_ID__TAGID_HTML & 49;// 49
static +TAGID_I: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_I> & MSHTML$_ELEMENT_TAG_ID__TAGID_I & 50;// 50
static +TAGID_IFRAME: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_IFRAME> & MSHTML$_ELEMENT_TAG_ID__TAGID_IFRAME & 51;// 51
static +TAGID_IMG: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_IMG> & MSHTML$_ELEMENT_TAG_ID__TAGID_IMG & 52;// 52
static +TAGID_INPUT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_INPUT> & MSHTML$_ELEMENT_TAG_ID__TAGID_INPUT & 53;// 53
static +TAGID_INS: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_INS> & MSHTML$_ELEMENT_TAG_ID__TAGID_INS & 54;// 54
static +TAGID_ISINDEX: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_ISINDEX> & MSHTML$_ELEMENT_TAG_ID__TAGID_ISINDEX & 219;// 219
static +TAGID_KBD: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_KBD> & MSHTML$_ELEMENT_TAG_ID__TAGID_KBD & 55;// 55
static +TAGID_KEYGEN: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_KEYGEN> & MSHTML$_ELEMENT_TAG_ID__TAGID_KEYGEN & 197;// 197
static +TAGID_LABEL: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_LABEL> & MSHTML$_ELEMENT_TAG_ID__TAGID_LABEL & 56;// 56
static +TAGID_LAST_PREDEFINED: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_LAST_PREDEFINED> & MSHTML$_ELEMENT_TAG_ID__TAGID_LAST_PREDEFINED & 10000;// 10000
static +TAGID_LEGEND: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_LEGEND> & MSHTML$_ELEMENT_TAG_ID__TAGID_LEGEND & 57;// 57
static +TAGID_LI: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_LI> & MSHTML$_ELEMENT_TAG_ID__TAGID_LI & 58;// 58
static +TAGID_LINK: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_LINK> & MSHTML$_ELEMENT_TAG_ID__TAGID_LINK & 59;// 59
static +TAGID_LISTING: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_LISTING> & MSHTML$_ELEMENT_TAG_ID__TAGID_LISTING & 60;// 60
static +TAGID_MAP: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_MAP> & MSHTML$_ELEMENT_TAG_ID__TAGID_MAP & 61;// 61
static +TAGID_MARK: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_MARK> & MSHTML$_ELEMENT_TAG_ID__TAGID_MARK & 206;// 206
static +TAGID_MARQUEE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_MARQUEE> & MSHTML$_ELEMENT_TAG_ID__TAGID_MARQUEE & 62;// 62
static +TAGID_MATHML_ANNOTATION_XML: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_ANNOTATION_XML> & MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_ANNOTATION_XML & 210;// 210
static +TAGID_MATHML_MATH: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MATH> & MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MATH & 211;// 211
static +TAGID_MATHML_MI: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MI> & MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MI & 212;// 212
static +TAGID_MATHML_MN: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MN> & MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MN & 213;// 213
static +TAGID_MATHML_MO: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MO> & MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MO & 214;// 214
static +TAGID_MATHML_MS: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MS> & MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MS & 215;// 215
static +TAGID_MATHML_MTEXT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MTEXT> & MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MTEXT & 216;// 216
static +TAGID_MENU: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_MENU> & MSHTML$_ELEMENT_TAG_ID__TAGID_MENU & 63;// 63
static +TAGID_META: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_META> & MSHTML$_ELEMENT_TAG_ID__TAGID_META & 64;// 64
static +TAGID_NAV: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_NAV> & MSHTML$_ELEMENT_TAG_ID__TAGID_NAV & 207;// 207
static +TAGID_NEXTID: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_NEXTID> & MSHTML$_ELEMENT_TAG_ID__TAGID_NEXTID & 65;// 65
static +TAGID_NOBR: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_NOBR> & MSHTML$_ELEMENT_TAG_ID__TAGID_NOBR & 66;// 66
static +TAGID_NOEMBED: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_NOEMBED> & MSHTML$_ELEMENT_TAG_ID__TAGID_NOEMBED & 67;// 67
static +TAGID_NOFRAMES: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_NOFRAMES> & MSHTML$_ELEMENT_TAG_ID__TAGID_NOFRAMES & 68;// 68
static +TAGID_NOSCRIPT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_NOSCRIPT> & MSHTML$_ELEMENT_TAG_ID__TAGID_NOSCRIPT & 69;// 69
static +TAGID_NULL: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_NULL> & MSHTML$_ELEMENT_TAG_ID__TAGID_NULL & 0;// 0
static +TAGID_OBJECT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_OBJECT> & MSHTML$_ELEMENT_TAG_ID__TAGID_OBJECT & 70;// 70
static +TAGID_OL: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_OL> & MSHTML$_ELEMENT_TAG_ID__TAGID_OL & 71;// 71
static +TAGID_OPTGROUP: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_OPTGROUP> & MSHTML$_ELEMENT_TAG_ID__TAGID_OPTGROUP & 109;// 109
static +TAGID_OPTION: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_OPTION> & MSHTML$_ELEMENT_TAG_ID__TAGID_OPTION & 72;// 72
static +TAGID_P: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_P> & MSHTML$_ELEMENT_TAG_ID__TAGID_P & 73;// 73
static +TAGID_PARAM: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_PARAM> & MSHTML$_ELEMENT_TAG_ID__TAGID_PARAM & 74;// 74
static +TAGID_PLAINTEXT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_PLAINTEXT> & MSHTML$_ELEMENT_TAG_ID__TAGID_PLAINTEXT & 75;// 75
static +TAGID_PRE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_PRE> & MSHTML$_ELEMENT_TAG_ID__TAGID_PRE & 76;// 76
static +TAGID_PROCESSINGINSTRUCTION: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_PROCESSINGINSTRUCTION> & MSHTML$_ELEMENT_TAG_ID__TAGID_PROCESSINGINSTRUCTION & 198;// 198
static +TAGID_PROGRESS: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_PROGRESS> & MSHTML$_ELEMENT_TAG_ID__TAGID_PROGRESS & 209;// 209
static +TAGID_Q: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_Q> & MSHTML$_ELEMENT_TAG_ID__TAGID_Q & 77;// 77
static +TAGID_ROOT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_ROOT> & MSHTML$_ELEMENT_TAG_ID__TAGID_ROOT & 108;// 108
static +TAGID_RP: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_RP> & MSHTML$_ELEMENT_TAG_ID__TAGID_RP & 78;// 78
static +TAGID_RT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_RT> & MSHTML$_ELEMENT_TAG_ID__TAGID_RT & 79;// 79
static +TAGID_RUBY: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_RUBY> & MSHTML$_ELEMENT_TAG_ID__TAGID_RUBY & 80;// 80
static +TAGID_S: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_S> & MSHTML$_ELEMENT_TAG_ID__TAGID_S & 81;// 81
static +TAGID_SAMP: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SAMP> & MSHTML$_ELEMENT_TAG_ID__TAGID_SAMP & 82;// 82
static +TAGID_SCRIPT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SCRIPT> & MSHTML$_ELEMENT_TAG_ID__TAGID_SCRIPT & 83;// 83
static +TAGID_SECTION: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SECTION> & MSHTML$_ELEMENT_TAG_ID__TAGID_SECTION & 208;// 208
static +TAGID_SELECT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SELECT> & MSHTML$_ELEMENT_TAG_ID__TAGID_SELECT & 84;// 84
static +TAGID_SMALL: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SMALL> & MSHTML$_ELEMENT_TAG_ID__TAGID_SMALL & 85;// 85
static +TAGID_SOURCE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SOURCE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SOURCE & 193;// 193
static +TAGID_SPAN: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SPAN> & MSHTML$_ELEMENT_TAG_ID__TAGID_SPAN & 86;// 86
static +TAGID_STRIKE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_STRIKE> & MSHTML$_ELEMENT_TAG_ID__TAGID_STRIKE & 87;// 87
static +TAGID_STRONG: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_STRONG> & MSHTML$_ELEMENT_TAG_ID__TAGID_STRONG & 88;// 88
static +TAGID_STYLE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_STYLE> & MSHTML$_ELEMENT_TAG_ID__TAGID_STYLE & 89;// 89
static +TAGID_SUB: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SUB> & MSHTML$_ELEMENT_TAG_ID__TAGID_SUB & 90;// 90
static +TAGID_SUMMARY: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SUMMARY> & MSHTML$_ELEMENT_TAG_ID__TAGID_SUMMARY & 222;// 222
static +TAGID_SUP: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SUP> & MSHTML$_ELEMENT_TAG_ID__TAGID_SUP & 91;// 91
static +TAGID_SVG_A: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_A> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_A & 111;// 111
static +TAGID_SVG_ALTGLYPH: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ALTGLYPH> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ALTGLYPH & 112;// 112
static +TAGID_SVG_ALTGLYPHDEF: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ALTGLYPHDEF> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ALTGLYPHDEF & 113;// 113
static +TAGID_SVG_ALTGLYPHITEM: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ALTGLYPHITEM> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ALTGLYPHITEM & 114;// 114
static +TAGID_SVG_ANIMATE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ANIMATE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ANIMATE & 115;// 115
static +TAGID_SVG_ANIMATECOLOR: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ANIMATECOLOR> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ANIMATECOLOR & 116;// 116
static +TAGID_SVG_ANIMATEMOTION: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ANIMATEMOTION> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ANIMATEMOTION & 117;// 117
static +TAGID_SVG_ANIMATETRANSFORM: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ANIMATETRANSFORM> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ANIMATETRANSFORM & 118;// 118
static +TAGID_SVG_CIRCLE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_CIRCLE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_CIRCLE & 119;// 119
static +TAGID_SVG_CLIPPATH: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_CLIPPATH> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_CLIPPATH & 120;// 120
static +TAGID_SVG_COLOR_PROFILE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_COLOR_PROFILE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_COLOR_PROFILE & 121;// 121
static +TAGID_SVG_CURSOR: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_CURSOR> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_CURSOR & 122;// 122
static +TAGID_SVG_DEFINITION_SRC: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_DEFINITION_SRC> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_DEFINITION_SRC & 123;// 123
static +TAGID_SVG_DEFS: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_DEFS> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_DEFS & 124;// 124
static +TAGID_SVG_DESC: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_DESC> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_DESC & 125;// 125
static +TAGID_SVG_ELLIPSE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ELLIPSE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ELLIPSE & 126;// 126
static +TAGID_SVG_FEBLEND: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEBLEND> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEBLEND & 127;// 127
static +TAGID_SVG_FECOLORMATRIX: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FECOLORMATRIX> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FECOLORMATRIX & 128;// 128
static +TAGID_SVG_FECOMPONENTTRANSFER: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FECOMPONENTTRANSFER> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FECOMPONENTTRANSFER & 129;// 129
static +TAGID_SVG_FECOMPOSITE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FECOMPOSITE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FECOMPOSITE & 130;// 130
static +TAGID_SVG_FECONVOLVEMATRIX: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FECONVOLVEMATRIX> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FECONVOLVEMATRIX & 131;// 131
static +TAGID_SVG_FEDIFFUSELIGHTING: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEDIFFUSELIGHTING> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEDIFFUSELIGHTING & 132;// 132
static +TAGID_SVG_FEDISPLACEMENTMAP: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEDISPLACEMENTMAP> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEDISPLACEMENTMAP & 133;// 133
static +TAGID_SVG_FEDISTANTLIGHT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEDISTANTLIGHT> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEDISTANTLIGHT & 134;// 134
static +TAGID_SVG_FEFLOOD: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEFLOOD> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEFLOOD & 135;// 135
static +TAGID_SVG_FEFUNCA: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEFUNCA> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEFUNCA & 136;// 136
static +TAGID_SVG_FEFUNCB: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEFUNCB> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEFUNCB & 137;// 137
static +TAGID_SVG_FEFUNCG: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEFUNCG> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEFUNCG & 138;// 138
static +TAGID_SVG_FEFUNCR: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEFUNCR> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEFUNCR & 139;// 139
static +TAGID_SVG_FEGAUSSIANBLUR: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEGAUSSIANBLUR> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEGAUSSIANBLUR & 140;// 140
static +TAGID_SVG_FEIMAGE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEIMAGE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEIMAGE & 141;// 141
static +TAGID_SVG_FEMERGE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEMERGE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEMERGE & 142;// 142
static +TAGID_SVG_FEMERGENODE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEMERGENODE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEMERGENODE & 143;// 143
static +TAGID_SVG_FEMORPHOLOGY: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEMORPHOLOGY> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEMORPHOLOGY & 144;// 144
static +TAGID_SVG_FEOFFSET: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEOFFSET> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEOFFSET & 145;// 145
static +TAGID_SVG_FEPOINTLIGHT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEPOINTLIGHT> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEPOINTLIGHT & 146;// 146
static +TAGID_SVG_FESPECULARLIGHTING: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FESPECULARLIGHTING> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FESPECULARLIGHTING & 147;// 147
static +TAGID_SVG_FESPOTLIGHT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FESPOTLIGHT> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FESPOTLIGHT & 148;// 148
static +TAGID_SVG_FETILE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FETILE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FETILE & 149;// 149
static +TAGID_SVG_FETURBULENCE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FETURBULENCE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FETURBULENCE & 150;// 150
static +TAGID_SVG_FILTER: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FILTER> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FILTER & 151;// 151
static +TAGID_SVG_FONT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT & 152;// 152
static +TAGID_SVG_FONT_FACE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT_FACE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT_FACE & 153;// 153
static +TAGID_SVG_FONT_FACE_FORMAT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT_FACE_FORMAT> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT_FACE_FORMAT & 154;// 154
static +TAGID_SVG_FONT_FACE_NAME: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT_FACE_NAME> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT_FACE_NAME & 155;// 155
static +TAGID_SVG_FONT_FACE_SRC: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT_FACE_SRC> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT_FACE_SRC & 156;// 156
static +TAGID_SVG_FONT_FACE_URI: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT_FACE_URI> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT_FACE_URI & 157;// 157
static +TAGID_SVG_FOREIGNOBJECT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FOREIGNOBJECT> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FOREIGNOBJECT & 158;// 158
static +TAGID_SVG_G: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_G> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_G & 159;// 159
static +TAGID_SVG_GLYPH: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_GLYPH> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_GLYPH & 160;// 160
static +TAGID_SVG_GLYPHREF: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_GLYPHREF> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_GLYPHREF & 161;// 161
static +TAGID_SVG_HKERN: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_HKERN> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_HKERN & 162;// 162
static +TAGID_SVG_IMAGE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_IMAGE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_IMAGE & 163;// 163
static +TAGID_SVG_LINE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_LINE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_LINE & 164;// 164
static +TAGID_SVG_LINEARGRADIENT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_LINEARGRADIENT> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_LINEARGRADIENT & 165;// 165
static +TAGID_SVG_MARKER: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_MARKER> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_MARKER & 166;// 166
static +TAGID_SVG_MASK: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_MASK> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_MASK & 167;// 167
static +TAGID_SVG_METADATA: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_METADATA> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_METADATA & 168;// 168
static +TAGID_SVG_MISSING_GLYPH: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_MISSING_GLYPH> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_MISSING_GLYPH & 169;// 169
static +TAGID_SVG_MPATH: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_MPATH> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_MPATH & 170;// 170
static +TAGID_SVG_PATH: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_PATH> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_PATH & 171;// 171
static +TAGID_SVG_PATTERN: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_PATTERN> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_PATTERN & 172;// 172
static +TAGID_SVG_POLYGON: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_POLYGON> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_POLYGON & 173;// 173
static +TAGID_SVG_POLYLINE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_POLYLINE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_POLYLINE & 174;// 174
static +TAGID_SVG_RADIALGRADIENT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_RADIALGRADIENT> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_RADIALGRADIENT & 175;// 175
static +TAGID_SVG_RECT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_RECT> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_RECT & 176;// 176
static +TAGID_SVG_SCRIPT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_SCRIPT> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_SCRIPT & 177;// 177
static +TAGID_SVG_SET: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_SET> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_SET & 178;// 178
static +TAGID_SVG_STOP: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_STOP> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_STOP & 179;// 179
static +TAGID_SVG_STYLE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_STYLE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_STYLE & 180;// 180
static +TAGID_SVG_SVG: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_SVG> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_SVG & 181;// 181
static +TAGID_SVG_SWITCH: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_SWITCH> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_SWITCH & 182;// 182
static +TAGID_SVG_SYMBOL: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_SYMBOL> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_SYMBOL & 183;// 183
static +TAGID_SVG_TEXT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_TEXT> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_TEXT & 184;// 184
static +TAGID_SVG_TEXTPATH: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_TEXTPATH> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_TEXTPATH & 185;// 185
static +TAGID_SVG_TITLE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_TITLE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_TITLE & 186;// 186
static +TAGID_SVG_TREF: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_TREF> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_TREF & 187;// 187
static +TAGID_SVG_TSPAN: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_TSPAN> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_TSPAN & 188;// 188
static +TAGID_SVG_USE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_USE> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_USE & 189;// 189
static +TAGID_SVG_VIEW: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_VIEW> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_VIEW & 190;// 190
static +TAGID_SVG_VKERN: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_VKERN> & MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_VKERN & 191;// 191
static +TAGID_TABLE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_TABLE> & MSHTML$_ELEMENT_TAG_ID__TAGID_TABLE & 92;// 92
static +TAGID_TBODY: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_TBODY> & MSHTML$_ELEMENT_TAG_ID__TAGID_TBODY & 93;// 93
static +TAGID_TC: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_TC> & MSHTML$_ELEMENT_TAG_ID__TAGID_TC & 94;// 94
static +TAGID_TD: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_TD> & MSHTML$_ELEMENT_TAG_ID__TAGID_TD & 95;// 95
static +TAGID_TEXTAREA: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_TEXTAREA> & MSHTML$_ELEMENT_TAG_ID__TAGID_TEXTAREA & 96;// 96
static +TAGID_TFOOT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_TFOOT> & MSHTML$_ELEMENT_TAG_ID__TAGID_TFOOT & 97;// 97
static +TAGID_TH: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_TH> & MSHTML$_ELEMENT_TAG_ID__TAGID_TH & 98;// 98
static +TAGID_THEAD: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_THEAD> & MSHTML$_ELEMENT_TAG_ID__TAGID_THEAD & 99;// 99
static +TAGID_TITLE: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_TITLE> & MSHTML$_ELEMENT_TAG_ID__TAGID_TITLE & 100;// 100
static +TAGID_TR: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_TR> & MSHTML$_ELEMENT_TAG_ID__TAGID_TR & 101;// 101
static +TAGID_TRACK: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_TRACK> & MSHTML$_ELEMENT_TAG_ID__TAGID_TRACK & 218;// 218
static +TAGID_TT: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_TT> & MSHTML$_ELEMENT_TAG_ID__TAGID_TT & 102;// 102
static +TAGID_U: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_U> & MSHTML$_ELEMENT_TAG_ID__TAGID_U & 103;// 103
static +TAGID_UL: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_UL> & MSHTML$_ELEMENT_TAG_ID__TAGID_UL & 104;// 104
static +TAGID_UNKNOWN: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_UNKNOWN> & MSHTML$_ELEMENT_TAG_ID__TAGID_UNKNOWN & 1;// 1
static +TAGID_VAR: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_VAR> & MSHTML$_ELEMENT_TAG_ID__TAGID_VAR & 105;// 105
static +TAGID_VIDEO: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_VIDEO> & MSHTML$_ELEMENT_TAG_ID__TAGID_VIDEO & 194;// 194
static +TAGID_WBR: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_WBR> & MSHTML$_ELEMENT_TAG_ID__TAGID_WBR & 106;// 106
static +TAGID_X_MS_WEBVIEW: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_X_MS_WEBVIEW> & MSHTML$_ELEMENT_TAG_ID__TAGID_X_MS_WEBVIEW & 223;// 223
static +TAGID_XMP: Class<MSHTML$_ELEMENT_TAG_ID__TAGID_XMP> & MSHTML$_ELEMENT_TAG_ID__TAGID_XMP & 107;// 107

}

declare class MSHTML$_ELEMENT_TAG_ID__ELEMENT_TAG_ID_Max mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_A mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_ABBR mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_ACRONYM mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_ADDRESS mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_APPLET mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_AREA mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_ARTICLE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_ASIDE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_AUDIO mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_B mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_BASE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_BASEFONT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_BDO mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_BGSOUND mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_BIG mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_BLINK mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_BLOCKQUOTE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_BODY mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_BR mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_BUTTON mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_CANVAS mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_CAPTION mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_CENTER mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_CITE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_CODE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_COL mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_COLGROUP mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_COMMAND mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_COMMENT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_COMMENT_RAW mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_COUNT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_DATALIST mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_DD mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_DEL mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_DETAILS mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_DFN mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_DIR mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_DIV mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_DL mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_DOCTYPE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_DT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_EM mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_EMBED mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_FIELDSET mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_FIGCAPTION mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_FIGURE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_FONT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_FOOTER mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_FORM mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_FRAME mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_FRAMESET mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_GENERIC mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_H1 mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_H2 mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_H3 mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_H4 mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_H5 mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_H6 mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_HEAD mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_HEADER mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_HGROUP mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_HR mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_HTML mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_I mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_IFRAME mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_IMG mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_INPUT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_INS mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_ISINDEX mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_KBD mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_KEYGEN mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_LABEL mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_LAST_PREDEFINED mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_LEGEND mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_LI mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_LINK mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_LISTING mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_MAP mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_MARK mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_MARQUEE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_ANNOTATION_XML mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MATH mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MI mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MN mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MO mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MS mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_MATHML_MTEXT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_MENU mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_META mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_NAV mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_NEXTID mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_NOBR mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_NOEMBED mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_NOFRAMES mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_NOSCRIPT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_NULL mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_OBJECT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_OL mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_OPTGROUP mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_OPTION mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_P mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_PARAM mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_PLAINTEXT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_PRE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_PROCESSINGINSTRUCTION mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_PROGRESS mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_Q mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_ROOT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_RP mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_RT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_RUBY mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_S mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SAMP mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SCRIPT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SECTION mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SELECT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SMALL mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SOURCE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SPAN mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_STRIKE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_STRONG mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_STYLE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SUB mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SUMMARY mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SUP mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_A mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ALTGLYPH mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ALTGLYPHDEF mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ALTGLYPHITEM mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ANIMATE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ANIMATECOLOR mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ANIMATEMOTION mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ANIMATETRANSFORM mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_CIRCLE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_CLIPPATH mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_COLOR_PROFILE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_CURSOR mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_DEFINITION_SRC mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_DEFS mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_DESC mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_ELLIPSE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEBLEND mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FECOLORMATRIX mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FECOMPONENTTRANSFER mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FECOMPOSITE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FECONVOLVEMATRIX mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEDIFFUSELIGHTING mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEDISPLACEMENTMAP mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEDISTANTLIGHT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEFLOOD mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEFUNCA mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEFUNCB mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEFUNCG mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEFUNCR mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEGAUSSIANBLUR mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEIMAGE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEMERGE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEMERGENODE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEMORPHOLOGY mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEOFFSET mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FEPOINTLIGHT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FESPECULARLIGHTING mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FESPOTLIGHT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FETILE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FETURBULENCE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FILTER mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT_FACE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT_FACE_FORMAT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT_FACE_NAME mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT_FACE_SRC mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FONT_FACE_URI mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_FOREIGNOBJECT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_G mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_GLYPH mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_GLYPHREF mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_HKERN mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_IMAGE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_LINE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_LINEARGRADIENT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_MARKER mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_MASK mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_METADATA mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_MISSING_GLYPH mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_MPATH mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_PATH mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_PATTERN mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_POLYGON mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_POLYLINE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_RADIALGRADIENT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_RECT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_SCRIPT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_SET mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_STOP mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_STYLE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_SVG mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_SWITCH mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_SYMBOL mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_TEXT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_TEXTPATH mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_TITLE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_TREF mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_TSPAN mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_USE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_VIEW mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_SVG_VKERN mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_TABLE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_TBODY mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_TC mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_TD mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_TEXTAREA mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_TFOOT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_TH mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_THEAD mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_TITLE mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_TR mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_TRACK mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_TT mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_U mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_UL mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_UNKNOWN mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_VAR mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_VIDEO mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_WBR mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_X_MS_WEBVIEW mixins MSHTML$_ELEMENT_TAG_ID {}
declare class MSHTML$_ELEMENT_TAG_ID__TAGID_XMP mixins MSHTML$_ELEMENT_TAG_ID {}


declare  class MSHTML$_ELEMENTDESCRIPTOR_FLAGS {
  constructor(...args: empty): mixed;
static +ELEMENTDESCRIPTOR_FLAGS_Max: Class<MSHTML$_ELEMENTDESCRIPTOR_FLAGS__ELEMENTDESCRIPTOR_FLAGS_Max> & MSHTML$_ELEMENTDESCRIPTOR_FLAGS__ELEMENTDESCRIPTOR_FLAGS_Max & 2147483647;// 2147483647
static +ELEMENTDESCRIPTORFLAGS_LITERAL: Class<MSHTML$_ELEMENTDESCRIPTOR_FLAGS__ELEMENTDESCRIPTORFLAGS_LITERAL> & MSHTML$_ELEMENTDESCRIPTOR_FLAGS__ELEMENTDESCRIPTORFLAGS_LITERAL & 1;// 1
static +ELEMENTDESCRIPTORFLAGS_NESTED_LITERAL: Class<MSHTML$_ELEMENTDESCRIPTOR_FLAGS__ELEMENTDESCRIPTORFLAGS_NESTED_LITERAL> & MSHTML$_ELEMENTDESCRIPTOR_FLAGS__ELEMENTDESCRIPTORFLAGS_NESTED_LITERAL & 2;// 2

}

declare class MSHTML$_ELEMENTDESCRIPTOR_FLAGS__ELEMENTDESCRIPTOR_FLAGS_Max mixins MSHTML$_ELEMENTDESCRIPTOR_FLAGS {}
declare class MSHTML$_ELEMENTDESCRIPTOR_FLAGS__ELEMENTDESCRIPTORFLAGS_LITERAL mixins MSHTML$_ELEMENTDESCRIPTOR_FLAGS {}
declare class MSHTML$_ELEMENTDESCRIPTOR_FLAGS__ELEMENTDESCRIPTORFLAGS_NESTED_LITERAL mixins MSHTML$_ELEMENTDESCRIPTOR_FLAGS {}


declare  class MSHTML$_ELEMENTNAMESPACE_FLAGS {
  constructor(...args: empty): mixed;
static +ELEMENTNAMESPACE_FLAGS_Max: Class<MSHTML$_ELEMENTNAMESPACE_FLAGS__ELEMENTNAMESPACE_FLAGS_Max> & MSHTML$_ELEMENTNAMESPACE_FLAGS__ELEMENTNAMESPACE_FLAGS_Max & 2147483647;// 2147483647
static +ELEMENTNAMESPACEFLAGS_ALLOWANYTAG: Class<MSHTML$_ELEMENTNAMESPACE_FLAGS__ELEMENTNAMESPACEFLAGS_ALLOWANYTAG> & MSHTML$_ELEMENTNAMESPACE_FLAGS__ELEMENTNAMESPACEFLAGS_ALLOWANYTAG & 1;// 1
static +ELEMENTNAMESPACEFLAGS_QUERYFORUNKNOWNTAGS: Class<MSHTML$_ELEMENTNAMESPACE_FLAGS__ELEMENTNAMESPACEFLAGS_QUERYFORUNKNOWNTAGS> & MSHTML$_ELEMENTNAMESPACE_FLAGS__ELEMENTNAMESPACEFLAGS_QUERYFORUNKNOWNTAGS & 2;// 2

}

declare class MSHTML$_ELEMENTNAMESPACE_FLAGS__ELEMENTNAMESPACE_FLAGS_Max mixins MSHTML$_ELEMENTNAMESPACE_FLAGS {}
declare class MSHTML$_ELEMENTNAMESPACE_FLAGS__ELEMENTNAMESPACEFLAGS_ALLOWANYTAG mixins MSHTML$_ELEMENTNAMESPACE_FLAGS {}
declare class MSHTML$_ELEMENTNAMESPACE_FLAGS__ELEMENTNAMESPACEFLAGS_QUERYFORUNKNOWNTAGS mixins MSHTML$_ELEMENTNAMESPACE_FLAGS {}


declare  class MSHTML$_FINDTEXT_FLAGS {
  constructor(...args: empty): mixed;
static +FINDTEXT_BACKWARDS: Class<MSHTML$_FINDTEXT_FLAGS__FINDTEXT_BACKWARDS> & MSHTML$_FINDTEXT_FLAGS__FINDTEXT_BACKWARDS & 1;// 1
static +FINDTEXT_FLAGS_Max: Class<MSHTML$_FINDTEXT_FLAGS__FINDTEXT_FLAGS_Max> & MSHTML$_FINDTEXT_FLAGS__FINDTEXT_FLAGS_Max & 2147483647;// 2147483647
static +FINDTEXT_MATCHALEFHAMZA: Class<MSHTML$_FINDTEXT_FLAGS__FINDTEXT_MATCHALEFHAMZA> & MSHTML$_FINDTEXT_FLAGS__FINDTEXT_MATCHALEFHAMZA & -2147483648;// -2147483648
static +FINDTEXT_MATCHCASE: Class<MSHTML$_FINDTEXT_FLAGS__FINDTEXT_MATCHCASE> & MSHTML$_FINDTEXT_FLAGS__FINDTEXT_MATCHCASE & 4;// 4
static +FINDTEXT_MATCHDIAC: Class<MSHTML$_FINDTEXT_FLAGS__FINDTEXT_MATCHDIAC> & MSHTML$_FINDTEXT_FLAGS__FINDTEXT_MATCHDIAC & 536870912;// 536870912
static +FINDTEXT_MATCHKASHIDA: Class<MSHTML$_FINDTEXT_FLAGS__FINDTEXT_MATCHKASHIDA> & MSHTML$_FINDTEXT_FLAGS__FINDTEXT_MATCHKASHIDA & 1073741824;// 1073741824
static +FINDTEXT_MATCHREPEATEDWHITESPACE: Class<MSHTML$_FINDTEXT_FLAGS__FINDTEXT_MATCHREPEATEDWHITESPACE> & MSHTML$_FINDTEXT_FLAGS__FINDTEXT_MATCHREPEATEDWHITESPACE & 262144;// 262144
static +FINDTEXT_RAW: Class<MSHTML$_FINDTEXT_FLAGS__FINDTEXT_RAW> & MSHTML$_FINDTEXT_FLAGS__FINDTEXT_RAW & 131072;// 131072
static +FINDTEXT_WHOLEWORD: Class<MSHTML$_FINDTEXT_FLAGS__FINDTEXT_WHOLEWORD> & MSHTML$_FINDTEXT_FLAGS__FINDTEXT_WHOLEWORD & 2;// 2

}

declare class MSHTML$_FINDTEXT_FLAGS__FINDTEXT_BACKWARDS mixins MSHTML$_FINDTEXT_FLAGS {}
declare class MSHTML$_FINDTEXT_FLAGS__FINDTEXT_FLAGS_Max mixins MSHTML$_FINDTEXT_FLAGS {}
declare class MSHTML$_FINDTEXT_FLAGS__FINDTEXT_MATCHALEFHAMZA mixins MSHTML$_FINDTEXT_FLAGS {}
declare class MSHTML$_FINDTEXT_FLAGS__FINDTEXT_MATCHCASE mixins MSHTML$_FINDTEXT_FLAGS {}
declare class MSHTML$_FINDTEXT_FLAGS__FINDTEXT_MATCHDIAC mixins MSHTML$_FINDTEXT_FLAGS {}
declare class MSHTML$_FINDTEXT_FLAGS__FINDTEXT_MATCHKASHIDA mixins MSHTML$_FINDTEXT_FLAGS {}
declare class MSHTML$_FINDTEXT_FLAGS__FINDTEXT_MATCHREPEATEDWHITESPACE mixins MSHTML$_FINDTEXT_FLAGS {}
declare class MSHTML$_FINDTEXT_FLAGS__FINDTEXT_RAW mixins MSHTML$_FINDTEXT_FLAGS {}
declare class MSHTML$_FINDTEXT_FLAGS__FINDTEXT_WHOLEWORD mixins MSHTML$_FINDTEXT_FLAGS {}


declare  class MSHTML$_frameScrolling {
  constructor(...args: empty): mixed;
static +frameScrolling_Max: Class<MSHTML$_frameScrolling__frameScrolling_Max> & MSHTML$_frameScrolling__frameScrolling_Max & 2147483647;// 2147483647
static +frameScrollingauto: Class<MSHTML$_frameScrolling__frameScrollingauto> & MSHTML$_frameScrolling__frameScrollingauto & 4;// 4
static +frameScrollingno: Class<MSHTML$_frameScrolling__frameScrollingno> & MSHTML$_frameScrolling__frameScrollingno & 2;// 2
static +frameScrollingyes: Class<MSHTML$_frameScrolling__frameScrollingyes> & MSHTML$_frameScrolling__frameScrollingyes & 1;// 1

}

declare class MSHTML$_frameScrolling__frameScrolling_Max mixins MSHTML$_frameScrolling {}
declare class MSHTML$_frameScrolling__frameScrollingauto mixins MSHTML$_frameScrolling {}
declare class MSHTML$_frameScrolling__frameScrollingno mixins MSHTML$_frameScrolling {}
declare class MSHTML$_frameScrolling__frameScrollingyes mixins MSHTML$_frameScrolling {}


declare  class MSHTML$_HT_OPTIONS {
  constructor(...args: empty): mixed;
static +HT_OPT_AllowAfterEOL: Class<MSHTML$_HT_OPTIONS__HT_OPT_AllowAfterEOL> & MSHTML$_HT_OPTIONS__HT_OPT_AllowAfterEOL & 1;// 1
static +HT_OPTIONS_Max: Class<MSHTML$_HT_OPTIONS__HT_OPTIONS_Max> & MSHTML$_HT_OPTIONS__HT_OPTIONS_Max & 2147483647;// 2147483647

}

declare class MSHTML$_HT_OPTIONS__HT_OPT_AllowAfterEOL mixins MSHTML$_HT_OPTIONS {}
declare class MSHTML$_HT_OPTIONS__HT_OPTIONS_Max mixins MSHTML$_HT_OPTIONS {}


declare  class MSHTML$_HT_RESULTS {
  constructor(...args: empty): mixed;
static +HT_RESULTS_Glyph: Class<MSHTML$_HT_RESULTS__HT_RESULTS_Glyph> & MSHTML$_HT_RESULTS__HT_RESULTS_Glyph & 1;// 1
static +HT_RESULTS_Max: Class<MSHTML$_HT_RESULTS__HT_RESULTS_Max> & MSHTML$_HT_RESULTS__HT_RESULTS_Max & 2147483647;// 2147483647

}

declare class MSHTML$_HT_RESULTS__HT_RESULTS_Glyph mixins MSHTML$_HT_RESULTS {}
declare class MSHTML$_HT_RESULTS__HT_RESULTS_Max mixins MSHTML$_HT_RESULTS {}


declare  class MSHTML$_HTML_PAINT_DRAW_FLAGS {
  constructor(...args: empty): mixed;
static +HTML_PAINT_DRAW_FLAGS_Max: Class<MSHTML$_HTML_PAINT_DRAW_FLAGS__HTML_PAINT_DRAW_FLAGS_Max> & MSHTML$_HTML_PAINT_DRAW_FLAGS__HTML_PAINT_DRAW_FLAGS_Max & 2147483647;// 2147483647
static +HTMLPAINT_DRAW_UPDATEREGION: Class<MSHTML$_HTML_PAINT_DRAW_FLAGS__HTMLPAINT_DRAW_UPDATEREGION> & MSHTML$_HTML_PAINT_DRAW_FLAGS__HTMLPAINT_DRAW_UPDATEREGION & 1;// 1
static +HTMLPAINT_DRAW_USE_XFORM: Class<MSHTML$_HTML_PAINT_DRAW_FLAGS__HTMLPAINT_DRAW_USE_XFORM> & MSHTML$_HTML_PAINT_DRAW_FLAGS__HTMLPAINT_DRAW_USE_XFORM & 2;// 2

}

declare class MSHTML$_HTML_PAINT_DRAW_FLAGS__HTML_PAINT_DRAW_FLAGS_Max mixins MSHTML$_HTML_PAINT_DRAW_FLAGS {}
declare class MSHTML$_HTML_PAINT_DRAW_FLAGS__HTMLPAINT_DRAW_UPDATEREGION mixins MSHTML$_HTML_PAINT_DRAW_FLAGS {}
declare class MSHTML$_HTML_PAINT_DRAW_FLAGS__HTMLPAINT_DRAW_USE_XFORM mixins MSHTML$_HTML_PAINT_DRAW_FLAGS {}


declare  class MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS {
  constructor(...args: empty): mixed;
static +HTML_PAINT_DRAW_INFO_FLAGS_Max: Class<MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS__HTML_PAINT_DRAW_INFO_FLAGS_Max> & MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS__HTML_PAINT_DRAW_INFO_FLAGS_Max & 2147483647;// 2147483647
static +HTMLPAINT_DRAWINFO_UPDATEREGION: Class<MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS__HTMLPAINT_DRAWINFO_UPDATEREGION> & MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS__HTMLPAINT_DRAWINFO_UPDATEREGION & 2;// 2
static +HTMLPAINT_DRAWINFO_VIEWPORT: Class<MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS__HTMLPAINT_DRAWINFO_VIEWPORT> & MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS__HTMLPAINT_DRAWINFO_VIEWPORT & 1;// 1
static +HTMLPAINT_DRAWINFO_XFORM: Class<MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS__HTMLPAINT_DRAWINFO_XFORM> & MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS__HTMLPAINT_DRAWINFO_XFORM & 4;// 4

}

declare class MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS__HTML_PAINT_DRAW_INFO_FLAGS_Max mixins MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS {}
declare class MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS__HTMLPAINT_DRAWINFO_UPDATEREGION mixins MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS {}
declare class MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS__HTMLPAINT_DRAWINFO_VIEWPORT mixins MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS {}
declare class MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS__HTMLPAINT_DRAWINFO_XFORM mixins MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS {}


declare  class MSHTML$_HTML_PAINT_EVENT_FLAGS {
  constructor(...args: empty): mixed;
static +HTML_PAINT_EVENT_FLAGS_Max: Class<MSHTML$_HTML_PAINT_EVENT_FLAGS__HTML_PAINT_EVENT_FLAGS_Max> & MSHTML$_HTML_PAINT_EVENT_FLAGS__HTML_PAINT_EVENT_FLAGS_Max & 2147483647;// 2147483647
static +HTMLPAINT_EVENT_SETCURSOR: Class<MSHTML$_HTML_PAINT_EVENT_FLAGS__HTMLPAINT_EVENT_SETCURSOR> & MSHTML$_HTML_PAINT_EVENT_FLAGS__HTMLPAINT_EVENT_SETCURSOR & 2;// 2
static +HTMLPAINT_EVENT_TARGET: Class<MSHTML$_HTML_PAINT_EVENT_FLAGS__HTMLPAINT_EVENT_TARGET> & MSHTML$_HTML_PAINT_EVENT_FLAGS__HTMLPAINT_EVENT_TARGET & 1;// 1

}

declare class MSHTML$_HTML_PAINT_EVENT_FLAGS__HTML_PAINT_EVENT_FLAGS_Max mixins MSHTML$_HTML_PAINT_EVENT_FLAGS {}
declare class MSHTML$_HTML_PAINT_EVENT_FLAGS__HTMLPAINT_EVENT_SETCURSOR mixins MSHTML$_HTML_PAINT_EVENT_FLAGS {}
declare class MSHTML$_HTML_PAINT_EVENT_FLAGS__HTMLPAINT_EVENT_TARGET mixins MSHTML$_HTML_PAINT_EVENT_FLAGS {}


declare  class MSHTML$_HTML_PAINT_ZORDER {
  constructor(...args: empty): mixed;
static +HTML_PAINT_ZORDER_Max: Class<MSHTML$_HTML_PAINT_ZORDER__HTML_PAINT_ZORDER_Max> & MSHTML$_HTML_PAINT_ZORDER__HTML_PAINT_ZORDER_Max & 2147483647;// 2147483647
static +HTMLPAINT_ZORDER_ABOVE_CONTENT: Class<MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_ABOVE_CONTENT> & MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_ABOVE_CONTENT & 7;// 7
static +HTMLPAINT_ZORDER_ABOVE_FLOW: Class<MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_ABOVE_FLOW> & MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_ABOVE_FLOW & 6;// 6
static +HTMLPAINT_ZORDER_BELOW_CONTENT: Class<MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_BELOW_CONTENT> & MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_BELOW_CONTENT & 4;// 4
static +HTMLPAINT_ZORDER_BELOW_FLOW: Class<MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_BELOW_FLOW> & MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_BELOW_FLOW & 5;// 5
static +HTMLPAINT_ZORDER_NONE: Class<MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_NONE> & MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_NONE & 0;// 0
static +HTMLPAINT_ZORDER_REPLACE_ALL: Class<MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_REPLACE_ALL> & MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_REPLACE_ALL & 1;// 1
static +HTMLPAINT_ZORDER_REPLACE_BACKGROUND: Class<MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_REPLACE_BACKGROUND> & MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_REPLACE_BACKGROUND & 3;// 3
static +HTMLPAINT_ZORDER_REPLACE_CONTENT: Class<MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_REPLACE_CONTENT> & MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_REPLACE_CONTENT & 2;// 2
static +HTMLPAINT_ZORDER_WINDOW_TOP: Class<MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_WINDOW_TOP> & MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_WINDOW_TOP & 8;// 8

}

declare class MSHTML$_HTML_PAINT_ZORDER__HTML_PAINT_ZORDER_Max mixins MSHTML$_HTML_PAINT_ZORDER {}
declare class MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_ABOVE_CONTENT mixins MSHTML$_HTML_PAINT_ZORDER {}
declare class MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_ABOVE_FLOW mixins MSHTML$_HTML_PAINT_ZORDER {}
declare class MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_BELOW_CONTENT mixins MSHTML$_HTML_PAINT_ZORDER {}
declare class MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_BELOW_FLOW mixins MSHTML$_HTML_PAINT_ZORDER {}
declare class MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_NONE mixins MSHTML$_HTML_PAINT_ZORDER {}
declare class MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_REPLACE_ALL mixins MSHTML$_HTML_PAINT_ZORDER {}
declare class MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_REPLACE_BACKGROUND mixins MSHTML$_HTML_PAINT_ZORDER {}
declare class MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_REPLACE_CONTENT mixins MSHTML$_HTML_PAINT_ZORDER {}
declare class MSHTML$_HTML_PAINT_ZORDER__HTMLPAINT_ZORDER_WINDOW_TOP mixins MSHTML$_HTML_PAINT_ZORDER {}


declare  class MSHTML$_HTML_PAINTER {
  constructor(...args: empty): mixed;
static +HTML_PAINTER_Max: Class<MSHTML$_HTML_PAINTER__HTML_PAINTER_Max> & MSHTML$_HTML_PAINTER__HTML_PAINTER_Max & 2147483647;// 2147483647
static +HTMLPAINTER_3DSURFACE: Class<MSHTML$_HTML_PAINTER__HTMLPAINTER_3DSURFACE> & MSHTML$_HTML_PAINTER__HTMLPAINTER_3DSURFACE & 512;// 512
static +HTMLPAINTER_ALPHA: Class<MSHTML$_HTML_PAINTER__HTMLPAINTER_ALPHA> & MSHTML$_HTML_PAINTER__HTMLPAINTER_ALPHA & 4;// 4
static +HTMLPAINTER_COMPLEX: Class<MSHTML$_HTML_PAINTER__HTMLPAINTER_COMPLEX> & MSHTML$_HTML_PAINTER__HTMLPAINTER_COMPLEX & 8;// 8
static +HTMLPAINTER_EXPAND: Class<MSHTML$_HTML_PAINTER__HTMLPAINTER_EXPAND> & MSHTML$_HTML_PAINTER__HTMLPAINTER_EXPAND & 65536;// 65536
static +HTMLPAINTER_HITTEST: Class<MSHTML$_HTML_PAINTER__HTMLPAINTER_HITTEST> & MSHTML$_HTML_PAINTER__HTMLPAINTER_HITTEST & 32;// 32
static +HTMLPAINTER_NOBAND: Class<MSHTML$_HTML_PAINTER__HTMLPAINTER_NOBAND> & MSHTML$_HTML_PAINTER__HTMLPAINTER_NOBAND & 1024;// 1024
static +HTMLPAINTER_NODC: Class<MSHTML$_HTML_PAINTER__HTMLPAINTER_NODC> & MSHTML$_HTML_PAINTER__HTMLPAINTER_NODC & 4096;// 4096
static +HTMLPAINTER_NOPHYSICALCLIP: Class<MSHTML$_HTML_PAINTER__HTMLPAINTER_NOPHYSICALCLIP> & MSHTML$_HTML_PAINTER__HTMLPAINTER_NOPHYSICALCLIP & 8192;// 8192
static +HTMLPAINTER_NOSAVEDC: Class<MSHTML$_HTML_PAINTER__HTMLPAINTER_NOSAVEDC> & MSHTML$_HTML_PAINTER__HTMLPAINTER_NOSAVEDC & 16384;// 16384
static +HTMLPAINTER_NOSCROLLBITS: Class<MSHTML$_HTML_PAINTER__HTMLPAINTER_NOSCROLLBITS> & MSHTML$_HTML_PAINTER__HTMLPAINTER_NOSCROLLBITS & 131072;// 131072
static +HTMLPAINTER_OPAQUE: Class<MSHTML$_HTML_PAINTER__HTMLPAINTER_OPAQUE> & MSHTML$_HTML_PAINTER__HTMLPAINTER_OPAQUE & 1;// 1
static +HTMLPAINTER_OVERLAY: Class<MSHTML$_HTML_PAINTER__HTMLPAINTER_OVERLAY> & MSHTML$_HTML_PAINTER__HTMLPAINTER_OVERLAY & 16;// 16
static +HTMLPAINTER_SUPPORTS_XFORM: Class<MSHTML$_HTML_PAINTER__HTMLPAINTER_SUPPORTS_XFORM> & MSHTML$_HTML_PAINTER__HTMLPAINTER_SUPPORTS_XFORM & 32768;// 32768
static +HTMLPAINTER_SURFACE: Class<MSHTML$_HTML_PAINTER__HTMLPAINTER_SURFACE> & MSHTML$_HTML_PAINTER__HTMLPAINTER_SURFACE & 256;// 256
static +HTMLPAINTER_TRANSPARENT: Class<MSHTML$_HTML_PAINTER__HTMLPAINTER_TRANSPARENT> & MSHTML$_HTML_PAINTER__HTMLPAINTER_TRANSPARENT & 2;// 2

}

declare class MSHTML$_HTML_PAINTER__HTML_PAINTER_Max mixins MSHTML$_HTML_PAINTER {}
declare class MSHTML$_HTML_PAINTER__HTMLPAINTER_3DSURFACE mixins MSHTML$_HTML_PAINTER {}
declare class MSHTML$_HTML_PAINTER__HTMLPAINTER_ALPHA mixins MSHTML$_HTML_PAINTER {}
declare class MSHTML$_HTML_PAINTER__HTMLPAINTER_COMPLEX mixins MSHTML$_HTML_PAINTER {}
declare class MSHTML$_HTML_PAINTER__HTMLPAINTER_EXPAND mixins MSHTML$_HTML_PAINTER {}
declare class MSHTML$_HTML_PAINTER__HTMLPAINTER_HITTEST mixins MSHTML$_HTML_PAINTER {}
declare class MSHTML$_HTML_PAINTER__HTMLPAINTER_NOBAND mixins MSHTML$_HTML_PAINTER {}
declare class MSHTML$_HTML_PAINTER__HTMLPAINTER_NODC mixins MSHTML$_HTML_PAINTER {}
declare class MSHTML$_HTML_PAINTER__HTMLPAINTER_NOPHYSICALCLIP mixins MSHTML$_HTML_PAINTER {}
declare class MSHTML$_HTML_PAINTER__HTMLPAINTER_NOSAVEDC mixins MSHTML$_HTML_PAINTER {}
declare class MSHTML$_HTML_PAINTER__HTMLPAINTER_NOSCROLLBITS mixins MSHTML$_HTML_PAINTER {}
declare class MSHTML$_HTML_PAINTER__HTMLPAINTER_OPAQUE mixins MSHTML$_HTML_PAINTER {}
declare class MSHTML$_HTML_PAINTER__HTMLPAINTER_OVERLAY mixins MSHTML$_HTML_PAINTER {}
declare class MSHTML$_HTML_PAINTER__HTMLPAINTER_SUPPORTS_XFORM mixins MSHTML$_HTML_PAINTER {}
declare class MSHTML$_HTML_PAINTER__HTMLPAINTER_SURFACE mixins MSHTML$_HTML_PAINTER {}
declare class MSHTML$_HTML_PAINTER__HTMLPAINTER_TRANSPARENT mixins MSHTML$_HTML_PAINTER {}


declare  class MSHTML$_htmlAdjacency {
  constructor(...args: empty): mixed;
static +htmlAdjacency_Max: Class<MSHTML$_htmlAdjacency__htmlAdjacency_Max> & MSHTML$_htmlAdjacency__htmlAdjacency_Max & 2147483647;// 2147483647
static +htmlAdjacencyAfterBegin: Class<MSHTML$_htmlAdjacency__htmlAdjacencyAfterBegin> & MSHTML$_htmlAdjacency__htmlAdjacencyAfterBegin & 2;// 2
static +htmlAdjacencyAfterEnd: Class<MSHTML$_htmlAdjacency__htmlAdjacencyAfterEnd> & MSHTML$_htmlAdjacency__htmlAdjacencyAfterEnd & 4;// 4
static +htmlAdjacencyBeforeBegin: Class<MSHTML$_htmlAdjacency__htmlAdjacencyBeforeBegin> & MSHTML$_htmlAdjacency__htmlAdjacencyBeforeBegin & 1;// 1
static +htmlAdjacencyBeforeEnd: Class<MSHTML$_htmlAdjacency__htmlAdjacencyBeforeEnd> & MSHTML$_htmlAdjacency__htmlAdjacencyBeforeEnd & 3;// 3

}

declare class MSHTML$_htmlAdjacency__htmlAdjacency_Max mixins MSHTML$_htmlAdjacency {}
declare class MSHTML$_htmlAdjacency__htmlAdjacencyAfterBegin mixins MSHTML$_htmlAdjacency {}
declare class MSHTML$_htmlAdjacency__htmlAdjacencyAfterEnd mixins MSHTML$_htmlAdjacency {}
declare class MSHTML$_htmlAdjacency__htmlAdjacencyBeforeBegin mixins MSHTML$_htmlAdjacency {}
declare class MSHTML$_htmlAdjacency__htmlAdjacencyBeforeEnd mixins MSHTML$_htmlAdjacency {}


declare  class MSHTML$_HTMLAppFlag {
  constructor(...args: empty): mixed;
static +HTMLAppFlag_Max: Class<MSHTML$_HTMLAppFlag__HTMLAppFlag_Max> & MSHTML$_HTMLAppFlag__HTMLAppFlag_Max & 2147483647;// 2147483647
static +HTMLAppFlag0: Class<MSHTML$_HTMLAppFlag__HTMLAppFlag0> & MSHTML$_HTMLAppFlag__HTMLAppFlag0 & 0;// 0
static +HTMLAppFlag1: Class<MSHTML$_HTMLAppFlag__HTMLAppFlag1> & MSHTML$_HTMLAppFlag__HTMLAppFlag1 & 1;// 1
static +HTMLAppFlagNo: Class<MSHTML$_HTMLAppFlag__HTMLAppFlagNo> & MSHTML$_HTMLAppFlag__HTMLAppFlagNo & 0;// 0
static +HTMLAppFlagOff: Class<MSHTML$_HTMLAppFlag__HTMLAppFlagOff> & MSHTML$_HTMLAppFlag__HTMLAppFlagOff & 0;// 0
static +HTMLAppFlagOn: Class<MSHTML$_HTMLAppFlag__HTMLAppFlagOn> & MSHTML$_HTMLAppFlag__HTMLAppFlagOn & 1;// 1
static +HTMLAppFlagYes: Class<MSHTML$_HTMLAppFlag__HTMLAppFlagYes> & MSHTML$_HTMLAppFlag__HTMLAppFlagYes & 1;// 1

}

declare class MSHTML$_HTMLAppFlag__HTMLAppFlag_Max mixins MSHTML$_HTMLAppFlag {}
declare class MSHTML$_HTMLAppFlag__HTMLAppFlag0 mixins MSHTML$_HTMLAppFlag {}
declare class MSHTML$_HTMLAppFlag__HTMLAppFlag1 mixins MSHTML$_HTMLAppFlag {}
declare class MSHTML$_HTMLAppFlag__HTMLAppFlagNo mixins MSHTML$_HTMLAppFlag {}
declare class MSHTML$_HTMLAppFlag__HTMLAppFlagOff mixins MSHTML$_HTMLAppFlag {}
declare class MSHTML$_HTMLAppFlag__HTMLAppFlagOn mixins MSHTML$_HTMLAppFlag {}
declare class MSHTML$_HTMLAppFlag__HTMLAppFlagYes mixins MSHTML$_HTMLAppFlag {}


declare  class MSHTML$_htmlApplyLocation {
  constructor(...args: empty): mixed;
static +htmlApplyLocation_Max: Class<MSHTML$_htmlApplyLocation__htmlApplyLocation_Max> & MSHTML$_htmlApplyLocation__htmlApplyLocation_Max & 2147483647;// 2147483647
static +htmlApplyLocationInside: Class<MSHTML$_htmlApplyLocation__htmlApplyLocationInside> & MSHTML$_htmlApplyLocation__htmlApplyLocationInside & 0;// 0
static +htmlApplyLocationOutside: Class<MSHTML$_htmlApplyLocation__htmlApplyLocationOutside> & MSHTML$_htmlApplyLocation__htmlApplyLocationOutside & 1;// 1

}

declare class MSHTML$_htmlApplyLocation__htmlApplyLocation_Max mixins MSHTML$_htmlApplyLocation {}
declare class MSHTML$_htmlApplyLocation__htmlApplyLocationInside mixins MSHTML$_htmlApplyLocation {}
declare class MSHTML$_htmlApplyLocation__htmlApplyLocationOutside mixins MSHTML$_htmlApplyLocation {}


declare  class MSHTML$_htmlBlockAlign {
  constructor(...args: empty): mixed;
static +htmlBlockAlign_Max: Class<MSHTML$_htmlBlockAlign__htmlBlockAlign_Max> & MSHTML$_htmlBlockAlign__htmlBlockAlign_Max & 2147483647;// 2147483647
static +htmlBlockAlignCenter: Class<MSHTML$_htmlBlockAlign__htmlBlockAlignCenter> & MSHTML$_htmlBlockAlign__htmlBlockAlignCenter & 2;// 2
static +htmlBlockAlignJustify: Class<MSHTML$_htmlBlockAlign__htmlBlockAlignJustify> & MSHTML$_htmlBlockAlign__htmlBlockAlignJustify & 4;// 4
static +htmlBlockAlignLeft: Class<MSHTML$_htmlBlockAlign__htmlBlockAlignLeft> & MSHTML$_htmlBlockAlign__htmlBlockAlignLeft & 1;// 1
static +htmlBlockAlignNotSet: Class<MSHTML$_htmlBlockAlign__htmlBlockAlignNotSet> & MSHTML$_htmlBlockAlign__htmlBlockAlignNotSet & 0;// 0
static +htmlBlockAlignRight: Class<MSHTML$_htmlBlockAlign__htmlBlockAlignRight> & MSHTML$_htmlBlockAlign__htmlBlockAlignRight & 3;// 3

}

declare class MSHTML$_htmlBlockAlign__htmlBlockAlign_Max mixins MSHTML$_htmlBlockAlign {}
declare class MSHTML$_htmlBlockAlign__htmlBlockAlignCenter mixins MSHTML$_htmlBlockAlign {}
declare class MSHTML$_htmlBlockAlign__htmlBlockAlignJustify mixins MSHTML$_htmlBlockAlign {}
declare class MSHTML$_htmlBlockAlign__htmlBlockAlignLeft mixins MSHTML$_htmlBlockAlign {}
declare class MSHTML$_htmlBlockAlign__htmlBlockAlignNotSet mixins MSHTML$_htmlBlockAlign {}
declare class MSHTML$_htmlBlockAlign__htmlBlockAlignRight mixins MSHTML$_htmlBlockAlign {}


declare  class MSHTML$_HTMLBorder {
  constructor(...args: empty): mixed;
static +HTMLBorder_Max: Class<MSHTML$_HTMLBorder__HTMLBorder_Max> & MSHTML$_HTMLBorder__HTMLBorder_Max & 2147483647;// 2147483647
static +HTMLBorderDialog: Class<MSHTML$_HTMLBorder__HTMLBorderDialog> & MSHTML$_HTMLBorder__HTMLBorderDialog & 4194304;// 4194304
static +HTMLBorderNone: Class<MSHTML$_HTMLBorder__HTMLBorderNone> & MSHTML$_HTMLBorder__HTMLBorderNone & 0;// 0
static +HTMLBorderThick: Class<MSHTML$_HTMLBorder__HTMLBorderThick> & MSHTML$_HTMLBorder__HTMLBorderThick & 262144;// 262144
static +HTMLBorderThin: Class<MSHTML$_HTMLBorder__HTMLBorderThin> & MSHTML$_HTMLBorder__HTMLBorderThin & 8388608;// 8388608

}

declare class MSHTML$_HTMLBorder__HTMLBorder_Max mixins MSHTML$_HTMLBorder {}
declare class MSHTML$_HTMLBorder__HTMLBorderDialog mixins MSHTML$_HTMLBorder {}
declare class MSHTML$_HTMLBorder__HTMLBorderNone mixins MSHTML$_HTMLBorder {}
declare class MSHTML$_HTMLBorder__HTMLBorderThick mixins MSHTML$_HTMLBorder {}
declare class MSHTML$_HTMLBorder__HTMLBorderThin mixins MSHTML$_HTMLBorder {}


declare  class MSHTML$_HTMLBorderStyle {
  constructor(...args: empty): mixed;
static +HTMLBorderStyle_Max: Class<MSHTML$_HTMLBorderStyle__HTMLBorderStyle_Max> & MSHTML$_HTMLBorderStyle__HTMLBorderStyle_Max & 2147483647;// 2147483647
static +HTMLBorderStylecombined: Class<MSHTML$_HTMLBorderStyle__HTMLBorderStylecombined> & MSHTML$_HTMLBorderStyle__HTMLBorderStylecombined & 768;// 768
static +HTMLBorderStyleNormal: Class<MSHTML$_HTMLBorderStyle__HTMLBorderStyleNormal> & MSHTML$_HTMLBorderStyle__HTMLBorderStyleNormal & 0;// 0
static +HTMLBorderStyleRaised: Class<MSHTML$_HTMLBorderStyle__HTMLBorderStyleRaised> & MSHTML$_HTMLBorderStyle__HTMLBorderStyleRaised & 256;// 256
static +HTMLBorderStyleStatic: Class<MSHTML$_HTMLBorderStyle__HTMLBorderStyleStatic> & MSHTML$_HTMLBorderStyle__HTMLBorderStyleStatic & 131072;// 131072
static +HTMLBorderStyleSunken: Class<MSHTML$_HTMLBorderStyle__HTMLBorderStyleSunken> & MSHTML$_HTMLBorderStyle__HTMLBorderStyleSunken & 512;// 512

}

declare class MSHTML$_HTMLBorderStyle__HTMLBorderStyle_Max mixins MSHTML$_HTMLBorderStyle {}
declare class MSHTML$_HTMLBorderStyle__HTMLBorderStylecombined mixins MSHTML$_HTMLBorderStyle {}
declare class MSHTML$_HTMLBorderStyle__HTMLBorderStyleNormal mixins MSHTML$_HTMLBorderStyle {}
declare class MSHTML$_HTMLBorderStyle__HTMLBorderStyleRaised mixins MSHTML$_HTMLBorderStyle {}
declare class MSHTML$_HTMLBorderStyle__HTMLBorderStyleStatic mixins MSHTML$_HTMLBorderStyle {}
declare class MSHTML$_HTMLBorderStyle__HTMLBorderStyleSunken mixins MSHTML$_HTMLBorderStyle {}


declare  class MSHTML$_htmlCaptionAlign {
  constructor(...args: empty): mixed;
static +htmlCaptionAlign_Max: Class<MSHTML$_htmlCaptionAlign__htmlCaptionAlign_Max> & MSHTML$_htmlCaptionAlign__htmlCaptionAlign_Max & 2147483647;// 2147483647
static +htmlCaptionAlignBottom: Class<MSHTML$_htmlCaptionAlign__htmlCaptionAlignBottom> & MSHTML$_htmlCaptionAlign__htmlCaptionAlignBottom & 6;// 6
static +htmlCaptionAlignCenter: Class<MSHTML$_htmlCaptionAlign__htmlCaptionAlignCenter> & MSHTML$_htmlCaptionAlign__htmlCaptionAlignCenter & 2;// 2
static +htmlCaptionAlignJustify: Class<MSHTML$_htmlCaptionAlign__htmlCaptionAlignJustify> & MSHTML$_htmlCaptionAlign__htmlCaptionAlignJustify & 4;// 4
static +htmlCaptionAlignLeft: Class<MSHTML$_htmlCaptionAlign__htmlCaptionAlignLeft> & MSHTML$_htmlCaptionAlign__htmlCaptionAlignLeft & 1;// 1
static +htmlCaptionAlignNotSet: Class<MSHTML$_htmlCaptionAlign__htmlCaptionAlignNotSet> & MSHTML$_htmlCaptionAlign__htmlCaptionAlignNotSet & 0;// 0
static +htmlCaptionAlignRight: Class<MSHTML$_htmlCaptionAlign__htmlCaptionAlignRight> & MSHTML$_htmlCaptionAlign__htmlCaptionAlignRight & 3;// 3
static +htmlCaptionAlignTop: Class<MSHTML$_htmlCaptionAlign__htmlCaptionAlignTop> & MSHTML$_htmlCaptionAlign__htmlCaptionAlignTop & 5;// 5

}

declare class MSHTML$_htmlCaptionAlign__htmlCaptionAlign_Max mixins MSHTML$_htmlCaptionAlign {}
declare class MSHTML$_htmlCaptionAlign__htmlCaptionAlignBottom mixins MSHTML$_htmlCaptionAlign {}
declare class MSHTML$_htmlCaptionAlign__htmlCaptionAlignCenter mixins MSHTML$_htmlCaptionAlign {}
declare class MSHTML$_htmlCaptionAlign__htmlCaptionAlignJustify mixins MSHTML$_htmlCaptionAlign {}
declare class MSHTML$_htmlCaptionAlign__htmlCaptionAlignLeft mixins MSHTML$_htmlCaptionAlign {}
declare class MSHTML$_htmlCaptionAlign__htmlCaptionAlignNotSet mixins MSHTML$_htmlCaptionAlign {}
declare class MSHTML$_htmlCaptionAlign__htmlCaptionAlignRight mixins MSHTML$_htmlCaptionAlign {}
declare class MSHTML$_htmlCaptionAlign__htmlCaptionAlignTop mixins MSHTML$_htmlCaptionAlign {}


declare  class MSHTML$_HTMLCaptionFlag {
  constructor(...args: empty): mixed;
static +HTMLCaptionFlag_Max: Class<MSHTML$_HTMLCaptionFlag__HTMLCaptionFlag_Max> & MSHTML$_HTMLCaptionFlag__HTMLCaptionFlag_Max & 2147483647;// 2147483647
static +HTMLCaptionFlagNo: Class<MSHTML$_HTMLCaptionFlag__HTMLCaptionFlagNo> & MSHTML$_HTMLCaptionFlag__HTMLCaptionFlagNo & 0;// 0
static +HTMLCaptionFlagYes: Class<MSHTML$_HTMLCaptionFlag__HTMLCaptionFlagYes> & MSHTML$_HTMLCaptionFlag__HTMLCaptionFlagYes & 12582912;// 12582912

}

declare class MSHTML$_HTMLCaptionFlag__HTMLCaptionFlag_Max mixins MSHTML$_HTMLCaptionFlag {}
declare class MSHTML$_HTMLCaptionFlag__HTMLCaptionFlagNo mixins MSHTML$_HTMLCaptionFlag {}
declare class MSHTML$_HTMLCaptionFlag__HTMLCaptionFlagYes mixins MSHTML$_HTMLCaptionFlag {}


declare  class MSHTML$_htmlCaptionVAlign {
  constructor(...args: empty): mixed;
static +htmlCaptionVAlign_Max: Class<MSHTML$_htmlCaptionVAlign__htmlCaptionVAlign_Max> & MSHTML$_htmlCaptionVAlign__htmlCaptionVAlign_Max & 2147483647;// 2147483647
static +htmlCaptionVAlignBottom: Class<MSHTML$_htmlCaptionVAlign__htmlCaptionVAlignBottom> & MSHTML$_htmlCaptionVAlign__htmlCaptionVAlignBottom & 2;// 2
static +htmlCaptionVAlignNotSet: Class<MSHTML$_htmlCaptionVAlign__htmlCaptionVAlignNotSet> & MSHTML$_htmlCaptionVAlign__htmlCaptionVAlignNotSet & 0;// 0
static +htmlCaptionVAlignTop: Class<MSHTML$_htmlCaptionVAlign__htmlCaptionVAlignTop> & MSHTML$_htmlCaptionVAlign__htmlCaptionVAlignTop & 1;// 1

}

declare class MSHTML$_htmlCaptionVAlign__htmlCaptionVAlign_Max mixins MSHTML$_htmlCaptionVAlign {}
declare class MSHTML$_htmlCaptionVAlign__htmlCaptionVAlignBottom mixins MSHTML$_htmlCaptionVAlign {}
declare class MSHTML$_htmlCaptionVAlign__htmlCaptionVAlignNotSet mixins MSHTML$_htmlCaptionVAlign {}
declare class MSHTML$_htmlCaptionVAlign__htmlCaptionVAlignTop mixins MSHTML$_htmlCaptionVAlign {}


declare  class MSHTML$_htmlCellAlign {
  constructor(...args: empty): mixed;
static +htmlCellAlign_Max: Class<MSHTML$_htmlCellAlign__htmlCellAlign_Max> & MSHTML$_htmlCellAlign__htmlCellAlign_Max & 2147483647;// 2147483647
static +htmlCellAlignCenter: Class<MSHTML$_htmlCellAlign__htmlCellAlignCenter> & MSHTML$_htmlCellAlign__htmlCellAlignCenter & 2;// 2
static +htmlCellAlignLeft: Class<MSHTML$_htmlCellAlign__htmlCellAlignLeft> & MSHTML$_htmlCellAlign__htmlCellAlignLeft & 1;// 1
static +htmlCellAlignMiddle: Class<MSHTML$_htmlCellAlign__htmlCellAlignMiddle> & MSHTML$_htmlCellAlign__htmlCellAlignMiddle & 2;// 2
static +htmlCellAlignNotSet: Class<MSHTML$_htmlCellAlign__htmlCellAlignNotSet> & MSHTML$_htmlCellAlign__htmlCellAlignNotSet & 0;// 0
static +htmlCellAlignRight: Class<MSHTML$_htmlCellAlign__htmlCellAlignRight> & MSHTML$_htmlCellAlign__htmlCellAlignRight & 3;// 3

}

declare class MSHTML$_htmlCellAlign__htmlCellAlign_Max mixins MSHTML$_htmlCellAlign {}
declare class MSHTML$_htmlCellAlign__htmlCellAlignCenter mixins MSHTML$_htmlCellAlign {}
declare class MSHTML$_htmlCellAlign__htmlCellAlignLeft mixins MSHTML$_htmlCellAlign {}
declare class MSHTML$_htmlCellAlign__htmlCellAlignMiddle mixins MSHTML$_htmlCellAlign {}
declare class MSHTML$_htmlCellAlign__htmlCellAlignNotSet mixins MSHTML$_htmlCellAlign {}
declare class MSHTML$_htmlCellAlign__htmlCellAlignRight mixins MSHTML$_htmlCellAlign {}


declare  class MSHTML$_htmlCellVAlign {
  constructor(...args: empty): mixed;
static +htmlCellVAlign_Max: Class<MSHTML$_htmlCellVAlign__htmlCellVAlign_Max> & MSHTML$_htmlCellVAlign__htmlCellVAlign_Max & 2147483647;// 2147483647
static +htmlCellVAlignBaseline: Class<MSHTML$_htmlCellVAlign__htmlCellVAlignBaseline> & MSHTML$_htmlCellVAlign__htmlCellVAlignBaseline & 4;// 4
static +htmlCellVAlignBottom: Class<MSHTML$_htmlCellVAlign__htmlCellVAlignBottom> & MSHTML$_htmlCellVAlign__htmlCellVAlignBottom & 3;// 3
static +htmlCellVAlignCenter: Class<MSHTML$_htmlCellVAlign__htmlCellVAlignCenter> & MSHTML$_htmlCellVAlign__htmlCellVAlignCenter & 2;// 2
static +htmlCellVAlignMiddle: Class<MSHTML$_htmlCellVAlign__htmlCellVAlignMiddle> & MSHTML$_htmlCellVAlign__htmlCellVAlignMiddle & 2;// 2
static +htmlCellVAlignNotSet: Class<MSHTML$_htmlCellVAlign__htmlCellVAlignNotSet> & MSHTML$_htmlCellVAlign__htmlCellVAlignNotSet & 0;// 0
static +htmlCellVAlignTop: Class<MSHTML$_htmlCellVAlign__htmlCellVAlignTop> & MSHTML$_htmlCellVAlign__htmlCellVAlignTop & 1;// 1

}

declare class MSHTML$_htmlCellVAlign__htmlCellVAlign_Max mixins MSHTML$_htmlCellVAlign {}
declare class MSHTML$_htmlCellVAlign__htmlCellVAlignBaseline mixins MSHTML$_htmlCellVAlign {}
declare class MSHTML$_htmlCellVAlign__htmlCellVAlignBottom mixins MSHTML$_htmlCellVAlign {}
declare class MSHTML$_htmlCellVAlign__htmlCellVAlignCenter mixins MSHTML$_htmlCellVAlign {}
declare class MSHTML$_htmlCellVAlign__htmlCellVAlignMiddle mixins MSHTML$_htmlCellVAlign {}
declare class MSHTML$_htmlCellVAlign__htmlCellVAlignNotSet mixins MSHTML$_htmlCellVAlign {}
declare class MSHTML$_htmlCellVAlign__htmlCellVAlignTop mixins MSHTML$_htmlCellVAlign {}


declare  class MSHTML$_htmlClear {
  constructor(...args: empty): mixed;
static +htmlClear_Max: Class<MSHTML$_htmlClear__htmlClear_Max> & MSHTML$_htmlClear__htmlClear_Max & 2147483647;// 2147483647
static +htmlClearAll: Class<MSHTML$_htmlClear__htmlClearAll> & MSHTML$_htmlClear__htmlClearAll & 1;// 1
static +htmlClearBoth: Class<MSHTML$_htmlClear__htmlClearBoth> & MSHTML$_htmlClear__htmlClearBoth & 4;// 4
static +htmlClearLeft: Class<MSHTML$_htmlClear__htmlClearLeft> & MSHTML$_htmlClear__htmlClearLeft & 2;// 2
static +htmlClearNone: Class<MSHTML$_htmlClear__htmlClearNone> & MSHTML$_htmlClear__htmlClearNone & 5;// 5
static +htmlClearNotSet: Class<MSHTML$_htmlClear__htmlClearNotSet> & MSHTML$_htmlClear__htmlClearNotSet & 0;// 0
static +htmlClearRight: Class<MSHTML$_htmlClear__htmlClearRight> & MSHTML$_htmlClear__htmlClearRight & 3;// 3

}

declare class MSHTML$_htmlClear__htmlClear_Max mixins MSHTML$_htmlClear {}
declare class MSHTML$_htmlClear__htmlClearAll mixins MSHTML$_htmlClear {}
declare class MSHTML$_htmlClear__htmlClearBoth mixins MSHTML$_htmlClear {}
declare class MSHTML$_htmlClear__htmlClearLeft mixins MSHTML$_htmlClear {}
declare class MSHTML$_htmlClear__htmlClearNone mixins MSHTML$_htmlClear {}
declare class MSHTML$_htmlClear__htmlClearNotSet mixins MSHTML$_htmlClear {}
declare class MSHTML$_htmlClear__htmlClearRight mixins MSHTML$_htmlClear {}


declare  class MSHTML$_htmlCompatMode {
  constructor(...args: empty): mixed;
static +htmlCompatMode_Max: Class<MSHTML$_htmlCompatMode__htmlCompatMode_Max> & MSHTML$_htmlCompatMode__htmlCompatMode_Max & 2147483647;// 2147483647
static +htmlCompatModeBackCompat: Class<MSHTML$_htmlCompatMode__htmlCompatModeBackCompat> & MSHTML$_htmlCompatMode__htmlCompatModeBackCompat & 0;// 0
static +htmlCompatModeCSS1Compat: Class<MSHTML$_htmlCompatMode__htmlCompatModeCSS1Compat> & MSHTML$_htmlCompatMode__htmlCompatModeCSS1Compat & 1;// 1

}

declare class MSHTML$_htmlCompatMode__htmlCompatMode_Max mixins MSHTML$_htmlCompatMode {}
declare class MSHTML$_htmlCompatMode__htmlCompatModeBackCompat mixins MSHTML$_htmlCompatMode {}
declare class MSHTML$_htmlCompatMode__htmlCompatModeCSS1Compat mixins MSHTML$_htmlCompatMode {}


declare  class MSHTML$_htmlComponent {
  constructor(...args: empty): mixed;
static +htmlComponent_Max: Class<MSHTML$_htmlComponent__htmlComponent_Max> & MSHTML$_htmlComponent__htmlComponent_Max & 2147483647;// 2147483647
static +htmlComponentClient: Class<MSHTML$_htmlComponent__htmlComponentClient> & MSHTML$_htmlComponent__htmlComponentClient & 0;// 0
static +htmlComponentGHBottom: Class<MSHTML$_htmlComponent__htmlComponentGHBottom> & MSHTML$_htmlComponent__htmlComponentGHBottom & 27;// 27
static +htmlComponentGHBottomLeft: Class<MSHTML$_htmlComponent__htmlComponentGHBottomLeft> & MSHTML$_htmlComponent__htmlComponentGHBottomLeft & 25;// 25
static +htmlComponentGHBottomRight: Class<MSHTML$_htmlComponent__htmlComponentGHBottomRight> & MSHTML$_htmlComponent__htmlComponentGHBottomRight & 29;// 29
static +htmlComponentGHLeft: Class<MSHTML$_htmlComponent__htmlComponentGHLeft> & MSHTML$_htmlComponent__htmlComponentGHLeft & 23;// 23
static +htmlComponentGHRight: Class<MSHTML$_htmlComponent__htmlComponentGHRight> & MSHTML$_htmlComponent__htmlComponentGHRight & 28;// 28
static +htmlComponentGHTop: Class<MSHTML$_htmlComponent__htmlComponentGHTop> & MSHTML$_htmlComponent__htmlComponentGHTop & 24;// 24
static +htmlComponentGHTopLeft: Class<MSHTML$_htmlComponent__htmlComponentGHTopLeft> & MSHTML$_htmlComponent__htmlComponentGHTopLeft & 22;// 22
static +htmlComponentGHTopRight: Class<MSHTML$_htmlComponent__htmlComponentGHTopRight> & MSHTML$_htmlComponent__htmlComponentGHTopRight & 26;// 26
static +htmlComponentOutside: Class<MSHTML$_htmlComponent__htmlComponentOutside> & MSHTML$_htmlComponent__htmlComponentOutside & 21;// 21
static +htmlComponentSbBottom: Class<MSHTML$_htmlComponent__htmlComponentSbBottom> & MSHTML$_htmlComponent__htmlComponentSbBottom & 20;// 20
static +htmlComponentSbDown: Class<MSHTML$_htmlComponent__htmlComponentSbDown> & MSHTML$_htmlComponent__htmlComponentSbDown & 10;// 10
static +htmlComponentSbDown2: Class<MSHTML$_htmlComponent__htmlComponentSbDown2> & MSHTML$_htmlComponent__htmlComponentSbDown2 & 17;// 17
static +htmlComponentSbHThumb: Class<MSHTML$_htmlComponent__htmlComponentSbHThumb> & MSHTML$_htmlComponent__htmlComponentSbHThumb & 3;// 3
static +htmlComponentSbLeft: Class<MSHTML$_htmlComponent__htmlComponentSbLeft> & MSHTML$_htmlComponent__htmlComponentSbLeft & 1;// 1
static +htmlComponentSbLeft2: Class<MSHTML$_htmlComponent__htmlComponentSbLeft2> & MSHTML$_htmlComponent__htmlComponentSbLeft2 & 11;// 11
static +htmlComponentSbPageDown: Class<MSHTML$_htmlComponent__htmlComponentSbPageDown> & MSHTML$_htmlComponent__htmlComponentSbPageDown & 9;// 9
static +htmlComponentSbPageDown2: Class<MSHTML$_htmlComponent__htmlComponentSbPageDown2> & MSHTML$_htmlComponent__htmlComponentSbPageDown2 & 18;// 18
static +htmlComponentSbPageLeft: Class<MSHTML$_htmlComponent__htmlComponentSbPageLeft> & MSHTML$_htmlComponent__htmlComponentSbPageLeft & 2;// 2
static +htmlComponentSbPageLeft2: Class<MSHTML$_htmlComponent__htmlComponentSbPageLeft2> & MSHTML$_htmlComponent__htmlComponentSbPageLeft2 & 12;// 12
static +htmlComponentSbPageRight: Class<MSHTML$_htmlComponent__htmlComponentSbPageRight> & MSHTML$_htmlComponent__htmlComponentSbPageRight & 4;// 4
static +htmlComponentSbPageRight2: Class<MSHTML$_htmlComponent__htmlComponentSbPageRight2> & MSHTML$_htmlComponent__htmlComponentSbPageRight2 & 14;// 14
static +htmlComponentSbPageUp: Class<MSHTML$_htmlComponent__htmlComponentSbPageUp> & MSHTML$_htmlComponent__htmlComponentSbPageUp & 7;// 7
static +htmlComponentSbPageUp2: Class<MSHTML$_htmlComponent__htmlComponentSbPageUp2> & MSHTML$_htmlComponent__htmlComponentSbPageUp2 & 16;// 16
static +htmlComponentSbRight: Class<MSHTML$_htmlComponent__htmlComponentSbRight> & MSHTML$_htmlComponent__htmlComponentSbRight & 5;// 5
static +htmlComponentSbRight2: Class<MSHTML$_htmlComponent__htmlComponentSbRight2> & MSHTML$_htmlComponent__htmlComponentSbRight2 & 13;// 13
static +htmlComponentSbTop: Class<MSHTML$_htmlComponent__htmlComponentSbTop> & MSHTML$_htmlComponent__htmlComponentSbTop & 19;// 19
static +htmlComponentSbUp: Class<MSHTML$_htmlComponent__htmlComponentSbUp> & MSHTML$_htmlComponent__htmlComponentSbUp & 6;// 6
static +htmlComponentSbUp2: Class<MSHTML$_htmlComponent__htmlComponentSbUp2> & MSHTML$_htmlComponent__htmlComponentSbUp2 & 15;// 15
static +htmlComponentSbVThumb: Class<MSHTML$_htmlComponent__htmlComponentSbVThumb> & MSHTML$_htmlComponent__htmlComponentSbVThumb & 8;// 8

}

declare class MSHTML$_htmlComponent__htmlComponent_Max mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentClient mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentGHBottom mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentGHBottomLeft mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentGHBottomRight mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentGHLeft mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentGHRight mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentGHTop mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentGHTopLeft mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentGHTopRight mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentOutside mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbBottom mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbDown mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbDown2 mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbHThumb mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbLeft mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbLeft2 mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbPageDown mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbPageDown2 mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbPageLeft mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbPageLeft2 mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbPageRight mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbPageRight2 mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbPageUp mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbPageUp2 mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbRight mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbRight2 mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbTop mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbUp mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbUp2 mixins MSHTML$_htmlComponent {}
declare class MSHTML$_htmlComponent__htmlComponentSbVThumb mixins MSHTML$_htmlComponent {}


declare  class MSHTML$_htmlControlAlign {
  constructor(...args: empty): mixed;
static +htmlControlAlign_Max: Class<MSHTML$_htmlControlAlign__htmlControlAlign_Max> & MSHTML$_htmlControlAlign__htmlControlAlign_Max & 2147483647;// 2147483647
static +htmlControlAlignAbsBottom: Class<MSHTML$_htmlControlAlign__htmlControlAlignAbsBottom> & MSHTML$_htmlControlAlign__htmlControlAlignAbsBottom & 7;// 7
static +htmlControlAlignAbsMiddle: Class<MSHTML$_htmlControlAlign__htmlControlAlignAbsMiddle> & MSHTML$_htmlControlAlign__htmlControlAlignAbsMiddle & 5;// 5
static +htmlControlAlignBaseline: Class<MSHTML$_htmlControlAlign__htmlControlAlignBaseline> & MSHTML$_htmlControlAlign__htmlControlAlignBaseline & 6;// 6
static +htmlControlAlignBottom: Class<MSHTML$_htmlControlAlign__htmlControlAlignBottom> & MSHTML$_htmlControlAlign__htmlControlAlignBottom & 8;// 8
static +htmlControlAlignCenter: Class<MSHTML$_htmlControlAlign__htmlControlAlignCenter> & MSHTML$_htmlControlAlign__htmlControlAlignCenter & 2;// 2
static +htmlControlAlignLeft: Class<MSHTML$_htmlControlAlign__htmlControlAlignLeft> & MSHTML$_htmlControlAlign__htmlControlAlignLeft & 1;// 1
static +htmlControlAlignMiddle: Class<MSHTML$_htmlControlAlign__htmlControlAlignMiddle> & MSHTML$_htmlControlAlign__htmlControlAlignMiddle & 9;// 9
static +htmlControlAlignNotSet: Class<MSHTML$_htmlControlAlign__htmlControlAlignNotSet> & MSHTML$_htmlControlAlign__htmlControlAlignNotSet & 0;// 0
static +htmlControlAlignRight: Class<MSHTML$_htmlControlAlign__htmlControlAlignRight> & MSHTML$_htmlControlAlign__htmlControlAlignRight & 3;// 3
static +htmlControlAlignTextTop: Class<MSHTML$_htmlControlAlign__htmlControlAlignTextTop> & MSHTML$_htmlControlAlign__htmlControlAlignTextTop & 4;// 4
static +htmlControlAlignTop: Class<MSHTML$_htmlControlAlign__htmlControlAlignTop> & MSHTML$_htmlControlAlign__htmlControlAlignTop & 10;// 10

}

declare class MSHTML$_htmlControlAlign__htmlControlAlign_Max mixins MSHTML$_htmlControlAlign {}
declare class MSHTML$_htmlControlAlign__htmlControlAlignAbsBottom mixins MSHTML$_htmlControlAlign {}
declare class MSHTML$_htmlControlAlign__htmlControlAlignAbsMiddle mixins MSHTML$_htmlControlAlign {}
declare class MSHTML$_htmlControlAlign__htmlControlAlignBaseline mixins MSHTML$_htmlControlAlign {}
declare class MSHTML$_htmlControlAlign__htmlControlAlignBottom mixins MSHTML$_htmlControlAlign {}
declare class MSHTML$_htmlControlAlign__htmlControlAlignCenter mixins MSHTML$_htmlControlAlign {}
declare class MSHTML$_htmlControlAlign__htmlControlAlignLeft mixins MSHTML$_htmlControlAlign {}
declare class MSHTML$_htmlControlAlign__htmlControlAlignMiddle mixins MSHTML$_htmlControlAlign {}
declare class MSHTML$_htmlControlAlign__htmlControlAlignNotSet mixins MSHTML$_htmlControlAlign {}
declare class MSHTML$_htmlControlAlign__htmlControlAlignRight mixins MSHTML$_htmlControlAlign {}
declare class MSHTML$_htmlControlAlign__htmlControlAlignTextTop mixins MSHTML$_htmlControlAlign {}
declare class MSHTML$_htmlControlAlign__htmlControlAlignTop mixins MSHTML$_htmlControlAlign {}


declare  class MSHTML$_htmlDesignMode {
  constructor(...args: empty): mixed;
static +htmlDesignMode_Max: Class<MSHTML$_htmlDesignMode__htmlDesignMode_Max> & MSHTML$_htmlDesignMode__htmlDesignMode_Max & 2147483647;// 2147483647
static +htmlDesignModeInherit: Class<MSHTML$_htmlDesignMode__htmlDesignModeInherit> & MSHTML$_htmlDesignMode__htmlDesignModeInherit & -2;// -2
static +htmlDesignModeOff: Class<MSHTML$_htmlDesignMode__htmlDesignModeOff> & MSHTML$_htmlDesignMode__htmlDesignModeOff & 0;// 0
static +htmlDesignModeOn: Class<MSHTML$_htmlDesignMode__htmlDesignModeOn> & MSHTML$_htmlDesignMode__htmlDesignModeOn & -1;// -1

}

declare class MSHTML$_htmlDesignMode__htmlDesignMode_Max mixins MSHTML$_htmlDesignMode {}
declare class MSHTML$_htmlDesignMode__htmlDesignModeInherit mixins MSHTML$_htmlDesignMode {}
declare class MSHTML$_htmlDesignMode__htmlDesignModeOff mixins MSHTML$_htmlDesignMode {}
declare class MSHTML$_htmlDesignMode__htmlDesignModeOn mixins MSHTML$_htmlDesignMode {}


declare  class MSHTML$_htmlDir {
  constructor(...args: empty): mixed;
static +htmlDir_Max: Class<MSHTML$_htmlDir__htmlDir_Max> & MSHTML$_htmlDir__htmlDir_Max & 2147483647;// 2147483647
static +htmlDirLeftToRight: Class<MSHTML$_htmlDir__htmlDirLeftToRight> & MSHTML$_htmlDir__htmlDirLeftToRight & 1;// 1
static +htmlDirNotSet: Class<MSHTML$_htmlDir__htmlDirNotSet> & MSHTML$_htmlDir__htmlDirNotSet & 0;// 0
static +htmlDirRightToLeft: Class<MSHTML$_htmlDir__htmlDirRightToLeft> & MSHTML$_htmlDir__htmlDirRightToLeft & 2;// 2

}

declare class MSHTML$_htmlDir__htmlDir_Max mixins MSHTML$_htmlDir {}
declare class MSHTML$_htmlDir__htmlDirLeftToRight mixins MSHTML$_htmlDir {}
declare class MSHTML$_htmlDir__htmlDirNotSet mixins MSHTML$_htmlDir {}
declare class MSHTML$_htmlDir__htmlDirRightToLeft mixins MSHTML$_htmlDir {}


declare  class MSHTML$_htmlDirection {
  constructor(...args: empty): mixed;
static +htmlDirection_Max: Class<MSHTML$_htmlDirection__htmlDirection_Max> & MSHTML$_htmlDirection__htmlDirection_Max & 2147483647;// 2147483647
static +htmlDirectionBackward: Class<MSHTML$_htmlDirection__htmlDirectionBackward> & MSHTML$_htmlDirection__htmlDirectionBackward & -99999;// -99999
static +htmlDirectionForward: Class<MSHTML$_htmlDirection__htmlDirectionForward> & MSHTML$_htmlDirection__htmlDirectionForward & 99999;// 99999

}

declare class MSHTML$_htmlDirection__htmlDirection_Max mixins MSHTML$_htmlDirection {}
declare class MSHTML$_htmlDirection__htmlDirectionBackward mixins MSHTML$_htmlDirection {}
declare class MSHTML$_htmlDirection__htmlDirectionForward mixins MSHTML$_htmlDirection {}


declare  class MSHTML$_HTMLDlgBorder {
  constructor(...args: empty): mixed;
static +HTMLDlgBorder_Max: Class<MSHTML$_HTMLDlgBorder__HTMLDlgBorder_Max> & MSHTML$_HTMLDlgBorder__HTMLDlgBorder_Max & 2147483647;// 2147483647
static +HTMLDlgBorderThick: Class<MSHTML$_HTMLDlgBorder__HTMLDlgBorderThick> & MSHTML$_HTMLDlgBorder__HTMLDlgBorderThick & 262144;// 262144
static +HTMLDlgBorderThin: Class<MSHTML$_HTMLDlgBorder__HTMLDlgBorderThin> & MSHTML$_HTMLDlgBorder__HTMLDlgBorderThin & 0;// 0

}

declare class MSHTML$_HTMLDlgBorder__HTMLDlgBorder_Max mixins MSHTML$_HTMLDlgBorder {}
declare class MSHTML$_HTMLDlgBorder__HTMLDlgBorderThick mixins MSHTML$_HTMLDlgBorder {}
declare class MSHTML$_HTMLDlgBorder__HTMLDlgBorderThin mixins MSHTML$_HTMLDlgBorder {}


declare  class MSHTML$_HTMLDlgCenter {
  constructor(...args: empty): mixed;
static +HTMLDlgCenter_Max: Class<MSHTML$_HTMLDlgCenter__HTMLDlgCenter_Max> & MSHTML$_HTMLDlgCenter__HTMLDlgCenter_Max & 2147483647;// 2147483647
static +HTMLDlgCenter0: Class<MSHTML$_HTMLDlgCenter__HTMLDlgCenter0> & MSHTML$_HTMLDlgCenter__HTMLDlgCenter0 & 0;// 0
static +HTMLDlgCenter1: Class<MSHTML$_HTMLDlgCenter__HTMLDlgCenter1> & MSHTML$_HTMLDlgCenter__HTMLDlgCenter1 & 1;// 1
static +HTMLDlgCenterDesktop: Class<MSHTML$_HTMLDlgCenter__HTMLDlgCenterDesktop> & MSHTML$_HTMLDlgCenter__HTMLDlgCenterDesktop & 2;// 2
static +HTMLDlgCenterNo: Class<MSHTML$_HTMLDlgCenter__HTMLDlgCenterNo> & MSHTML$_HTMLDlgCenter__HTMLDlgCenterNo & 0;// 0
static +HTMLDlgCenterOff: Class<MSHTML$_HTMLDlgCenter__HTMLDlgCenterOff> & MSHTML$_HTMLDlgCenter__HTMLDlgCenterOff & 0;// 0
static +HTMLDlgCenterOn: Class<MSHTML$_HTMLDlgCenter__HTMLDlgCenterOn> & MSHTML$_HTMLDlgCenter__HTMLDlgCenterOn & 1;// 1
static +HTMLDlgCenterParent: Class<MSHTML$_HTMLDlgCenter__HTMLDlgCenterParent> & MSHTML$_HTMLDlgCenter__HTMLDlgCenterParent & 1;// 1
static +HTMLDlgCenterYes: Class<MSHTML$_HTMLDlgCenter__HTMLDlgCenterYes> & MSHTML$_HTMLDlgCenter__HTMLDlgCenterYes & 1;// 1

}

declare class MSHTML$_HTMLDlgCenter__HTMLDlgCenter_Max mixins MSHTML$_HTMLDlgCenter {}
declare class MSHTML$_HTMLDlgCenter__HTMLDlgCenter0 mixins MSHTML$_HTMLDlgCenter {}
declare class MSHTML$_HTMLDlgCenter__HTMLDlgCenter1 mixins MSHTML$_HTMLDlgCenter {}
declare class MSHTML$_HTMLDlgCenter__HTMLDlgCenterDesktop mixins MSHTML$_HTMLDlgCenter {}
declare class MSHTML$_HTMLDlgCenter__HTMLDlgCenterNo mixins MSHTML$_HTMLDlgCenter {}
declare class MSHTML$_HTMLDlgCenter__HTMLDlgCenterOff mixins MSHTML$_HTMLDlgCenter {}
declare class MSHTML$_HTMLDlgCenter__HTMLDlgCenterOn mixins MSHTML$_HTMLDlgCenter {}
declare class MSHTML$_HTMLDlgCenter__HTMLDlgCenterParent mixins MSHTML$_HTMLDlgCenter {}
declare class MSHTML$_HTMLDlgCenter__HTMLDlgCenterYes mixins MSHTML$_HTMLDlgCenter {}


declare  class MSHTML$_HTMLDlgEdge {
  constructor(...args: empty): mixed;
static +HTMLDlgEdge_Max: Class<MSHTML$_HTMLDlgEdge__HTMLDlgEdge_Max> & MSHTML$_HTMLDlgEdge__HTMLDlgEdge_Max & 2147483647;// 2147483647
static +HTMLDlgEdgeRaised: Class<MSHTML$_HTMLDlgEdge__HTMLDlgEdgeRaised> & MSHTML$_HTMLDlgEdge__HTMLDlgEdgeRaised & 16;// 16
static +HTMLDlgEdgeSunken: Class<MSHTML$_HTMLDlgEdge__HTMLDlgEdgeSunken> & MSHTML$_HTMLDlgEdge__HTMLDlgEdgeSunken & 0;// 0

}

declare class MSHTML$_HTMLDlgEdge__HTMLDlgEdge_Max mixins MSHTML$_HTMLDlgEdge {}
declare class MSHTML$_HTMLDlgEdge__HTMLDlgEdgeRaised mixins MSHTML$_HTMLDlgEdge {}
declare class MSHTML$_HTMLDlgEdge__HTMLDlgEdgeSunken mixins MSHTML$_HTMLDlgEdge {}


declare  class MSHTML$_HTMLDlgFlag {
  constructor(...args: empty): mixed;
static +HTMLDlgFlag_Max: Class<MSHTML$_HTMLDlgFlag__HTMLDlgFlag_Max> & MSHTML$_HTMLDlgFlag__HTMLDlgFlag_Max & 2147483647;// 2147483647
static +HTMLDlgFlag0: Class<MSHTML$_HTMLDlgFlag__HTMLDlgFlag0> & MSHTML$_HTMLDlgFlag__HTMLDlgFlag0 & 0;// 0
static +HTMLDlgFlag1: Class<MSHTML$_HTMLDlgFlag__HTMLDlgFlag1> & MSHTML$_HTMLDlgFlag__HTMLDlgFlag1 & 1;// 1
static +HTMLDlgFlagNo: Class<MSHTML$_HTMLDlgFlag__HTMLDlgFlagNo> & MSHTML$_HTMLDlgFlag__HTMLDlgFlagNo & 0;// 0
static +HTMLDlgFlagNotSet: Class<MSHTML$_HTMLDlgFlag__HTMLDlgFlagNotSet> & MSHTML$_HTMLDlgFlag__HTMLDlgFlagNotSet & -1;// -1
static +HTMLDlgFlagOff: Class<MSHTML$_HTMLDlgFlag__HTMLDlgFlagOff> & MSHTML$_HTMLDlgFlag__HTMLDlgFlagOff & 0;// 0
static +HTMLDlgFlagOn: Class<MSHTML$_HTMLDlgFlag__HTMLDlgFlagOn> & MSHTML$_HTMLDlgFlag__HTMLDlgFlagOn & 1;// 1
static +HTMLDlgFlagYes: Class<MSHTML$_HTMLDlgFlag__HTMLDlgFlagYes> & MSHTML$_HTMLDlgFlag__HTMLDlgFlagYes & 1;// 1

}

declare class MSHTML$_HTMLDlgFlag__HTMLDlgFlag_Max mixins MSHTML$_HTMLDlgFlag {}
declare class MSHTML$_HTMLDlgFlag__HTMLDlgFlag0 mixins MSHTML$_HTMLDlgFlag {}
declare class MSHTML$_HTMLDlgFlag__HTMLDlgFlag1 mixins MSHTML$_HTMLDlgFlag {}
declare class MSHTML$_HTMLDlgFlag__HTMLDlgFlagNo mixins MSHTML$_HTMLDlgFlag {}
declare class MSHTML$_HTMLDlgFlag__HTMLDlgFlagNotSet mixins MSHTML$_HTMLDlgFlag {}
declare class MSHTML$_HTMLDlgFlag__HTMLDlgFlagOff mixins MSHTML$_HTMLDlgFlag {}
declare class MSHTML$_HTMLDlgFlag__HTMLDlgFlagOn mixins MSHTML$_HTMLDlgFlag {}
declare class MSHTML$_HTMLDlgFlag__HTMLDlgFlagYes mixins MSHTML$_HTMLDlgFlag {}


declare  class MSHTML$_htmlDraggable {
  constructor(...args: empty): mixed;
static +htmlDraggable_Max: Class<MSHTML$_htmlDraggable__htmlDraggable_Max> & MSHTML$_htmlDraggable__htmlDraggable_Max & 2147483647;// 2147483647
static +htmlDraggableAuto: Class<MSHTML$_htmlDraggable__htmlDraggableAuto> & MSHTML$_htmlDraggable__htmlDraggableAuto & 0;// 0
static +htmlDraggableFalse: Class<MSHTML$_htmlDraggable__htmlDraggableFalse> & MSHTML$_htmlDraggable__htmlDraggableFalse & 2;// 2
static +htmlDraggableTrue: Class<MSHTML$_htmlDraggable__htmlDraggableTrue> & MSHTML$_htmlDraggable__htmlDraggableTrue & 1;// 1

}

declare class MSHTML$_htmlDraggable__htmlDraggable_Max mixins MSHTML$_htmlDraggable {}
declare class MSHTML$_htmlDraggable__htmlDraggableAuto mixins MSHTML$_htmlDraggable {}
declare class MSHTML$_htmlDraggable__htmlDraggableFalse mixins MSHTML$_htmlDraggable {}
declare class MSHTML$_htmlDraggable__htmlDraggableTrue mixins MSHTML$_htmlDraggable {}


declare  class MSHTML$_htmlDropEffect {
  constructor(...args: empty): mixed;
static +htmlDropEffect_Max: Class<MSHTML$_htmlDropEffect__htmlDropEffect_Max> & MSHTML$_htmlDropEffect__htmlDropEffect_Max & 2147483647;// 2147483647
static +htmlDropEffectCopy: Class<MSHTML$_htmlDropEffect__htmlDropEffectCopy> & MSHTML$_htmlDropEffect__htmlDropEffectCopy & 0;// 0
static +htmlDropEffectLink: Class<MSHTML$_htmlDropEffect__htmlDropEffectLink> & MSHTML$_htmlDropEffect__htmlDropEffectLink & 1;// 1
static +htmlDropEffectMove: Class<MSHTML$_htmlDropEffect__htmlDropEffectMove> & MSHTML$_htmlDropEffect__htmlDropEffectMove & 2;// 2
static +htmlDropEffectNone: Class<MSHTML$_htmlDropEffect__htmlDropEffectNone> & MSHTML$_htmlDropEffect__htmlDropEffectNone & 3;// 3

}

declare class MSHTML$_htmlDropEffect__htmlDropEffect_Max mixins MSHTML$_htmlDropEffect {}
declare class MSHTML$_htmlDropEffect__htmlDropEffectCopy mixins MSHTML$_htmlDropEffect {}
declare class MSHTML$_htmlDropEffect__htmlDropEffectLink mixins MSHTML$_htmlDropEffect {}
declare class MSHTML$_htmlDropEffect__htmlDropEffectMove mixins MSHTML$_htmlDropEffect {}
declare class MSHTML$_htmlDropEffect__htmlDropEffectNone mixins MSHTML$_htmlDropEffect {}


declare  class MSHTML$_htmlEditable {
  constructor(...args: empty): mixed;
static +htmlEditable_Max: Class<MSHTML$_htmlEditable__htmlEditable_Max> & MSHTML$_htmlEditable__htmlEditable_Max & 2147483647;// 2147483647
static +htmlEditableFalse: Class<MSHTML$_htmlEditable__htmlEditableFalse> & MSHTML$_htmlEditable__htmlEditableFalse & 2;// 2
static +htmlEditableInherit: Class<MSHTML$_htmlEditable__htmlEditableInherit> & MSHTML$_htmlEditable__htmlEditableInherit & 0;// 0
static +htmlEditableTrue: Class<MSHTML$_htmlEditable__htmlEditableTrue> & MSHTML$_htmlEditable__htmlEditableTrue & 1;// 1

}

declare class MSHTML$_htmlEditable__htmlEditable_Max mixins MSHTML$_htmlEditable {}
declare class MSHTML$_htmlEditable__htmlEditableFalse mixins MSHTML$_htmlEditable {}
declare class MSHTML$_htmlEditable__htmlEditableInherit mixins MSHTML$_htmlEditable {}
declare class MSHTML$_htmlEditable__htmlEditableTrue mixins MSHTML$_htmlEditable {}


declare  class MSHTML$_htmlEffectAllowed {
  constructor(...args: empty): mixed;
static +htmlEffectAllowed_Max: Class<MSHTML$_htmlEffectAllowed__htmlEffectAllowed_Max> & MSHTML$_htmlEffectAllowed__htmlEffectAllowed_Max & 2147483647;// 2147483647
static +htmlEffectAllowedAll: Class<MSHTML$_htmlEffectAllowed__htmlEffectAllowedAll> & MSHTML$_htmlEffectAllowed__htmlEffectAllowedAll & 6;// 6
static +htmlEffectAllowedCopy: Class<MSHTML$_htmlEffectAllowed__htmlEffectAllowedCopy> & MSHTML$_htmlEffectAllowed__htmlEffectAllowedCopy & 0;// 0
static +htmlEffectAllowedCopyLink: Class<MSHTML$_htmlEffectAllowed__htmlEffectAllowedCopyLink> & MSHTML$_htmlEffectAllowed__htmlEffectAllowedCopyLink & 3;// 3
static +htmlEffectAllowedCopyMove: Class<MSHTML$_htmlEffectAllowed__htmlEffectAllowedCopyMove> & MSHTML$_htmlEffectAllowed__htmlEffectAllowedCopyMove & 4;// 4
static +htmlEffectAllowedLink: Class<MSHTML$_htmlEffectAllowed__htmlEffectAllowedLink> & MSHTML$_htmlEffectAllowed__htmlEffectAllowedLink & 1;// 1
static +htmlEffectAllowedLinkMove: Class<MSHTML$_htmlEffectAllowed__htmlEffectAllowedLinkMove> & MSHTML$_htmlEffectAllowed__htmlEffectAllowedLinkMove & 5;// 5
static +htmlEffectAllowedMove: Class<MSHTML$_htmlEffectAllowed__htmlEffectAllowedMove> & MSHTML$_htmlEffectAllowed__htmlEffectAllowedMove & 2;// 2
static +htmlEffectAllowedNone: Class<MSHTML$_htmlEffectAllowed__htmlEffectAllowedNone> & MSHTML$_htmlEffectAllowed__htmlEffectAllowedNone & 7;// 7
static +htmlEffectAllowedUninitialized: Class<MSHTML$_htmlEffectAllowed__htmlEffectAllowedUninitialized> & MSHTML$_htmlEffectAllowed__htmlEffectAllowedUninitialized & 8;// 8

}

declare class MSHTML$_htmlEffectAllowed__htmlEffectAllowed_Max mixins MSHTML$_htmlEffectAllowed {}
declare class MSHTML$_htmlEffectAllowed__htmlEffectAllowedAll mixins MSHTML$_htmlEffectAllowed {}
declare class MSHTML$_htmlEffectAllowed__htmlEffectAllowedCopy mixins MSHTML$_htmlEffectAllowed {}
declare class MSHTML$_htmlEffectAllowed__htmlEffectAllowedCopyLink mixins MSHTML$_htmlEffectAllowed {}
declare class MSHTML$_htmlEffectAllowed__htmlEffectAllowedCopyMove mixins MSHTML$_htmlEffectAllowed {}
declare class MSHTML$_htmlEffectAllowed__htmlEffectAllowedLink mixins MSHTML$_htmlEffectAllowed {}
declare class MSHTML$_htmlEffectAllowed__htmlEffectAllowedLinkMove mixins MSHTML$_htmlEffectAllowed {}
declare class MSHTML$_htmlEffectAllowed__htmlEffectAllowedMove mixins MSHTML$_htmlEffectAllowed {}
declare class MSHTML$_htmlEffectAllowed__htmlEffectAllowedNone mixins MSHTML$_htmlEffectAllowed {}
declare class MSHTML$_htmlEffectAllowed__htmlEffectAllowedUninitialized mixins MSHTML$_htmlEffectAllowed {}


declare  class MSHTML$_htmlEncoding {
  constructor(...args: empty): mixed;
static +htmlEncoding_Max: Class<MSHTML$_htmlEncoding__htmlEncoding_Max> & MSHTML$_htmlEncoding__htmlEncoding_Max & 2147483647;// 2147483647
static +htmlEncodingMultipart: Class<MSHTML$_htmlEncoding__htmlEncodingMultipart> & MSHTML$_htmlEncoding__htmlEncodingMultipart & 1;// 1
static +htmlEncodingText: Class<MSHTML$_htmlEncoding__htmlEncodingText> & MSHTML$_htmlEncoding__htmlEncodingText & 2;// 2
static +htmlEncodingURL: Class<MSHTML$_htmlEncoding__htmlEncodingURL> & MSHTML$_htmlEncoding__htmlEncodingURL & 0;// 0

}

declare class MSHTML$_htmlEncoding__htmlEncoding_Max mixins MSHTML$_htmlEncoding {}
declare class MSHTML$_htmlEncoding__htmlEncodingMultipart mixins MSHTML$_htmlEncoding {}
declare class MSHTML$_htmlEncoding__htmlEncodingText mixins MSHTML$_htmlEncoding {}
declare class MSHTML$_htmlEncoding__htmlEncodingURL mixins MSHTML$_htmlEncoding {}


declare  class MSHTML$_htmlEndPoints {
  constructor(...args: empty): mixed;
static +htmlEndPoints_Max: Class<MSHTML$_htmlEndPoints__htmlEndPoints_Max> & MSHTML$_htmlEndPoints__htmlEndPoints_Max & 2147483647;// 2147483647
static +htmlEndPointsEndToEnd: Class<MSHTML$_htmlEndPoints__htmlEndPointsEndToEnd> & MSHTML$_htmlEndPoints__htmlEndPointsEndToEnd & 4;// 4
static +htmlEndPointsEndToStart: Class<MSHTML$_htmlEndPoints__htmlEndPointsEndToStart> & MSHTML$_htmlEndPoints__htmlEndPointsEndToStart & 3;// 3
static +htmlEndPointsStartToEnd: Class<MSHTML$_htmlEndPoints__htmlEndPointsStartToEnd> & MSHTML$_htmlEndPoints__htmlEndPointsStartToEnd & 2;// 2
static +htmlEndPointsStartToStart: Class<MSHTML$_htmlEndPoints__htmlEndPointsStartToStart> & MSHTML$_htmlEndPoints__htmlEndPointsStartToStart & 1;// 1

}

declare class MSHTML$_htmlEndPoints__htmlEndPoints_Max mixins MSHTML$_htmlEndPoints {}
declare class MSHTML$_htmlEndPoints__htmlEndPointsEndToEnd mixins MSHTML$_htmlEndPoints {}
declare class MSHTML$_htmlEndPoints__htmlEndPointsEndToStart mixins MSHTML$_htmlEndPoints {}
declare class MSHTML$_htmlEndPoints__htmlEndPointsStartToEnd mixins MSHTML$_htmlEndPoints {}
declare class MSHTML$_htmlEndPoints__htmlEndPointsStartToStart mixins MSHTML$_htmlEndPoints {}


declare  class MSHTML$_htmlFrame {
  constructor(...args: empty): mixed;
static +htmlFrame_Max: Class<MSHTML$_htmlFrame__htmlFrame_Max> & MSHTML$_htmlFrame__htmlFrame_Max & 2147483647;// 2147483647
static +htmlFrameabove: Class<MSHTML$_htmlFrame__htmlFrameabove> & MSHTML$_htmlFrame__htmlFrameabove & 2;// 2
static +htmlFramebelow: Class<MSHTML$_htmlFrame__htmlFramebelow> & MSHTML$_htmlFrame__htmlFramebelow & 3;// 3
static +htmlFrameborder: Class<MSHTML$_htmlFrame__htmlFrameborder> & MSHTML$_htmlFrame__htmlFrameborder & 9;// 9
static +htmlFramebox: Class<MSHTML$_htmlFrame__htmlFramebox> & MSHTML$_htmlFrame__htmlFramebox & 8;// 8
static +htmlFramehsides: Class<MSHTML$_htmlFrame__htmlFramehsides> & MSHTML$_htmlFrame__htmlFramehsides & 4;// 4
static +htmlFramelhs: Class<MSHTML$_htmlFrame__htmlFramelhs> & MSHTML$_htmlFrame__htmlFramelhs & 5;// 5
static +htmlFrameNotSet: Class<MSHTML$_htmlFrame__htmlFrameNotSet> & MSHTML$_htmlFrame__htmlFrameNotSet & 0;// 0
static +htmlFramerhs: Class<MSHTML$_htmlFrame__htmlFramerhs> & MSHTML$_htmlFrame__htmlFramerhs & 6;// 6
static +htmlFramevoid: Class<MSHTML$_htmlFrame__htmlFramevoid> & MSHTML$_htmlFrame__htmlFramevoid & 1;// 1
static +htmlFramevsides: Class<MSHTML$_htmlFrame__htmlFramevsides> & MSHTML$_htmlFrame__htmlFramevsides & 7;// 7

}

declare class MSHTML$_htmlFrame__htmlFrame_Max mixins MSHTML$_htmlFrame {}
declare class MSHTML$_htmlFrame__htmlFrameabove mixins MSHTML$_htmlFrame {}
declare class MSHTML$_htmlFrame__htmlFramebelow mixins MSHTML$_htmlFrame {}
declare class MSHTML$_htmlFrame__htmlFrameborder mixins MSHTML$_htmlFrame {}
declare class MSHTML$_htmlFrame__htmlFramebox mixins MSHTML$_htmlFrame {}
declare class MSHTML$_htmlFrame__htmlFramehsides mixins MSHTML$_htmlFrame {}
declare class MSHTML$_htmlFrame__htmlFramelhs mixins MSHTML$_htmlFrame {}
declare class MSHTML$_htmlFrame__htmlFrameNotSet mixins MSHTML$_htmlFrame {}
declare class MSHTML$_htmlFrame__htmlFramerhs mixins MSHTML$_htmlFrame {}
declare class MSHTML$_htmlFrame__htmlFramevoid mixins MSHTML$_htmlFrame {}
declare class MSHTML$_htmlFrame__htmlFramevsides mixins MSHTML$_htmlFrame {}


declare  class MSHTML$_htmlGlyphMode {
  constructor(...args: empty): mixed;
static +htmlGlyphMode_Max: Class<MSHTML$_htmlGlyphMode__htmlGlyphMode_Max> & MSHTML$_htmlGlyphMode__htmlGlyphMode_Max & 2147483647;// 2147483647
static +htmlGlyphModeBegin: Class<MSHTML$_htmlGlyphMode__htmlGlyphModeBegin> & MSHTML$_htmlGlyphMode__htmlGlyphModeBegin & 1;// 1
static +htmlGlyphModeBoth: Class<MSHTML$_htmlGlyphMode__htmlGlyphModeBoth> & MSHTML$_htmlGlyphMode__htmlGlyphModeBoth & 3;// 3
static +htmlGlyphModeEnd: Class<MSHTML$_htmlGlyphMode__htmlGlyphModeEnd> & MSHTML$_htmlGlyphMode__htmlGlyphModeEnd & 2;// 2
static +htmlGlyphModeNone: Class<MSHTML$_htmlGlyphMode__htmlGlyphModeNone> & MSHTML$_htmlGlyphMode__htmlGlyphModeNone & 0;// 0

}

declare class MSHTML$_htmlGlyphMode__htmlGlyphMode_Max mixins MSHTML$_htmlGlyphMode {}
declare class MSHTML$_htmlGlyphMode__htmlGlyphModeBegin mixins MSHTML$_htmlGlyphMode {}
declare class MSHTML$_htmlGlyphMode__htmlGlyphModeBoth mixins MSHTML$_htmlGlyphMode {}
declare class MSHTML$_htmlGlyphMode__htmlGlyphModeEnd mixins MSHTML$_htmlGlyphMode {}
declare class MSHTML$_htmlGlyphMode__htmlGlyphModeNone mixins MSHTML$_htmlGlyphMode {}


declare  class MSHTML$_htmlInput {
  constructor(...args: empty): mixed;
static +htmlInput_Max: Class<MSHTML$_htmlInput__htmlInput_Max> & MSHTML$_htmlInput__htmlInput_Max & 2147483647;// 2147483647
static +htmlInputButton: Class<MSHTML$_htmlInput__htmlInputButton> & MSHTML$_htmlInput__htmlInputButton & 1;// 1
static +htmlInputCheckbox: Class<MSHTML$_htmlInput__htmlInputCheckbox> & MSHTML$_htmlInput__htmlInputCheckbox & 2;// 2
static +htmlInputEmail: Class<MSHTML$_htmlInput__htmlInputEmail> & MSHTML$_htmlInput__htmlInputEmail & 17;// 17
static +htmlInputFile: Class<MSHTML$_htmlInput__htmlInputFile> & MSHTML$_htmlInput__htmlInputFile & 3;// 3
static +htmlInputHidden: Class<MSHTML$_htmlInput__htmlInputHidden> & MSHTML$_htmlInput__htmlInputHidden & 4;// 4
static +htmlInputImage: Class<MSHTML$_htmlInput__htmlInputImage> & MSHTML$_htmlInput__htmlInputImage & 5;// 5
static +htmlInputNotSet: Class<MSHTML$_htmlInput__htmlInputNotSet> & MSHTML$_htmlInput__htmlInputNotSet & 0;// 0
static +htmlInputNumber: Class<MSHTML$_htmlInput__htmlInputNumber> & MSHTML$_htmlInput__htmlInputNumber & 18;// 18
static +htmlInputPassword: Class<MSHTML$_htmlInput__htmlInputPassword> & MSHTML$_htmlInput__htmlInputPassword & 6;// 6
static +htmlInputRadio: Class<MSHTML$_htmlInput__htmlInputRadio> & MSHTML$_htmlInput__htmlInputRadio & 7;// 7
static +htmlInputRange: Class<MSHTML$_htmlInput__htmlInputRange> & MSHTML$_htmlInput__htmlInputRange & 15;// 15
static +htmlInputReset: Class<MSHTML$_htmlInput__htmlInputReset> & MSHTML$_htmlInput__htmlInputReset & 8;// 8
static +htmlInputRichtext: Class<MSHTML$_htmlInput__htmlInputRichtext> & MSHTML$_htmlInput__htmlInputRichtext & 14;// 14
static +htmlInputSearch: Class<MSHTML$_htmlInput__htmlInputSearch> & MSHTML$_htmlInput__htmlInputSearch & 20;// 20
static +htmlInputSelectMultiple: Class<MSHTML$_htmlInput__htmlInputSelectMultiple> & MSHTML$_htmlInput__htmlInputSelectMultiple & 10;// 10
static +htmlInputSelectOne: Class<MSHTML$_htmlInput__htmlInputSelectOne> & MSHTML$_htmlInput__htmlInputSelectOne & 9;// 9
static +htmlInputSubmit: Class<MSHTML$_htmlInput__htmlInputSubmit> & MSHTML$_htmlInput__htmlInputSubmit & 11;// 11
static +htmlInputTel: Class<MSHTML$_htmlInput__htmlInputTel> & MSHTML$_htmlInput__htmlInputTel & 19;// 19
static +htmlInputText: Class<MSHTML$_htmlInput__htmlInputText> & MSHTML$_htmlInput__htmlInputText & 12;// 12
static +htmlInputTextarea: Class<MSHTML$_htmlInput__htmlInputTextarea> & MSHTML$_htmlInput__htmlInputTextarea & 13;// 13
static +htmlInputUrl: Class<MSHTML$_htmlInput__htmlInputUrl> & MSHTML$_htmlInput__htmlInputUrl & 16;// 16

}

declare class MSHTML$_htmlInput__htmlInput_Max mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputButton mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputCheckbox mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputEmail mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputFile mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputHidden mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputImage mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputNotSet mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputNumber mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputPassword mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputRadio mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputRange mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputReset mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputRichtext mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputSearch mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputSelectMultiple mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputSelectOne mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputSubmit mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputTel mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputText mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputTextarea mixins MSHTML$_htmlInput {}
declare class MSHTML$_htmlInput__htmlInputUrl mixins MSHTML$_htmlInput {}


declare  class MSHTML$_htmlListType {
  constructor(...args: empty): mixed;
static +htmlListType_Max: Class<MSHTML$_htmlListType__htmlListType_Max> & MSHTML$_htmlListType__htmlListType_Max & 2147483647;// 2147483647
static +htmlListTypeCircle: Class<MSHTML$_htmlListType__htmlListTypeCircle> & MSHTML$_htmlListType__htmlListTypeCircle & 7;// 7
static +htmlListTypeDisc: Class<MSHTML$_htmlListType__htmlListTypeDisc> & MSHTML$_htmlListType__htmlListTypeDisc & 6;// 6
static +htmlListTypeLargeAlpha: Class<MSHTML$_htmlListType__htmlListTypeLargeAlpha> & MSHTML$_htmlListType__htmlListTypeLargeAlpha & 1;// 1
static +htmlListTypeLargeRoman: Class<MSHTML$_htmlListType__htmlListTypeLargeRoman> & MSHTML$_htmlListType__htmlListTypeLargeRoman & 3;// 3
static +htmlListTypeNotSet: Class<MSHTML$_htmlListType__htmlListTypeNotSet> & MSHTML$_htmlListType__htmlListTypeNotSet & 0;// 0
static +htmlListTypeNumbers: Class<MSHTML$_htmlListType__htmlListTypeNumbers> & MSHTML$_htmlListType__htmlListTypeNumbers & 5;// 5
static +htmlListTypeSmallAlpha: Class<MSHTML$_htmlListType__htmlListTypeSmallAlpha> & MSHTML$_htmlListType__htmlListTypeSmallAlpha & 2;// 2
static +htmlListTypeSmallRoman: Class<MSHTML$_htmlListType__htmlListTypeSmallRoman> & MSHTML$_htmlListType__htmlListTypeSmallRoman & 4;// 4
static +htmlListTypeSquare: Class<MSHTML$_htmlListType__htmlListTypeSquare> & MSHTML$_htmlListType__htmlListTypeSquare & 8;// 8

}

declare class MSHTML$_htmlListType__htmlListType_Max mixins MSHTML$_htmlListType {}
declare class MSHTML$_htmlListType__htmlListTypeCircle mixins MSHTML$_htmlListType {}
declare class MSHTML$_htmlListType__htmlListTypeDisc mixins MSHTML$_htmlListType {}
declare class MSHTML$_htmlListType__htmlListTypeLargeAlpha mixins MSHTML$_htmlListType {}
declare class MSHTML$_htmlListType__htmlListTypeLargeRoman mixins MSHTML$_htmlListType {}
declare class MSHTML$_htmlListType__htmlListTypeNotSet mixins MSHTML$_htmlListType {}
declare class MSHTML$_htmlListType__htmlListTypeNumbers mixins MSHTML$_htmlListType {}
declare class MSHTML$_htmlListType__htmlListTypeSmallAlpha mixins MSHTML$_htmlListType {}
declare class MSHTML$_htmlListType__htmlListTypeSmallRoman mixins MSHTML$_htmlListType {}
declare class MSHTML$_htmlListType__htmlListTypeSquare mixins MSHTML$_htmlListType {}


declare  class MSHTML$_htmlLoop {
  constructor(...args: empty): mixed;
static +htmlLoop_Max: Class<MSHTML$_htmlLoop__htmlLoop_Max> & MSHTML$_htmlLoop__htmlLoop_Max & 2147483647;// 2147483647
static +htmlLoopLoopInfinite: Class<MSHTML$_htmlLoop__htmlLoopLoopInfinite> & MSHTML$_htmlLoop__htmlLoopLoopInfinite & -1;// -1

}

declare class MSHTML$_htmlLoop__htmlLoop_Max mixins MSHTML$_htmlLoop {}
declare class MSHTML$_htmlLoop__htmlLoopLoopInfinite mixins MSHTML$_htmlLoop {}


declare  class MSHTML$_htmlMarqueeBehavior {
  constructor(...args: empty): mixed;
static +htmlMarqueeBehavior_Max: Class<MSHTML$_htmlMarqueeBehavior__htmlMarqueeBehavior_Max> & MSHTML$_htmlMarqueeBehavior__htmlMarqueeBehavior_Max & 2147483647;// 2147483647
static +htmlMarqueeBehavioralternate: Class<MSHTML$_htmlMarqueeBehavior__htmlMarqueeBehavioralternate> & MSHTML$_htmlMarqueeBehavior__htmlMarqueeBehavioralternate & 3;// 3
static +htmlMarqueeBehaviorscroll: Class<MSHTML$_htmlMarqueeBehavior__htmlMarqueeBehaviorscroll> & MSHTML$_htmlMarqueeBehavior__htmlMarqueeBehaviorscroll & 1;// 1
static +htmlMarqueeBehaviorslide: Class<MSHTML$_htmlMarqueeBehavior__htmlMarqueeBehaviorslide> & MSHTML$_htmlMarqueeBehavior__htmlMarqueeBehaviorslide & 2;// 2

}

declare class MSHTML$_htmlMarqueeBehavior__htmlMarqueeBehavior_Max mixins MSHTML$_htmlMarqueeBehavior {}
declare class MSHTML$_htmlMarqueeBehavior__htmlMarqueeBehavioralternate mixins MSHTML$_htmlMarqueeBehavior {}
declare class MSHTML$_htmlMarqueeBehavior__htmlMarqueeBehaviorscroll mixins MSHTML$_htmlMarqueeBehavior {}
declare class MSHTML$_htmlMarqueeBehavior__htmlMarqueeBehaviorslide mixins MSHTML$_htmlMarqueeBehavior {}


declare  class MSHTML$_htmlMarqueeDirection {
  constructor(...args: empty): mixed;
static +htmlMarqueeDirection_Max: Class<MSHTML$_htmlMarqueeDirection__htmlMarqueeDirection_Max> & MSHTML$_htmlMarqueeDirection__htmlMarqueeDirection_Max & 2147483647;// 2147483647
static +htmlMarqueeDirectiondown: Class<MSHTML$_htmlMarqueeDirection__htmlMarqueeDirectiondown> & MSHTML$_htmlMarqueeDirection__htmlMarqueeDirectiondown & 7;// 7
static +htmlMarqueeDirectionleft: Class<MSHTML$_htmlMarqueeDirection__htmlMarqueeDirectionleft> & MSHTML$_htmlMarqueeDirection__htmlMarqueeDirectionleft & 1;// 1
static +htmlMarqueeDirectionright: Class<MSHTML$_htmlMarqueeDirection__htmlMarqueeDirectionright> & MSHTML$_htmlMarqueeDirection__htmlMarqueeDirectionright & 3;// 3
static +htmlMarqueeDirectionup: Class<MSHTML$_htmlMarqueeDirection__htmlMarqueeDirectionup> & MSHTML$_htmlMarqueeDirection__htmlMarqueeDirectionup & 5;// 5

}

declare class MSHTML$_htmlMarqueeDirection__htmlMarqueeDirection_Max mixins MSHTML$_htmlMarqueeDirection {}
declare class MSHTML$_htmlMarqueeDirection__htmlMarqueeDirectiondown mixins MSHTML$_htmlMarqueeDirection {}
declare class MSHTML$_htmlMarqueeDirection__htmlMarqueeDirectionleft mixins MSHTML$_htmlMarqueeDirection {}
declare class MSHTML$_htmlMarqueeDirection__htmlMarqueeDirectionright mixins MSHTML$_htmlMarqueeDirection {}
declare class MSHTML$_htmlMarqueeDirection__htmlMarqueeDirectionup mixins MSHTML$_htmlMarqueeDirection {}


declare  class MSHTML$_HTMLMaximizeFlag {
  constructor(...args: empty): mixed;
static +HTMLMaximizeFlag_Max: Class<MSHTML$_HTMLMaximizeFlag__HTMLMaximizeFlag_Max> & MSHTML$_HTMLMaximizeFlag__HTMLMaximizeFlag_Max & 2147483647;// 2147483647
static +HTMLMaximizeFlagNo: Class<MSHTML$_HTMLMaximizeFlag__HTMLMaximizeFlagNo> & MSHTML$_HTMLMaximizeFlag__HTMLMaximizeFlagNo & 0;// 0
static +HTMLMaximizeFlagYes: Class<MSHTML$_HTMLMaximizeFlag__HTMLMaximizeFlagYes> & MSHTML$_HTMLMaximizeFlag__HTMLMaximizeFlagYes & 65536;// 65536

}

declare class MSHTML$_HTMLMaximizeFlag__HTMLMaximizeFlag_Max mixins MSHTML$_HTMLMaximizeFlag {}
declare class MSHTML$_HTMLMaximizeFlag__HTMLMaximizeFlagNo mixins MSHTML$_HTMLMaximizeFlag {}
declare class MSHTML$_HTMLMaximizeFlag__HTMLMaximizeFlagYes mixins MSHTML$_HTMLMaximizeFlag {}


declare  class MSHTML$_htmlMediaErr {
  constructor(...args: empty): mixed;
static +htmlMediaErr_Max: Class<MSHTML$_htmlMediaErr__htmlMediaErr_Max> & MSHTML$_htmlMediaErr__htmlMediaErr_Max & 2147483647;// 2147483647
static +htmlMediaErrAborted: Class<MSHTML$_htmlMediaErr__htmlMediaErrAborted> & MSHTML$_htmlMediaErr__htmlMediaErrAborted & 0;// 0
static +htmlMediaErrDecode: Class<MSHTML$_htmlMediaErr__htmlMediaErrDecode> & MSHTML$_htmlMediaErr__htmlMediaErrDecode & 2;// 2
static +htmlMediaErrNetwork: Class<MSHTML$_htmlMediaErr__htmlMediaErrNetwork> & MSHTML$_htmlMediaErr__htmlMediaErrNetwork & 1;// 1
static +htmlMediaErrSrcNotSupported: Class<MSHTML$_htmlMediaErr__htmlMediaErrSrcNotSupported> & MSHTML$_htmlMediaErr__htmlMediaErrSrcNotSupported & 3;// 3

}

declare class MSHTML$_htmlMediaErr__htmlMediaErr_Max mixins MSHTML$_htmlMediaErr {}
declare class MSHTML$_htmlMediaErr__htmlMediaErrAborted mixins MSHTML$_htmlMediaErr {}
declare class MSHTML$_htmlMediaErr__htmlMediaErrDecode mixins MSHTML$_htmlMediaErr {}
declare class MSHTML$_htmlMediaErr__htmlMediaErrNetwork mixins MSHTML$_htmlMediaErr {}
declare class MSHTML$_htmlMediaErr__htmlMediaErrSrcNotSupported mixins MSHTML$_htmlMediaErr {}


declare  class MSHTML$_htmlMediaNetworkState {
  constructor(...args: empty): mixed;
static +htmlMediaNetworkState_Max: Class<MSHTML$_htmlMediaNetworkState__htmlMediaNetworkState_Max> & MSHTML$_htmlMediaNetworkState__htmlMediaNetworkState_Max & 2147483647;// 2147483647
static +htmlMediaNetworkStateEmpty: Class<MSHTML$_htmlMediaNetworkState__htmlMediaNetworkStateEmpty> & MSHTML$_htmlMediaNetworkState__htmlMediaNetworkStateEmpty & 0;// 0
static +htmlMediaNetworkStateIdle: Class<MSHTML$_htmlMediaNetworkState__htmlMediaNetworkStateIdle> & MSHTML$_htmlMediaNetworkState__htmlMediaNetworkStateIdle & 1;// 1
static +htmlMediaNetworkStateLoading: Class<MSHTML$_htmlMediaNetworkState__htmlMediaNetworkStateLoading> & MSHTML$_htmlMediaNetworkState__htmlMediaNetworkStateLoading & 2;// 2
static +htmlMediaNetworkStateNoSource: Class<MSHTML$_htmlMediaNetworkState__htmlMediaNetworkStateNoSource> & MSHTML$_htmlMediaNetworkState__htmlMediaNetworkStateNoSource & 3;// 3

}

declare class MSHTML$_htmlMediaNetworkState__htmlMediaNetworkState_Max mixins MSHTML$_htmlMediaNetworkState {}
declare class MSHTML$_htmlMediaNetworkState__htmlMediaNetworkStateEmpty mixins MSHTML$_htmlMediaNetworkState {}
declare class MSHTML$_htmlMediaNetworkState__htmlMediaNetworkStateIdle mixins MSHTML$_htmlMediaNetworkState {}
declare class MSHTML$_htmlMediaNetworkState__htmlMediaNetworkStateLoading mixins MSHTML$_htmlMediaNetworkState {}
declare class MSHTML$_htmlMediaNetworkState__htmlMediaNetworkStateNoSource mixins MSHTML$_htmlMediaNetworkState {}


declare  class MSHTML$_htmlMediaReadyState {
  constructor(...args: empty): mixed;
static +htmlMediaReadyState_Max: Class<MSHTML$_htmlMediaReadyState__htmlMediaReadyState_Max> & MSHTML$_htmlMediaReadyState__htmlMediaReadyState_Max & 2147483647;// 2147483647
static +htmlMediaReadyStateHaveCurrentData: Class<MSHTML$_htmlMediaReadyState__htmlMediaReadyStateHaveCurrentData> & MSHTML$_htmlMediaReadyState__htmlMediaReadyStateHaveCurrentData & 2;// 2
static +htmlMediaReadyStateHaveEnoughData: Class<MSHTML$_htmlMediaReadyState__htmlMediaReadyStateHaveEnoughData> & MSHTML$_htmlMediaReadyState__htmlMediaReadyStateHaveEnoughData & 4;// 4
static +htmlMediaReadyStateHaveFutureData: Class<MSHTML$_htmlMediaReadyState__htmlMediaReadyStateHaveFutureData> & MSHTML$_htmlMediaReadyState__htmlMediaReadyStateHaveFutureData & 3;// 3
static +htmlMediaReadyStateHaveMetadata: Class<MSHTML$_htmlMediaReadyState__htmlMediaReadyStateHaveMetadata> & MSHTML$_htmlMediaReadyState__htmlMediaReadyStateHaveMetadata & 1;// 1
static +htmlMediaReadyStateHaveNothing: Class<MSHTML$_htmlMediaReadyState__htmlMediaReadyStateHaveNothing> & MSHTML$_htmlMediaReadyState__htmlMediaReadyStateHaveNothing & 0;// 0

}

declare class MSHTML$_htmlMediaReadyState__htmlMediaReadyState_Max mixins MSHTML$_htmlMediaReadyState {}
declare class MSHTML$_htmlMediaReadyState__htmlMediaReadyStateHaveCurrentData mixins MSHTML$_htmlMediaReadyState {}
declare class MSHTML$_htmlMediaReadyState__htmlMediaReadyStateHaveEnoughData mixins MSHTML$_htmlMediaReadyState {}
declare class MSHTML$_htmlMediaReadyState__htmlMediaReadyStateHaveFutureData mixins MSHTML$_htmlMediaReadyState {}
declare class MSHTML$_htmlMediaReadyState__htmlMediaReadyStateHaveMetadata mixins MSHTML$_htmlMediaReadyState {}
declare class MSHTML$_htmlMediaReadyState__htmlMediaReadyStateHaveNothing mixins MSHTML$_htmlMediaReadyState {}


declare  class MSHTML$_htmlMethod {
  constructor(...args: empty): mixed;
static +htmlMethod_Max: Class<MSHTML$_htmlMethod__htmlMethod_Max> & MSHTML$_htmlMethod__htmlMethod_Max & 2147483647;// 2147483647
static +htmlMethodGet: Class<MSHTML$_htmlMethod__htmlMethodGet> & MSHTML$_htmlMethod__htmlMethodGet & 1;// 1
static +htmlMethodNotSet: Class<MSHTML$_htmlMethod__htmlMethodNotSet> & MSHTML$_htmlMethod__htmlMethodNotSet & 0;// 0
static +htmlMethodPost: Class<MSHTML$_htmlMethod__htmlMethodPost> & MSHTML$_htmlMethod__htmlMethodPost & 2;// 2

}

declare class MSHTML$_htmlMethod__htmlMethod_Max mixins MSHTML$_htmlMethod {}
declare class MSHTML$_htmlMethod__htmlMethodGet mixins MSHTML$_htmlMethod {}
declare class MSHTML$_htmlMethod__htmlMethodNotSet mixins MSHTML$_htmlMethod {}
declare class MSHTML$_htmlMethod__htmlMethodPost mixins MSHTML$_htmlMethod {}


declare  class MSHTML$_HTMLMinimizeFlag {
  constructor(...args: empty): mixed;
static +HTMLMinimizeFlag_Max: Class<MSHTML$_HTMLMinimizeFlag__HTMLMinimizeFlag_Max> & MSHTML$_HTMLMinimizeFlag__HTMLMinimizeFlag_Max & 2147483647;// 2147483647
static +HTMLMinimizeFlagNo: Class<MSHTML$_HTMLMinimizeFlag__HTMLMinimizeFlagNo> & MSHTML$_HTMLMinimizeFlag__HTMLMinimizeFlagNo & 0;// 0
static +HTMLMinimizeFlagYes: Class<MSHTML$_HTMLMinimizeFlag__HTMLMinimizeFlagYes> & MSHTML$_HTMLMinimizeFlag__HTMLMinimizeFlagYes & 131072;// 131072

}

declare class MSHTML$_HTMLMinimizeFlag__HTMLMinimizeFlag_Max mixins MSHTML$_HTMLMinimizeFlag {}
declare class MSHTML$_HTMLMinimizeFlag__HTMLMinimizeFlagNo mixins MSHTML$_HTMLMinimizeFlag {}
declare class MSHTML$_HTMLMinimizeFlag__HTMLMinimizeFlagYes mixins MSHTML$_HTMLMinimizeFlag {}


declare  class MSHTML$_htmlPersistState {
  constructor(...args: empty): mixed;
static +htmlPersistState_Max: Class<MSHTML$_htmlPersistState__htmlPersistState_Max> & MSHTML$_htmlPersistState__htmlPersistState_Max & 2147483647;// 2147483647
static +htmlPersistStateFavorite: Class<MSHTML$_htmlPersistState__htmlPersistStateFavorite> & MSHTML$_htmlPersistState__htmlPersistStateFavorite & 1;// 1
static +htmlPersistStateHistory: Class<MSHTML$_htmlPersistState__htmlPersistStateHistory> & MSHTML$_htmlPersistState__htmlPersistStateHistory & 2;// 2
static +htmlPersistStateNormal: Class<MSHTML$_htmlPersistState__htmlPersistStateNormal> & MSHTML$_htmlPersistState__htmlPersistStateNormal & 0;// 0
static +htmlPersistStateSnapshot: Class<MSHTML$_htmlPersistState__htmlPersistStateSnapshot> & MSHTML$_htmlPersistState__htmlPersistStateSnapshot & 3;// 3
static +htmlPersistStateUserData: Class<MSHTML$_htmlPersistState__htmlPersistStateUserData> & MSHTML$_htmlPersistState__htmlPersistStateUserData & 4;// 4

}

declare class MSHTML$_htmlPersistState__htmlPersistState_Max mixins MSHTML$_htmlPersistState {}
declare class MSHTML$_htmlPersistState__htmlPersistStateFavorite mixins MSHTML$_htmlPersistState {}
declare class MSHTML$_htmlPersistState__htmlPersistStateHistory mixins MSHTML$_htmlPersistState {}
declare class MSHTML$_htmlPersistState__htmlPersistStateNormal mixins MSHTML$_htmlPersistState {}
declare class MSHTML$_htmlPersistState__htmlPersistStateSnapshot mixins MSHTML$_htmlPersistState {}
declare class MSHTML$_htmlPersistState__htmlPersistStateUserData mixins MSHTML$_htmlPersistState {}


declare  class MSHTML$_htmlReadyState {
  constructor(...args: empty): mixed;
static +htmlReadyState_Max: Class<MSHTML$_htmlReadyState__htmlReadyState_Max> & MSHTML$_htmlReadyState__htmlReadyState_Max & 2147483647;// 2147483647
static +htmlReadyStatecomplete: Class<MSHTML$_htmlReadyState__htmlReadyStatecomplete> & MSHTML$_htmlReadyState__htmlReadyStatecomplete & 4;// 4
static +htmlReadyStateinteractive: Class<MSHTML$_htmlReadyState__htmlReadyStateinteractive> & MSHTML$_htmlReadyState__htmlReadyStateinteractive & 3;// 3
static +htmlReadyStateloaded: Class<MSHTML$_htmlReadyState__htmlReadyStateloaded> & MSHTML$_htmlReadyState__htmlReadyStateloaded & 2;// 2
static +htmlReadyStateloading: Class<MSHTML$_htmlReadyState__htmlReadyStateloading> & MSHTML$_htmlReadyState__htmlReadyStateloading & 1;// 1
static +htmlReadyStateuninitialized: Class<MSHTML$_htmlReadyState__htmlReadyStateuninitialized> & MSHTML$_htmlReadyState__htmlReadyStateuninitialized & 0;// 0

}

declare class MSHTML$_htmlReadyState__htmlReadyState_Max mixins MSHTML$_htmlReadyState {}
declare class MSHTML$_htmlReadyState__htmlReadyStatecomplete mixins MSHTML$_htmlReadyState {}
declare class MSHTML$_htmlReadyState__htmlReadyStateinteractive mixins MSHTML$_htmlReadyState {}
declare class MSHTML$_htmlReadyState__htmlReadyStateloaded mixins MSHTML$_htmlReadyState {}
declare class MSHTML$_htmlReadyState__htmlReadyStateloading mixins MSHTML$_htmlReadyState {}
declare class MSHTML$_htmlReadyState__htmlReadyStateuninitialized mixins MSHTML$_htmlReadyState {}


declare  class MSHTML$_htmlRules {
  constructor(...args: empty): mixed;
static +htmlRules_Max: Class<MSHTML$_htmlRules__htmlRules_Max> & MSHTML$_htmlRules__htmlRules_Max & 2147483647;// 2147483647
static +htmlRulesall: Class<MSHTML$_htmlRules__htmlRulesall> & MSHTML$_htmlRules__htmlRulesall & 5;// 5
static +htmlRulescols: Class<MSHTML$_htmlRules__htmlRulescols> & MSHTML$_htmlRules__htmlRulescols & 4;// 4
static +htmlRulesgroups: Class<MSHTML$_htmlRules__htmlRulesgroups> & MSHTML$_htmlRules__htmlRulesgroups & 2;// 2
static +htmlRulesnone: Class<MSHTML$_htmlRules__htmlRulesnone> & MSHTML$_htmlRules__htmlRulesnone & 1;// 1
static +htmlRulesNotSet: Class<MSHTML$_htmlRules__htmlRulesNotSet> & MSHTML$_htmlRules__htmlRulesNotSet & 0;// 0
static +htmlRulesrows: Class<MSHTML$_htmlRules__htmlRulesrows> & MSHTML$_htmlRules__htmlRulesrows & 3;// 3

}

declare class MSHTML$_htmlRules__htmlRules_Max mixins MSHTML$_htmlRules {}
declare class MSHTML$_htmlRules__htmlRulesall mixins MSHTML$_htmlRules {}
declare class MSHTML$_htmlRules__htmlRulescols mixins MSHTML$_htmlRules {}
declare class MSHTML$_htmlRules__htmlRulesgroups mixins MSHTML$_htmlRules {}
declare class MSHTML$_htmlRules__htmlRulesnone mixins MSHTML$_htmlRules {}
declare class MSHTML$_htmlRules__htmlRulesNotSet mixins MSHTML$_htmlRules {}
declare class MSHTML$_htmlRules__htmlRulesrows mixins MSHTML$_htmlRules {}


declare  class MSHTML$_htmlSelectExFlag {
  constructor(...args: empty): mixed;
static +htmlSelectExFlag_Max: Class<MSHTML$_htmlSelectExFlag__htmlSelectExFlag_Max> & MSHTML$_htmlSelectExFlag__htmlSelectExFlag_Max & 2147483647;// 2147483647
static +htmlSelectExFlagHideSelectionInDesign: Class<MSHTML$_htmlSelectExFlag__htmlSelectExFlagHideSelectionInDesign> & MSHTML$_htmlSelectExFlag__htmlSelectExFlagHideSelectionInDesign & 1;// 1
static +htmlSelectExFlagNone: Class<MSHTML$_htmlSelectExFlag__htmlSelectExFlagNone> & MSHTML$_htmlSelectExFlag__htmlSelectExFlagNone & 0;// 0

}

declare class MSHTML$_htmlSelectExFlag__htmlSelectExFlag_Max mixins MSHTML$_htmlSelectExFlag {}
declare class MSHTML$_htmlSelectExFlag__htmlSelectExFlagHideSelectionInDesign mixins MSHTML$_htmlSelectExFlag {}
declare class MSHTML$_htmlSelectExFlag__htmlSelectExFlagNone mixins MSHTML$_htmlSelectExFlag {}


declare  class MSHTML$_htmlSelection {
  constructor(...args: empty): mixed;
static +htmlSelection_Max: Class<MSHTML$_htmlSelection__htmlSelection_Max> & MSHTML$_htmlSelection__htmlSelection_Max & 2147483647;// 2147483647
static +htmlSelectionControl: Class<MSHTML$_htmlSelection__htmlSelectionControl> & MSHTML$_htmlSelection__htmlSelectionControl & 2;// 2
static +htmlSelectionNone: Class<MSHTML$_htmlSelection__htmlSelectionNone> & MSHTML$_htmlSelection__htmlSelectionNone & 0;// 0
static +htmlSelectionTable: Class<MSHTML$_htmlSelection__htmlSelectionTable> & MSHTML$_htmlSelection__htmlSelectionTable & 3;// 3
static +htmlSelectionText: Class<MSHTML$_htmlSelection__htmlSelectionText> & MSHTML$_htmlSelection__htmlSelectionText & 1;// 1

}

declare class MSHTML$_htmlSelection__htmlSelection_Max mixins MSHTML$_htmlSelection {}
declare class MSHTML$_htmlSelection__htmlSelectionControl mixins MSHTML$_htmlSelection {}
declare class MSHTML$_htmlSelection__htmlSelectionNone mixins MSHTML$_htmlSelection {}
declare class MSHTML$_htmlSelection__htmlSelectionTable mixins MSHTML$_htmlSelection {}
declare class MSHTML$_htmlSelection__htmlSelectionText mixins MSHTML$_htmlSelection {}


declare  class MSHTML$_htmlSelectType {
  constructor(...args: empty): mixed;
static +htmlSelectType_Max: Class<MSHTML$_htmlSelectType__htmlSelectType_Max> & MSHTML$_htmlSelectType__htmlSelectType_Max & 2147483647;// 2147483647
static +htmlSelectTypeSelectMultiple: Class<MSHTML$_htmlSelectType__htmlSelectTypeSelectMultiple> & MSHTML$_htmlSelectType__htmlSelectTypeSelectMultiple & 2;// 2
static +htmlSelectTypeSelectOne: Class<MSHTML$_htmlSelectType__htmlSelectTypeSelectOne> & MSHTML$_htmlSelectType__htmlSelectTypeSelectOne & 1;// 1

}

declare class MSHTML$_htmlSelectType__htmlSelectType_Max mixins MSHTML$_htmlSelectType {}
declare class MSHTML$_htmlSelectType__htmlSelectTypeSelectMultiple mixins MSHTML$_htmlSelectType {}
declare class MSHTML$_htmlSelectType__htmlSelectTypeSelectOne mixins MSHTML$_htmlSelectType {}


declare  class MSHTML$_htmlSpellCheck {
  constructor(...args: empty): mixed;
static +htmlSpellCheck_Max: Class<MSHTML$_htmlSpellCheck__htmlSpellCheck_Max> & MSHTML$_htmlSpellCheck__htmlSpellCheck_Max & 2147483647;// 2147483647
static +htmlSpellCheckDefault: Class<MSHTML$_htmlSpellCheck__htmlSpellCheckDefault> & MSHTML$_htmlSpellCheck__htmlSpellCheckDefault & 3;// 3
static +htmlSpellCheckFalse: Class<MSHTML$_htmlSpellCheck__htmlSpellCheckFalse> & MSHTML$_htmlSpellCheck__htmlSpellCheckFalse & 2;// 2
static +htmlSpellCheckNotSet: Class<MSHTML$_htmlSpellCheck__htmlSpellCheckNotSet> & MSHTML$_htmlSpellCheck__htmlSpellCheckNotSet & 0;// 0
static +htmlSpellCheckTrue: Class<MSHTML$_htmlSpellCheck__htmlSpellCheckTrue> & MSHTML$_htmlSpellCheck__htmlSpellCheckTrue & 1;// 1

}

declare class MSHTML$_htmlSpellCheck__htmlSpellCheck_Max mixins MSHTML$_htmlSpellCheck {}
declare class MSHTML$_htmlSpellCheck__htmlSpellCheckDefault mixins MSHTML$_htmlSpellCheck {}
declare class MSHTML$_htmlSpellCheck__htmlSpellCheckFalse mixins MSHTML$_htmlSpellCheck {}
declare class MSHTML$_htmlSpellCheck__htmlSpellCheckNotSet mixins MSHTML$_htmlSpellCheck {}
declare class MSHTML$_htmlSpellCheck__htmlSpellCheckTrue mixins MSHTML$_htmlSpellCheck {}


declare  class MSHTML$_htmlStart {
  constructor(...args: empty): mixed;
static +htmlStart_Max: Class<MSHTML$_htmlStart__htmlStart_Max> & MSHTML$_htmlStart__htmlStart_Max & 2147483647;// 2147483647
static +htmlStartfileopen: Class<MSHTML$_htmlStart__htmlStartfileopen> & MSHTML$_htmlStart__htmlStartfileopen & 0;// 0
static +htmlStartmouseover: Class<MSHTML$_htmlStart__htmlStartmouseover> & MSHTML$_htmlStart__htmlStartmouseover & 1;// 1

}

declare class MSHTML$_htmlStart__htmlStart_Max mixins MSHTML$_htmlStart {}
declare class MSHTML$_htmlStart__htmlStartfileopen mixins MSHTML$_htmlStart {}
declare class MSHTML$_htmlStart__htmlStartmouseover mixins MSHTML$_htmlStart {}


declare  class MSHTML$_HTMLSysMenuFlag {
  constructor(...args: empty): mixed;
static +HTMLSysMenuFlag_Max: Class<MSHTML$_HTMLSysMenuFlag__HTMLSysMenuFlag_Max> & MSHTML$_HTMLSysMenuFlag__HTMLSysMenuFlag_Max & 2147483647;// 2147483647
static +HTMLSysMenuFlagNo: Class<MSHTML$_HTMLSysMenuFlag__HTMLSysMenuFlagNo> & MSHTML$_HTMLSysMenuFlag__HTMLSysMenuFlagNo & 0;// 0
static +HTMLSysMenuFlagYes: Class<MSHTML$_HTMLSysMenuFlag__HTMLSysMenuFlagYes> & MSHTML$_HTMLSysMenuFlag__HTMLSysMenuFlagYes & 524288;// 524288

}

declare class MSHTML$_HTMLSysMenuFlag__HTMLSysMenuFlag_Max mixins MSHTML$_HTMLSysMenuFlag {}
declare class MSHTML$_HTMLSysMenuFlag__HTMLSysMenuFlagNo mixins MSHTML$_HTMLSysMenuFlag {}
declare class MSHTML$_HTMLSysMenuFlag__HTMLSysMenuFlagYes mixins MSHTML$_HTMLSysMenuFlag {}


declare  class MSHTML$_htmlTabIndex {
  constructor(...args: empty): mixed;
static +htmlTabIndex_Max: Class<MSHTML$_htmlTabIndex__htmlTabIndex_Max> & MSHTML$_htmlTabIndex__htmlTabIndex_Max & 2147483647;// 2147483647
static +htmlTabIndexNotSet: Class<MSHTML$_htmlTabIndex__htmlTabIndexNotSet> & MSHTML$_htmlTabIndex__htmlTabIndexNotSet & -32768;// -32768

}

declare class MSHTML$_htmlTabIndex__htmlTabIndex_Max mixins MSHTML$_htmlTabIndex {}
declare class MSHTML$_htmlTabIndex__htmlTabIndexNotSet mixins MSHTML$_htmlTabIndex {}


declare  class MSHTML$_htmlUnit {
  constructor(...args: empty): mixed;
static +htmlUnit_Max: Class<MSHTML$_htmlUnit__htmlUnit_Max> & MSHTML$_htmlUnit__htmlUnit_Max & 2147483647;// 2147483647
static +htmlUnitCharacter: Class<MSHTML$_htmlUnit__htmlUnitCharacter> & MSHTML$_htmlUnit__htmlUnitCharacter & 1;// 1
static +htmlUnitSentence: Class<MSHTML$_htmlUnit__htmlUnitSentence> & MSHTML$_htmlUnit__htmlUnitSentence & 3;// 3
static +htmlUnitTextEdit: Class<MSHTML$_htmlUnit__htmlUnitTextEdit> & MSHTML$_htmlUnit__htmlUnitTextEdit & 6;// 6
static +htmlUnitWord: Class<MSHTML$_htmlUnit__htmlUnitWord> & MSHTML$_htmlUnit__htmlUnitWord & 2;// 2

}

declare class MSHTML$_htmlUnit__htmlUnit_Max mixins MSHTML$_htmlUnit {}
declare class MSHTML$_htmlUnit__htmlUnitCharacter mixins MSHTML$_htmlUnit {}
declare class MSHTML$_htmlUnit__htmlUnitSentence mixins MSHTML$_htmlUnit {}
declare class MSHTML$_htmlUnit__htmlUnitTextEdit mixins MSHTML$_htmlUnit {}
declare class MSHTML$_htmlUnit__htmlUnitWord mixins MSHTML$_htmlUnit {}


declare  class MSHTML$_HTMLWindowState {
  constructor(...args: empty): mixed;
static +HTMLWindowState_Max: Class<MSHTML$_HTMLWindowState__HTMLWindowState_Max> & MSHTML$_HTMLWindowState__HTMLWindowState_Max & 2147483647;// 2147483647
static +HTMLWindowStateMaximize: Class<MSHTML$_HTMLWindowState__HTMLWindowStateMaximize> & MSHTML$_HTMLWindowState__HTMLWindowStateMaximize & 3;// 3
static +HTMLWindowStateMinimize: Class<MSHTML$_HTMLWindowState__HTMLWindowStateMinimize> & MSHTML$_HTMLWindowState__HTMLWindowStateMinimize & 6;// 6
static +HTMLWindowStateNormal: Class<MSHTML$_HTMLWindowState__HTMLWindowStateNormal> & MSHTML$_HTMLWindowState__HTMLWindowStateNormal & 1;// 1

}

declare class MSHTML$_HTMLWindowState__HTMLWindowState_Max mixins MSHTML$_HTMLWindowState {}
declare class MSHTML$_HTMLWindowState__HTMLWindowStateMaximize mixins MSHTML$_HTMLWindowState {}
declare class MSHTML$_HTMLWindowState__HTMLWindowStateMinimize mixins MSHTML$_HTMLWindowState {}
declare class MSHTML$_HTMLWindowState__HTMLWindowStateNormal mixins MSHTML$_HTMLWindowState {}


declare  class MSHTML$_htmlWrap {
  constructor(...args: empty): mixed;
static +htmlWrap_Max: Class<MSHTML$_htmlWrap__htmlWrap_Max> & MSHTML$_htmlWrap__htmlWrap_Max & 2147483647;// 2147483647
static +htmlWrapHard: Class<MSHTML$_htmlWrap__htmlWrapHard> & MSHTML$_htmlWrap__htmlWrapHard & 3;// 3
static +htmlWrapOff: Class<MSHTML$_htmlWrap__htmlWrapOff> & MSHTML$_htmlWrap__htmlWrapOff & 1;// 1
static +htmlWrapSoft: Class<MSHTML$_htmlWrap__htmlWrapSoft> & MSHTML$_htmlWrap__htmlWrapSoft & 2;// 2

}

declare class MSHTML$_htmlWrap__htmlWrap_Max mixins MSHTML$_htmlWrap {}
declare class MSHTML$_htmlWrap__htmlWrapHard mixins MSHTML$_htmlWrap {}
declare class MSHTML$_htmlWrap__htmlWrapOff mixins MSHTML$_htmlWrap {}
declare class MSHTML$_htmlWrap__htmlWrapSoft mixins MSHTML$_htmlWrap {}


declare  class MSHTML$_htmlZOrder {
  constructor(...args: empty): mixed;
static +htmlZOrder_Max: Class<MSHTML$_htmlZOrder__htmlZOrder_Max> & MSHTML$_htmlZOrder__htmlZOrder_Max & 2147483647;// 2147483647
static +htmlZOrderBack: Class<MSHTML$_htmlZOrder__htmlZOrderBack> & MSHTML$_htmlZOrder__htmlZOrderBack & 1;// 1
static +htmlZOrderFront: Class<MSHTML$_htmlZOrder__htmlZOrderFront> & MSHTML$_htmlZOrder__htmlZOrderFront & 0;// 0

}

declare class MSHTML$_htmlZOrder__htmlZOrder_Max mixins MSHTML$_htmlZOrder {}
declare class MSHTML$_htmlZOrder__htmlZOrderBack mixins MSHTML$_htmlZOrder {}
declare class MSHTML$_htmlZOrder__htmlZOrderFront mixins MSHTML$_htmlZOrder {}


declare  class MSHTML$_lengthAdjust {
  constructor(...args: empty): mixed;
static +lengthAdjust_Max: Class<MSHTML$_lengthAdjust__lengthAdjust_Max> & MSHTML$_lengthAdjust__lengthAdjust_Max & 2147483647;// 2147483647
static +LENGTHADJUST_SPACING: Class<MSHTML$_lengthAdjust__LENGTHADJUST_SPACING> & MSHTML$_lengthAdjust__LENGTHADJUST_SPACING & 1;// 1
static +LENGTHADJUST_SPACINGANDGLYPHS: Class<MSHTML$_lengthAdjust__LENGTHADJUST_SPACINGANDGLYPHS> & MSHTML$_lengthAdjust__LENGTHADJUST_SPACINGANDGLYPHS & 2;// 2
static +LENGTHADJUST_UNKNOWN: Class<MSHTML$_lengthAdjust__LENGTHADJUST_UNKNOWN> & MSHTML$_lengthAdjust__LENGTHADJUST_UNKNOWN & 0;// 0

}

declare class MSHTML$_lengthAdjust__lengthAdjust_Max mixins MSHTML$_lengthAdjust {}
declare class MSHTML$_lengthAdjust__LENGTHADJUST_SPACING mixins MSHTML$_lengthAdjust {}
declare class MSHTML$_lengthAdjust__LENGTHADJUST_SPACINGANDGLYPHS mixins MSHTML$_lengthAdjust {}
declare class MSHTML$_lengthAdjust__LENGTHADJUST_UNKNOWN mixins MSHTML$_lengthAdjust {}


declare  class MSHTML$_LINE_DIRECTION {
  constructor(...args: empty): mixed;
static +LINE_DIRECTION_LeftToRight: Class<MSHTML$_LINE_DIRECTION__LINE_DIRECTION_LeftToRight> & MSHTML$_LINE_DIRECTION__LINE_DIRECTION_LeftToRight & 2;// 2
static +LINE_DIRECTION_Max: Class<MSHTML$_LINE_DIRECTION__LINE_DIRECTION_Max> & MSHTML$_LINE_DIRECTION__LINE_DIRECTION_Max & 2147483647;// 2147483647
static +LINE_DIRECTION_RightToLeft: Class<MSHTML$_LINE_DIRECTION__LINE_DIRECTION_RightToLeft> & MSHTML$_LINE_DIRECTION__LINE_DIRECTION_RightToLeft & 1;// 1

}

declare class MSHTML$_LINE_DIRECTION__LINE_DIRECTION_LeftToRight mixins MSHTML$_LINE_DIRECTION {}
declare class MSHTML$_LINE_DIRECTION__LINE_DIRECTION_Max mixins MSHTML$_LINE_DIRECTION {}
declare class MSHTML$_LINE_DIRECTION__LINE_DIRECTION_RightToLeft mixins MSHTML$_LINE_DIRECTION {}


declare  class MSHTML$_MARKUP_CONTEXT_TYPE {
  constructor(...args: empty): mixed;
static +CONTEXT_TYPE_EnterScope: Class<MSHTML$_MARKUP_CONTEXT_TYPE__CONTEXT_TYPE_EnterScope> & MSHTML$_MARKUP_CONTEXT_TYPE__CONTEXT_TYPE_EnterScope & 2;// 2
static +CONTEXT_TYPE_ExitScope: Class<MSHTML$_MARKUP_CONTEXT_TYPE__CONTEXT_TYPE_ExitScope> & MSHTML$_MARKUP_CONTEXT_TYPE__CONTEXT_TYPE_ExitScope & 3;// 3
static +CONTEXT_TYPE_None: Class<MSHTML$_MARKUP_CONTEXT_TYPE__CONTEXT_TYPE_None> & MSHTML$_MARKUP_CONTEXT_TYPE__CONTEXT_TYPE_None & 0;// 0
static +CONTEXT_TYPE_NoScope: Class<MSHTML$_MARKUP_CONTEXT_TYPE__CONTEXT_TYPE_NoScope> & MSHTML$_MARKUP_CONTEXT_TYPE__CONTEXT_TYPE_NoScope & 4;// 4
static +CONTEXT_TYPE_Text: Class<MSHTML$_MARKUP_CONTEXT_TYPE__CONTEXT_TYPE_Text> & MSHTML$_MARKUP_CONTEXT_TYPE__CONTEXT_TYPE_Text & 1;// 1
static +MARKUP_CONTEXT_TYPE_Max: Class<MSHTML$_MARKUP_CONTEXT_TYPE__MARKUP_CONTEXT_TYPE_Max> & MSHTML$_MARKUP_CONTEXT_TYPE__MARKUP_CONTEXT_TYPE_Max & 2147483647;// 2147483647

}

declare class MSHTML$_MARKUP_CONTEXT_TYPE__CONTEXT_TYPE_EnterScope mixins MSHTML$_MARKUP_CONTEXT_TYPE {}
declare class MSHTML$_MARKUP_CONTEXT_TYPE__CONTEXT_TYPE_ExitScope mixins MSHTML$_MARKUP_CONTEXT_TYPE {}
declare class MSHTML$_MARKUP_CONTEXT_TYPE__CONTEXT_TYPE_None mixins MSHTML$_MARKUP_CONTEXT_TYPE {}
declare class MSHTML$_MARKUP_CONTEXT_TYPE__CONTEXT_TYPE_NoScope mixins MSHTML$_MARKUP_CONTEXT_TYPE {}
declare class MSHTML$_MARKUP_CONTEXT_TYPE__CONTEXT_TYPE_Text mixins MSHTML$_MARKUP_CONTEXT_TYPE {}
declare class MSHTML$_MARKUP_CONTEXT_TYPE__MARKUP_CONTEXT_TYPE_Max mixins MSHTML$_MARKUP_CONTEXT_TYPE {}


declare  class MSHTML$_mediaType {
  constructor(...args: empty): mixed;
static +mediaType_Max: Class<MSHTML$_mediaType__mediaType_Max> & MSHTML$_mediaType__mediaType_Max & 2147483647;// 2147483647
static +mediaTypeAll: Class<MSHTML$_mediaType__mediaTypeAll> & MSHTML$_mediaType__mediaTypeAll & 511;// 511
static +mediaTypeAural: Class<MSHTML$_mediaType__mediaTypeAural> & MSHTML$_mediaType__mediaTypeAural & 1;// 1
static +mediaTypeBraille: Class<MSHTML$_mediaType__mediaTypeBraille> & MSHTML$_mediaType__mediaTypeBraille & 2;// 2
static +mediaTypeEmbossed: Class<MSHTML$_mediaType__mediaTypeEmbossed> & MSHTML$_mediaType__mediaTypeEmbossed & 4;// 4
static +mediaTypeHandheld: Class<MSHTML$_mediaType__mediaTypeHandheld> & MSHTML$_mediaType__mediaTypeHandheld & 8;// 8
static +mediaTypeNotSet: Class<MSHTML$_mediaType__mediaTypeNotSet> & MSHTML$_mediaType__mediaTypeNotSet & 0;// 0
static +mediaTypePrint: Class<MSHTML$_mediaType__mediaTypePrint> & MSHTML$_mediaType__mediaTypePrint & 16;// 16
static +mediaTypeProjection: Class<MSHTML$_mediaType__mediaTypeProjection> & MSHTML$_mediaType__mediaTypeProjection & 32;// 32
static +mediaTypeScreen: Class<MSHTML$_mediaType__mediaTypeScreen> & MSHTML$_mediaType__mediaTypeScreen & 64;// 64
static +mediaTypeTty: Class<MSHTML$_mediaType__mediaTypeTty> & MSHTML$_mediaType__mediaTypeTty & 128;// 128
static +mediaTypeTv: Class<MSHTML$_mediaType__mediaTypeTv> & MSHTML$_mediaType__mediaTypeTv & 256;// 256

}

declare class MSHTML$_mediaType__mediaType_Max mixins MSHTML$_mediaType {}
declare class MSHTML$_mediaType__mediaTypeAll mixins MSHTML$_mediaType {}
declare class MSHTML$_mediaType__mediaTypeAural mixins MSHTML$_mediaType {}
declare class MSHTML$_mediaType__mediaTypeBraille mixins MSHTML$_mediaType {}
declare class MSHTML$_mediaType__mediaTypeEmbossed mixins MSHTML$_mediaType {}
declare class MSHTML$_mediaType__mediaTypeHandheld mixins MSHTML$_mediaType {}
declare class MSHTML$_mediaType__mediaTypeNotSet mixins MSHTML$_mediaType {}
declare class MSHTML$_mediaType__mediaTypePrint mixins MSHTML$_mediaType {}
declare class MSHTML$_mediaType__mediaTypeProjection mixins MSHTML$_mediaType {}
declare class MSHTML$_mediaType__mediaTypeScreen mixins MSHTML$_mediaType {}
declare class MSHTML$_mediaType__mediaTypeTty mixins MSHTML$_mediaType {}
declare class MSHTML$_mediaType__mediaTypeTv mixins MSHTML$_mediaType {}


declare  class MSHTML$_MOVEUNIT_ACTION {
  constructor(...args: empty): mixed;
static +MOVEUNIT_ACTION_Max: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_ACTION_Max> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_ACTION_Max & 2147483647;// 2147483647
static +MOVEUNIT_NEXTBLOCK: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTBLOCK> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTBLOCK & 19;// 19
static +MOVEUNIT_NEXTCHAR: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTCHAR> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTCHAR & 1;// 1
static +MOVEUNIT_NEXTCLUSTERBEGIN: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTCLUSTERBEGIN> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTCLUSTERBEGIN & 3;// 3
static +MOVEUNIT_NEXTCLUSTEREND: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTCLUSTEREND> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTCLUSTEREND & 5;// 5
static +MOVEUNIT_NEXTPROOFWORD: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTPROOFWORD> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTPROOFWORD & 11;// 11
static +MOVEUNIT_NEXTSENTENCE: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTSENTENCE> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTSENTENCE & 17;// 17
static +MOVEUNIT_NEXTURLBEGIN: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTURLBEGIN> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTURLBEGIN & 12;// 12
static +MOVEUNIT_NEXTURLEND: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTURLEND> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTURLEND & 14;// 14
static +MOVEUNIT_NEXTWORDBEGIN: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTWORDBEGIN> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTWORDBEGIN & 7;// 7
static +MOVEUNIT_NEXTWORDEND: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTWORDEND> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTWORDEND & 9;// 9
static +MOVEUNIT_PREVBLOCK: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVBLOCK> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVBLOCK & 18;// 18
static +MOVEUNIT_PREVCHAR: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVCHAR> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVCHAR & 0;// 0
static +MOVEUNIT_PREVCLUSTERBEGIN: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVCLUSTERBEGIN> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVCLUSTERBEGIN & 2;// 2
static +MOVEUNIT_PREVCLUSTEREND: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVCLUSTEREND> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVCLUSTEREND & 4;// 4
static +MOVEUNIT_PREVPROOFWORD: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVPROOFWORD> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVPROOFWORD & 10;// 10
static +MOVEUNIT_PREVSENTENCE: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVSENTENCE> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVSENTENCE & 16;// 16
static +MOVEUNIT_PREVURLBEGIN: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVURLBEGIN> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVURLBEGIN & 13;// 13
static +MOVEUNIT_PREVURLEND: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVURLEND> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVURLEND & 15;// 15
static +MOVEUNIT_PREVWORDBEGIN: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVWORDBEGIN> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVWORDBEGIN & 6;// 6
static +MOVEUNIT_PREVWORDEND: Class<MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVWORDEND> & MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVWORDEND & 8;// 8

}

declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_ACTION_Max mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTBLOCK mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTCHAR mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTCLUSTERBEGIN mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTCLUSTEREND mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTPROOFWORD mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTSENTENCE mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTURLBEGIN mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTURLEND mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTWORDBEGIN mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_NEXTWORDEND mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVBLOCK mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVCHAR mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVCLUSTERBEGIN mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVCLUSTEREND mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVPROOFWORD mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVSENTENCE mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVURLBEGIN mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVURLEND mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVWORDBEGIN mixins MSHTML$_MOVEUNIT_ACTION {}
declare class MSHTML$_MOVEUNIT_ACTION__MOVEUNIT_PREVWORDEND mixins MSHTML$_MOVEUNIT_ACTION {}


declare  class MSHTML$_PARSE_FLAGS {
  constructor(...args: empty): mixed;
static +PARSE_ABSOLUTIFYIE40URLS: Class<MSHTML$_PARSE_FLAGS__PARSE_ABSOLUTIFYIE40URLS> & MSHTML$_PARSE_FLAGS__PARSE_ABSOLUTIFYIE40URLS & 1;// 1
static +PARSE_DISABLEVML: Class<MSHTML$_PARSE_FLAGS__PARSE_DISABLEVML> & MSHTML$_PARSE_FLAGS__PARSE_DISABLEVML & 2;// 2
static +PARSE_FLAGS_Max: Class<MSHTML$_PARSE_FLAGS__PARSE_FLAGS_Max> & MSHTML$_PARSE_FLAGS__PARSE_FLAGS_Max & 2147483647;// 2147483647

}

declare class MSHTML$_PARSE_FLAGS__PARSE_ABSOLUTIFYIE40URLS mixins MSHTML$_PARSE_FLAGS {}
declare class MSHTML$_PARSE_FLAGS__PARSE_DISABLEVML mixins MSHTML$_PARSE_FLAGS {}
declare class MSHTML$_PARSE_FLAGS__PARSE_FLAGS_Max mixins MSHTML$_PARSE_FLAGS {}


declare  class MSHTML$_POINTER_GRAVITY {
  constructor(...args: empty): mixed;
static +POINTER_GRAVITY_Left: Class<MSHTML$_POINTER_GRAVITY__POINTER_GRAVITY_Left> & MSHTML$_POINTER_GRAVITY__POINTER_GRAVITY_Left & 0;// 0
static +POINTER_GRAVITY_Max: Class<MSHTML$_POINTER_GRAVITY__POINTER_GRAVITY_Max> & MSHTML$_POINTER_GRAVITY__POINTER_GRAVITY_Max & 2147483647;// 2147483647
static +POINTER_GRAVITY_Right: Class<MSHTML$_POINTER_GRAVITY__POINTER_GRAVITY_Right> & MSHTML$_POINTER_GRAVITY__POINTER_GRAVITY_Right & 1;// 1

}

declare class MSHTML$_POINTER_GRAVITY__POINTER_GRAVITY_Left mixins MSHTML$_POINTER_GRAVITY {}
declare class MSHTML$_POINTER_GRAVITY__POINTER_GRAVITY_Max mixins MSHTML$_POINTER_GRAVITY {}
declare class MSHTML$_POINTER_GRAVITY__POINTER_GRAVITY_Right mixins MSHTML$_POINTER_GRAVITY {}


declare  class MSHTML$_sandboxAllow {
  constructor(...args: empty): mixed;
static +sandboxAllow_Max: Class<MSHTML$_sandboxAllow__sandboxAllow_Max> & MSHTML$_sandboxAllow__sandboxAllow_Max & 2147483647;// 2147483647
static +sandboxAllowForms: Class<MSHTML$_sandboxAllow__sandboxAllowForms> & MSHTML$_sandboxAllow__sandboxAllowForms & 3;// 3
static +sandboxAllowPopups: Class<MSHTML$_sandboxAllow__sandboxAllowPopups> & MSHTML$_sandboxAllow__sandboxAllowPopups & 4;// 4
static +sandboxAllowSameOrigin: Class<MSHTML$_sandboxAllow__sandboxAllowSameOrigin> & MSHTML$_sandboxAllow__sandboxAllowSameOrigin & 1;// 1
static +sandboxAllowScripts: Class<MSHTML$_sandboxAllow__sandboxAllowScripts> & MSHTML$_sandboxAllow__sandboxAllowScripts & 0;// 0
static +sandboxAllowTopNavigation: Class<MSHTML$_sandboxAllow__sandboxAllowTopNavigation> & MSHTML$_sandboxAllow__sandboxAllowTopNavigation & 2;// 2

}

declare class MSHTML$_sandboxAllow__sandboxAllow_Max mixins MSHTML$_sandboxAllow {}
declare class MSHTML$_sandboxAllow__sandboxAllowForms mixins MSHTML$_sandboxAllow {}
declare class MSHTML$_sandboxAllow__sandboxAllowPopups mixins MSHTML$_sandboxAllow {}
declare class MSHTML$_sandboxAllow__sandboxAllowSameOrigin mixins MSHTML$_sandboxAllow {}
declare class MSHTML$_sandboxAllow__sandboxAllowScripts mixins MSHTML$_sandboxAllow {}
declare class MSHTML$_sandboxAllow__sandboxAllowTopNavigation mixins MSHTML$_sandboxAllow {}


declare  class MSHTML$_SAVE_SEGMENTS_FLAGS {
  constructor(...args: empty): mixed;
static +SAVE_SEGMENTS_FLAGS_Max: Class<MSHTML$_SAVE_SEGMENTS_FLAGS__SAVE_SEGMENTS_FLAGS_Max> & MSHTML$_SAVE_SEGMENTS_FLAGS__SAVE_SEGMENTS_FLAGS_Max & 2147483647;// 2147483647
static +SAVE_SEGMENTS_NoIE4SelectionCompat: Class<MSHTML$_SAVE_SEGMENTS_FLAGS__SAVE_SEGMENTS_NoIE4SelectionCompat> & MSHTML$_SAVE_SEGMENTS_FLAGS__SAVE_SEGMENTS_NoIE4SelectionCompat & 1;// 1

}

declare class MSHTML$_SAVE_SEGMENTS_FLAGS__SAVE_SEGMENTS_FLAGS_Max mixins MSHTML$_SAVE_SEGMENTS_FLAGS {}
declare class MSHTML$_SAVE_SEGMENTS_FLAGS__SAVE_SEGMENTS_NoIE4SelectionCompat mixins MSHTML$_SAVE_SEGMENTS_FLAGS {}


declare  class MSHTML$_SCRIPT_TIMER_TYPE {
  constructor(...args: empty): mixed;
static +SCRIPT_TIMER_TYPE_Max: Class<MSHTML$_SCRIPT_TIMER_TYPE__SCRIPT_TIMER_TYPE_Max> & MSHTML$_SCRIPT_TIMER_TYPE__SCRIPT_TIMER_TYPE_Max & 2147483647;// 2147483647
static +STT_ANIMATION_FRAME: Class<MSHTML$_SCRIPT_TIMER_TYPE__STT_ANIMATION_FRAME> & MSHTML$_SCRIPT_TIMER_TYPE__STT_ANIMATION_FRAME & 3;// 3
static +STT_IMMEDIATE: Class<MSHTML$_SCRIPT_TIMER_TYPE__STT_IMMEDIATE> & MSHTML$_SCRIPT_TIMER_TYPE__STT_IMMEDIATE & 2;// 2
static +STT_INTERVAL: Class<MSHTML$_SCRIPT_TIMER_TYPE__STT_INTERVAL> & MSHTML$_SCRIPT_TIMER_TYPE__STT_INTERVAL & 1;// 1
static +STT_TIMEOUT: Class<MSHTML$_SCRIPT_TIMER_TYPE__STT_TIMEOUT> & MSHTML$_SCRIPT_TIMER_TYPE__STT_TIMEOUT & 0;// 0

}

declare class MSHTML$_SCRIPT_TIMER_TYPE__SCRIPT_TIMER_TYPE_Max mixins MSHTML$_SCRIPT_TIMER_TYPE {}
declare class MSHTML$_SCRIPT_TIMER_TYPE__STT_ANIMATION_FRAME mixins MSHTML$_SCRIPT_TIMER_TYPE {}
declare class MSHTML$_SCRIPT_TIMER_TYPE__STT_IMMEDIATE mixins MSHTML$_SCRIPT_TIMER_TYPE {}
declare class MSHTML$_SCRIPT_TIMER_TYPE__STT_INTERVAL mixins MSHTML$_SCRIPT_TIMER_TYPE {}
declare class MSHTML$_SCRIPT_TIMER_TYPE__STT_TIMEOUT mixins MSHTML$_SCRIPT_TIMER_TYPE {}


declare  class MSHTML$_SECUREURLHOSTVALIDATE_FLAGS {
  constructor(...args: empty): mixed;
static +SECUREURLHOSTVALIDATE_FLAGS_Max: Class<MSHTML$_SECUREURLHOSTVALIDATE_FLAGS__SECUREURLHOSTVALIDATE_FLAGS_Max> & MSHTML$_SECUREURLHOSTVALIDATE_FLAGS__SECUREURLHOSTVALIDATE_FLAGS_Max & 2147483647;// 2147483647
static +SUHV_PROMPTBEFORENO: Class<MSHTML$_SECUREURLHOSTVALIDATE_FLAGS__SUHV_PROMPTBEFORENO> & MSHTML$_SECUREURLHOSTVALIDATE_FLAGS__SUHV_PROMPTBEFORENO & 1;// 1
static +SUHV_SILENTYES: Class<MSHTML$_SECUREURLHOSTVALIDATE_FLAGS__SUHV_SILENTYES> & MSHTML$_SECUREURLHOSTVALIDATE_FLAGS__SUHV_SILENTYES & 2;// 2
static +SUHV_UNSECURESOURCE: Class<MSHTML$_SECUREURLHOSTVALIDATE_FLAGS__SUHV_UNSECURESOURCE> & MSHTML$_SECUREURLHOSTVALIDATE_FLAGS__SUHV_UNSECURESOURCE & 4;// 4

}

declare class MSHTML$_SECUREURLHOSTVALIDATE_FLAGS__SECUREURLHOSTVALIDATE_FLAGS_Max mixins MSHTML$_SECUREURLHOSTVALIDATE_FLAGS {}
declare class MSHTML$_SECUREURLHOSTVALIDATE_FLAGS__SUHV_PROMPTBEFORENO mixins MSHTML$_SECUREURLHOSTVALIDATE_FLAGS {}
declare class MSHTML$_SECUREURLHOSTVALIDATE_FLAGS__SUHV_SILENTYES mixins MSHTML$_SECUREURLHOSTVALIDATE_FLAGS {}
declare class MSHTML$_SECUREURLHOSTVALIDATE_FLAGS__SUHV_UNSECURESOURCE mixins MSHTML$_SECUREURLHOSTVALIDATE_FLAGS {}


declare  class MSHTML$_SELECTION_TYPE {
  constructor(...args: empty): mixed;
static +SELECTION_TYPE_Caret: Class<MSHTML$_SELECTION_TYPE__SELECTION_TYPE_Caret> & MSHTML$_SELECTION_TYPE__SELECTION_TYPE_Caret & 1;// 1
static +SELECTION_TYPE_Control: Class<MSHTML$_SELECTION_TYPE__SELECTION_TYPE_Control> & MSHTML$_SELECTION_TYPE__SELECTION_TYPE_Control & 3;// 3
static +SELECTION_TYPE_Max: Class<MSHTML$_SELECTION_TYPE__SELECTION_TYPE_Max> & MSHTML$_SELECTION_TYPE__SELECTION_TYPE_Max & 2147483647;// 2147483647
static +SELECTION_TYPE_None: Class<MSHTML$_SELECTION_TYPE__SELECTION_TYPE_None> & MSHTML$_SELECTION_TYPE__SELECTION_TYPE_None & 0;// 0
static +SELECTION_TYPE_Text: Class<MSHTML$_SELECTION_TYPE__SELECTION_TYPE_Text> & MSHTML$_SELECTION_TYPE__SELECTION_TYPE_Text & 2;// 2

}

declare class MSHTML$_SELECTION_TYPE__SELECTION_TYPE_Caret mixins MSHTML$_SELECTION_TYPE {}
declare class MSHTML$_SELECTION_TYPE__SELECTION_TYPE_Control mixins MSHTML$_SELECTION_TYPE {}
declare class MSHTML$_SELECTION_TYPE__SELECTION_TYPE_Max mixins MSHTML$_SELECTION_TYPE {}
declare class MSHTML$_SELECTION_TYPE__SELECTION_TYPE_None mixins MSHTML$_SELECTION_TYPE {}
declare class MSHTML$_SELECTION_TYPE__SELECTION_TYPE_Text mixins MSHTML$_SELECTION_TYPE {}


declare  class MSHTML$_styleAccelerator {
  constructor(...args: empty): mixed;
static +styleAccelerator_Max: Class<MSHTML$_styleAccelerator__styleAccelerator_Max> & MSHTML$_styleAccelerator__styleAccelerator_Max & 2147483647;// 2147483647
static +styleAcceleratorFalse: Class<MSHTML$_styleAccelerator__styleAcceleratorFalse> & MSHTML$_styleAccelerator__styleAcceleratorFalse & 0;// 0
static +styleAcceleratorTrue: Class<MSHTML$_styleAccelerator__styleAcceleratorTrue> & MSHTML$_styleAccelerator__styleAcceleratorTrue & 1;// 1

}

declare class MSHTML$_styleAccelerator__styleAccelerator_Max mixins MSHTML$_styleAccelerator {}
declare class MSHTML$_styleAccelerator__styleAcceleratorFalse mixins MSHTML$_styleAccelerator {}
declare class MSHTML$_styleAccelerator__styleAcceleratorTrue mixins MSHTML$_styleAccelerator {}


declare  class MSHTML$_styleAlignContent {
  constructor(...args: empty): mixed;
static +styleAlignContent_Max: Class<MSHTML$_styleAlignContent__styleAlignContent_Max> & MSHTML$_styleAlignContent__styleAlignContent_Max & 2147483647;// 2147483647
static +styleAlignContentCenter: Class<MSHTML$_styleAlignContent__styleAlignContentCenter> & MSHTML$_styleAlignContent__styleAlignContentCenter & 2;// 2
static +styleAlignContentFlexEnd: Class<MSHTML$_styleAlignContent__styleAlignContentFlexEnd> & MSHTML$_styleAlignContent__styleAlignContentFlexEnd & 1;// 1
static +styleAlignContentFlexStart: Class<MSHTML$_styleAlignContent__styleAlignContentFlexStart> & MSHTML$_styleAlignContent__styleAlignContentFlexStart & 0;// 0
static +styleAlignContentNotSet: Class<MSHTML$_styleAlignContent__styleAlignContentNotSet> & MSHTML$_styleAlignContent__styleAlignContentNotSet & 6;// 6
static +styleAlignContentSpaceAround: Class<MSHTML$_styleAlignContent__styleAlignContentSpaceAround> & MSHTML$_styleAlignContent__styleAlignContentSpaceAround & 4;// 4
static +styleAlignContentSpaceBetween: Class<MSHTML$_styleAlignContent__styleAlignContentSpaceBetween> & MSHTML$_styleAlignContent__styleAlignContentSpaceBetween & 3;// 3
static +styleAlignContentStretch: Class<MSHTML$_styleAlignContent__styleAlignContentStretch> & MSHTML$_styleAlignContent__styleAlignContentStretch & 5;// 5

}

declare class MSHTML$_styleAlignContent__styleAlignContent_Max mixins MSHTML$_styleAlignContent {}
declare class MSHTML$_styleAlignContent__styleAlignContentCenter mixins MSHTML$_styleAlignContent {}
declare class MSHTML$_styleAlignContent__styleAlignContentFlexEnd mixins MSHTML$_styleAlignContent {}
declare class MSHTML$_styleAlignContent__styleAlignContentFlexStart mixins MSHTML$_styleAlignContent {}
declare class MSHTML$_styleAlignContent__styleAlignContentNotSet mixins MSHTML$_styleAlignContent {}
declare class MSHTML$_styleAlignContent__styleAlignContentSpaceAround mixins MSHTML$_styleAlignContent {}
declare class MSHTML$_styleAlignContent__styleAlignContentSpaceBetween mixins MSHTML$_styleAlignContent {}
declare class MSHTML$_styleAlignContent__styleAlignContentStretch mixins MSHTML$_styleAlignContent {}


declare  class MSHTML$_styleAlignItems {
  constructor(...args: empty): mixed;
static +styleAlignItems_Max: Class<MSHTML$_styleAlignItems__styleAlignItems_Max> & MSHTML$_styleAlignItems__styleAlignItems_Max & 2147483647;// 2147483647
static +styleAlignItemsBaseline: Class<MSHTML$_styleAlignItems__styleAlignItemsBaseline> & MSHTML$_styleAlignItems__styleAlignItemsBaseline & 3;// 3
static +styleAlignItemsCenter: Class<MSHTML$_styleAlignItems__styleAlignItemsCenter> & MSHTML$_styleAlignItems__styleAlignItemsCenter & 2;// 2
static +styleAlignItemsFlexEnd: Class<MSHTML$_styleAlignItems__styleAlignItemsFlexEnd> & MSHTML$_styleAlignItems__styleAlignItemsFlexEnd & 1;// 1
static +styleAlignItemsFlexStart: Class<MSHTML$_styleAlignItems__styleAlignItemsFlexStart> & MSHTML$_styleAlignItems__styleAlignItemsFlexStart & 0;// 0
static +styleAlignItemsNotSet: Class<MSHTML$_styleAlignItems__styleAlignItemsNotSet> & MSHTML$_styleAlignItems__styleAlignItemsNotSet & 5;// 5
static +styleAlignItemsStretch: Class<MSHTML$_styleAlignItems__styleAlignItemsStretch> & MSHTML$_styleAlignItems__styleAlignItemsStretch & 4;// 4

}

declare class MSHTML$_styleAlignItems__styleAlignItems_Max mixins MSHTML$_styleAlignItems {}
declare class MSHTML$_styleAlignItems__styleAlignItemsBaseline mixins MSHTML$_styleAlignItems {}
declare class MSHTML$_styleAlignItems__styleAlignItemsCenter mixins MSHTML$_styleAlignItems {}
declare class MSHTML$_styleAlignItems__styleAlignItemsFlexEnd mixins MSHTML$_styleAlignItems {}
declare class MSHTML$_styleAlignItems__styleAlignItemsFlexStart mixins MSHTML$_styleAlignItems {}
declare class MSHTML$_styleAlignItems__styleAlignItemsNotSet mixins MSHTML$_styleAlignItems {}
declare class MSHTML$_styleAlignItems__styleAlignItemsStretch mixins MSHTML$_styleAlignItems {}


declare  class MSHTML$_styleAlignmentBaseline {
  constructor(...args: empty): mixed;
static +styleAlignmentBaseline_Max: Class<MSHTML$_styleAlignmentBaseline__styleAlignmentBaseline_Max> & MSHTML$_styleAlignmentBaseline__styleAlignmentBaseline_Max & 2147483647;// 2147483647
static +styleAlignmentBaselineAfterEdge: Class<MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineAfterEdge> & MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineAfterEdge & 1;// 1
static +styleAlignmentBaselineAlphabetic: Class<MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineAlphabetic> & MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineAlphabetic & 2;// 2
static +styleAlignmentBaselineAuto: Class<MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineAuto> & MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineAuto & 3;// 3
static +styleAlignmentBaselineBaseline: Class<MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineBaseline> & MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineBaseline & 4;// 4
static +styleAlignmentBaselineBeforeEdge: Class<MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineBeforeEdge> & MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineBeforeEdge & 5;// 5
static +styleAlignmentBaselineCentral: Class<MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineCentral> & MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineCentral & 6;// 6
static +styleAlignmentBaselineHanging: Class<MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineHanging> & MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineHanging & 7;// 7
static +styleAlignmentBaselineIdeographic: Class<MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineIdeographic> & MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineIdeographic & 12;// 12
static +styleAlignmentBaselineMathematical: Class<MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineMathematical> & MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineMathematical & 8;// 8
static +styleAlignmentBaselineMiddle: Class<MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineMiddle> & MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineMiddle & 9;// 9
static +styleAlignmentBaselineNotSet: Class<MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineNotSet> & MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineNotSet & 0;// 0
static +styleAlignmentBaselineTextAfterEdge: Class<MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineTextAfterEdge> & MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineTextAfterEdge & 10;// 10
static +styleAlignmentBaselineTextBeforeEdge: Class<MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineTextBeforeEdge> & MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineTextBeforeEdge & 11;// 11

}

declare class MSHTML$_styleAlignmentBaseline__styleAlignmentBaseline_Max mixins MSHTML$_styleAlignmentBaseline {}
declare class MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineAfterEdge mixins MSHTML$_styleAlignmentBaseline {}
declare class MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineAlphabetic mixins MSHTML$_styleAlignmentBaseline {}
declare class MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineAuto mixins MSHTML$_styleAlignmentBaseline {}
declare class MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineBaseline mixins MSHTML$_styleAlignmentBaseline {}
declare class MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineBeforeEdge mixins MSHTML$_styleAlignmentBaseline {}
declare class MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineCentral mixins MSHTML$_styleAlignmentBaseline {}
declare class MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineHanging mixins MSHTML$_styleAlignmentBaseline {}
declare class MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineIdeographic mixins MSHTML$_styleAlignmentBaseline {}
declare class MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineMathematical mixins MSHTML$_styleAlignmentBaseline {}
declare class MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineMiddle mixins MSHTML$_styleAlignmentBaseline {}
declare class MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineNotSet mixins MSHTML$_styleAlignmentBaseline {}
declare class MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineTextAfterEdge mixins MSHTML$_styleAlignmentBaseline {}
declare class MSHTML$_styleAlignmentBaseline__styleAlignmentBaselineTextBeforeEdge mixins MSHTML$_styleAlignmentBaseline {}


declare  class MSHTML$_styleAlignSelf {
  constructor(...args: empty): mixed;
static +styleAlignSelf_Max: Class<MSHTML$_styleAlignSelf__styleAlignSelf_Max> & MSHTML$_styleAlignSelf__styleAlignSelf_Max & 2147483647;// 2147483647
static +styleAlignSelfAuto: Class<MSHTML$_styleAlignSelf__styleAlignSelfAuto> & MSHTML$_styleAlignSelf__styleAlignSelfAuto & 5;// 5
static +styleAlignSelfBaseline: Class<MSHTML$_styleAlignSelf__styleAlignSelfBaseline> & MSHTML$_styleAlignSelf__styleAlignSelfBaseline & 3;// 3
static +styleAlignSelfCenter: Class<MSHTML$_styleAlignSelf__styleAlignSelfCenter> & MSHTML$_styleAlignSelf__styleAlignSelfCenter & 2;// 2
static +styleAlignSelfFlexEnd: Class<MSHTML$_styleAlignSelf__styleAlignSelfFlexEnd> & MSHTML$_styleAlignSelf__styleAlignSelfFlexEnd & 1;// 1
static +styleAlignSelfFlexStart: Class<MSHTML$_styleAlignSelf__styleAlignSelfFlexStart> & MSHTML$_styleAlignSelf__styleAlignSelfFlexStart & 0;// 0
static +styleAlignSelfNotSet: Class<MSHTML$_styleAlignSelf__styleAlignSelfNotSet> & MSHTML$_styleAlignSelf__styleAlignSelfNotSet & 6;// 6
static +styleAlignSelfStretch: Class<MSHTML$_styleAlignSelf__styleAlignSelfStretch> & MSHTML$_styleAlignSelf__styleAlignSelfStretch & 4;// 4

}

declare class MSHTML$_styleAlignSelf__styleAlignSelf_Max mixins MSHTML$_styleAlignSelf {}
declare class MSHTML$_styleAlignSelf__styleAlignSelfAuto mixins MSHTML$_styleAlignSelf {}
declare class MSHTML$_styleAlignSelf__styleAlignSelfBaseline mixins MSHTML$_styleAlignSelf {}
declare class MSHTML$_styleAlignSelf__styleAlignSelfCenter mixins MSHTML$_styleAlignSelf {}
declare class MSHTML$_styleAlignSelf__styleAlignSelfFlexEnd mixins MSHTML$_styleAlignSelf {}
declare class MSHTML$_styleAlignSelf__styleAlignSelfFlexStart mixins MSHTML$_styleAlignSelf {}
declare class MSHTML$_styleAlignSelf__styleAlignSelfNotSet mixins MSHTML$_styleAlignSelf {}
declare class MSHTML$_styleAlignSelf__styleAlignSelfStretch mixins MSHTML$_styleAlignSelf {}


declare  class MSHTML$_styleAttrType {
  constructor(...args: empty): mixed;
static +styleAttrType_Max: Class<MSHTML$_styleAttrType__styleAttrType_Max> & MSHTML$_styleAttrType__styleAttrType_Max & 2147483647;// 2147483647
static +styleAttrTypeAngle: Class<MSHTML$_styleAttrType__styleAttrTypeAngle> & MSHTML$_styleAttrType__styleAttrTypeAngle & 20;// 20
static +styleAttrTypeCh: Class<MSHTML$_styleAttrType__styleAttrTypeCh> & MSHTML$_styleAttrType__styleAttrTypeCh & 15;// 15
static +styleAttrTypeCm: Class<MSHTML$_styleAttrType__styleAttrTypeCm> & MSHTML$_styleAttrType__styleAttrTypeCm & 10;// 10
static +styleAttrTypeColor: Class<MSHTML$_styleAttrType__styleAttrTypeColor> & MSHTML$_styleAttrType__styleAttrTypeColor & 1;// 1
static +styleAttrTypeDeg: Class<MSHTML$_styleAttrType__styleAttrTypeDeg> & MSHTML$_styleAttrType__styleAttrTypeDeg & 21;// 21
static +styleAttrTypeEm: Class<MSHTML$_styleAttrType__styleAttrTypeEm> & MSHTML$_styleAttrType__styleAttrTypeEm & 7;// 7
static +styleAttrTypeEx: Class<MSHTML$_styleAttrType__styleAttrTypeEx> & MSHTML$_styleAttrType__styleAttrTypeEx & 8;// 8
static +styleAttrTypeGrad: Class<MSHTML$_styleAttrType__styleAttrTypeGrad> & MSHTML$_styleAttrType__styleAttrTypeGrad & 23;// 23
static +styleAttrTypeIn: Class<MSHTML$_styleAttrType__styleAttrTypeIn> & MSHTML$_styleAttrType__styleAttrTypeIn & 9;// 9
static +styleAttrTypeInteger: Class<MSHTML$_styleAttrType__styleAttrTypeInteger> & MSHTML$_styleAttrType__styleAttrTypeInteger & 3;// 3
static +styleAttrTypeLength: Class<MSHTML$_styleAttrType__styleAttrTypeLength> & MSHTML$_styleAttrType__styleAttrTypeLength & 5;// 5
static +styleAttrTypeMm: Class<MSHTML$_styleAttrType__styleAttrTypeMm> & MSHTML$_styleAttrType__styleAttrTypeMm & 11;// 11
static +styleAttrTypeMs: Class<MSHTML$_styleAttrType__styleAttrTypeMs> & MSHTML$_styleAttrType__styleAttrTypeMs & 26;// 26
static +styleAttrTypeNumber: Class<MSHTML$_styleAttrType__styleAttrTypeNumber> & MSHTML$_styleAttrType__styleAttrTypeNumber & 4;// 4
static +styleAttrTypePc: Class<MSHTML$_styleAttrType__styleAttrTypePc> & MSHTML$_styleAttrType__styleAttrTypePc & 13;// 13
static +styleAttrTypePercentage: Class<MSHTML$_styleAttrType__styleAttrTypePercentage> & MSHTML$_styleAttrType__styleAttrTypePercentage & 19;// 19
static +styleAttrTypePt: Class<MSHTML$_styleAttrType__styleAttrTypePt> & MSHTML$_styleAttrType__styleAttrTypePt & 12;// 12
static +styleAttrTypePx: Class<MSHTML$_styleAttrType__styleAttrTypePx> & MSHTML$_styleAttrType__styleAttrTypePx & 6;// 6
static +styleAttrTypeRad: Class<MSHTML$_styleAttrType__styleAttrTypeRad> & MSHTML$_styleAttrType__styleAttrTypeRad & 22;// 22
static +styleAttrTypeRem: Class<MSHTML$_styleAttrType__styleAttrTypeRem> & MSHTML$_styleAttrType__styleAttrTypeRem & 14;// 14
static +styleAttrTypeS: Class<MSHTML$_styleAttrType__styleAttrTypeS> & MSHTML$_styleAttrType__styleAttrTypeS & 25;// 25
static +styleAttrTypeString: Class<MSHTML$_styleAttrType__styleAttrTypeString> & MSHTML$_styleAttrType__styleAttrTypeString & 0;// 0
static +styleAttrTypeTime: Class<MSHTML$_styleAttrType__styleAttrTypeTime> & MSHTML$_styleAttrType__styleAttrTypeTime & 24;// 24
static +styleAttrTypeUrl: Class<MSHTML$_styleAttrType__styleAttrTypeUrl> & MSHTML$_styleAttrType__styleAttrTypeUrl & 2;// 2
static +styleAttrTypeVh: Class<MSHTML$_styleAttrType__styleAttrTypeVh> & MSHTML$_styleAttrType__styleAttrTypeVh & 16;// 16
static +styleAttrTypeVmin: Class<MSHTML$_styleAttrType__styleAttrTypeVmin> & MSHTML$_styleAttrType__styleAttrTypeVmin & 18;// 18
static +styleAttrTypeVw: Class<MSHTML$_styleAttrType__styleAttrTypeVw> & MSHTML$_styleAttrType__styleAttrTypeVw & 17;// 17

}

declare class MSHTML$_styleAttrType__styleAttrType_Max mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeAngle mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeCh mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeCm mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeColor mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeDeg mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeEm mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeEx mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeGrad mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeIn mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeInteger mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeLength mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeMm mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeMs mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeNumber mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypePc mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypePercentage mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypePt mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypePx mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeRad mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeRem mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeS mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeString mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeTime mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeUrl mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeVh mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeVmin mixins MSHTML$_styleAttrType {}
declare class MSHTML$_styleAttrType__styleAttrTypeVw mixins MSHTML$_styleAttrType {}


declare  class MSHTML$_styleAuto {
  constructor(...args: empty): mixed;
static +styleAuto_Max: Class<MSHTML$_styleAuto__styleAuto_Max> & MSHTML$_styleAuto__styleAuto_Max & 2147483647;// 2147483647
static +styleAutoAuto: Class<MSHTML$_styleAuto__styleAutoAuto> & MSHTML$_styleAuto__styleAutoAuto & 0;// 0

}

declare class MSHTML$_styleAuto__styleAuto_Max mixins MSHTML$_styleAuto {}
declare class MSHTML$_styleAuto__styleAutoAuto mixins MSHTML$_styleAuto {}


declare  class MSHTML$_styleBackfaceVisibility {
  constructor(...args: empty): mixed;
static +styleBackfaceVisibility_Max: Class<MSHTML$_styleBackfaceVisibility__styleBackfaceVisibility_Max> & MSHTML$_styleBackfaceVisibility__styleBackfaceVisibility_Max & 2147483647;// 2147483647
static +styleBackfaceVisibilityHidden: Class<MSHTML$_styleBackfaceVisibility__styleBackfaceVisibilityHidden> & MSHTML$_styleBackfaceVisibility__styleBackfaceVisibilityHidden & 1;// 1
static +styleBackfaceVisibilityNotSet: Class<MSHTML$_styleBackfaceVisibility__styleBackfaceVisibilityNotSet> & MSHTML$_styleBackfaceVisibility__styleBackfaceVisibilityNotSet & 2;// 2
static +styleBackfaceVisibilityVisible: Class<MSHTML$_styleBackfaceVisibility__styleBackfaceVisibilityVisible> & MSHTML$_styleBackfaceVisibility__styleBackfaceVisibilityVisible & 0;// 0

}

declare class MSHTML$_styleBackfaceVisibility__styleBackfaceVisibility_Max mixins MSHTML$_styleBackfaceVisibility {}
declare class MSHTML$_styleBackfaceVisibility__styleBackfaceVisibilityHidden mixins MSHTML$_styleBackfaceVisibility {}
declare class MSHTML$_styleBackfaceVisibility__styleBackfaceVisibilityNotSet mixins MSHTML$_styleBackfaceVisibility {}
declare class MSHTML$_styleBackfaceVisibility__styleBackfaceVisibilityVisible mixins MSHTML$_styleBackfaceVisibility {}


declare  class MSHTML$_styleBackgroundAttachment {
  constructor(...args: empty): mixed;
static +styleBackgroundAttachment_Max: Class<MSHTML$_styleBackgroundAttachment__styleBackgroundAttachment_Max> & MSHTML$_styleBackgroundAttachment__styleBackgroundAttachment_Max & 2147483647;// 2147483647
static +styleBackgroundAttachmentFixed: Class<MSHTML$_styleBackgroundAttachment__styleBackgroundAttachmentFixed> & MSHTML$_styleBackgroundAttachment__styleBackgroundAttachmentFixed & 0;// 0
static +styleBackgroundAttachmentNotSet: Class<MSHTML$_styleBackgroundAttachment__styleBackgroundAttachmentNotSet> & MSHTML$_styleBackgroundAttachment__styleBackgroundAttachmentNotSet & 2;// 2
static +styleBackgroundAttachmentScroll: Class<MSHTML$_styleBackgroundAttachment__styleBackgroundAttachmentScroll> & MSHTML$_styleBackgroundAttachment__styleBackgroundAttachmentScroll & 1;// 1

}

declare class MSHTML$_styleBackgroundAttachment__styleBackgroundAttachment_Max mixins MSHTML$_styleBackgroundAttachment {}
declare class MSHTML$_styleBackgroundAttachment__styleBackgroundAttachmentFixed mixins MSHTML$_styleBackgroundAttachment {}
declare class MSHTML$_styleBackgroundAttachment__styleBackgroundAttachmentNotSet mixins MSHTML$_styleBackgroundAttachment {}
declare class MSHTML$_styleBackgroundAttachment__styleBackgroundAttachmentScroll mixins MSHTML$_styleBackgroundAttachment {}


declare  class MSHTML$_styleBackgroundAttachment3 {
  constructor(...args: empty): mixed;
static +styleBackgroundAttachment3_Max: Class<MSHTML$_styleBackgroundAttachment3__styleBackgroundAttachment3_Max> & MSHTML$_styleBackgroundAttachment3__styleBackgroundAttachment3_Max & 2147483647;// 2147483647
static +styleBackgroundAttachment3Fixed: Class<MSHTML$_styleBackgroundAttachment3__styleBackgroundAttachment3Fixed> & MSHTML$_styleBackgroundAttachment3__styleBackgroundAttachment3Fixed & 0;// 0
static +styleBackgroundAttachment3Local: Class<MSHTML$_styleBackgroundAttachment3__styleBackgroundAttachment3Local> & MSHTML$_styleBackgroundAttachment3__styleBackgroundAttachment3Local & 2;// 2
static +styleBackgroundAttachment3NotSet: Class<MSHTML$_styleBackgroundAttachment3__styleBackgroundAttachment3NotSet> & MSHTML$_styleBackgroundAttachment3__styleBackgroundAttachment3NotSet & 3;// 3
static +styleBackgroundAttachment3Scroll: Class<MSHTML$_styleBackgroundAttachment3__styleBackgroundAttachment3Scroll> & MSHTML$_styleBackgroundAttachment3__styleBackgroundAttachment3Scroll & 1;// 1

}

declare class MSHTML$_styleBackgroundAttachment3__styleBackgroundAttachment3_Max mixins MSHTML$_styleBackgroundAttachment3 {}
declare class MSHTML$_styleBackgroundAttachment3__styleBackgroundAttachment3Fixed mixins MSHTML$_styleBackgroundAttachment3 {}
declare class MSHTML$_styleBackgroundAttachment3__styleBackgroundAttachment3Local mixins MSHTML$_styleBackgroundAttachment3 {}
declare class MSHTML$_styleBackgroundAttachment3__styleBackgroundAttachment3NotSet mixins MSHTML$_styleBackgroundAttachment3 {}
declare class MSHTML$_styleBackgroundAttachment3__styleBackgroundAttachment3Scroll mixins MSHTML$_styleBackgroundAttachment3 {}


declare  class MSHTML$_styleBackgroundClip {
  constructor(...args: empty): mixed;
static +styleBackgroundClip_Max: Class<MSHTML$_styleBackgroundClip__styleBackgroundClip_Max> & MSHTML$_styleBackgroundClip__styleBackgroundClip_Max & 2147483647;// 2147483647
static +styleBackgroundClipBorderBox: Class<MSHTML$_styleBackgroundClip__styleBackgroundClipBorderBox> & MSHTML$_styleBackgroundClip__styleBackgroundClipBorderBox & 0;// 0
static +styleBackgroundClipContentBox: Class<MSHTML$_styleBackgroundClip__styleBackgroundClipContentBox> & MSHTML$_styleBackgroundClip__styleBackgroundClipContentBox & 2;// 2
static +styleBackgroundClipNotSet: Class<MSHTML$_styleBackgroundClip__styleBackgroundClipNotSet> & MSHTML$_styleBackgroundClip__styleBackgroundClipNotSet & 3;// 3
static +styleBackgroundClipPaddingBox: Class<MSHTML$_styleBackgroundClip__styleBackgroundClipPaddingBox> & MSHTML$_styleBackgroundClip__styleBackgroundClipPaddingBox & 1;// 1

}

declare class MSHTML$_styleBackgroundClip__styleBackgroundClip_Max mixins MSHTML$_styleBackgroundClip {}
declare class MSHTML$_styleBackgroundClip__styleBackgroundClipBorderBox mixins MSHTML$_styleBackgroundClip {}
declare class MSHTML$_styleBackgroundClip__styleBackgroundClipContentBox mixins MSHTML$_styleBackgroundClip {}
declare class MSHTML$_styleBackgroundClip__styleBackgroundClipNotSet mixins MSHTML$_styleBackgroundClip {}
declare class MSHTML$_styleBackgroundClip__styleBackgroundClipPaddingBox mixins MSHTML$_styleBackgroundClip {}


declare  class MSHTML$_styleBackgroundOrigin {
  constructor(...args: empty): mixed;
static +styleBackgroundOrigin_Max: Class<MSHTML$_styleBackgroundOrigin__styleBackgroundOrigin_Max> & MSHTML$_styleBackgroundOrigin__styleBackgroundOrigin_Max & 2147483647;// 2147483647
static +styleBackgroundOriginBorderBox: Class<MSHTML$_styleBackgroundOrigin__styleBackgroundOriginBorderBox> & MSHTML$_styleBackgroundOrigin__styleBackgroundOriginBorderBox & 0;// 0
static +styleBackgroundOriginContentBox: Class<MSHTML$_styleBackgroundOrigin__styleBackgroundOriginContentBox> & MSHTML$_styleBackgroundOrigin__styleBackgroundOriginContentBox & 2;// 2
static +styleBackgroundOriginNotSet: Class<MSHTML$_styleBackgroundOrigin__styleBackgroundOriginNotSet> & MSHTML$_styleBackgroundOrigin__styleBackgroundOriginNotSet & 3;// 3
static +styleBackgroundOriginPaddingBox: Class<MSHTML$_styleBackgroundOrigin__styleBackgroundOriginPaddingBox> & MSHTML$_styleBackgroundOrigin__styleBackgroundOriginPaddingBox & 1;// 1

}

declare class MSHTML$_styleBackgroundOrigin__styleBackgroundOrigin_Max mixins MSHTML$_styleBackgroundOrigin {}
declare class MSHTML$_styleBackgroundOrigin__styleBackgroundOriginBorderBox mixins MSHTML$_styleBackgroundOrigin {}
declare class MSHTML$_styleBackgroundOrigin__styleBackgroundOriginContentBox mixins MSHTML$_styleBackgroundOrigin {}
declare class MSHTML$_styleBackgroundOrigin__styleBackgroundOriginNotSet mixins MSHTML$_styleBackgroundOrigin {}
declare class MSHTML$_styleBackgroundOrigin__styleBackgroundOriginPaddingBox mixins MSHTML$_styleBackgroundOrigin {}


declare  class MSHTML$_styleBackgroundRepeat {
  constructor(...args: empty): mixed;
static +styleBackgroundRepeat_Max: Class<MSHTML$_styleBackgroundRepeat__styleBackgroundRepeat_Max> & MSHTML$_styleBackgroundRepeat__styleBackgroundRepeat_Max & 2147483647;// 2147483647
static +styleBackgroundRepeatNoRepeat: Class<MSHTML$_styleBackgroundRepeat__styleBackgroundRepeatNoRepeat> & MSHTML$_styleBackgroundRepeat__styleBackgroundRepeatNoRepeat & 3;// 3
static +styleBackgroundRepeatNotSet: Class<MSHTML$_styleBackgroundRepeat__styleBackgroundRepeatNotSet> & MSHTML$_styleBackgroundRepeat__styleBackgroundRepeatNotSet & 4;// 4
static +styleBackgroundRepeatRepeat: Class<MSHTML$_styleBackgroundRepeat__styleBackgroundRepeatRepeat> & MSHTML$_styleBackgroundRepeat__styleBackgroundRepeatRepeat & 0;// 0
static +styleBackgroundRepeatRepeatX: Class<MSHTML$_styleBackgroundRepeat__styleBackgroundRepeatRepeatX> & MSHTML$_styleBackgroundRepeat__styleBackgroundRepeatRepeatX & 1;// 1
static +styleBackgroundRepeatRepeatY: Class<MSHTML$_styleBackgroundRepeat__styleBackgroundRepeatRepeatY> & MSHTML$_styleBackgroundRepeat__styleBackgroundRepeatRepeatY & 2;// 2

}

declare class MSHTML$_styleBackgroundRepeat__styleBackgroundRepeat_Max mixins MSHTML$_styleBackgroundRepeat {}
declare class MSHTML$_styleBackgroundRepeat__styleBackgroundRepeatNoRepeat mixins MSHTML$_styleBackgroundRepeat {}
declare class MSHTML$_styleBackgroundRepeat__styleBackgroundRepeatNotSet mixins MSHTML$_styleBackgroundRepeat {}
declare class MSHTML$_styleBackgroundRepeat__styleBackgroundRepeatRepeat mixins MSHTML$_styleBackgroundRepeat {}
declare class MSHTML$_styleBackgroundRepeat__styleBackgroundRepeatRepeatX mixins MSHTML$_styleBackgroundRepeat {}
declare class MSHTML$_styleBackgroundRepeat__styleBackgroundRepeatRepeatY mixins MSHTML$_styleBackgroundRepeat {}


declare  class MSHTML$_styleBaselineShift {
  constructor(...args: empty): mixed;
static +styleBaselineShift_Max: Class<MSHTML$_styleBaselineShift__styleBaselineShift_Max> & MSHTML$_styleBaselineShift__styleBaselineShift_Max & 2147483647;// 2147483647
static +styleBaselineShiftBaseline: Class<MSHTML$_styleBaselineShift__styleBaselineShiftBaseline> & MSHTML$_styleBaselineShift__styleBaselineShiftBaseline & 0;// 0
static +styleBaselineShiftSub: Class<MSHTML$_styleBaselineShift__styleBaselineShiftSub> & MSHTML$_styleBaselineShift__styleBaselineShiftSub & 1;// 1
static +styleBaselineShiftSuper: Class<MSHTML$_styleBaselineShift__styleBaselineShiftSuper> & MSHTML$_styleBaselineShift__styleBaselineShiftSuper & 2;// 2

}

declare class MSHTML$_styleBaselineShift__styleBaselineShift_Max mixins MSHTML$_styleBaselineShift {}
declare class MSHTML$_styleBaselineShift__styleBaselineShiftBaseline mixins MSHTML$_styleBaselineShift {}
declare class MSHTML$_styleBaselineShift__styleBaselineShiftSub mixins MSHTML$_styleBaselineShift {}
declare class MSHTML$_styleBaselineShift__styleBaselineShiftSuper mixins MSHTML$_styleBaselineShift {}


declare  class MSHTML$_styleBidi {
  constructor(...args: empty): mixed;
static +styleBidi_Max: Class<MSHTML$_styleBidi__styleBidi_Max> & MSHTML$_styleBidi__styleBidi_Max & 2147483647;// 2147483647
static +styleBidiEmbed: Class<MSHTML$_styleBidi__styleBidiEmbed> & MSHTML$_styleBidi__styleBidiEmbed & 2;// 2
static +styleBidiInherit: Class<MSHTML$_styleBidi__styleBidiInherit> & MSHTML$_styleBidi__styleBidiInherit & 4;// 4
static +styleBidiNormal: Class<MSHTML$_styleBidi__styleBidiNormal> & MSHTML$_styleBidi__styleBidiNormal & 1;// 1
static +styleBidiNotSet: Class<MSHTML$_styleBidi__styleBidiNotSet> & MSHTML$_styleBidi__styleBidiNotSet & 0;// 0
static +styleBidiOverride: Class<MSHTML$_styleBidi__styleBidiOverride> & MSHTML$_styleBidi__styleBidiOverride & 3;// 3

}

declare class MSHTML$_styleBidi__styleBidi_Max mixins MSHTML$_styleBidi {}
declare class MSHTML$_styleBidi__styleBidiEmbed mixins MSHTML$_styleBidi {}
declare class MSHTML$_styleBidi__styleBidiInherit mixins MSHTML$_styleBidi {}
declare class MSHTML$_styleBidi__styleBidiNormal mixins MSHTML$_styleBidi {}
declare class MSHTML$_styleBidi__styleBidiNotSet mixins MSHTML$_styleBidi {}
declare class MSHTML$_styleBidi__styleBidiOverride mixins MSHTML$_styleBidi {}


declare  class MSHTML$_styleBlockProgression {
  constructor(...args: empty): mixed;
static +styleBlockProgression_Max: Class<MSHTML$_styleBlockProgression__styleBlockProgression_Max> & MSHTML$_styleBlockProgression__styleBlockProgression_Max & 2147483647;// 2147483647
static +styleBlockProgressionBt: Class<MSHTML$_styleBlockProgression__styleBlockProgressionBt> & MSHTML$_styleBlockProgression__styleBlockProgressionBt & 2;// 2
static +styleBlockProgressionLr: Class<MSHTML$_styleBlockProgression__styleBlockProgressionLr> & MSHTML$_styleBlockProgression__styleBlockProgressionLr & 3;// 3
static +styleBlockProgressionNotSet: Class<MSHTML$_styleBlockProgression__styleBlockProgressionNotSet> & MSHTML$_styleBlockProgression__styleBlockProgressionNotSet & 4;// 4
static +styleBlockProgressionRl: Class<MSHTML$_styleBlockProgression__styleBlockProgressionRl> & MSHTML$_styleBlockProgression__styleBlockProgressionRl & 1;// 1
static +styleBlockProgressionTb: Class<MSHTML$_styleBlockProgression__styleBlockProgressionTb> & MSHTML$_styleBlockProgression__styleBlockProgressionTb & 0;// 0

}

declare class MSHTML$_styleBlockProgression__styleBlockProgression_Max mixins MSHTML$_styleBlockProgression {}
declare class MSHTML$_styleBlockProgression__styleBlockProgressionBt mixins MSHTML$_styleBlockProgression {}
declare class MSHTML$_styleBlockProgression__styleBlockProgressionLr mixins MSHTML$_styleBlockProgression {}
declare class MSHTML$_styleBlockProgression__styleBlockProgressionNotSet mixins MSHTML$_styleBlockProgression {}
declare class MSHTML$_styleBlockProgression__styleBlockProgressionRl mixins MSHTML$_styleBlockProgression {}
declare class MSHTML$_styleBlockProgression__styleBlockProgressionTb mixins MSHTML$_styleBlockProgression {}


declare  class MSHTML$_styleBool {
  constructor(...args: empty): mixed;
static +styleBool_Max: Class<MSHTML$_styleBool__styleBool_Max> & MSHTML$_styleBool__styleBool_Max & 2147483647;// 2147483647
static +styleBoolFalse: Class<MSHTML$_styleBool__styleBoolFalse> & MSHTML$_styleBool__styleBoolFalse & 0;// 0
static +styleBoolTrue: Class<MSHTML$_styleBool__styleBoolTrue> & MSHTML$_styleBool__styleBoolTrue & 1;// 1

}

declare class MSHTML$_styleBool__styleBool_Max mixins MSHTML$_styleBool {}
declare class MSHTML$_styleBool__styleBoolFalse mixins MSHTML$_styleBool {}
declare class MSHTML$_styleBool__styleBoolTrue mixins MSHTML$_styleBool {}


declare  class MSHTML$_styleBorderCollapse {
  constructor(...args: empty): mixed;
static +styleBorderCollapse_Max: Class<MSHTML$_styleBorderCollapse__styleBorderCollapse_Max> & MSHTML$_styleBorderCollapse__styleBorderCollapse_Max & 2147483647;// 2147483647
static +styleBorderCollapseCollapse: Class<MSHTML$_styleBorderCollapse__styleBorderCollapseCollapse> & MSHTML$_styleBorderCollapse__styleBorderCollapseCollapse & 2;// 2
static +styleBorderCollapseNotSet: Class<MSHTML$_styleBorderCollapse__styleBorderCollapseNotSet> & MSHTML$_styleBorderCollapse__styleBorderCollapseNotSet & 0;// 0
static +styleBorderCollapseSeparate: Class<MSHTML$_styleBorderCollapse__styleBorderCollapseSeparate> & MSHTML$_styleBorderCollapse__styleBorderCollapseSeparate & 1;// 1

}

declare class MSHTML$_styleBorderCollapse__styleBorderCollapse_Max mixins MSHTML$_styleBorderCollapse {}
declare class MSHTML$_styleBorderCollapse__styleBorderCollapseCollapse mixins MSHTML$_styleBorderCollapse {}
declare class MSHTML$_styleBorderCollapse__styleBorderCollapseNotSet mixins MSHTML$_styleBorderCollapse {}
declare class MSHTML$_styleBorderCollapse__styleBorderCollapseSeparate mixins MSHTML$_styleBorderCollapse {}


declare  class MSHTML$_styleBorderImageRepeat {
  constructor(...args: empty): mixed;
static +styleBorderImageRepeat_Max: Class<MSHTML$_styleBorderImageRepeat__styleBorderImageRepeat_Max> & MSHTML$_styleBorderImageRepeat__styleBorderImageRepeat_Max & 2147483647;// 2147483647
static +styleBorderImageRepeatNotSet: Class<MSHTML$_styleBorderImageRepeat__styleBorderImageRepeatNotSet> & MSHTML$_styleBorderImageRepeat__styleBorderImageRepeatNotSet & 4;// 4
static +styleBorderImageRepeatRepeat: Class<MSHTML$_styleBorderImageRepeat__styleBorderImageRepeatRepeat> & MSHTML$_styleBorderImageRepeat__styleBorderImageRepeatRepeat & 1;// 1
static +styleBorderImageRepeatRound: Class<MSHTML$_styleBorderImageRepeat__styleBorderImageRepeatRound> & MSHTML$_styleBorderImageRepeat__styleBorderImageRepeatRound & 2;// 2
static +styleBorderImageRepeatSpace: Class<MSHTML$_styleBorderImageRepeat__styleBorderImageRepeatSpace> & MSHTML$_styleBorderImageRepeat__styleBorderImageRepeatSpace & 3;// 3
static +styleBorderImageRepeatStretch: Class<MSHTML$_styleBorderImageRepeat__styleBorderImageRepeatStretch> & MSHTML$_styleBorderImageRepeat__styleBorderImageRepeatStretch & 0;// 0

}

declare class MSHTML$_styleBorderImageRepeat__styleBorderImageRepeat_Max mixins MSHTML$_styleBorderImageRepeat {}
declare class MSHTML$_styleBorderImageRepeat__styleBorderImageRepeatNotSet mixins MSHTML$_styleBorderImageRepeat {}
declare class MSHTML$_styleBorderImageRepeat__styleBorderImageRepeatRepeat mixins MSHTML$_styleBorderImageRepeat {}
declare class MSHTML$_styleBorderImageRepeat__styleBorderImageRepeatRound mixins MSHTML$_styleBorderImageRepeat {}
declare class MSHTML$_styleBorderImageRepeat__styleBorderImageRepeatSpace mixins MSHTML$_styleBorderImageRepeat {}
declare class MSHTML$_styleBorderImageRepeat__styleBorderImageRepeatStretch mixins MSHTML$_styleBorderImageRepeat {}


declare  class MSHTML$_styleBorderImageSliceFill {
  constructor(...args: empty): mixed;
static +styleBorderImageSliceFill_Max: Class<MSHTML$_styleBorderImageSliceFill__styleBorderImageSliceFill_Max> & MSHTML$_styleBorderImageSliceFill__styleBorderImageSliceFill_Max & 2147483647;// 2147483647
static +styleBorderImageSliceFillFill: Class<MSHTML$_styleBorderImageSliceFill__styleBorderImageSliceFillFill> & MSHTML$_styleBorderImageSliceFill__styleBorderImageSliceFillFill & 1;// 1
static +styleBorderImageSliceFillNotSet: Class<MSHTML$_styleBorderImageSliceFill__styleBorderImageSliceFillNotSet> & MSHTML$_styleBorderImageSliceFill__styleBorderImageSliceFillNotSet & 0;// 0

}

declare class MSHTML$_styleBorderImageSliceFill__styleBorderImageSliceFill_Max mixins MSHTML$_styleBorderImageSliceFill {}
declare class MSHTML$_styleBorderImageSliceFill__styleBorderImageSliceFillFill mixins MSHTML$_styleBorderImageSliceFill {}
declare class MSHTML$_styleBorderImageSliceFill__styleBorderImageSliceFillNotSet mixins MSHTML$_styleBorderImageSliceFill {}


declare  class MSHTML$_styleBorderStyle {
  constructor(...args: empty): mixed;
static +styleBorderStyle_Max: Class<MSHTML$_styleBorderStyle__styleBorderStyle_Max> & MSHTML$_styleBorderStyle__styleBorderStyle_Max & 2147483647;// 2147483647
static +styleBorderStyleDashed: Class<MSHTML$_styleBorderStyle__styleBorderStyleDashed> & MSHTML$_styleBorderStyle__styleBorderStyleDashed & 2;// 2
static +styleBorderStyleDotted: Class<MSHTML$_styleBorderStyle__styleBorderStyleDotted> & MSHTML$_styleBorderStyle__styleBorderStyleDotted & 1;// 1
static +styleBorderStyleDouble: Class<MSHTML$_styleBorderStyle__styleBorderStyleDouble> & MSHTML$_styleBorderStyle__styleBorderStyleDouble & 4;// 4
static +styleBorderStyleGroove: Class<MSHTML$_styleBorderStyle__styleBorderStyleGroove> & MSHTML$_styleBorderStyle__styleBorderStyleGroove & 5;// 5
static +styleBorderStyleHidden: Class<MSHTML$_styleBorderStyle__styleBorderStyleHidden> & MSHTML$_styleBorderStyle__styleBorderStyleHidden & 11;// 11
static +styleBorderStyleInset: Class<MSHTML$_styleBorderStyle__styleBorderStyleInset> & MSHTML$_styleBorderStyle__styleBorderStyleInset & 7;// 7
static +styleBorderStyleNone: Class<MSHTML$_styleBorderStyle__styleBorderStyleNone> & MSHTML$_styleBorderStyle__styleBorderStyleNone & 10;// 10
static +styleBorderStyleNotSet: Class<MSHTML$_styleBorderStyle__styleBorderStyleNotSet> & MSHTML$_styleBorderStyle__styleBorderStyleNotSet & 0;// 0
static +styleBorderStyleOutset: Class<MSHTML$_styleBorderStyle__styleBorderStyleOutset> & MSHTML$_styleBorderStyle__styleBorderStyleOutset & 8;// 8
static +styleBorderStyleRidge: Class<MSHTML$_styleBorderStyle__styleBorderStyleRidge> & MSHTML$_styleBorderStyle__styleBorderStyleRidge & 6;// 6
static +styleBorderStyleSolid: Class<MSHTML$_styleBorderStyle__styleBorderStyleSolid> & MSHTML$_styleBorderStyle__styleBorderStyleSolid & 3;// 3
static +styleBorderStyleWindowInset: Class<MSHTML$_styleBorderStyle__styleBorderStyleWindowInset> & MSHTML$_styleBorderStyle__styleBorderStyleWindowInset & 9;// 9

}

declare class MSHTML$_styleBorderStyle__styleBorderStyle_Max mixins MSHTML$_styleBorderStyle {}
declare class MSHTML$_styleBorderStyle__styleBorderStyleDashed mixins MSHTML$_styleBorderStyle {}
declare class MSHTML$_styleBorderStyle__styleBorderStyleDotted mixins MSHTML$_styleBorderStyle {}
declare class MSHTML$_styleBorderStyle__styleBorderStyleDouble mixins MSHTML$_styleBorderStyle {}
declare class MSHTML$_styleBorderStyle__styleBorderStyleGroove mixins MSHTML$_styleBorderStyle {}
declare class MSHTML$_styleBorderStyle__styleBorderStyleHidden mixins MSHTML$_styleBorderStyle {}
declare class MSHTML$_styleBorderStyle__styleBorderStyleInset mixins MSHTML$_styleBorderStyle {}
declare class MSHTML$_styleBorderStyle__styleBorderStyleNone mixins MSHTML$_styleBorderStyle {}
declare class MSHTML$_styleBorderStyle__styleBorderStyleNotSet mixins MSHTML$_styleBorderStyle {}
declare class MSHTML$_styleBorderStyle__styleBorderStyleOutset mixins MSHTML$_styleBorderStyle {}
declare class MSHTML$_styleBorderStyle__styleBorderStyleRidge mixins MSHTML$_styleBorderStyle {}
declare class MSHTML$_styleBorderStyle__styleBorderStyleSolid mixins MSHTML$_styleBorderStyle {}
declare class MSHTML$_styleBorderStyle__styleBorderStyleWindowInset mixins MSHTML$_styleBorderStyle {}


declare  class MSHTML$_styleBorderWidth {
  constructor(...args: empty): mixed;
static +styleBorderWidth_Max: Class<MSHTML$_styleBorderWidth__styleBorderWidth_Max> & MSHTML$_styleBorderWidth__styleBorderWidth_Max & 2147483647;// 2147483647
static +styleBorderWidthMedium: Class<MSHTML$_styleBorderWidth__styleBorderWidthMedium> & MSHTML$_styleBorderWidth__styleBorderWidthMedium & 1;// 1
static +styleBorderWidthThick: Class<MSHTML$_styleBorderWidth__styleBorderWidthThick> & MSHTML$_styleBorderWidth__styleBorderWidthThick & 2;// 2
static +styleBorderWidthThin: Class<MSHTML$_styleBorderWidth__styleBorderWidthThin> & MSHTML$_styleBorderWidth__styleBorderWidthThin & 0;// 0

}

declare class MSHTML$_styleBorderWidth__styleBorderWidth_Max mixins MSHTML$_styleBorderWidth {}
declare class MSHTML$_styleBorderWidth__styleBorderWidthMedium mixins MSHTML$_styleBorderWidth {}
declare class MSHTML$_styleBorderWidth__styleBorderWidthThick mixins MSHTML$_styleBorderWidth {}
declare class MSHTML$_styleBorderWidth__styleBorderWidthThin mixins MSHTML$_styleBorderWidth {}


declare  class MSHTML$_styleBoxSizing {
  constructor(...args: empty): mixed;
static +styleBoxSizing_Max: Class<MSHTML$_styleBoxSizing__styleBoxSizing_Max> & MSHTML$_styleBoxSizing__styleBoxSizing_Max & 2147483647;// 2147483647
static +styleBoxSizingBorderBox: Class<MSHTML$_styleBoxSizing__styleBoxSizingBorderBox> & MSHTML$_styleBoxSizing__styleBoxSizingBorderBox & 2;// 2
static +styleBoxSizingContentBox: Class<MSHTML$_styleBoxSizing__styleBoxSizingContentBox> & MSHTML$_styleBoxSizing__styleBoxSizingContentBox & 1;// 1
static +styleBoxSizingNotSet: Class<MSHTML$_styleBoxSizing__styleBoxSizingNotSet> & MSHTML$_styleBoxSizing__styleBoxSizingNotSet & 0;// 0

}

declare class MSHTML$_styleBoxSizing__styleBoxSizing_Max mixins MSHTML$_styleBoxSizing {}
declare class MSHTML$_styleBoxSizing__styleBoxSizingBorderBox mixins MSHTML$_styleBoxSizing {}
declare class MSHTML$_styleBoxSizing__styleBoxSizingContentBox mixins MSHTML$_styleBoxSizing {}
declare class MSHTML$_styleBoxSizing__styleBoxSizingNotSet mixins MSHTML$_styleBoxSizing {}


declare  class MSHTML$_styleBreak {
  constructor(...args: empty): mixed;
static +styleBreak_Max: Class<MSHTML$_styleBreak__styleBreak_Max> & MSHTML$_styleBreak__styleBreak_Max & 2147483647;// 2147483647
static +styleBreakAlways: Class<MSHTML$_styleBreak__styleBreakAlways> & MSHTML$_styleBreak__styleBreakAlways & 2;// 2
static +styleBreakAuto: Class<MSHTML$_styleBreak__styleBreakAuto> & MSHTML$_styleBreak__styleBreakAuto & 1;// 1
static +styleBreakAvoid: Class<MSHTML$_styleBreak__styleBreakAvoid> & MSHTML$_styleBreak__styleBreakAvoid & 3;// 3
static +styleBreakAvoidColumn: Class<MSHTML$_styleBreak__styleBreakAvoidColumn> & MSHTML$_styleBreak__styleBreakAvoidColumn & 9;// 9
static +styleBreakAvoidPage: Class<MSHTML$_styleBreak__styleBreakAvoidPage> & MSHTML$_styleBreak__styleBreakAvoidPage & 8;// 8
static +styleBreakColumn: Class<MSHTML$_styleBreak__styleBreakColumn> & MSHTML$_styleBreak__styleBreakColumn & 7;// 7
static +styleBreakLeft: Class<MSHTML$_styleBreak__styleBreakLeft> & MSHTML$_styleBreak__styleBreakLeft & 4;// 4
static +styleBreakNotSet: Class<MSHTML$_styleBreak__styleBreakNotSet> & MSHTML$_styleBreak__styleBreakNotSet & 0;// 0
static +styleBreakPage: Class<MSHTML$_styleBreak__styleBreakPage> & MSHTML$_styleBreak__styleBreakPage & 6;// 6
static +styleBreakRight: Class<MSHTML$_styleBreak__styleBreakRight> & MSHTML$_styleBreak__styleBreakRight & 5;// 5

}

declare class MSHTML$_styleBreak__styleBreak_Max mixins MSHTML$_styleBreak {}
declare class MSHTML$_styleBreak__styleBreakAlways mixins MSHTML$_styleBreak {}
declare class MSHTML$_styleBreak__styleBreakAuto mixins MSHTML$_styleBreak {}
declare class MSHTML$_styleBreak__styleBreakAvoid mixins MSHTML$_styleBreak {}
declare class MSHTML$_styleBreak__styleBreakAvoidColumn mixins MSHTML$_styleBreak {}
declare class MSHTML$_styleBreak__styleBreakAvoidPage mixins MSHTML$_styleBreak {}
declare class MSHTML$_styleBreak__styleBreakColumn mixins MSHTML$_styleBreak {}
declare class MSHTML$_styleBreak__styleBreakLeft mixins MSHTML$_styleBreak {}
declare class MSHTML$_styleBreak__styleBreakNotSet mixins MSHTML$_styleBreak {}
declare class MSHTML$_styleBreak__styleBreakPage mixins MSHTML$_styleBreak {}
declare class MSHTML$_styleBreak__styleBreakRight mixins MSHTML$_styleBreak {}


declare  class MSHTML$_styleBreakInside {
  constructor(...args: empty): mixed;
static +styleBreakInside_Max: Class<MSHTML$_styleBreakInside__styleBreakInside_Max> & MSHTML$_styleBreakInside__styleBreakInside_Max & 2147483647;// 2147483647
static +styleBreakInsideAuto: Class<MSHTML$_styleBreakInside__styleBreakInsideAuto> & MSHTML$_styleBreakInside__styleBreakInsideAuto & 1;// 1
static +styleBreakInsideAvoid: Class<MSHTML$_styleBreakInside__styleBreakInsideAvoid> & MSHTML$_styleBreakInside__styleBreakInsideAvoid & 2;// 2
static +styleBreakInsideAvoidColumn: Class<MSHTML$_styleBreakInside__styleBreakInsideAvoidColumn> & MSHTML$_styleBreakInside__styleBreakInsideAvoidColumn & 4;// 4
static +styleBreakInsideAvoidPage: Class<MSHTML$_styleBreakInside__styleBreakInsideAvoidPage> & MSHTML$_styleBreakInside__styleBreakInsideAvoidPage & 3;// 3
static +styleBreakInsideNotSet: Class<MSHTML$_styleBreakInside__styleBreakInsideNotSet> & MSHTML$_styleBreakInside__styleBreakInsideNotSet & 0;// 0

}

declare class MSHTML$_styleBreakInside__styleBreakInside_Max mixins MSHTML$_styleBreakInside {}
declare class MSHTML$_styleBreakInside__styleBreakInsideAuto mixins MSHTML$_styleBreakInside {}
declare class MSHTML$_styleBreakInside__styleBreakInsideAvoid mixins MSHTML$_styleBreakInside {}
declare class MSHTML$_styleBreakInside__styleBreakInsideAvoidColumn mixins MSHTML$_styleBreakInside {}
declare class MSHTML$_styleBreakInside__styleBreakInsideAvoidPage mixins MSHTML$_styleBreakInside {}
declare class MSHTML$_styleBreakInside__styleBreakInsideNotSet mixins MSHTML$_styleBreakInside {}


declare  class MSHTML$_styleCaptionSide {
  constructor(...args: empty): mixed;
static +styleCaptionSide_Max: Class<MSHTML$_styleCaptionSide__styleCaptionSide_Max> & MSHTML$_styleCaptionSide__styleCaptionSide_Max & 2147483647;// 2147483647
static +styleCaptionSideBottom: Class<MSHTML$_styleCaptionSide__styleCaptionSideBottom> & MSHTML$_styleCaptionSide__styleCaptionSideBottom & 2;// 2
static +styleCaptionSideLeft: Class<MSHTML$_styleCaptionSide__styleCaptionSideLeft> & MSHTML$_styleCaptionSide__styleCaptionSideLeft & 3;// 3
static +styleCaptionSideNotSet: Class<MSHTML$_styleCaptionSide__styleCaptionSideNotSet> & MSHTML$_styleCaptionSide__styleCaptionSideNotSet & 0;// 0
static +styleCaptionSideRight: Class<MSHTML$_styleCaptionSide__styleCaptionSideRight> & MSHTML$_styleCaptionSide__styleCaptionSideRight & 4;// 4
static +styleCaptionSideTop: Class<MSHTML$_styleCaptionSide__styleCaptionSideTop> & MSHTML$_styleCaptionSide__styleCaptionSideTop & 1;// 1

}

declare class MSHTML$_styleCaptionSide__styleCaptionSide_Max mixins MSHTML$_styleCaptionSide {}
declare class MSHTML$_styleCaptionSide__styleCaptionSideBottom mixins MSHTML$_styleCaptionSide {}
declare class MSHTML$_styleCaptionSide__styleCaptionSideLeft mixins MSHTML$_styleCaptionSide {}
declare class MSHTML$_styleCaptionSide__styleCaptionSideNotSet mixins MSHTML$_styleCaptionSide {}
declare class MSHTML$_styleCaptionSide__styleCaptionSideRight mixins MSHTML$_styleCaptionSide {}
declare class MSHTML$_styleCaptionSide__styleCaptionSideTop mixins MSHTML$_styleCaptionSide {}


declare  class MSHTML$_styleClipRule {
  constructor(...args: empty): mixed;
static +styleClipRule_Max: Class<MSHTML$_styleClipRule__styleClipRule_Max> & MSHTML$_styleClipRule__styleClipRule_Max & 2147483647;// 2147483647
static +styleClipRuleEvenOdd: Class<MSHTML$_styleClipRule__styleClipRuleEvenOdd> & MSHTML$_styleClipRule__styleClipRuleEvenOdd & 2;// 2
static +styleClipRuleNonZero: Class<MSHTML$_styleClipRule__styleClipRuleNonZero> & MSHTML$_styleClipRule__styleClipRuleNonZero & 1;// 1
static +styleClipRuleNotSet: Class<MSHTML$_styleClipRule__styleClipRuleNotSet> & MSHTML$_styleClipRule__styleClipRuleNotSet & 0;// 0

}

declare class MSHTML$_styleClipRule__styleClipRule_Max mixins MSHTML$_styleClipRule {}
declare class MSHTML$_styleClipRule__styleClipRuleEvenOdd mixins MSHTML$_styleClipRule {}
declare class MSHTML$_styleClipRule__styleClipRuleNonZero mixins MSHTML$_styleClipRule {}
declare class MSHTML$_styleClipRule__styleClipRuleNotSet mixins MSHTML$_styleClipRule {}


declare  class MSHTML$_styleColorInterpolationFilters {
  constructor(...args: empty): mixed;
static +styleColorInterpolationFilters_Max: Class<MSHTML$_styleColorInterpolationFilters__styleColorInterpolationFilters_Max> & MSHTML$_styleColorInterpolationFilters__styleColorInterpolationFilters_Max & 2147483647;// 2147483647
static +styleColorInterpolationFiltersAuto: Class<MSHTML$_styleColorInterpolationFilters__styleColorInterpolationFiltersAuto> & MSHTML$_styleColorInterpolationFilters__styleColorInterpolationFiltersAuto & 0;// 0
static +styleColorInterpolationFiltersLinearRgb: Class<MSHTML$_styleColorInterpolationFilters__styleColorInterpolationFiltersLinearRgb> & MSHTML$_styleColorInterpolationFilters__styleColorInterpolationFiltersLinearRgb & 2;// 2
static +styleColorInterpolationFiltersNotSet: Class<MSHTML$_styleColorInterpolationFilters__styleColorInterpolationFiltersNotSet> & MSHTML$_styleColorInterpolationFilters__styleColorInterpolationFiltersNotSet & 3;// 3
static +styleColorInterpolationFiltersSRgb: Class<MSHTML$_styleColorInterpolationFilters__styleColorInterpolationFiltersSRgb> & MSHTML$_styleColorInterpolationFilters__styleColorInterpolationFiltersSRgb & 1;// 1

}

declare class MSHTML$_styleColorInterpolationFilters__styleColorInterpolationFilters_Max mixins MSHTML$_styleColorInterpolationFilters {}
declare class MSHTML$_styleColorInterpolationFilters__styleColorInterpolationFiltersAuto mixins MSHTML$_styleColorInterpolationFilters {}
declare class MSHTML$_styleColorInterpolationFilters__styleColorInterpolationFiltersLinearRgb mixins MSHTML$_styleColorInterpolationFilters {}
declare class MSHTML$_styleColorInterpolationFilters__styleColorInterpolationFiltersNotSet mixins MSHTML$_styleColorInterpolationFilters {}
declare class MSHTML$_styleColorInterpolationFilters__styleColorInterpolationFiltersSRgb mixins MSHTML$_styleColorInterpolationFilters {}


declare  class MSHTML$_styleColumnFill {
  constructor(...args: empty): mixed;
static +styleColumnFill_Max: Class<MSHTML$_styleColumnFill__styleColumnFill_Max> & MSHTML$_styleColumnFill__styleColumnFill_Max & 2147483647;// 2147483647
static +styleColumnFillAuto: Class<MSHTML$_styleColumnFill__styleColumnFillAuto> & MSHTML$_styleColumnFill__styleColumnFillAuto & 0;// 0
static +styleColumnFillBalance: Class<MSHTML$_styleColumnFill__styleColumnFillBalance> & MSHTML$_styleColumnFill__styleColumnFillBalance & 1;// 1
static +styleColumnFillNotSet: Class<MSHTML$_styleColumnFill__styleColumnFillNotSet> & MSHTML$_styleColumnFill__styleColumnFillNotSet & 2;// 2

}

declare class MSHTML$_styleColumnFill__styleColumnFill_Max mixins MSHTML$_styleColumnFill {}
declare class MSHTML$_styleColumnFill__styleColumnFillAuto mixins MSHTML$_styleColumnFill {}
declare class MSHTML$_styleColumnFill__styleColumnFillBalance mixins MSHTML$_styleColumnFill {}
declare class MSHTML$_styleColumnFill__styleColumnFillNotSet mixins MSHTML$_styleColumnFill {}


declare  class MSHTML$_styleColumnSpan {
  constructor(...args: empty): mixed;
static +styleColumnSpan_Max: Class<MSHTML$_styleColumnSpan__styleColumnSpan_Max> & MSHTML$_styleColumnSpan__styleColumnSpan_Max & 2147483647;// 2147483647
static +styleColumnSpanAll: Class<MSHTML$_styleColumnSpan__styleColumnSpanAll> & MSHTML$_styleColumnSpan__styleColumnSpanAll & 1;// 1
static +styleColumnSpanNone: Class<MSHTML$_styleColumnSpan__styleColumnSpanNone> & MSHTML$_styleColumnSpan__styleColumnSpanNone & 0;// 0
static +styleColumnSpanNotSet: Class<MSHTML$_styleColumnSpan__styleColumnSpanNotSet> & MSHTML$_styleColumnSpan__styleColumnSpanNotSet & 3;// 3
static +styleColumnSpanOne: Class<MSHTML$_styleColumnSpan__styleColumnSpanOne> & MSHTML$_styleColumnSpan__styleColumnSpanOne & 2;// 2

}

declare class MSHTML$_styleColumnSpan__styleColumnSpan_Max mixins MSHTML$_styleColumnSpan {}
declare class MSHTML$_styleColumnSpan__styleColumnSpanAll mixins MSHTML$_styleColumnSpan {}
declare class MSHTML$_styleColumnSpan__styleColumnSpanNone mixins MSHTML$_styleColumnSpan {}
declare class MSHTML$_styleColumnSpan__styleColumnSpanNotSet mixins MSHTML$_styleColumnSpan {}
declare class MSHTML$_styleColumnSpan__styleColumnSpanOne mixins MSHTML$_styleColumnSpan {}


declare  class MSHTML$_styleCursor {
  constructor(...args: empty): mixed;
static +styleCursor_Max: Class<MSHTML$_styleCursor__styleCursor_Max> & MSHTML$_styleCursor__styleCursor_Max & 2147483647;// 2147483647
static +styleCursorAlias: Class<MSHTML$_styleCursor__styleCursorAlias> & MSHTML$_styleCursor__styleCursorAlias & 32;// 32
static +styleCursorall_scroll: Class<MSHTML$_styleCursor__styleCursorall_scroll> & MSHTML$_styleCursor__styleCursorall_scroll & 21;// 21
static +styleCursorAuto: Class<MSHTML$_styleCursor__styleCursorAuto> & MSHTML$_styleCursor__styleCursorAuto & 0;// 0
static +styleCursorCell: Class<MSHTML$_styleCursor__styleCursorCell> & MSHTML$_styleCursor__styleCursorCell & 30;// 30
static +styleCursorcol_resize: Class<MSHTML$_styleCursor__styleCursorcol_resize> & MSHTML$_styleCursor__styleCursorcol_resize & 22;// 22
static +styleCursorContext_menu: Class<MSHTML$_styleCursor__styleCursorContext_menu> & MSHTML$_styleCursor__styleCursorContext_menu & 25;// 25
static +styleCursorCopy: Class<MSHTML$_styleCursor__styleCursorCopy> & MSHTML$_styleCursor__styleCursorCopy & 31;// 31
static +styleCursorCrosshair: Class<MSHTML$_styleCursor__styleCursorCrosshair> & MSHTML$_styleCursor__styleCursorCrosshair & 1;// 1
static +styleCursorcustom: Class<MSHTML$_styleCursor__styleCursorcustom> & MSHTML$_styleCursor__styleCursorcustom & 33;// 33
static +styleCursorDefault: Class<MSHTML$_styleCursor__styleCursorDefault> & MSHTML$_styleCursor__styleCursorDefault & 2;// 2
static +styleCursorE_resize: Class<MSHTML$_styleCursor__styleCursorE_resize> & MSHTML$_styleCursor__styleCursorE_resize & 5;// 5
static +styleCursorEw_resize: Class<MSHTML$_styleCursor__styleCursorEw_resize> & MSHTML$_styleCursor__styleCursorEw_resize & 26;// 26
static +styleCursorHand: Class<MSHTML$_styleCursor__styleCursorHand> & MSHTML$_styleCursor__styleCursorHand & 3;// 3
static +styleCursorHelp: Class<MSHTML$_styleCursor__styleCursorHelp> & MSHTML$_styleCursor__styleCursorHelp & 15;// 15
static +styleCursorMove: Class<MSHTML$_styleCursor__styleCursorMove> & MSHTML$_styleCursor__styleCursorMove & 4;// 4
static +styleCursorN_resize: Class<MSHTML$_styleCursor__styleCursorN_resize> & MSHTML$_styleCursor__styleCursorN_resize & 8;// 8
static +styleCursorNe_resize: Class<MSHTML$_styleCursor__styleCursorNe_resize> & MSHTML$_styleCursor__styleCursorNe_resize & 6;// 6
static +styleCursorNesw_resize: Class<MSHTML$_styleCursor__styleCursorNesw_resize> & MSHTML$_styleCursor__styleCursorNesw_resize & 28;// 28
static +styleCursorNo_drop: Class<MSHTML$_styleCursor__styleCursorNo_drop> & MSHTML$_styleCursor__styleCursorNo_drop & 19;// 19
static +styleCursorNone: Class<MSHTML$_styleCursor__styleCursorNone> & MSHTML$_styleCursor__styleCursorNone & 24;// 24
static +styleCursorNot_allowed: Class<MSHTML$_styleCursor__styleCursorNot_allowed> & MSHTML$_styleCursor__styleCursorNot_allowed & 18;// 18
static +styleCursorNotSet: Class<MSHTML$_styleCursor__styleCursorNotSet> & MSHTML$_styleCursor__styleCursorNotSet & 34;// 34
static +styleCursorNs_resize: Class<MSHTML$_styleCursor__styleCursorNs_resize> & MSHTML$_styleCursor__styleCursorNs_resize & 27;// 27
static +styleCursorNw_resize: Class<MSHTML$_styleCursor__styleCursorNw_resize> & MSHTML$_styleCursor__styleCursorNw_resize & 7;// 7
static +styleCursorNwse_resize: Class<MSHTML$_styleCursor__styleCursorNwse_resize> & MSHTML$_styleCursor__styleCursorNwse_resize & 29;// 29
static +styleCursorPointer: Class<MSHTML$_styleCursor__styleCursorPointer> & MSHTML$_styleCursor__styleCursorPointer & 16;// 16
static +styleCursorProgress: Class<MSHTML$_styleCursor__styleCursorProgress> & MSHTML$_styleCursor__styleCursorProgress & 17;// 17
static +styleCursorrow_resize: Class<MSHTML$_styleCursor__styleCursorrow_resize> & MSHTML$_styleCursor__styleCursorrow_resize & 23;// 23
static +styleCursorS_resize: Class<MSHTML$_styleCursor__styleCursorS_resize> & MSHTML$_styleCursor__styleCursorS_resize & 11;// 11
static +styleCursorSe_resize: Class<MSHTML$_styleCursor__styleCursorSe_resize> & MSHTML$_styleCursor__styleCursorSe_resize & 9;// 9
static +styleCursorSw_resize: Class<MSHTML$_styleCursor__styleCursorSw_resize> & MSHTML$_styleCursor__styleCursorSw_resize & 10;// 10
static +styleCursorText: Class<MSHTML$_styleCursor__styleCursorText> & MSHTML$_styleCursor__styleCursorText & 13;// 13
static +styleCursorVertical_text: Class<MSHTML$_styleCursor__styleCursorVertical_text> & MSHTML$_styleCursor__styleCursorVertical_text & 20;// 20
static +styleCursorW_resize: Class<MSHTML$_styleCursor__styleCursorW_resize> & MSHTML$_styleCursor__styleCursorW_resize & 12;// 12
static +styleCursorWait: Class<MSHTML$_styleCursor__styleCursorWait> & MSHTML$_styleCursor__styleCursorWait & 14;// 14

}

declare class MSHTML$_styleCursor__styleCursor_Max mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorAlias mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorall_scroll mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorAuto mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorCell mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorcol_resize mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorContext_menu mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorCopy mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorCrosshair mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorcustom mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorDefault mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorE_resize mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorEw_resize mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorHand mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorHelp mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorMove mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorN_resize mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorNe_resize mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorNesw_resize mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorNo_drop mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorNone mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorNot_allowed mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorNotSet mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorNs_resize mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorNw_resize mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorNwse_resize mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorPointer mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorProgress mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorrow_resize mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorS_resize mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorSe_resize mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorSw_resize mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorText mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorVertical_text mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorW_resize mixins MSHTML$_styleCursor {}
declare class MSHTML$_styleCursor__styleCursorWait mixins MSHTML$_styleCursor {}


declare  class MSHTML$_styleDataRepeat {
  constructor(...args: empty): mixed;
static +styleDataRepeat_Max: Class<MSHTML$_styleDataRepeat__styleDataRepeat_Max> & MSHTML$_styleDataRepeat__styleDataRepeat_Max & 2147483647;// 2147483647
static +styleDataRepeatInner: Class<MSHTML$_styleDataRepeat__styleDataRepeatInner> & MSHTML$_styleDataRepeat__styleDataRepeatInner & 1;// 1
static +styleDataRepeatNone: Class<MSHTML$_styleDataRepeat__styleDataRepeatNone> & MSHTML$_styleDataRepeat__styleDataRepeatNone & 0;// 0

}

declare class MSHTML$_styleDataRepeat__styleDataRepeat_Max mixins MSHTML$_styleDataRepeat {}
declare class MSHTML$_styleDataRepeat__styleDataRepeatInner mixins MSHTML$_styleDataRepeat {}
declare class MSHTML$_styleDataRepeat__styleDataRepeatNone mixins MSHTML$_styleDataRepeat {}


declare  class MSHTML$_styleDefaultTextSelection {
  constructor(...args: empty): mixed;
static +styleDefaultTextSelection_Max: Class<MSHTML$_styleDefaultTextSelection__styleDefaultTextSelection_Max> & MSHTML$_styleDefaultTextSelection__styleDefaultTextSelection_Max & 2147483647;// 2147483647
static +styleDefaultTextSelectionFalse: Class<MSHTML$_styleDefaultTextSelection__styleDefaultTextSelectionFalse> & MSHTML$_styleDefaultTextSelection__styleDefaultTextSelectionFalse & 0;// 0
static +styleDefaultTextSelectionTrue: Class<MSHTML$_styleDefaultTextSelection__styleDefaultTextSelectionTrue> & MSHTML$_styleDefaultTextSelection__styleDefaultTextSelectionTrue & 1;// 1

}

declare class MSHTML$_styleDefaultTextSelection__styleDefaultTextSelection_Max mixins MSHTML$_styleDefaultTextSelection {}
declare class MSHTML$_styleDefaultTextSelection__styleDefaultTextSelectionFalse mixins MSHTML$_styleDefaultTextSelection {}
declare class MSHTML$_styleDefaultTextSelection__styleDefaultTextSelectionTrue mixins MSHTML$_styleDefaultTextSelection {}


declare  class MSHTML$_styleDir {
  constructor(...args: empty): mixed;
static +styleDir_Max: Class<MSHTML$_styleDir__styleDir_Max> & MSHTML$_styleDir__styleDir_Max & 2147483647;// 2147483647
static +styleDirInherit: Class<MSHTML$_styleDir__styleDirInherit> & MSHTML$_styleDir__styleDirInherit & 3;// 3
static +styleDirLeftToRight: Class<MSHTML$_styleDir__styleDirLeftToRight> & MSHTML$_styleDir__styleDirLeftToRight & 1;// 1
static +styleDirNotSet: Class<MSHTML$_styleDir__styleDirNotSet> & MSHTML$_styleDir__styleDirNotSet & 0;// 0
static +styleDirRightToLeft: Class<MSHTML$_styleDir__styleDirRightToLeft> & MSHTML$_styleDir__styleDirRightToLeft & 2;// 2

}

declare class MSHTML$_styleDir__styleDir_Max mixins MSHTML$_styleDir {}
declare class MSHTML$_styleDir__styleDirInherit mixins MSHTML$_styleDir {}
declare class MSHTML$_styleDir__styleDirLeftToRight mixins MSHTML$_styleDir {}
declare class MSHTML$_styleDir__styleDirNotSet mixins MSHTML$_styleDir {}
declare class MSHTML$_styleDir__styleDirRightToLeft mixins MSHTML$_styleDir {}


declare  class MSHTML$_styleDisplay {
  constructor(...args: empty): mixed;
static +styleDisplay_Max: Class<MSHTML$_styleDisplay__styleDisplay_Max> & MSHTML$_styleDisplay__styleDisplay_Max & 2147483647;// 2147483647
static +styleDisplayBlock: Class<MSHTML$_styleDisplay__styleDisplayBlock> & MSHTML$_styleDisplay__styleDisplayBlock & 1;// 1
static +styleDisplayFlex: Class<MSHTML$_styleDisplay__styleDisplayFlex> & MSHTML$_styleDisplay__styleDisplayFlex & 26;// 26
static +styleDisplayInline: Class<MSHTML$_styleDisplay__styleDisplayInline> & MSHTML$_styleDisplay__styleDisplayInline & 2;// 2
static +styleDisplayInlineBlock: Class<MSHTML$_styleDisplay__styleDisplayInlineBlock> & MSHTML$_styleDisplay__styleDisplayInlineBlock & 7;// 7
static +styleDisplayInlineFlex: Class<MSHTML$_styleDisplay__styleDisplayInlineFlex> & MSHTML$_styleDisplay__styleDisplayInlineFlex & 27;// 27
static +styleDisplayInlineTable: Class<MSHTML$_styleDisplay__styleDisplayInlineTable> & MSHTML$_styleDisplay__styleDisplayInlineTable & 9;// 9
static +styleDisplayListItem: Class<MSHTML$_styleDisplay__styleDisplayListItem> & MSHTML$_styleDisplay__styleDisplayListItem & 3;// 3
static +styleDisplayMsFlexbox: Class<MSHTML$_styleDisplay__styleDisplayMsFlexbox> & MSHTML$_styleDisplay__styleDisplayMsFlexbox & 22;// 22
static +styleDisplayMsGrid: Class<MSHTML$_styleDisplay__styleDisplayMsGrid> & MSHTML$_styleDisplay__styleDisplayMsGrid & 24;// 24
static +styleDisplayMsInlineFlexbox: Class<MSHTML$_styleDisplay__styleDisplayMsInlineFlexbox> & MSHTML$_styleDisplay__styleDisplayMsInlineFlexbox & 23;// 23
static +styleDisplayMsInlineGrid: Class<MSHTML$_styleDisplay__styleDisplayMsInlineGrid> & MSHTML$_styleDisplay__styleDisplayMsInlineGrid & 25;// 25
static +styleDisplayNone: Class<MSHTML$_styleDisplay__styleDisplayNone> & MSHTML$_styleDisplay__styleDisplayNone & 4;// 4
static +styleDisplayNotSet: Class<MSHTML$_styleDisplay__styleDisplayNotSet> & MSHTML$_styleDisplay__styleDisplayNotSet & 0;// 0
static +styleDisplayRuby: Class<MSHTML$_styleDisplay__styleDisplayRuby> & MSHTML$_styleDisplay__styleDisplayRuby & 17;// 17
static +styleDisplayRubyBase: Class<MSHTML$_styleDisplay__styleDisplayRubyBase> & MSHTML$_styleDisplay__styleDisplayRubyBase & 18;// 18
static +styleDisplayRubyBaseContainer: Class<MSHTML$_styleDisplay__styleDisplayRubyBaseContainer> & MSHTML$_styleDisplay__styleDisplayRubyBaseContainer & 20;// 20
static +styleDisplayRubyText: Class<MSHTML$_styleDisplay__styleDisplayRubyText> & MSHTML$_styleDisplay__styleDisplayRubyText & 19;// 19
static +styleDisplayRubyTextContainer: Class<MSHTML$_styleDisplay__styleDisplayRubyTextContainer> & MSHTML$_styleDisplay__styleDisplayRubyTextContainer & 21;// 21
static +styleDisplayRunIn: Class<MSHTML$_styleDisplay__styleDisplayRunIn> & MSHTML$_styleDisplay__styleDisplayRunIn & 16;// 16
static +styleDisplayTable: Class<MSHTML$_styleDisplay__styleDisplayTable> & MSHTML$_styleDisplay__styleDisplayTable & 8;// 8
static +styleDisplayTableCaption: Class<MSHTML$_styleDisplay__styleDisplayTableCaption> & MSHTML$_styleDisplay__styleDisplayTableCaption & 15;// 15
static +styleDisplayTableCell: Class<MSHTML$_styleDisplay__styleDisplayTableCell> & MSHTML$_styleDisplay__styleDisplayTableCell & 14;// 14
static +styleDisplayTableColumn: Class<MSHTML$_styleDisplay__styleDisplayTableColumn> & MSHTML$_styleDisplay__styleDisplayTableColumn & 12;// 12
static +styleDisplayTableColumnGroup: Class<MSHTML$_styleDisplay__styleDisplayTableColumnGroup> & MSHTML$_styleDisplay__styleDisplayTableColumnGroup & 13;// 13
static +styleDisplayTableFooterGroup: Class<MSHTML$_styleDisplay__styleDisplayTableFooterGroup> & MSHTML$_styleDisplay__styleDisplayTableFooterGroup & 6;// 6
static +styleDisplayTableHeaderGroup: Class<MSHTML$_styleDisplay__styleDisplayTableHeaderGroup> & MSHTML$_styleDisplay__styleDisplayTableHeaderGroup & 5;// 5
static +styleDisplayTableRow: Class<MSHTML$_styleDisplay__styleDisplayTableRow> & MSHTML$_styleDisplay__styleDisplayTableRow & 10;// 10
static +styleDisplayTableRowGroup: Class<MSHTML$_styleDisplay__styleDisplayTableRowGroup> & MSHTML$_styleDisplay__styleDisplayTableRowGroup & 11;// 11
static +styleDisplayWebkitBox: Class<MSHTML$_styleDisplay__styleDisplayWebkitBox> & MSHTML$_styleDisplay__styleDisplayWebkitBox & 28;// 28
static +styleDisplayWebkitInlineBox: Class<MSHTML$_styleDisplay__styleDisplayWebkitInlineBox> & MSHTML$_styleDisplay__styleDisplayWebkitInlineBox & 29;// 29

}

declare class MSHTML$_styleDisplay__styleDisplay_Max mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayBlock mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayFlex mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayInline mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayInlineBlock mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayInlineFlex mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayInlineTable mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayListItem mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayMsFlexbox mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayMsGrid mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayMsInlineFlexbox mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayMsInlineGrid mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayNone mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayNotSet mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayRuby mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayRubyBase mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayRubyBaseContainer mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayRubyText mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayRubyTextContainer mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayRunIn mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayTable mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayTableCaption mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayTableCell mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayTableColumn mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayTableColumnGroup mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayTableFooterGroup mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayTableHeaderGroup mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayTableRow mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayTableRowGroup mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayWebkitBox mixins MSHTML$_styleDisplay {}
declare class MSHTML$_styleDisplay__styleDisplayWebkitInlineBox mixins MSHTML$_styleDisplay {}


declare  class MSHTML$_styleDominantBaseline {
  constructor(...args: empty): mixed;
static +styleDominantBaseline_Max: Class<MSHTML$_styleDominantBaseline__styleDominantBaseline_Max> & MSHTML$_styleDominantBaseline__styleDominantBaseline_Max & 2147483647;// 2147483647
static +styleDominantBaselineAlphabetic: Class<MSHTML$_styleDominantBaseline__styleDominantBaselineAlphabetic> & MSHTML$_styleDominantBaseline__styleDominantBaselineAlphabetic & 1;// 1
static +styleDominantBaselineAuto: Class<MSHTML$_styleDominantBaseline__styleDominantBaselineAuto> & MSHTML$_styleDominantBaseline__styleDominantBaselineAuto & 2;// 2
static +styleDominantBaselineCentral: Class<MSHTML$_styleDominantBaseline__styleDominantBaselineCentral> & MSHTML$_styleDominantBaseline__styleDominantBaselineCentral & 3;// 3
static +styleDominantBaselineHanging: Class<MSHTML$_styleDominantBaseline__styleDominantBaselineHanging> & MSHTML$_styleDominantBaseline__styleDominantBaselineHanging & 4;// 4
static +styleDominantBaselineIdeographic: Class<MSHTML$_styleDominantBaseline__styleDominantBaselineIdeographic> & MSHTML$_styleDominantBaseline__styleDominantBaselineIdeographic & 5;// 5
static +styleDominantBaselineMathematical: Class<MSHTML$_styleDominantBaseline__styleDominantBaselineMathematical> & MSHTML$_styleDominantBaseline__styleDominantBaselineMathematical & 6;// 6
static +styleDominantBaselineMiddle: Class<MSHTML$_styleDominantBaseline__styleDominantBaselineMiddle> & MSHTML$_styleDominantBaseline__styleDominantBaselineMiddle & 7;// 7
static +styleDominantBaselineNoChange: Class<MSHTML$_styleDominantBaseline__styleDominantBaselineNoChange> & MSHTML$_styleDominantBaseline__styleDominantBaselineNoChange & 8;// 8
static +styleDominantBaselineNotSet: Class<MSHTML$_styleDominantBaseline__styleDominantBaselineNotSet> & MSHTML$_styleDominantBaseline__styleDominantBaselineNotSet & 0;// 0
static +styleDominantBaselineResetSize: Class<MSHTML$_styleDominantBaseline__styleDominantBaselineResetSize> & MSHTML$_styleDominantBaseline__styleDominantBaselineResetSize & 9;// 9
static +styleDominantBaselineTextAfterEdge: Class<MSHTML$_styleDominantBaseline__styleDominantBaselineTextAfterEdge> & MSHTML$_styleDominantBaseline__styleDominantBaselineTextAfterEdge & 10;// 10
static +styleDominantBaselineTextBeforeEdge: Class<MSHTML$_styleDominantBaseline__styleDominantBaselineTextBeforeEdge> & MSHTML$_styleDominantBaseline__styleDominantBaselineTextBeforeEdge & 11;// 11
static +styleDominantBaselineUseScript: Class<MSHTML$_styleDominantBaseline__styleDominantBaselineUseScript> & MSHTML$_styleDominantBaseline__styleDominantBaselineUseScript & 12;// 12

}

declare class MSHTML$_styleDominantBaseline__styleDominantBaseline_Max mixins MSHTML$_styleDominantBaseline {}
declare class MSHTML$_styleDominantBaseline__styleDominantBaselineAlphabetic mixins MSHTML$_styleDominantBaseline {}
declare class MSHTML$_styleDominantBaseline__styleDominantBaselineAuto mixins MSHTML$_styleDominantBaseline {}
declare class MSHTML$_styleDominantBaseline__styleDominantBaselineCentral mixins MSHTML$_styleDominantBaseline {}
declare class MSHTML$_styleDominantBaseline__styleDominantBaselineHanging mixins MSHTML$_styleDominantBaseline {}
declare class MSHTML$_styleDominantBaseline__styleDominantBaselineIdeographic mixins MSHTML$_styleDominantBaseline {}
declare class MSHTML$_styleDominantBaseline__styleDominantBaselineMathematical mixins MSHTML$_styleDominantBaseline {}
declare class MSHTML$_styleDominantBaseline__styleDominantBaselineMiddle mixins MSHTML$_styleDominantBaseline {}
declare class MSHTML$_styleDominantBaseline__styleDominantBaselineNoChange mixins MSHTML$_styleDominantBaseline {}
declare class MSHTML$_styleDominantBaseline__styleDominantBaselineNotSet mixins MSHTML$_styleDominantBaseline {}
declare class MSHTML$_styleDominantBaseline__styleDominantBaselineResetSize mixins MSHTML$_styleDominantBaseline {}
declare class MSHTML$_styleDominantBaseline__styleDominantBaselineTextAfterEdge mixins MSHTML$_styleDominantBaseline {}
declare class MSHTML$_styleDominantBaseline__styleDominantBaselineTextBeforeEdge mixins MSHTML$_styleDominantBaseline {}
declare class MSHTML$_styleDominantBaseline__styleDominantBaselineUseScript mixins MSHTML$_styleDominantBaseline {}


declare  class MSHTML$_styleEmptyCells {
  constructor(...args: empty): mixed;
static +styleEmptyCells_Max: Class<MSHTML$_styleEmptyCells__styleEmptyCells_Max> & MSHTML$_styleEmptyCells__styleEmptyCells_Max & 2147483647;// 2147483647
static +styleEmptyCellsHide: Class<MSHTML$_styleEmptyCells__styleEmptyCellsHide> & MSHTML$_styleEmptyCells__styleEmptyCellsHide & 2;// 2
static +styleEmptyCellsNotSet: Class<MSHTML$_styleEmptyCells__styleEmptyCellsNotSet> & MSHTML$_styleEmptyCells__styleEmptyCellsNotSet & 0;// 0
static +styleEmptyCellsShow: Class<MSHTML$_styleEmptyCells__styleEmptyCellsShow> & MSHTML$_styleEmptyCells__styleEmptyCellsShow & 1;// 1

}

declare class MSHTML$_styleEmptyCells__styleEmptyCells_Max mixins MSHTML$_styleEmptyCells {}
declare class MSHTML$_styleEmptyCells__styleEmptyCellsHide mixins MSHTML$_styleEmptyCells {}
declare class MSHTML$_styleEmptyCells__styleEmptyCellsNotSet mixins MSHTML$_styleEmptyCells {}
declare class MSHTML$_styleEmptyCells__styleEmptyCellsShow mixins MSHTML$_styleEmptyCells {}


declare  class MSHTML$_styleEnableBackground {
  constructor(...args: empty): mixed;
static +styleEnableBackground_Max: Class<MSHTML$_styleEnableBackground__styleEnableBackground_Max> & MSHTML$_styleEnableBackground__styleEnableBackground_Max & 2147483647;// 2147483647
static +styleEnableBackgroundAccumulate: Class<MSHTML$_styleEnableBackground__styleEnableBackgroundAccumulate> & MSHTML$_styleEnableBackground__styleEnableBackgroundAccumulate & 1;// 1
static +styleEnableBackgroundInherit: Class<MSHTML$_styleEnableBackground__styleEnableBackgroundInherit> & MSHTML$_styleEnableBackground__styleEnableBackgroundInherit & 3;// 3
static +styleEnableBackgroundNew: Class<MSHTML$_styleEnableBackground__styleEnableBackgroundNew> & MSHTML$_styleEnableBackground__styleEnableBackgroundNew & 2;// 2
static +styleEnableBackgroundNotSet: Class<MSHTML$_styleEnableBackground__styleEnableBackgroundNotSet> & MSHTML$_styleEnableBackground__styleEnableBackgroundNotSet & 0;// 0

}

declare class MSHTML$_styleEnableBackground__styleEnableBackground_Max mixins MSHTML$_styleEnableBackground {}
declare class MSHTML$_styleEnableBackground__styleEnableBackgroundAccumulate mixins MSHTML$_styleEnableBackground {}
declare class MSHTML$_styleEnableBackground__styleEnableBackgroundInherit mixins MSHTML$_styleEnableBackground {}
declare class MSHTML$_styleEnableBackground__styleEnableBackgroundNew mixins MSHTML$_styleEnableBackground {}
declare class MSHTML$_styleEnableBackground__styleEnableBackgroundNotSet mixins MSHTML$_styleEnableBackground {}


declare  class MSHTML$_styleFillRule {
  constructor(...args: empty): mixed;
static +styleFillRule_Max: Class<MSHTML$_styleFillRule__styleFillRule_Max> & MSHTML$_styleFillRule__styleFillRule_Max & 2147483647;// 2147483647
static +styleFillRuleEvenOdd: Class<MSHTML$_styleFillRule__styleFillRuleEvenOdd> & MSHTML$_styleFillRule__styleFillRuleEvenOdd & 2;// 2
static +styleFillRuleNonZero: Class<MSHTML$_styleFillRule__styleFillRuleNonZero> & MSHTML$_styleFillRule__styleFillRuleNonZero & 1;// 1
static +styleFillRuleNotSet: Class<MSHTML$_styleFillRule__styleFillRuleNotSet> & MSHTML$_styleFillRule__styleFillRuleNotSet & 0;// 0

}

declare class MSHTML$_styleFillRule__styleFillRule_Max mixins MSHTML$_styleFillRule {}
declare class MSHTML$_styleFillRule__styleFillRuleEvenOdd mixins MSHTML$_styleFillRule {}
declare class MSHTML$_styleFillRule__styleFillRuleNonZero mixins MSHTML$_styleFillRule {}
declare class MSHTML$_styleFillRule__styleFillRuleNotSet mixins MSHTML$_styleFillRule {}


declare  class MSHTML$_styleFlex {
  constructor(...args: empty): mixed;
static +styleFlex_Max: Class<MSHTML$_styleFlex__styleFlex_Max> & MSHTML$_styleFlex__styleFlex_Max & 2147483647;// 2147483647
static +styleFlexNone: Class<MSHTML$_styleFlex__styleFlexNone> & MSHTML$_styleFlex__styleFlexNone & 0;// 0
static +styleFlexNotSet: Class<MSHTML$_styleFlex__styleFlexNotSet> & MSHTML$_styleFlex__styleFlexNotSet & 1;// 1

}

declare class MSHTML$_styleFlex__styleFlex_Max mixins MSHTML$_styleFlex {}
declare class MSHTML$_styleFlex__styleFlexNone mixins MSHTML$_styleFlex {}
declare class MSHTML$_styleFlex__styleFlexNotSet mixins MSHTML$_styleFlex {}


declare  class MSHTML$_styleFlexBasis {
  constructor(...args: empty): mixed;
static +styleFlexBasis_Max: Class<MSHTML$_styleFlexBasis__styleFlexBasis_Max> & MSHTML$_styleFlexBasis__styleFlexBasis_Max & 2147483647;// 2147483647
static +styleFlexBasisAuto: Class<MSHTML$_styleFlexBasis__styleFlexBasisAuto> & MSHTML$_styleFlexBasis__styleFlexBasisAuto & 0;// 0
static +styleFlexBasisNotSet: Class<MSHTML$_styleFlexBasis__styleFlexBasisNotSet> & MSHTML$_styleFlexBasis__styleFlexBasisNotSet & 1;// 1

}

declare class MSHTML$_styleFlexBasis__styleFlexBasis_Max mixins MSHTML$_styleFlexBasis {}
declare class MSHTML$_styleFlexBasis__styleFlexBasisAuto mixins MSHTML$_styleFlexBasis {}
declare class MSHTML$_styleFlexBasis__styleFlexBasisNotSet mixins MSHTML$_styleFlexBasis {}


declare  class MSHTML$_styleFlexDirection {
  constructor(...args: empty): mixed;
static +styleFlexDirection_Max: Class<MSHTML$_styleFlexDirection__styleFlexDirection_Max> & MSHTML$_styleFlexDirection__styleFlexDirection_Max & 2147483647;// 2147483647
static +styleFlexDirectionColumn: Class<MSHTML$_styleFlexDirection__styleFlexDirectionColumn> & MSHTML$_styleFlexDirection__styleFlexDirectionColumn & 2;// 2
static +styleFlexDirectionColumnReverse: Class<MSHTML$_styleFlexDirection__styleFlexDirectionColumnReverse> & MSHTML$_styleFlexDirection__styleFlexDirectionColumnReverse & 3;// 3
static +styleFlexDirectionNotSet: Class<MSHTML$_styleFlexDirection__styleFlexDirectionNotSet> & MSHTML$_styleFlexDirection__styleFlexDirectionNotSet & 4;// 4
static +styleFlexDirectionRow: Class<MSHTML$_styleFlexDirection__styleFlexDirectionRow> & MSHTML$_styleFlexDirection__styleFlexDirectionRow & 0;// 0
static +styleFlexDirectionRowReverse: Class<MSHTML$_styleFlexDirection__styleFlexDirectionRowReverse> & MSHTML$_styleFlexDirection__styleFlexDirectionRowReverse & 1;// 1

}

declare class MSHTML$_styleFlexDirection__styleFlexDirection_Max mixins MSHTML$_styleFlexDirection {}
declare class MSHTML$_styleFlexDirection__styleFlexDirectionColumn mixins MSHTML$_styleFlexDirection {}
declare class MSHTML$_styleFlexDirection__styleFlexDirectionColumnReverse mixins MSHTML$_styleFlexDirection {}
declare class MSHTML$_styleFlexDirection__styleFlexDirectionNotSet mixins MSHTML$_styleFlexDirection {}
declare class MSHTML$_styleFlexDirection__styleFlexDirectionRow mixins MSHTML$_styleFlexDirection {}
declare class MSHTML$_styleFlexDirection__styleFlexDirectionRowReverse mixins MSHTML$_styleFlexDirection {}


declare  class MSHTML$_styleFlexWrap {
  constructor(...args: empty): mixed;
static +styleFlexWrap_Max: Class<MSHTML$_styleFlexWrap__styleFlexWrap_Max> & MSHTML$_styleFlexWrap__styleFlexWrap_Max & 2147483647;// 2147483647
static +styleFlexWrapNotSet: Class<MSHTML$_styleFlexWrap__styleFlexWrapNotSet> & MSHTML$_styleFlexWrap__styleFlexWrapNotSet & 3;// 3
static +styleFlexWrapNowrap: Class<MSHTML$_styleFlexWrap__styleFlexWrapNowrap> & MSHTML$_styleFlexWrap__styleFlexWrapNowrap & 0;// 0
static +styleFlexWrapWrap: Class<MSHTML$_styleFlexWrap__styleFlexWrapWrap> & MSHTML$_styleFlexWrap__styleFlexWrapWrap & 1;// 1
static +styleFlexWrapWrapReverse: Class<MSHTML$_styleFlexWrap__styleFlexWrapWrapReverse> & MSHTML$_styleFlexWrap__styleFlexWrapWrapReverse & 2;// 2

}

declare class MSHTML$_styleFlexWrap__styleFlexWrap_Max mixins MSHTML$_styleFlexWrap {}
declare class MSHTML$_styleFlexWrap__styleFlexWrapNotSet mixins MSHTML$_styleFlexWrap {}
declare class MSHTML$_styleFlexWrap__styleFlexWrapNowrap mixins MSHTML$_styleFlexWrap {}
declare class MSHTML$_styleFlexWrap__styleFlexWrapWrap mixins MSHTML$_styleFlexWrap {}
declare class MSHTML$_styleFlexWrap__styleFlexWrapWrapReverse mixins MSHTML$_styleFlexWrap {}


declare  class MSHTML$_styleFontSize {
  constructor(...args: empty): mixed;
static +styleFontSize_Max: Class<MSHTML$_styleFontSize__styleFontSize_Max> & MSHTML$_styleFontSize__styleFontSize_Max & 2147483647;// 2147483647
static +styleFontSizeLarge: Class<MSHTML$_styleFontSize__styleFontSizeLarge> & MSHTML$_styleFontSize__styleFontSizeLarge & 4;// 4
static +styleFontSizeLarger: Class<MSHTML$_styleFontSize__styleFontSizeLarger> & MSHTML$_styleFontSize__styleFontSizeLarger & 8;// 8
static +styleFontSizeMedium: Class<MSHTML$_styleFontSize__styleFontSizeMedium> & MSHTML$_styleFontSize__styleFontSizeMedium & 3;// 3
static +styleFontSizeSmall: Class<MSHTML$_styleFontSize__styleFontSizeSmall> & MSHTML$_styleFontSize__styleFontSizeSmall & 2;// 2
static +styleFontSizeSmaller: Class<MSHTML$_styleFontSize__styleFontSizeSmaller> & MSHTML$_styleFontSize__styleFontSizeSmaller & 7;// 7
static +styleFontSizeXLarge: Class<MSHTML$_styleFontSize__styleFontSizeXLarge> & MSHTML$_styleFontSize__styleFontSizeXLarge & 5;// 5
static +styleFontSizeXSmall: Class<MSHTML$_styleFontSize__styleFontSizeXSmall> & MSHTML$_styleFontSize__styleFontSizeXSmall & 1;// 1
static +styleFontSizeXXLarge: Class<MSHTML$_styleFontSize__styleFontSizeXXLarge> & MSHTML$_styleFontSize__styleFontSizeXXLarge & 6;// 6
static +styleFontSizeXXSmall: Class<MSHTML$_styleFontSize__styleFontSizeXXSmall> & MSHTML$_styleFontSize__styleFontSizeXXSmall & 0;// 0

}

declare class MSHTML$_styleFontSize__styleFontSize_Max mixins MSHTML$_styleFontSize {}
declare class MSHTML$_styleFontSize__styleFontSizeLarge mixins MSHTML$_styleFontSize {}
declare class MSHTML$_styleFontSize__styleFontSizeLarger mixins MSHTML$_styleFontSize {}
declare class MSHTML$_styleFontSize__styleFontSizeMedium mixins MSHTML$_styleFontSize {}
declare class MSHTML$_styleFontSize__styleFontSizeSmall mixins MSHTML$_styleFontSize {}
declare class MSHTML$_styleFontSize__styleFontSizeSmaller mixins MSHTML$_styleFontSize {}
declare class MSHTML$_styleFontSize__styleFontSizeXLarge mixins MSHTML$_styleFontSize {}
declare class MSHTML$_styleFontSize__styleFontSizeXSmall mixins MSHTML$_styleFontSize {}
declare class MSHTML$_styleFontSize__styleFontSizeXXLarge mixins MSHTML$_styleFontSize {}
declare class MSHTML$_styleFontSize__styleFontSizeXXSmall mixins MSHTML$_styleFontSize {}


declare  class MSHTML$_styleFontStretch {
  constructor(...args: empty): mixed;
static +styleFontStretch_Max: Class<MSHTML$_styleFontStretch__styleFontStretch_Max> & MSHTML$_styleFontStretch__styleFontStretch_Max & 2147483647;// 2147483647
static +styleFontStretchCondensed: Class<MSHTML$_styleFontStretch__styleFontStretchCondensed> & MSHTML$_styleFontStretch__styleFontStretchCondensed & 5;// 5
static +styleFontStretchExpanded: Class<MSHTML$_styleFontStretch__styleFontStretchExpanded> & MSHTML$_styleFontStretch__styleFontStretchExpanded & 9;// 9
static +styleFontStretchExtraCondensed: Class<MSHTML$_styleFontStretch__styleFontStretchExtraCondensed> & MSHTML$_styleFontStretch__styleFontStretchExtraCondensed & 4;// 4
static +styleFontStretchExtraExpanded: Class<MSHTML$_styleFontStretch__styleFontStretchExtraExpanded> & MSHTML$_styleFontStretch__styleFontStretchExtraExpanded & 10;// 10
static +styleFontStretchNarrower: Class<MSHTML$_styleFontStretch__styleFontStretchNarrower> & MSHTML$_styleFontStretch__styleFontStretchNarrower & 2;// 2
static +styleFontStretchNormal: Class<MSHTML$_styleFontStretch__styleFontStretchNormal> & MSHTML$_styleFontStretch__styleFontStretchNormal & 7;// 7
static +styleFontStretchNotSet: Class<MSHTML$_styleFontStretch__styleFontStretchNotSet> & MSHTML$_styleFontStretch__styleFontStretchNotSet & 0;// 0
static +styleFontStretchSemiCondensed: Class<MSHTML$_styleFontStretch__styleFontStretchSemiCondensed> & MSHTML$_styleFontStretch__styleFontStretchSemiCondensed & 6;// 6
static +styleFontStretchSemiExpanded: Class<MSHTML$_styleFontStretch__styleFontStretchSemiExpanded> & MSHTML$_styleFontStretch__styleFontStretchSemiExpanded & 8;// 8
static +styleFontStretchUltraCondensed: Class<MSHTML$_styleFontStretch__styleFontStretchUltraCondensed> & MSHTML$_styleFontStretch__styleFontStretchUltraCondensed & 3;// 3
static +styleFontStretchUltraExpanded: Class<MSHTML$_styleFontStretch__styleFontStretchUltraExpanded> & MSHTML$_styleFontStretch__styleFontStretchUltraExpanded & 11;// 11
static +styleFontStretchWider: Class<MSHTML$_styleFontStretch__styleFontStretchWider> & MSHTML$_styleFontStretch__styleFontStretchWider & 1;// 1

}

declare class MSHTML$_styleFontStretch__styleFontStretch_Max mixins MSHTML$_styleFontStretch {}
declare class MSHTML$_styleFontStretch__styleFontStretchCondensed mixins MSHTML$_styleFontStretch {}
declare class MSHTML$_styleFontStretch__styleFontStretchExpanded mixins MSHTML$_styleFontStretch {}
declare class MSHTML$_styleFontStretch__styleFontStretchExtraCondensed mixins MSHTML$_styleFontStretch {}
declare class MSHTML$_styleFontStretch__styleFontStretchExtraExpanded mixins MSHTML$_styleFontStretch {}
declare class MSHTML$_styleFontStretch__styleFontStretchNarrower mixins MSHTML$_styleFontStretch {}
declare class MSHTML$_styleFontStretch__styleFontStretchNormal mixins MSHTML$_styleFontStretch {}
declare class MSHTML$_styleFontStretch__styleFontStretchNotSet mixins MSHTML$_styleFontStretch {}
declare class MSHTML$_styleFontStretch__styleFontStretchSemiCondensed mixins MSHTML$_styleFontStretch {}
declare class MSHTML$_styleFontStretch__styleFontStretchSemiExpanded mixins MSHTML$_styleFontStretch {}
declare class MSHTML$_styleFontStretch__styleFontStretchUltraCondensed mixins MSHTML$_styleFontStretch {}
declare class MSHTML$_styleFontStretch__styleFontStretchUltraExpanded mixins MSHTML$_styleFontStretch {}
declare class MSHTML$_styleFontStretch__styleFontStretchWider mixins MSHTML$_styleFontStretch {}


declare  class MSHTML$_styleFontStyle {
  constructor(...args: empty): mixed;
static +styleFontStyle_Max: Class<MSHTML$_styleFontStyle__styleFontStyle_Max> & MSHTML$_styleFontStyle__styleFontStyle_Max & 2147483647;// 2147483647
static +styleFontStyleItalic: Class<MSHTML$_styleFontStyle__styleFontStyleItalic> & MSHTML$_styleFontStyle__styleFontStyleItalic & 1;// 1
static +styleFontStyleNormal: Class<MSHTML$_styleFontStyle__styleFontStyleNormal> & MSHTML$_styleFontStyle__styleFontStyleNormal & 3;// 3
static +styleFontStyleNotSet: Class<MSHTML$_styleFontStyle__styleFontStyleNotSet> & MSHTML$_styleFontStyle__styleFontStyleNotSet & 0;// 0
static +styleFontStyleOblique: Class<MSHTML$_styleFontStyle__styleFontStyleOblique> & MSHTML$_styleFontStyle__styleFontStyleOblique & 2;// 2

}

declare class MSHTML$_styleFontStyle__styleFontStyle_Max mixins MSHTML$_styleFontStyle {}
declare class MSHTML$_styleFontStyle__styleFontStyleItalic mixins MSHTML$_styleFontStyle {}
declare class MSHTML$_styleFontStyle__styleFontStyleNormal mixins MSHTML$_styleFontStyle {}
declare class MSHTML$_styleFontStyle__styleFontStyleNotSet mixins MSHTML$_styleFontStyle {}
declare class MSHTML$_styleFontStyle__styleFontStyleOblique mixins MSHTML$_styleFontStyle {}


declare  class MSHTML$_styleFontVariant {
  constructor(...args: empty): mixed;
static +styleFontVariant_Max: Class<MSHTML$_styleFontVariant__styleFontVariant_Max> & MSHTML$_styleFontVariant__styleFontVariant_Max & 2147483647;// 2147483647
static +styleFontVariantNormal: Class<MSHTML$_styleFontVariant__styleFontVariantNormal> & MSHTML$_styleFontVariant__styleFontVariantNormal & 2;// 2
static +styleFontVariantNotSet: Class<MSHTML$_styleFontVariant__styleFontVariantNotSet> & MSHTML$_styleFontVariant__styleFontVariantNotSet & 0;// 0
static +styleFontVariantSmallCaps: Class<MSHTML$_styleFontVariant__styleFontVariantSmallCaps> & MSHTML$_styleFontVariant__styleFontVariantSmallCaps & 1;// 1

}

declare class MSHTML$_styleFontVariant__styleFontVariant_Max mixins MSHTML$_styleFontVariant {}
declare class MSHTML$_styleFontVariant__styleFontVariantNormal mixins MSHTML$_styleFontVariant {}
declare class MSHTML$_styleFontVariant__styleFontVariantNotSet mixins MSHTML$_styleFontVariant {}
declare class MSHTML$_styleFontVariant__styleFontVariantSmallCaps mixins MSHTML$_styleFontVariant {}


declare  class MSHTML$_styleFontWeight {
  constructor(...args: empty): mixed;
static +styleFontWeight_Max: Class<MSHTML$_styleFontWeight__styleFontWeight_Max> & MSHTML$_styleFontWeight__styleFontWeight_Max & 2147483647;// 2147483647
static +styleFontWeight100: Class<MSHTML$_styleFontWeight__styleFontWeight100> & MSHTML$_styleFontWeight__styleFontWeight100 & 1;// 1
static +styleFontWeight200: Class<MSHTML$_styleFontWeight__styleFontWeight200> & MSHTML$_styleFontWeight__styleFontWeight200 & 2;// 2
static +styleFontWeight300: Class<MSHTML$_styleFontWeight__styleFontWeight300> & MSHTML$_styleFontWeight__styleFontWeight300 & 3;// 3
static +styleFontWeight400: Class<MSHTML$_styleFontWeight__styleFontWeight400> & MSHTML$_styleFontWeight__styleFontWeight400 & 4;// 4
static +styleFontWeight500: Class<MSHTML$_styleFontWeight__styleFontWeight500> & MSHTML$_styleFontWeight__styleFontWeight500 & 5;// 5
static +styleFontWeight600: Class<MSHTML$_styleFontWeight__styleFontWeight600> & MSHTML$_styleFontWeight__styleFontWeight600 & 6;// 6
static +styleFontWeight700: Class<MSHTML$_styleFontWeight__styleFontWeight700> & MSHTML$_styleFontWeight__styleFontWeight700 & 7;// 7
static +styleFontWeight800: Class<MSHTML$_styleFontWeight__styleFontWeight800> & MSHTML$_styleFontWeight__styleFontWeight800 & 8;// 8
static +styleFontWeight900: Class<MSHTML$_styleFontWeight__styleFontWeight900> & MSHTML$_styleFontWeight__styleFontWeight900 & 9;// 9
static +styleFontWeightBold: Class<MSHTML$_styleFontWeight__styleFontWeightBold> & MSHTML$_styleFontWeight__styleFontWeightBold & 11;// 11
static +styleFontWeightBolder: Class<MSHTML$_styleFontWeight__styleFontWeightBolder> & MSHTML$_styleFontWeight__styleFontWeightBolder & 12;// 12
static +styleFontWeightLighter: Class<MSHTML$_styleFontWeight__styleFontWeightLighter> & MSHTML$_styleFontWeight__styleFontWeightLighter & 13;// 13
static +styleFontWeightNormal: Class<MSHTML$_styleFontWeight__styleFontWeightNormal> & MSHTML$_styleFontWeight__styleFontWeightNormal & 10;// 10
static +styleFontWeightNotSet: Class<MSHTML$_styleFontWeight__styleFontWeightNotSet> & MSHTML$_styleFontWeight__styleFontWeightNotSet & 0;// 0

}

declare class MSHTML$_styleFontWeight__styleFontWeight_Max mixins MSHTML$_styleFontWeight {}
declare class MSHTML$_styleFontWeight__styleFontWeight100 mixins MSHTML$_styleFontWeight {}
declare class MSHTML$_styleFontWeight__styleFontWeight200 mixins MSHTML$_styleFontWeight {}
declare class MSHTML$_styleFontWeight__styleFontWeight300 mixins MSHTML$_styleFontWeight {}
declare class MSHTML$_styleFontWeight__styleFontWeight400 mixins MSHTML$_styleFontWeight {}
declare class MSHTML$_styleFontWeight__styleFontWeight500 mixins MSHTML$_styleFontWeight {}
declare class MSHTML$_styleFontWeight__styleFontWeight600 mixins MSHTML$_styleFontWeight {}
declare class MSHTML$_styleFontWeight__styleFontWeight700 mixins MSHTML$_styleFontWeight {}
declare class MSHTML$_styleFontWeight__styleFontWeight800 mixins MSHTML$_styleFontWeight {}
declare class MSHTML$_styleFontWeight__styleFontWeight900 mixins MSHTML$_styleFontWeight {}
declare class MSHTML$_styleFontWeight__styleFontWeightBold mixins MSHTML$_styleFontWeight {}
declare class MSHTML$_styleFontWeight__styleFontWeightBolder mixins MSHTML$_styleFontWeight {}
declare class MSHTML$_styleFontWeight__styleFontWeightLighter mixins MSHTML$_styleFontWeight {}
declare class MSHTML$_styleFontWeight__styleFontWeightNormal mixins MSHTML$_styleFontWeight {}
declare class MSHTML$_styleFontWeight__styleFontWeightNotSet mixins MSHTML$_styleFontWeight {}


declare  class MSHTML$_styleGridColumn {
  constructor(...args: empty): mixed;
static +styleGridColumn_Max: Class<MSHTML$_styleGridColumn__styleGridColumn_Max> & MSHTML$_styleGridColumn__styleGridColumn_Max & 2147483647;// 2147483647
static +styleGridColumnNotSet: Class<MSHTML$_styleGridColumn__styleGridColumnNotSet> & MSHTML$_styleGridColumn__styleGridColumnNotSet & 0;// 0

}

declare class MSHTML$_styleGridColumn__styleGridColumn_Max mixins MSHTML$_styleGridColumn {}
declare class MSHTML$_styleGridColumn__styleGridColumnNotSet mixins MSHTML$_styleGridColumn {}


declare  class MSHTML$_styleGridColumnAlign {
  constructor(...args: empty): mixed;
static +styleGridColumnAlign_Max: Class<MSHTML$_styleGridColumnAlign__styleGridColumnAlign_Max> & MSHTML$_styleGridColumnAlign__styleGridColumnAlign_Max & 2147483647;// 2147483647
static +styleGridColumnAlignCenter: Class<MSHTML$_styleGridColumnAlign__styleGridColumnAlignCenter> & MSHTML$_styleGridColumnAlign__styleGridColumnAlignCenter & 0;// 0
static +styleGridColumnAlignEnd: Class<MSHTML$_styleGridColumnAlign__styleGridColumnAlignEnd> & MSHTML$_styleGridColumnAlign__styleGridColumnAlignEnd & 1;// 1
static +styleGridColumnAlignNotSet: Class<MSHTML$_styleGridColumnAlign__styleGridColumnAlignNotSet> & MSHTML$_styleGridColumnAlign__styleGridColumnAlignNotSet & 4;// 4
static +styleGridColumnAlignStart: Class<MSHTML$_styleGridColumnAlign__styleGridColumnAlignStart> & MSHTML$_styleGridColumnAlign__styleGridColumnAlignStart & 2;// 2
static +styleGridColumnAlignStretch: Class<MSHTML$_styleGridColumnAlign__styleGridColumnAlignStretch> & MSHTML$_styleGridColumnAlign__styleGridColumnAlignStretch & 3;// 3

}

declare class MSHTML$_styleGridColumnAlign__styleGridColumnAlign_Max mixins MSHTML$_styleGridColumnAlign {}
declare class MSHTML$_styleGridColumnAlign__styleGridColumnAlignCenter mixins MSHTML$_styleGridColumnAlign {}
declare class MSHTML$_styleGridColumnAlign__styleGridColumnAlignEnd mixins MSHTML$_styleGridColumnAlign {}
declare class MSHTML$_styleGridColumnAlign__styleGridColumnAlignNotSet mixins MSHTML$_styleGridColumnAlign {}
declare class MSHTML$_styleGridColumnAlign__styleGridColumnAlignStart mixins MSHTML$_styleGridColumnAlign {}
declare class MSHTML$_styleGridColumnAlign__styleGridColumnAlignStretch mixins MSHTML$_styleGridColumnAlign {}


declare  class MSHTML$_styleGridColumnSpan {
  constructor(...args: empty): mixed;
static +styleGridColumnSpan_Max: Class<MSHTML$_styleGridColumnSpan__styleGridColumnSpan_Max> & MSHTML$_styleGridColumnSpan__styleGridColumnSpan_Max & 2147483647;// 2147483647
static +styleGridColumnSpanNotSet: Class<MSHTML$_styleGridColumnSpan__styleGridColumnSpanNotSet> & MSHTML$_styleGridColumnSpan__styleGridColumnSpanNotSet & 0;// 0

}

declare class MSHTML$_styleGridColumnSpan__styleGridColumnSpan_Max mixins MSHTML$_styleGridColumnSpan {}
declare class MSHTML$_styleGridColumnSpan__styleGridColumnSpanNotSet mixins MSHTML$_styleGridColumnSpan {}


declare  class MSHTML$_styleGridRow {
  constructor(...args: empty): mixed;
static +styleGridRow_Max: Class<MSHTML$_styleGridRow__styleGridRow_Max> & MSHTML$_styleGridRow__styleGridRow_Max & 2147483647;// 2147483647
static +styleGridRowNotSet: Class<MSHTML$_styleGridRow__styleGridRowNotSet> & MSHTML$_styleGridRow__styleGridRowNotSet & 0;// 0

}

declare class MSHTML$_styleGridRow__styleGridRow_Max mixins MSHTML$_styleGridRow {}
declare class MSHTML$_styleGridRow__styleGridRowNotSet mixins MSHTML$_styleGridRow {}


declare  class MSHTML$_styleGridRowAlign {
  constructor(...args: empty): mixed;
static +styleGridRowAlign_Max: Class<MSHTML$_styleGridRowAlign__styleGridRowAlign_Max> & MSHTML$_styleGridRowAlign__styleGridRowAlign_Max & 2147483647;// 2147483647
static +styleGridRowAlignCenter: Class<MSHTML$_styleGridRowAlign__styleGridRowAlignCenter> & MSHTML$_styleGridRowAlign__styleGridRowAlignCenter & 0;// 0
static +styleGridRowAlignEnd: Class<MSHTML$_styleGridRowAlign__styleGridRowAlignEnd> & MSHTML$_styleGridRowAlign__styleGridRowAlignEnd & 1;// 1
static +styleGridRowAlignNotSet: Class<MSHTML$_styleGridRowAlign__styleGridRowAlignNotSet> & MSHTML$_styleGridRowAlign__styleGridRowAlignNotSet & 4;// 4
static +styleGridRowAlignStart: Class<MSHTML$_styleGridRowAlign__styleGridRowAlignStart> & MSHTML$_styleGridRowAlign__styleGridRowAlignStart & 2;// 2
static +styleGridRowAlignStretch: Class<MSHTML$_styleGridRowAlign__styleGridRowAlignStretch> & MSHTML$_styleGridRowAlign__styleGridRowAlignStretch & 3;// 3

}

declare class MSHTML$_styleGridRowAlign__styleGridRowAlign_Max mixins MSHTML$_styleGridRowAlign {}
declare class MSHTML$_styleGridRowAlign__styleGridRowAlignCenter mixins MSHTML$_styleGridRowAlign {}
declare class MSHTML$_styleGridRowAlign__styleGridRowAlignEnd mixins MSHTML$_styleGridRowAlign {}
declare class MSHTML$_styleGridRowAlign__styleGridRowAlignNotSet mixins MSHTML$_styleGridRowAlign {}
declare class MSHTML$_styleGridRowAlign__styleGridRowAlignStart mixins MSHTML$_styleGridRowAlign {}
declare class MSHTML$_styleGridRowAlign__styleGridRowAlignStretch mixins MSHTML$_styleGridRowAlign {}


declare  class MSHTML$_styleGridRowSpan {
  constructor(...args: empty): mixed;
static +styleGridRowSpan_Max: Class<MSHTML$_styleGridRowSpan__styleGridRowSpan_Max> & MSHTML$_styleGridRowSpan__styleGridRowSpan_Max & 2147483647;// 2147483647
static +styleGridRowSpanNotSet: Class<MSHTML$_styleGridRowSpan__styleGridRowSpanNotSet> & MSHTML$_styleGridRowSpan__styleGridRowSpanNotSet & 0;// 0

}

declare class MSHTML$_styleGridRowSpan__styleGridRowSpan_Max mixins MSHTML$_styleGridRowSpan {}
declare class MSHTML$_styleGridRowSpan__styleGridRowSpanNotSet mixins MSHTML$_styleGridRowSpan {}


declare  class MSHTML$_styleHyphenateLimitLines {
  constructor(...args: empty): mixed;
static +styleHyphenateLimitLines_Max: Class<MSHTML$_styleHyphenateLimitLines__styleHyphenateLimitLines_Max> & MSHTML$_styleHyphenateLimitLines__styleHyphenateLimitLines_Max & 2147483647;// 2147483647
static +styleHyphenateLimitLinesNoLimit: Class<MSHTML$_styleHyphenateLimitLines__styleHyphenateLimitLinesNoLimit> & MSHTML$_styleHyphenateLimitLines__styleHyphenateLimitLinesNoLimit & 0;// 0

}

declare class MSHTML$_styleHyphenateLimitLines__styleHyphenateLimitLines_Max mixins MSHTML$_styleHyphenateLimitLines {}
declare class MSHTML$_styleHyphenateLimitLines__styleHyphenateLimitLinesNoLimit mixins MSHTML$_styleHyphenateLimitLines {}


declare  class MSHTML$_styleHyphens {
  constructor(...args: empty): mixed;
static +styleHyphens_Max: Class<MSHTML$_styleHyphens__styleHyphens_Max> & MSHTML$_styleHyphens__styleHyphens_Max & 2147483647;// 2147483647
static +styleHyphensAuto: Class<MSHTML$_styleHyphens__styleHyphensAuto> & MSHTML$_styleHyphens__styleHyphensAuto & 2;// 2
static +styleHyphensManual: Class<MSHTML$_styleHyphens__styleHyphensManual> & MSHTML$_styleHyphens__styleHyphensManual & 1;// 1
static +styleHyphensNone: Class<MSHTML$_styleHyphens__styleHyphensNone> & MSHTML$_styleHyphens__styleHyphensNone & 0;// 0
static +styleHyphensNotSet: Class<MSHTML$_styleHyphens__styleHyphensNotSet> & MSHTML$_styleHyphens__styleHyphensNotSet & 3;// 3

}

declare class MSHTML$_styleHyphens__styleHyphens_Max mixins MSHTML$_styleHyphens {}
declare class MSHTML$_styleHyphens__styleHyphensAuto mixins MSHTML$_styleHyphens {}
declare class MSHTML$_styleHyphens__styleHyphensManual mixins MSHTML$_styleHyphens {}
declare class MSHTML$_styleHyphens__styleHyphensNone mixins MSHTML$_styleHyphens {}
declare class MSHTML$_styleHyphens__styleHyphensNotSet mixins MSHTML$_styleHyphens {}


declare  class MSHTML$_styleImeMode {
  constructor(...args: empty): mixed;
static +styleImeMode_Max: Class<MSHTML$_styleImeMode__styleImeMode_Max> & MSHTML$_styleImeMode__styleImeMode_Max & 2147483647;// 2147483647
static +styleImeModeActive: Class<MSHTML$_styleImeMode__styleImeModeActive> & MSHTML$_styleImeMode__styleImeModeActive & 1;// 1
static +styleImeModeAuto: Class<MSHTML$_styleImeMode__styleImeModeAuto> & MSHTML$_styleImeMode__styleImeModeAuto & 0;// 0
static +styleImeModeDisabled: Class<MSHTML$_styleImeMode__styleImeModeDisabled> & MSHTML$_styleImeMode__styleImeModeDisabled & 3;// 3
static +styleImeModeInactive: Class<MSHTML$_styleImeMode__styleImeModeInactive> & MSHTML$_styleImeMode__styleImeModeInactive & 2;// 2
static +styleImeModeNotSet: Class<MSHTML$_styleImeMode__styleImeModeNotSet> & MSHTML$_styleImeMode__styleImeModeNotSet & 4;// 4

}

declare class MSHTML$_styleImeMode__styleImeMode_Max mixins MSHTML$_styleImeMode {}
declare class MSHTML$_styleImeMode__styleImeModeActive mixins MSHTML$_styleImeMode {}
declare class MSHTML$_styleImeMode__styleImeModeAuto mixins MSHTML$_styleImeMode {}
declare class MSHTML$_styleImeMode__styleImeModeDisabled mixins MSHTML$_styleImeMode {}
declare class MSHTML$_styleImeMode__styleImeModeInactive mixins MSHTML$_styleImeMode {}
declare class MSHTML$_styleImeMode__styleImeModeNotSet mixins MSHTML$_styleImeMode {}


declare  class MSHTML$_styleInitialColor {
  constructor(...args: empty): mixed;
static +styleInitialColor_Max: Class<MSHTML$_styleInitialColor__styleInitialColor_Max> & MSHTML$_styleInitialColor__styleInitialColor_Max & 2147483647;// 2147483647
static +styleInitialColorColorProperty: Class<MSHTML$_styleInitialColor__styleInitialColorColorProperty> & MSHTML$_styleInitialColor__styleInitialColorColorProperty & 1;// 1
static +styleInitialColorInvert: Class<MSHTML$_styleInitialColor__styleInitialColorInvert> & MSHTML$_styleInitialColor__styleInitialColorInvert & 3;// 3
static +styleInitialColorNoInitial: Class<MSHTML$_styleInitialColor__styleInitialColorNoInitial> & MSHTML$_styleInitialColor__styleInitialColorNoInitial & 0;// 0
static +styleInitialColorTransparent: Class<MSHTML$_styleInitialColor__styleInitialColorTransparent> & MSHTML$_styleInitialColor__styleInitialColorTransparent & 2;// 2

}

declare class MSHTML$_styleInitialColor__styleInitialColor_Max mixins MSHTML$_styleInitialColor {}
declare class MSHTML$_styleInitialColor__styleInitialColorColorProperty mixins MSHTML$_styleInitialColor {}
declare class MSHTML$_styleInitialColor__styleInitialColorInvert mixins MSHTML$_styleInitialColor {}
declare class MSHTML$_styleInitialColor__styleInitialColorNoInitial mixins MSHTML$_styleInitialColor {}
declare class MSHTML$_styleInitialColor__styleInitialColorTransparent mixins MSHTML$_styleInitialColor {}


declare  class MSHTML$_styleInitialString {
  constructor(...args: empty): mixed;
static +styleInitialString_Max: Class<MSHTML$_styleInitialString__styleInitialString_Max> & MSHTML$_styleInitialString__styleInitialString_Max & 2147483647;// 2147483647
static +styleInitialStringAuto: Class<MSHTML$_styleInitialString__styleInitialStringAuto> & MSHTML$_styleInitialString__styleInitialStringAuto & 2;// 2
static +styleInitialStringNoInitial: Class<MSHTML$_styleInitialString__styleInitialStringNoInitial> & MSHTML$_styleInitialString__styleInitialStringNoInitial & 0;// 0
static +styleInitialStringNone: Class<MSHTML$_styleInitialString__styleInitialStringNone> & MSHTML$_styleInitialString__styleInitialStringNone & 1;// 1
static +styleInitialStringNormal: Class<MSHTML$_styleInitialString__styleInitialStringNormal> & MSHTML$_styleInitialString__styleInitialStringNormal & 3;// 3

}

declare class MSHTML$_styleInitialString__styleInitialString_Max mixins MSHTML$_styleInitialString {}
declare class MSHTML$_styleInitialString__styleInitialStringAuto mixins MSHTML$_styleInitialString {}
declare class MSHTML$_styleInitialString__styleInitialStringNoInitial mixins MSHTML$_styleInitialString {}
declare class MSHTML$_styleInitialString__styleInitialStringNone mixins MSHTML$_styleInitialString {}
declare class MSHTML$_styleInitialString__styleInitialStringNormal mixins MSHTML$_styleInitialString {}


declare  class MSHTML$_styleInterpolation {
  constructor(...args: empty): mixed;
static +styleInterpolation_Max: Class<MSHTML$_styleInterpolation__styleInterpolation_Max> & MSHTML$_styleInterpolation__styleInterpolation_Max & 2147483647;// 2147483647
static +styleInterpolationBCH: Class<MSHTML$_styleInterpolation__styleInterpolationBCH> & MSHTML$_styleInterpolation__styleInterpolationBCH & 2;// 2
static +styleInterpolationNN: Class<MSHTML$_styleInterpolation__styleInterpolationNN> & MSHTML$_styleInterpolation__styleInterpolationNN & 1;// 1
static +styleInterpolationNotSet: Class<MSHTML$_styleInterpolation__styleInterpolationNotSet> & MSHTML$_styleInterpolation__styleInterpolationNotSet & 0;// 0

}

declare class MSHTML$_styleInterpolation__styleInterpolation_Max mixins MSHTML$_styleInterpolation {}
declare class MSHTML$_styleInterpolation__styleInterpolationBCH mixins MSHTML$_styleInterpolation {}
declare class MSHTML$_styleInterpolation__styleInterpolationNN mixins MSHTML$_styleInterpolation {}
declare class MSHTML$_styleInterpolation__styleInterpolationNotSet mixins MSHTML$_styleInterpolation {}


declare  class MSHTML$_styleJustifyContent {
  constructor(...args: empty): mixed;
static +styleJustifyContent_Max: Class<MSHTML$_styleJustifyContent__styleJustifyContent_Max> & MSHTML$_styleJustifyContent__styleJustifyContent_Max & 2147483647;// 2147483647
static +styleJustifyContentCenter: Class<MSHTML$_styleJustifyContent__styleJustifyContentCenter> & MSHTML$_styleJustifyContent__styleJustifyContentCenter & 2;// 2
static +styleJustifyContentFlexEnd: Class<MSHTML$_styleJustifyContent__styleJustifyContentFlexEnd> & MSHTML$_styleJustifyContent__styleJustifyContentFlexEnd & 1;// 1
static +styleJustifyContentFlexStart: Class<MSHTML$_styleJustifyContent__styleJustifyContentFlexStart> & MSHTML$_styleJustifyContent__styleJustifyContentFlexStart & 0;// 0
static +styleJustifyContentNotSet: Class<MSHTML$_styleJustifyContent__styleJustifyContentNotSet> & MSHTML$_styleJustifyContent__styleJustifyContentNotSet & 5;// 5
static +styleJustifyContentSpaceAround: Class<MSHTML$_styleJustifyContent__styleJustifyContentSpaceAround> & MSHTML$_styleJustifyContent__styleJustifyContentSpaceAround & 4;// 4
static +styleJustifyContentSpaceBetween: Class<MSHTML$_styleJustifyContent__styleJustifyContentSpaceBetween> & MSHTML$_styleJustifyContent__styleJustifyContentSpaceBetween & 3;// 3

}

declare class MSHTML$_styleJustifyContent__styleJustifyContent_Max mixins MSHTML$_styleJustifyContent {}
declare class MSHTML$_styleJustifyContent__styleJustifyContentCenter mixins MSHTML$_styleJustifyContent {}
declare class MSHTML$_styleJustifyContent__styleJustifyContentFlexEnd mixins MSHTML$_styleJustifyContent {}
declare class MSHTML$_styleJustifyContent__styleJustifyContentFlexStart mixins MSHTML$_styleJustifyContent {}
declare class MSHTML$_styleJustifyContent__styleJustifyContentNotSet mixins MSHTML$_styleJustifyContent {}
declare class MSHTML$_styleJustifyContent__styleJustifyContentSpaceAround mixins MSHTML$_styleJustifyContent {}
declare class MSHTML$_styleJustifyContent__styleJustifyContentSpaceBetween mixins MSHTML$_styleJustifyContent {}


declare  class MSHTML$_styleLayoutFlow {
  constructor(...args: empty): mixed;
static +styleLayoutFlow_Max: Class<MSHTML$_styleLayoutFlow__styleLayoutFlow_Max> & MSHTML$_styleLayoutFlow__styleLayoutFlow_Max & 2147483647;// 2147483647
static +styleLayoutFlowHorizontal: Class<MSHTML$_styleLayoutFlow__styleLayoutFlowHorizontal> & MSHTML$_styleLayoutFlow__styleLayoutFlowHorizontal & 0;// 0
static +styleLayoutFlowNotSet: Class<MSHTML$_styleLayoutFlow__styleLayoutFlowNotSet> & MSHTML$_styleLayoutFlow__styleLayoutFlowNotSet & 2;// 2
static +styleLayoutFlowVerticalIdeographic: Class<MSHTML$_styleLayoutFlow__styleLayoutFlowVerticalIdeographic> & MSHTML$_styleLayoutFlow__styleLayoutFlowVerticalIdeographic & 1;// 1

}

declare class MSHTML$_styleLayoutFlow__styleLayoutFlow_Max mixins MSHTML$_styleLayoutFlow {}
declare class MSHTML$_styleLayoutFlow__styleLayoutFlowHorizontal mixins MSHTML$_styleLayoutFlow {}
declare class MSHTML$_styleLayoutFlow__styleLayoutFlowNotSet mixins MSHTML$_styleLayoutFlow {}
declare class MSHTML$_styleLayoutFlow__styleLayoutFlowVerticalIdeographic mixins MSHTML$_styleLayoutFlow {}


declare  class MSHTML$_styleLayoutGridChar {
  constructor(...args: empty): mixed;
static +styleLayoutGridChar_Max: Class<MSHTML$_styleLayoutGridChar__styleLayoutGridChar_Max> & MSHTML$_styleLayoutGridChar__styleLayoutGridChar_Max & 2147483647;// 2147483647
static +styleLayoutGridCharAuto: Class<MSHTML$_styleLayoutGridChar__styleLayoutGridCharAuto> & MSHTML$_styleLayoutGridChar__styleLayoutGridCharAuto & 1;// 1
static +styleLayoutGridCharNone: Class<MSHTML$_styleLayoutGridChar__styleLayoutGridCharNone> & MSHTML$_styleLayoutGridChar__styleLayoutGridCharNone & 2;// 2
static +styleLayoutGridCharNotSet: Class<MSHTML$_styleLayoutGridChar__styleLayoutGridCharNotSet> & MSHTML$_styleLayoutGridChar__styleLayoutGridCharNotSet & 0;// 0

}

declare class MSHTML$_styleLayoutGridChar__styleLayoutGridChar_Max mixins MSHTML$_styleLayoutGridChar {}
declare class MSHTML$_styleLayoutGridChar__styleLayoutGridCharAuto mixins MSHTML$_styleLayoutGridChar {}
declare class MSHTML$_styleLayoutGridChar__styleLayoutGridCharNone mixins MSHTML$_styleLayoutGridChar {}
declare class MSHTML$_styleLayoutGridChar__styleLayoutGridCharNotSet mixins MSHTML$_styleLayoutGridChar {}


declare  class MSHTML$_styleLayoutGridLine {
  constructor(...args: empty): mixed;
static +styleLayoutGridLine_Max: Class<MSHTML$_styleLayoutGridLine__styleLayoutGridLine_Max> & MSHTML$_styleLayoutGridLine__styleLayoutGridLine_Max & 2147483647;// 2147483647
static +styleLayoutGridLineAuto: Class<MSHTML$_styleLayoutGridLine__styleLayoutGridLineAuto> & MSHTML$_styleLayoutGridLine__styleLayoutGridLineAuto & 1;// 1
static +styleLayoutGridLineNone: Class<MSHTML$_styleLayoutGridLine__styleLayoutGridLineNone> & MSHTML$_styleLayoutGridLine__styleLayoutGridLineNone & 2;// 2
static +styleLayoutGridLineNotSet: Class<MSHTML$_styleLayoutGridLine__styleLayoutGridLineNotSet> & MSHTML$_styleLayoutGridLine__styleLayoutGridLineNotSet & 0;// 0

}

declare class MSHTML$_styleLayoutGridLine__styleLayoutGridLine_Max mixins MSHTML$_styleLayoutGridLine {}
declare class MSHTML$_styleLayoutGridLine__styleLayoutGridLineAuto mixins MSHTML$_styleLayoutGridLine {}
declare class MSHTML$_styleLayoutGridLine__styleLayoutGridLineNone mixins MSHTML$_styleLayoutGridLine {}
declare class MSHTML$_styleLayoutGridLine__styleLayoutGridLineNotSet mixins MSHTML$_styleLayoutGridLine {}


declare  class MSHTML$_styleLayoutGridMode {
  constructor(...args: empty): mixed;
static +styleLayoutGridMode_Max: Class<MSHTML$_styleLayoutGridMode__styleLayoutGridMode_Max> & MSHTML$_styleLayoutGridMode__styleLayoutGridMode_Max & 2147483647;// 2147483647
static +styleLayoutGridModeBoth: Class<MSHTML$_styleLayoutGridMode__styleLayoutGridModeBoth> & MSHTML$_styleLayoutGridMode__styleLayoutGridModeBoth & 3;// 3
static +styleLayoutGridModeChar: Class<MSHTML$_styleLayoutGridMode__styleLayoutGridModeChar> & MSHTML$_styleLayoutGridMode__styleLayoutGridModeChar & 1;// 1
static +styleLayoutGridModeLine: Class<MSHTML$_styleLayoutGridMode__styleLayoutGridModeLine> & MSHTML$_styleLayoutGridMode__styleLayoutGridModeLine & 2;// 2
static +styleLayoutGridModeNone: Class<MSHTML$_styleLayoutGridMode__styleLayoutGridModeNone> & MSHTML$_styleLayoutGridMode__styleLayoutGridModeNone & 4;// 4
static +styleLayoutGridModeNotSet: Class<MSHTML$_styleLayoutGridMode__styleLayoutGridModeNotSet> & MSHTML$_styleLayoutGridMode__styleLayoutGridModeNotSet & 0;// 0

}

declare class MSHTML$_styleLayoutGridMode__styleLayoutGridMode_Max mixins MSHTML$_styleLayoutGridMode {}
declare class MSHTML$_styleLayoutGridMode__styleLayoutGridModeBoth mixins MSHTML$_styleLayoutGridMode {}
declare class MSHTML$_styleLayoutGridMode__styleLayoutGridModeChar mixins MSHTML$_styleLayoutGridMode {}
declare class MSHTML$_styleLayoutGridMode__styleLayoutGridModeLine mixins MSHTML$_styleLayoutGridMode {}
declare class MSHTML$_styleLayoutGridMode__styleLayoutGridModeNone mixins MSHTML$_styleLayoutGridMode {}
declare class MSHTML$_styleLayoutGridMode__styleLayoutGridModeNotSet mixins MSHTML$_styleLayoutGridMode {}


declare  class MSHTML$_styleLayoutGridType {
  constructor(...args: empty): mixed;
static +styleLayoutGridType_Max: Class<MSHTML$_styleLayoutGridType__styleLayoutGridType_Max> & MSHTML$_styleLayoutGridType__styleLayoutGridType_Max & 2147483647;// 2147483647
static +styleLayoutGridTypeFixed: Class<MSHTML$_styleLayoutGridType__styleLayoutGridTypeFixed> & MSHTML$_styleLayoutGridType__styleLayoutGridTypeFixed & 3;// 3
static +styleLayoutGridTypeLoose: Class<MSHTML$_styleLayoutGridType__styleLayoutGridTypeLoose> & MSHTML$_styleLayoutGridType__styleLayoutGridTypeLoose & 1;// 1
static +styleLayoutGridTypeNotSet: Class<MSHTML$_styleLayoutGridType__styleLayoutGridTypeNotSet> & MSHTML$_styleLayoutGridType__styleLayoutGridTypeNotSet & 0;// 0
static +styleLayoutGridTypeStrict: Class<MSHTML$_styleLayoutGridType__styleLayoutGridTypeStrict> & MSHTML$_styleLayoutGridType__styleLayoutGridTypeStrict & 2;// 2

}

declare class MSHTML$_styleLayoutGridType__styleLayoutGridType_Max mixins MSHTML$_styleLayoutGridType {}
declare class MSHTML$_styleLayoutGridType__styleLayoutGridTypeFixed mixins MSHTML$_styleLayoutGridType {}
declare class MSHTML$_styleLayoutGridType__styleLayoutGridTypeLoose mixins MSHTML$_styleLayoutGridType {}
declare class MSHTML$_styleLayoutGridType__styleLayoutGridTypeNotSet mixins MSHTML$_styleLayoutGridType {}
declare class MSHTML$_styleLayoutGridType__styleLayoutGridTypeStrict mixins MSHTML$_styleLayoutGridType {}


declare  class MSHTML$_styleLineBreak {
  constructor(...args: empty): mixed;
static +styleLineBreak_Max: Class<MSHTML$_styleLineBreak__styleLineBreak_Max> & MSHTML$_styleLineBreak__styleLineBreak_Max & 2147483647;// 2147483647
static +styleLineBreakNormal: Class<MSHTML$_styleLineBreak__styleLineBreakNormal> & MSHTML$_styleLineBreak__styleLineBreakNormal & 1;// 1
static +styleLineBreakNotSet: Class<MSHTML$_styleLineBreak__styleLineBreakNotSet> & MSHTML$_styleLineBreak__styleLineBreakNotSet & 0;// 0
static +styleLineBreakStrict: Class<MSHTML$_styleLineBreak__styleLineBreakStrict> & MSHTML$_styleLineBreak__styleLineBreakStrict & 2;// 2

}

declare class MSHTML$_styleLineBreak__styleLineBreak_Max mixins MSHTML$_styleLineBreak {}
declare class MSHTML$_styleLineBreak__styleLineBreakNormal mixins MSHTML$_styleLineBreak {}
declare class MSHTML$_styleLineBreak__styleLineBreakNotSet mixins MSHTML$_styleLineBreak {}
declare class MSHTML$_styleLineBreak__styleLineBreakStrict mixins MSHTML$_styleLineBreak {}


declare  class MSHTML$_styleListStylePosition {
  constructor(...args: empty): mixed;
static +styleListStylePosition_Max: Class<MSHTML$_styleListStylePosition__styleListStylePosition_Max> & MSHTML$_styleListStylePosition__styleListStylePosition_Max & 2147483647;// 2147483647
static +styleListStylePositionInside: Class<MSHTML$_styleListStylePosition__styleListStylePositionInside> & MSHTML$_styleListStylePosition__styleListStylePositionInside & 1;// 1
static +styleListStylePositionNotSet: Class<MSHTML$_styleListStylePosition__styleListStylePositionNotSet> & MSHTML$_styleListStylePosition__styleListStylePositionNotSet & 0;// 0
static +styleListStylePositionOutSide: Class<MSHTML$_styleListStylePosition__styleListStylePositionOutSide> & MSHTML$_styleListStylePosition__styleListStylePositionOutSide & 2;// 2

}

declare class MSHTML$_styleListStylePosition__styleListStylePosition_Max mixins MSHTML$_styleListStylePosition {}
declare class MSHTML$_styleListStylePosition__styleListStylePositionInside mixins MSHTML$_styleListStylePosition {}
declare class MSHTML$_styleListStylePosition__styleListStylePositionNotSet mixins MSHTML$_styleListStylePosition {}
declare class MSHTML$_styleListStylePosition__styleListStylePositionOutSide mixins MSHTML$_styleListStylePosition {}


declare  class MSHTML$_styleListStyleType {
  constructor(...args: empty): mixed;
static +styleListStyleType_Max: Class<MSHTML$_styleListStyleType__styleListStyleType_Max> & MSHTML$_styleListStyleType__styleListStyleType_Max & 2147483647;// 2147483647
static +styleListStyleTypeArmenian: Class<MSHTML$_styleListStyleType__styleListStyleTypeArmenian> & MSHTML$_styleListStyleType__styleListStyleTypeArmenian & 12;// 12
static +styleListStyleTypeCircle: Class<MSHTML$_styleListStyleType__styleListStyleTypeCircle> & MSHTML$_styleListStyleType__styleListStyleTypeCircle & 2;// 2
static +styleListStyleTypeDecimal: Class<MSHTML$_styleListStyleType__styleListStyleTypeDecimal> & MSHTML$_styleListStyleType__styleListStyleTypeDecimal & 4;// 4
static +styleListStyleTypeDecimalLeadingZero: Class<MSHTML$_styleListStyleType__styleListStyleTypeDecimalLeadingZero> & MSHTML$_styleListStyleType__styleListStyleTypeDecimalLeadingZero & 10;// 10
static +styleListStyleTypeDisc: Class<MSHTML$_styleListStyleType__styleListStyleTypeDisc> & MSHTML$_styleListStyleType__styleListStyleTypeDisc & 1;// 1
static +styleListStyleTypeGeorgian: Class<MSHTML$_styleListStyleType__styleListStyleTypeGeorgian> & MSHTML$_styleListStyleType__styleListStyleTypeGeorgian & 11;// 11
static +styleListStyleTypeLowerAlpha: Class<MSHTML$_styleListStyleType__styleListStyleTypeLowerAlpha> & MSHTML$_styleListStyleType__styleListStyleTypeLowerAlpha & 7;// 7
static +styleListStyleTypeLowerGreek: Class<MSHTML$_styleListStyleType__styleListStyleTypeLowerGreek> & MSHTML$_styleListStyleType__styleListStyleTypeLowerGreek & 16;// 16
static +styleListStyleTypeLowerLatin: Class<MSHTML$_styleListStyleType__styleListStyleTypeLowerLatin> & MSHTML$_styleListStyleType__styleListStyleTypeLowerLatin & 14;// 14
static +styleListStyleTypeLowerRoman: Class<MSHTML$_styleListStyleType__styleListStyleTypeLowerRoman> & MSHTML$_styleListStyleType__styleListStyleTypeLowerRoman & 5;// 5
static +styleListStyleTypeNone: Class<MSHTML$_styleListStyleType__styleListStyleTypeNone> & MSHTML$_styleListStyleType__styleListStyleTypeNone & 9;// 9
static +styleListStyleTypeNotSet: Class<MSHTML$_styleListStyleType__styleListStyleTypeNotSet> & MSHTML$_styleListStyleType__styleListStyleTypeNotSet & 0;// 0
static +styleListStyleTypeSquare: Class<MSHTML$_styleListStyleType__styleListStyleTypeSquare> & MSHTML$_styleListStyleType__styleListStyleTypeSquare & 3;// 3
static +styleListStyleTypeUpperAlpha: Class<MSHTML$_styleListStyleType__styleListStyleTypeUpperAlpha> & MSHTML$_styleListStyleType__styleListStyleTypeUpperAlpha & 8;// 8
static +styleListStyleTypeUpperGreek: Class<MSHTML$_styleListStyleType__styleListStyleTypeUpperGreek> & MSHTML$_styleListStyleType__styleListStyleTypeUpperGreek & 15;// 15
static +styleListStyleTypeUpperLatin: Class<MSHTML$_styleListStyleType__styleListStyleTypeUpperLatin> & MSHTML$_styleListStyleType__styleListStyleTypeUpperLatin & 13;// 13
static +styleListStyleTypeUpperRoman: Class<MSHTML$_styleListStyleType__styleListStyleTypeUpperRoman> & MSHTML$_styleListStyleType__styleListStyleTypeUpperRoman & 6;// 6

}

declare class MSHTML$_styleListStyleType__styleListStyleType_Max mixins MSHTML$_styleListStyleType {}
declare class MSHTML$_styleListStyleType__styleListStyleTypeArmenian mixins MSHTML$_styleListStyleType {}
declare class MSHTML$_styleListStyleType__styleListStyleTypeCircle mixins MSHTML$_styleListStyleType {}
declare class MSHTML$_styleListStyleType__styleListStyleTypeDecimal mixins MSHTML$_styleListStyleType {}
declare class MSHTML$_styleListStyleType__styleListStyleTypeDecimalLeadingZero mixins MSHTML$_styleListStyleType {}
declare class MSHTML$_styleListStyleType__styleListStyleTypeDisc mixins MSHTML$_styleListStyleType {}
declare class MSHTML$_styleListStyleType__styleListStyleTypeGeorgian mixins MSHTML$_styleListStyleType {}
declare class MSHTML$_styleListStyleType__styleListStyleTypeLowerAlpha mixins MSHTML$_styleListStyleType {}
declare class MSHTML$_styleListStyleType__styleListStyleTypeLowerGreek mixins MSHTML$_styleListStyleType {}
declare class MSHTML$_styleListStyleType__styleListStyleTypeLowerLatin mixins MSHTML$_styleListStyleType {}
declare class MSHTML$_styleListStyleType__styleListStyleTypeLowerRoman mixins MSHTML$_styleListStyleType {}
declare class MSHTML$_styleListStyleType__styleListStyleTypeNone mixins MSHTML$_styleListStyleType {}
declare class MSHTML$_styleListStyleType__styleListStyleTypeNotSet mixins MSHTML$_styleListStyleType {}
declare class MSHTML$_styleListStyleType__styleListStyleTypeSquare mixins MSHTML$_styleListStyleType {}
declare class MSHTML$_styleListStyleType__styleListStyleTypeUpperAlpha mixins MSHTML$_styleListStyleType {}
declare class MSHTML$_styleListStyleType__styleListStyleTypeUpperGreek mixins MSHTML$_styleListStyleType {}
declare class MSHTML$_styleListStyleType__styleListStyleTypeUpperLatin mixins MSHTML$_styleListStyleType {}
declare class MSHTML$_styleListStyleType__styleListStyleTypeUpperRoman mixins MSHTML$_styleListStyleType {}


declare  class MSHTML$_styleMsAnimationDirection {
  constructor(...args: empty): mixed;
static +styleMsAnimationDirection_Max: Class<MSHTML$_styleMsAnimationDirection__styleMsAnimationDirection_Max> & MSHTML$_styleMsAnimationDirection__styleMsAnimationDirection_Max & 2147483647;// 2147483647
static +styleMsAnimationDirectionAlternate: Class<MSHTML$_styleMsAnimationDirection__styleMsAnimationDirectionAlternate> & MSHTML$_styleMsAnimationDirection__styleMsAnimationDirectionAlternate & 1;// 1
static +styleMsAnimationDirectionAlternateReverse: Class<MSHTML$_styleMsAnimationDirection__styleMsAnimationDirectionAlternateReverse> & MSHTML$_styleMsAnimationDirection__styleMsAnimationDirectionAlternateReverse & 3;// 3
static +styleMsAnimationDirectionNormal: Class<MSHTML$_styleMsAnimationDirection__styleMsAnimationDirectionNormal> & MSHTML$_styleMsAnimationDirection__styleMsAnimationDirectionNormal & 0;// 0
static +styleMsAnimationDirectionNotSet: Class<MSHTML$_styleMsAnimationDirection__styleMsAnimationDirectionNotSet> & MSHTML$_styleMsAnimationDirection__styleMsAnimationDirectionNotSet & 4;// 4
static +styleMsAnimationDirectionReverse: Class<MSHTML$_styleMsAnimationDirection__styleMsAnimationDirectionReverse> & MSHTML$_styleMsAnimationDirection__styleMsAnimationDirectionReverse & 2;// 2

}

declare class MSHTML$_styleMsAnimationDirection__styleMsAnimationDirection_Max mixins MSHTML$_styleMsAnimationDirection {}
declare class MSHTML$_styleMsAnimationDirection__styleMsAnimationDirectionAlternate mixins MSHTML$_styleMsAnimationDirection {}
declare class MSHTML$_styleMsAnimationDirection__styleMsAnimationDirectionAlternateReverse mixins MSHTML$_styleMsAnimationDirection {}
declare class MSHTML$_styleMsAnimationDirection__styleMsAnimationDirectionNormal mixins MSHTML$_styleMsAnimationDirection {}
declare class MSHTML$_styleMsAnimationDirection__styleMsAnimationDirectionNotSet mixins MSHTML$_styleMsAnimationDirection {}
declare class MSHTML$_styleMsAnimationDirection__styleMsAnimationDirectionReverse mixins MSHTML$_styleMsAnimationDirection {}


declare  class MSHTML$_styleMsAnimationFillMode {
  constructor(...args: empty): mixed;
static +styleMsAnimationFillMode_Max: Class<MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillMode_Max> & MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillMode_Max & 2147483647;// 2147483647
static +styleMsAnimationFillModeBackwards: Class<MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillModeBackwards> & MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillModeBackwards & 2;// 2
static +styleMsAnimationFillModeBoth: Class<MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillModeBoth> & MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillModeBoth & 3;// 3
static +styleMsAnimationFillModeForwards: Class<MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillModeForwards> & MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillModeForwards & 1;// 1
static +styleMsAnimationFillModeNone: Class<MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillModeNone> & MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillModeNone & 0;// 0
static +styleMsAnimationFillModeNotSet: Class<MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillModeNotSet> & MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillModeNotSet & 4;// 4

}

declare class MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillMode_Max mixins MSHTML$_styleMsAnimationFillMode {}
declare class MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillModeBackwards mixins MSHTML$_styleMsAnimationFillMode {}
declare class MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillModeBoth mixins MSHTML$_styleMsAnimationFillMode {}
declare class MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillModeForwards mixins MSHTML$_styleMsAnimationFillMode {}
declare class MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillModeNone mixins MSHTML$_styleMsAnimationFillMode {}
declare class MSHTML$_styleMsAnimationFillMode__styleMsAnimationFillModeNotSet mixins MSHTML$_styleMsAnimationFillMode {}


declare  class MSHTML$_styleMsAnimationPlayState {
  constructor(...args: empty): mixed;
static +styleMsAnimationPlayState_Max: Class<MSHTML$_styleMsAnimationPlayState__styleMsAnimationPlayState_Max> & MSHTML$_styleMsAnimationPlayState__styleMsAnimationPlayState_Max & 2147483647;// 2147483647
static +styleMsAnimationPlayStateNotSet: Class<MSHTML$_styleMsAnimationPlayState__styleMsAnimationPlayStateNotSet> & MSHTML$_styleMsAnimationPlayState__styleMsAnimationPlayStateNotSet & 2;// 2
static +styleMsAnimationPlayStatePaused: Class<MSHTML$_styleMsAnimationPlayState__styleMsAnimationPlayStatePaused> & MSHTML$_styleMsAnimationPlayState__styleMsAnimationPlayStatePaused & 1;// 1
static +styleMsAnimationPlayStateRunning: Class<MSHTML$_styleMsAnimationPlayState__styleMsAnimationPlayStateRunning> & MSHTML$_styleMsAnimationPlayState__styleMsAnimationPlayStateRunning & 0;// 0

}

declare class MSHTML$_styleMsAnimationPlayState__styleMsAnimationPlayState_Max mixins MSHTML$_styleMsAnimationPlayState {}
declare class MSHTML$_styleMsAnimationPlayState__styleMsAnimationPlayStateNotSet mixins MSHTML$_styleMsAnimationPlayState {}
declare class MSHTML$_styleMsAnimationPlayState__styleMsAnimationPlayStatePaused mixins MSHTML$_styleMsAnimationPlayState {}
declare class MSHTML$_styleMsAnimationPlayState__styleMsAnimationPlayStateRunning mixins MSHTML$_styleMsAnimationPlayState {}


declare  class MSHTML$_styleMsContentZoomChaining {
  constructor(...args: empty): mixed;
static +styleMsContentZoomChaining_Max: Class<MSHTML$_styleMsContentZoomChaining__styleMsContentZoomChaining_Max> & MSHTML$_styleMsContentZoomChaining__styleMsContentZoomChaining_Max & 2147483647;// 2147483647
static +styleMsContentZoomChainingChained: Class<MSHTML$_styleMsContentZoomChaining__styleMsContentZoomChainingChained> & MSHTML$_styleMsContentZoomChaining__styleMsContentZoomChainingChained & 2;// 2
static +styleMsContentZoomChainingNone: Class<MSHTML$_styleMsContentZoomChaining__styleMsContentZoomChainingNone> & MSHTML$_styleMsContentZoomChaining__styleMsContentZoomChainingNone & 1;// 1
static +styleMsContentZoomChainingNotSet: Class<MSHTML$_styleMsContentZoomChaining__styleMsContentZoomChainingNotSet> & MSHTML$_styleMsContentZoomChaining__styleMsContentZoomChainingNotSet & 0;// 0

}

declare class MSHTML$_styleMsContentZoomChaining__styleMsContentZoomChaining_Max mixins MSHTML$_styleMsContentZoomChaining {}
declare class MSHTML$_styleMsContentZoomChaining__styleMsContentZoomChainingChained mixins MSHTML$_styleMsContentZoomChaining {}
declare class MSHTML$_styleMsContentZoomChaining__styleMsContentZoomChainingNone mixins MSHTML$_styleMsContentZoomChaining {}
declare class MSHTML$_styleMsContentZoomChaining__styleMsContentZoomChainingNotSet mixins MSHTML$_styleMsContentZoomChaining {}


declare  class MSHTML$_styleMsContentZooming {
  constructor(...args: empty): mixed;
static +styleMsContentZooming_Max: Class<MSHTML$_styleMsContentZooming__styleMsContentZooming_Max> & MSHTML$_styleMsContentZooming__styleMsContentZooming_Max & 2147483647;// 2147483647
static +styleMsContentZoomingNone: Class<MSHTML$_styleMsContentZooming__styleMsContentZoomingNone> & MSHTML$_styleMsContentZooming__styleMsContentZoomingNone & 1;// 1
static +styleMsContentZoomingNotSet: Class<MSHTML$_styleMsContentZooming__styleMsContentZoomingNotSet> & MSHTML$_styleMsContentZooming__styleMsContentZoomingNotSet & 0;// 0
static +styleMsContentZoomingZoom: Class<MSHTML$_styleMsContentZooming__styleMsContentZoomingZoom> & MSHTML$_styleMsContentZooming__styleMsContentZoomingZoom & 2;// 2

}

declare class MSHTML$_styleMsContentZooming__styleMsContentZooming_Max mixins MSHTML$_styleMsContentZooming {}
declare class MSHTML$_styleMsContentZooming__styleMsContentZoomingNone mixins MSHTML$_styleMsContentZooming {}
declare class MSHTML$_styleMsContentZooming__styleMsContentZoomingNotSet mixins MSHTML$_styleMsContentZooming {}
declare class MSHTML$_styleMsContentZooming__styleMsContentZoomingZoom mixins MSHTML$_styleMsContentZooming {}


declare  class MSHTML$_styleMsContentZoomSnapType {
  constructor(...args: empty): mixed;
static +styleMsContentZoomSnapType_Max: Class<MSHTML$_styleMsContentZoomSnapType__styleMsContentZoomSnapType_Max> & MSHTML$_styleMsContentZoomSnapType__styleMsContentZoomSnapType_Max & 2147483647;// 2147483647
static +styleMsContentZoomSnapTypeMandatory: Class<MSHTML$_styleMsContentZoomSnapType__styleMsContentZoomSnapTypeMandatory> & MSHTML$_styleMsContentZoomSnapType__styleMsContentZoomSnapTypeMandatory & 2;// 2
static +styleMsContentZoomSnapTypeNone: Class<MSHTML$_styleMsContentZoomSnapType__styleMsContentZoomSnapTypeNone> & MSHTML$_styleMsContentZoomSnapType__styleMsContentZoomSnapTypeNone & 1;// 1
static +styleMsContentZoomSnapTypeNotSet: Class<MSHTML$_styleMsContentZoomSnapType__styleMsContentZoomSnapTypeNotSet> & MSHTML$_styleMsContentZoomSnapType__styleMsContentZoomSnapTypeNotSet & 0;// 0
static +styleMsContentZoomSnapTypeProximity: Class<MSHTML$_styleMsContentZoomSnapType__styleMsContentZoomSnapTypeProximity> & MSHTML$_styleMsContentZoomSnapType__styleMsContentZoomSnapTypeProximity & 3;// 3

}

declare class MSHTML$_styleMsContentZoomSnapType__styleMsContentZoomSnapType_Max mixins MSHTML$_styleMsContentZoomSnapType {}
declare class MSHTML$_styleMsContentZoomSnapType__styleMsContentZoomSnapTypeMandatory mixins MSHTML$_styleMsContentZoomSnapType {}
declare class MSHTML$_styleMsContentZoomSnapType__styleMsContentZoomSnapTypeNone mixins MSHTML$_styleMsContentZoomSnapType {}
declare class MSHTML$_styleMsContentZoomSnapType__styleMsContentZoomSnapTypeNotSet mixins MSHTML$_styleMsContentZoomSnapType {}
declare class MSHTML$_styleMsContentZoomSnapType__styleMsContentZoomSnapTypeProximity mixins MSHTML$_styleMsContentZoomSnapType {}


declare  class MSHTML$_styleMsFlexAlign {
  constructor(...args: empty): mixed;
static +styleMsFlexAlign_Max: Class<MSHTML$_styleMsFlexAlign__styleMsFlexAlign_Max> & MSHTML$_styleMsFlexAlign__styleMsFlexAlign_Max & 2147483647;// 2147483647
static +styleMsFlexAlignBaseline: Class<MSHTML$_styleMsFlexAlign__styleMsFlexAlignBaseline> & MSHTML$_styleMsFlexAlign__styleMsFlexAlignBaseline & 3;// 3
static +styleMsFlexAlignCenter: Class<MSHTML$_styleMsFlexAlign__styleMsFlexAlignCenter> & MSHTML$_styleMsFlexAlign__styleMsFlexAlignCenter & 2;// 2
static +styleMsFlexAlignEnd: Class<MSHTML$_styleMsFlexAlign__styleMsFlexAlignEnd> & MSHTML$_styleMsFlexAlign__styleMsFlexAlignEnd & 1;// 1
static +styleMsFlexAlignNotSet: Class<MSHTML$_styleMsFlexAlign__styleMsFlexAlignNotSet> & MSHTML$_styleMsFlexAlign__styleMsFlexAlignNotSet & 5;// 5
static +styleMsFlexAlignStart: Class<MSHTML$_styleMsFlexAlign__styleMsFlexAlignStart> & MSHTML$_styleMsFlexAlign__styleMsFlexAlignStart & 0;// 0
static +styleMsFlexAlignStretch: Class<MSHTML$_styleMsFlexAlign__styleMsFlexAlignStretch> & MSHTML$_styleMsFlexAlign__styleMsFlexAlignStretch & 4;// 4

}

declare class MSHTML$_styleMsFlexAlign__styleMsFlexAlign_Max mixins MSHTML$_styleMsFlexAlign {}
declare class MSHTML$_styleMsFlexAlign__styleMsFlexAlignBaseline mixins MSHTML$_styleMsFlexAlign {}
declare class MSHTML$_styleMsFlexAlign__styleMsFlexAlignCenter mixins MSHTML$_styleMsFlexAlign {}
declare class MSHTML$_styleMsFlexAlign__styleMsFlexAlignEnd mixins MSHTML$_styleMsFlexAlign {}
declare class MSHTML$_styleMsFlexAlign__styleMsFlexAlignNotSet mixins MSHTML$_styleMsFlexAlign {}
declare class MSHTML$_styleMsFlexAlign__styleMsFlexAlignStart mixins MSHTML$_styleMsFlexAlign {}
declare class MSHTML$_styleMsFlexAlign__styleMsFlexAlignStretch mixins MSHTML$_styleMsFlexAlign {}


declare  class MSHTML$_styleMsFlexItemAlign {
  constructor(...args: empty): mixed;
static +styleMsFlexItemAlign_Max: Class<MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlign_Max> & MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlign_Max & 2147483647;// 2147483647
static +styleMsFlexItemAlignAuto: Class<MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignAuto> & MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignAuto & 5;// 5
static +styleMsFlexItemAlignBaseline: Class<MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignBaseline> & MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignBaseline & 3;// 3
static +styleMsFlexItemAlignCenter: Class<MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignCenter> & MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignCenter & 2;// 2
static +styleMsFlexItemAlignEnd: Class<MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignEnd> & MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignEnd & 1;// 1
static +styleMsFlexItemAlignNotSet: Class<MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignNotSet> & MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignNotSet & 6;// 6
static +styleMsFlexItemAlignStart: Class<MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignStart> & MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignStart & 0;// 0
static +styleMsFlexItemAlignStretch: Class<MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignStretch> & MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignStretch & 4;// 4

}

declare class MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlign_Max mixins MSHTML$_styleMsFlexItemAlign {}
declare class MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignAuto mixins MSHTML$_styleMsFlexItemAlign {}
declare class MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignBaseline mixins MSHTML$_styleMsFlexItemAlign {}
declare class MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignCenter mixins MSHTML$_styleMsFlexItemAlign {}
declare class MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignEnd mixins MSHTML$_styleMsFlexItemAlign {}
declare class MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignNotSet mixins MSHTML$_styleMsFlexItemAlign {}
declare class MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignStart mixins MSHTML$_styleMsFlexItemAlign {}
declare class MSHTML$_styleMsFlexItemAlign__styleMsFlexItemAlignStretch mixins MSHTML$_styleMsFlexItemAlign {}


declare  class MSHTML$_styleMsFlexLinePack {
  constructor(...args: empty): mixed;
static +styleMsFlexLinePack_Max: Class<MSHTML$_styleMsFlexLinePack__styleMsFlexLinePack_Max> & MSHTML$_styleMsFlexLinePack__styleMsFlexLinePack_Max & 2147483647;// 2147483647
static +styleMsFlexLinePackCenter: Class<MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackCenter> & MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackCenter & 2;// 2
static +styleMsFlexLinePackDistribute: Class<MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackDistribute> & MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackDistribute & 4;// 4
static +styleMsFlexLinePackEnd: Class<MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackEnd> & MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackEnd & 1;// 1
static +styleMsFlexLinePackJustify: Class<MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackJustify> & MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackJustify & 3;// 3
static +styleMsFlexLinePackNotSet: Class<MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackNotSet> & MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackNotSet & 6;// 6
static +styleMsFlexLinePackStart: Class<MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackStart> & MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackStart & 0;// 0
static +styleMsFlexLinePackStretch: Class<MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackStretch> & MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackStretch & 5;// 5

}

declare class MSHTML$_styleMsFlexLinePack__styleMsFlexLinePack_Max mixins MSHTML$_styleMsFlexLinePack {}
declare class MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackCenter mixins MSHTML$_styleMsFlexLinePack {}
declare class MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackDistribute mixins MSHTML$_styleMsFlexLinePack {}
declare class MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackEnd mixins MSHTML$_styleMsFlexLinePack {}
declare class MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackJustify mixins MSHTML$_styleMsFlexLinePack {}
declare class MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackNotSet mixins MSHTML$_styleMsFlexLinePack {}
declare class MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackStart mixins MSHTML$_styleMsFlexLinePack {}
declare class MSHTML$_styleMsFlexLinePack__styleMsFlexLinePackStretch mixins MSHTML$_styleMsFlexLinePack {}


declare  class MSHTML$_styleMsFlexPack {
  constructor(...args: empty): mixed;
static +styleMsFlexPack_Max: Class<MSHTML$_styleMsFlexPack__styleMsFlexPack_Max> & MSHTML$_styleMsFlexPack__styleMsFlexPack_Max & 2147483647;// 2147483647
static +styleMsFlexPackCenter: Class<MSHTML$_styleMsFlexPack__styleMsFlexPackCenter> & MSHTML$_styleMsFlexPack__styleMsFlexPackCenter & 2;// 2
static +styleMsFlexPackDistribute: Class<MSHTML$_styleMsFlexPack__styleMsFlexPackDistribute> & MSHTML$_styleMsFlexPack__styleMsFlexPackDistribute & 4;// 4
static +styleMsFlexPackEnd: Class<MSHTML$_styleMsFlexPack__styleMsFlexPackEnd> & MSHTML$_styleMsFlexPack__styleMsFlexPackEnd & 1;// 1
static +styleMsFlexPackJustify: Class<MSHTML$_styleMsFlexPack__styleMsFlexPackJustify> & MSHTML$_styleMsFlexPack__styleMsFlexPackJustify & 3;// 3
static +styleMsFlexPackNotSet: Class<MSHTML$_styleMsFlexPack__styleMsFlexPackNotSet> & MSHTML$_styleMsFlexPack__styleMsFlexPackNotSet & 5;// 5
static +styleMsFlexPackStart: Class<MSHTML$_styleMsFlexPack__styleMsFlexPackStart> & MSHTML$_styleMsFlexPack__styleMsFlexPackStart & 0;// 0

}

declare class MSHTML$_styleMsFlexPack__styleMsFlexPack_Max mixins MSHTML$_styleMsFlexPack {}
declare class MSHTML$_styleMsFlexPack__styleMsFlexPackCenter mixins MSHTML$_styleMsFlexPack {}
declare class MSHTML$_styleMsFlexPack__styleMsFlexPackDistribute mixins MSHTML$_styleMsFlexPack {}
declare class MSHTML$_styleMsFlexPack__styleMsFlexPackEnd mixins MSHTML$_styleMsFlexPack {}
declare class MSHTML$_styleMsFlexPack__styleMsFlexPackJustify mixins MSHTML$_styleMsFlexPack {}
declare class MSHTML$_styleMsFlexPack__styleMsFlexPackNotSet mixins MSHTML$_styleMsFlexPack {}
declare class MSHTML$_styleMsFlexPack__styleMsFlexPackStart mixins MSHTML$_styleMsFlexPack {}


declare  class MSHTML$_styleMsHighContrastAdjust {
  constructor(...args: empty): mixed;
static +styleMsHighContrastAdjust_Max: Class<MSHTML$_styleMsHighContrastAdjust__styleMsHighContrastAdjust_Max> & MSHTML$_styleMsHighContrastAdjust__styleMsHighContrastAdjust_Max & 2147483647;// 2147483647
static +styleMsHighContrastAdjustAuto: Class<MSHTML$_styleMsHighContrastAdjust__styleMsHighContrastAdjustAuto> & MSHTML$_styleMsHighContrastAdjust__styleMsHighContrastAdjustAuto & 1;// 1
static +styleMsHighContrastAdjustNone: Class<MSHTML$_styleMsHighContrastAdjust__styleMsHighContrastAdjustNone> & MSHTML$_styleMsHighContrastAdjust__styleMsHighContrastAdjustNone & 2;// 2
static +styleMsHighContrastAdjustNotSet: Class<MSHTML$_styleMsHighContrastAdjust__styleMsHighContrastAdjustNotSet> & MSHTML$_styleMsHighContrastAdjust__styleMsHighContrastAdjustNotSet & 0;// 0

}

declare class MSHTML$_styleMsHighContrastAdjust__styleMsHighContrastAdjust_Max mixins MSHTML$_styleMsHighContrastAdjust {}
declare class MSHTML$_styleMsHighContrastAdjust__styleMsHighContrastAdjustAuto mixins MSHTML$_styleMsHighContrastAdjust {}
declare class MSHTML$_styleMsHighContrastAdjust__styleMsHighContrastAdjustNone mixins MSHTML$_styleMsHighContrastAdjust {}
declare class MSHTML$_styleMsHighContrastAdjust__styleMsHighContrastAdjustNotSet mixins MSHTML$_styleMsHighContrastAdjust {}


declare  class MSHTML$_styleMsImeAlign {
  constructor(...args: empty): mixed;
static +styleMsImeAlign_Max: Class<MSHTML$_styleMsImeAlign__styleMsImeAlign_Max> & MSHTML$_styleMsImeAlign__styleMsImeAlign_Max & 2147483647;// 2147483647
static +styleMsImeAlignAfter: Class<MSHTML$_styleMsImeAlign__styleMsImeAlignAfter> & MSHTML$_styleMsImeAlign__styleMsImeAlignAfter & 1;// 1
static +styleMsImeAlignAuto: Class<MSHTML$_styleMsImeAlign__styleMsImeAlignAuto> & MSHTML$_styleMsImeAlign__styleMsImeAlignAuto & 0;// 0
static +styleMsImeAlignNotSet: Class<MSHTML$_styleMsImeAlign__styleMsImeAlignNotSet> & MSHTML$_styleMsImeAlign__styleMsImeAlignNotSet & 2;// 2

}

declare class MSHTML$_styleMsImeAlign__styleMsImeAlign_Max mixins MSHTML$_styleMsImeAlign {}
declare class MSHTML$_styleMsImeAlign__styleMsImeAlignAfter mixins MSHTML$_styleMsImeAlign {}
declare class MSHTML$_styleMsImeAlign__styleMsImeAlignAuto mixins MSHTML$_styleMsImeAlign {}
declare class MSHTML$_styleMsImeAlign__styleMsImeAlignNotSet mixins MSHTML$_styleMsImeAlign {}


declare  class MSHTML$_styleMsOverflowStyle {
  constructor(...args: empty): mixed;
static +styleMsOverflowStyle_Max: Class<MSHTML$_styleMsOverflowStyle__styleMsOverflowStyle_Max> & MSHTML$_styleMsOverflowStyle__styleMsOverflowStyle_Max & 2147483647;// 2147483647
static +styleMsOverflowStyleAuto: Class<MSHTML$_styleMsOverflowStyle__styleMsOverflowStyleAuto> & MSHTML$_styleMsOverflowStyle__styleMsOverflowStyleAuto & 1;// 1
static +styleMsOverflowStyleMsAutoHidingScrollbar: Class<MSHTML$_styleMsOverflowStyle__styleMsOverflowStyleMsAutoHidingScrollbar> & MSHTML$_styleMsOverflowStyle__styleMsOverflowStyleMsAutoHidingScrollbar & 4;// 4
static +styleMsOverflowStyleNone: Class<MSHTML$_styleMsOverflowStyle__styleMsOverflowStyleNone> & MSHTML$_styleMsOverflowStyle__styleMsOverflowStyleNone & 2;// 2
static +styleMsOverflowStyleNotSet: Class<MSHTML$_styleMsOverflowStyle__styleMsOverflowStyleNotSet> & MSHTML$_styleMsOverflowStyle__styleMsOverflowStyleNotSet & 0;// 0
static +styleMsOverflowStyleScrollbar: Class<MSHTML$_styleMsOverflowStyle__styleMsOverflowStyleScrollbar> & MSHTML$_styleMsOverflowStyle__styleMsOverflowStyleScrollbar & 3;// 3

}

declare class MSHTML$_styleMsOverflowStyle__styleMsOverflowStyle_Max mixins MSHTML$_styleMsOverflowStyle {}
declare class MSHTML$_styleMsOverflowStyle__styleMsOverflowStyleAuto mixins MSHTML$_styleMsOverflowStyle {}
declare class MSHTML$_styleMsOverflowStyle__styleMsOverflowStyleMsAutoHidingScrollbar mixins MSHTML$_styleMsOverflowStyle {}
declare class MSHTML$_styleMsOverflowStyle__styleMsOverflowStyleNone mixins MSHTML$_styleMsOverflowStyle {}
declare class MSHTML$_styleMsOverflowStyle__styleMsOverflowStyleNotSet mixins MSHTML$_styleMsOverflowStyle {}
declare class MSHTML$_styleMsOverflowStyle__styleMsOverflowStyleScrollbar mixins MSHTML$_styleMsOverflowStyle {}


declare  class MSHTML$_styleMsScrollChaining {
  constructor(...args: empty): mixed;
static +styleMsScrollChaining_Max: Class<MSHTML$_styleMsScrollChaining__styleMsScrollChaining_Max> & MSHTML$_styleMsScrollChaining__styleMsScrollChaining_Max & 2147483647;// 2147483647
static +styleMsScrollChainingChained: Class<MSHTML$_styleMsScrollChaining__styleMsScrollChainingChained> & MSHTML$_styleMsScrollChaining__styleMsScrollChainingChained & 2;// 2
static +styleMsScrollChainingNone: Class<MSHTML$_styleMsScrollChaining__styleMsScrollChainingNone> & MSHTML$_styleMsScrollChaining__styleMsScrollChainingNone & 1;// 1
static +styleMsScrollChainingNotSet: Class<MSHTML$_styleMsScrollChaining__styleMsScrollChainingNotSet> & MSHTML$_styleMsScrollChaining__styleMsScrollChainingNotSet & 0;// 0

}

declare class MSHTML$_styleMsScrollChaining__styleMsScrollChaining_Max mixins MSHTML$_styleMsScrollChaining {}
declare class MSHTML$_styleMsScrollChaining__styleMsScrollChainingChained mixins MSHTML$_styleMsScrollChaining {}
declare class MSHTML$_styleMsScrollChaining__styleMsScrollChainingNone mixins MSHTML$_styleMsScrollChaining {}
declare class MSHTML$_styleMsScrollChaining__styleMsScrollChainingNotSet mixins MSHTML$_styleMsScrollChaining {}


declare  class MSHTML$_styleMsScrollRails {
  constructor(...args: empty): mixed;
static +styleMsScrollRails_Max: Class<MSHTML$_styleMsScrollRails__styleMsScrollRails_Max> & MSHTML$_styleMsScrollRails__styleMsScrollRails_Max & 2147483647;// 2147483647
static +styleMsScrollRailsNone: Class<MSHTML$_styleMsScrollRails__styleMsScrollRailsNone> & MSHTML$_styleMsScrollRails__styleMsScrollRailsNone & 1;// 1
static +styleMsScrollRailsNotSet: Class<MSHTML$_styleMsScrollRails__styleMsScrollRailsNotSet> & MSHTML$_styleMsScrollRails__styleMsScrollRailsNotSet & 0;// 0
static +styleMsScrollRailsRailed: Class<MSHTML$_styleMsScrollRails__styleMsScrollRailsRailed> & MSHTML$_styleMsScrollRails__styleMsScrollRailsRailed & 2;// 2

}

declare class MSHTML$_styleMsScrollRails__styleMsScrollRails_Max mixins MSHTML$_styleMsScrollRails {}
declare class MSHTML$_styleMsScrollRails__styleMsScrollRailsNone mixins MSHTML$_styleMsScrollRails {}
declare class MSHTML$_styleMsScrollRails__styleMsScrollRailsNotSet mixins MSHTML$_styleMsScrollRails {}
declare class MSHTML$_styleMsScrollRails__styleMsScrollRailsRailed mixins MSHTML$_styleMsScrollRails {}


declare  class MSHTML$_styleMsScrollSnapType {
  constructor(...args: empty): mixed;
static +styleMsScrollSnapType_Max: Class<MSHTML$_styleMsScrollSnapType__styleMsScrollSnapType_Max> & MSHTML$_styleMsScrollSnapType__styleMsScrollSnapType_Max & 2147483647;// 2147483647
static +styleMsScrollSnapTypeMandatory: Class<MSHTML$_styleMsScrollSnapType__styleMsScrollSnapTypeMandatory> & MSHTML$_styleMsScrollSnapType__styleMsScrollSnapTypeMandatory & 2;// 2
static +styleMsScrollSnapTypeNone: Class<MSHTML$_styleMsScrollSnapType__styleMsScrollSnapTypeNone> & MSHTML$_styleMsScrollSnapType__styleMsScrollSnapTypeNone & 1;// 1
static +styleMsScrollSnapTypeNotSet: Class<MSHTML$_styleMsScrollSnapType__styleMsScrollSnapTypeNotSet> & MSHTML$_styleMsScrollSnapType__styleMsScrollSnapTypeNotSet & 0;// 0
static +styleMsScrollSnapTypeProximity: Class<MSHTML$_styleMsScrollSnapType__styleMsScrollSnapTypeProximity> & MSHTML$_styleMsScrollSnapType__styleMsScrollSnapTypeProximity & 3;// 3

}

declare class MSHTML$_styleMsScrollSnapType__styleMsScrollSnapType_Max mixins MSHTML$_styleMsScrollSnapType {}
declare class MSHTML$_styleMsScrollSnapType__styleMsScrollSnapTypeMandatory mixins MSHTML$_styleMsScrollSnapType {}
declare class MSHTML$_styleMsScrollSnapType__styleMsScrollSnapTypeNone mixins MSHTML$_styleMsScrollSnapType {}
declare class MSHTML$_styleMsScrollSnapType__styleMsScrollSnapTypeNotSet mixins MSHTML$_styleMsScrollSnapType {}
declare class MSHTML$_styleMsScrollSnapType__styleMsScrollSnapTypeProximity mixins MSHTML$_styleMsScrollSnapType {}


declare  class MSHTML$_styleMsScrollTranslation {
  constructor(...args: empty): mixed;
static +styleMsScrollTranslation_Max: Class<MSHTML$_styleMsScrollTranslation__styleMsScrollTranslation_Max> & MSHTML$_styleMsScrollTranslation__styleMsScrollTranslation_Max & 2147483647;// 2147483647
static +styleMsScrollTranslationNone: Class<MSHTML$_styleMsScrollTranslation__styleMsScrollTranslationNone> & MSHTML$_styleMsScrollTranslation__styleMsScrollTranslationNone & 1;// 1
static +styleMsScrollTranslationNotSet: Class<MSHTML$_styleMsScrollTranslation__styleMsScrollTranslationNotSet> & MSHTML$_styleMsScrollTranslation__styleMsScrollTranslationNotSet & 0;// 0
static +styleMsScrollTranslationVtoH: Class<MSHTML$_styleMsScrollTranslation__styleMsScrollTranslationVtoH> & MSHTML$_styleMsScrollTranslation__styleMsScrollTranslationVtoH & 2;// 2

}

declare class MSHTML$_styleMsScrollTranslation__styleMsScrollTranslation_Max mixins MSHTML$_styleMsScrollTranslation {}
declare class MSHTML$_styleMsScrollTranslation__styleMsScrollTranslationNone mixins MSHTML$_styleMsScrollTranslation {}
declare class MSHTML$_styleMsScrollTranslation__styleMsScrollTranslationNotSet mixins MSHTML$_styleMsScrollTranslation {}
declare class MSHTML$_styleMsScrollTranslation__styleMsScrollTranslationVtoH mixins MSHTML$_styleMsScrollTranslation {}


declare  class MSHTML$_styleMsTextCombineHorizontal {
  constructor(...args: empty): mixed;
static +styleMsTextCombineHorizontal_Max: Class<MSHTML$_styleMsTextCombineHorizontal__styleMsTextCombineHorizontal_Max> & MSHTML$_styleMsTextCombineHorizontal__styleMsTextCombineHorizontal_Max & 2147483647;// 2147483647
static +styleMsTextCombineHorizontalAll: Class<MSHTML$_styleMsTextCombineHorizontal__styleMsTextCombineHorizontalAll> & MSHTML$_styleMsTextCombineHorizontal__styleMsTextCombineHorizontalAll & 1;// 1
static +styleMsTextCombineHorizontalDigits: Class<MSHTML$_styleMsTextCombineHorizontal__styleMsTextCombineHorizontalDigits> & MSHTML$_styleMsTextCombineHorizontal__styleMsTextCombineHorizontalDigits & 2;// 2
static +styleMsTextCombineHorizontalNone: Class<MSHTML$_styleMsTextCombineHorizontal__styleMsTextCombineHorizontalNone> & MSHTML$_styleMsTextCombineHorizontal__styleMsTextCombineHorizontalNone & 0;// 0
static +styleMsTextCombineHorizontalNotSet: Class<MSHTML$_styleMsTextCombineHorizontal__styleMsTextCombineHorizontalNotSet> & MSHTML$_styleMsTextCombineHorizontal__styleMsTextCombineHorizontalNotSet & 3;// 3

}

declare class MSHTML$_styleMsTextCombineHorizontal__styleMsTextCombineHorizontal_Max mixins MSHTML$_styleMsTextCombineHorizontal {}
declare class MSHTML$_styleMsTextCombineHorizontal__styleMsTextCombineHorizontalAll mixins MSHTML$_styleMsTextCombineHorizontal {}
declare class MSHTML$_styleMsTextCombineHorizontal__styleMsTextCombineHorizontalDigits mixins MSHTML$_styleMsTextCombineHorizontal {}
declare class MSHTML$_styleMsTextCombineHorizontal__styleMsTextCombineHorizontalNone mixins MSHTML$_styleMsTextCombineHorizontal {}
declare class MSHTML$_styleMsTextCombineHorizontal__styleMsTextCombineHorizontalNotSet mixins MSHTML$_styleMsTextCombineHorizontal {}


declare  class MSHTML$_styleMsTouchAction {
  constructor(...args: empty): mixed;
static +styleMsTouchAction_Max: Class<MSHTML$_styleMsTouchAction__styleMsTouchAction_Max> & MSHTML$_styleMsTouchAction__styleMsTouchAction_Max & 2147483647;// 2147483647
static +styleMsTouchActionAuto: Class<MSHTML$_styleMsTouchAction__styleMsTouchActionAuto> & MSHTML$_styleMsTouchAction__styleMsTouchActionAuto & 1;// 1
static +styleMsTouchActionCrossSlideX: Class<MSHTML$_styleMsTouchAction__styleMsTouchActionCrossSlideX> & MSHTML$_styleMsTouchAction__styleMsTouchActionCrossSlideX & 64;// 64
static +styleMsTouchActionCrossSlideY: Class<MSHTML$_styleMsTouchAction__styleMsTouchActionCrossSlideY> & MSHTML$_styleMsTouchAction__styleMsTouchActionCrossSlideY & 128;// 128
static +styleMsTouchActionDoubleTapZoom: Class<MSHTML$_styleMsTouchAction__styleMsTouchActionDoubleTapZoom> & MSHTML$_styleMsTouchAction__styleMsTouchActionDoubleTapZoom & 4;// 4
static +styleMsTouchActionManipulation: Class<MSHTML$_styleMsTouchAction__styleMsTouchActionManipulation> & MSHTML$_styleMsTouchAction__styleMsTouchActionManipulation & 2;// 2
static +styleMsTouchActionNone: Class<MSHTML$_styleMsTouchAction__styleMsTouchActionNone> & MSHTML$_styleMsTouchAction__styleMsTouchActionNone & 0;// 0
static +styleMsTouchActionNotSet: Class<MSHTML$_styleMsTouchAction__styleMsTouchActionNotSet> & MSHTML$_styleMsTouchAction__styleMsTouchActionNotSet & -1;// -1
static +styleMsTouchActionPanX: Class<MSHTML$_styleMsTouchAction__styleMsTouchActionPanX> & MSHTML$_styleMsTouchAction__styleMsTouchActionPanX & 8;// 8
static +styleMsTouchActionPanY: Class<MSHTML$_styleMsTouchAction__styleMsTouchActionPanY> & MSHTML$_styleMsTouchAction__styleMsTouchActionPanY & 16;// 16
static +styleMsTouchActionPinchZoom: Class<MSHTML$_styleMsTouchAction__styleMsTouchActionPinchZoom> & MSHTML$_styleMsTouchAction__styleMsTouchActionPinchZoom & 32;// 32

}

declare class MSHTML$_styleMsTouchAction__styleMsTouchAction_Max mixins MSHTML$_styleMsTouchAction {}
declare class MSHTML$_styleMsTouchAction__styleMsTouchActionAuto mixins MSHTML$_styleMsTouchAction {}
declare class MSHTML$_styleMsTouchAction__styleMsTouchActionCrossSlideX mixins MSHTML$_styleMsTouchAction {}
declare class MSHTML$_styleMsTouchAction__styleMsTouchActionCrossSlideY mixins MSHTML$_styleMsTouchAction {}
declare class MSHTML$_styleMsTouchAction__styleMsTouchActionDoubleTapZoom mixins MSHTML$_styleMsTouchAction {}
declare class MSHTML$_styleMsTouchAction__styleMsTouchActionManipulation mixins MSHTML$_styleMsTouchAction {}
declare class MSHTML$_styleMsTouchAction__styleMsTouchActionNone mixins MSHTML$_styleMsTouchAction {}
declare class MSHTML$_styleMsTouchAction__styleMsTouchActionNotSet mixins MSHTML$_styleMsTouchAction {}
declare class MSHTML$_styleMsTouchAction__styleMsTouchActionPanX mixins MSHTML$_styleMsTouchAction {}
declare class MSHTML$_styleMsTouchAction__styleMsTouchActionPanY mixins MSHTML$_styleMsTouchAction {}
declare class MSHTML$_styleMsTouchAction__styleMsTouchActionPinchZoom mixins MSHTML$_styleMsTouchAction {}


declare  class MSHTML$_styleMsTouchSelect {
  constructor(...args: empty): mixed;
static +styleMsTouchSelect_Max: Class<MSHTML$_styleMsTouchSelect__styleMsTouchSelect_Max> & MSHTML$_styleMsTouchSelect__styleMsTouchSelect_Max & 2147483647;// 2147483647
static +styleMsTouchSelectGrippers: Class<MSHTML$_styleMsTouchSelect__styleMsTouchSelectGrippers> & MSHTML$_styleMsTouchSelect__styleMsTouchSelectGrippers & 0;// 0
static +styleMsTouchSelectNone: Class<MSHTML$_styleMsTouchSelect__styleMsTouchSelectNone> & MSHTML$_styleMsTouchSelect__styleMsTouchSelectNone & 1;// 1
static +styleMsTouchSelectNotSet: Class<MSHTML$_styleMsTouchSelect__styleMsTouchSelectNotSet> & MSHTML$_styleMsTouchSelect__styleMsTouchSelectNotSet & 2;// 2

}

declare class MSHTML$_styleMsTouchSelect__styleMsTouchSelect_Max mixins MSHTML$_styleMsTouchSelect {}
declare class MSHTML$_styleMsTouchSelect__styleMsTouchSelectGrippers mixins MSHTML$_styleMsTouchSelect {}
declare class MSHTML$_styleMsTouchSelect__styleMsTouchSelectNone mixins MSHTML$_styleMsTouchSelect {}
declare class MSHTML$_styleMsTouchSelect__styleMsTouchSelectNotSet mixins MSHTML$_styleMsTouchSelect {}


declare  class MSHTML$_styleMsUserSelect {
  constructor(...args: empty): mixed;
static +styleMsUserSelect_Max: Class<MSHTML$_styleMsUserSelect__styleMsUserSelect_Max> & MSHTML$_styleMsUserSelect__styleMsUserSelect_Max & 2147483647;// 2147483647
static +styleMsUserSelectAuto: Class<MSHTML$_styleMsUserSelect__styleMsUserSelectAuto> & MSHTML$_styleMsUserSelect__styleMsUserSelectAuto & 0;// 0
static +styleMsUserSelectElement: Class<MSHTML$_styleMsUserSelect__styleMsUserSelectElement> & MSHTML$_styleMsUserSelect__styleMsUserSelectElement & 2;// 2
static +styleMsUserSelectNone: Class<MSHTML$_styleMsUserSelect__styleMsUserSelectNone> & MSHTML$_styleMsUserSelect__styleMsUserSelectNone & 3;// 3
static +styleMsUserSelectNotSet: Class<MSHTML$_styleMsUserSelect__styleMsUserSelectNotSet> & MSHTML$_styleMsUserSelect__styleMsUserSelectNotSet & 4;// 4
static +styleMsUserSelectText: Class<MSHTML$_styleMsUserSelect__styleMsUserSelectText> & MSHTML$_styleMsUserSelect__styleMsUserSelectText & 1;// 1

}

declare class MSHTML$_styleMsUserSelect__styleMsUserSelect_Max mixins MSHTML$_styleMsUserSelect {}
declare class MSHTML$_styleMsUserSelect__styleMsUserSelectAuto mixins MSHTML$_styleMsUserSelect {}
declare class MSHTML$_styleMsUserSelect__styleMsUserSelectElement mixins MSHTML$_styleMsUserSelect {}
declare class MSHTML$_styleMsUserSelect__styleMsUserSelectNone mixins MSHTML$_styleMsUserSelect {}
declare class MSHTML$_styleMsUserSelect__styleMsUserSelectNotSet mixins MSHTML$_styleMsUserSelect {}
declare class MSHTML$_styleMsUserSelect__styleMsUserSelectText mixins MSHTML$_styleMsUserSelect {}


declare  class MSHTML$_styleNone {
  constructor(...args: empty): mixed;
static +styleNone_Max: Class<MSHTML$_styleNone__styleNone_Max> & MSHTML$_styleNone__styleNone_Max & 2147483647;// 2147483647
static +styleNoneNone: Class<MSHTML$_styleNone__styleNoneNone> & MSHTML$_styleNone__styleNoneNone & 0;// 0

}

declare class MSHTML$_styleNone__styleNone_Max mixins MSHTML$_styleNone {}
declare class MSHTML$_styleNone__styleNoneNone mixins MSHTML$_styleNone {}


declare  class MSHTML$_styleNormal {
  constructor(...args: empty): mixed;
static +styleNormal_Max: Class<MSHTML$_styleNormal__styleNormal_Max> & MSHTML$_styleNormal__styleNormal_Max & 2147483647;// 2147483647
static +styleNormalNormal: Class<MSHTML$_styleNormal__styleNormalNormal> & MSHTML$_styleNormal__styleNormalNormal & 0;// 0

}

declare class MSHTML$_styleNormal__styleNormal_Max mixins MSHTML$_styleNormal {}
declare class MSHTML$_styleNormal__styleNormalNormal mixins MSHTML$_styleNormal {}


declare  class MSHTML$_styleOutlineStyle {
  constructor(...args: empty): mixed;
static +styleOutlineStyle_Max: Class<MSHTML$_styleOutlineStyle__styleOutlineStyle_Max> & MSHTML$_styleOutlineStyle__styleOutlineStyle_Max & 2147483647;// 2147483647
static +styleOutlineStyleDashed: Class<MSHTML$_styleOutlineStyle__styleOutlineStyleDashed> & MSHTML$_styleOutlineStyle__styleOutlineStyleDashed & 2;// 2
static +styleOutlineStyleDotted: Class<MSHTML$_styleOutlineStyle__styleOutlineStyleDotted> & MSHTML$_styleOutlineStyle__styleOutlineStyleDotted & 1;// 1
static +styleOutlineStyleDouble: Class<MSHTML$_styleOutlineStyle__styleOutlineStyleDouble> & MSHTML$_styleOutlineStyle__styleOutlineStyleDouble & 4;// 4
static +styleOutlineStyleGroove: Class<MSHTML$_styleOutlineStyle__styleOutlineStyleGroove> & MSHTML$_styleOutlineStyle__styleOutlineStyleGroove & 5;// 5
static +styleOutlineStyleInset: Class<MSHTML$_styleOutlineStyle__styleOutlineStyleInset> & MSHTML$_styleOutlineStyle__styleOutlineStyleInset & 7;// 7
static +styleOutlineStyleNone: Class<MSHTML$_styleOutlineStyle__styleOutlineStyleNone> & MSHTML$_styleOutlineStyle__styleOutlineStyleNone & 10;// 10
static +styleOutlineStyleNotSet: Class<MSHTML$_styleOutlineStyle__styleOutlineStyleNotSet> & MSHTML$_styleOutlineStyle__styleOutlineStyleNotSet & 0;// 0
static +styleOutlineStyleOutset: Class<MSHTML$_styleOutlineStyle__styleOutlineStyleOutset> & MSHTML$_styleOutlineStyle__styleOutlineStyleOutset & 8;// 8
static +styleOutlineStyleRidge: Class<MSHTML$_styleOutlineStyle__styleOutlineStyleRidge> & MSHTML$_styleOutlineStyle__styleOutlineStyleRidge & 6;// 6
static +styleOutlineStyleSolid: Class<MSHTML$_styleOutlineStyle__styleOutlineStyleSolid> & MSHTML$_styleOutlineStyle__styleOutlineStyleSolid & 3;// 3
static +styleOutlineStyleWindowInset: Class<MSHTML$_styleOutlineStyle__styleOutlineStyleWindowInset> & MSHTML$_styleOutlineStyle__styleOutlineStyleWindowInset & 9;// 9

}

declare class MSHTML$_styleOutlineStyle__styleOutlineStyle_Max mixins MSHTML$_styleOutlineStyle {}
declare class MSHTML$_styleOutlineStyle__styleOutlineStyleDashed mixins MSHTML$_styleOutlineStyle {}
declare class MSHTML$_styleOutlineStyle__styleOutlineStyleDotted mixins MSHTML$_styleOutlineStyle {}
declare class MSHTML$_styleOutlineStyle__styleOutlineStyleDouble mixins MSHTML$_styleOutlineStyle {}
declare class MSHTML$_styleOutlineStyle__styleOutlineStyleGroove mixins MSHTML$_styleOutlineStyle {}
declare class MSHTML$_styleOutlineStyle__styleOutlineStyleInset mixins MSHTML$_styleOutlineStyle {}
declare class MSHTML$_styleOutlineStyle__styleOutlineStyleNone mixins MSHTML$_styleOutlineStyle {}
declare class MSHTML$_styleOutlineStyle__styleOutlineStyleNotSet mixins MSHTML$_styleOutlineStyle {}
declare class MSHTML$_styleOutlineStyle__styleOutlineStyleOutset mixins MSHTML$_styleOutlineStyle {}
declare class MSHTML$_styleOutlineStyle__styleOutlineStyleRidge mixins MSHTML$_styleOutlineStyle {}
declare class MSHTML$_styleOutlineStyle__styleOutlineStyleSolid mixins MSHTML$_styleOutlineStyle {}
declare class MSHTML$_styleOutlineStyle__styleOutlineStyleWindowInset mixins MSHTML$_styleOutlineStyle {}


declare  class MSHTML$_styleOverflow {
  constructor(...args: empty): mixed;
static +styleOverflow_Max: Class<MSHTML$_styleOverflow__styleOverflow_Max> & MSHTML$_styleOverflow__styleOverflow_Max & 2147483647;// 2147483647
static +styleOverflowAuto: Class<MSHTML$_styleOverflow__styleOverflowAuto> & MSHTML$_styleOverflow__styleOverflowAuto & 1;// 1
static +styleOverflowHidden: Class<MSHTML$_styleOverflow__styleOverflowHidden> & MSHTML$_styleOverflow__styleOverflowHidden & 2;// 2
static +styleOverflowNotSet: Class<MSHTML$_styleOverflow__styleOverflowNotSet> & MSHTML$_styleOverflow__styleOverflowNotSet & 0;// 0
static +styleOverflowScroll: Class<MSHTML$_styleOverflow__styleOverflowScroll> & MSHTML$_styleOverflow__styleOverflowScroll & 4;// 4
static +styleOverflowVisible: Class<MSHTML$_styleOverflow__styleOverflowVisible> & MSHTML$_styleOverflow__styleOverflowVisible & 3;// 3

}

declare class MSHTML$_styleOverflow__styleOverflow_Max mixins MSHTML$_styleOverflow {}
declare class MSHTML$_styleOverflow__styleOverflowAuto mixins MSHTML$_styleOverflow {}
declare class MSHTML$_styleOverflow__styleOverflowHidden mixins MSHTML$_styleOverflow {}
declare class MSHTML$_styleOverflow__styleOverflowNotSet mixins MSHTML$_styleOverflow {}
declare class MSHTML$_styleOverflow__styleOverflowScroll mixins MSHTML$_styleOverflow {}
declare class MSHTML$_styleOverflow__styleOverflowVisible mixins MSHTML$_styleOverflow {}


declare  class MSHTML$_stylePageBreak {
  constructor(...args: empty): mixed;
static +stylePageBreak_Max: Class<MSHTML$_stylePageBreak__stylePageBreak_Max> & MSHTML$_stylePageBreak__stylePageBreak_Max & 2147483647;// 2147483647
static +stylePageBreakAlways: Class<MSHTML$_stylePageBreak__stylePageBreakAlways> & MSHTML$_stylePageBreak__stylePageBreakAlways & 2;// 2
static +stylePageBreakAuto: Class<MSHTML$_stylePageBreak__stylePageBreakAuto> & MSHTML$_stylePageBreak__stylePageBreakAuto & 1;// 1
static +stylePageBreakAvoid: Class<MSHTML$_stylePageBreak__stylePageBreakAvoid> & MSHTML$_stylePageBreak__stylePageBreakAvoid & 5;// 5
static +stylePageBreakLeft: Class<MSHTML$_stylePageBreak__stylePageBreakLeft> & MSHTML$_stylePageBreak__stylePageBreakLeft & 3;// 3
static +stylePageBreakNotSet: Class<MSHTML$_stylePageBreak__stylePageBreakNotSet> & MSHTML$_stylePageBreak__stylePageBreakNotSet & 0;// 0
static +stylePageBreakRight: Class<MSHTML$_stylePageBreak__stylePageBreakRight> & MSHTML$_stylePageBreak__stylePageBreakRight & 4;// 4

}

declare class MSHTML$_stylePageBreak__stylePageBreak_Max mixins MSHTML$_stylePageBreak {}
declare class MSHTML$_stylePageBreak__stylePageBreakAlways mixins MSHTML$_stylePageBreak {}
declare class MSHTML$_stylePageBreak__stylePageBreakAuto mixins MSHTML$_stylePageBreak {}
declare class MSHTML$_stylePageBreak__stylePageBreakAvoid mixins MSHTML$_stylePageBreak {}
declare class MSHTML$_stylePageBreak__stylePageBreakLeft mixins MSHTML$_stylePageBreak {}
declare class MSHTML$_stylePageBreak__stylePageBreakNotSet mixins MSHTML$_stylePageBreak {}
declare class MSHTML$_stylePageBreak__stylePageBreakRight mixins MSHTML$_stylePageBreak {}


declare  class MSHTML$_stylePageBreakInside {
  constructor(...args: empty): mixed;
static +stylePageBreakInside_Max: Class<MSHTML$_stylePageBreakInside__stylePageBreakInside_Max> & MSHTML$_stylePageBreakInside__stylePageBreakInside_Max & 2147483647;// 2147483647
static +stylePageBreakInsideAuto: Class<MSHTML$_stylePageBreakInside__stylePageBreakInsideAuto> & MSHTML$_stylePageBreakInside__stylePageBreakInsideAuto & 1;// 1
static +stylePageBreakInsideAvoid: Class<MSHTML$_stylePageBreakInside__stylePageBreakInsideAvoid> & MSHTML$_stylePageBreakInside__stylePageBreakInsideAvoid & 2;// 2
static +stylePageBreakInsideNotSet: Class<MSHTML$_stylePageBreakInside__stylePageBreakInsideNotSet> & MSHTML$_stylePageBreakInside__stylePageBreakInsideNotSet & 0;// 0

}

declare class MSHTML$_stylePageBreakInside__stylePageBreakInside_Max mixins MSHTML$_stylePageBreakInside {}
declare class MSHTML$_stylePageBreakInside__stylePageBreakInsideAuto mixins MSHTML$_stylePageBreakInside {}
declare class MSHTML$_stylePageBreakInside__stylePageBreakInsideAvoid mixins MSHTML$_stylePageBreakInside {}
declare class MSHTML$_stylePageBreakInside__stylePageBreakInsideNotSet mixins MSHTML$_stylePageBreakInside {}


declare  class MSHTML$_stylePerspectiveOriginX {
  constructor(...args: empty): mixed;
static +stylePerspectiveOriginX_Max: Class<MSHTML$_stylePerspectiveOriginX__stylePerspectiveOriginX_Max> & MSHTML$_stylePerspectiveOriginX__stylePerspectiveOriginX_Max & 2147483647;// 2147483647
static +stylePerspectiveOriginXCenter: Class<MSHTML$_stylePerspectiveOriginX__stylePerspectiveOriginXCenter> & MSHTML$_stylePerspectiveOriginX__stylePerspectiveOriginXCenter & 2;// 2
static +stylePerspectiveOriginXLeft: Class<MSHTML$_stylePerspectiveOriginX__stylePerspectiveOriginXLeft> & MSHTML$_stylePerspectiveOriginX__stylePerspectiveOriginXLeft & 1;// 1
static +stylePerspectiveOriginXNotSet: Class<MSHTML$_stylePerspectiveOriginX__stylePerspectiveOriginXNotSet> & MSHTML$_stylePerspectiveOriginX__stylePerspectiveOriginXNotSet & 0;// 0
static +stylePerspectiveOriginXRight: Class<MSHTML$_stylePerspectiveOriginX__stylePerspectiveOriginXRight> & MSHTML$_stylePerspectiveOriginX__stylePerspectiveOriginXRight & 3;// 3

}

declare class MSHTML$_stylePerspectiveOriginX__stylePerspectiveOriginX_Max mixins MSHTML$_stylePerspectiveOriginX {}
declare class MSHTML$_stylePerspectiveOriginX__stylePerspectiveOriginXCenter mixins MSHTML$_stylePerspectiveOriginX {}
declare class MSHTML$_stylePerspectiveOriginX__stylePerspectiveOriginXLeft mixins MSHTML$_stylePerspectiveOriginX {}
declare class MSHTML$_stylePerspectiveOriginX__stylePerspectiveOriginXNotSet mixins MSHTML$_stylePerspectiveOriginX {}
declare class MSHTML$_stylePerspectiveOriginX__stylePerspectiveOriginXRight mixins MSHTML$_stylePerspectiveOriginX {}


declare  class MSHTML$_stylePerspectiveOriginY {
  constructor(...args: empty): mixed;
static +stylePerspectiveOriginY_Max: Class<MSHTML$_stylePerspectiveOriginY__stylePerspectiveOriginY_Max> & MSHTML$_stylePerspectiveOriginY__stylePerspectiveOriginY_Max & 2147483647;// 2147483647
static +stylePerspectiveOriginYBottom: Class<MSHTML$_stylePerspectiveOriginY__stylePerspectiveOriginYBottom> & MSHTML$_stylePerspectiveOriginY__stylePerspectiveOriginYBottom & 3;// 3
static +stylePerspectiveOriginYCenter: Class<MSHTML$_stylePerspectiveOriginY__stylePerspectiveOriginYCenter> & MSHTML$_stylePerspectiveOriginY__stylePerspectiveOriginYCenter & 2;// 2
static +stylePerspectiveOriginYNotSet: Class<MSHTML$_stylePerspectiveOriginY__stylePerspectiveOriginYNotSet> & MSHTML$_stylePerspectiveOriginY__stylePerspectiveOriginYNotSet & 0;// 0
static +stylePerspectiveOriginYTop: Class<MSHTML$_stylePerspectiveOriginY__stylePerspectiveOriginYTop> & MSHTML$_stylePerspectiveOriginY__stylePerspectiveOriginYTop & 1;// 1

}

declare class MSHTML$_stylePerspectiveOriginY__stylePerspectiveOriginY_Max mixins MSHTML$_stylePerspectiveOriginY {}
declare class MSHTML$_stylePerspectiveOriginY__stylePerspectiveOriginYBottom mixins MSHTML$_stylePerspectiveOriginY {}
declare class MSHTML$_stylePerspectiveOriginY__stylePerspectiveOriginYCenter mixins MSHTML$_stylePerspectiveOriginY {}
declare class MSHTML$_stylePerspectiveOriginY__stylePerspectiveOriginYNotSet mixins MSHTML$_stylePerspectiveOriginY {}
declare class MSHTML$_stylePerspectiveOriginY__stylePerspectiveOriginYTop mixins MSHTML$_stylePerspectiveOriginY {}


declare  class MSHTML$_stylePointerEvents {
  constructor(...args: empty): mixed;
static +stylePointerEvents_Max: Class<MSHTML$_stylePointerEvents__stylePointerEvents_Max> & MSHTML$_stylePointerEvents__stylePointerEvents_Max & 2147483647;// 2147483647
static +stylePointerEventsAll: Class<MSHTML$_stylePointerEvents__stylePointerEventsAll> & MSHTML$_stylePointerEvents__stylePointerEventsAll & 8;// 8
static +stylePointerEventsAuto: Class<MSHTML$_stylePointerEvents__stylePointerEventsAuto> & MSHTML$_stylePointerEvents__stylePointerEventsAuto & 11;// 11
static +stylePointerEventsFill: Class<MSHTML$_stylePointerEvents__stylePointerEventsFill> & MSHTML$_stylePointerEvents__stylePointerEventsFill & 6;// 6
static +stylePointerEventsInitial: Class<MSHTML$_stylePointerEvents__stylePointerEventsInitial> & MSHTML$_stylePointerEvents__stylePointerEventsInitial & 10;// 10
static +stylePointerEventsNone: Class<MSHTML$_stylePointerEvents__stylePointerEventsNone> & MSHTML$_stylePointerEvents__stylePointerEventsNone & 9;// 9
static +stylePointerEventsNotSet: Class<MSHTML$_stylePointerEvents__stylePointerEventsNotSet> & MSHTML$_stylePointerEvents__stylePointerEventsNotSet & 0;// 0
static +stylePointerEventsPainted: Class<MSHTML$_stylePointerEvents__stylePointerEventsPainted> & MSHTML$_stylePointerEvents__stylePointerEventsPainted & 5;// 5
static +stylePointerEventsStroke: Class<MSHTML$_stylePointerEvents__stylePointerEventsStroke> & MSHTML$_stylePointerEvents__stylePointerEventsStroke & 7;// 7
static +stylePointerEventsVisible: Class<MSHTML$_stylePointerEvents__stylePointerEventsVisible> & MSHTML$_stylePointerEvents__stylePointerEventsVisible & 4;// 4
static +stylePointerEventsVisibleFill: Class<MSHTML$_stylePointerEvents__stylePointerEventsVisibleFill> & MSHTML$_stylePointerEvents__stylePointerEventsVisibleFill & 2;// 2
static +stylePointerEventsVisiblePainted: Class<MSHTML$_stylePointerEvents__stylePointerEventsVisiblePainted> & MSHTML$_stylePointerEvents__stylePointerEventsVisiblePainted & 1;// 1
static +stylePointerEventsVisibleStroke: Class<MSHTML$_stylePointerEvents__stylePointerEventsVisibleStroke> & MSHTML$_stylePointerEvents__stylePointerEventsVisibleStroke & 3;// 3

}

declare class MSHTML$_stylePointerEvents__stylePointerEvents_Max mixins MSHTML$_stylePointerEvents {}
declare class MSHTML$_stylePointerEvents__stylePointerEventsAll mixins MSHTML$_stylePointerEvents {}
declare class MSHTML$_stylePointerEvents__stylePointerEventsAuto mixins MSHTML$_stylePointerEvents {}
declare class MSHTML$_stylePointerEvents__stylePointerEventsFill mixins MSHTML$_stylePointerEvents {}
declare class MSHTML$_stylePointerEvents__stylePointerEventsInitial mixins MSHTML$_stylePointerEvents {}
declare class MSHTML$_stylePointerEvents__stylePointerEventsNone mixins MSHTML$_stylePointerEvents {}
declare class MSHTML$_stylePointerEvents__stylePointerEventsNotSet mixins MSHTML$_stylePointerEvents {}
declare class MSHTML$_stylePointerEvents__stylePointerEventsPainted mixins MSHTML$_stylePointerEvents {}
declare class MSHTML$_stylePointerEvents__stylePointerEventsStroke mixins MSHTML$_stylePointerEvents {}
declare class MSHTML$_stylePointerEvents__stylePointerEventsVisible mixins MSHTML$_stylePointerEvents {}
declare class MSHTML$_stylePointerEvents__stylePointerEventsVisibleFill mixins MSHTML$_stylePointerEvents {}
declare class MSHTML$_stylePointerEvents__stylePointerEventsVisiblePainted mixins MSHTML$_stylePointerEvents {}
declare class MSHTML$_stylePointerEvents__stylePointerEventsVisibleStroke mixins MSHTML$_stylePointerEvents {}


declare  class MSHTML$_stylePosition {
  constructor(...args: empty): mixed;
static +stylePosition_Max: Class<MSHTML$_stylePosition__stylePosition_Max> & MSHTML$_stylePosition__stylePosition_Max & 2147483647;// 2147483647
static +stylePositionabsolute: Class<MSHTML$_stylePosition__stylePositionabsolute> & MSHTML$_stylePosition__stylePositionabsolute & 3;// 3
static +stylePositionfixed: Class<MSHTML$_stylePosition__stylePositionfixed> & MSHTML$_stylePosition__stylePositionfixed & 4;// 4
static +stylePositionMsDeviceFixed: Class<MSHTML$_stylePosition__stylePositionMsDeviceFixed> & MSHTML$_stylePosition__stylePositionMsDeviceFixed & 6;// 6
static +stylePositionMsPage: Class<MSHTML$_stylePosition__stylePositionMsPage> & MSHTML$_stylePosition__stylePositionMsPage & 5;// 5
static +stylePositionNotSet: Class<MSHTML$_stylePosition__stylePositionNotSet> & MSHTML$_stylePosition__stylePositionNotSet & 0;// 0
static +stylePositionrelative: Class<MSHTML$_stylePosition__stylePositionrelative> & MSHTML$_stylePosition__stylePositionrelative & 2;// 2
static +stylePositionstatic: Class<MSHTML$_stylePosition__stylePositionstatic> & MSHTML$_stylePosition__stylePositionstatic & 1;// 1

}

declare class MSHTML$_stylePosition__stylePosition_Max mixins MSHTML$_stylePosition {}
declare class MSHTML$_stylePosition__stylePositionabsolute mixins MSHTML$_stylePosition {}
declare class MSHTML$_stylePosition__stylePositionfixed mixins MSHTML$_stylePosition {}
declare class MSHTML$_stylePosition__stylePositionMsDeviceFixed mixins MSHTML$_stylePosition {}
declare class MSHTML$_stylePosition__stylePositionMsPage mixins MSHTML$_stylePosition {}
declare class MSHTML$_stylePosition__stylePositionNotSet mixins MSHTML$_stylePosition {}
declare class MSHTML$_stylePosition__stylePositionrelative mixins MSHTML$_stylePosition {}
declare class MSHTML$_stylePosition__stylePositionstatic mixins MSHTML$_stylePosition {}


declare  class MSHTML$_styleRubyAlign {
  constructor(...args: empty): mixed;
static +styleRubyAlign_Max: Class<MSHTML$_styleRubyAlign__styleRubyAlign_Max> & MSHTML$_styleRubyAlign__styleRubyAlign_Max & 2147483647;// 2147483647
static +styleRubyAlignAuto: Class<MSHTML$_styleRubyAlign__styleRubyAlignAuto> & MSHTML$_styleRubyAlign__styleRubyAlignAuto & 1;// 1
static +styleRubyAlignCenter: Class<MSHTML$_styleRubyAlign__styleRubyAlignCenter> & MSHTML$_styleRubyAlign__styleRubyAlignCenter & 3;// 3
static +styleRubyAlignDistributeLetter: Class<MSHTML$_styleRubyAlign__styleRubyAlignDistributeLetter> & MSHTML$_styleRubyAlign__styleRubyAlignDistributeLetter & 5;// 5
static +styleRubyAlignDistributeSpace: Class<MSHTML$_styleRubyAlign__styleRubyAlignDistributeSpace> & MSHTML$_styleRubyAlign__styleRubyAlignDistributeSpace & 6;// 6
static +styleRubyAlignLeft: Class<MSHTML$_styleRubyAlign__styleRubyAlignLeft> & MSHTML$_styleRubyAlign__styleRubyAlignLeft & 2;// 2
static +styleRubyAlignLineEdge: Class<MSHTML$_styleRubyAlign__styleRubyAlignLineEdge> & MSHTML$_styleRubyAlign__styleRubyAlignLineEdge & 7;// 7
static +styleRubyAlignNotSet: Class<MSHTML$_styleRubyAlign__styleRubyAlignNotSet> & MSHTML$_styleRubyAlign__styleRubyAlignNotSet & 0;// 0
static +styleRubyAlignRight: Class<MSHTML$_styleRubyAlign__styleRubyAlignRight> & MSHTML$_styleRubyAlign__styleRubyAlignRight & 4;// 4

}

declare class MSHTML$_styleRubyAlign__styleRubyAlign_Max mixins MSHTML$_styleRubyAlign {}
declare class MSHTML$_styleRubyAlign__styleRubyAlignAuto mixins MSHTML$_styleRubyAlign {}
declare class MSHTML$_styleRubyAlign__styleRubyAlignCenter mixins MSHTML$_styleRubyAlign {}
declare class MSHTML$_styleRubyAlign__styleRubyAlignDistributeLetter mixins MSHTML$_styleRubyAlign {}
declare class MSHTML$_styleRubyAlign__styleRubyAlignDistributeSpace mixins MSHTML$_styleRubyAlign {}
declare class MSHTML$_styleRubyAlign__styleRubyAlignLeft mixins MSHTML$_styleRubyAlign {}
declare class MSHTML$_styleRubyAlign__styleRubyAlignLineEdge mixins MSHTML$_styleRubyAlign {}
declare class MSHTML$_styleRubyAlign__styleRubyAlignNotSet mixins MSHTML$_styleRubyAlign {}
declare class MSHTML$_styleRubyAlign__styleRubyAlignRight mixins MSHTML$_styleRubyAlign {}


declare  class MSHTML$_styleRubyOverhang {
  constructor(...args: empty): mixed;
static +styleRubyOverhang_Max: Class<MSHTML$_styleRubyOverhang__styleRubyOverhang_Max> & MSHTML$_styleRubyOverhang__styleRubyOverhang_Max & 2147483647;// 2147483647
static +styleRubyOverhangAuto: Class<MSHTML$_styleRubyOverhang__styleRubyOverhangAuto> & MSHTML$_styleRubyOverhang__styleRubyOverhangAuto & 1;// 1
static +styleRubyOverhangNone: Class<MSHTML$_styleRubyOverhang__styleRubyOverhangNone> & MSHTML$_styleRubyOverhang__styleRubyOverhangNone & 3;// 3
static +styleRubyOverhangNotSet: Class<MSHTML$_styleRubyOverhang__styleRubyOverhangNotSet> & MSHTML$_styleRubyOverhang__styleRubyOverhangNotSet & 0;// 0
static +styleRubyOverhangWhitespace: Class<MSHTML$_styleRubyOverhang__styleRubyOverhangWhitespace> & MSHTML$_styleRubyOverhang__styleRubyOverhangWhitespace & 2;// 2

}

declare class MSHTML$_styleRubyOverhang__styleRubyOverhang_Max mixins MSHTML$_styleRubyOverhang {}
declare class MSHTML$_styleRubyOverhang__styleRubyOverhangAuto mixins MSHTML$_styleRubyOverhang {}
declare class MSHTML$_styleRubyOverhang__styleRubyOverhangNone mixins MSHTML$_styleRubyOverhang {}
declare class MSHTML$_styleRubyOverhang__styleRubyOverhangNotSet mixins MSHTML$_styleRubyOverhang {}
declare class MSHTML$_styleRubyOverhang__styleRubyOverhangWhitespace mixins MSHTML$_styleRubyOverhang {}


declare  class MSHTML$_styleRubyPosition {
  constructor(...args: empty): mixed;
static +styleRubyPosition_Max: Class<MSHTML$_styleRubyPosition__styleRubyPosition_Max> & MSHTML$_styleRubyPosition__styleRubyPosition_Max & 2147483647;// 2147483647
static +styleRubyPositionAbove: Class<MSHTML$_styleRubyPosition__styleRubyPositionAbove> & MSHTML$_styleRubyPosition__styleRubyPositionAbove & 1;// 1
static +styleRubyPositionInline: Class<MSHTML$_styleRubyPosition__styleRubyPositionInline> & MSHTML$_styleRubyPosition__styleRubyPositionInline & 2;// 2
static +styleRubyPositionNotSet: Class<MSHTML$_styleRubyPosition__styleRubyPositionNotSet> & MSHTML$_styleRubyPosition__styleRubyPositionNotSet & 0;// 0

}

declare class MSHTML$_styleRubyPosition__styleRubyPosition_Max mixins MSHTML$_styleRubyPosition {}
declare class MSHTML$_styleRubyPosition__styleRubyPositionAbove mixins MSHTML$_styleRubyPosition {}
declare class MSHTML$_styleRubyPosition__styleRubyPositionInline mixins MSHTML$_styleRubyPosition {}
declare class MSHTML$_styleRubyPosition__styleRubyPositionNotSet mixins MSHTML$_styleRubyPosition {}


declare  class MSHTML$_styleStrokeLinecap {
  constructor(...args: empty): mixed;
static +styleStrokeLinecap_Max: Class<MSHTML$_styleStrokeLinecap__styleStrokeLinecap_Max> & MSHTML$_styleStrokeLinecap__styleStrokeLinecap_Max & 2147483647;// 2147483647
static +styleStrokeLinecapButt: Class<MSHTML$_styleStrokeLinecap__styleStrokeLinecapButt> & MSHTML$_styleStrokeLinecap__styleStrokeLinecapButt & 1;// 1
static +styleStrokeLinecapNotSet: Class<MSHTML$_styleStrokeLinecap__styleStrokeLinecapNotSet> & MSHTML$_styleStrokeLinecap__styleStrokeLinecapNotSet & 0;// 0
static +styleStrokeLinecapRound: Class<MSHTML$_styleStrokeLinecap__styleStrokeLinecapRound> & MSHTML$_styleStrokeLinecap__styleStrokeLinecapRound & 2;// 2
static +styleStrokeLinecapSquare: Class<MSHTML$_styleStrokeLinecap__styleStrokeLinecapSquare> & MSHTML$_styleStrokeLinecap__styleStrokeLinecapSquare & 3;// 3

}

declare class MSHTML$_styleStrokeLinecap__styleStrokeLinecap_Max mixins MSHTML$_styleStrokeLinecap {}
declare class MSHTML$_styleStrokeLinecap__styleStrokeLinecapButt mixins MSHTML$_styleStrokeLinecap {}
declare class MSHTML$_styleStrokeLinecap__styleStrokeLinecapNotSet mixins MSHTML$_styleStrokeLinecap {}
declare class MSHTML$_styleStrokeLinecap__styleStrokeLinecapRound mixins MSHTML$_styleStrokeLinecap {}
declare class MSHTML$_styleStrokeLinecap__styleStrokeLinecapSquare mixins MSHTML$_styleStrokeLinecap {}


declare  class MSHTML$_styleStrokeLinejoin {
  constructor(...args: empty): mixed;
static +styleStrokeLinejoin_Max: Class<MSHTML$_styleStrokeLinejoin__styleStrokeLinejoin_Max> & MSHTML$_styleStrokeLinejoin__styleStrokeLinejoin_Max & 2147483647;// 2147483647
static +styleStrokeLinejoinBevel: Class<MSHTML$_styleStrokeLinejoin__styleStrokeLinejoinBevel> & MSHTML$_styleStrokeLinejoin__styleStrokeLinejoinBevel & 3;// 3
static +styleStrokeLinejoinMiter: Class<MSHTML$_styleStrokeLinejoin__styleStrokeLinejoinMiter> & MSHTML$_styleStrokeLinejoin__styleStrokeLinejoinMiter & 1;// 1
static +styleStrokeLinejoinNotSet: Class<MSHTML$_styleStrokeLinejoin__styleStrokeLinejoinNotSet> & MSHTML$_styleStrokeLinejoin__styleStrokeLinejoinNotSet & 0;// 0
static +styleStrokeLinejoinRound: Class<MSHTML$_styleStrokeLinejoin__styleStrokeLinejoinRound> & MSHTML$_styleStrokeLinejoin__styleStrokeLinejoinRound & 2;// 2

}

declare class MSHTML$_styleStrokeLinejoin__styleStrokeLinejoin_Max mixins MSHTML$_styleStrokeLinejoin {}
declare class MSHTML$_styleStrokeLinejoin__styleStrokeLinejoinBevel mixins MSHTML$_styleStrokeLinejoin {}
declare class MSHTML$_styleStrokeLinejoin__styleStrokeLinejoinMiter mixins MSHTML$_styleStrokeLinejoin {}
declare class MSHTML$_styleStrokeLinejoin__styleStrokeLinejoinNotSet mixins MSHTML$_styleStrokeLinejoin {}
declare class MSHTML$_styleStrokeLinejoin__styleStrokeLinejoinRound mixins MSHTML$_styleStrokeLinejoin {}


declare  class MSHTML$_styleStyleFloat {
  constructor(...args: empty): mixed;
static +styleStyleFloat_Max: Class<MSHTML$_styleStyleFloat__styleStyleFloat_Max> & MSHTML$_styleStyleFloat__styleStyleFloat_Max & 2147483647;// 2147483647
static +styleStyleFloatLeft: Class<MSHTML$_styleStyleFloat__styleStyleFloatLeft> & MSHTML$_styleStyleFloat__styleStyleFloatLeft & 1;// 1
static +styleStyleFloatNone: Class<MSHTML$_styleStyleFloat__styleStyleFloatNone> & MSHTML$_styleStyleFloat__styleStyleFloatNone & 3;// 3
static +styleStyleFloatNotSet: Class<MSHTML$_styleStyleFloat__styleStyleFloatNotSet> & MSHTML$_styleStyleFloat__styleStyleFloatNotSet & 0;// 0
static +styleStyleFloatRight: Class<MSHTML$_styleStyleFloat__styleStyleFloatRight> & MSHTML$_styleStyleFloat__styleStyleFloatRight & 2;// 2

}

declare class MSHTML$_styleStyleFloat__styleStyleFloat_Max mixins MSHTML$_styleStyleFloat {}
declare class MSHTML$_styleStyleFloat__styleStyleFloatLeft mixins MSHTML$_styleStyleFloat {}
declare class MSHTML$_styleStyleFloat__styleStyleFloatNone mixins MSHTML$_styleStyleFloat {}
declare class MSHTML$_styleStyleFloat__styleStyleFloatNotSet mixins MSHTML$_styleStyleFloat {}
declare class MSHTML$_styleStyleFloat__styleStyleFloatRight mixins MSHTML$_styleStyleFloat {}


declare  class MSHTML$_styleTableLayout {
  constructor(...args: empty): mixed;
static +styleTableLayout_Max: Class<MSHTML$_styleTableLayout__styleTableLayout_Max> & MSHTML$_styleTableLayout__styleTableLayout_Max & 2147483647;// 2147483647
static +styleTableLayoutAuto: Class<MSHTML$_styleTableLayout__styleTableLayoutAuto> & MSHTML$_styleTableLayout__styleTableLayoutAuto & 1;// 1
static +styleTableLayoutFixed: Class<MSHTML$_styleTableLayout__styleTableLayoutFixed> & MSHTML$_styleTableLayout__styleTableLayoutFixed & 2;// 2
static +styleTableLayoutNotSet: Class<MSHTML$_styleTableLayout__styleTableLayoutNotSet> & MSHTML$_styleTableLayout__styleTableLayoutNotSet & 0;// 0

}

declare class MSHTML$_styleTableLayout__styleTableLayout_Max mixins MSHTML$_styleTableLayout {}
declare class MSHTML$_styleTableLayout__styleTableLayoutAuto mixins MSHTML$_styleTableLayout {}
declare class MSHTML$_styleTableLayout__styleTableLayoutFixed mixins MSHTML$_styleTableLayout {}
declare class MSHTML$_styleTableLayout__styleTableLayoutNotSet mixins MSHTML$_styleTableLayout {}


declare  class MSHTML$_styleTextAlignLast {
  constructor(...args: empty): mixed;
static +styleTextAlignLast_Max: Class<MSHTML$_styleTextAlignLast__styleTextAlignLast_Max> & MSHTML$_styleTextAlignLast__styleTextAlignLast_Max & 2147483647;// 2147483647
static +styleTextAlignLastAuto: Class<MSHTML$_styleTextAlignLast__styleTextAlignLastAuto> & MSHTML$_styleTextAlignLast__styleTextAlignLastAuto & 5;// 5
static +styleTextAlignLastCenter: Class<MSHTML$_styleTextAlignLast__styleTextAlignLastCenter> & MSHTML$_styleTextAlignLast__styleTextAlignLastCenter & 2;// 2
static +styleTextAlignLastJustify: Class<MSHTML$_styleTextAlignLast__styleTextAlignLastJustify> & MSHTML$_styleTextAlignLast__styleTextAlignLastJustify & 4;// 4
static +styleTextAlignLastLeft: Class<MSHTML$_styleTextAlignLast__styleTextAlignLastLeft> & MSHTML$_styleTextAlignLast__styleTextAlignLastLeft & 1;// 1
static +styleTextAlignLastNotSet: Class<MSHTML$_styleTextAlignLast__styleTextAlignLastNotSet> & MSHTML$_styleTextAlignLast__styleTextAlignLastNotSet & 0;// 0
static +styleTextAlignLastRight: Class<MSHTML$_styleTextAlignLast__styleTextAlignLastRight> & MSHTML$_styleTextAlignLast__styleTextAlignLastRight & 3;// 3

}

declare class MSHTML$_styleTextAlignLast__styleTextAlignLast_Max mixins MSHTML$_styleTextAlignLast {}
declare class MSHTML$_styleTextAlignLast__styleTextAlignLastAuto mixins MSHTML$_styleTextAlignLast {}
declare class MSHTML$_styleTextAlignLast__styleTextAlignLastCenter mixins MSHTML$_styleTextAlignLast {}
declare class MSHTML$_styleTextAlignLast__styleTextAlignLastJustify mixins MSHTML$_styleTextAlignLast {}
declare class MSHTML$_styleTextAlignLast__styleTextAlignLastLeft mixins MSHTML$_styleTextAlignLast {}
declare class MSHTML$_styleTextAlignLast__styleTextAlignLastNotSet mixins MSHTML$_styleTextAlignLast {}
declare class MSHTML$_styleTextAlignLast__styleTextAlignLastRight mixins MSHTML$_styleTextAlignLast {}


declare  class MSHTML$_styleTextAnchor {
  constructor(...args: empty): mixed;
static +styleTextAnchor_Max: Class<MSHTML$_styleTextAnchor__styleTextAnchor_Max> & MSHTML$_styleTextAnchor__styleTextAnchor_Max & 2147483647;// 2147483647
static +styleTextAnchorEnd: Class<MSHTML$_styleTextAnchor__styleTextAnchorEnd> & MSHTML$_styleTextAnchor__styleTextAnchorEnd & 3;// 3
static +styleTextAnchorMiddle: Class<MSHTML$_styleTextAnchor__styleTextAnchorMiddle> & MSHTML$_styleTextAnchor__styleTextAnchorMiddle & 2;// 2
static +styleTextAnchorNotSet: Class<MSHTML$_styleTextAnchor__styleTextAnchorNotSet> & MSHTML$_styleTextAnchor__styleTextAnchorNotSet & 0;// 0
static +styleTextAnchorStart: Class<MSHTML$_styleTextAnchor__styleTextAnchorStart> & MSHTML$_styleTextAnchor__styleTextAnchorStart & 1;// 1

}

declare class MSHTML$_styleTextAnchor__styleTextAnchor_Max mixins MSHTML$_styleTextAnchor {}
declare class MSHTML$_styleTextAnchor__styleTextAnchorEnd mixins MSHTML$_styleTextAnchor {}
declare class MSHTML$_styleTextAnchor__styleTextAnchorMiddle mixins MSHTML$_styleTextAnchor {}
declare class MSHTML$_styleTextAnchor__styleTextAnchorNotSet mixins MSHTML$_styleTextAnchor {}
declare class MSHTML$_styleTextAnchor__styleTextAnchorStart mixins MSHTML$_styleTextAnchor {}


declare  class MSHTML$_styleTextDecoration {
  constructor(...args: empty): mixed;
static +styleTextDecoration_Max: Class<MSHTML$_styleTextDecoration__styleTextDecoration_Max> & MSHTML$_styleTextDecoration__styleTextDecoration_Max & 2147483647;// 2147483647
static +styleTextDecorationBlink: Class<MSHTML$_styleTextDecoration__styleTextDecorationBlink> & MSHTML$_styleTextDecoration__styleTextDecorationBlink & 4;// 4
static +styleTextDecorationLineThrough: Class<MSHTML$_styleTextDecoration__styleTextDecorationLineThrough> & MSHTML$_styleTextDecoration__styleTextDecorationLineThrough & 3;// 3
static +styleTextDecorationNone: Class<MSHTML$_styleTextDecoration__styleTextDecorationNone> & MSHTML$_styleTextDecoration__styleTextDecorationNone & 0;// 0
static +styleTextDecorationOverline: Class<MSHTML$_styleTextDecoration__styleTextDecorationOverline> & MSHTML$_styleTextDecoration__styleTextDecorationOverline & 2;// 2
static +styleTextDecorationUnderline: Class<MSHTML$_styleTextDecoration__styleTextDecorationUnderline> & MSHTML$_styleTextDecoration__styleTextDecorationUnderline & 1;// 1

}

declare class MSHTML$_styleTextDecoration__styleTextDecoration_Max mixins MSHTML$_styleTextDecoration {}
declare class MSHTML$_styleTextDecoration__styleTextDecorationBlink mixins MSHTML$_styleTextDecoration {}
declare class MSHTML$_styleTextDecoration__styleTextDecorationLineThrough mixins MSHTML$_styleTextDecoration {}
declare class MSHTML$_styleTextDecoration__styleTextDecorationNone mixins MSHTML$_styleTextDecoration {}
declare class MSHTML$_styleTextDecoration__styleTextDecorationOverline mixins MSHTML$_styleTextDecoration {}
declare class MSHTML$_styleTextDecoration__styleTextDecorationUnderline mixins MSHTML$_styleTextDecoration {}


declare  class MSHTML$_styleTextEffect {
  constructor(...args: empty): mixed;
static +styleTextEffect_Max: Class<MSHTML$_styleTextEffect__styleTextEffect_Max> & MSHTML$_styleTextEffect__styleTextEffect_Max & 2147483647;// 2147483647
static +styleTextEffectEmboss: Class<MSHTML$_styleTextEffect__styleTextEffectEmboss> & MSHTML$_styleTextEffect__styleTextEffectEmboss & 1;// 1
static +styleTextEffectEngrave: Class<MSHTML$_styleTextEffect__styleTextEffectEngrave> & MSHTML$_styleTextEffect__styleTextEffectEngrave & 2;// 2
static +styleTextEffectNone: Class<MSHTML$_styleTextEffect__styleTextEffectNone> & MSHTML$_styleTextEffect__styleTextEffectNone & 0;// 0
static +styleTextEffectOutline: Class<MSHTML$_styleTextEffect__styleTextEffectOutline> & MSHTML$_styleTextEffect__styleTextEffectOutline & 3;// 3

}

declare class MSHTML$_styleTextEffect__styleTextEffect_Max mixins MSHTML$_styleTextEffect {}
declare class MSHTML$_styleTextEffect__styleTextEffectEmboss mixins MSHTML$_styleTextEffect {}
declare class MSHTML$_styleTextEffect__styleTextEffectEngrave mixins MSHTML$_styleTextEffect {}
declare class MSHTML$_styleTextEffect__styleTextEffectNone mixins MSHTML$_styleTextEffect {}
declare class MSHTML$_styleTextEffect__styleTextEffectOutline mixins MSHTML$_styleTextEffect {}


declare  class MSHTML$_styleTextJustify {
  constructor(...args: empty): mixed;
static +styleTextJustify_Max: Class<MSHTML$_styleTextJustify__styleTextJustify_Max> & MSHTML$_styleTextJustify__styleTextJustify_Max & 2147483647;// 2147483647
static +styleTextJustifyAuto: Class<MSHTML$_styleTextJustify__styleTextJustifyAuto> & MSHTML$_styleTextJustify__styleTextJustifyAuto & 8;// 8
static +styleTextJustifyDistribute: Class<MSHTML$_styleTextJustify__styleTextJustifyDistribute> & MSHTML$_styleTextJustify__styleTextJustifyDistribute & 3;// 3
static +styleTextJustifyDistributeAllLines: Class<MSHTML$_styleTextJustify__styleTextJustifyDistributeAllLines> & MSHTML$_styleTextJustify__styleTextJustifyDistributeAllLines & 4;// 4
static +styleTextJustifyInterCluster: Class<MSHTML$_styleTextJustify__styleTextJustifyInterCluster> & MSHTML$_styleTextJustify__styleTextJustifyInterCluster & 6;// 6
static +styleTextJustifyInterIdeograph: Class<MSHTML$_styleTextJustify__styleTextJustifyInterIdeograph> & MSHTML$_styleTextJustify__styleTextJustifyInterIdeograph & 5;// 5
static +styleTextJustifyInterWord: Class<MSHTML$_styleTextJustify__styleTextJustifyInterWord> & MSHTML$_styleTextJustify__styleTextJustifyInterWord & 1;// 1
static +styleTextJustifyKashida: Class<MSHTML$_styleTextJustify__styleTextJustifyKashida> & MSHTML$_styleTextJustify__styleTextJustifyKashida & 7;// 7
static +styleTextJustifyNewspaper: Class<MSHTML$_styleTextJustify__styleTextJustifyNewspaper> & MSHTML$_styleTextJustify__styleTextJustifyNewspaper & 2;// 2
static +styleTextJustifyNotSet: Class<MSHTML$_styleTextJustify__styleTextJustifyNotSet> & MSHTML$_styleTextJustify__styleTextJustifyNotSet & 0;// 0

}

declare class MSHTML$_styleTextJustify__styleTextJustify_Max mixins MSHTML$_styleTextJustify {}
declare class MSHTML$_styleTextJustify__styleTextJustifyAuto mixins MSHTML$_styleTextJustify {}
declare class MSHTML$_styleTextJustify__styleTextJustifyDistribute mixins MSHTML$_styleTextJustify {}
declare class MSHTML$_styleTextJustify__styleTextJustifyDistributeAllLines mixins MSHTML$_styleTextJustify {}
declare class MSHTML$_styleTextJustify__styleTextJustifyInterCluster mixins MSHTML$_styleTextJustify {}
declare class MSHTML$_styleTextJustify__styleTextJustifyInterIdeograph mixins MSHTML$_styleTextJustify {}
declare class MSHTML$_styleTextJustify__styleTextJustifyInterWord mixins MSHTML$_styleTextJustify {}
declare class MSHTML$_styleTextJustify__styleTextJustifyKashida mixins MSHTML$_styleTextJustify {}
declare class MSHTML$_styleTextJustify__styleTextJustifyNewspaper mixins MSHTML$_styleTextJustify {}
declare class MSHTML$_styleTextJustify__styleTextJustifyNotSet mixins MSHTML$_styleTextJustify {}


declare  class MSHTML$_styleTextJustifyTrim {
  constructor(...args: empty): mixed;
static +styleTextJustifyTrim_Max: Class<MSHTML$_styleTextJustifyTrim__styleTextJustifyTrim_Max> & MSHTML$_styleTextJustifyTrim__styleTextJustifyTrim_Max & 2147483647;// 2147483647
static +styleTextJustifyTrimNone: Class<MSHTML$_styleTextJustifyTrim__styleTextJustifyTrimNone> & MSHTML$_styleTextJustifyTrim__styleTextJustifyTrimNone & 1;// 1
static +styleTextJustifyTrimNotSet: Class<MSHTML$_styleTextJustifyTrim__styleTextJustifyTrimNotSet> & MSHTML$_styleTextJustifyTrim__styleTextJustifyTrimNotSet & 0;// 0
static +styleTextJustifyTrimPunctAndKana: Class<MSHTML$_styleTextJustifyTrim__styleTextJustifyTrimPunctAndKana> & MSHTML$_styleTextJustifyTrim__styleTextJustifyTrimPunctAndKana & 3;// 3
static +styleTextJustifyTrimPunctuation: Class<MSHTML$_styleTextJustifyTrim__styleTextJustifyTrimPunctuation> & MSHTML$_styleTextJustifyTrim__styleTextJustifyTrimPunctuation & 2;// 2

}

declare class MSHTML$_styleTextJustifyTrim__styleTextJustifyTrim_Max mixins MSHTML$_styleTextJustifyTrim {}
declare class MSHTML$_styleTextJustifyTrim__styleTextJustifyTrimNone mixins MSHTML$_styleTextJustifyTrim {}
declare class MSHTML$_styleTextJustifyTrim__styleTextJustifyTrimNotSet mixins MSHTML$_styleTextJustifyTrim {}
declare class MSHTML$_styleTextJustifyTrim__styleTextJustifyTrimPunctAndKana mixins MSHTML$_styleTextJustifyTrim {}
declare class MSHTML$_styleTextJustifyTrim__styleTextJustifyTrimPunctuation mixins MSHTML$_styleTextJustifyTrim {}


declare  class MSHTML$_styleTextLineThroughStyle {
  constructor(...args: empty): mixed;
static +styleTextLineThroughStyle_Max: Class<MSHTML$_styleTextLineThroughStyle__styleTextLineThroughStyle_Max> & MSHTML$_styleTextLineThroughStyle__styleTextLineThroughStyle_Max & 2147483647;// 2147483647
static +styleTextLineThroughStyleDouble: Class<MSHTML$_styleTextLineThroughStyle__styleTextLineThroughStyleDouble> & MSHTML$_styleTextLineThroughStyle__styleTextLineThroughStyleDouble & 2;// 2
static +styleTextLineThroughStyleSingle: Class<MSHTML$_styleTextLineThroughStyle__styleTextLineThroughStyleSingle> & MSHTML$_styleTextLineThroughStyle__styleTextLineThroughStyleSingle & 1;// 1
static +styleTextLineThroughStyleUndefined: Class<MSHTML$_styleTextLineThroughStyle__styleTextLineThroughStyleUndefined> & MSHTML$_styleTextLineThroughStyle__styleTextLineThroughStyleUndefined & 0;// 0

}

declare class MSHTML$_styleTextLineThroughStyle__styleTextLineThroughStyle_Max mixins MSHTML$_styleTextLineThroughStyle {}
declare class MSHTML$_styleTextLineThroughStyle__styleTextLineThroughStyleDouble mixins MSHTML$_styleTextLineThroughStyle {}
declare class MSHTML$_styleTextLineThroughStyle__styleTextLineThroughStyleSingle mixins MSHTML$_styleTextLineThroughStyle {}
declare class MSHTML$_styleTextLineThroughStyle__styleTextLineThroughStyleUndefined mixins MSHTML$_styleTextLineThroughStyle {}


declare  class MSHTML$_styleTextOverflow {
  constructor(...args: empty): mixed;
static +styleTextOverflow_Max: Class<MSHTML$_styleTextOverflow__styleTextOverflow_Max> & MSHTML$_styleTextOverflow__styleTextOverflow_Max & 2147483647;// 2147483647
static +styleTextOverflowClip: Class<MSHTML$_styleTextOverflow__styleTextOverflowClip> & MSHTML$_styleTextOverflow__styleTextOverflowClip & 0;// 0
static +styleTextOverflowEllipsis: Class<MSHTML$_styleTextOverflow__styleTextOverflowEllipsis> & MSHTML$_styleTextOverflow__styleTextOverflowEllipsis & 1;// 1
static +styleTextOverflowNotSet: Class<MSHTML$_styleTextOverflow__styleTextOverflowNotSet> & MSHTML$_styleTextOverflow__styleTextOverflowNotSet & 2;// 2

}

declare class MSHTML$_styleTextOverflow__styleTextOverflow_Max mixins MSHTML$_styleTextOverflow {}
declare class MSHTML$_styleTextOverflow__styleTextOverflowClip mixins MSHTML$_styleTextOverflow {}
declare class MSHTML$_styleTextOverflow__styleTextOverflowEllipsis mixins MSHTML$_styleTextOverflow {}
declare class MSHTML$_styleTextOverflow__styleTextOverflowNotSet mixins MSHTML$_styleTextOverflow {}


declare  class MSHTML$_styleTextSizeAdjust {
  constructor(...args: empty): mixed;
static +styleTextSizeAdjust_Max: Class<MSHTML$_styleTextSizeAdjust__styleTextSizeAdjust_Max> & MSHTML$_styleTextSizeAdjust__styleTextSizeAdjust_Max & 2147483647;// 2147483647
static +styleTextSizeAdjustAuto: Class<MSHTML$_styleTextSizeAdjust__styleTextSizeAdjustAuto> & MSHTML$_styleTextSizeAdjust__styleTextSizeAdjustAuto & 1;// 1
static +styleTextSizeAdjustNone: Class<MSHTML$_styleTextSizeAdjust__styleTextSizeAdjustNone> & MSHTML$_styleTextSizeAdjust__styleTextSizeAdjustNone & 0;// 0

}

declare class MSHTML$_styleTextSizeAdjust__styleTextSizeAdjust_Max mixins MSHTML$_styleTextSizeAdjust {}
declare class MSHTML$_styleTextSizeAdjust__styleTextSizeAdjustAuto mixins MSHTML$_styleTextSizeAdjust {}
declare class MSHTML$_styleTextSizeAdjust__styleTextSizeAdjustNone mixins MSHTML$_styleTextSizeAdjust {}


declare  class MSHTML$_styleTextTransform {
  constructor(...args: empty): mixed;
static +styleTextTransform_Max: Class<MSHTML$_styleTextTransform__styleTextTransform_Max> & MSHTML$_styleTextTransform__styleTextTransform_Max & 2147483647;// 2147483647
static +styleTextTransformCapitalize: Class<MSHTML$_styleTextTransform__styleTextTransformCapitalize> & MSHTML$_styleTextTransform__styleTextTransformCapitalize & 1;// 1
static +styleTextTransformLowercase: Class<MSHTML$_styleTextTransform__styleTextTransformLowercase> & MSHTML$_styleTextTransform__styleTextTransformLowercase & 2;// 2
static +styleTextTransformNone: Class<MSHTML$_styleTextTransform__styleTextTransformNone> & MSHTML$_styleTextTransform__styleTextTransformNone & 4;// 4
static +styleTextTransformNotSet: Class<MSHTML$_styleTextTransform__styleTextTransformNotSet> & MSHTML$_styleTextTransform__styleTextTransformNotSet & 0;// 0
static +styleTextTransformUppercase: Class<MSHTML$_styleTextTransform__styleTextTransformUppercase> & MSHTML$_styleTextTransform__styleTextTransformUppercase & 3;// 3

}

declare class MSHTML$_styleTextTransform__styleTextTransform_Max mixins MSHTML$_styleTextTransform {}
declare class MSHTML$_styleTextTransform__styleTextTransformCapitalize mixins MSHTML$_styleTextTransform {}
declare class MSHTML$_styleTextTransform__styleTextTransformLowercase mixins MSHTML$_styleTextTransform {}
declare class MSHTML$_styleTextTransform__styleTextTransformNone mixins MSHTML$_styleTextTransform {}
declare class MSHTML$_styleTextTransform__styleTextTransformNotSet mixins MSHTML$_styleTextTransform {}
declare class MSHTML$_styleTextTransform__styleTextTransformUppercase mixins MSHTML$_styleTextTransform {}


declare  class MSHTML$_styleTextUnderlinePosition {
  constructor(...args: empty): mixed;
static +styleTextUnderlinePosition_Max: Class<MSHTML$_styleTextUnderlinePosition__styleTextUnderlinePosition_Max> & MSHTML$_styleTextUnderlinePosition__styleTextUnderlinePosition_Max & 2147483647;// 2147483647
static +styleTextUnderlinePositionAbove: Class<MSHTML$_styleTextUnderlinePosition__styleTextUnderlinePositionAbove> & MSHTML$_styleTextUnderlinePosition__styleTextUnderlinePositionAbove & 1;// 1
static +styleTextUnderlinePositionAuto: Class<MSHTML$_styleTextUnderlinePosition__styleTextUnderlinePositionAuto> & MSHTML$_styleTextUnderlinePosition__styleTextUnderlinePositionAuto & 2;// 2
static +styleTextUnderlinePositionBelow: Class<MSHTML$_styleTextUnderlinePosition__styleTextUnderlinePositionBelow> & MSHTML$_styleTextUnderlinePosition__styleTextUnderlinePositionBelow & 0;// 0
static +styleTextUnderlinePositionNotSet: Class<MSHTML$_styleTextUnderlinePosition__styleTextUnderlinePositionNotSet> & MSHTML$_styleTextUnderlinePosition__styleTextUnderlinePositionNotSet & 3;// 3

}

declare class MSHTML$_styleTextUnderlinePosition__styleTextUnderlinePosition_Max mixins MSHTML$_styleTextUnderlinePosition {}
declare class MSHTML$_styleTextUnderlinePosition__styleTextUnderlinePositionAbove mixins MSHTML$_styleTextUnderlinePosition {}
declare class MSHTML$_styleTextUnderlinePosition__styleTextUnderlinePositionAuto mixins MSHTML$_styleTextUnderlinePosition {}
declare class MSHTML$_styleTextUnderlinePosition__styleTextUnderlinePositionBelow mixins MSHTML$_styleTextUnderlinePosition {}
declare class MSHTML$_styleTextUnderlinePosition__styleTextUnderlinePositionNotSet mixins MSHTML$_styleTextUnderlinePosition {}


declare  class MSHTML$_styleTextUnderlineStyle {
  constructor(...args: empty): mixed;
static +styleTextUnderlineStyle_Max: Class<MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyle_Max> & MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyle_Max & 2147483647;// 2147483647
static +styleTextUnderlineStyleDash: Class<MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDash> & MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDash & 6;// 6
static +styleTextUnderlineStyleDotDash: Class<MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDotDash> & MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDotDash & 7;// 7
static +styleTextUnderlineStyleDotDotDash: Class<MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDotDotDash> & MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDotDotDash & 8;// 8
static +styleTextUnderlineStyleDotted: Class<MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDotted> & MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDotted & 4;// 4
static +styleTextUnderlineStyleDouble: Class<MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDouble> & MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDouble & 2;// 2
static +styleTextUnderlineStyleDoubleAccounting: Class<MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDoubleAccounting> & MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDoubleAccounting & 11;// 11
static +styleTextUnderlineStyleSingle: Class<MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleSingle> & MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleSingle & 1;// 1
static +styleTextUnderlineStyleSingleAccounting: Class<MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleSingleAccounting> & MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleSingleAccounting & 10;// 10
static +styleTextUnderlineStyleThick: Class<MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleThick> & MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleThick & 5;// 5
static +styleTextUnderlineStyleThickDash: Class<MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleThickDash> & MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleThickDash & 12;// 12
static +styleTextUnderlineStyleUndefined: Class<MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleUndefined> & MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleUndefined & 0;// 0
static +styleTextUnderlineStyleWave: Class<MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleWave> & MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleWave & 9;// 9
static +styleTextUnderlineStyleWords: Class<MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleWords> & MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleWords & 3;// 3

}

declare class MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyle_Max mixins MSHTML$_styleTextUnderlineStyle {}
declare class MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDash mixins MSHTML$_styleTextUnderlineStyle {}
declare class MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDotDash mixins MSHTML$_styleTextUnderlineStyle {}
declare class MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDotDotDash mixins MSHTML$_styleTextUnderlineStyle {}
declare class MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDotted mixins MSHTML$_styleTextUnderlineStyle {}
declare class MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDouble mixins MSHTML$_styleTextUnderlineStyle {}
declare class MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleDoubleAccounting mixins MSHTML$_styleTextUnderlineStyle {}
declare class MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleSingle mixins MSHTML$_styleTextUnderlineStyle {}
declare class MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleSingleAccounting mixins MSHTML$_styleTextUnderlineStyle {}
declare class MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleThick mixins MSHTML$_styleTextUnderlineStyle {}
declare class MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleThickDash mixins MSHTML$_styleTextUnderlineStyle {}
declare class MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleUndefined mixins MSHTML$_styleTextUnderlineStyle {}
declare class MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleWave mixins MSHTML$_styleTextUnderlineStyle {}
declare class MSHTML$_styleTextUnderlineStyle__styleTextUnderlineStyleWords mixins MSHTML$_styleTextUnderlineStyle {}


declare  class MSHTML$_styleTransformOriginX {
  constructor(...args: empty): mixed;
static +styleTransformOriginX_Max: Class<MSHTML$_styleTransformOriginX__styleTransformOriginX_Max> & MSHTML$_styleTransformOriginX__styleTransformOriginX_Max & 2147483647;// 2147483647
static +styleTransformOriginXCenter: Class<MSHTML$_styleTransformOriginX__styleTransformOriginXCenter> & MSHTML$_styleTransformOriginX__styleTransformOriginXCenter & 2;// 2
static +styleTransformOriginXLeft: Class<MSHTML$_styleTransformOriginX__styleTransformOriginXLeft> & MSHTML$_styleTransformOriginX__styleTransformOriginXLeft & 1;// 1
static +styleTransformOriginXNotSet: Class<MSHTML$_styleTransformOriginX__styleTransformOriginXNotSet> & MSHTML$_styleTransformOriginX__styleTransformOriginXNotSet & 0;// 0
static +styleTransformOriginXRight: Class<MSHTML$_styleTransformOriginX__styleTransformOriginXRight> & MSHTML$_styleTransformOriginX__styleTransformOriginXRight & 3;// 3

}

declare class MSHTML$_styleTransformOriginX__styleTransformOriginX_Max mixins MSHTML$_styleTransformOriginX {}
declare class MSHTML$_styleTransformOriginX__styleTransformOriginXCenter mixins MSHTML$_styleTransformOriginX {}
declare class MSHTML$_styleTransformOriginX__styleTransformOriginXLeft mixins MSHTML$_styleTransformOriginX {}
declare class MSHTML$_styleTransformOriginX__styleTransformOriginXNotSet mixins MSHTML$_styleTransformOriginX {}
declare class MSHTML$_styleTransformOriginX__styleTransformOriginXRight mixins MSHTML$_styleTransformOriginX {}


declare  class MSHTML$_styleTransformOriginY {
  constructor(...args: empty): mixed;
static +styleTransformOriginY_Max: Class<MSHTML$_styleTransformOriginY__styleTransformOriginY_Max> & MSHTML$_styleTransformOriginY__styleTransformOriginY_Max & 2147483647;// 2147483647
static +styleTransformOriginYBottom: Class<MSHTML$_styleTransformOriginY__styleTransformOriginYBottom> & MSHTML$_styleTransformOriginY__styleTransformOriginYBottom & 3;// 3
static +styleTransformOriginYCenter: Class<MSHTML$_styleTransformOriginY__styleTransformOriginYCenter> & MSHTML$_styleTransformOriginY__styleTransformOriginYCenter & 2;// 2
static +styleTransformOriginYNotSet: Class<MSHTML$_styleTransformOriginY__styleTransformOriginYNotSet> & MSHTML$_styleTransformOriginY__styleTransformOriginYNotSet & 0;// 0
static +styleTransformOriginYTop: Class<MSHTML$_styleTransformOriginY__styleTransformOriginYTop> & MSHTML$_styleTransformOriginY__styleTransformOriginYTop & 1;// 1

}

declare class MSHTML$_styleTransformOriginY__styleTransformOriginY_Max mixins MSHTML$_styleTransformOriginY {}
declare class MSHTML$_styleTransformOriginY__styleTransformOriginYBottom mixins MSHTML$_styleTransformOriginY {}
declare class MSHTML$_styleTransformOriginY__styleTransformOriginYCenter mixins MSHTML$_styleTransformOriginY {}
declare class MSHTML$_styleTransformOriginY__styleTransformOriginYNotSet mixins MSHTML$_styleTransformOriginY {}
declare class MSHTML$_styleTransformOriginY__styleTransformOriginYTop mixins MSHTML$_styleTransformOriginY {}


declare  class MSHTML$_styleTransformStyle {
  constructor(...args: empty): mixed;
static +styleTransformStyle_Max: Class<MSHTML$_styleTransformStyle__styleTransformStyle_Max> & MSHTML$_styleTransformStyle__styleTransformStyle_Max & 2147483647;// 2147483647
static +styleTransformStyleFlat: Class<MSHTML$_styleTransformStyle__styleTransformStyleFlat> & MSHTML$_styleTransformStyle__styleTransformStyleFlat & 0;// 0
static +styleTransformStyleNotSet: Class<MSHTML$_styleTransformStyle__styleTransformStyleNotSet> & MSHTML$_styleTransformStyle__styleTransformStyleNotSet & 2;// 2
static +styleTransformStylePreserve3D: Class<MSHTML$_styleTransformStyle__styleTransformStylePreserve3D> & MSHTML$_styleTransformStyle__styleTransformStylePreserve3D & 1;// 1

}

declare class MSHTML$_styleTransformStyle__styleTransformStyle_Max mixins MSHTML$_styleTransformStyle {}
declare class MSHTML$_styleTransformStyle__styleTransformStyleFlat mixins MSHTML$_styleTransformStyle {}
declare class MSHTML$_styleTransformStyle__styleTransformStyleNotSet mixins MSHTML$_styleTransformStyle {}
declare class MSHTML$_styleTransformStyle__styleTransformStylePreserve3D mixins MSHTML$_styleTransformStyle {}


declare  class MSHTML$_styleUserZoom {
  constructor(...args: empty): mixed;
static +styleUserZoom_Max: Class<MSHTML$_styleUserZoom__styleUserZoom_Max> & MSHTML$_styleUserZoom__styleUserZoom_Max & 2147483647;// 2147483647
static +styleUserZoomFixed: Class<MSHTML$_styleUserZoom__styleUserZoomFixed> & MSHTML$_styleUserZoom__styleUserZoomFixed & 2;// 2
static +styleUserZoomNotSet: Class<MSHTML$_styleUserZoom__styleUserZoomNotSet> & MSHTML$_styleUserZoom__styleUserZoomNotSet & 0;// 0
static +styleUserZoomZoom: Class<MSHTML$_styleUserZoom__styleUserZoomZoom> & MSHTML$_styleUserZoom__styleUserZoomZoom & 1;// 1

}

declare class MSHTML$_styleUserZoom__styleUserZoom_Max mixins MSHTML$_styleUserZoom {}
declare class MSHTML$_styleUserZoom__styleUserZoomFixed mixins MSHTML$_styleUserZoom {}
declare class MSHTML$_styleUserZoom__styleUserZoomNotSet mixins MSHTML$_styleUserZoom {}
declare class MSHTML$_styleUserZoom__styleUserZoomZoom mixins MSHTML$_styleUserZoom {}


declare  class MSHTML$_styleVerticalAlign {
  constructor(...args: empty): mixed;
static +styleVerticalAlign_Max: Class<MSHTML$_styleVerticalAlign__styleVerticalAlign_Max> & MSHTML$_styleVerticalAlign__styleVerticalAlign_Max & 2147483647;// 2147483647
static +styleVerticalAlignAuto: Class<MSHTML$_styleVerticalAlign__styleVerticalAlignAuto> & MSHTML$_styleVerticalAlign__styleVerticalAlignAuto & 0;// 0
static +styleVerticalAlignBaseline: Class<MSHTML$_styleVerticalAlign__styleVerticalAlignBaseline> & MSHTML$_styleVerticalAlign__styleVerticalAlignBaseline & 1;// 1
static +styleVerticalAlignBottom: Class<MSHTML$_styleVerticalAlign__styleVerticalAlignBottom> & MSHTML$_styleVerticalAlign__styleVerticalAlignBottom & 7;// 7
static +styleVerticalAlignInherit: Class<MSHTML$_styleVerticalAlign__styleVerticalAlignInherit> & MSHTML$_styleVerticalAlign__styleVerticalAlignInherit & 9;// 9
static +styleVerticalAlignMiddle: Class<MSHTML$_styleVerticalAlign__styleVerticalAlignMiddle> & MSHTML$_styleVerticalAlign__styleVerticalAlignMiddle & 6;// 6
static +styleVerticalAlignNotSet: Class<MSHTML$_styleVerticalAlign__styleVerticalAlignNotSet> & MSHTML$_styleVerticalAlign__styleVerticalAlignNotSet & 10;// 10
static +styleVerticalAlignSub: Class<MSHTML$_styleVerticalAlign__styleVerticalAlignSub> & MSHTML$_styleVerticalAlign__styleVerticalAlignSub & 2;// 2
static +styleVerticalAlignSuper: Class<MSHTML$_styleVerticalAlign__styleVerticalAlignSuper> & MSHTML$_styleVerticalAlign__styleVerticalAlignSuper & 3;// 3
static +styleVerticalAlignTextBottom: Class<MSHTML$_styleVerticalAlign__styleVerticalAlignTextBottom> & MSHTML$_styleVerticalAlign__styleVerticalAlignTextBottom & 8;// 8
static +styleVerticalAlignTextTop: Class<MSHTML$_styleVerticalAlign__styleVerticalAlignTextTop> & MSHTML$_styleVerticalAlign__styleVerticalAlignTextTop & 5;// 5
static +styleVerticalAlignTop: Class<MSHTML$_styleVerticalAlign__styleVerticalAlignTop> & MSHTML$_styleVerticalAlign__styleVerticalAlignTop & 4;// 4

}

declare class MSHTML$_styleVerticalAlign__styleVerticalAlign_Max mixins MSHTML$_styleVerticalAlign {}
declare class MSHTML$_styleVerticalAlign__styleVerticalAlignAuto mixins MSHTML$_styleVerticalAlign {}
declare class MSHTML$_styleVerticalAlign__styleVerticalAlignBaseline mixins MSHTML$_styleVerticalAlign {}
declare class MSHTML$_styleVerticalAlign__styleVerticalAlignBottom mixins MSHTML$_styleVerticalAlign {}
declare class MSHTML$_styleVerticalAlign__styleVerticalAlignInherit mixins MSHTML$_styleVerticalAlign {}
declare class MSHTML$_styleVerticalAlign__styleVerticalAlignMiddle mixins MSHTML$_styleVerticalAlign {}
declare class MSHTML$_styleVerticalAlign__styleVerticalAlignNotSet mixins MSHTML$_styleVerticalAlign {}
declare class MSHTML$_styleVerticalAlign__styleVerticalAlignSub mixins MSHTML$_styleVerticalAlign {}
declare class MSHTML$_styleVerticalAlign__styleVerticalAlignSuper mixins MSHTML$_styleVerticalAlign {}
declare class MSHTML$_styleVerticalAlign__styleVerticalAlignTextBottom mixins MSHTML$_styleVerticalAlign {}
declare class MSHTML$_styleVerticalAlign__styleVerticalAlignTextTop mixins MSHTML$_styleVerticalAlign {}
declare class MSHTML$_styleVerticalAlign__styleVerticalAlignTop mixins MSHTML$_styleVerticalAlign {}


declare  class MSHTML$_styleViewportSize {
  constructor(...args: empty): mixed;
static +styleViewportSize_Max: Class<MSHTML$_styleViewportSize__styleViewportSize_Max> & MSHTML$_styleViewportSize__styleViewportSize_Max & 2147483647;// 2147483647
static +styleViewportSizeAuto: Class<MSHTML$_styleViewportSize__styleViewportSizeAuto> & MSHTML$_styleViewportSize__styleViewportSizeAuto & 0;// 0
static +styleViewportSizeDeviceHeight: Class<MSHTML$_styleViewportSize__styleViewportSizeDeviceHeight> & MSHTML$_styleViewportSize__styleViewportSizeDeviceHeight & 2;// 2
static +styleViewportSizeDeviceWidth: Class<MSHTML$_styleViewportSize__styleViewportSizeDeviceWidth> & MSHTML$_styleViewportSize__styleViewportSizeDeviceWidth & 1;// 1

}

declare class MSHTML$_styleViewportSize__styleViewportSize_Max mixins MSHTML$_styleViewportSize {}
declare class MSHTML$_styleViewportSize__styleViewportSizeAuto mixins MSHTML$_styleViewportSize {}
declare class MSHTML$_styleViewportSize__styleViewportSizeDeviceHeight mixins MSHTML$_styleViewportSize {}
declare class MSHTML$_styleViewportSize__styleViewportSizeDeviceWidth mixins MSHTML$_styleViewportSize {}


declare  class MSHTML$_styleVisibility {
  constructor(...args: empty): mixed;
static +styleVisibility_Max: Class<MSHTML$_styleVisibility__styleVisibility_Max> & MSHTML$_styleVisibility__styleVisibility_Max & 2147483647;// 2147483647
static +styleVisibilityCollapse: Class<MSHTML$_styleVisibility__styleVisibilityCollapse> & MSHTML$_styleVisibility__styleVisibilityCollapse & 4;// 4
static +styleVisibilityHidden: Class<MSHTML$_styleVisibility__styleVisibilityHidden> & MSHTML$_styleVisibility__styleVisibilityHidden & 3;// 3
static +styleVisibilityInherit: Class<MSHTML$_styleVisibility__styleVisibilityInherit> & MSHTML$_styleVisibility__styleVisibilityInherit & 1;// 1
static +styleVisibilityNotSet: Class<MSHTML$_styleVisibility__styleVisibilityNotSet> & MSHTML$_styleVisibility__styleVisibilityNotSet & 0;// 0
static +styleVisibilityVisible: Class<MSHTML$_styleVisibility__styleVisibilityVisible> & MSHTML$_styleVisibility__styleVisibilityVisible & 2;// 2

}

declare class MSHTML$_styleVisibility__styleVisibility_Max mixins MSHTML$_styleVisibility {}
declare class MSHTML$_styleVisibility__styleVisibilityCollapse mixins MSHTML$_styleVisibility {}
declare class MSHTML$_styleVisibility__styleVisibilityHidden mixins MSHTML$_styleVisibility {}
declare class MSHTML$_styleVisibility__styleVisibilityInherit mixins MSHTML$_styleVisibility {}
declare class MSHTML$_styleVisibility__styleVisibilityNotSet mixins MSHTML$_styleVisibility {}
declare class MSHTML$_styleVisibility__styleVisibilityVisible mixins MSHTML$_styleVisibility {}


declare  class MSHTML$_styleWebkitAppearance {
  constructor(...args: empty): mixed;
static +styleWebkitAppearance_Max: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearance_Max> & MSHTML$_styleWebkitAppearance__styleWebkitAppearance_Max & 2147483647;// 2147483647
static +styleWebkitAppearanceButton: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceButton> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceButton & 2;// 2
static +styleWebkitAppearanceButtonBevel: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceButtonBevel> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceButtonBevel & 3;// 3
static +styleWebkitAppearanceCapsLockIndicator: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceCapsLockIndicator> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceCapsLockIndicator & 1;// 1
static +styleWebkitAppearanceCaret: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceCaret> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceCaret & 4;// 4
static +styleWebkitAppearanceCheckbox: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceCheckbox> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceCheckbox & 5;// 5
static +styleWebkitAppearanceDefaultButton: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceDefaultButton> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceDefaultButton & 6;// 6
static +styleWebkitAppearanceListbox: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceListbox> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceListbox & 7;// 7
static +styleWebkitAppearanceListitem: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceListitem> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceListitem & 8;// 8
static +styleWebkitAppearanceMediaFullscreenButton: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaFullscreenButton> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaFullscreenButton & 9;// 9
static +styleWebkitAppearanceMediaMuteButton: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaMuteButton> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaMuteButton & 10;// 10
static +styleWebkitAppearanceMediaPlayButton: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaPlayButton> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaPlayButton & 11;// 11
static +styleWebkitAppearanceMediaSeekBackButton: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaSeekBackButton> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaSeekBackButton & 12;// 12
static +styleWebkitAppearanceMediaSeekForwardButton: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaSeekForwardButton> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaSeekForwardButton & 13;// 13
static +styleWebkitAppearanceMediaSlider: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaSlider> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaSlider & 14;// 14
static +styleWebkitAppearanceMediaSliderthumb: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaSliderthumb> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaSliderthumb & 15;// 15
static +styleWebkitAppearanceMenulist: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMenulist> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMenulist & 16;// 16
static +styleWebkitAppearanceMenulistButton: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMenulistButton> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMenulistButton & 17;// 17
static +styleWebkitAppearanceMenulistText: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMenulistText> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMenulistText & 18;// 18
static +styleWebkitAppearanceMenulistTextfield: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMenulistTextfield> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMenulistTextfield & 19;// 19
static +styleWebkitAppearanceNone: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceNone> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceNone & 0;// 0
static +styleWebkitAppearanceNotSet: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceNotSet> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceNotSet & 34;// 34
static +styleWebkitAppearancePushButton: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearancePushButton> & MSHTML$_styleWebkitAppearance__styleWebkitAppearancePushButton & 20;// 20
static +styleWebkitAppearanceRadio: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceRadio> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceRadio & 21;// 21
static +styleWebkitAppearanceSearchfield: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSearchfield> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSearchfield & 22;// 22
static +styleWebkitAppearanceSearchfieldCancelButton: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSearchfieldCancelButton> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSearchfieldCancelButton & 23;// 23
static +styleWebkitAppearanceSearchfieldDecoration: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSearchfieldDecoration> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSearchfieldDecoration & 24;// 24
static +styleWebkitAppearanceSearchfieldResultsButton: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSearchfieldResultsButton> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSearchfieldResultsButton & 25;// 25
static +styleWebkitAppearanceSearchfieldResultsDecoration: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSearchfieldResultsDecoration> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSearchfieldResultsDecoration & 26;// 26
static +styleWebkitAppearanceSliderHorizontal: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSliderHorizontal> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSliderHorizontal & 27;// 27
static +styleWebkitAppearanceSliderthumbHorizontal: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSliderthumbHorizontal> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSliderthumbHorizontal & 29;// 29
static +styleWebkitAppearanceSliderthumbVertical: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSliderthumbVertical> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSliderthumbVertical & 30;// 30
static +styleWebkitAppearanceSliderVertical: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSliderVertical> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSliderVertical & 28;// 28
static +styleWebkitAppearanceSquareButton: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSquareButton> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSquareButton & 31;// 31
static +styleWebkitAppearanceTextarea: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceTextarea> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceTextarea & 32;// 32
static +styleWebkitAppearanceTextfield: Class<MSHTML$_styleWebkitAppearance__styleWebkitAppearanceTextfield> & MSHTML$_styleWebkitAppearance__styleWebkitAppearanceTextfield & 33;// 33

}

declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearance_Max mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceButton mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceButtonBevel mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceCapsLockIndicator mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceCaret mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceCheckbox mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceDefaultButton mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceListbox mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceListitem mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaFullscreenButton mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaMuteButton mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaPlayButton mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaSeekBackButton mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaSeekForwardButton mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaSlider mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMediaSliderthumb mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMenulist mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMenulistButton mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMenulistText mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceMenulistTextfield mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceNone mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceNotSet mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearancePushButton mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceRadio mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSearchfield mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSearchfieldCancelButton mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSearchfieldDecoration mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSearchfieldResultsButton mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSearchfieldResultsDecoration mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSliderHorizontal mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSliderthumbHorizontal mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSliderthumbVertical mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSliderVertical mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceSquareButton mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceTextarea mixins MSHTML$_styleWebkitAppearance {}
declare class MSHTML$_styleWebkitAppearance__styleWebkitAppearanceTextfield mixins MSHTML$_styleWebkitAppearance {}


declare  class MSHTML$_styleWebkitBoxDirection {
  constructor(...args: empty): mixed;
static +styleWebkitBoxDirection_Max: Class<MSHTML$_styleWebkitBoxDirection__styleWebkitBoxDirection_Max> & MSHTML$_styleWebkitBoxDirection__styleWebkitBoxDirection_Max & 2147483647;// 2147483647
static +styleWebkitBoxDirectionNormal: Class<MSHTML$_styleWebkitBoxDirection__styleWebkitBoxDirectionNormal> & MSHTML$_styleWebkitBoxDirection__styleWebkitBoxDirectionNormal & 0;// 0
static +styleWebkitBoxDirectionNotSet: Class<MSHTML$_styleWebkitBoxDirection__styleWebkitBoxDirectionNotSet> & MSHTML$_styleWebkitBoxDirection__styleWebkitBoxDirectionNotSet & 2;// 2
static +styleWebkitBoxDirectionReverse: Class<MSHTML$_styleWebkitBoxDirection__styleWebkitBoxDirectionReverse> & MSHTML$_styleWebkitBoxDirection__styleWebkitBoxDirectionReverse & 1;// 1

}

declare class MSHTML$_styleWebkitBoxDirection__styleWebkitBoxDirection_Max mixins MSHTML$_styleWebkitBoxDirection {}
declare class MSHTML$_styleWebkitBoxDirection__styleWebkitBoxDirectionNormal mixins MSHTML$_styleWebkitBoxDirection {}
declare class MSHTML$_styleWebkitBoxDirection__styleWebkitBoxDirectionNotSet mixins MSHTML$_styleWebkitBoxDirection {}
declare class MSHTML$_styleWebkitBoxDirection__styleWebkitBoxDirectionReverse mixins MSHTML$_styleWebkitBoxDirection {}


declare  class MSHTML$_styleWebkitBoxOrient {
  constructor(...args: empty): mixed;
static +styleWebkitBoxOrient_Max: Class<MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrient_Max> & MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrient_Max & 2147483647;// 2147483647
static +styleWebkitBoxOrientBlockAxis: Class<MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrientBlockAxis> & MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrientBlockAxis & 3;// 3
static +styleWebkitBoxOrientHorizontal: Class<MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrientHorizontal> & MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrientHorizontal & 0;// 0
static +styleWebkitBoxOrientInlineAxis: Class<MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrientInlineAxis> & MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrientInlineAxis & 1;// 1
static +styleWebkitBoxOrientNotSet: Class<MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrientNotSet> & MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrientNotSet & 4;// 4
static +styleWebkitBoxOrientVertical: Class<MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrientVertical> & MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrientVertical & 2;// 2

}

declare class MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrient_Max mixins MSHTML$_styleWebkitBoxOrient {}
declare class MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrientBlockAxis mixins MSHTML$_styleWebkitBoxOrient {}
declare class MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrientHorizontal mixins MSHTML$_styleWebkitBoxOrient {}
declare class MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrientInlineAxis mixins MSHTML$_styleWebkitBoxOrient {}
declare class MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrientNotSet mixins MSHTML$_styleWebkitBoxOrient {}
declare class MSHTML$_styleWebkitBoxOrient__styleWebkitBoxOrientVertical mixins MSHTML$_styleWebkitBoxOrient {}


declare  class MSHTML$_styleWebkitBoxPack {
  constructor(...args: empty): mixed;
static +styleWebkitBoxPack_Max: Class<MSHTML$_styleWebkitBoxPack__styleWebkitBoxPack_Max> & MSHTML$_styleWebkitBoxPack__styleWebkitBoxPack_Max & 2147483647;// 2147483647
static +styleWebkitBoxPackCenter: Class<MSHTML$_styleWebkitBoxPack__styleWebkitBoxPackCenter> & MSHTML$_styleWebkitBoxPack__styleWebkitBoxPackCenter & 2;// 2
static +styleWebkitBoxPackEnd: Class<MSHTML$_styleWebkitBoxPack__styleWebkitBoxPackEnd> & MSHTML$_styleWebkitBoxPack__styleWebkitBoxPackEnd & 1;// 1
static +styleWebkitBoxPackJustify: Class<MSHTML$_styleWebkitBoxPack__styleWebkitBoxPackJustify> & MSHTML$_styleWebkitBoxPack__styleWebkitBoxPackJustify & 3;// 3
static +styleWebkitBoxPackNotSet: Class<MSHTML$_styleWebkitBoxPack__styleWebkitBoxPackNotSet> & MSHTML$_styleWebkitBoxPack__styleWebkitBoxPackNotSet & 5;// 5
static +styleWebkitBoxPackStart: Class<MSHTML$_styleWebkitBoxPack__styleWebkitBoxPackStart> & MSHTML$_styleWebkitBoxPack__styleWebkitBoxPackStart & 0;// 0

}

declare class MSHTML$_styleWebkitBoxPack__styleWebkitBoxPack_Max mixins MSHTML$_styleWebkitBoxPack {}
declare class MSHTML$_styleWebkitBoxPack__styleWebkitBoxPackCenter mixins MSHTML$_styleWebkitBoxPack {}
declare class MSHTML$_styleWebkitBoxPack__styleWebkitBoxPackEnd mixins MSHTML$_styleWebkitBoxPack {}
declare class MSHTML$_styleWebkitBoxPack__styleWebkitBoxPackJustify mixins MSHTML$_styleWebkitBoxPack {}
declare class MSHTML$_styleWebkitBoxPack__styleWebkitBoxPackNotSet mixins MSHTML$_styleWebkitBoxPack {}
declare class MSHTML$_styleWebkitBoxPack__styleWebkitBoxPackStart mixins MSHTML$_styleWebkitBoxPack {}


declare  class MSHTML$_styleWhiteSpace {
  constructor(...args: empty): mixed;
static +styleWhiteSpace_Max: Class<MSHTML$_styleWhiteSpace__styleWhiteSpace_Max> & MSHTML$_styleWhiteSpace__styleWhiteSpace_Max & 2147483647;// 2147483647
static +styleWhiteSpaceNormal: Class<MSHTML$_styleWhiteSpace__styleWhiteSpaceNormal> & MSHTML$_styleWhiteSpace__styleWhiteSpaceNormal & 1;// 1
static +styleWhiteSpaceNotSet: Class<MSHTML$_styleWhiteSpace__styleWhiteSpaceNotSet> & MSHTML$_styleWhiteSpace__styleWhiteSpaceNotSet & 0;// 0
static +styleWhiteSpaceNowrap: Class<MSHTML$_styleWhiteSpace__styleWhiteSpaceNowrap> & MSHTML$_styleWhiteSpace__styleWhiteSpaceNowrap & 3;// 3
static +styleWhiteSpacePre: Class<MSHTML$_styleWhiteSpace__styleWhiteSpacePre> & MSHTML$_styleWhiteSpace__styleWhiteSpacePre & 2;// 2
static +styleWhiteSpacePreline: Class<MSHTML$_styleWhiteSpace__styleWhiteSpacePreline> & MSHTML$_styleWhiteSpace__styleWhiteSpacePreline & 4;// 4
static +styleWhiteSpacePrewrap: Class<MSHTML$_styleWhiteSpace__styleWhiteSpacePrewrap> & MSHTML$_styleWhiteSpace__styleWhiteSpacePrewrap & 5;// 5

}

declare class MSHTML$_styleWhiteSpace__styleWhiteSpace_Max mixins MSHTML$_styleWhiteSpace {}
declare class MSHTML$_styleWhiteSpace__styleWhiteSpaceNormal mixins MSHTML$_styleWhiteSpace {}
declare class MSHTML$_styleWhiteSpace__styleWhiteSpaceNotSet mixins MSHTML$_styleWhiteSpace {}
declare class MSHTML$_styleWhiteSpace__styleWhiteSpaceNowrap mixins MSHTML$_styleWhiteSpace {}
declare class MSHTML$_styleWhiteSpace__styleWhiteSpacePre mixins MSHTML$_styleWhiteSpace {}
declare class MSHTML$_styleWhiteSpace__styleWhiteSpacePreline mixins MSHTML$_styleWhiteSpace {}
declare class MSHTML$_styleWhiteSpace__styleWhiteSpacePrewrap mixins MSHTML$_styleWhiteSpace {}


declare  class MSHTML$_styleWidowsOrphans {
  constructor(...args: empty): mixed;
static +styleWidowsOrphans_Max: Class<MSHTML$_styleWidowsOrphans__styleWidowsOrphans_Max> & MSHTML$_styleWidowsOrphans__styleWidowsOrphans_Max & 2147483647;// 2147483647
static +styleWidowsOrphansNotSet: Class<MSHTML$_styleWidowsOrphans__styleWidowsOrphansNotSet> & MSHTML$_styleWidowsOrphans__styleWidowsOrphansNotSet & -2147483647;// -2147483647

}

declare class MSHTML$_styleWidowsOrphans__styleWidowsOrphans_Max mixins MSHTML$_styleWidowsOrphans {}
declare class MSHTML$_styleWidowsOrphans__styleWidowsOrphansNotSet mixins MSHTML$_styleWidowsOrphans {}


declare  class MSHTML$_styleWordBreak {
  constructor(...args: empty): mixed;
static +styleWordBreak_Max: Class<MSHTML$_styleWordBreak__styleWordBreak_Max> & MSHTML$_styleWordBreak__styleWordBreak_Max & 2147483647;// 2147483647
static +styleWordBreakBreakAll: Class<MSHTML$_styleWordBreak__styleWordBreakBreakAll> & MSHTML$_styleWordBreak__styleWordBreakBreakAll & 2;// 2
static +styleWordBreakKeepAll: Class<MSHTML$_styleWordBreak__styleWordBreakKeepAll> & MSHTML$_styleWordBreak__styleWordBreakKeepAll & 3;// 3
static +styleWordBreakNormal: Class<MSHTML$_styleWordBreak__styleWordBreakNormal> & MSHTML$_styleWordBreak__styleWordBreakNormal & 1;// 1
static +styleWordBreakNotSet: Class<MSHTML$_styleWordBreak__styleWordBreakNotSet> & MSHTML$_styleWordBreak__styleWordBreakNotSet & 0;// 0

}

declare class MSHTML$_styleWordBreak__styleWordBreak_Max mixins MSHTML$_styleWordBreak {}
declare class MSHTML$_styleWordBreak__styleWordBreakBreakAll mixins MSHTML$_styleWordBreak {}
declare class MSHTML$_styleWordBreak__styleWordBreakKeepAll mixins MSHTML$_styleWordBreak {}
declare class MSHTML$_styleWordBreak__styleWordBreakNormal mixins MSHTML$_styleWordBreak {}
declare class MSHTML$_styleWordBreak__styleWordBreakNotSet mixins MSHTML$_styleWordBreak {}


declare  class MSHTML$_styleWordWrap {
  constructor(...args: empty): mixed;
static +styleWordWrap_Max: Class<MSHTML$_styleWordWrap__styleWordWrap_Max> & MSHTML$_styleWordWrap__styleWordWrap_Max & 2147483647;// 2147483647
static +styleWordWrapNotSet: Class<MSHTML$_styleWordWrap__styleWordWrapNotSet> & MSHTML$_styleWordWrap__styleWordWrapNotSet & 0;// 0
static +styleWordWrapOff: Class<MSHTML$_styleWordWrap__styleWordWrapOff> & MSHTML$_styleWordWrap__styleWordWrapOff & 1;// 1
static +styleWordWrapOn: Class<MSHTML$_styleWordWrap__styleWordWrapOn> & MSHTML$_styleWordWrap__styleWordWrapOn & 2;// 2

}

declare class MSHTML$_styleWordWrap__styleWordWrap_Max mixins MSHTML$_styleWordWrap {}
declare class MSHTML$_styleWordWrap__styleWordWrapNotSet mixins MSHTML$_styleWordWrap {}
declare class MSHTML$_styleWordWrap__styleWordWrapOff mixins MSHTML$_styleWordWrap {}
declare class MSHTML$_styleWordWrap__styleWordWrapOn mixins MSHTML$_styleWordWrap {}


declare  class MSHTML$_styleWrapFlow {
  constructor(...args: empty): mixed;
static +styleWrapFlow_Max: Class<MSHTML$_styleWrapFlow__styleWrapFlow_Max> & MSHTML$_styleWrapFlow__styleWrapFlow_Max & 2147483647;// 2147483647
static +styleWrapFlowAuto: Class<MSHTML$_styleWrapFlow__styleWrapFlowAuto> & MSHTML$_styleWrapFlow__styleWrapFlowAuto & 1;// 1
static +styleWrapFlowBoth: Class<MSHTML$_styleWrapFlow__styleWrapFlowBoth> & MSHTML$_styleWrapFlow__styleWrapFlowBoth & 2;// 2
static +styleWrapFlowClear: Class<MSHTML$_styleWrapFlow__styleWrapFlowClear> & MSHTML$_styleWrapFlow__styleWrapFlowClear & 5;// 5
static +styleWrapFlowEnd: Class<MSHTML$_styleWrapFlow__styleWrapFlowEnd> & MSHTML$_styleWrapFlow__styleWrapFlowEnd & 4;// 4
static +styleWrapFlowMaximum: Class<MSHTML$_styleWrapFlow__styleWrapFlowMaximum> & MSHTML$_styleWrapFlow__styleWrapFlowMaximum & 7;// 7
static +styleWrapFlowMinimum: Class<MSHTML$_styleWrapFlow__styleWrapFlowMinimum> & MSHTML$_styleWrapFlow__styleWrapFlowMinimum & 6;// 6
static +styleWrapFlowNotSet: Class<MSHTML$_styleWrapFlow__styleWrapFlowNotSet> & MSHTML$_styleWrapFlow__styleWrapFlowNotSet & 0;// 0
static +styleWrapFlowStart: Class<MSHTML$_styleWrapFlow__styleWrapFlowStart> & MSHTML$_styleWrapFlow__styleWrapFlowStart & 3;// 3

}

declare class MSHTML$_styleWrapFlow__styleWrapFlow_Max mixins MSHTML$_styleWrapFlow {}
declare class MSHTML$_styleWrapFlow__styleWrapFlowAuto mixins MSHTML$_styleWrapFlow {}
declare class MSHTML$_styleWrapFlow__styleWrapFlowBoth mixins MSHTML$_styleWrapFlow {}
declare class MSHTML$_styleWrapFlow__styleWrapFlowClear mixins MSHTML$_styleWrapFlow {}
declare class MSHTML$_styleWrapFlow__styleWrapFlowEnd mixins MSHTML$_styleWrapFlow {}
declare class MSHTML$_styleWrapFlow__styleWrapFlowMaximum mixins MSHTML$_styleWrapFlow {}
declare class MSHTML$_styleWrapFlow__styleWrapFlowMinimum mixins MSHTML$_styleWrapFlow {}
declare class MSHTML$_styleWrapFlow__styleWrapFlowNotSet mixins MSHTML$_styleWrapFlow {}
declare class MSHTML$_styleWrapFlow__styleWrapFlowStart mixins MSHTML$_styleWrapFlow {}


declare  class MSHTML$_styleWrapThrough {
  constructor(...args: empty): mixed;
static +styleWrapThrough_Max: Class<MSHTML$_styleWrapThrough__styleWrapThrough_Max> & MSHTML$_styleWrapThrough__styleWrapThrough_Max & 2147483647;// 2147483647
static +styleWrapThroughNone: Class<MSHTML$_styleWrapThrough__styleWrapThroughNone> & MSHTML$_styleWrapThrough__styleWrapThroughNone & 2;// 2
static +styleWrapThroughNotSet: Class<MSHTML$_styleWrapThrough__styleWrapThroughNotSet> & MSHTML$_styleWrapThrough__styleWrapThroughNotSet & 0;// 0
static +styleWrapThroughWrap: Class<MSHTML$_styleWrapThrough__styleWrapThroughWrap> & MSHTML$_styleWrapThrough__styleWrapThroughWrap & 1;// 1

}

declare class MSHTML$_styleWrapThrough__styleWrapThrough_Max mixins MSHTML$_styleWrapThrough {}
declare class MSHTML$_styleWrapThrough__styleWrapThroughNone mixins MSHTML$_styleWrapThrough {}
declare class MSHTML$_styleWrapThrough__styleWrapThroughNotSet mixins MSHTML$_styleWrapThrough {}
declare class MSHTML$_styleWrapThrough__styleWrapThroughWrap mixins MSHTML$_styleWrapThrough {}


declare  class MSHTML$_styleWritingMode {
  constructor(...args: empty): mixed;
static +styleWritingMode_Max: Class<MSHTML$_styleWritingMode__styleWritingMode_Max> & MSHTML$_styleWritingMode__styleWritingMode_Max & 2147483647;// 2147483647
static +styleWritingModeBtlr: Class<MSHTML$_styleWritingMode__styleWritingModeBtlr> & MSHTML$_styleWritingMode__styleWritingModeBtlr & 6;// 6
static +styleWritingModeBtrl: Class<MSHTML$_styleWritingMode__styleWritingModeBtrl> & MSHTML$_styleWritingMode__styleWritingModeBtrl & 3;// 3
static +styleWritingModeLr: Class<MSHTML$_styleWritingMode__styleWritingModeLr> & MSHTML$_styleWritingMode__styleWritingModeLr & 9;// 9
static +styleWritingModeLrbt: Class<MSHTML$_styleWritingMode__styleWritingModeLrbt> & MSHTML$_styleWritingMode__styleWritingModeLrbt & 7;// 7
static +styleWritingModeLrtb: Class<MSHTML$_styleWritingMode__styleWritingModeLrtb> & MSHTML$_styleWritingMode__styleWritingModeLrtb & 0;// 0
static +styleWritingModeNotSet: Class<MSHTML$_styleWritingMode__styleWritingModeNotSet> & MSHTML$_styleWritingMode__styleWritingModeNotSet & 4;// 4
static +styleWritingModeRl: Class<MSHTML$_styleWritingMode__styleWritingModeRl> & MSHTML$_styleWritingMode__styleWritingModeRl & 10;// 10
static +styleWritingModeRlbt: Class<MSHTML$_styleWritingMode__styleWritingModeRlbt> & MSHTML$_styleWritingMode__styleWritingModeRlbt & 8;// 8
static +styleWritingModeRltb: Class<MSHTML$_styleWritingMode__styleWritingModeRltb> & MSHTML$_styleWritingMode__styleWritingModeRltb & 2;// 2
static +styleWritingModeTb: Class<MSHTML$_styleWritingMode__styleWritingModeTb> & MSHTML$_styleWritingMode__styleWritingModeTb & 11;// 11
static +styleWritingModeTblr: Class<MSHTML$_styleWritingMode__styleWritingModeTblr> & MSHTML$_styleWritingMode__styleWritingModeTblr & 5;// 5
static +styleWritingModeTbrl: Class<MSHTML$_styleWritingMode__styleWritingModeTbrl> & MSHTML$_styleWritingMode__styleWritingModeTbrl & 1;// 1

}

declare class MSHTML$_styleWritingMode__styleWritingMode_Max mixins MSHTML$_styleWritingMode {}
declare class MSHTML$_styleWritingMode__styleWritingModeBtlr mixins MSHTML$_styleWritingMode {}
declare class MSHTML$_styleWritingMode__styleWritingModeBtrl mixins MSHTML$_styleWritingMode {}
declare class MSHTML$_styleWritingMode__styleWritingModeLr mixins MSHTML$_styleWritingMode {}
declare class MSHTML$_styleWritingMode__styleWritingModeLrbt mixins MSHTML$_styleWritingMode {}
declare class MSHTML$_styleWritingMode__styleWritingModeLrtb mixins MSHTML$_styleWritingMode {}
declare class MSHTML$_styleWritingMode__styleWritingModeNotSet mixins MSHTML$_styleWritingMode {}
declare class MSHTML$_styleWritingMode__styleWritingModeRl mixins MSHTML$_styleWritingMode {}
declare class MSHTML$_styleWritingMode__styleWritingModeRlbt mixins MSHTML$_styleWritingMode {}
declare class MSHTML$_styleWritingMode__styleWritingModeRltb mixins MSHTML$_styleWritingMode {}
declare class MSHTML$_styleWritingMode__styleWritingModeTb mixins MSHTML$_styleWritingMode {}
declare class MSHTML$_styleWritingMode__styleWritingModeTblr mixins MSHTML$_styleWritingMode {}
declare class MSHTML$_styleWritingMode__styleWritingModeTbrl mixins MSHTML$_styleWritingMode {}


declare  class MSHTML$_styleZIndex {
  constructor(...args: empty): mixed;
static +styleZIndex_Max: Class<MSHTML$_styleZIndex__styleZIndex_Max> & MSHTML$_styleZIndex__styleZIndex_Max & 2147483647;// 2147483647
static +styleZIndexAuto: Class<MSHTML$_styleZIndex__styleZIndexAuto> & MSHTML$_styleZIndex__styleZIndexAuto & -2147483647;// -2147483647

}

declare class MSHTML$_styleZIndex__styleZIndex_Max mixins MSHTML$_styleZIndex {}
declare class MSHTML$_styleZIndex__styleZIndexAuto mixins MSHTML$_styleZIndex {}


declare  class MSHTML$_svgAngleType {
  constructor(...args: empty): mixed;
static +SVG_ANGLETYPE_DEG: Class<MSHTML$_svgAngleType__SVG_ANGLETYPE_DEG> & MSHTML$_svgAngleType__SVG_ANGLETYPE_DEG & 2;// 2
static +SVG_ANGLETYPE_GRAD: Class<MSHTML$_svgAngleType__SVG_ANGLETYPE_GRAD> & MSHTML$_svgAngleType__SVG_ANGLETYPE_GRAD & 4;// 4
static +SVG_ANGLETYPE_RAD: Class<MSHTML$_svgAngleType__SVG_ANGLETYPE_RAD> & MSHTML$_svgAngleType__SVG_ANGLETYPE_RAD & 3;// 3
static +SVG_ANGLETYPE_UNKNOWN: Class<MSHTML$_svgAngleType__SVG_ANGLETYPE_UNKNOWN> & MSHTML$_svgAngleType__SVG_ANGLETYPE_UNKNOWN & 0;// 0
static +SVG_ANGLETYPE_UNSPECIFIED: Class<MSHTML$_svgAngleType__SVG_ANGLETYPE_UNSPECIFIED> & MSHTML$_svgAngleType__SVG_ANGLETYPE_UNSPECIFIED & 1;// 1
static +svgAngleType_Max: Class<MSHTML$_svgAngleType__svgAngleType_Max> & MSHTML$_svgAngleType__svgAngleType_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgAngleType__SVG_ANGLETYPE_DEG mixins MSHTML$_svgAngleType {}
declare class MSHTML$_svgAngleType__SVG_ANGLETYPE_GRAD mixins MSHTML$_svgAngleType {}
declare class MSHTML$_svgAngleType__SVG_ANGLETYPE_RAD mixins MSHTML$_svgAngleType {}
declare class MSHTML$_svgAngleType__SVG_ANGLETYPE_UNKNOWN mixins MSHTML$_svgAngleType {}
declare class MSHTML$_svgAngleType__SVG_ANGLETYPE_UNSPECIFIED mixins MSHTML$_svgAngleType {}
declare class MSHTML$_svgAngleType__svgAngleType_Max mixins MSHTML$_svgAngleType {}


declare  class MSHTML$_svgChannel {
  constructor(...args: empty): mixed;
static +SVG_CHANNEL_A: Class<MSHTML$_svgChannel__SVG_CHANNEL_A> & MSHTML$_svgChannel__SVG_CHANNEL_A & 4;// 4
static +SVG_CHANNEL_B: Class<MSHTML$_svgChannel__SVG_CHANNEL_B> & MSHTML$_svgChannel__SVG_CHANNEL_B & 3;// 3
static +SVG_CHANNEL_G: Class<MSHTML$_svgChannel__SVG_CHANNEL_G> & MSHTML$_svgChannel__SVG_CHANNEL_G & 2;// 2
static +SVG_CHANNEL_R: Class<MSHTML$_svgChannel__SVG_CHANNEL_R> & MSHTML$_svgChannel__SVG_CHANNEL_R & 1;// 1
static +SVG_CHANNEL_UNKNOWN: Class<MSHTML$_svgChannel__SVG_CHANNEL_UNKNOWN> & MSHTML$_svgChannel__SVG_CHANNEL_UNKNOWN & 0;// 0
static +svgChannel_Max: Class<MSHTML$_svgChannel__svgChannel_Max> & MSHTML$_svgChannel__svgChannel_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgChannel__SVG_CHANNEL_A mixins MSHTML$_svgChannel {}
declare class MSHTML$_svgChannel__SVG_CHANNEL_B mixins MSHTML$_svgChannel {}
declare class MSHTML$_svgChannel__SVG_CHANNEL_G mixins MSHTML$_svgChannel {}
declare class MSHTML$_svgChannel__SVG_CHANNEL_R mixins MSHTML$_svgChannel {}
declare class MSHTML$_svgChannel__SVG_CHANNEL_UNKNOWN mixins MSHTML$_svgChannel {}
declare class MSHTML$_svgChannel__svgChannel_Max mixins MSHTML$_svgChannel {}


declare  class MSHTML$_svgEdgemode {
  constructor(...args: empty): mixed;
static +SVG_EDGEMODE_DUPLICATE: Class<MSHTML$_svgEdgemode__SVG_EDGEMODE_DUPLICATE> & MSHTML$_svgEdgemode__SVG_EDGEMODE_DUPLICATE & 1;// 1
static +SVG_EDGEMODE_NONE: Class<MSHTML$_svgEdgemode__SVG_EDGEMODE_NONE> & MSHTML$_svgEdgemode__SVG_EDGEMODE_NONE & 3;// 3
static +SVG_EDGEMODE_UNKNOWN: Class<MSHTML$_svgEdgemode__SVG_EDGEMODE_UNKNOWN> & MSHTML$_svgEdgemode__SVG_EDGEMODE_UNKNOWN & 0;// 0
static +SVG_EDGEMODE_WRAP: Class<MSHTML$_svgEdgemode__SVG_EDGEMODE_WRAP> & MSHTML$_svgEdgemode__SVG_EDGEMODE_WRAP & 2;// 2
static +svgEdgemode_Max: Class<MSHTML$_svgEdgemode__svgEdgemode_Max> & MSHTML$_svgEdgemode__svgEdgemode_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgEdgemode__SVG_EDGEMODE_DUPLICATE mixins MSHTML$_svgEdgemode {}
declare class MSHTML$_svgEdgemode__SVG_EDGEMODE_NONE mixins MSHTML$_svgEdgemode {}
declare class MSHTML$_svgEdgemode__SVG_EDGEMODE_UNKNOWN mixins MSHTML$_svgEdgemode {}
declare class MSHTML$_svgEdgemode__SVG_EDGEMODE_WRAP mixins MSHTML$_svgEdgemode {}
declare class MSHTML$_svgEdgemode__svgEdgemode_Max mixins MSHTML$_svgEdgemode {}


declare  class MSHTML$_svgExternalResourcesRequired {
  constructor(...args: empty): mixed;
static +svgExternalResourcesRequired_Max: Class<MSHTML$_svgExternalResourcesRequired__svgExternalResourcesRequired_Max> & MSHTML$_svgExternalResourcesRequired__svgExternalResourcesRequired_Max & 2147483647;// 2147483647
static +svgExternalResourcesRequiredFalse: Class<MSHTML$_svgExternalResourcesRequired__svgExternalResourcesRequiredFalse> & MSHTML$_svgExternalResourcesRequired__svgExternalResourcesRequiredFalse & 0;// 0
static +svgExternalResourcesRequiredTrue: Class<MSHTML$_svgExternalResourcesRequired__svgExternalResourcesRequiredTrue> & MSHTML$_svgExternalResourcesRequired__svgExternalResourcesRequiredTrue & 1;// 1

}

declare class MSHTML$_svgExternalResourcesRequired__svgExternalResourcesRequired_Max mixins MSHTML$_svgExternalResourcesRequired {}
declare class MSHTML$_svgExternalResourcesRequired__svgExternalResourcesRequiredFalse mixins MSHTML$_svgExternalResourcesRequired {}
declare class MSHTML$_svgExternalResourcesRequired__svgExternalResourcesRequiredTrue mixins MSHTML$_svgExternalResourcesRequired {}


declare  class MSHTML$_svgFeblendMode {
  constructor(...args: empty): mixed;
static +SVG_FEBLEND_MODE_DARKEN: Class<MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_DARKEN> & MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_DARKEN & 4;// 4
static +SVG_FEBLEND_MODE_LIGHTEN: Class<MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_LIGHTEN> & MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_LIGHTEN & 5;// 5
static +SVG_FEBLEND_MODE_MULTIPLY: Class<MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_MULTIPLY> & MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_MULTIPLY & 2;// 2
static +SVG_FEBLEND_MODE_NORMAL: Class<MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_NORMAL> & MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_NORMAL & 1;// 1
static +SVG_FEBLEND_MODE_SCREEN: Class<MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_SCREEN> & MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_SCREEN & 3;// 3
static +SVG_FEBLEND_MODE_UNKNOWN: Class<MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_UNKNOWN> & MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_UNKNOWN & 0;// 0
static +svgFeblendMode_Max: Class<MSHTML$_svgFeblendMode__svgFeblendMode_Max> & MSHTML$_svgFeblendMode__svgFeblendMode_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_DARKEN mixins MSHTML$_svgFeblendMode {}
declare class MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_LIGHTEN mixins MSHTML$_svgFeblendMode {}
declare class MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_MULTIPLY mixins MSHTML$_svgFeblendMode {}
declare class MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_NORMAL mixins MSHTML$_svgFeblendMode {}
declare class MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_SCREEN mixins MSHTML$_svgFeblendMode {}
declare class MSHTML$_svgFeblendMode__SVG_FEBLEND_MODE_UNKNOWN mixins MSHTML$_svgFeblendMode {}
declare class MSHTML$_svgFeblendMode__svgFeblendMode_Max mixins MSHTML$_svgFeblendMode {}


declare  class MSHTML$_svgFecolormatrixType {
  constructor(...args: empty): mixed;
static +SVG_FECOLORMATRIX_TYPE_HUEROTATE: Class<MSHTML$_svgFecolormatrixType__SVG_FECOLORMATRIX_TYPE_HUEROTATE> & MSHTML$_svgFecolormatrixType__SVG_FECOLORMATRIX_TYPE_HUEROTATE & 3;// 3
static +SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: Class<MSHTML$_svgFecolormatrixType__SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA> & MSHTML$_svgFecolormatrixType__SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA & 4;// 4
static +SVG_FECOLORMATRIX_TYPE_MATRIX: Class<MSHTML$_svgFecolormatrixType__SVG_FECOLORMATRIX_TYPE_MATRIX> & MSHTML$_svgFecolormatrixType__SVG_FECOLORMATRIX_TYPE_MATRIX & 1;// 1
static +SVG_FECOLORMATRIX_TYPE_SATURATE: Class<MSHTML$_svgFecolormatrixType__SVG_FECOLORMATRIX_TYPE_SATURATE> & MSHTML$_svgFecolormatrixType__SVG_FECOLORMATRIX_TYPE_SATURATE & 2;// 2
static +SVG_FECOLORMATRIX_TYPE_UNKNOWN: Class<MSHTML$_svgFecolormatrixType__SVG_FECOLORMATRIX_TYPE_UNKNOWN> & MSHTML$_svgFecolormatrixType__SVG_FECOLORMATRIX_TYPE_UNKNOWN & 0;// 0
static +svgFecolormatrixType_Max: Class<MSHTML$_svgFecolormatrixType__svgFecolormatrixType_Max> & MSHTML$_svgFecolormatrixType__svgFecolormatrixType_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgFecolormatrixType__SVG_FECOLORMATRIX_TYPE_HUEROTATE mixins MSHTML$_svgFecolormatrixType {}
declare class MSHTML$_svgFecolormatrixType__SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA mixins MSHTML$_svgFecolormatrixType {}
declare class MSHTML$_svgFecolormatrixType__SVG_FECOLORMATRIX_TYPE_MATRIX mixins MSHTML$_svgFecolormatrixType {}
declare class MSHTML$_svgFecolormatrixType__SVG_FECOLORMATRIX_TYPE_SATURATE mixins MSHTML$_svgFecolormatrixType {}
declare class MSHTML$_svgFecolormatrixType__SVG_FECOLORMATRIX_TYPE_UNKNOWN mixins MSHTML$_svgFecolormatrixType {}
declare class MSHTML$_svgFecolormatrixType__svgFecolormatrixType_Max mixins MSHTML$_svgFecolormatrixType {}


declare  class MSHTML$_svgFecomponenttransferType {
  constructor(...args: empty): mixed;
static +SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: Class<MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE> & MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE & 3;// 3
static +SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: Class<MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_GAMMA> & MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_GAMMA & 5;// 5
static +SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: Class<MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY> & MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY & 1;// 1
static +SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: Class<MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_LINEAR> & MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_LINEAR & 4;// 4
static +SVG_FECOMPONENTTRANSFER_TYPE_TABLE: Class<MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_TABLE> & MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_TABLE & 2;// 2
static +SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: Class<MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN> & MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN & 0;// 0
static +svgFecomponenttransferType_Max: Class<MSHTML$_svgFecomponenttransferType__svgFecomponenttransferType_Max> & MSHTML$_svgFecomponenttransferType__svgFecomponenttransferType_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE mixins MSHTML$_svgFecomponenttransferType {}
declare class MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_GAMMA mixins MSHTML$_svgFecomponenttransferType {}
declare class MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY mixins MSHTML$_svgFecomponenttransferType {}
declare class MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_LINEAR mixins MSHTML$_svgFecomponenttransferType {}
declare class MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_TABLE mixins MSHTML$_svgFecomponenttransferType {}
declare class MSHTML$_svgFecomponenttransferType__SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN mixins MSHTML$_svgFecomponenttransferType {}
declare class MSHTML$_svgFecomponenttransferType__svgFecomponenttransferType_Max mixins MSHTML$_svgFecomponenttransferType {}


declare  class MSHTML$_svgFecompositeOperator {
  constructor(...args: empty): mixed;
static +SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: Class<MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_ARITHMETIC> & MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_ARITHMETIC & 6;// 6
static +SVG_FECOMPOSITE_OPERATOR_ATOP: Class<MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_ATOP> & MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_ATOP & 4;// 4
static +SVG_FECOMPOSITE_OPERATOR_IN: Class<MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_IN> & MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_IN & 2;// 2
static +SVG_FECOMPOSITE_OPERATOR_OUT: Class<MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_OUT> & MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_OUT & 3;// 3
static +SVG_FECOMPOSITE_OPERATOR_OVER: Class<MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_OVER> & MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_OVER & 1;// 1
static +SVG_FECOMPOSITE_OPERATOR_UNKNOWN: Class<MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_UNKNOWN> & MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_UNKNOWN & 0;// 0
static +SVG_FECOMPOSITE_OPERATOR_XOR: Class<MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_XOR> & MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_XOR & 5;// 5
static +svgFecompositeOperator_Max: Class<MSHTML$_svgFecompositeOperator__svgFecompositeOperator_Max> & MSHTML$_svgFecompositeOperator__svgFecompositeOperator_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_ARITHMETIC mixins MSHTML$_svgFecompositeOperator {}
declare class MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_ATOP mixins MSHTML$_svgFecompositeOperator {}
declare class MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_IN mixins MSHTML$_svgFecompositeOperator {}
declare class MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_OUT mixins MSHTML$_svgFecompositeOperator {}
declare class MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_OVER mixins MSHTML$_svgFecompositeOperator {}
declare class MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_UNKNOWN mixins MSHTML$_svgFecompositeOperator {}
declare class MSHTML$_svgFecompositeOperator__SVG_FECOMPOSITE_OPERATOR_XOR mixins MSHTML$_svgFecompositeOperator {}
declare class MSHTML$_svgFecompositeOperator__svgFecompositeOperator_Max mixins MSHTML$_svgFecompositeOperator {}


declare  class MSHTML$_svgFocusable {
  constructor(...args: empty): mixed;
static +svgFocusable_Max: Class<MSHTML$_svgFocusable__svgFocusable_Max> & MSHTML$_svgFocusable__svgFocusable_Max & 2147483647;// 2147483647
static +svgFocusableAuto: Class<MSHTML$_svgFocusable__svgFocusableAuto> & MSHTML$_svgFocusable__svgFocusableAuto & 1;// 1
static +svgFocusableFalse: Class<MSHTML$_svgFocusable__svgFocusableFalse> & MSHTML$_svgFocusable__svgFocusableFalse & 3;// 3
static +svgFocusableNotSet: Class<MSHTML$_svgFocusable__svgFocusableNotSet> & MSHTML$_svgFocusable__svgFocusableNotSet & 0;// 0
static +svgFocusableTrue: Class<MSHTML$_svgFocusable__svgFocusableTrue> & MSHTML$_svgFocusable__svgFocusableTrue & 2;// 2

}

declare class MSHTML$_svgFocusable__svgFocusable_Max mixins MSHTML$_svgFocusable {}
declare class MSHTML$_svgFocusable__svgFocusableAuto mixins MSHTML$_svgFocusable {}
declare class MSHTML$_svgFocusable__svgFocusableFalse mixins MSHTML$_svgFocusable {}
declare class MSHTML$_svgFocusable__svgFocusableNotSet mixins MSHTML$_svgFocusable {}
declare class MSHTML$_svgFocusable__svgFocusableTrue mixins MSHTML$_svgFocusable {}


declare  class MSHTML$_svgLengthType {
  constructor(...args: empty): mixed;
static +SVG_LENGTHTYPE_CM: Class<MSHTML$_svgLengthType__SVG_LENGTHTYPE_CM> & MSHTML$_svgLengthType__SVG_LENGTHTYPE_CM & 6;// 6
static +SVG_LENGTHTYPE_EMS: Class<MSHTML$_svgLengthType__SVG_LENGTHTYPE_EMS> & MSHTML$_svgLengthType__SVG_LENGTHTYPE_EMS & 3;// 3
static +SVG_LENGTHTYPE_EXS: Class<MSHTML$_svgLengthType__SVG_LENGTHTYPE_EXS> & MSHTML$_svgLengthType__SVG_LENGTHTYPE_EXS & 4;// 4
static +SVG_LENGTHTYPE_IN: Class<MSHTML$_svgLengthType__SVG_LENGTHTYPE_IN> & MSHTML$_svgLengthType__SVG_LENGTHTYPE_IN & 8;// 8
static +SVG_LENGTHTYPE_MM: Class<MSHTML$_svgLengthType__SVG_LENGTHTYPE_MM> & MSHTML$_svgLengthType__SVG_LENGTHTYPE_MM & 7;// 7
static +SVG_LENGTHTYPE_NUMBER: Class<MSHTML$_svgLengthType__SVG_LENGTHTYPE_NUMBER> & MSHTML$_svgLengthType__SVG_LENGTHTYPE_NUMBER & 1;// 1
static +SVG_LENGTHTYPE_PC: Class<MSHTML$_svgLengthType__SVG_LENGTHTYPE_PC> & MSHTML$_svgLengthType__SVG_LENGTHTYPE_PC & 10;// 10
static +SVG_LENGTHTYPE_PERCENTAGE: Class<MSHTML$_svgLengthType__SVG_LENGTHTYPE_PERCENTAGE> & MSHTML$_svgLengthType__SVG_LENGTHTYPE_PERCENTAGE & 2;// 2
static +SVG_LENGTHTYPE_PT: Class<MSHTML$_svgLengthType__SVG_LENGTHTYPE_PT> & MSHTML$_svgLengthType__SVG_LENGTHTYPE_PT & 9;// 9
static +SVG_LENGTHTYPE_PX: Class<MSHTML$_svgLengthType__SVG_LENGTHTYPE_PX> & MSHTML$_svgLengthType__SVG_LENGTHTYPE_PX & 5;// 5
static +SVG_LENGTHTYPE_UNKNOWN: Class<MSHTML$_svgLengthType__SVG_LENGTHTYPE_UNKNOWN> & MSHTML$_svgLengthType__SVG_LENGTHTYPE_UNKNOWN & 0;// 0
static +svgLengthType_Max: Class<MSHTML$_svgLengthType__svgLengthType_Max> & MSHTML$_svgLengthType__svgLengthType_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgLengthType__SVG_LENGTHTYPE_CM mixins MSHTML$_svgLengthType {}
declare class MSHTML$_svgLengthType__SVG_LENGTHTYPE_EMS mixins MSHTML$_svgLengthType {}
declare class MSHTML$_svgLengthType__SVG_LENGTHTYPE_EXS mixins MSHTML$_svgLengthType {}
declare class MSHTML$_svgLengthType__SVG_LENGTHTYPE_IN mixins MSHTML$_svgLengthType {}
declare class MSHTML$_svgLengthType__SVG_LENGTHTYPE_MM mixins MSHTML$_svgLengthType {}
declare class MSHTML$_svgLengthType__SVG_LENGTHTYPE_NUMBER mixins MSHTML$_svgLengthType {}
declare class MSHTML$_svgLengthType__SVG_LENGTHTYPE_PC mixins MSHTML$_svgLengthType {}
declare class MSHTML$_svgLengthType__SVG_LENGTHTYPE_PERCENTAGE mixins MSHTML$_svgLengthType {}
declare class MSHTML$_svgLengthType__SVG_LENGTHTYPE_PT mixins MSHTML$_svgLengthType {}
declare class MSHTML$_svgLengthType__SVG_LENGTHTYPE_PX mixins MSHTML$_svgLengthType {}
declare class MSHTML$_svgLengthType__SVG_LENGTHTYPE_UNKNOWN mixins MSHTML$_svgLengthType {}
declare class MSHTML$_svgLengthType__svgLengthType_Max mixins MSHTML$_svgLengthType {}


declare  class MSHTML$_svgMarkerOrient {
  constructor(...args: empty): mixed;
static +SVG_MARKER_ORIENT_ANGLE: Class<MSHTML$_svgMarkerOrient__SVG_MARKER_ORIENT_ANGLE> & MSHTML$_svgMarkerOrient__SVG_MARKER_ORIENT_ANGLE & 2;// 2
static +SVG_MARKER_ORIENT_AUTO: Class<MSHTML$_svgMarkerOrient__SVG_MARKER_ORIENT_AUTO> & MSHTML$_svgMarkerOrient__SVG_MARKER_ORIENT_AUTO & 1;// 1
static +SVG_MARKER_ORIENT_UNKNOWN: Class<MSHTML$_svgMarkerOrient__SVG_MARKER_ORIENT_UNKNOWN> & MSHTML$_svgMarkerOrient__SVG_MARKER_ORIENT_UNKNOWN & 0;// 0
static +svgMarkerOrient_Max: Class<MSHTML$_svgMarkerOrient__svgMarkerOrient_Max> & MSHTML$_svgMarkerOrient__svgMarkerOrient_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgMarkerOrient__SVG_MARKER_ORIENT_ANGLE mixins MSHTML$_svgMarkerOrient {}
declare class MSHTML$_svgMarkerOrient__SVG_MARKER_ORIENT_AUTO mixins MSHTML$_svgMarkerOrient {}
declare class MSHTML$_svgMarkerOrient__SVG_MARKER_ORIENT_UNKNOWN mixins MSHTML$_svgMarkerOrient {}
declare class MSHTML$_svgMarkerOrient__svgMarkerOrient_Max mixins MSHTML$_svgMarkerOrient {}


declare  class MSHTML$_svgMarkerOrientAttribute {
  constructor(...args: empty): mixed;
static +svgMarkerOrientAttribute_Max: Class<MSHTML$_svgMarkerOrientAttribute__svgMarkerOrientAttribute_Max> & MSHTML$_svgMarkerOrientAttribute__svgMarkerOrientAttribute_Max & 2147483647;// 2147483647
static +svgMarkerOrientAttributeAuto: Class<MSHTML$_svgMarkerOrientAttribute__svgMarkerOrientAttributeAuto> & MSHTML$_svgMarkerOrientAttribute__svgMarkerOrientAttributeAuto & 0;// 0

}

declare class MSHTML$_svgMarkerOrientAttribute__svgMarkerOrientAttribute_Max mixins MSHTML$_svgMarkerOrientAttribute {}
declare class MSHTML$_svgMarkerOrientAttribute__svgMarkerOrientAttributeAuto mixins MSHTML$_svgMarkerOrientAttribute {}


declare  class MSHTML$_svgMarkerUnits {
  constructor(...args: empty): mixed;
static +SVG_MARKERUNITS_STROKEWIDTH: Class<MSHTML$_svgMarkerUnits__SVG_MARKERUNITS_STROKEWIDTH> & MSHTML$_svgMarkerUnits__SVG_MARKERUNITS_STROKEWIDTH & 2;// 2
static +SVG_MARKERUNITS_UNKNOWN: Class<MSHTML$_svgMarkerUnits__SVG_MARKERUNITS_UNKNOWN> & MSHTML$_svgMarkerUnits__SVG_MARKERUNITS_UNKNOWN & 0;// 0
static +SVG_MARKERUNITS_USERSPACEONUSE: Class<MSHTML$_svgMarkerUnits__SVG_MARKERUNITS_USERSPACEONUSE> & MSHTML$_svgMarkerUnits__SVG_MARKERUNITS_USERSPACEONUSE & 1;// 1
static +svgMarkerUnits_Max: Class<MSHTML$_svgMarkerUnits__svgMarkerUnits_Max> & MSHTML$_svgMarkerUnits__svgMarkerUnits_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgMarkerUnits__SVG_MARKERUNITS_STROKEWIDTH mixins MSHTML$_svgMarkerUnits {}
declare class MSHTML$_svgMarkerUnits__SVG_MARKERUNITS_UNKNOWN mixins MSHTML$_svgMarkerUnits {}
declare class MSHTML$_svgMarkerUnits__SVG_MARKERUNITS_USERSPACEONUSE mixins MSHTML$_svgMarkerUnits {}
declare class MSHTML$_svgMarkerUnits__svgMarkerUnits_Max mixins MSHTML$_svgMarkerUnits {}


declare  class MSHTML$_svgMorphologyOperator {
  constructor(...args: empty): mixed;
static +SVG_MORPHOLOGY_OPERATOR_DILATE: Class<MSHTML$_svgMorphologyOperator__SVG_MORPHOLOGY_OPERATOR_DILATE> & MSHTML$_svgMorphologyOperator__SVG_MORPHOLOGY_OPERATOR_DILATE & 2;// 2
static +SVG_MORPHOLOGY_OPERATOR_ERODE: Class<MSHTML$_svgMorphologyOperator__SVG_MORPHOLOGY_OPERATOR_ERODE> & MSHTML$_svgMorphologyOperator__SVG_MORPHOLOGY_OPERATOR_ERODE & 1;// 1
static +SVG_MORPHOLOGY_OPERATOR_UNKNOWN: Class<MSHTML$_svgMorphologyOperator__SVG_MORPHOLOGY_OPERATOR_UNKNOWN> & MSHTML$_svgMorphologyOperator__SVG_MORPHOLOGY_OPERATOR_UNKNOWN & 0;// 0
static +svgMorphologyOperator_Max: Class<MSHTML$_svgMorphologyOperator__svgMorphologyOperator_Max> & MSHTML$_svgMorphologyOperator__svgMorphologyOperator_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgMorphologyOperator__SVG_MORPHOLOGY_OPERATOR_DILATE mixins MSHTML$_svgMorphologyOperator {}
declare class MSHTML$_svgMorphologyOperator__SVG_MORPHOLOGY_OPERATOR_ERODE mixins MSHTML$_svgMorphologyOperator {}
declare class MSHTML$_svgMorphologyOperator__SVG_MORPHOLOGY_OPERATOR_UNKNOWN mixins MSHTML$_svgMorphologyOperator {}
declare class MSHTML$_svgMorphologyOperator__svgMorphologyOperator_Max mixins MSHTML$_svgMorphologyOperator {}


declare  class MSHTML$_svgPathSegType {
  constructor(...args: empty): mixed;
static +PATHSEG_ARC_ABS: Class<MSHTML$_svgPathSegType__PATHSEG_ARC_ABS> & MSHTML$_svgPathSegType__PATHSEG_ARC_ABS & 10;// 10
static +PATHSEG_ARC_REL: Class<MSHTML$_svgPathSegType__PATHSEG_ARC_REL> & MSHTML$_svgPathSegType__PATHSEG_ARC_REL & 11;// 11
static +PATHSEG_CLOSEPATH: Class<MSHTML$_svgPathSegType__PATHSEG_CLOSEPATH> & MSHTML$_svgPathSegType__PATHSEG_CLOSEPATH & 1;// 1
static +PATHSEG_CURVETO_CUBIC_ABS: Class<MSHTML$_svgPathSegType__PATHSEG_CURVETO_CUBIC_ABS> & MSHTML$_svgPathSegType__PATHSEG_CURVETO_CUBIC_ABS & 6;// 6
static +PATHSEG_CURVETO_CUBIC_REL: Class<MSHTML$_svgPathSegType__PATHSEG_CURVETO_CUBIC_REL> & MSHTML$_svgPathSegType__PATHSEG_CURVETO_CUBIC_REL & 7;// 7
static +PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: Class<MSHTML$_svgPathSegType__PATHSEG_CURVETO_CUBIC_SMOOTH_ABS> & MSHTML$_svgPathSegType__PATHSEG_CURVETO_CUBIC_SMOOTH_ABS & 16;// 16
static +PATHSEG_CURVETO_CUBIC_SMOOTH_REL: Class<MSHTML$_svgPathSegType__PATHSEG_CURVETO_CUBIC_SMOOTH_REL> & MSHTML$_svgPathSegType__PATHSEG_CURVETO_CUBIC_SMOOTH_REL & 17;// 17
static +PATHSEG_CURVETO_QUADRATIC_ABS: Class<MSHTML$_svgPathSegType__PATHSEG_CURVETO_QUADRATIC_ABS> & MSHTML$_svgPathSegType__PATHSEG_CURVETO_QUADRATIC_ABS & 8;// 8
static +PATHSEG_CURVETO_QUADRATIC_REL: Class<MSHTML$_svgPathSegType__PATHSEG_CURVETO_QUADRATIC_REL> & MSHTML$_svgPathSegType__PATHSEG_CURVETO_QUADRATIC_REL & 9;// 9
static +PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: Class<MSHTML$_svgPathSegType__PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS> & MSHTML$_svgPathSegType__PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS & 18;// 18
static +PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: Class<MSHTML$_svgPathSegType__PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL> & MSHTML$_svgPathSegType__PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL & 19;// 19
static +PATHSEG_LINETO_ABS: Class<MSHTML$_svgPathSegType__PATHSEG_LINETO_ABS> & MSHTML$_svgPathSegType__PATHSEG_LINETO_ABS & 4;// 4
static +PATHSEG_LINETO_HORIZONTAL_ABS: Class<MSHTML$_svgPathSegType__PATHSEG_LINETO_HORIZONTAL_ABS> & MSHTML$_svgPathSegType__PATHSEG_LINETO_HORIZONTAL_ABS & 12;// 12
static +PATHSEG_LINETO_HORIZONTAL_REL: Class<MSHTML$_svgPathSegType__PATHSEG_LINETO_HORIZONTAL_REL> & MSHTML$_svgPathSegType__PATHSEG_LINETO_HORIZONTAL_REL & 13;// 13
static +PATHSEG_LINETO_REL: Class<MSHTML$_svgPathSegType__PATHSEG_LINETO_REL> & MSHTML$_svgPathSegType__PATHSEG_LINETO_REL & 5;// 5
static +PATHSEG_LINETO_VERTICAL_ABS: Class<MSHTML$_svgPathSegType__PATHSEG_LINETO_VERTICAL_ABS> & MSHTML$_svgPathSegType__PATHSEG_LINETO_VERTICAL_ABS & 14;// 14
static +PATHSEG_LINETO_VERTICAL_REL: Class<MSHTML$_svgPathSegType__PATHSEG_LINETO_VERTICAL_REL> & MSHTML$_svgPathSegType__PATHSEG_LINETO_VERTICAL_REL & 15;// 15
static +PATHSEG_MOVETO_ABS: Class<MSHTML$_svgPathSegType__PATHSEG_MOVETO_ABS> & MSHTML$_svgPathSegType__PATHSEG_MOVETO_ABS & 2;// 2
static +PATHSEG_MOVETO_REL: Class<MSHTML$_svgPathSegType__PATHSEG_MOVETO_REL> & MSHTML$_svgPathSegType__PATHSEG_MOVETO_REL & 3;// 3
static +PATHSEG_UNKNOWN: Class<MSHTML$_svgPathSegType__PATHSEG_UNKNOWN> & MSHTML$_svgPathSegType__PATHSEG_UNKNOWN & 0;// 0
static +svgPathSegType_Max: Class<MSHTML$_svgPathSegType__svgPathSegType_Max> & MSHTML$_svgPathSegType__svgPathSegType_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgPathSegType__PATHSEG_ARC_ABS mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_ARC_REL mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_CLOSEPATH mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_CURVETO_CUBIC_ABS mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_CURVETO_CUBIC_REL mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_CURVETO_CUBIC_SMOOTH_ABS mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_CURVETO_CUBIC_SMOOTH_REL mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_CURVETO_QUADRATIC_ABS mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_CURVETO_QUADRATIC_REL mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_LINETO_ABS mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_LINETO_HORIZONTAL_ABS mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_LINETO_HORIZONTAL_REL mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_LINETO_REL mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_LINETO_VERTICAL_ABS mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_LINETO_VERTICAL_REL mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_MOVETO_ABS mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_MOVETO_REL mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__PATHSEG_UNKNOWN mixins MSHTML$_svgPathSegType {}
declare class MSHTML$_svgPathSegType__svgPathSegType_Max mixins MSHTML$_svgPathSegType {}


declare  class MSHTML$_svgPreserveAlpha {
  constructor(...args: empty): mixed;
static +SVG_PRESERVEALPHA_FALSE: Class<MSHTML$_svgPreserveAlpha__SVG_PRESERVEALPHA_FALSE> & MSHTML$_svgPreserveAlpha__SVG_PRESERVEALPHA_FALSE & 0;// 0
static +SVG_PRESERVEALPHA_TRUE: Class<MSHTML$_svgPreserveAlpha__SVG_PRESERVEALPHA_TRUE> & MSHTML$_svgPreserveAlpha__SVG_PRESERVEALPHA_TRUE & 1;// 1
static +svgPreserveAlpha_Max: Class<MSHTML$_svgPreserveAlpha__svgPreserveAlpha_Max> & MSHTML$_svgPreserveAlpha__svgPreserveAlpha_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgPreserveAlpha__SVG_PRESERVEALPHA_FALSE mixins MSHTML$_svgPreserveAlpha {}
declare class MSHTML$_svgPreserveAlpha__SVG_PRESERVEALPHA_TRUE mixins MSHTML$_svgPreserveAlpha {}
declare class MSHTML$_svgPreserveAlpha__svgPreserveAlpha_Max mixins MSHTML$_svgPreserveAlpha {}


declare  class MSHTML$_svgPreserveAspectMeetOrSliceType {
  constructor(...args: empty): mixed;
static +SVG_MEETORSLICE_MEET: Class<MSHTML$_svgPreserveAspectMeetOrSliceType__SVG_MEETORSLICE_MEET> & MSHTML$_svgPreserveAspectMeetOrSliceType__SVG_MEETORSLICE_MEET & 1;// 1
static +SVG_MEETORSLICE_SLICE: Class<MSHTML$_svgPreserveAspectMeetOrSliceType__SVG_MEETORSLICE_SLICE> & MSHTML$_svgPreserveAspectMeetOrSliceType__SVG_MEETORSLICE_SLICE & 2;// 2
static +SVG_MEETORSLICE_UNKNOWN: Class<MSHTML$_svgPreserveAspectMeetOrSliceType__SVG_MEETORSLICE_UNKNOWN> & MSHTML$_svgPreserveAspectMeetOrSliceType__SVG_MEETORSLICE_UNKNOWN & 0;// 0
static +svgPreserveAspectMeetOrSliceType_Max: Class<MSHTML$_svgPreserveAspectMeetOrSliceType__svgPreserveAspectMeetOrSliceType_Max> & MSHTML$_svgPreserveAspectMeetOrSliceType__svgPreserveAspectMeetOrSliceType_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgPreserveAspectMeetOrSliceType__SVG_MEETORSLICE_MEET mixins MSHTML$_svgPreserveAspectMeetOrSliceType {}
declare class MSHTML$_svgPreserveAspectMeetOrSliceType__SVG_MEETORSLICE_SLICE mixins MSHTML$_svgPreserveAspectMeetOrSliceType {}
declare class MSHTML$_svgPreserveAspectMeetOrSliceType__SVG_MEETORSLICE_UNKNOWN mixins MSHTML$_svgPreserveAspectMeetOrSliceType {}
declare class MSHTML$_svgPreserveAspectMeetOrSliceType__svgPreserveAspectMeetOrSliceType_Max mixins MSHTML$_svgPreserveAspectMeetOrSliceType {}


declare  class MSHTML$_svgPreserveAspectRatioAlignType {
  constructor(...args: empty): mixed;
static +SVG_PRESERVEASPECTRATIO_NONE: Class<MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_NONE> & MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_NONE & 1;// 1
static +SVG_PRESERVEASPECTRATIO_UNKNOWN: Class<MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_UNKNOWN> & MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_UNKNOWN & 0;// 0
static +SVG_PRESERVEASPECTRATIO_XMAXYMAX: Class<MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMAXYMAX> & MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMAXYMAX & 10;// 10
static +SVG_PRESERVEASPECTRATIO_XMAXYMID: Class<MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMAXYMID> & MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMAXYMID & 7;// 7
static +SVG_PRESERVEASPECTRATIO_XMAXYMIN: Class<MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMAXYMIN> & MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMAXYMIN & 4;// 4
static +SVG_PRESERVEASPECTRATIO_XMIDYMAX: Class<MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMIDYMAX> & MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMIDYMAX & 9;// 9
static +SVG_PRESERVEASPECTRATIO_XMIDYMID: Class<MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMIDYMID> & MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMIDYMID & 6;// 6
static +SVG_PRESERVEASPECTRATIO_XMIDYMIN: Class<MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMIDYMIN> & MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMIDYMIN & 3;// 3
static +SVG_PRESERVEASPECTRATIO_XMINYMAX: Class<MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMINYMAX> & MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMINYMAX & 8;// 8
static +SVG_PRESERVEASPECTRATIO_XMINYMID: Class<MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMINYMID> & MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMINYMID & 5;// 5
static +SVG_PRESERVEASPECTRATIO_XMINYMIN: Class<MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMINYMIN> & MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMINYMIN & 2;// 2
static +svgPreserveAspectRatioAlignType_Max: Class<MSHTML$_svgPreserveAspectRatioAlignType__svgPreserveAspectRatioAlignType_Max> & MSHTML$_svgPreserveAspectRatioAlignType__svgPreserveAspectRatioAlignType_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_NONE mixins MSHTML$_svgPreserveAspectRatioAlignType {}
declare class MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_UNKNOWN mixins MSHTML$_svgPreserveAspectRatioAlignType {}
declare class MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMAXYMAX mixins MSHTML$_svgPreserveAspectRatioAlignType {}
declare class MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMAXYMID mixins MSHTML$_svgPreserveAspectRatioAlignType {}
declare class MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMAXYMIN mixins MSHTML$_svgPreserveAspectRatioAlignType {}
declare class MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMIDYMAX mixins MSHTML$_svgPreserveAspectRatioAlignType {}
declare class MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMIDYMID mixins MSHTML$_svgPreserveAspectRatioAlignType {}
declare class MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMIDYMIN mixins MSHTML$_svgPreserveAspectRatioAlignType {}
declare class MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMINYMAX mixins MSHTML$_svgPreserveAspectRatioAlignType {}
declare class MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMINYMID mixins MSHTML$_svgPreserveAspectRatioAlignType {}
declare class MSHTML$_svgPreserveAspectRatioAlignType__SVG_PRESERVEASPECTRATIO_XMINYMIN mixins MSHTML$_svgPreserveAspectRatioAlignType {}
declare class MSHTML$_svgPreserveAspectRatioAlignType__svgPreserveAspectRatioAlignType_Max mixins MSHTML$_svgPreserveAspectRatioAlignType {}


declare  class MSHTML$_svgSpreadMethod {
  constructor(...args: empty): mixed;
static +SVG_SPREADMETHOD_PAD: Class<MSHTML$_svgSpreadMethod__SVG_SPREADMETHOD_PAD> & MSHTML$_svgSpreadMethod__SVG_SPREADMETHOD_PAD & 1;// 1
static +SVG_SPREADMETHOD_REFLECT: Class<MSHTML$_svgSpreadMethod__SVG_SPREADMETHOD_REFLECT> & MSHTML$_svgSpreadMethod__SVG_SPREADMETHOD_REFLECT & 2;// 2
static +SVG_SPREADMETHOD_REPEAT: Class<MSHTML$_svgSpreadMethod__SVG_SPREADMETHOD_REPEAT> & MSHTML$_svgSpreadMethod__SVG_SPREADMETHOD_REPEAT & 3;// 3
static +SVG_SPREADMETHOD_UNKNOWN: Class<MSHTML$_svgSpreadMethod__SVG_SPREADMETHOD_UNKNOWN> & MSHTML$_svgSpreadMethod__SVG_SPREADMETHOD_UNKNOWN & 0;// 0
static +svgSpreadMethod_Max: Class<MSHTML$_svgSpreadMethod__svgSpreadMethod_Max> & MSHTML$_svgSpreadMethod__svgSpreadMethod_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgSpreadMethod__SVG_SPREADMETHOD_PAD mixins MSHTML$_svgSpreadMethod {}
declare class MSHTML$_svgSpreadMethod__SVG_SPREADMETHOD_REFLECT mixins MSHTML$_svgSpreadMethod {}
declare class MSHTML$_svgSpreadMethod__SVG_SPREADMETHOD_REPEAT mixins MSHTML$_svgSpreadMethod {}
declare class MSHTML$_svgSpreadMethod__SVG_SPREADMETHOD_UNKNOWN mixins MSHTML$_svgSpreadMethod {}
declare class MSHTML$_svgSpreadMethod__svgSpreadMethod_Max mixins MSHTML$_svgSpreadMethod {}


declare  class MSHTML$_svgStitchtype {
  constructor(...args: empty): mixed;
static +SVG_STITCHTYPE_NOSTITCH: Class<MSHTML$_svgStitchtype__SVG_STITCHTYPE_NOSTITCH> & MSHTML$_svgStitchtype__SVG_STITCHTYPE_NOSTITCH & 2;// 2
static +SVG_STITCHTYPE_STITCH: Class<MSHTML$_svgStitchtype__SVG_STITCHTYPE_STITCH> & MSHTML$_svgStitchtype__SVG_STITCHTYPE_STITCH & 1;// 1
static +SVG_STITCHTYPE_UNKNOWN: Class<MSHTML$_svgStitchtype__SVG_STITCHTYPE_UNKNOWN> & MSHTML$_svgStitchtype__SVG_STITCHTYPE_UNKNOWN & 0;// 0
static +svgStitchtype_Max: Class<MSHTML$_svgStitchtype__svgStitchtype_Max> & MSHTML$_svgStitchtype__svgStitchtype_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgStitchtype__SVG_STITCHTYPE_NOSTITCH mixins MSHTML$_svgStitchtype {}
declare class MSHTML$_svgStitchtype__SVG_STITCHTYPE_STITCH mixins MSHTML$_svgStitchtype {}
declare class MSHTML$_svgStitchtype__SVG_STITCHTYPE_UNKNOWN mixins MSHTML$_svgStitchtype {}
declare class MSHTML$_svgStitchtype__svgStitchtype_Max mixins MSHTML$_svgStitchtype {}


declare  class MSHTML$_svgTransformType {
  constructor(...args: empty): mixed;
static +SVG_TRANSFORM_MATRIX: Class<MSHTML$_svgTransformType__SVG_TRANSFORM_MATRIX> & MSHTML$_svgTransformType__SVG_TRANSFORM_MATRIX & 1;// 1
static +SVG_TRANSFORM_ROTATE: Class<MSHTML$_svgTransformType__SVG_TRANSFORM_ROTATE> & MSHTML$_svgTransformType__SVG_TRANSFORM_ROTATE & 4;// 4
static +SVG_TRANSFORM_SCALE: Class<MSHTML$_svgTransformType__SVG_TRANSFORM_SCALE> & MSHTML$_svgTransformType__SVG_TRANSFORM_SCALE & 3;// 3
static +SVG_TRANSFORM_SKEWX: Class<MSHTML$_svgTransformType__SVG_TRANSFORM_SKEWX> & MSHTML$_svgTransformType__SVG_TRANSFORM_SKEWX & 5;// 5
static +SVG_TRANSFORM_SKEWY: Class<MSHTML$_svgTransformType__SVG_TRANSFORM_SKEWY> & MSHTML$_svgTransformType__SVG_TRANSFORM_SKEWY & 6;// 6
static +SVG_TRANSFORM_TRANSLATE: Class<MSHTML$_svgTransformType__SVG_TRANSFORM_TRANSLATE> & MSHTML$_svgTransformType__SVG_TRANSFORM_TRANSLATE & 2;// 2
static +SVG_TRANSFORM_UNKNOWN: Class<MSHTML$_svgTransformType__SVG_TRANSFORM_UNKNOWN> & MSHTML$_svgTransformType__SVG_TRANSFORM_UNKNOWN & 0;// 0
static +svgTransformType_Max: Class<MSHTML$_svgTransformType__svgTransformType_Max> & MSHTML$_svgTransformType__svgTransformType_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgTransformType__SVG_TRANSFORM_MATRIX mixins MSHTML$_svgTransformType {}
declare class MSHTML$_svgTransformType__SVG_TRANSFORM_ROTATE mixins MSHTML$_svgTransformType {}
declare class MSHTML$_svgTransformType__SVG_TRANSFORM_SCALE mixins MSHTML$_svgTransformType {}
declare class MSHTML$_svgTransformType__SVG_TRANSFORM_SKEWX mixins MSHTML$_svgTransformType {}
declare class MSHTML$_svgTransformType__SVG_TRANSFORM_SKEWY mixins MSHTML$_svgTransformType {}
declare class MSHTML$_svgTransformType__SVG_TRANSFORM_TRANSLATE mixins MSHTML$_svgTransformType {}
declare class MSHTML$_svgTransformType__SVG_TRANSFORM_UNKNOWN mixins MSHTML$_svgTransformType {}
declare class MSHTML$_svgTransformType__svgTransformType_Max mixins MSHTML$_svgTransformType {}


declare  class MSHTML$_svgTurbulenceType {
  constructor(...args: empty): mixed;
static +SVG_TURBULENCE_TYPE_FACTALNOISE: Class<MSHTML$_svgTurbulenceType__SVG_TURBULENCE_TYPE_FACTALNOISE> & MSHTML$_svgTurbulenceType__SVG_TURBULENCE_TYPE_FACTALNOISE & 1;// 1
static +SVG_TURBULENCE_TYPE_TURBULENCE: Class<MSHTML$_svgTurbulenceType__SVG_TURBULENCE_TYPE_TURBULENCE> & MSHTML$_svgTurbulenceType__SVG_TURBULENCE_TYPE_TURBULENCE & 2;// 2
static +SVG_TURBULENCE_TYPE_UNKNOWN: Class<MSHTML$_svgTurbulenceType__SVG_TURBULENCE_TYPE_UNKNOWN> & MSHTML$_svgTurbulenceType__SVG_TURBULENCE_TYPE_UNKNOWN & 0;// 0
static +svgTurbulenceType_Max: Class<MSHTML$_svgTurbulenceType__svgTurbulenceType_Max> & MSHTML$_svgTurbulenceType__svgTurbulenceType_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgTurbulenceType__SVG_TURBULENCE_TYPE_FACTALNOISE mixins MSHTML$_svgTurbulenceType {}
declare class MSHTML$_svgTurbulenceType__SVG_TURBULENCE_TYPE_TURBULENCE mixins MSHTML$_svgTurbulenceType {}
declare class MSHTML$_svgTurbulenceType__SVG_TURBULENCE_TYPE_UNKNOWN mixins MSHTML$_svgTurbulenceType {}
declare class MSHTML$_svgTurbulenceType__svgTurbulenceType_Max mixins MSHTML$_svgTurbulenceType {}


declare  class MSHTML$_svgUnitTypes {
  constructor(...args: empty): mixed;
static +SVG_UNITTYPE_OBJECTBOUNDINGBOX: Class<MSHTML$_svgUnitTypes__SVG_UNITTYPE_OBJECTBOUNDINGBOX> & MSHTML$_svgUnitTypes__SVG_UNITTYPE_OBJECTBOUNDINGBOX & 2;// 2
static +SVG_UNITTYPE_UNKNOWN: Class<MSHTML$_svgUnitTypes__SVG_UNITTYPE_UNKNOWN> & MSHTML$_svgUnitTypes__SVG_UNITTYPE_UNKNOWN & 0;// 0
static +SVG_UNITTYPE_USERSPACEONUSE: Class<MSHTML$_svgUnitTypes__SVG_UNITTYPE_USERSPACEONUSE> & MSHTML$_svgUnitTypes__SVG_UNITTYPE_USERSPACEONUSE & 1;// 1
static +svgUnitTypes_Max: Class<MSHTML$_svgUnitTypes__svgUnitTypes_Max> & MSHTML$_svgUnitTypes__svgUnitTypes_Max & 2147483647;// 2147483647

}

declare class MSHTML$_svgUnitTypes__SVG_UNITTYPE_OBJECTBOUNDINGBOX mixins MSHTML$_svgUnitTypes {}
declare class MSHTML$_svgUnitTypes__SVG_UNITTYPE_UNKNOWN mixins MSHTML$_svgUnitTypes {}
declare class MSHTML$_svgUnitTypes__SVG_UNITTYPE_USERSPACEONUSE mixins MSHTML$_svgUnitTypes {}
declare class MSHTML$_svgUnitTypes__svgUnitTypes_Max mixins MSHTML$_svgUnitTypes {}


declare  class MSHTML$_textDecoration {
  constructor(...args: empty): mixed;
static +textDecoration_Max: Class<MSHTML$_textDecoration__textDecoration_Max> & MSHTML$_textDecoration__textDecoration_Max & 2147483647;// 2147483647
static +textDecorationBlink: Class<MSHTML$_textDecoration__textDecorationBlink> & MSHTML$_textDecoration__textDecorationBlink & 4;// 4
static +textDecorationLineThrough: Class<MSHTML$_textDecoration__textDecorationLineThrough> & MSHTML$_textDecoration__textDecorationLineThrough & 3;// 3
static +textDecorationNone: Class<MSHTML$_textDecoration__textDecorationNone> & MSHTML$_textDecoration__textDecorationNone & 0;// 0
static +textDecorationOverline: Class<MSHTML$_textDecoration__textDecorationOverline> & MSHTML$_textDecoration__textDecorationOverline & 2;// 2
static +textDecorationUnderline: Class<MSHTML$_textDecoration__textDecorationUnderline> & MSHTML$_textDecoration__textDecorationUnderline & 1;// 1

}

declare class MSHTML$_textDecoration__textDecoration_Max mixins MSHTML$_textDecoration {}
declare class MSHTML$_textDecoration__textDecorationBlink mixins MSHTML$_textDecoration {}
declare class MSHTML$_textDecoration__textDecorationLineThrough mixins MSHTML$_textDecoration {}
declare class MSHTML$_textDecoration__textDecorationNone mixins MSHTML$_textDecoration {}
declare class MSHTML$_textDecoration__textDecorationOverline mixins MSHTML$_textDecoration {}
declare class MSHTML$_textDecoration__textDecorationUnderline mixins MSHTML$_textDecoration {}


declare  class MSHTML$_textpathMethodtype {
  constructor(...args: empty): mixed;
static +TEXTPATH_METHODTYPE_ALIGN: Class<MSHTML$_textpathMethodtype__TEXTPATH_METHODTYPE_ALIGN> & MSHTML$_textpathMethodtype__TEXTPATH_METHODTYPE_ALIGN & 1;// 1
static +TEXTPATH_METHODTYPE_STRETCH: Class<MSHTML$_textpathMethodtype__TEXTPATH_METHODTYPE_STRETCH> & MSHTML$_textpathMethodtype__TEXTPATH_METHODTYPE_STRETCH & 2;// 2
static +TEXTPATH_METHODTYPE_UNKNOWN: Class<MSHTML$_textpathMethodtype__TEXTPATH_METHODTYPE_UNKNOWN> & MSHTML$_textpathMethodtype__TEXTPATH_METHODTYPE_UNKNOWN & 0;// 0
static +textpathMethodtype_Max: Class<MSHTML$_textpathMethodtype__textpathMethodtype_Max> & MSHTML$_textpathMethodtype__textpathMethodtype_Max & 2147483647;// 2147483647

}

declare class MSHTML$_textpathMethodtype__TEXTPATH_METHODTYPE_ALIGN mixins MSHTML$_textpathMethodtype {}
declare class MSHTML$_textpathMethodtype__TEXTPATH_METHODTYPE_STRETCH mixins MSHTML$_textpathMethodtype {}
declare class MSHTML$_textpathMethodtype__TEXTPATH_METHODTYPE_UNKNOWN mixins MSHTML$_textpathMethodtype {}
declare class MSHTML$_textpathMethodtype__textpathMethodtype_Max mixins MSHTML$_textpathMethodtype {}


declare  class MSHTML$_textpathSpacingtype {
  constructor(...args: empty): mixed;
static +TEXTPATH_SPACINGTYPE_AUTO: Class<MSHTML$_textpathSpacingtype__TEXTPATH_SPACINGTYPE_AUTO> & MSHTML$_textpathSpacingtype__TEXTPATH_SPACINGTYPE_AUTO & 1;// 1
static +TEXTPATH_SPACINGTYPE_EXACT: Class<MSHTML$_textpathSpacingtype__TEXTPATH_SPACINGTYPE_EXACT> & MSHTML$_textpathSpacingtype__TEXTPATH_SPACINGTYPE_EXACT & 2;// 2
static +TEXTPATH_SPACINGTYPE_UNKNOWN: Class<MSHTML$_textpathSpacingtype__TEXTPATH_SPACINGTYPE_UNKNOWN> & MSHTML$_textpathSpacingtype__TEXTPATH_SPACINGTYPE_UNKNOWN & 0;// 0
static +textpathSpacingtype_Max: Class<MSHTML$_textpathSpacingtype__textpathSpacingtype_Max> & MSHTML$_textpathSpacingtype__textpathSpacingtype_Max & 2147483647;// 2147483647

}

declare class MSHTML$_textpathSpacingtype__TEXTPATH_SPACINGTYPE_AUTO mixins MSHTML$_textpathSpacingtype {}
declare class MSHTML$_textpathSpacingtype__TEXTPATH_SPACINGTYPE_EXACT mixins MSHTML$_textpathSpacingtype {}
declare class MSHTML$_textpathSpacingtype__TEXTPATH_SPACINGTYPE_UNKNOWN mixins MSHTML$_textpathSpacingtype {}
declare class MSHTML$_textpathSpacingtype__textpathSpacingtype_Max mixins MSHTML$_textpathSpacingtype {}


declare  class MSHTML$_VIEW_OBJECT_ALPHA_MODE {
  constructor(...args: empty): mixed;
static +VIEW_OBJECT_ALPHA_MODE_IGNORE: Class<MSHTML$_VIEW_OBJECT_ALPHA_MODE__VIEW_OBJECT_ALPHA_MODE_IGNORE> & MSHTML$_VIEW_OBJECT_ALPHA_MODE__VIEW_OBJECT_ALPHA_MODE_IGNORE & 0;// 0
static +VIEW_OBJECT_ALPHA_MODE_Max: Class<MSHTML$_VIEW_OBJECT_ALPHA_MODE__VIEW_OBJECT_ALPHA_MODE_Max> & MSHTML$_VIEW_OBJECT_ALPHA_MODE__VIEW_OBJECT_ALPHA_MODE_Max & 2147483647;// 2147483647
static +VIEW_OBJECT_ALPHA_MODE_PREMULTIPLIED: Class<MSHTML$_VIEW_OBJECT_ALPHA_MODE__VIEW_OBJECT_ALPHA_MODE_PREMULTIPLIED> & MSHTML$_VIEW_OBJECT_ALPHA_MODE__VIEW_OBJECT_ALPHA_MODE_PREMULTIPLIED & 1;// 1

}

declare class MSHTML$_VIEW_OBJECT_ALPHA_MODE__VIEW_OBJECT_ALPHA_MODE_IGNORE mixins MSHTML$_VIEW_OBJECT_ALPHA_MODE {}
declare class MSHTML$_VIEW_OBJECT_ALPHA_MODE__VIEW_OBJECT_ALPHA_MODE_Max mixins MSHTML$_VIEW_OBJECT_ALPHA_MODE {}
declare class MSHTML$_VIEW_OBJECT_ALPHA_MODE__VIEW_OBJECT_ALPHA_MODE_PREMULTIPLIED mixins MSHTML$_VIEW_OBJECT_ALPHA_MODE {}


declare  class MSHTML$_VIEW_OBJECT_COMPOSITION_MODE {
  constructor(...args: empty): mixed;
static +VIEW_OBJECT_COMPOSITION_MODE_LEGACY: Class<MSHTML$_VIEW_OBJECT_COMPOSITION_MODE__VIEW_OBJECT_COMPOSITION_MODE_LEGACY> & MSHTML$_VIEW_OBJECT_COMPOSITION_MODE__VIEW_OBJECT_COMPOSITION_MODE_LEGACY & 0;// 0
static +VIEW_OBJECT_COMPOSITION_MODE_Max: Class<MSHTML$_VIEW_OBJECT_COMPOSITION_MODE__VIEW_OBJECT_COMPOSITION_MODE_Max> & MSHTML$_VIEW_OBJECT_COMPOSITION_MODE__VIEW_OBJECT_COMPOSITION_MODE_Max & 2147483647;// 2147483647
static +VIEW_OBJECT_COMPOSITION_MODE_SURFACEPRESENTER: Class<MSHTML$_VIEW_OBJECT_COMPOSITION_MODE__VIEW_OBJECT_COMPOSITION_MODE_SURFACEPRESENTER> & MSHTML$_VIEW_OBJECT_COMPOSITION_MODE__VIEW_OBJECT_COMPOSITION_MODE_SURFACEPRESENTER & 1;// 1

}

declare class MSHTML$_VIEW_OBJECT_COMPOSITION_MODE__VIEW_OBJECT_COMPOSITION_MODE_LEGACY mixins MSHTML$_VIEW_OBJECT_COMPOSITION_MODE {}
declare class MSHTML$_VIEW_OBJECT_COMPOSITION_MODE__VIEW_OBJECT_COMPOSITION_MODE_Max mixins MSHTML$_VIEW_OBJECT_COMPOSITION_MODE {}
declare class MSHTML$_VIEW_OBJECT_COMPOSITION_MODE__VIEW_OBJECT_COMPOSITION_MODE_SURFACEPRESENTER mixins MSHTML$_VIEW_OBJECT_COMPOSITION_MODE {}


declare  class MSHTML$DXGI_FORMAT {
  constructor(...args: empty): mixed;
static +DXGI_FORMAT_420_OPAQUE: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_420_OPAQUE> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_420_OPAQUE & 106;// 106
static +DXGI_FORMAT_A8_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_A8_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_A8_UNORM & 65;// 65
static +DXGI_FORMAT_A8P8: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_A8P8> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_A8P8 & 114;// 114
static +DXGI_FORMAT_AI44: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_AI44> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_AI44 & 111;// 111
static +DXGI_FORMAT_AYUV: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_AYUV> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_AYUV & 100;// 100
static +DXGI_FORMAT_B4G4R4A4_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_B4G4R4A4_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_B4G4R4A4_UNORM & 115;// 115
static +DXGI_FORMAT_B5G5R5A1_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_B5G5R5A1_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_B5G5R5A1_UNORM & 86;// 86
static +DXGI_FORMAT_B5G6R5_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_B5G6R5_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_B5G6R5_UNORM & 85;// 85
static +DXGI_FORMAT_B8G8R8A8_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8A8_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8A8_TYPELESS & 90;// 90
static +DXGI_FORMAT_B8G8R8A8_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8A8_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8A8_UNORM & 87;// 87
static +DXGI_FORMAT_B8G8R8A8_UNORM_SRGB: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8A8_UNORM_SRGB> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8A8_UNORM_SRGB & 91;// 91
static +DXGI_FORMAT_B8G8R8X8_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8X8_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8X8_TYPELESS & 92;// 92
static +DXGI_FORMAT_B8G8R8X8_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8X8_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8X8_UNORM & 88;// 88
static +DXGI_FORMAT_B8G8R8X8_UNORM_SRGB: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8X8_UNORM_SRGB> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8X8_UNORM_SRGB & 93;// 93
static +DXGI_FORMAT_BC1_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC1_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC1_TYPELESS & 70;// 70
static +DXGI_FORMAT_BC1_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC1_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC1_UNORM & 71;// 71
static +DXGI_FORMAT_BC1_UNORM_SRGB: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC1_UNORM_SRGB> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC1_UNORM_SRGB & 72;// 72
static +DXGI_FORMAT_BC2_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC2_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC2_TYPELESS & 73;// 73
static +DXGI_FORMAT_BC2_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC2_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC2_UNORM & 74;// 74
static +DXGI_FORMAT_BC2_UNORM_SRGB: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC2_UNORM_SRGB> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC2_UNORM_SRGB & 75;// 75
static +DXGI_FORMAT_BC3_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC3_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC3_TYPELESS & 76;// 76
static +DXGI_FORMAT_BC3_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC3_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC3_UNORM & 77;// 77
static +DXGI_FORMAT_BC3_UNORM_SRGB: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC3_UNORM_SRGB> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC3_UNORM_SRGB & 78;// 78
static +DXGI_FORMAT_BC4_SNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC4_SNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC4_SNORM & 81;// 81
static +DXGI_FORMAT_BC4_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC4_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC4_TYPELESS & 79;// 79
static +DXGI_FORMAT_BC4_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC4_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC4_UNORM & 80;// 80
static +DXGI_FORMAT_BC5_SNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC5_SNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC5_SNORM & 84;// 84
static +DXGI_FORMAT_BC5_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC5_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC5_TYPELESS & 82;// 82
static +DXGI_FORMAT_BC5_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC5_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC5_UNORM & 83;// 83
static +DXGI_FORMAT_BC6H_SF16: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC6H_SF16> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC6H_SF16 & 96;// 96
static +DXGI_FORMAT_BC6H_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC6H_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC6H_TYPELESS & 94;// 94
static +DXGI_FORMAT_BC6H_UF16: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC6H_UF16> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC6H_UF16 & 95;// 95
static +DXGI_FORMAT_BC7_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC7_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC7_TYPELESS & 97;// 97
static +DXGI_FORMAT_BC7_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC7_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC7_UNORM & 98;// 98
static +DXGI_FORMAT_BC7_UNORM_SRGB: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC7_UNORM_SRGB> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC7_UNORM_SRGB & 99;// 99
static +DXGI_FORMAT_D16_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_D16_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_D16_UNORM & 55;// 55
static +DXGI_FORMAT_D24_UNORM_S8_UINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_D24_UNORM_S8_UINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_D24_UNORM_S8_UINT & 45;// 45
static +DXGI_FORMAT_D32_FLOAT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_D32_FLOAT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_D32_FLOAT & 40;// 40
static +DXGI_FORMAT_D32_FLOAT_S8X24_UINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_D32_FLOAT_S8X24_UINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_D32_FLOAT_S8X24_UINT & 20;// 20
static +DXGI_FORMAT_FORCE_UINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_FORCE_UINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_FORCE_UINT & -1;// -1
static +DXGI_FORMAT_G8R8_G8B8_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_G8R8_G8B8_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_G8R8_G8B8_UNORM & 69;// 69
static +DXGI_FORMAT_IA44: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_IA44> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_IA44 & 112;// 112
static +DXGI_FORMAT_NV11: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_NV11> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_NV11 & 110;// 110
static +DXGI_FORMAT_NV12: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_NV12> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_NV12 & 103;// 103
static +DXGI_FORMAT_P010: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_P010> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_P010 & 104;// 104
static +DXGI_FORMAT_P016: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_P016> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_P016 & 105;// 105
static +DXGI_FORMAT_P208: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_P208> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_P208 & 130;// 130
static +DXGI_FORMAT_P8: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_P8> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_P8 & 113;// 113
static +DXGI_FORMAT_R1_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R1_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R1_UNORM & 66;// 66
static +DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM & 89;// 89
static +DXGI_FORMAT_R10G10B10A2_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R10G10B10A2_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R10G10B10A2_TYPELESS & 23;// 23
static +DXGI_FORMAT_R10G10B10A2_UINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R10G10B10A2_UINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R10G10B10A2_UINT & 25;// 25
static +DXGI_FORMAT_R10G10B10A2_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R10G10B10A2_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R10G10B10A2_UNORM & 24;// 24
static +DXGI_FORMAT_R11G11B10_FLOAT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R11G11B10_FLOAT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R11G11B10_FLOAT & 26;// 26
static +DXGI_FORMAT_R16_FLOAT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_FLOAT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_FLOAT & 54;// 54
static +DXGI_FORMAT_R16_SINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_SINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_SINT & 59;// 59
static +DXGI_FORMAT_R16_SNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_SNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_SNORM & 58;// 58
static +DXGI_FORMAT_R16_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_TYPELESS & 53;// 53
static +DXGI_FORMAT_R16_UINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_UINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_UINT & 57;// 57
static +DXGI_FORMAT_R16_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_UNORM & 56;// 56
static +DXGI_FORMAT_R16G16_FLOAT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_FLOAT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_FLOAT & 34;// 34
static +DXGI_FORMAT_R16G16_SINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_SINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_SINT & 38;// 38
static +DXGI_FORMAT_R16G16_SNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_SNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_SNORM & 37;// 37
static +DXGI_FORMAT_R16G16_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_TYPELESS & 33;// 33
static +DXGI_FORMAT_R16G16_UINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_UINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_UINT & 36;// 36
static +DXGI_FORMAT_R16G16_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_UNORM & 35;// 35
static +DXGI_FORMAT_R16G16B16A16_FLOAT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_FLOAT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_FLOAT & 10;// 10
static +DXGI_FORMAT_R16G16B16A16_SINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_SINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_SINT & 14;// 14
static +DXGI_FORMAT_R16G16B16A16_SNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_SNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_SNORM & 13;// 13
static +DXGI_FORMAT_R16G16B16A16_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_TYPELESS & 9;// 9
static +DXGI_FORMAT_R16G16B16A16_UINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_UINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_UINT & 12;// 12
static +DXGI_FORMAT_R16G16B16A16_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_UNORM & 11;// 11
static +DXGI_FORMAT_R24_UNORM_X8_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R24_UNORM_X8_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R24_UNORM_X8_TYPELESS & 46;// 46
static +DXGI_FORMAT_R24G8_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R24G8_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R24G8_TYPELESS & 44;// 44
static +DXGI_FORMAT_R32_FLOAT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32_FLOAT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32_FLOAT & 41;// 41
static +DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS & 21;// 21
static +DXGI_FORMAT_R32_SINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32_SINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32_SINT & 43;// 43
static +DXGI_FORMAT_R32_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32_TYPELESS & 39;// 39
static +DXGI_FORMAT_R32_UINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32_UINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32_UINT & 42;// 42
static +DXGI_FORMAT_R32G32_FLOAT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32_FLOAT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32_FLOAT & 16;// 16
static +DXGI_FORMAT_R32G32_SINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32_SINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32_SINT & 18;// 18
static +DXGI_FORMAT_R32G32_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32_TYPELESS & 15;// 15
static +DXGI_FORMAT_R32G32_UINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32_UINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32_UINT & 17;// 17
static +DXGI_FORMAT_R32G32B32_FLOAT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32_FLOAT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32_FLOAT & 6;// 6
static +DXGI_FORMAT_R32G32B32_SINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32_SINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32_SINT & 8;// 8
static +DXGI_FORMAT_R32G32B32_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32_TYPELESS & 5;// 5
static +DXGI_FORMAT_R32G32B32_UINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32_UINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32_UINT & 7;// 7
static +DXGI_FORMAT_R32G32B32A32_FLOAT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32A32_FLOAT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32A32_FLOAT & 2;// 2
static +DXGI_FORMAT_R32G32B32A32_SINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32A32_SINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32A32_SINT & 4;// 4
static +DXGI_FORMAT_R32G32B32A32_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32A32_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32A32_TYPELESS & 1;// 1
static +DXGI_FORMAT_R32G32B32A32_UINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32A32_UINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32A32_UINT & 3;// 3
static +DXGI_FORMAT_R32G8X24_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G8X24_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G8X24_TYPELESS & 19;// 19
static +DXGI_FORMAT_R8_SINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8_SINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8_SINT & 64;// 64
static +DXGI_FORMAT_R8_SNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8_SNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8_SNORM & 63;// 63
static +DXGI_FORMAT_R8_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8_TYPELESS & 60;// 60
static +DXGI_FORMAT_R8_UINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8_UINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8_UINT & 62;// 62
static +DXGI_FORMAT_R8_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8_UNORM & 61;// 61
static +DXGI_FORMAT_R8G8_B8G8_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_B8G8_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_B8G8_UNORM & 68;// 68
static +DXGI_FORMAT_R8G8_SINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_SINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_SINT & 52;// 52
static +DXGI_FORMAT_R8G8_SNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_SNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_SNORM & 51;// 51
static +DXGI_FORMAT_R8G8_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_TYPELESS & 48;// 48
static +DXGI_FORMAT_R8G8_UINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_UINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_UINT & 50;// 50
static +DXGI_FORMAT_R8G8_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_UNORM & 49;// 49
static +DXGI_FORMAT_R8G8B8A8_SINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_SINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_SINT & 32;// 32
static +DXGI_FORMAT_R8G8B8A8_SNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_SNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_SNORM & 31;// 31
static +DXGI_FORMAT_R8G8B8A8_TYPELESS: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_TYPELESS> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_TYPELESS & 27;// 27
static +DXGI_FORMAT_R8G8B8A8_UINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_UINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_UINT & 30;// 30
static +DXGI_FORMAT_R8G8B8A8_UNORM: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_UNORM> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_UNORM & 28;// 28
static +DXGI_FORMAT_R8G8B8A8_UNORM_SRGB: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_UNORM_SRGB> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_UNORM_SRGB & 29;// 29
static +DXGI_FORMAT_R9G9B9E5_SHAREDEXP: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_R9G9B9E5_SHAREDEXP> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_R9G9B9E5_SHAREDEXP & 67;// 67
static +DXGI_FORMAT_UNKNOWN: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_UNKNOWN> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_UNKNOWN & 0;// 0
static +DXGI_FORMAT_V208: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_V208> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_V208 & 131;// 131
static +DXGI_FORMAT_V408: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_V408> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_V408 & 132;// 132
static +DXGI_FORMAT_X24_TYPELESS_G8_UINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_X24_TYPELESS_G8_UINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_X24_TYPELESS_G8_UINT & 47;// 47
static +DXGI_FORMAT_X32_TYPELESS_G8X24_UINT: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_X32_TYPELESS_G8X24_UINT> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_X32_TYPELESS_G8X24_UINT & 22;// 22
static +DXGI_FORMAT_Y210: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_Y210> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_Y210 & 108;// 108
static +DXGI_FORMAT_Y216: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_Y216> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_Y216 & 109;// 109
static +DXGI_FORMAT_Y410: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_Y410> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_Y410 & 101;// 101
static +DXGI_FORMAT_Y416: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_Y416> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_Y416 & 102;// 102
static +DXGI_FORMAT_YUY2: Class<MSHTML$DXGI_FORMAT__DXGI_FORMAT_YUY2> & MSHTML$DXGI_FORMAT__DXGI_FORMAT_YUY2 & 107;// 107

}

declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_420_OPAQUE mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_A8_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_A8P8 mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_AI44 mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_AYUV mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_B4G4R4A4_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_B5G5R5A1_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_B5G6R5_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8A8_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8A8_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8A8_UNORM_SRGB mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8X8_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8X8_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_B8G8R8X8_UNORM_SRGB mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC1_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC1_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC1_UNORM_SRGB mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC2_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC2_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC2_UNORM_SRGB mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC3_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC3_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC3_UNORM_SRGB mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC4_SNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC4_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC4_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC5_SNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC5_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC5_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC6H_SF16 mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC6H_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC6H_UF16 mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC7_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC7_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_BC7_UNORM_SRGB mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_D16_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_D24_UNORM_S8_UINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_D32_FLOAT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_D32_FLOAT_S8X24_UINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_FORCE_UINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_G8R8_G8B8_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_IA44 mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_NV11 mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_NV12 mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_P010 mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_P016 mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_P208 mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_P8 mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R1_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R10G10B10A2_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R10G10B10A2_UINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R10G10B10A2_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R11G11B10_FLOAT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_FLOAT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_SINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_SNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_UINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_FLOAT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_SINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_SNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_UINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_FLOAT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_SINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_SNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_UINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R16G16B16A16_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R24_UNORM_X8_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R24G8_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32_FLOAT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32_SINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32_UINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32_FLOAT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32_SINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32_UINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32_FLOAT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32_SINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32_UINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32A32_FLOAT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32A32_SINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32A32_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G32B32A32_UINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R32G8X24_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8_SINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8_SNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8_UINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_B8G8_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_SINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_SNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_UINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_SINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_SNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_TYPELESS mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_UINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_UNORM mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R8G8B8A8_UNORM_SRGB mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_R9G9B9E5_SHAREDEXP mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_UNKNOWN mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_V208 mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_V408 mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_X24_TYPELESS_G8_UINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_X32_TYPELESS_G8X24_UINT mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_Y210 mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_Y216 mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_Y410 mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_Y416 mixins MSHTML$DXGI_FORMAT {}
declare class MSHTML$DXGI_FORMAT__DXGI_FORMAT_YUY2 mixins MSHTML$DXGI_FORMAT {}


declare class MSHTML$applicationCache  {
constructor(): this;
abort(): void;
oncached: any;
onchecking: any;
ondownloading: any;
onerror: any;
onnoupdate: any;
onobsolete: any;
onprogress: any;
onupdateready: any;
status: number;
swapCache(): void;
update(): void
}

declare interface MSHTML$BlockFormats {
+Count: number,
item(pvarIndex: any): string,
(pvarIndex: any): string
} 

declare class MSHTML$CanvasGradient  {
constructor(): this;
addColorStop(offset: number, color: string): void
}

declare class MSHTML$CanvasImageData  {
constructor(): this;
data: any;
height: number;
width: number
}

declare class MSHTML$CanvasPattern  {
constructor(): this
}

declare class MSHTML$CanvasRenderingContext2D  {
constructor(): this;
arc(
x: number,
y: number,
radius: number,
startAngle: number,
endAngle: number,
anticlockwise: number): void;
arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;
beginPath(): void;
bezierCurveTo(
cp1x: number,
cp1y: number,
cp2x: number,
cp2y: number,
x: number,
y: number): void;
canvas: MSHTML$IHTMLCanvasElement;
clearRect(x: number, y: number, w: number, h: number): void;
clip(): void;
closePath(): void;
createImageData(a1: any, a2: any): MSHTML$ICanvasImageData;
createLinearGradient(x0: number, y0: number, x1: number, y1: number): MSHTML$ICanvasGradient;
createPattern(Image: any, repetition: any): MSHTML$ICanvasPattern;
createRadialGradient(
x0: number,
y0: number,
r0: number,
x1: number,
y1: number,
r1: number): MSHTML$ICanvasGradient;
drawImage(
pSrc: any,
a1: any,
a2: any,
a3: any,
a4: any,
a5: any,
a6: any,
a7: any,
a8: any): void;
fill(): void;
fillRect(x: number, y: number, w: number, h: number): void;
fillStyle: any;
fillText(text: string, x: number, y: number, maxWidth: any): void;
font: string;
getImageData(sx: number, sy: number, sw: number, sh: number): MSHTML$ICanvasImageData;
globalAlpha: number;
globalCompositeOperation: string;
isPointInPath(x: number, y: number): boolean;
lineCap: string;
lineJoin: string;
lineTo(x: number, y: number): void;
lineWidth: number;
measureText(text: string): MSHTML$ICanvasTextMetrics;
miterLimit: number;
moveTo(x: number, y: number): void;
putImageData(
imagedata: MSHTML$ICanvasImageData,
dx: number,
dy: number,
dirtyX: any,
dirtyY: any,
dirtyWidth: any,
dirtyHeight: any): void;
quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;
rect(x: number, y: number, w: number, h: number): void;
restore(): void;
rotate(angle: number): void;
save(): void;
scale(x: number, y: number): void;
setTransform(
m11: number,
m12: number,
m21: number,
m22: number,
dx: number,
dy: number): void;
shadowBlur: number;
shadowColor: string;
shadowOffsetX: number;
shadowOffsetY: number;
stroke(): void;
strokeRect(x: number, y: number, w: number, h: number): void;
strokeStyle: any;
strokeText(text: string, x: number, y: number, maxWidth: any): void;
textAlign: string;
textBaseline: string;
transform(
m11: number,
m12: number,
m21: number,
m22: number,
dx: number,
dy: number): void;
translate(x: number, y: number): void
}

declare class MSHTML$CanvasTextMetrics  {
constructor(): this;
width: number
}

declare class MSHTML$CClientCaps  {
constructor(): this;

/**
 * @param bStrVer [bStrVer='']
 */
addComponentRequest(bstrName: string, bstrURL: string, bStrVer?: string): void;
availHeight: number;
availWidth: number;
bufferDepth: number;
clearComponentRequest(): void;
colorDepth: number;
compareVersions(bstrVer1: string, bstrVer2: string): number;
connectionSpeed: number;
connectionType: string;
cookieEnabled: boolean;
cpuClass: string;
doComponentRequest(): boolean;
getComponentVersion(bstrName: string, bstrURL: string): string;
height: number;

/**
 * @param bStrVer [bStrVer='']
 */
isComponentInstalled(bstrName: string, bstrURL: string, bStrVer?: string): boolean;
javaEnabled: boolean;
onLine: boolean;
platform: string;
systemLanguage: string;
userLanguage: string;
width: number
}

declare class MSHTML$CEventObj  {
constructor(): this;
actionURL: string;
altKey: boolean;
altLeft: boolean;
behaviorCookie: number;
behaviorPart: number;
bookmarks: MSHTML$IHTMLBookmarkCollection;
boundElements: MSHTML$IHTMLElementCollection;
button: number;
buttonID: number;
cancelBubble: boolean;
clientX: number;
clientY: number;
constructor: any;
contentOverflow: boolean;
ctrlKey: boolean;
ctrlLeft: boolean;
data: string;
dataFld: string;
dataTransfer: MSHTML$IHTMLDataTransfer;
fromElement: MSHTML$IHTMLElement;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
keyCode: number;
nextPage: string;
offsetX: number;
offsetY: number;
origin: string;
propertyName: string;
qualifier: string;
reason: number;
recordset: any;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
repeat: boolean;
returnValue: any;
screenX: number;
screenY: number;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
shiftKey: boolean;
shiftLeft: boolean;
source: any;
srcElement: MSHTML$IHTMLElement;
srcFilter: any;
srcUrn: string;
toElement: MSHTML$IHTMLElement;
type: string;
url: string;
wheelDelta: number;
x: number;
y: number
}

declare class MSHTML$CMimeTypes  {
constructor(): this;
length: number
}

declare class MSHTML$COpsProfile  {
constructor(): this;
addReadRequest(name: string, reserved?: any): boolean;
addRequest(name: string, reserved?: any): boolean;
clearRequest(): void;
commitChanges(): boolean;
doReadRequest(
usage: any,
fname?: any,
domain?: any,
path?: any,
expire?: any,
reserved?: any): void;
doRequest(
usage: any,
fname?: any,
domain?: any,
path?: any,
expire?: any,
reserved?: any): void;
doWriteRequest(): boolean;
getAttribute(name: string): string;
setAttribute(name: string, value: string, prefs?: any): boolean
}

declare class MSHTML$CPlugins  {
constructor(): this;
constructor: any;
length: number;

/**
 * @param reload [reload=false]
 */
refresh(reload?: boolean): void
}

declare class MSHTML$CPrintManagerTemplatePrinter  {
constructor(): this;
allLinkedDocuments: boolean;
collate: boolean;
copies: number;
currentPage: boolean;
currentPageAvail: boolean;
deviceSupports(bstrProperty: string): any;
drawPreviewPage(pElemDisp: any, nPage: number): void;
duplex: boolean;
endPrint(): void;
ensurePrintDialogDefaults(): boolean;
footer: string;
frameActive: boolean;
frameActiveEnabled: boolean;
frameAsShown: boolean;
framesetDocument: boolean;
getPageMarginBottom(pageRule: any, pageWidth: number, pageHeight: number): any;
getPageMarginBottomImportant(pageRule: any): boolean;
getPageMarginLeft(pageRule: any, pageWidth: number, pageHeight: number): any;
getPageMarginLeftImportant(pageRule: any): boolean;
getPageMarginRight(pageRule: any, pageWidth: number, pageHeight: number): any;
getPageMarginRightImportant(pageRule: any): boolean;
getPageMarginTop(pageRule: any, pageWidth: number, pageHeight: number): any;
getPageMarginTopImportant(pageRule: any): boolean;
getPrintTaskOptionValue(bstrKey: string): any;
header: string;
headerFooterFont: string;
invalidatePreview(): void;
marginBottom: number;
marginLeft: number;
marginRight: number;
marginTop: number;
orientation: string;
pageFrom: number;
pageHeight: number;
pageTo: number;
pageWidth: number;
percentScale: number;
printBlankPage(): void;
printNonNative(pMarkup: any): boolean;
printNonNativeFrames(pMarkup: any, fActiveFrame: boolean): void;
printPage(pElemDisp: any): void;
selectedPages: boolean;
selection: boolean;
selectionEnabled: boolean;
setPageCount(nPage: number): void;
showHeaderFooter: boolean;
showPageSetupDialog(): boolean;
showPrintDialog(): boolean;
shrinkToFit: boolean;
startDoc(bstrTitle: string): boolean;
startPrint(): void;
stopDoc(): void;
tableOfLinks: boolean;
unprintableBottom: number;
unprintableLeft: number;
unprintableRight: number;
unprintableTop: number;
updatePageStatus(p: number): void;
usePrinterCopyCollate: boolean
}

declare class MSHTML$CTemplatePrinter  {
constructor(): this;
allLinkedDocuments: boolean;
collate: boolean;
copies: number;
currentPage: boolean;
currentPageAvail: boolean;
deviceSupports(bstrProperty: string): any;
duplex: boolean;
ensurePrintDialogDefaults(): boolean;
footer: string;
frameActive: boolean;
frameActiveEnabled: boolean;
frameAsShown: boolean;
framesetDocument: boolean;
getPageMarginBottom(pageRule: any, pageWidth: number, pageHeight: number): any;
getPageMarginBottomImportant(pageRule: any): boolean;
getPageMarginLeft(pageRule: any, pageWidth: number, pageHeight: number): any;
getPageMarginLeftImportant(pageRule: any): boolean;
getPageMarginRight(pageRule: any, pageWidth: number, pageHeight: number): any;
getPageMarginRightImportant(pageRule: any): boolean;
getPageMarginTop(pageRule: any, pageWidth: number, pageHeight: number): any;
getPageMarginTopImportant(pageRule: any): boolean;
header: string;
headerFooterFont: string;
marginBottom: number;
marginLeft: number;
marginRight: number;
marginTop: number;
orientation: string;
pageFrom: number;
pageHeight: number;
pageTo: number;
pageWidth: number;
printBlankPage(): void;
printNonNative(pMarkup: any): boolean;
printNonNativeFrames(pMarkup: any, fActiveFrame: boolean): void;
printPage(pElemDisp: any): void;
selectedPages: boolean;
selection: boolean;
selectionEnabled: boolean;
showPageSetupDialog(): boolean;
showPrintDialog(): boolean;
startDoc(bstrTitle: string): boolean;
stopDoc(): void;
tableOfLinks: boolean;
unprintableBottom: number;
unprintableLeft: number;
unprintableRight: number;
unprintableTop: number;
updatePageStatus(p: number): void;
usePrinterCopyCollate: boolean
}

declare class MSHTML$DOMBeforeUnloadEvent  {
constructor(): this;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
eventPhase: number;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
isTrusted: boolean;
preventDefault(): void;
returnValue: any;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string
}

declare interface MSHTML$DOMChildrenCollection {
+"constructor": any,
ie9_item(index: number): any,
item(index: number): any,
+length: number,
(index: number): any
} 

declare class MSHTML$DOMCloseEvent  {
constructor(): this;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
eventPhase: number;
initCloseEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
wasClean: boolean,
code: number,
reason: string): void;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
isTrusted: boolean;
preventDefault(): void;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string;
wasClean: boolean
}

declare class MSHTML$DOMCompositionEvent  {
constructor(): this;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
currentTarget: MSHTML$IEventTarget;
data: string;
defaultPrevented: boolean;
detail: number;
eventPhase: number;
initCompositionEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
viewArg: MSHTML$IHTMLWindow2,
data: string,
locale: string): void;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
initUIEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
view: MSHTML$IHTMLWindow2,
detail: number): void;
isTrusted: boolean;
locale: string;
preventDefault(): void;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string;
view: MSHTML$IHTMLWindow2
}

declare class MSHTML$DOMCustomEvent  {
constructor(): this;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
detail: any;
eventPhase: number;
initCustomEvent(eventType: string, canBubble: boolean, cancelable: boolean, detail: any): void;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
isTrusted: boolean;
preventDefault(): void;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string
}

declare class MSHTML$DOMDocumentType  {
constructor(): this;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
attributes: any;
childNodes: any;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
entities: any;
firstChild: MSHTML$IHTMLDOMNode;
hasChildNodes(): boolean;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
internalSubset: any;
isDefaultNamespace(pvarNamespace: any): boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
name: string;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
notations: any;
ownerDocument: any;
parentNode: MSHTML$IHTMLDOMNode;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
publicId: any;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
systemId: any;
textContent: any
}

declare class MSHTML$DOMDragEvent  {
constructor(): this;
altKey: boolean;
bubbles: boolean;
button: number;
buttons: number;
cancelable: boolean;
cancelBubble: boolean;
clientX: number;
clientY: number;
ctrlKey: boolean;
currentTarget: MSHTML$IEventTarget;
dataTransfer: MSHTML$IHTMLDataTransfer;
defaultPrevented: boolean;
detail: number;
eventPhase: number;
fromElement: MSHTML$IHTMLElement;
getModifierState(keyArg: string): boolean;
initDragEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
viewArg: MSHTML$IHTMLWindow2,
detailArg: number,
screenXArg: number,
screenYArg: number,
clientXArg: number,
clientYArg: number,
ctrlKeyArg: boolean,
altKeyArg: boolean,
shiftKeyArg: boolean,
metaKeyArg: boolean,
buttonArg: number,
relatedTargetArg: MSHTML$IEventTarget,
dataTransferArg: MSHTML$IHTMLDataTransfer): void;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
initMouseEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
viewArg: MSHTML$IHTMLWindow2,
detailArg: number,
screenXArg: number,
screenYArg: number,
clientXArg: number,
clientYArg: number,
ctrlKeyArg: boolean,
altKeyArg: boolean,
shiftKeyArg: boolean,
metaKeyArg: boolean,
buttonArg: number,
relatedTargetArg: MSHTML$IEventTarget): void;
initUIEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
view: MSHTML$IHTMLWindow2,
detail: number): void;
isTrusted: boolean;
layerX: number;
layerY: number;
metaKey: boolean;
offsetX: number;
offsetY: number;
pageX: number;
pageY: number;
preventDefault(): void;
relatedTarget: MSHTML$IEventTarget;
screenX: number;
screenY: number;
shiftKey: boolean;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
toElement: MSHTML$IHTMLElement;
type: string;
view: MSHTML$IHTMLWindow2;
which: number;
x: number;
y: number
}

declare class MSHTML$DOMEvent  {
constructor(): this;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
eventPhase: number;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
isTrusted: boolean;
preventDefault(): void;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string
}

declare class MSHTML$DOMException  {
constructor(): this;
code: number;
message: string
}

declare class MSHTML$DOMFocusEvent  {
constructor(): this;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
detail: number;
eventPhase: number;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
initFocusEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
view: MSHTML$IHTMLWindow2,
detail: number,
relatedTargetArg: MSHTML$IEventTarget): void;
initUIEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
view: MSHTML$IHTMLWindow2,
detail: number): void;
isTrusted: boolean;
preventDefault(): void;
relatedTarget: MSHTML$IEventTarget;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string;
view: MSHTML$IHTMLWindow2
}

declare class MSHTML$DOMKeyboardEvent  {
constructor(): this;
altKey: boolean;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
charCode: number;
ctrlKey: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
detail: number;
eventPhase: number;
getModifierState(keyArg: string): boolean;
ie9_char: any;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
initKeyboardEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
viewArg: MSHTML$IHTMLWindow2,
keyArg: string,
locationArg: number,
modifiersListArg: string,
repeat: boolean,
locale: string): void;
initUIEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
view: MSHTML$IHTMLWindow2,
detail: number): void;
isTrusted: boolean;
key: string;
keyCode: number;
locale: string;
location: number;
metaKey: boolean;
preventDefault(): void;
repeat: boolean;
shiftKey: boolean;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string;
view: MSHTML$IHTMLWindow2;
which: number
}

declare class MSHTML$DOMMessageEvent  {
constructor(): this;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
currentTarget: MSHTML$IEventTarget;
data: string;
defaultPrevented: boolean;
eventPhase: number;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
initMessageEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
data: string,
origin: string,
lastEventId: string,
source: MSHTML$IHTMLWindow2): void;
isTrusted: boolean;
origin: string;
preventDefault(): void;
source: MSHTML$IHTMLWindow2;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string
}

declare class MSHTML$DOMMouseEvent  {
constructor(): this;
altKey: boolean;
bubbles: boolean;
button: number;
buttons: number;
cancelable: boolean;
cancelBubble: boolean;
clientX: number;
clientY: number;
ctrlKey: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
detail: number;
eventPhase: number;
fromElement: MSHTML$IHTMLElement;
getModifierState(keyArg: string): boolean;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
initMouseEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
viewArg: MSHTML$IHTMLWindow2,
detailArg: number,
screenXArg: number,
screenYArg: number,
clientXArg: number,
clientYArg: number,
ctrlKeyArg: boolean,
altKeyArg: boolean,
shiftKeyArg: boolean,
metaKeyArg: boolean,
buttonArg: number,
relatedTargetArg: MSHTML$IEventTarget): void;
initUIEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
view: MSHTML$IHTMLWindow2,
detail: number): void;
isTrusted: boolean;
layerX: number;
layerY: number;
metaKey: boolean;
offsetX: number;
offsetY: number;
pageX: number;
pageY: number;
preventDefault(): void;
relatedTarget: MSHTML$IEventTarget;
screenX: number;
screenY: number;
shiftKey: boolean;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
toElement: MSHTML$IHTMLElement;
type: string;
view: MSHTML$IHTMLWindow2;
which: number;
x: number;
y: number
}

declare class MSHTML$DOMMouseWheelEvent  {
constructor(): this;
altKey: boolean;
bubbles: boolean;
button: number;
buttons: number;
cancelable: boolean;
cancelBubble: boolean;
clientX: number;
clientY: number;
ctrlKey: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
detail: number;
eventPhase: number;
fromElement: MSHTML$IHTMLElement;
getModifierState(keyArg: string): boolean;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
initMouseEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
viewArg: MSHTML$IHTMLWindow2,
detailArg: number,
screenXArg: number,
screenYArg: number,
clientXArg: number,
clientYArg: number,
ctrlKeyArg: boolean,
altKeyArg: boolean,
shiftKeyArg: boolean,
metaKeyArg: boolean,
buttonArg: number,
relatedTargetArg: MSHTML$IEventTarget): void;
initMouseWheelEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
viewArg: MSHTML$IHTMLWindow2,
detailArg: number,
screenXArg: number,
screenYArg: number,
clientXArg: number,
clientYArg: number,
buttonArg: number,
relatedTargetArg: MSHTML$IEventTarget,
modifiersListArg: string,
wheelDeltaArg: number): void;
initUIEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
view: MSHTML$IHTMLWindow2,
detail: number): void;
isTrusted: boolean;
layerX: number;
layerY: number;
metaKey: boolean;
offsetX: number;
offsetY: number;
pageX: number;
pageY: number;
preventDefault(): void;
relatedTarget: MSHTML$IEventTarget;
screenX: number;
screenY: number;
shiftKey: boolean;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
toElement: MSHTML$IHTMLElement;
type: string;
view: MSHTML$IHTMLWindow2;
wheelDelta: number;
which: number;
x: number;
y: number
}

declare class MSHTML$DOMMSAnimationEvent  {
constructor(): this;
animationName: string;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
elapsedTime: number;
eventPhase: number;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
initMSAnimationEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
animationName: string,
elapsedTime: number): void;
isTrusted: boolean;
preventDefault(): void;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string
}

declare class MSHTML$DOMMSManipulationEvent  {
constructor(): this;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
currentState: number;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
detail: number;
eventPhase: number;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
initMSManipulationEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
viewArg: MSHTML$IHTMLWindow2,
detailArg: number,
lastState: number,
currentState: number): void;
initUIEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
view: MSHTML$IHTMLWindow2,
detail: number): void;
isTrusted: boolean;
lastState: number;
preventDefault(): void;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string;
view: MSHTML$IHTMLWindow2
}

declare class MSHTML$DOMMSTransitionEvent  {
constructor(): this;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
elapsedTime: number;
eventPhase: number;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
initMSTransitionEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
propertyName: string,
elapsedTime: number): void;
isTrusted: boolean;
preventDefault(): void;
propertyName: string;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string
}

declare class MSHTML$DOMMutationEvent  {
constructor(): this;
attrChange: number;
attrName: string;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
eventPhase: number;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
initMutationEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
relatedNodeArg: any,
prevValueArg: string,
newValueArg: string,
attrNameArg: string,
attrChangeArg: number): void;
isTrusted: boolean;
newValue: string;
preventDefault(): void;
prevValue: string;
relatedNode: any;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string
}

declare class MSHTML$DOMParser  {
constructor(): this;
parseFromString(xmlSource: string, mimeType: string): MSHTML$IHTMLDocument2
}

declare interface MSHTML$DOMParserFactory {
create(): MSHTML$IDOMParser,
(): MSHTML$IDOMParser
} 

declare class MSHTML$DOMProcessingInstruction  {
constructor(): this;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
attributes: any;
childNodes: any;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
data: string;
firstChild: MSHTML$IHTMLDOMNode;
hasChildNodes(): boolean;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isDefaultNamespace(pvarNamespace: any): boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
ownerDocument: any;
parentNode: MSHTML$IHTMLDOMNode;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
target: string;
textContent: any
}

declare class MSHTML$DOMProgressEvent  {
constructor(): this;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
eventPhase: number;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
initProgressEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
lengthComputableArg: boolean,
loadedArg: number,
totalArg: number): void;
isTrusted: boolean;
lengthComputable: boolean;
loaded: number;
preventDefault(): void;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
total: number;
type: string
}

declare class MSHTML$DOMSiteModeEvent  {
constructor(): this;
actionURL: string;
bubbles: boolean;
buttonID: number;
cancelable: boolean;
cancelBubble: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
eventPhase: number;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
isTrusted: boolean;
preventDefault(): void;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string
}

declare class MSHTML$DOMStorageEvent  {
constructor(): this;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
eventPhase: number;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
initStorageEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
keyArg: string,
oldValueArg: string,
newValueArg: string,
urlArg: string,
storageAreaArg: MSHTML$IHTMLStorage): void;
isTrusted: boolean;
key: string;
newValue: string;
oldValue: string;
preventDefault(): void;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
storageArea: MSHTML$IHTMLStorage;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string;
url: string
}

declare class MSHTML$DOMTextEvent  {
constructor(): this;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
currentTarget: MSHTML$IEventTarget;
data: string;
defaultPrevented: boolean;
detail: number;
eventPhase: number;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
initTextEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
viewArg: MSHTML$IHTMLWindow2,
dataArg: string,
inputMethod: number,
locale: string): void;
initUIEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
view: MSHTML$IHTMLWindow2,
detail: number): void;
inputMethod: number;
isTrusted: boolean;
locale: string;
preventDefault(): void;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string;
view: MSHTML$IHTMLWindow2
}

declare class MSHTML$DOMUIEvent  {
constructor(): this;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
detail: number;
eventPhase: number;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
initUIEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
view: MSHTML$IHTMLWindow2,
detail: number): void;
isTrusted: boolean;
preventDefault(): void;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string;
view: MSHTML$IHTMLWindow2
}

declare class MSHTML$DOMWheelEvent  {
constructor(): this;
altKey: boolean;
bubbles: boolean;
button: number;
buttons: number;
cancelable: boolean;
cancelBubble: boolean;
clientX: number;
clientY: number;
ctrlKey: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
deltaMode: number;
deltaX: number;
deltaY: number;
deltaZ: number;
detail: number;
eventPhase: number;
fromElement: MSHTML$IHTMLElement;
getModifierState(keyArg: string): boolean;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
initMouseEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
viewArg: MSHTML$IHTMLWindow2,
detailArg: number,
screenXArg: number,
screenYArg: number,
clientXArg: number,
clientYArg: number,
ctrlKeyArg: boolean,
altKeyArg: boolean,
shiftKeyArg: boolean,
metaKeyArg: boolean,
buttonArg: number,
relatedTargetArg: MSHTML$IEventTarget): void;
initUIEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
view: MSHTML$IHTMLWindow2,
detail: number): void;
initWheelEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
viewArg: MSHTML$IHTMLWindow2,
detailArg: number,
screenXArg: number,
screenYArg: number,
clientXArg: number,
clientYArg: number,
buttonArg: number,
relatedTargetArg: MSHTML$IEventTarget,
modifiersListArg: string,
deltaX: number,
deltaY: number,
deltaZ: number,
deltaMode: number): void;
isTrusted: boolean;
layerX: number;
layerY: number;
metaKey: boolean;
offsetX: number;
offsetY: number;
pageX: number;
pageY: number;
preventDefault(): void;
relatedTarget: MSHTML$IEventTarget;
screenX: number;
screenY: number;
shiftKey: boolean;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
toElement: MSHTML$IHTMLElement;
type: string;
view: MSHTML$IHTMLWindow2;
which: number;
x: number;
y: number
}

declare class MSHTML$EventException  {
constructor(): this
}

declare interface MSHTML$FontNames {
+Count: number,
item(pvarIndex: any): string,
(pvarIndex: any): string
} 

declare interface MSHTML$FramesCollection {
item(pvarIndex: any): any,
+length: number,
(pvarIndex: any): any
} 

declare interface MSHTML$HTCAttachBehavior {
detachEvent(): void,
FireEvent(evt: any): void,
(evt: any): void
} 

declare class MSHTML$HTCDefaultDispatch  {
constructor(): this;
CreateEventObject(): MSHTML$IHTMLEventObj;
defaults: any;
document: any;
element: MSHTML$IHTMLElement
}

declare class MSHTML$HTCDescBehavior  {
constructor(): this;
name: string;
urn: string
}

declare class MSHTML$HTCEventBehavior  {
constructor(): this;
fire(pVar: MSHTML$IHTMLEventObj): void
}

declare class MSHTML$HTCMethodBehavior  {
constructor(): this
}

declare class MSHTML$HTCPropertyBehavior  {
constructor(): this;
fireChange(): void;
value: any
}

declare class MSHTML$HTMLAnchorElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
charset: string;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
coords: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hash: string;
hideFocus: boolean;
host: string;
hostname: string;
href: string;
hreflang: string;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_coords: string;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_href: string;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_shape: string;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
Methods: string;
mimeType: string;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
name: string;
nameProp: string;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
pathname: string;
port: string;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
protocol: string;
protocolLong: string;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
rel: string;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
rev: string;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
search: string;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
shape: string;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
target: string;
textContent: any;
title: string;
toString(): string;
type: string;
uniqueID: string;
uniqueNumber: number;
urn: string;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLAppBehavior  {
constructor(): this;
applicationName: string;
border: string;
borderStyle: string;
caption: string;
commandLine: string;
contextMenu: string;
icon: string;
innerBorder: string;
maximizeButton: string;
minimizeButton: string;
scroll: string;
scrollFlat: string;
selection: string;
showInTaskBar: string;
singleInstance: string;
sysMenu: string;
version: string;
windowState: string
}

declare class MSHTML$HTMLAreaElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
alt: string;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
coords: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hash: string;
hideFocus: boolean;
host: string;
hostname: string;
href: string;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_coords: string;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_href: string;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_shape: string;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
noHref: boolean;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
pathname: string;
port: string;
previousSibling: MSHTML$IHTMLDOMNode;
protocol: string;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
search: string;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
shape: string;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
target: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare interface MSHTML$HTMLAreasCollection {
add(element: MSHTML$IHTMLElement, before?: any): void,
+"constructor": any,
ie8_item(index: number): MSHTML$IHTMLElement2,
+ie8_length: number,
ie8_namedItem(name: string): MSHTML$IHTMLElement2,
item(name?: any, index?: any): any,
length: number,
namedItem(name: string): any,

/**
 * @param index [index=-1]
 */
remove(index?: number): void,
tags(tagName: any): any,
urns(urn: any): any,
(name?: any, index?: any): any
} 

declare interface MSHTML$HTMLAttributeCollection {
+"constructor": any,
getNamedItem(bstrName: string): MSHTML$IHTMLDOMAttribute,
getNamedItemNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2,
ie8_getNamedItem(bstrName: string): MSHTML$IHTMLDOMAttribute,
ie8_item(index: number): MSHTML$IHTMLDOMAttribute,
+ie8_length: number,
ie8_removeNamedItem(bstrName: string): MSHTML$IHTMLDOMAttribute,
ie8_setNamedItem(pNodeIn: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute,
ie9_getNamedItem(bstrName: string): MSHTML$IHTMLDOMAttribute2,
ie9_item(index: number): MSHTML$IHTMLDOMAttribute2,
+ie9_length: number,
ie9_removeNamedItem(bstrName: string): MSHTML$IHTMLDOMAttribute2,
ie9_setNamedItem(pNodeIn: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
item(name?: any): any,
+length: number,
removeNamedItem(bstrName: string): MSHTML$IHTMLDOMAttribute,
removeNamedItemNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2,
setNamedItem(ppNode: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute,
setNamedItemNS(pNodeIn: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
(name?: any): any
} 

declare class MSHTML$HTMLAudioElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
autobuffer: boolean;
autoplay: boolean;
behaviorUrns: any;
blur(): void;
buffered: MSHTML$IHTMLTimeRanges;
canHaveChildren: boolean;
canHaveHTML: boolean;
canPlayType(type: string): string;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
controls: boolean;
createControlRange(): any;
currentSrc: string;
currentStyle: MSHTML$IHTMLCurrentStyle;
currentTime: number;
currentTimeDouble: number;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
defaultPlaybackRate: number;
defaultPlaybackRateDouble: number;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
duration: number;
durationDouble: number;
ended: boolean;
error: MSHTML$IHTMLMediaError;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
initialTime: number;
initialTimeDouble: number;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
load(): void;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
loop: boolean;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msPlayToDisabled: boolean;
msPlayToPrimary: boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
muted: boolean;
namespaceURI: any;
networkState: number;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
pause(): void;
paused: boolean;
play(): void;
playbackRate: number;
playbackRateDouble: number;
played: MSHTML$IHTMLTimeRanges;
prefix: any;
preload: string;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
seekable: MSHTML$IHTMLTimeRanges;
seeking: boolean;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
src: string;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
volume: number;
volumeDouble: number;
xmsAcceleratorKey: string
}

declare interface MSHTML$HTMLAudioElementFactory {
create(src?: any): MSHTML$IHTMLAudioElement,
(src?: any): MSHTML$IHTMLAudioElement
} 

declare class MSHTML$HTMLBaseElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
href: string;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_href: string;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
target: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLBaseFontElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
color: any;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
face: string;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
size: number;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLBGsound  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
balance: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
loop: any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
src: string;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
volume: any;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLBlockElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
cite: string;
className: string;
clear: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_cite: string;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
width: string;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLBody  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
aLink: any;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
background: string;
behaviorUrns: any;
bgColor: any;
bgProperties: string;
blur(): void;
bottomMargin: any;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
createTextRange(): MSHTML$IHTMLTxtRange;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_background: string;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
leftMargin: any;
link: any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
noWrap: boolean;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterprint: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeprint: any;
onbeforeunload: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhashchange: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmessage: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onoffline: any;
ononline: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onpopstate: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onstorage: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onunload: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
rightMargin: any;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scroll: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
text: any;
title: string;
topMargin: any;
toString(): string;
uniqueID: string;
uniqueNumber: number;
vLink: any;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLBRElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clear: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLButtonElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
createTextRange(): MSHTML$IHTMLTxtRange;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
form: MSHTML$IHTMLFormElement;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
ie9_type: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
name: string;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
status: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
type: string;
uniqueID: string;
uniqueNumber: number;
value: string;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLCanvasElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getContext(contextId: string): MSHTML$ICanvasRenderingContext2D;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
height: number;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toDataURL(type: string, jpegquality: any): string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
width: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLCommentElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
appendData(bstrstring: string): void;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
atomic: number;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
data: string;
deleteData(offset: number, Count: number): void;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_deleteData(offset: number, Count: number): void;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertData(offset: number, bstrstring: string): void;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_replaceData(offset: number, Count: number, bstrstring: string): void;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_substringData(offset: number, Count: number): string;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
insertData(offset: number, bstrstring: string): void;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
length: number;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceData(offset: number, Count: number, bstrstring: string): void;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
substringData(offset: number, Count: number): string;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
text: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLCSSImportRule  {
constructor(): this;
cssText: string;
href: string;
media: any;
parentRule: MSHTML$IHTMLCSSRule;
parentStyleSheet: MSHTML$IHTMLStyleSheet;
styleSheet: MSHTML$IHTMLStyleSheet;
type: number
}

declare class MSHTML$HTMLCSSMediaList  {
constructor(): this;
appendMedium(bstrMedium: string): void;
deleteMedium(bstrMedium: string): void;
item(index: number): string;
length: number;
mediaText: string
}

declare class MSHTML$HTMLCSSMediaRule  {
constructor(): this;
cssRules: MSHTML$IHTMLStyleSheetRulesCollection;
cssText: string;

/**
 * @param lIndex [lIndex=-1]
 */
deleteRule(lIndex?: number): void;

/**
 * @param lIndex [lIndex=-1]
 */
insertRule(bstrRule: string, lIndex?: number): number;
media: any;
parentRule: MSHTML$IHTMLCSSRule;
parentStyleSheet: MSHTML$IHTMLStyleSheet;
type: number
}

declare class MSHTML$HTMLCSSNamespaceRule  {
constructor(): this;
cssText: string;
namespaceURI: string;
parentRule: MSHTML$IHTMLCSSRule;
parentStyleSheet: MSHTML$IHTMLStyleSheet;
prefix: string;
type: number
}

declare class MSHTML$HTMLCSSRule  {
constructor(): this;
cssText: string;
parentRule: MSHTML$IHTMLCSSRule;
parentStyleSheet: MSHTML$IHTMLStyleSheet;
type: number
}

declare interface MSHTML$HTMLCSSStyleDeclaration {
accelerator: string,
alignContent: string,
alignItems: string,
alignmentBaseline: string,
alignSelf: string,
animation: string,
animationDelay: string,
animationDirection: string,
animationDuration: string,
animationFillMode: string,
animationIterationCount: string,
animationName: string,
animationPlayState: string,
animationTimingFunction: string,
backfaceVisibility: string,
background: string,
backgroundAttachment: string,
backgroundClip: string,
backgroundColor: any,
backgroundImage: string,
backgroundOrigin: string,
backgroundPosition: string,
backgroundPositionX: any,
backgroundPositionY: any,
backgroundRepeat: string,
backgroundSize: string,
baselineShift: any,
behavior: string,
border: string,
borderBottom: string,
borderBottomColor: any,
borderBottomLeftRadius: string,
borderBottomRightRadius: string,
borderBottomStyle: string,
borderBottomWidth: any,
borderCollapse: string,
borderColor: string,
borderImage: string,
borderImageOutset: string,
borderImageRepeat: string,
borderImageSlice: string,
borderImageSource: string,
borderImageWidth: string,
borderLeft: string,
borderLeftColor: any,
borderLeftStyle: string,
borderLeftWidth: any,
borderRadius: string,
borderRight: string,
borderRightColor: any,
borderRightStyle: string,
borderRightWidth: any,
borderSpacing: string,
borderStyle: string,
borderTop: string,
borderTopColor: any,
borderTopLeftRadius: string,
borderTopRightRadius: string,
borderTopStyle: string,
borderTopWidth: any,
borderWidth: string,
bottom: any,
boxShadow: string,
boxSizing: string,
breakAfter: string,
breakBefore: string,
breakInside: string,
captionSide: string,
clear: string,
clip: string,
+clipBottom: any,
clipLeft: any,
clipPath: string,
clipRight: any,
clipRule: string,
clipTop: any,
color: any,
colorInterpolationFilters: string,
columnCount: any,
columnFill: string,
columnGap: any,
columnRule: string,
columnRuleColor: any,
columnRuleStyle: string,
columnRuleWidth: any,
columns: string,
columnSpan: string,
columnWidth: any,
content: string,
counterIncrement: string,
counterReset: string,
cssFloat: string,
cssText: string,
cursor: string,
direction: string,
display: string,
dominantBaseline: string,
emptyCells: string,
enableBackground: string,
fill: string,
fillOpacity: any,
fillRule: string,
filter: string,
flex: string,
flexBasis: any,
flexDirection: string,
flexFlow: string,
flexGrow: any,
flexShrink: any,
flexWrap: string,
floodColor: any,
floodOpacity: any,
font: string,
fontFamily: string,
fontFeatureSettings: string,
fontSize: any,
fontSizeAdjust: any,
fontStretch: string,
fontStyle: string,
fontVariant: string,
fontWeight: string,
getPropertyPriority(bstrPropertyName: string): string,
getPropertyValue(bstrPropertyName: string): string,
glyphOrientationHorizontal: any,
glyphOrientationVertical: any,
height: any,
imeMode: string,
item(index: number): string,
justifyContent: string,
kerning: any,
layoutFlow: string,
layoutGrid: string,
layoutGridChar: any,
layoutGridLine: any,
layoutGridMode: string,
layoutGridType: string,
left: any,
+length: number,
letterSpacing: any,
lightingColor: any,
lineBreak: string,
lineHeight: any,
listStyle: string,
listStyleImage: string,
listStylePosition: string,
listStyleType: string,
margin: string,
marginBottom: any,
marginLeft: any,
marginRight: any,
marginTop: any,
marker: string,
markerEnd: string,
markerMid: string,
markerStart: string,
mask: string,
maxHeight: any,
maxWidth: any,
minHeight: any,
minWidth: any,
msAnimation: string,
msAnimationDelay: string,
msAnimationDirection: string,
msAnimationDuration: string,
msAnimationFillMode: string,
msAnimationIterationCount: string,
msAnimationName: string,
msAnimationPlayState: string,
msAnimationTimingFunction: string,
msBackfaceVisibility: string,
msBlockProgression: string,
msContentZoomChaining: string,
msContentZooming: string,
msContentZoomLimit: string,
msContentZoomLimitMax: any,
msContentZoomLimitMin: any,
msContentZoomSnap: string,
msContentZoomSnapPoints: string,
msContentZoomSnapType: string,
msFlex: string,
msFlexAlign: string,
msFlexDirection: string,
msFlexFlow: string,
msFlexItemAlign: string,
msFlexLinePack: string,
msFlexNegative: any,
msFlexOrder: any,
msFlexPack: string,
msFlexPositive: any,
msFlexPreferredSize: any,
msFlexWrap: string,
msFlowFrom: string,
msFlowInto: string,
msFontFeatureSettings: string,
msGetPropertyEnabled(name: string): boolean,
msGridColumn: any,
msGridColumnAlign: string,
msGridColumns: string,
msGridColumnSpan: any,
msGridRow: any,
msGridRowAlign: string,
msGridRows: string,
msGridRowSpan: any,
msHighContrastAdjust: string,
msHyphenateLimitChars: string,
msHyphenateLimitLines: any,
msHyphenateLimitZone: any,
msHyphens: string,
msImeAlign: string,
msInterpolationMode: string,
msOverflowStyle: string,
msPerspective: any,
msPerspectiveOrigin: string,
msPutPropertyEnabled(name: string, b: boolean): void,
msScrollChaining: string,
msScrollLimit: string,
msScrollLimitXMax: any,
msScrollLimitXMin: any,
msScrollLimitYMax: any,
msScrollLimitYMin: any,
msScrollRails: string,
msScrollSnapPointsX: string,
msScrollSnapPointsY: string,
msScrollSnapType: string,
msScrollSnapX: string,
msScrollSnapY: string,
msScrollTranslation: string,
msTextCombineHorizontal: string,
msTextSizeAdjust: any,
msTouchAction: string,
msTouchSelect: string,
msTransform: string,
msTransformOrigin: string,
msTransformStyle: string,
msTransition: string,
msTransitionDelay: string,
msTransitionDuration: string,
msTransitionProperty: string,
msTransitionTimingFunction: string,
msUserSelect: string,
msWrapFlow: string,
msWrapMargin: any,
msWrapThrough: string,
opacity: any,
orphans: any,
outline: string,
outlineColor: any,
outlineStyle: string,
outlineWidth: any,
overflow: string,
overflowX: string,
overflowY: string,
padding: string,
paddingBottom: any,
paddingLeft: any,
paddingRight: any,
paddingTop: any,
pageBreakAfter: string,
pageBreakBefore: string,
pageBreakInside: string,
+parentRule: any,
perspective: any,
perspectiveOrigin: string,
pointerEvents: string,
position: string,
quotes: string,
removeProperty(bstrPropertyName: string): string,
right: any,
rubyAlign: string,
rubyOverhang: string,
rubyPosition: string,
scrollbar3dLightColor: any,
scrollbarArrowColor: any,
scrollbarBaseColor: any,
scrollbarDarkShadowColor: any,
scrollbarFaceColor: any,
scrollbarHighlightColor: any,
scrollbarShadowColor: any,
scrollbarTrackColor: any,

/**
 * @param pvarPropertyPriority [pvarPropertyPriority='']
 */
setProperty(
bstrPropertyName: string,
pvarPropertyValue: any,
pvarPropertyPriority?: any): void,
stopColor: any,
stopOpacity: any,
stroke: string,
strokeDasharray: string,
strokeDashoffset: any,
strokeLinecap: string,
strokeLinejoin: string,
strokeMiterlimit: any,
strokeOpacity: any,
strokeWidth: any,
styleFloat: string,
tableLayout: string,
textAlign: string,
textAlignLast: string,
textAnchor: string,
textAutospace: string,
textDecoration: string,
textIndent: any,
textJustify: string,
textJustifyTrim: string,
textKashida: any,
textKashidaSpace: any,
textOverflow: string,
textShadow: string,
textTransform: string,
textUnderlinePosition: string,
top: any,
touchAction: string,
transform: string,
transformOrigin: string,
transformStyle: string,
transition: string,
transitionDelay: string,
transitionDuration: string,
transitionProperty: string,
transitionTimingFunction: string,
unicodeBidi: string,
verticalAlign: any,
visibility: string,
webkitAnimation: string,
webkitAnimationDelay: string,
webkitAnimationDirection: string,
webkitAnimationDuration: string,
webkitAnimationFillMode: string,
webkitAnimationIterationCount: string,
webkitAnimationName: string,
webkitAnimationPlayState: string,
webkitAnimationTimingFunction: string,
webkitAppearance: string,
webkitBackfaceVisibility: string,
webkitBackground: string,
webkitBackgroundAttachment: string,
webkitBackgroundClip: string,
webkitBackgroundColor: any,
webkitBackgroundImage: string,
webkitBackgroundOrigin: string,
webkitBackgroundPosition: string,
webkitBackgroundPositionX: any,
webkitBackgroundPositionY: any,
webkitBackgroundRepeat: string,
webkitBackgroundSize: string,
webkitBorderImage: string,
webkitBorderImageOutset: string,
webkitBorderImageRepeat: string,
webkitBorderImageSlice: string,
webkitBorderImageSource: string,
webkitBorderImageWidth: string,
webkitBoxAlign: string,
webkitBoxDirection: string,
webkitBoxFlex: any,
webkitBoxOrdinalGroup: any,
webkitBoxOrient: string,
webkitBoxPack: string,
webkitBoxSizing: string,
webkitTextSizeAdjust: any,
webkitTransform: string,
webkitTransformOrigin: string,
webkitTransition: string,
webkitTransitionDelay: string,
webkitTransitionDuration: string,
webkitTransitionProperty: string,
webkitTransitionTimingFunction: string,
webkitUserSelect: string,
whiteSpace: string,
widows: any,
width: any,
wordBreak: string,
wordSpacing: any,
wordWrap: string,
writingMode: string,
zIndex: any,
zoom: any,
(index: number): string
} 

declare interface MSHTML$HTMLCurrentStyle {
+accelerator: string,
alignContent: string,
alignItems: string,
alignSelf: string,
animation: string,
animationDelay: string,
animationDirection: string,
animationDuration: string,
animationFillMode: string,
animationIterationCount: string,
animationName: string,
animationPlayState: string,
animationTimingFunction: string,
backfaceVisibility: string,
+backgroundAttachment: string,
+backgroundColor: any,
+backgroundImage: string,
+backgroundPositionX: any,
+backgroundPositionY: any,
+backgroundRepeat: string,
+behavior: string,
+blockDirection: string,
+borderBottomColor: any,
+borderBottomStyle: string,
+borderBottomWidth: any,
+borderCollapse: string,
+borderColor: string,
borderImage: string,
borderImageOutset: string,
borderImageRepeat: string,
borderImageSlice: string,
borderImageSource: string,
borderImageWidth: string,
+borderLeftColor: any,
+borderLeftStyle: string,
+borderLeftWidth: any,
+borderRightColor: any,
+borderRightStyle: string,
+borderRightWidth: any,
+borderSpacing: string,
+borderStyle: string,
+borderTopColor: any,
+borderTopStyle: string,
+borderTopWidth: any,
+borderWidth: string,
+bottom: any,
+boxSizing: string,
breakAfter: string,
breakBefore: string,
breakInside: string,
+captionSide: string,
+clear: string,
+clipBottom: any,
+clipLeft: any,
+clipRight: any,
+clipTop: any,
+color: any,
colorInterpolationFilters: string,
columnCount: any,
columnFill: string,
columnGap: any,
columnRule: string,
columnRuleColor: any,
columnRuleStyle: string,
columnRuleWidth: any,
columns: string,
columnSpan: string,
columnWidth: any,
+"constructor": any,
+cursor: string,
+direction: string,
+display: string,
+emptyCells: string,
enableBackground: string,
+filter: string,
flex: string,
flexBasis: any,
flexDirection: string,
flexFlow: string,
flexGrow: any,
flexShrink: any,
flexWrap: string,
floodColor: any,
floodOpacity: any,
+fontFamily: string,
fontFeatureSettings: string,
+fontSize: any,
+fontStyle: string,
+fontVariant: string,
+fontWeight: any,

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any,
getPropertyPriority(bstrPropertyName: string): string,
getPropertyValue(bstrPropertyName: string): string,
+hasLayout: boolean,
+height: any,
+imeMode: string,
item(index: number): string,
justifyContent: string,
+layoutFlow: string,
+layoutGridChar: any,
+layoutGridLine: any,
+layoutGridMode: string,
+layoutGridType: string,
+left: any,
+length: number,
+letterSpacing: any,
lightingColor: any,
+lineBreak: string,
+lineHeight: any,
+listStyleImage: string,
+listStylePosition: string,
+listStyleType: string,
+margin: string,
+marginBottom: any,
+marginLeft: any,
+marginRight: any,
+marginTop: any,
+maxHeight: any,
+maxWidth: any,
+minHeight: any,
+minWidth: any,
msAnimation: string,
msAnimationDelay: string,
msAnimationDirection: string,
msAnimationDuration: string,
msAnimationFillMode: string,
msAnimationIterationCount: string,
msAnimationName: string,
msAnimationPlayState: string,
msAnimationTimingFunction: string,
msBackfaceVisibility: string,
+msBlockProgression: string,
msContentZoomChaining: string,
msContentZooming: string,
msContentZoomLimit: string,
msContentZoomLimitMax: any,
msContentZoomLimitMin: any,
msContentZoomSnap: string,
msContentZoomSnapPoints: string,
msContentZoomSnapType: string,
msFlex: string,
msFlexAlign: string,
msFlexDirection: string,
msFlexFlow: string,
msFlexItemAlign: string,
msFlexLinePack: string,
msFlexNegative: any,
msFlexOrder: any,
msFlexPack: string,
msFlexPositive: any,
msFlexPreferredSize: any,
msFlexWrap: string,
msFlowFrom: string,
msFlowInto: string,
msFontFeatureSettings: string,
msGridColumn: any,
msGridColumnAlign: string,
msGridColumns: string,
msGridColumnSpan: any,
msGridRow: any,
msGridRowAlign: string,
msGridRows: string,
msGridRowSpan: any,
msHighContrastAdjust: string,
msHyphenateLimitChars: string,
msHyphenateLimitLines: any,
msHyphenateLimitZone: any,
msHyphens: string,
msImeAlign: string,
+msInterpolationMode: string,
msOverflowStyle: string,
msPerspective: any,
msPerspectiveOrigin: string,
msScrollChaining: string,
msScrollLimit: string,
msScrollLimitXMax: any,
msScrollLimitXMin: any,
msScrollLimitYMax: any,
msScrollLimitYMin: any,
msScrollRails: string,
msScrollSnapPointsX: string,
msScrollSnapPointsY: string,
msScrollSnapType: string,
msScrollSnapX: string,
msScrollSnapY: string,
msScrollTranslation: string,
msTextCombineHorizontal: string,
msTextSizeAdjust: any,
msTouchAction: string,
msTouchSelect: string,
msTransformStyle: string,
msTransition: string,
msTransitionDelay: string,
msTransitionDuration: string,
msTransitionProperty: string,
msTransitionTimingFunction: string,
msUserSelect: string,
msWrapFlow: string,
msWrapMargin: any,
msWrapThrough: string,
+orphans: any,
+outline: string,
+outlineColor: any,
+outlineStyle: string,
+outlineWidth: any,
+overflow: string,
+overflowX: string,
+overflowY: string,
+padding: string,
+paddingBottom: any,
+paddingLeft: any,
+paddingRight: any,
+paddingTop: any,
+pageBreakAfter: string,
+pageBreakBefore: string,
+pageBreakInside: string,
+parentRule: any,
perspective: any,
perspectiveOrigin: string,
+position: string,
+quotes: string,
removeProperty(bstrPropertyName: string): string,
+right: any,
+rubyAlign: string,
+rubyOverhang: string,
+rubyPosition: string,
+scrollbar3dLightColor: any,
+scrollbarArrowColor: any,
+scrollbarBaseColor: any,
+scrollbarDarkShadowColor: any,
+scrollbarFaceColor: any,
+scrollbarHighlightColor: any,
+scrollbarShadowColor: any,
+scrollbarTrackColor: any,

/**
 * @param pvarPropertyPriority [pvarPropertyPriority='']
 */
setProperty(
bstrPropertyName: string,
pvarPropertyValue: any,
pvarPropertyPriority?: any): void,
+styleFloat: string,
+tableLayout: string,
+textAlign: string,
+textAlignLast: string,
+textAutospace: string,
+textDecoration: string,
+textIndent: any,
+textJustify: string,
+textJustifyTrim: string,
+textKashida: any,
+textKashidaSpace: any,
+textOverflow: string,
textShadow: string,
+textTransform: string,
+textUnderlinePosition: string,
+top: any,
touchAction: string,
transform: string,
transformOrigin: string,
transformStyle: string,
transition: string,
transitionDelay: string,
transitionDuration: string,
transitionProperty: string,
transitionTimingFunction: string,
+unicodeBidi: string,
+verticalAlign: any,
+visibility: string,
webkitAnimation: string,
webkitAnimationDelay: string,
webkitAnimationDirection: string,
webkitAnimationDuration: string,
webkitAnimationFillMode: string,
webkitAnimationIterationCount: string,
webkitAnimationName: string,
webkitAnimationPlayState: string,
webkitAnimationTimingFunction: string,
webkitAppearance: string,
webkitBackfaceVisibility: string,
webkitBackground: string,
webkitBackgroundAttachment: string,
webkitBackgroundClip: string,
webkitBackgroundColor: any,
webkitBackgroundImage: string,
webkitBackgroundOrigin: string,
webkitBackgroundPosition: string,
webkitBackgroundPositionX: any,
webkitBackgroundPositionY: any,
webkitBackgroundRepeat: string,
webkitBackgroundSize: string,
webkitBorderImage: string,
webkitBorderImageOutset: string,
webkitBorderImageRepeat: string,
webkitBorderImageSlice: string,
webkitBorderImageSource: string,
webkitBorderImageWidth: string,
webkitBoxAlign: string,
webkitBoxDirection: string,
webkitBoxFlex: any,
webkitBoxOrdinalGroup: any,
webkitBoxOrient: string,
webkitBoxPack: string,
webkitBoxSizing: string,
webkitTextSizeAdjust: any,
webkitTransform: string,
webkitTransformOrigin: string,
webkitTransition: string,
webkitTransitionDelay: string,
webkitTransitionDuration: string,
webkitTransitionProperty: string,
webkitTransitionTimingFunction: string,
webkitUserSelect: string,
+whiteSpace: string,
+widows: any,
+width: any,
+wordBreak: string,
+wordSpacing: any,
+wordWrap: string,
+writingMode: string,
+zIndex: any,
+zoom: any,
(index: number): string
} 

declare class MSHTML$HTMLDDElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
noWrap: boolean;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLDefaults  {
constructor(): this;
canHaveHTML: boolean;
constructor: any;
contentEditable: string;
frozen: boolean;
isMultiLine: boolean;
scrollSegmentX: number;
scrollSegmentY: number;
style: MSHTML$IHTMLStyle;
tabStop: boolean;
viewInheritStyle: boolean;
viewLink: MSHTML$IHTMLDocument;
viewMasterTab: boolean
}

declare class MSHTML$HTMLDialog  {
constructor(): this;
close(): void;
dialogArguments: any;
dialogHeight: any;
dialogLeft: any;
dialogTop: any;
dialogWidth: any;
menuArguments: any;
returnValue: any;
toString(): string
}

declare class MSHTML$HTMLDivElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
noWrap: boolean;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLDivPosition  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HtmlDlgSafeHelper  {
constructor(): this;
MSHTML$BlockFormats: any;
choosecolordlg(initColor?: any): any;
fonts: any;
getCharset(fontName: string): any
}

declare class MSHTML$HTMLDListElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compact: boolean;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLDocument  {
constructor(): this;
activeElement: MSHTML$IHTMLElement;
addEventListener(type: string, listener: any, useCapture: boolean): void;
adoptNode(pNodeSource: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode3;
alinkColor: any;
all: MSHTML$IHTMLElementCollection;
anchors: MSHTML$IHTMLElementCollection;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applets: MSHTML$IHTMLElementCollection;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
bgColor: any;
body: MSHTML$IHTMLElement;
characterSet: string;
charset: string;
childNodes: any;
clear(): void;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
close(): void;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
compatible: MSHTML$IHTMLDocumentCompatibleInfoCollection;
compatMode: string;
constructor: any;
cookie: string;
createAttribute(bstrAttrName: string): MSHTML$IHTMLDOMAttribute;
createAttributeNS(pvarNS: any, bstrAttrName: string): MSHTML$IHTMLDOMAttribute;
createCDATASection(text: string): MSHTML$IHTMLDOMNode;
createComment(bstrData: string): MSHTML$IHTMLDOMNode;
createDocumentFragment(): MSHTML$IHTMLDocument2;
createDocumentFromUrl(bstrURL: string, bstrOptions: string): MSHTML$IHTMLDocument2;
createElement(eTag: string): MSHTML$IHTMLElement;
createElementNS(pvarNS: any, bstrTag: string): MSHTML$IHTMLElement;
createEvent(eventType: string): MSHTML$IDOMEvent;
CreateEventObject(pvarEventObject?: any): MSHTML$IHTMLEventObj;
createNodeIterator(
pRootNode: any,
ulWhatToShow: number,
pFilter: any,
fEntityReferenceExpansion: boolean): MSHTML$IDOMNodeIterator;
createProcessingInstruction(bstrTarget: string, bstrData: string): MSHTML$IDOMProcessingInstruction;
createRange(): MSHTML$IHTMLDOMRange;
createRenderStyle(v: string): MSHTML$IHTMLRenderStyle;

/**
 * @param bstrHref [bstrHref='']
 * @param lIndex [lIndex=-1]
 */
createStyleSheet(bstrHref?: string, lIndex?: number): MSHTML$IHTMLStyleSheet;
createTextNode(text: string): MSHTML$IHTMLDOMNode;
createTreeWalker(
pRootNode: any,
ulWhatToShow: number,
pFilter: any,
fEntityReferenceExpansion: boolean): MSHTML$IDOMTreeWalker;
defaultCharset: string;
defaultView: MSHTML$IHTMLWindow2;
designMode: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
dispatchEvent(evt: MSHTML$IDOMEvent): boolean;
doctype: MSHTML$IHTMLDOMNode;
documentElement: MSHTML$IHTMLElement;
documentMode: any;
domain: string;
elementFromPoint(x: number, y: number): MSHTML$IHTMLElement;
elementsFromPoint(x: number, y: number): MSHTML$IHTMLDOMChildrenCollection;
elementsFromRect(
left: number,
top: number,
width: number,
height: number): MSHTML$IHTMLDOMChildrenCollection;
embeds: MSHTML$IHTMLElementCollection;

/**
 * @param showUI [showUI=false]
 */
execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;
execCommandShowHelp(cmdID: string): boolean;
expando: boolean;
fgColor: any;
fileCreatedDate: string;
fileModifiedDate: string;
fileSize: string;
fileUpdatedDate: string;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
forms: MSHTML$IHTMLElementCollection;
frames: MSHTML$FramesCollection;
getElementById(v: string): MSHTML$IHTMLElement;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(pvarNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getSelection(): MSHTML$IHTMLSelection;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hasFocus(): boolean;
head: MSHTML$IHTMLElement;
ie8_getElementById(bstrId: string): MSHTML$IHTMLElement2;
ie9_all: MSHTML$IHTMLElementCollection;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_body: MSHTML$IHTMLElement;
ie9_createAttribute(bstrAttrName: string): MSHTML$IHTMLDOMAttribute;
ie9_createElement(bstrTag: string): MSHTML$IHTMLElement;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_parentWindow: MSHTML$IHTMLWindow2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
images: MSHTML$IHTMLElementCollection;
implementation: MSHTML$IHTMLDOMImplementation;
importNode(pNodeSource: MSHTML$IHTMLDOMNode, fDeep: boolean): MSHTML$IHTMLDOMNode3;
inputEncoding: string;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isDefaultNamespace(pvarNamespace: any): boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
lastChild: MSHTML$IHTMLDOMNode;
lastModified: string;
linkColor: any;
links: MSHTML$IHTMLElementCollection;
localName: any;
location: MSHTML$IHTMLLocation;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
media: string;
mimeType: string;
msCapsLockWarningOff: boolean;
nameProp: string;
namespaces: any;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onmousedown: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmscontentzoom: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsinertiastart: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmssitemodejumplistitemremoved: any;
onmsthumbnailclick: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectionchange: any;
onselectstart: any;
onstalled: any;
onstop: any;
onstorage: any;
onstoragecommit: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;

/**
 * @param url [url='text/html']
 */
open(url?: string, name?: any, features?: any, replace?: any): any;
ownerDocument: any;
parentNode: MSHTML$IHTMLDOMNode;
parentWindow: MSHTML$IHTMLWindow2;
plugins: MSHTML$IHTMLElementCollection;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
protocol: string;
queryCommandEnabled(cmdID: string): boolean;
queryCommandIndeterm(cmdID: string): boolean;
queryCommandState(cmdID: string): boolean;
queryCommandSupported(cmdID: string): boolean;
queryCommandText(cmdID: string): string;
queryCommandValue(cmdID: string): any;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: string;

/**
 * @param fForce [fForce=false]
 */
recalc(fForce?: boolean): void;
referrer: string;
releaseCapture(): void;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeEventListener(type: string, listener: any, useCapture: boolean): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
rootElement: MSHTML$ISVGSVGElement;
Script: any;
scripts: MSHTML$IHTMLElementCollection;
security: string;
selection: MSHTML$IHTMLSelectionObject;
styleSheets: MSHTML$IHTMLStyleSheetsCollection;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
textContent: any;
title: string;
toString(): string;
uniqueID: string;
updateSettings(): void;
url: string;
URLUnencoded: string;
vlinkColor: any;
write(...psarray: any[]): void;
writeln(...psarray: any[]): void;
xmlEncoding: string;
xmlStandalone: boolean;
xmlVersion: string
}

declare class MSHTML$HTMLDocumentCompatibleInfo  {
constructor(): this;
constructor: any
}

declare class MSHTML$HTMLDocumentCompatibleInfoCollection  {
constructor(): this;
constructor: any
}

declare class MSHTML$HTMLDOMAttribute  {
constructor(): this;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
attributes: any;
childNodes: any;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMAttribute;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
constructor: any;
expando: boolean;
firstChild: MSHTML$IHTMLDOMNode;
hasAttributes(): boolean;
hasChildNodes(): boolean;
ie8_nodeValue: any;
ie8_specified: boolean;
ie8_value: string;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_childNodes: any;
ie9_firstChild: MSHTML$IHTMLDOMNode;
ie9_hasChildNodes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_lastChild: MSHTML$IHTMLDOMNode;
ie9_name: string;
ie9_nodeName: string;
ie9_nodeValue: any;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_specified: boolean;
ie9_value: string;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isDefaultNamespace(pvarNamespace: any): boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
name: string;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
ownerDocument: any;
ownerElement: MSHTML$IHTMLElement2;
parentNode: MSHTML$IHTMLDOMNode;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
specified: boolean;
textContent: any;
value: string
}

declare class MSHTML$HTMLDOMImplementation  {
constructor(): this;
constructor: any;
createDocument(
pvarNS: any,
pvarTagName: any,
pDocumentType: MSHTML$IDOMDocumentType): MSHTML$IHTMLDocument7;
createDocumentType(
bstrQualifiedName: string,
pvarPublicId: any,
pvarSystemId: any): MSHTML$IDOMDocumentType;
createHTMLDocument(bstrTitle: string): MSHTML$IHTMLDocument7;
hasFeature(bstrfeature: string, version?: any): boolean;
ie9_hasFeature(bstrfeature: string, version?: any): boolean
}

declare class MSHTML$HTMLDOMRange  {
constructor(): this;
cloneContents(): any;
cloneRange(): MSHTML$IHTMLDOMRange;
collapse(toStart: boolean): void;
collapsed: boolean;
commonAncestorContainer: MSHTML$IHTMLDOMNode;
compareBoundaryPoints(how: number, sourceRange: any): number;
deleteContents(): void;
Detach(): void;
endContainer: MSHTML$IHTMLDOMNode;
endOffset: number;
extractContents(): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
insertNode(newNode: any): void;
selectNode(refNode: any): void;
selectNodeContents(refNode: any): void;
setEnd(refNode: any, offset: number): void;
setEndAfter(refNode: any): void;
setEndBefore(refNode: any): void;
setStart(refNode: any, offset: number): void;
setStartAfter(refNode: any): void;
setStartBefore(refNode: any): void;
startContainer: MSHTML$IHTMLDOMNode;
startOffset: number;
surroundContents(newParent: any): void;
toString(): string
}

declare class MSHTML$HTMLDOMTextNode  {
constructor(): this;
addEventListener(type: string, listener: any, useCapture: boolean): void;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
appendData(bstrstring: string): void;
attributes: any;
childNodes: any;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
constructor: any;
data: string;
deleteData(offset: number, Count: number): void;
dispatchEvent(evt: MSHTML$IDOMEvent): boolean;
firstChild: MSHTML$IHTMLDOMNode;
hasAttributes(): boolean;
hasChildNodes(): boolean;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_deleteData(offset: number, Count: number): void;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_insertData(offset: number, bstrstring: string): void;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceData(offset: number, Count: number, bstrstring: string): void;
ie9_splitText(offset: number): MSHTML$IHTMLDOMNode;
ie9_substringData(offset: number, Count: number): string;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
insertData(offset: number, bstrstring: string): void;
isDefaultNamespace(pvarNamespace: any): boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
lastChild: MSHTML$IHTMLDOMNode;
length: number;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
ownerDocument: any;
parentNode: MSHTML$IHTMLDOMNode;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeEventListener(type: string, listener: any, useCapture: boolean): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceData(offset: number, Count: number, bstrstring: string): void;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceWholeText(bstrText: string): MSHTML$IHTMLDOMNode;
splitText(offset: number): MSHTML$IHTMLDOMNode;
substringData(offset: number, Count: number): string;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
textContent: any;
toString(): string;
wholeText: string
}

declare interface MSHTML$HTMLDOMXmlSerializerFactory {
create(): MSHTML$IDOMXmlSerializer,
(): MSHTML$IDOMXmlSerializer
} 

declare class MSHTML$HTMLDTElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
noWrap: boolean;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare interface MSHTML$HTMLElementCollection {
+"constructor": any,
ie8_item(index: number): MSHTML$IHTMLElement2,
+ie8_length: number,
ie8_namedItem(name: string): MSHTML$IHTMLElement2,
item(name?: any, index?: any): any,
length: number,
namedItem(name: string): any,
tags(tagName: any): any,
toString(): string,
urns(urn: any): any,
(name?: any, index?: any): any
} 

declare class MSHTML$HTMLEmbed  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
getSVGDocument(): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
height: any;
hidden: string;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_pluginspage: string;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_src: string;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
name: string;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
palette: string;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
pluginspage: string;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
src: string;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
units: string;
width: any;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLFieldSetElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
form: MSHTML$IHTMLFormElement;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLFontElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
color: any;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
face: string;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
size: any;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare interface MSHTML$HTMLFormElement {
acceptCharset: string,
accessKey: string,
action: string,
addBehavior(bstrURL: string, pvarFactory?: any): number,
addFilter(pUnk: any): void,
+all: any,
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
appendItemSeparator(): void,

/**
 * @param name [name='']
 * @param filename [filename='']
 */
appendNameFilePair(name?: string, filename?: string): void,

/**
 * @param name [name='']
 * @param value [value='']
 */
appendNameValuePair(name?: string, value?: string): void,
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement,
ariaActivedescendant: string,
ariaBusy: string,
ariaChecked: string,
ariaControls: string,
ariaDescribedby: string,
ariaDisabled: string,
ariaExpanded: string,
ariaFlowto: string,
ariaHaspopup: string,
ariaHidden: string,
ariaInvalid: string,
ariaLabelledby: string,
ariaLevel: number,
ariaLive: string,
ariaMultiselectable: string,
ariaOwns: string,
ariaPosinset: number,
ariaPressed: string,
ariaReadonly: string,
ariaRelevant: string,
ariaRequired: string,
ariaSecret: string,
ariaSelected: string,
ariaSetsize: number,
ariaValuemax: string,
ariaValuemin: string,
ariaValuenow: string,
attachEvent(event: string, pdisp: any): boolean,
+attributes: any,
+behaviorUrns: any,
blur(): void,
+canHaveChildren: boolean,
+canHaveHTML: boolean,
+childNodes: any,
+children: any,
className: string,
clearAttributes(): void,
click(): void,
+clientHeight: number,
+clientLeft: number,
+clientTop: number,
+clientWidth: number,
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode,
componentFromPoint(x: number, y: number): string,
+"constructor": any,
contains(pChild: MSHTML$IHTMLElement): boolean,
contentEditable: string,
createControlRange(): any,
+currentStyle: MSHTML$IHTMLCurrentStyle,
detachEvent(event: string, pdisp: any): void,
dir: string,
disabled: boolean,
+document: any,
doScroll(component?: any): void,
dragDrop(): boolean,
+elements: any,
encoding: string,
+filters: MSHTML$IHTMLFiltersCollection,
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean,
+firstChild: MSHTML$IHTMLDOMNode,
focus(): void,
getAdjacentText(where: string): string,

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any,
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute,
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2,
getAttributeNS(pvarNS: any, strAttributeName: string): any,
getBoundingClientRect(): MSHTML$IHTMLRect,
getClientRects(): MSHTML$IHTMLRectCollection,
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection,
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection,
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection,
getExpression(propname: string): any,
hasAttribute(name: string): boolean,
hasAttributeNS(pvarNS: any, name: string): boolean,
hasAttributes(): boolean,
hasChildNodes(): boolean,
hideFocus: boolean,
id: string,
ie8_action: string,
+ie8_attributes: MSHTML$IHTMLAttributeCollection3,
ie8_getAttribute(strAttributeName: string): any,
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2,
ie8_removeAttribute(strAttributeName: string): boolean,
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void,
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
ie9_getAttribute(strAttributeName: string): any,
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2,
ie9_hasAttribute(name: string): boolean,
ie9_hasAttributes(): boolean,
+ie9_nodeName: string,
ie9_removeAttribute(strAttributeName: string): void,
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void,
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
+ie9_tagName: string,
innerHTML: string,
innerText: string,
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement,
insertAdjacentHTML(where: string, html: string): void,
insertAdjacentText(where: string, text: string): void,
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode,
+isContentEditable: boolean,
+isDisabled: boolean,
+isMultiLine: boolean,
+isTextEdit: boolean,
item(name?: any, index?: any): any,
lang: string,
language: string,
+lastChild: MSHTML$IHTMLDOMNode,
length: number,
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void,
method: string,
msMatchesSelector(v: string): boolean,
msReleasePointerCapture(pointerId: number): void,
msSetPointerCapture(pointerId: number): void,
name: string,
namedItem(name: string): any,
+nextSibling: MSHTML$IHTMLDOMNode,
+nodeName: string,
+nodeType: number,
nodeValue: any,
normalize(): void,
+offsetHeight: number,
+offsetLeft: number,
+offsetParent: MSHTML$IHTMLElement,
+offsetTop: number,
+offsetWidth: number,
onabort: any,
onactivate: any,
onafterupdate: any,
onbeforeactivate: any,
onbeforecopy: any,
onbeforecut: any,
onbeforedeactivate: any,
onbeforeeditfocus: any,
onbeforepaste: any,
onbeforeupdate: any,
onblur: any,
oncanplay: any,
oncanplaythrough: any,
oncellchange: any,
onchange: any,
onclick: any,
oncontextmenu: any,
oncontrolselect: any,
oncopy: any,
oncuechange: any,
oncut: any,
ondataavailable: any,
ondatasetchanged: any,
ondatasetcomplete: any,
ondblclick: any,
ondeactivate: any,
ondrag: any,
ondragend: any,
ondragenter: any,
ondragleave: any,
ondragover: any,
ondragstart: any,
ondrop: any,
ondurationchange: any,
onemptied: any,
onended: any,
onerror: any,
onerrorupdate: any,
onfilterchange: any,
onfocus: any,
onfocusin: any,
onfocusout: any,
onhelp: any,
oninput: any,
oninvalid: any,
onkeydown: any,
onkeypress: any,
onkeyup: any,
onlayoutcomplete: any,
onload: any,
onloadeddata: any,
onloadedmetadata: any,
onloadstart: any,
onlosecapture: any,
onmousedown: any,
onmouseenter: any,
onmouseleave: any,
onmousemove: any,
onmouseout: any,
onmouseover: any,
onmouseup: any,
onmousewheel: any,
onmove: any,
onmoveend: any,
onmovestart: any,
onmsanimationend: any,
onmsanimationiteration: any,
onmsanimationstart: any,
onmsgesturechange: any,
onmsgesturedoubletap: any,
onmsgestureend: any,
onmsgesturehold: any,
onmsgesturestart: any,
onmsgesturetap: any,
onmsgotpointercapture: any,
onmsinertiastart: any,
onmslostpointercapture: any,
onmsmanipulationstatechanged: any,
onmspointercancel: any,
onmspointerdown: any,
onmspointerhover: any,
onmspointermove: any,
onmspointerout: any,
onmspointerover: any,
onmspointerup: any,
onmstransitionend: any,
onmstransitionstart: any,
onpage: any,
onpaste: any,
onpause: any,
onplay: any,
onplaying: any,
onprogress: any,
onpropertychange: any,
onratechange: any,
onreadystatechange: any,
onreset: any,
onresize: any,
onresizeend: any,
onresizestart: any,
onrowenter: any,
onrowexit: any,
onrowsdelete: any,
onrowsinserted: any,
onscroll: any,
onseeked: any,
onseeking: any,
onselect: any,
onselectstart: any,
onstalled: any,
onsubmit: any,
onsuspend: any,
ontimeupdate: any,
onvolumechange: any,
onwaiting: any,
outerHTML: string,
outerText: string,
+ownerDocument: any,
+parentElement: MSHTML$IHTMLElement,
+parentNode: MSHTML$IHTMLDOMNode,
+parentTextEdit: MSHTML$IHTMLElement,
+previousSibling: MSHTML$IHTMLDOMNode,
+readyState: any,
+recordNumber: any,
releaseCapture(): void,

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean,
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute,
removeAttributeNS(pvarNS: any, strAttributeName: string): void,
removeBehavior(cookie: number): boolean,
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
removeExpression(propname: string): boolean,
removeFilter(pUnk: any): void,

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode,
replaceAdjacentText(where: string, newText: string): string,
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
reset(): void,
role: string,
+runtimeStyle: MSHTML$IHTMLStyle,
+scopeName: string,
+scrollHeight: number,
scrollIntoView(varargStart?: any): void,
scrollLeft: number,
scrollTop: number,
+scrollWidth: number,
setActive(): void,

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void,
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute,
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void,

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void,

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void,
+sourceIndex: number,
spellcheck: any,
+style: MSHTML$IHTMLStyle,
submit(): void,
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
tabIndex: number,
+tagName: string,
tags(tagName: any): any,
tagUrn: string,
target: string,
title: string,
toString(): string,
+uniqueID: string,
+uniqueNumber: number,
urns(urn: any): any,
xmsAcceleratorKey: string,
(name?: any, index?: any): any
} 

declare class MSHTML$HTMLFrameBase  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
allowTransparency: boolean;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
border: any;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
contentWindow: MSHTML$IHTMLWindow2;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
frameBorder: string;
frameSpacing: any;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
longDesc: string;
marginHeight: any;
marginWidth: any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
name: string;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
noResize: boolean;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrolling: string;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
src: string;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLFrameElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
allowTransparency: boolean;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
border: any;
borderColor: any;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentDocument: any;
contentEditable: string;
contentWindow: MSHTML$IHTMLWindow2;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
frameBorder: string;
frameSpacing: any;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
getSVGDocument(): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
height: any;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_frameBorder: string;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_longDesc: string;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_src: string;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
longDesc: string;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
marginHeight: any;
marginWidth: any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
name: string;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
noResize: boolean;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrolling: string;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
src: string;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
width: any;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLFrameSetSite  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
border: any;
borderColor: any;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
cols: string;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
frameBorder: string;
frameSpacing: any;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
name: string;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterprint: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeprint: any;
onbeforeunload: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhashchange: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmessage: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onoffline: any;
ononline: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onstorage: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onunload: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
rows: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLGenericElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
namedRecordset(dataMember: string, hierarchy?: any): any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
recordset: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLHeadElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_profile: string;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
profile: string;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLHeaderElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clear: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLHistory  {
constructor(): this;
back(pvargdistance?: any): void;
constructor: any;
forward(pvargdistance?: any): void;
go(pvargdistance?: any): void;
length: number
}

declare class MSHTML$HTMLHRElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
color: any;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
noShade: boolean;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
size: any;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
width: any;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLHtmlElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
version: string;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLIFrame  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
allowTransparency: boolean;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
border: any;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentDocument: any;
contentEditable: string;
contentWindow: MSHTML$IHTMLWindow2;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
frameBorder: string;
frameSpacing: any;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
getSVGDocument(): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
height: any;
hideFocus: boolean;
hspace: number;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_frameBorder: string;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_longDesc: string;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_src: string;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
longDesc: string;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
marginHeight: any;
marginWidth: any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
name: string;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
noResize: boolean;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrolling: string;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
src: string;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
vspace: number;
width: any;
xmsAcceleratorKey: string
}

declare interface MSHTML$HTMLImageElementFactory {
create(width?: any, height?: any): MSHTML$IHTMLImgElement,
(width?: any, height?: any): MSHTML$IHTMLImgElement
} 

declare class MSHTML$HTMLImg  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
alt: string;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
border: any;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
complete: boolean;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
dynsrc: string;
fileCreatedDate: string;
fileModifiedDate: string;
fileSize: string;
fileUpdatedDate: string;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
height: number;
hideFocus: boolean;
href: string;
hspace: number;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_dynsrc: string;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_longDesc: string;
ie8_lowsrc: string;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_vrml: string;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMap: boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
longDesc: string;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
loop: any;
lowsrc: string;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
mimeType: string;
msMatchesSelector(v: string): boolean;
msPlayToDisabled: boolean;
msPlayToPrimary: boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
name: string;
nameProp: string;
namespaceURI: any;
naturalHeight: number;
naturalWidth: number;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
protocol: string;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
src: string;
start: string;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
useMap: string;
vrml: string;
vspace: number;
width: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLInputButtonElement  {
constructor(): this;
accessKey: string;
addFilter(pUnk: any): void;
all: any;
blur(): void;
children: any;
className: string;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
contains(pChild: MSHTML$IHTMLElement): boolean;
createTextRange(): MSHTML$IHTMLTxtRange;
disabled: boolean;
document: any;
filters: MSHTML$IHTMLFiltersCollection;
focus(): void;
form: MSHTML$IHTMLFormElement;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
id: string;
innerHTML: string;
innerText: string;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
isTextEdit: boolean;
lang: string;
language: string;
name: string;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onafterupdate: any;
onbeforeupdate: any;
onblur: any;
onclick: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondragstart: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onhelp: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onmousedown: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onresize: any;
onrowenter: any;
onrowexit: any;
onselectstart: any;
outerHTML: string;
outerText: string;
parentElement: MSHTML$IHTMLElement;
parentTextEdit: MSHTML$IHTMLElement;
recordNumber: any;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeFilter(pUnk: any): void;
scrollIntoView(varargStart?: any): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
sourceIndex: number;
status: any;
style: MSHTML$IHTMLStyle;
tabIndex: number;
tagName: string;
title: string;
toString(): string;
type: string;
value: string
}

declare class MSHTML$HTMLInputElement  {
constructor(): this;
accept: string;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
alt: string;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
border: any;
canHaveChildren: boolean;
canHaveHTML: boolean;
checked: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
complete: boolean;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
createTextRange(): MSHTML$IHTMLTxtRange;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
defaultChecked: boolean;
defaultValue: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
dynsrc: string;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
form: MSHTML$IHTMLFormElement;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
height: number;
hideFocus: boolean;
hspace: number;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_dynsrc: string;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_lowsrc: string;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_src: string;
ie8_vrml: string;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
indeterminate: boolean;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
loop: any;
lowsrc: string;
max: string;
maxLength: number;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
min: string;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
name: string;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readOnly: boolean;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
select(): void;
selectionEnd: number;
selectionStart: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
setSelectionRange(start: number, end: number): void;
size: number;
sourceIndex: number;
spellcheck: any;
src: string;
start: string;
status: boolean;
step: string;

/**
 * @param n [n=1]
 */
stepDown(n?: number): void;

/**
 * @param n [n=1]
 */
stepUp(n?: number): void;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
type: string;
uniqueID: string;
uniqueNumber: number;
useMap: string;
value: string;
valueAsNumber: number;
vrml: string;
vspace: number;
width: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLInputFileElement  {
constructor(): this;
accessKey: string;
addFilter(pUnk: any): void;
all: any;
blur(): void;
children: any;
className: string;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
contains(pChild: MSHTML$IHTMLElement): boolean;
disabled: boolean;
document: any;
filters: MSHTML$IHTMLFiltersCollection;
focus(): void;
form: MSHTML$IHTMLFormElement;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
id: string;
innerHTML: string;
innerText: string;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
isTextEdit: boolean;
lang: string;
language: string;
maxLength: number;
name: string;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onafterupdate: any;
onbeforeupdate: any;
onblur: any;
onchange: any;
onclick: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondragstart: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onhelp: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onmousedown: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onresize: any;
onrowenter: any;
onrowexit: any;
onselect: any;
onselectstart: any;
outerHTML: string;
outerText: string;
parentElement: MSHTML$IHTMLElement;
parentTextEdit: MSHTML$IHTMLElement;
recordNumber: any;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeFilter(pUnk: any): void;
scrollIntoView(varargStart?: any): void;
select(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
size: number;
sourceIndex: number;
status: any;
style: MSHTML$IHTMLStyle;
tabIndex: number;
tagName: string;
title: string;
toString(): string;
type: string;
value: string
}

declare class MSHTML$htmlInputImage  {
constructor(): this;
accessKey: string;
addFilter(pUnk: any): void;
align: string;
all: any;
alt: string;
blur(): void;
border: any;
children: any;
className: string;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
complete: boolean;
contains(pChild: MSHTML$IHTMLElement): boolean;
disabled: boolean;
document: any;
dynsrc: string;
filters: MSHTML$IHTMLFiltersCollection;
focus(): void;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
height: number;
hspace: number;
id: string;
innerHTML: string;
innerText: string;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
isTextEdit: boolean;
lang: string;
language: string;
loop: any;
lowsrc: string;
name: string;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onafterupdate: any;
onbeforeupdate: any;
onblur: any;
onclick: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondragstart: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onhelp: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onload: any;
onmousedown: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onresize: any;
onrowenter: any;
onrowexit: any;
onselectstart: any;
outerHTML: string;
outerText: string;
parentElement: MSHTML$IHTMLElement;
parentTextEdit: MSHTML$IHTMLElement;
readyState: string;
recordNumber: any;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeFilter(pUnk: any): void;
scrollIntoView(varargStart?: any): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
sourceIndex: number;
src: string;
start: string;
style: MSHTML$IHTMLStyle;
tabIndex: number;
tagName: string;
title: string;
toString(): string;
type: string;
vrml: string;
vspace: number;
width: number
}

declare class MSHTML$HTMLInputTextElement  {
constructor(): this;
accessKey: string;
addFilter(pUnk: any): void;
all: any;
blur(): void;
children: any;
className: string;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
contains(pChild: MSHTML$IHTMLElement): boolean;
createTextRange(): MSHTML$IHTMLTxtRange;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
defaultValue: string;
disabled: boolean;
document: any;
filters: MSHTML$IHTMLFiltersCollection;
focus(): void;
form: MSHTML$IHTMLFormElement;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
id: string;
innerHTML: string;
innerText: string;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
isTextEdit: boolean;
lang: string;
language: string;
maxLength: number;
name: string;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onafterupdate: any;
onbeforeupdate: any;
onblur: any;
onchange: any;
onclick: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondragstart: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onhelp: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onmousedown: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onresize: any;
onrowenter: any;
onrowexit: any;
onselect: any;
onselectstart: any;
outerHTML: string;
outerText: string;
parentElement: MSHTML$IHTMLElement;
parentTextEdit: MSHTML$IHTMLElement;
readOnly: boolean;
recordNumber: any;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeFilter(pUnk: any): void;
scrollIntoView(varargStart?: any): void;
select(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
size: number;
sourceIndex: number;
status: any;
style: MSHTML$IHTMLStyle;
tabIndex: number;
tagName: string;
title: string;
toString(): string;
type: string;
value: string
}

declare class MSHTML$HTMLIsIndexElement  {
constructor(): this;
accessKey: string;
action: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
form: MSHTML$IHTMLFormElement;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
prompt: string;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLLabelElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
form: MSHTML$IHTMLFormElement;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
htmlFor: string;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLLegendElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
form: MSHTML$IHTMLFormElement;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLLIElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
type: string;
uniqueID: string;
uniqueNumber: number;
value: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLLinkElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
charset: string;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
href: string;
hreflang: string;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_href: string;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
media: string;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
rel: string;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
rev: string;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sheet: MSHTML$IHTMLStyleSheet;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
styleSheet: MSHTML$IHTMLStyleSheet;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
target: string;
title: string;
toString(): string;
type: string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLListElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compact: boolean;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLLocation  {
constructor(): this;
assign(bstr: string): void;
constructor: any;
hash: string;
host: string;
hostname: string;
href: string;
pathname: string;
port: string;
protocol: string;

/**
 * @param flag [flag=false]
 */
reload(flag?: boolean): void;
replace(bstr: string): void;
search: string;
toString(): string
}

declare class MSHTML$HTMLMapElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
areas: MSHTML$IHTMLAreasCollection;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
name: string;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLMarqueeElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behavior: string;
behaviorUrns: any;
bgColor: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
direction: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
height: any;
hideFocus: boolean;
hspace: number;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
loop: number;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
onbounce: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfinish: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onstart: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollAmount: number;
scrollDelay: number;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
start(): void;
stop(): void;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
trueSpeed: boolean;
uniqueID: string;
uniqueNumber: number;
vspace: number;
width: any;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLMediaElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
autobuffer: boolean;
autoplay: boolean;
behaviorUrns: any;
blur(): void;
buffered: MSHTML$IHTMLTimeRanges;
canHaveChildren: boolean;
canHaveHTML: boolean;
canPlayType(type: string): string;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
controls: boolean;
createControlRange(): any;
currentSrc: string;
currentStyle: MSHTML$IHTMLCurrentStyle;
currentTime: number;
currentTimeDouble: number;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
defaultPlaybackRate: number;
defaultPlaybackRateDouble: number;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
duration: number;
durationDouble: number;
ended: boolean;
error: MSHTML$IHTMLMediaError;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
initialTime: number;
initialTimeDouble: number;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
load(): void;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
loop: boolean;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msPlayToDisabled: boolean;
msPlayToPrimary: boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
muted: boolean;
namespaceURI: any;
networkState: number;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
pause(): void;
paused: boolean;
play(): void;
playbackRate: number;
playbackRateDouble: number;
played: MSHTML$IHTMLTimeRanges;
prefix: any;
preload: string;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
seekable: MSHTML$IHTMLTimeRanges;
seeking: boolean;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
src: string;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
volume: number;
volumeDouble: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLMediaError  {
constructor(): this;
code: number
}

declare class MSHTML$HTMLMetaElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
charset: string;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
content: string;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
httpEquiv: string;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_url: string;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
name: string;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scheme: string;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
url: string;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLMSCSSKeyframeRule  {
constructor(): this;
cssText: string;
keyText: string;
parentRule: MSHTML$IHTMLCSSRule;
parentStyleSheet: MSHTML$IHTMLStyleSheet;
style: MSHTML$IHTMLRuleStyle;
type: number
}

declare class MSHTML$HTMLMSCSSKeyframesRule  {
constructor(): this;
appendRule(bstrRule: string): void;
cssRules: MSHTML$IHTMLStyleSheetRulesCollection;
cssText: string;
deleteRule(bstrKey: string): void;
findRule(bstrKey: string): MSHTML$IHTMLMSCSSKeyframeRule;
name: string;
parentRule: MSHTML$IHTMLCSSRule;
parentStyleSheet: MSHTML$IHTMLStyleSheet;
type: number
}

declare class MSHTML$HTMLNamespace  {
constructor(): this;
attachEvent(event: string, pdisp: any): boolean;
constructor: any;
detachEvent(event: string, pdisp: any): void;
doImport(bstrImplementationUrl: string): void;
name: string;
onreadystatechange: any;
readyState: any;
tagNames: any;
urn: string
}

declare interface MSHTML$HTMLNamespaceCollection {
add(bstrNamespace: string, bstrUrn: string, implementationUrl?: any): any,
+"constructor": any,
item(index: any): any,
+length: number,
(index: any): any
} 

declare class MSHTML$HTMLNavigator  {
constructor(): this;
appCodeName: string;
appMinorVersion: string;
appName: string;
appVersion: string;
browserLanguage: string;
connectionSpeed: number;
constructor: any;
cookieEnabled: boolean;
cpuClass: string;
geolocation: MSHTML$IWebGeolocation;
javaEnabled(): boolean;
mimeTypes: MSHTML$CMimeTypes;
msDoNotTrack: string;
onLine: boolean;
opsProfile: MSHTML$COpsProfile;
platform: string;
plugins: MSHTML$IHTMLPluginsCollection;
systemLanguage: string;
taintEnabled(): boolean;
toString(): string;
userAgent: string;
userLanguage: string;
userProfile: MSHTML$COpsProfile
}

declare class MSHTML$HTMLNextIdElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
n: string;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLNoShowElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLObjectElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
alt: string;
altHtml: string;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
archive: string;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
BaseHref: string;
behaviorUrns: any;
blur(): void;
border: any;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
classid: string;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
code: string;
codeBase: string;
codeType: string;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentDocument: any;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
data: string;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
declare: boolean;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
form: MSHTML$IHTMLFormElement;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
getSVGDocument(): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
height: any;
hideFocus: boolean;
hspace: number;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_codeBase: string;
ie8_data: string;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_object: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
name: string;
namedRecordset(dataMember: string, hierarchy?: any): any;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
object: any;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
recordset: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
standby: string;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
type: string;
uniqueID: string;
uniqueNumber: number;
useMap: string;
vspace: number;
width: any;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLOListElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compact: boolean;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
start: number;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
type: string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLOptionButtonElement  {
constructor(): this;
accessKey: string;
addFilter(pUnk: any): void;
all: any;
blur(): void;
checked: boolean;
children: any;
className: string;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
contains(pChild: MSHTML$IHTMLElement): boolean;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
defaultChecked: boolean;
disabled: boolean;
document: any;
filters: MSHTML$IHTMLFiltersCollection;
focus(): void;
form: MSHTML$IHTMLFormElement;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
id: string;
indeterminate: boolean;
innerHTML: string;
innerText: string;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
isTextEdit: boolean;
lang: string;
language: string;
name: string;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onafterupdate: any;
onbeforeupdate: any;
onblur: any;
onchange: any;
onclick: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondragstart: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onhelp: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onmousedown: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onresize: any;
onrowenter: any;
onrowexit: any;
onselectstart: any;
outerHTML: string;
outerText: string;
parentElement: MSHTML$IHTMLElement;
parentTextEdit: MSHTML$IHTMLElement;
recordNumber: any;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeFilter(pUnk: any): void;
scrollIntoView(varargStart?: any): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
sourceIndex: number;
status: boolean;
style: MSHTML$IHTMLStyle;
tabIndex: number;
tagName: string;
title: string;
toString(): string;
type: string;
value: string
}

declare class MSHTML$HTMLOptionElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
defaultSelected: boolean;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
form: MSHTML$IHTMLFormElement;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
ie9_value: string;
index: number;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
label: string;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
selected: boolean;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
text: string;
textContent: any;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
value: string;
xmsAcceleratorKey: string
}

declare interface MSHTML$HTMLOptionElementFactory {
create(
text?: any,
value?: any,
defaultSelected?: any,
selected?: any): MSHTML$IHTMLOptionElement,
(text?: any, value?: any, defaultSelected?: any, selected?: any): MSHTML$IHTMLOptionElement
} 

declare class MSHTML$HTMLParaElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clear: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLParamElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_valueType: string;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
name: string;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
type: string;
uniqueID: string;
uniqueNumber: number;
value: string;
valueType: string;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLPerformance  {
constructor(): this;
navigation: MSHTML$IHTMLPerformanceNavigation;
timing: MSHTML$IHTMLPerformanceTiming;
toJSON(): any;
toString(): string
}

declare class MSHTML$HTMLPerformanceNavigation  {
constructor(): this;
redirectCount: number;
toJSON(): any;
toString(): string;
type: number
}

declare class MSHTML$HTMLPerformanceTiming  {
constructor(): this;
connectEnd: number;
connectStart: number;
domainLookupEnd: number;
domainLookupStart: number;
domComplete: number;
domContentLoadedEventEnd: number;
domContentLoadedEventStart: number;
domInteractive: number;
domLoading: number;
fetchStart: number;
loadEventEnd: number;
loadEventStart: number;
msFirstPaint: number;
navigationStart: number;
redirectEnd: number;
redirectStart: number;
requestStart: number;
responseEnd: number;
responseStart: number;
toJSON(): any;
toString(): string;
unloadEventEnd: number;
unloadEventStart: number
}

declare class MSHTML$HTMLPhraseElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
cite: string;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
dateTime: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_cite: string;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLPopup  {
constructor(): this;
constructor: any;
document: MSHTML$IHTMLDocument;
Hide(): void;
isOpen: boolean;
Show(x: number, y: number, w: number, h: number, pElement: any): void
}

declare class MSHTML$HTMLProgressElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
form: MSHTML$IHTMLFormElement;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
max: number;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
position: number;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
value: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLRenderStyle  {
constructor(): this;
defaultTextSelection: string;
renderingPriority: number;
textBackgroundColor: any;
textColor: any;
textDecoration: string;
textDecorationColor: any;
textEffect: string;
textLineThroughStyle: string;
textUnderlineStyle: string
}

declare class MSHTML$HTMLRichtextElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
cols: number;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
createTextRange(): MSHTML$IHTMLTxtRange;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
defaultValue: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
form: MSHTML$IHTMLFormElement;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
name: string;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readOnly: boolean;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
rows: number;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
select(): void;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
status: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
type: string;
uniqueID: string;
uniqueNumber: number;
value: string;
wrap: string;
xmsAcceleratorKey: string
}

declare interface MSHTML$HTMLRuleStyle {
accelerator: string,
alignContent: string,
alignItems: string,
alignSelf: string,
animation: string,
animationDelay: string,
animationDirection: string,
animationDuration: string,
animationFillMode: string,
animationIterationCount: string,
animationName: string,
animationPlayState: string,
animationTimingFunction: string,
backfaceVisibility: string,
background: string,
backgroundAttachment: string,
backgroundColor: any,
backgroundImage: string,
backgroundPosition: string,
backgroundPositionX: any,
backgroundPositionY: any,
backgroundRepeat: string,
behavior: string,
border: string,
borderBottom: string,
borderBottomColor: any,
borderBottomStyle: string,
borderBottomWidth: any,
borderCollapse: string,
borderColor: string,
borderImage: string,
borderImageOutset: string,
borderImageRepeat: string,
borderImageSlice: string,
borderImageSource: string,
borderImageWidth: string,
borderLeft: string,
borderLeftColor: any,
borderLeftStyle: string,
borderLeftWidth: any,
borderRight: string,
borderRightColor: any,
borderRightStyle: string,
borderRightWidth: any,
borderSpacing: string,
borderStyle: string,
borderTop: string,
borderTopColor: any,
borderTopStyle: string,
borderTopWidth: any,
borderWidth: string,
bottom: any,
boxSizing: string,
breakAfter: string,
breakBefore: string,
breakInside: string,
captionSide: string,
clear: string,
clip: string,
color: any,
colorInterpolationFilters: string,
columnCount: any,
columnFill: string,
columnGap: any,
columnRule: string,
columnRuleColor: any,
columnRuleStyle: string,
columnRuleWidth: any,
columns: string,
columnSpan: string,
columnWidth: any,
+"constructor": any,
content: string,
counterIncrement: string,
counterReset: string,
cssText: string,
cursor: string,
direction: string,
display: string,
emptyCells: string,
enableBackground: string,
filter: string,
flex: string,
flexBasis: any,
flexDirection: string,
flexFlow: string,
flexGrow: any,
flexShrink: any,
flexWrap: string,
floodColor: any,
floodOpacity: any,
font: string,
fontFamily: string,
fontFeatureSettings: string,
fontSize: any,
fontStyle: string,
fontVariant: string,
fontWeight: string,

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any,
getPropertyPriority(bstrPropertyName: string): string,
getPropertyValue(bstrPropertyName: string): string,
height: any,
imeMode: string,
item(index: number): string,
justifyContent: string,
layoutFlow: string,
layoutGrid: string,
layoutGridChar: any,
layoutGridLine: any,
layoutGridMode: string,
layoutGridType: string,
left: any,
+length: number,
letterSpacing: any,
lightingColor: any,
lineBreak: string,
lineHeight: any,
listStyle: string,
listStyleImage: string,
listStylePosition: string,
listStyleType: string,
margin: string,
marginBottom: any,
marginLeft: any,
marginRight: any,
marginTop: any,
maxHeight: any,
maxWidth: any,
minHeight: any,
minWidth: any,
msAnimation: string,
msAnimationDelay: string,
msAnimationDirection: string,
msAnimationDuration: string,
msAnimationFillMode: string,
msAnimationIterationCount: string,
msAnimationName: string,
msAnimationPlayState: string,
msAnimationTimingFunction: string,
msBackfaceVisibility: string,
msBlockProgression: string,
msContentZoomChaining: string,
msContentZooming: string,
msContentZoomLimit: string,
msContentZoomLimitMax: any,
msContentZoomLimitMin: any,
msContentZoomSnap: string,
msContentZoomSnapPoints: string,
msContentZoomSnapType: string,
msFlex: string,
msFlexAlign: string,
msFlexDirection: string,
msFlexFlow: string,
msFlexItemAlign: string,
msFlexLinePack: string,
msFlexNegative: any,
msFlexOrder: any,
msFlexPack: string,
msFlexPositive: any,
msFlexPreferredSize: any,
msFlexWrap: string,
msFlowFrom: string,
msFlowInto: string,
msFontFeatureSettings: string,
msGetPropertyEnabled(name: string): boolean,
msGridColumn: any,
msGridColumnAlign: string,
msGridColumns: string,
msGridColumnSpan: any,
msGridRow: any,
msGridRowAlign: string,
msGridRows: string,
msGridRowSpan: any,
msHighContrastAdjust: string,
msHyphenateLimitChars: string,
msHyphenateLimitLines: any,
msHyphenateLimitZone: any,
msHyphens: string,
msImeAlign: string,
msInterpolationMode: string,
msOverflowStyle: string,
msPerspective: any,
msPerspectiveOrigin: string,
msPutPropertyEnabled(name: string, b: boolean): void,
msScrollChaining: string,
msScrollLimit: string,
msScrollLimitXMax: any,
msScrollLimitXMin: any,
msScrollLimitYMax: any,
msScrollLimitYMin: any,
msScrollRails: string,
msScrollSnapPointsX: string,
msScrollSnapPointsY: string,
msScrollSnapType: string,
msScrollSnapX: string,
msScrollSnapY: string,
msScrollTranslation: string,
msTextCombineHorizontal: string,
msTextSizeAdjust: any,
msTouchAction: string,
msTouchSelect: string,
msTransformStyle: string,
msTransition: string,
msTransitionDelay: string,
msTransitionDuration: string,
msTransitionProperty: string,
msTransitionTimingFunction: string,
msUserSelect: string,
msWrapFlow: string,
msWrapMargin: any,
msWrapThrough: string,
orphans: any,
outline: string,
outlineColor: any,
outlineStyle: string,
outlineWidth: any,
overflow: string,
overflowX: string,
overflowY: string,
padding: string,
paddingBottom: any,
paddingLeft: any,
paddingRight: any,
paddingTop: any,
pageBreakAfter: string,
pageBreakBefore: string,
pageBreakInside: string,
+parentRule: any,
perspective: any,
perspectiveOrigin: string,
pixelBottom: number,
pixelRight: number,
posBottom: number,
position: string,
posRight: number,
quotes: string,

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean,
removeProperty(bstrPropertyName: string): string,
right: any,
rubyAlign: string,
rubyOverhang: string,
rubyPosition: string,
scrollbar3dLightColor: any,
scrollbarArrowColor: any,
scrollbarBaseColor: any,
scrollbarDarkShadowColor: any,
scrollbarFaceColor: any,
scrollbarHighlightColor: any,
scrollbarShadowColor: any,
scrollbarTrackColor: any,

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void,

/**
 * @param pvarPropertyPriority [pvarPropertyPriority='']
 */
setProperty(
bstrPropertyName: string,
pvarPropertyValue: any,
pvarPropertyPriority?: any): void,
styleFloat: string,
tableLayout: string,
textAlign: string,
textAlignLast: string,
textAutospace: string,
textDecoration: string,
textDecorationBlink: boolean,
textDecorationLineThrough: boolean,
textDecorationNone: boolean,
textDecorationOverline: boolean,
textDecorationUnderline: boolean,
textIndent: any,
textJustify: string,
textJustifyTrim: string,
textKashida: any,
textKashidaSpace: any,
textOverflow: string,
textShadow: string,
textTransform: string,
textUnderlinePosition: string,
top: any,
touchAction: string,
transform: string,
transformOrigin: string,
transformStyle: string,
transition: string,
transitionDelay: string,
transitionDuration: string,
transitionProperty: string,
transitionTimingFunction: string,
unicodeBidi: string,
verticalAlign: any,
visibility: string,
webkitAnimation: string,
webkitAnimationDelay: string,
webkitAnimationDirection: string,
webkitAnimationDuration: string,
webkitAnimationFillMode: string,
webkitAnimationIterationCount: string,
webkitAnimationName: string,
webkitAnimationPlayState: string,
webkitAnimationTimingFunction: string,
webkitAppearance: string,
webkitBackfaceVisibility: string,
webkitBackground: string,
webkitBackgroundAttachment: string,
webkitBackgroundClip: string,
webkitBackgroundColor: any,
webkitBackgroundImage: string,
webkitBackgroundOrigin: string,
webkitBackgroundPosition: string,
webkitBackgroundPositionX: any,
webkitBackgroundPositionY: any,
webkitBackgroundRepeat: string,
webkitBackgroundSize: string,
webkitBorderImage: string,
webkitBorderImageOutset: string,
webkitBorderImageRepeat: string,
webkitBorderImageSlice: string,
webkitBorderImageSource: string,
webkitBorderImageWidth: string,
webkitBoxAlign: string,
webkitBoxDirection: string,
webkitBoxFlex: any,
webkitBoxOrdinalGroup: any,
webkitBoxOrient: string,
webkitBoxPack: string,
webkitBoxSizing: string,
webkitTextSizeAdjust: any,
webkitTransform: string,
webkitTransformOrigin: string,
webkitTransition: string,
webkitTransitionDelay: string,
webkitTransitionDuration: string,
webkitTransitionProperty: string,
webkitTransitionTimingFunction: string,
webkitUserSelect: string,
whiteSpace: string,
widows: any,
width: any,
wordBreak: string,
wordSpacing: any,
wordWrap: string,
writingMode: string,
zIndex: any,
zoom: any,
(index: number): string
} 

declare class MSHTML$HTMLScreen  {
constructor(): this;
availHeight: number;
availWidth: number;
bufferDepth: number;
colorDepth: number;
constructor: any;
deviceXDPI: number;
deviceYDPI: number;
fontSmoothingEnabled: boolean;
height: number;
logicalXDPI: number;
logicalYDPI: number;
pixelDepth: number;
systemXDPI: number;
systemYDPI: number;
updateInterval: number;
width: number
}

declare class MSHTML$HTMLScriptElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
charset: string;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
defer: boolean;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
event: string;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
htmlFor: string;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_src: string;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
src: string;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
text: string;
title: string;
toString(): string;
type: string;
uniqueID: string;
uniqueNumber: number;
usedCharset: string;
xmsAcceleratorKey: string
}

declare interface MSHTML$HTMLSelectElement {
accessKey: string,
add(element: MSHTML$IHTMLElement, before?: any): void,
addBehavior(bstrURL: string, pvarFactory?: any): number,
addFilter(pUnk: any): void,
+all: any,
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement,
ariaActivedescendant: string,
ariaBusy: string,
ariaChecked: string,
ariaControls: string,
ariaDescribedby: string,
ariaDisabled: string,
ariaExpanded: string,
ariaFlowto: string,
ariaHaspopup: string,
ariaHidden: string,
ariaInvalid: string,
ariaLabelledby: string,
ariaLevel: number,
ariaLive: string,
ariaMultiselectable: string,
ariaOwns: string,
ariaPosinset: number,
ariaPressed: string,
ariaReadonly: string,
ariaRelevant: string,
ariaRequired: string,
ariaSecret: string,
ariaSelected: string,
ariaSetsize: number,
ariaValuemax: string,
ariaValuemin: string,
ariaValuenow: string,
attachEvent(event: string, pdisp: any): boolean,
+attributes: any,
+behaviorUrns: any,
blur(): void,
+canHaveChildren: boolean,
+canHaveHTML: boolean,
+childNodes: any,
+children: any,
className: string,
clearAttributes(): void,
click(): void,
+clientHeight: number,
+clientLeft: number,
+clientTop: number,
+clientWidth: number,
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode,
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number,
componentFromPoint(x: number, y: number): string,
+"constructor": any,
contains(pChild: MSHTML$IHTMLElement): boolean,
contentEditable: string,
createControlRange(): any,
+currentStyle: MSHTML$IHTMLCurrentStyle,
dataFld: string,
dataFormatAs: string,
dataSrc: string,
detachEvent(event: string, pdisp: any): void,
dir: string,
disabled: boolean,
+document: any,
doScroll(component?: any): void,
dragDrop(): boolean,
+filters: MSHTML$IHTMLFiltersCollection,
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean,
+firstChild: MSHTML$IHTMLDOMNode,
focus(): void,
+form: MSHTML$IHTMLFormElement,
getAdjacentText(where: string): string,

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any,
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute,
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2,
getAttributeNS(pvarNS: any, strAttributeName: string): any,
getBoundingClientRect(): MSHTML$IHTMLRect,
getClientRects(): MSHTML$IHTMLRectCollection,
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection,
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection,
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection,
getExpression(propname: string): any,
hasAttribute(name: string): boolean,
hasAttributeNS(pvarNS: any, name: string): boolean,
hasAttributes(): boolean,
hasChildNodes(): boolean,
hideFocus: boolean,
id: string,
ie8_add(pElem: MSHTML$IHTMLOptionElement, pvarBefore: any): void,
+ie8_attributes: MSHTML$IHTMLAttributeCollection3,
ie8_getAttribute(strAttributeName: string): any,
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2,
ie8_removeAttribute(strAttributeName: string): boolean,
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void,
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
ie9_add(pElem: MSHTML$IHTMLOptionElement, pvarBefore: any): void,
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
ie9_getAttribute(strAttributeName: string): any,
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2,
ie9_hasAttribute(name: string): boolean,
ie9_hasAttributes(): boolean,
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode,
+ie9_nodeName: string,
ie9_removeAttribute(strAttributeName: string): void,
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void,
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
+ie9_tagName: string,
ie9_value: string,
innerHTML: string,
innerText: string,
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement,
insertAdjacentHTML(where: string, html: string): void,
insertAdjacentText(where: string, text: string): void,
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode,
+isContentEditable: boolean,
isDefaultNamespace(pvarNamespace: any): boolean,
+isDisabled: boolean,
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean,
+isMultiLine: boolean,
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean,
isSupported(feature: string, version: any): boolean,
+isTextEdit: boolean,
item(name?: any, index?: any): any,
lang: string,
language: string,
+lastChild: MSHTML$IHTMLDOMNode,
length: number,
+localName: any,
lookupNamespaceURI(pvarPrefix: any): any,
lookupPrefix(pvarNamespaceURI: any): any,
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void,
msMatchesSelector(v: string): boolean,
msReleasePointerCapture(pointerId: number): void,
msSetPointerCapture(pointerId: number): void,
multiple: boolean,
name: string,
namedItem(name: string): any,
+namespaceURI: any,
+nextSibling: MSHTML$IHTMLDOMNode,
+nodeName: string,
+nodeType: number,
nodeValue: any,
normalize(): void,
+offsetHeight: number,
+offsetLeft: number,
+offsetParent: MSHTML$IHTMLElement,
+offsetTop: number,
+offsetWidth: number,
onabort: any,
onactivate: any,
onafterupdate: any,
onbeforeactivate: any,
onbeforecopy: any,
onbeforecut: any,
onbeforedeactivate: any,
onbeforeeditfocus: any,
onbeforepaste: any,
onbeforeupdate: any,
onblur: any,
oncanplay: any,
oncanplaythrough: any,
oncellchange: any,
onchange: any,
onclick: any,
oncontextmenu: any,
oncontrolselect: any,
oncopy: any,
oncuechange: any,
oncut: any,
ondataavailable: any,
ondatasetchanged: any,
ondatasetcomplete: any,
ondblclick: any,
ondeactivate: any,
ondrag: any,
ondragend: any,
ondragenter: any,
ondragleave: any,
ondragover: any,
ondragstart: any,
ondrop: any,
ondurationchange: any,
onemptied: any,
onended: any,
onerror: any,
onerrorupdate: any,
onfilterchange: any,
onfocus: any,
onfocusin: any,
onfocusout: any,
onhelp: any,
oninput: any,
oninvalid: any,
onkeydown: any,
onkeypress: any,
onkeyup: any,
onlayoutcomplete: any,
onload: any,
onloadeddata: any,
onloadedmetadata: any,
onloadstart: any,
onlosecapture: any,
onmousedown: any,
onmouseenter: any,
onmouseleave: any,
onmousemove: any,
onmouseout: any,
onmouseover: any,
onmouseup: any,
onmousewheel: any,
onmove: any,
onmoveend: any,
onmovestart: any,
onmsanimationend: any,
onmsanimationiteration: any,
onmsanimationstart: any,
onmsgesturechange: any,
onmsgesturedoubletap: any,
onmsgestureend: any,
onmsgesturehold: any,
onmsgesturestart: any,
onmsgesturetap: any,
onmsgotpointercapture: any,
onmsinertiastart: any,
onmslostpointercapture: any,
onmsmanipulationstatechanged: any,
onmspointercancel: any,
onmspointerdown: any,
onmspointerhover: any,
onmspointermove: any,
onmspointerout: any,
onmspointerover: any,
onmspointerup: any,
onmstransitionend: any,
onmstransitionstart: any,
onpage: any,
onpaste: any,
onpause: any,
onplay: any,
onplaying: any,
onprogress: any,
onpropertychange: any,
onratechange: any,
onreadystatechange: any,
onreset: any,
onresize: any,
onresizeend: any,
onresizestart: any,
onrowenter: any,
onrowexit: any,
onrowsdelete: any,
onrowsinserted: any,
onscroll: any,
onseeked: any,
onseeking: any,
onselect: any,
onselectstart: any,
onstalled: any,
onsubmit: any,
onsuspend: any,
ontimeupdate: any,
onvolumechange: any,
onwaiting: any,
+options: any,
outerHTML: string,
outerText: string,
+ownerDocument: any,
+parentElement: MSHTML$IHTMLElement,
+parentNode: MSHTML$IHTMLDOMNode,
+parentTextEdit: MSHTML$IHTMLElement,
prefix: any,
+previousSibling: MSHTML$IHTMLDOMNode,
querySelector(v: string): MSHTML$IHTMLElement,
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection,
+readyState: any,
+recordNumber: any,
releaseCapture(): void,

/**
 * @param index [index=-1]
 */
remove(index?: number): void,

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean,
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute,
removeAttributeNS(pvarNS: any, strAttributeName: string): void,
removeBehavior(cookie: number): boolean,
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
removeExpression(propname: string): boolean,
removeFilter(pUnk: any): void,

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode,
replaceAdjacentText(where: string, newText: string): string,
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
role: string,
+runtimeStyle: MSHTML$IHTMLStyle,
+scopeName: string,
+scrollHeight: number,
scrollIntoView(varargStart?: any): void,
scrollLeft: number,
scrollTop: number,
+scrollWidth: number,
selectedIndex: number,
setActive(): void,

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void,
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute,
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void,

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void,

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void,
size: number,
+sourceIndex: number,
spellcheck: any,
+style: MSHTML$IHTMLStyle,
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
tabIndex: number,
+tagName: string,
tags(tagName: any): any,
tagUrn: string,
textContent: any,
title: string,
toString(): string,
+type: string,
+uniqueID: string,
+uniqueNumber: number,
urns(urn: any): any,
value: string,
xmsAcceleratorKey: string,
(name?: any, index?: any): any
} 

declare class MSHTML$HTMLSemanticElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLSourceElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
media: string;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
src: string;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
type: string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLSpanElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLSpanFlow  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLStorage  {
constructor(): this;
clear(): void;
constructor: any;
getItem(bstrKey: string): any;
ie9_setItem(bstrKey: string, bstrValue: string): void;
key(lIndex: number): string;
length: number;
remainingSpace: number;
removeItem(bstrKey: string): void;
setItem(bstrKey: string, bstrValue: string): void
}

declare interface MSHTML$HTMLStyle {
accelerator: string,
alignContent: string,
alignItems: string,
alignSelf: string,
animation: string,
animationDelay: string,
animationDirection: string,
animationDuration: string,
animationFillMode: string,
animationIterationCount: string,
animationName: string,
animationPlayState: string,
animationTimingFunction: string,
backfaceVisibility: string,
background: string,
backgroundAttachment: string,
backgroundColor: any,
backgroundImage: string,
backgroundPosition: string,
backgroundPositionX: any,
backgroundPositionY: any,
backgroundRepeat: string,
behavior: string,
border: string,
borderBottom: string,
borderBottomColor: any,
borderBottomStyle: string,
borderBottomWidth: any,
borderCollapse: string,
borderColor: string,
borderImage: string,
borderImageOutset: string,
borderImageRepeat: string,
borderImageSlice: string,
borderImageSource: string,
borderImageWidth: string,
borderLeft: string,
borderLeftColor: any,
borderLeftStyle: string,
borderLeftWidth: any,
borderRight: string,
borderRightColor: any,
borderRightStyle: string,
borderRightWidth: any,
borderSpacing: string,
borderStyle: string,
borderTop: string,
borderTopColor: any,
borderTopStyle: string,
borderTopWidth: any,
borderWidth: string,
bottom: any,
boxSizing: string,
breakAfter: string,
breakBefore: string,
breakInside: string,
captionSide: string,
clear: string,
clip: string,
color: any,
colorInterpolationFilters: string,
columnCount: any,
columnFill: string,
columnGap: any,
columnRule: string,
columnRuleColor: any,
columnRuleStyle: string,
columnRuleWidth: any,
columns: string,
columnSpan: string,
columnWidth: any,
+"constructor": any,
content: string,
counterIncrement: string,
counterReset: string,
cssText: string,
cursor: string,
direction: string,
display: string,
emptyCells: string,
enableBackground: string,
filter: string,
flex: string,
flexBasis: any,
flexDirection: string,
flexFlow: string,
flexGrow: any,
flexShrink: any,
flexWrap: string,
floodColor: any,
floodOpacity: any,
font: string,
fontFamily: string,
fontFeatureSettings: string,
fontSize: any,
fontStyle: string,
fontVariant: string,
fontWeight: string,

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any,
getExpression(propname: string): any,
getPropertyPriority(bstrPropertyName: string): string,
getPropertyValue(bstrPropertyName: string): string,
height: any,
imeMode: string,
item(index: number): string,
justifyContent: string,
layoutFlow: string,
layoutGrid: string,
layoutGridChar: any,
layoutGridLine: any,
layoutGridMode: string,
layoutGridType: string,
left: any,
+length: number,
letterSpacing: any,
lightingColor: any,
lineBreak: string,
lineHeight: any,
listStyle: string,
listStyleImage: string,
listStylePosition: string,
listStyleType: string,
margin: string,
marginBottom: any,
marginLeft: any,
marginRight: any,
marginTop: any,
maxHeight: any,
maxWidth: any,
minHeight: any,
minWidth: any,
msAnimation: string,
msAnimationDelay: string,
msAnimationDirection: string,
msAnimationDuration: string,
msAnimationFillMode: string,
msAnimationIterationCount: string,
msAnimationName: string,
msAnimationPlayState: string,
msAnimationTimingFunction: string,
msBackfaceVisibility: string,
msBlockProgression: string,
msContentZoomChaining: string,
msContentZooming: string,
msContentZoomLimit: string,
msContentZoomLimitMax: any,
msContentZoomLimitMin: any,
msContentZoomSnap: string,
msContentZoomSnapPoints: string,
msContentZoomSnapType: string,
msFlex: string,
msFlexAlign: string,
msFlexDirection: string,
msFlexFlow: string,
msFlexItemAlign: string,
msFlexLinePack: string,
msFlexNegative: any,
msFlexOrder: any,
msFlexPack: string,
msFlexPositive: any,
msFlexPreferredSize: any,
msFlexWrap: string,
msFlowFrom: string,
msFlowInto: string,
msFontFeatureSettings: string,
msGetPropertyEnabled(name: string): boolean,
msGridColumn: any,
msGridColumnAlign: string,
msGridColumns: string,
msGridColumnSpan: any,
msGridRow: any,
msGridRowAlign: string,
msGridRows: string,
msGridRowSpan: any,
msHighContrastAdjust: string,
msHyphenateLimitChars: string,
msHyphenateLimitLines: any,
msHyphenateLimitZone: any,
msHyphens: string,
msImeAlign: string,
msInterpolationMode: string,
msOverflowStyle: string,
msPerspective: any,
msPerspectiveOrigin: string,
msPutPropertyEnabled(name: string, b: boolean): void,
msScrollChaining: string,
msScrollLimit: string,
msScrollLimitXMax: any,
msScrollLimitXMin: any,
msScrollLimitYMax: any,
msScrollLimitYMin: any,
msScrollRails: string,
msScrollSnapPointsX: string,
msScrollSnapPointsY: string,
msScrollSnapType: string,
msScrollSnapX: string,
msScrollSnapY: string,
msScrollTranslation: string,
msTextCombineHorizontal: string,
msTextSizeAdjust: any,
msTouchAction: string,
msTouchSelect: string,
msTransformStyle: string,
msTransition: string,
msTransitionDelay: string,
msTransitionDuration: string,
msTransitionProperty: string,
msTransitionTimingFunction: string,
msUserSelect: string,
msWrapFlow: string,
msWrapMargin: any,
msWrapThrough: string,
orphans: any,
outline: string,
outlineColor: any,
outlineStyle: string,
outlineWidth: any,
overflow: string,
overflowX: string,
overflowY: string,
padding: string,
paddingBottom: any,
paddingLeft: any,
paddingRight: any,
paddingTop: any,
pageBreakAfter: string,
pageBreakBefore: string,
pageBreakInside: string,
+parentRule: any,
perspective: any,
perspectiveOrigin: string,
pixelBottom: number,
pixelHeight: number,
pixelLeft: number,
pixelRight: number,
pixelTop: number,
pixelWidth: number,
posBottom: number,
posHeight: number,
position: string,
posLeft: number,
posRight: number,
posTop: number,
posWidth: number,
quotes: string,

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean,
removeExpression(propname: string): boolean,
removeProperty(bstrPropertyName: string): string,
right: any,
rubyAlign: string,
rubyOverhang: string,
rubyPosition: string,
scrollbar3dLightColor: any,
scrollbarArrowColor: any,
scrollbarBaseColor: any,
scrollbarDarkShadowColor: any,
scrollbarFaceColor: any,
scrollbarHighlightColor: any,
scrollbarShadowColor: any,
scrollbarTrackColor: any,

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void,

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void,

/**
 * @param pvarPropertyPriority [pvarPropertyPriority='']
 */
setProperty(
bstrPropertyName: string,
pvarPropertyValue: any,
pvarPropertyPriority?: any): void,
styleFloat: string,
tableLayout: string,
textAlign: string,
textAlignLast: string,
textAutospace: string,
textDecoration: string,
textDecorationBlink: boolean,
textDecorationLineThrough: boolean,
textDecorationNone: boolean,
textDecorationOverline: boolean,
textDecorationUnderline: boolean,
textIndent: any,
textJustify: string,
textJustifyTrim: string,
textKashida: any,
textKashidaSpace: any,
textOverflow: string,
textShadow: string,
textTransform: string,
textUnderlinePosition: string,
top: any,
toString(): string,
touchAction: string,
transform: string,
transformOrigin: string,
transformStyle: string,
transition: string,
transitionDelay: string,
transitionDuration: string,
transitionProperty: string,
transitionTimingFunction: string,
unicodeBidi: string,
verticalAlign: any,
visibility: string,
webkitAnimation: string,
webkitAnimationDelay: string,
webkitAnimationDirection: string,
webkitAnimationDuration: string,
webkitAnimationFillMode: string,
webkitAnimationIterationCount: string,
webkitAnimationName: string,
webkitAnimationPlayState: string,
webkitAnimationTimingFunction: string,
webkitAppearance: string,
webkitBackfaceVisibility: string,
webkitBackground: string,
webkitBackgroundAttachment: string,
webkitBackgroundClip: string,
webkitBackgroundColor: any,
webkitBackgroundImage: string,
webkitBackgroundOrigin: string,
webkitBackgroundPosition: string,
webkitBackgroundPositionX: any,
webkitBackgroundPositionY: any,
webkitBackgroundRepeat: string,
webkitBackgroundSize: string,
webkitBorderImage: string,
webkitBorderImageOutset: string,
webkitBorderImageRepeat: string,
webkitBorderImageSlice: string,
webkitBorderImageSource: string,
webkitBorderImageWidth: string,
webkitBoxAlign: string,
webkitBoxDirection: string,
webkitBoxFlex: any,
webkitBoxOrdinalGroup: any,
webkitBoxOrient: string,
webkitBoxPack: string,
webkitBoxSizing: string,
webkitTextSizeAdjust: any,
webkitTransform: string,
webkitTransformOrigin: string,
webkitTransition: string,
webkitTransitionDelay: string,
webkitTransitionDuration: string,
webkitTransitionProperty: string,
webkitTransitionTimingFunction: string,
webkitUserSelect: string,
whiteSpace: string,
widows: any,
width: any,
wordBreak: string,
wordSpacing: any,
wordWrap: string,
writingMode: string,
zIndex: any,
zoom: any,
(index: number): string
} 

declare class MSHTML$HTMLStyleElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
media: string;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sheet: MSHTML$IHTMLStyleSheet;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
styleSheet: MSHTML$IHTMLStyleSheet;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
type: string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLStyleFontFace  {
constructor(): this;
cssText: string;
fontsrc: string;
parentRule: MSHTML$IHTMLCSSRule;
parentStyleSheet: MSHTML$IHTMLStyleSheet;
style: MSHTML$IHTMLRuleStyle;
type: number
}

declare class MSHTML$HTMLStyleMedia  {
constructor(): this;
matchMedium(mediaQuery: string): boolean;
type: string
}

declare class MSHTML$HTMLStyleSheet  {
constructor(): this;

/**
 * @param lIndex [lIndex=-1]
 */
addImport(bstrURL: string, lIndex?: number): number;

/**
 * @param lIndex [lIndex=-1]
 */
addPageRule(bstrSelector: string, bstrStyle: string, lIndex?: number): number;

/**
 * @param lIndex [lIndex=-1]
 */
addRule(bstrSelector: string, bstrStyle: string, lIndex?: number): number;
constructor: any;
cssRules: MSHTML$IHTMLStyleSheetRulesCollection;
cssText: string;

/**
 * @param lIndex [lIndex=-1]
 */
deleteRule(lIndex?: number): void;
disabled: boolean;
href: string;
id: string;
ie8_href: string;
ie9_href: any;
ie9_media: any;
ie9_title: string;
ie9_type: string;
imports: MSHTML$IHTMLStyleSheetsCollection;

/**
 * @param lIndex [lIndex=-1]
 */
insertRule(bstrRule: string, lIndex?: number): number;
isAlternate: boolean;
isPrefAlternate: boolean;
media: string;
ownerNode: MSHTML$IHTMLElement;
ownerRule: MSHTML$IHTMLCSSRule;
owningElement: MSHTML$IHTMLElement;
pages: MSHTML$IHTMLStyleSheetPagesCollection;
parentStyleSheet: MSHTML$IHTMLStyleSheet;
readOnly: boolean;
removeImport(lIndex: number): void;
removeRule(lIndex: number): void;
rules: MSHTML$IHTMLStyleSheetRulesCollection;
title: string;
type: string
}

declare class MSHTML$HTMLStyleSheetPage  {
constructor(): this;
constructor: any;
cssText: string;
parentRule: MSHTML$IHTMLCSSRule;
parentStyleSheet: MSHTML$IHTMLStyleSheet;
pseudoClass: string;
selector: string;
selectorText: string;
style: MSHTML$IHTMLRuleStyle;
type: number
}

declare interface MSHTML$HTMLStyleSheetPagesCollection {
+"constructor": any,
item(index: number): MSHTML$IHTMLStyleSheetPage,
+length: number,
(index: number): MSHTML$IHTMLStyleSheetPage
} 

declare class MSHTML$HTMLStyleSheetRule  {
constructor(): this;
constructor: any;
cssText: string;
ie9_selectorText: string;
msGetSpecificity(index: number): number;
parentRule: MSHTML$IHTMLCSSRule;
parentStyleSheet: MSHTML$IHTMLStyleSheet;
readOnly: boolean;
selectorText: string;
style: MSHTML$IHTMLRuleStyle;
type: number
}

declare interface MSHTML$HTMLStyleSheetRulesAppliedCollection {
item(index: number): MSHTML$IHTMLStyleSheetRule,
+length: number,
propertyAppliedBy(name: string): MSHTML$IHTMLStyleSheetRule,
propertyAppliedTrace(name: string, index: number): MSHTML$IHTMLStyleSheetRule,
propertyAppliedTraceLength(name: string): number,
(index: number): MSHTML$IHTMLStyleSheetRule
} 

declare interface MSHTML$HTMLStyleSheetRulesCollection {
+"constructor": any,
ie9_item(index: number): MSHTML$IHTMLCSSRule,
+ie9_length: number,
item(index: number): MSHTML$IHTMLStyleSheetRule,
+length: number,
(index: number): MSHTML$IHTMLStyleSheetRule
} 

declare interface MSHTML$HTMLStyleSheetsCollection {
+"constructor": any,
ie9_item(index: number): any,
item(pvarIndex: any): any,
+length: number,
(pvarIndex: any): any
} 

declare class MSHTML$HTMLTable  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
background: string;
behaviorUrns: any;
bgColor: any;
blur(): void;
border: any;
borderColor: any;
borderColorDark: any;
borderColorLight: any;
canHaveChildren: boolean;
canHaveHTML: boolean;
caption: MSHTML$IHTMLTableCaption;
cellPadding: any;
cells: MSHTML$IHTMLElementCollection;
cellSpacing: any;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
cols: number;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createCaption(): MSHTML$IHTMLTableCaption;
createControlRange(): any;
createTBody(): MSHTML$IHTMLTableSection;
createTFoot(): any;
createTHead(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataPageSize: number;
dataSrc: string;
deleteCaption(): void;

/**
 * @param index [index=-1]
 */
deleteRow(index?: number): void;
deleteTFoot(): void;
deleteTHead(): void;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
firstPage(): void;
focus(): void;
frame: string;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
height: any;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_caption: MSHTML$IHTMLTableCaption;

/**
 * @param index [index=-1]
 */
ie9_deleteRow(index?: number): void;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;

/**
 * @param index [index=-1]
 */
ie9_insertRow(index?: number): any;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
ie9_tFoot: MSHTML$IHTMLTableSection;
ie9_tHead: MSHTML$IHTMLTableSection;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;

/**
 * @param index [index=-1]
 */
insertRow(index?: number): any;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
lastPage(): void;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;

/**
 * @param indexFrom [indexFrom=-1]
 * @param indexTo [indexTo=-1]
 */
moveRow(indexFrom?: number, indexTo?: number): any;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
namespaceURI: any;
nextPage(): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousPage(): void;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
refresh(): void;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
rows: MSHTML$IHTMLElementCollection;
rules: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
summary: string;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
tBodies: MSHTML$IHTMLElementCollection;
textContent: any;
tFoot: MSHTML$IHTMLTableSection;
tHead: MSHTML$IHTMLTableSection;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
width: any;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLTableCaption  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
vAlign: string;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLTableCell  {
constructor(): this;
abbr: string;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
axis: string;
background: string;
behaviorUrns: any;
bgColor: any;
blur(): void;
borderColor: any;
borderColorDark: any;
borderColorLight: any;
canHaveChildren: boolean;
canHaveHTML: boolean;
cellIndex: number;
ch: string;
childNodes: any;
children: any;
chOff: string;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
colSpan: number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
headers: string;
height: any;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_ch: string;
ie9_chOff: string;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
noWrap: boolean;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
rowSpan: number;
runtimeStyle: MSHTML$IHTMLStyle;
scope: string;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
vAlign: string;
width: any;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLTableCol  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
ch: string;
childNodes: any;
children: any;
chOff: string;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_ch: string;
ie9_chOff: string;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
span: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
vAlign: string;
width: any;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLTableRow  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
bgColor: any;
blur(): void;
borderColor: any;
borderColorDark: any;
borderColorLight: any;
canHaveChildren: boolean;
canHaveHTML: boolean;
cells: MSHTML$IHTMLElementCollection;
ch: string;
childNodes: any;
children: any;
chOff: string;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;

/**
 * @param index [index=-1]
 */
deleteCell(index?: number): void;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
height: any;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_ch: string;
ie9_chOff: string;

/**
 * @param index [index=-1]
 */
ie9_deleteCell(index?: number): void;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;

/**
 * @param index [index=-1]
 */
ie9_insertCell(index?: number): any;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;

/**
 * @param index [index=-1]
 */
insertCell(index?: number): any;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
rowIndex: number;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
sectionRowIndex: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
vAlign: string;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLTableSection  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
align: string;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
bgColor: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
ch: string;
childNodes: any;
children: any;
chOff: string;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;

/**
 * @param index [index=-1]
 */
deleteRow(index?: number): void;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_ch: string;
ie9_chOff: string;

/**
 * @param index [index=-1]
 */
ie9_deleteRow(index?: number): void;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;

/**
 * @param index [index=-1]
 */
ie9_insertRow(index?: number): any;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;

/**
 * @param index [index=-1]
 */
insertRow(index?: number): any;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;

/**
 * @param indexFrom [indexFrom=-1]
 * @param indexTo [indexTo=-1]
 */
moveRow(indexFrom?: number, indexTo?: number): any;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
rows: MSHTML$IHTMLElementCollection;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
vAlign: string;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLTextAreaElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
cols: number;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
createTextRange(): MSHTML$IHTMLTxtRange;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
defaultValue: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
form: MSHTML$IHTMLFormElement;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
name: string;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readOnly: boolean;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
rows: number;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
select(): void;
selectionEnd: number;
selectionStart: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
setSelectionRange(start: number, end: number): void;
sourceIndex: number;
spellcheck: any;
status: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
type: string;
uniqueID: string;
uniqueNumber: number;
value: string;
wrap: string;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLTextElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLTimeRanges  {
constructor(): this;
end(index: number): number;
endDouble(index: number): number;
length: number;
start(index: number): number;
startDouble(index: number): number
}

declare class MSHTML$HTMLTitleElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
text: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLUListElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compact: boolean;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
type: string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare class MSHTML$HTMLUnknownElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDisabled: boolean;
isMultiLine: boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
previousSibling: MSHTML$IHTMLDOMNode;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
xmsAcceleratorKey: string
}

declare interface MSHTML$HTMLUrnCollection {
+"constructor": any,
item(index: number): string,
+length: number,
(index: number): string
} 

declare class MSHTML$HTMLVideoElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
autobuffer: boolean;
autoplay: boolean;
behaviorUrns: any;
blur(): void;
buffered: MSHTML$IHTMLTimeRanges;
canHaveChildren: boolean;
canHaveHTML: boolean;
canPlayType(type: string): string;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
controls: boolean;
createControlRange(): any;
currentSrc: string;
currentStyle: MSHTML$IHTMLCurrentStyle;
currentTime: number;
currentTimeDouble: number;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
defaultPlaybackRate: number;
defaultPlaybackRateDouble: number;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
duration: number;
durationDouble: number;
ended: boolean;
error: MSHTML$IHTMLMediaError;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
height: number;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
initialTime: number;
initialTimeDouble: number;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
load(): void;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
loop: boolean;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msPlayToDisabled: boolean;
msPlayToPrimary: boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
muted: boolean;
namespaceURI: any;
networkState: number;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
pause(): void;
paused: boolean;
play(): void;
playbackRate: number;
playbackRateDouble: number;
played: MSHTML$IHTMLTimeRanges;
poster: string;
prefix: any;
preload: string;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
seekable: MSHTML$IHTMLTimeRanges;
seeking: boolean;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
src: string;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
textContent: any;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
videoHeight: number;
videoWidth: number;
volume: number;
volumeDouble: number;
width: number;
xmsAcceleratorKey: string
}

declare interface MSHTML$HTMLW3CComputedStyle {
accelerator: string,
alignContent: string,
alignItems: string,
alignmentBaseline: string,
alignSelf: string,
animation: string,
animationDelay: string,
animationDirection: string,
animationDuration: string,
animationFillMode: string,
animationIterationCount: string,
animationName: string,
animationPlayState: string,
animationTimingFunction: string,
backfaceVisibility: string,
background: string,
backgroundAttachment: string,
backgroundClip: string,
backgroundColor: any,
backgroundImage: string,
backgroundOrigin: string,
backgroundPosition: string,
backgroundPositionX: any,
backgroundPositionY: any,
backgroundRepeat: string,
backgroundSize: string,
baselineShift: any,
behavior: string,
border: string,
borderBottom: string,
borderBottomColor: any,
borderBottomLeftRadius: string,
borderBottomRightRadius: string,
borderBottomStyle: string,
borderBottomWidth: any,
borderCollapse: string,
borderColor: string,
borderImage: string,
borderImageOutset: string,
borderImageRepeat: string,
borderImageSlice: string,
borderImageSource: string,
borderImageWidth: string,
borderLeft: string,
borderLeftColor: any,
borderLeftStyle: string,
borderLeftWidth: any,
borderRadius: string,
borderRight: string,
borderRightColor: any,
borderRightStyle: string,
borderRightWidth: any,
borderSpacing: string,
borderStyle: string,
borderTop: string,
borderTopColor: any,
borderTopLeftRadius: string,
borderTopRightRadius: string,
borderTopStyle: string,
borderTopWidth: any,
borderWidth: string,
bottom: any,
boxShadow: string,
boxSizing: string,
breakAfter: string,
breakBefore: string,
breakInside: string,
captionSide: string,
clear: string,
clip: string,
+clipBottom: any,
clipLeft: any,
clipPath: string,
clipRight: any,
clipRule: string,
clipTop: any,
color: any,
colorInterpolationFilters: string,
columnCount: any,
columnFill: string,
columnGap: any,
columnRule: string,
columnRuleColor: any,
columnRuleStyle: string,
columnRuleWidth: any,
columns: string,
columnSpan: string,
columnWidth: any,
content: string,
counterIncrement: string,
counterReset: string,
cssFloat: string,
cssText: string,
cursor: string,
direction: string,
display: string,
dominantBaseline: string,
emptyCells: string,
enableBackground: string,
fill: string,
fillOpacity: any,
fillRule: string,
filter: string,
flex: string,
flexBasis: any,
flexDirection: string,
flexFlow: string,
flexGrow: any,
flexShrink: any,
flexWrap: string,
floodColor: any,
floodOpacity: any,
font: string,
fontFamily: string,
fontFeatureSettings: string,
fontSize: any,
fontSizeAdjust: any,
fontStretch: string,
fontStyle: string,
fontVariant: string,
fontWeight: string,
getPropertyPriority(bstrPropertyName: string): string,
getPropertyValue(bstrPropertyName: string): string,
glyphOrientationHorizontal: any,
glyphOrientationVertical: any,
height: any,
imeMode: string,
item(index: number): string,
justifyContent: string,
kerning: any,
layoutFlow: string,
layoutGrid: string,
layoutGridChar: any,
layoutGridLine: any,
layoutGridMode: string,
layoutGridType: string,
left: any,
+length: number,
letterSpacing: any,
lightingColor: any,
lineBreak: string,
lineHeight: any,
listStyle: string,
listStyleImage: string,
listStylePosition: string,
listStyleType: string,
margin: string,
marginBottom: any,
marginLeft: any,
marginRight: any,
marginTop: any,
marker: string,
markerEnd: string,
markerMid: string,
markerStart: string,
mask: string,
maxHeight: any,
maxWidth: any,
minHeight: any,
minWidth: any,
msAnimation: string,
msAnimationDelay: string,
msAnimationDirection: string,
msAnimationDuration: string,
msAnimationFillMode: string,
msAnimationIterationCount: string,
msAnimationName: string,
msAnimationPlayState: string,
msAnimationTimingFunction: string,
msBackfaceVisibility: string,
msBlockProgression: string,
msContentZoomChaining: string,
msContentZooming: string,
msContentZoomLimit: string,
msContentZoomLimitMax: any,
msContentZoomLimitMin: any,
msContentZoomSnap: string,
msContentZoomSnapPoints: string,
msContentZoomSnapType: string,
msFlex: string,
msFlexAlign: string,
msFlexDirection: string,
msFlexFlow: string,
msFlexItemAlign: string,
msFlexLinePack: string,
msFlexNegative: any,
msFlexOrder: any,
msFlexPack: string,
msFlexPositive: any,
msFlexPreferredSize: any,
msFlexWrap: string,
msFlowFrom: string,
msFlowInto: string,
msFontFeatureSettings: string,
msGridColumn: any,
msGridColumnAlign: string,
msGridColumns: string,
msGridColumnSpan: any,
msGridRow: any,
msGridRowAlign: string,
msGridRows: string,
msGridRowSpan: any,
msHighContrastAdjust: string,
msHyphenateLimitChars: string,
msHyphenateLimitLines: any,
msHyphenateLimitZone: any,
msHyphens: string,
msImeAlign: string,
msInterpolationMode: string,
msOverflowStyle: string,
msPerspective: any,
msPerspectiveOrigin: string,
msScrollChaining: string,
msScrollLimit: string,
msScrollLimitXMax: any,
msScrollLimitXMin: any,
msScrollLimitYMax: any,
msScrollLimitYMin: any,
msScrollRails: string,
msScrollSnapPointsX: string,
msScrollSnapPointsY: string,
msScrollSnapType: string,
msScrollSnapX: string,
msScrollSnapY: string,
msScrollTranslation: string,
msTextCombineHorizontal: string,
msTextSizeAdjust: any,
msTouchAction: string,
msTouchSelect: string,
msTransform: string,
msTransformOrigin: string,
msTransformStyle: string,
msTransition: string,
msTransitionDelay: string,
msTransitionDuration: string,
msTransitionProperty: string,
msTransitionTimingFunction: string,
msUserSelect: string,
msWrapFlow: string,
msWrapMargin: any,
msWrapThrough: string,
opacity: any,
orphans: any,
outline: string,
outlineColor: any,
outlineStyle: string,
outlineWidth: any,
overflow: string,
overflowX: string,
overflowY: string,
padding: string,
paddingBottom: any,
paddingLeft: any,
paddingRight: any,
paddingTop: any,
pageBreakAfter: string,
pageBreakBefore: string,
pageBreakInside: string,
+parentRule: any,
perspective: any,
perspectiveOrigin: string,
pointerEvents: string,
position: string,
quotes: string,
removeProperty(bstrPropertyName: string): string,
right: any,
rubyAlign: string,
rubyOverhang: string,
rubyPosition: string,
scrollbar3dLightColor: any,
scrollbarArrowColor: any,
scrollbarBaseColor: any,
scrollbarDarkShadowColor: any,
scrollbarFaceColor: any,
scrollbarHighlightColor: any,
scrollbarShadowColor: any,
scrollbarTrackColor: any,

/**
 * @param pvarPropertyPriority [pvarPropertyPriority='']
 */
setProperty(
bstrPropertyName: string,
pvarPropertyValue: any,
pvarPropertyPriority?: any): void,
stopColor: any,
stopOpacity: any,
stroke: string,
strokeDasharray: string,
strokeDashoffset: any,
strokeLinecap: string,
strokeLinejoin: string,
strokeMiterlimit: any,
strokeOpacity: any,
strokeWidth: any,
styleFloat: string,
tableLayout: string,
textAlign: string,
textAlignLast: string,
textAnchor: string,
textAutospace: string,
textDecoration: string,
textIndent: any,
textJustify: string,
textJustifyTrim: string,
textKashida: any,
textKashidaSpace: any,
textOverflow: string,
textShadow: string,
textTransform: string,
textUnderlinePosition: string,
top: any,
touchAction: string,
transform: string,
transformOrigin: string,
transformStyle: string,
transition: string,
transitionDelay: string,
transitionDuration: string,
transitionProperty: string,
transitionTimingFunction: string,
unicodeBidi: string,
verticalAlign: any,
visibility: string,
webkitAnimation: string,
webkitAnimationDelay: string,
webkitAnimationDirection: string,
webkitAnimationDuration: string,
webkitAnimationFillMode: string,
webkitAnimationIterationCount: string,
webkitAnimationName: string,
webkitAnimationPlayState: string,
webkitAnimationTimingFunction: string,
webkitAppearance: string,
webkitBackfaceVisibility: string,
webkitBackground: string,
webkitBackgroundAttachment: string,
webkitBackgroundClip: string,
webkitBackgroundColor: any,
webkitBackgroundImage: string,
webkitBackgroundOrigin: string,
webkitBackgroundPosition: string,
webkitBackgroundPositionX: any,
webkitBackgroundPositionY: any,
webkitBackgroundRepeat: string,
webkitBackgroundSize: string,
webkitBorderImage: string,
webkitBorderImageOutset: string,
webkitBorderImageRepeat: string,
webkitBorderImageSlice: string,
webkitBorderImageSource: string,
webkitBorderImageWidth: string,
webkitBoxAlign: string,
webkitBoxDirection: string,
webkitBoxFlex: any,
webkitBoxOrdinalGroup: any,
webkitBoxOrient: string,
webkitBoxPack: string,
webkitBoxSizing: string,
webkitTextSizeAdjust: any,
webkitTransform: string,
webkitTransformOrigin: string,
webkitTransition: string,
webkitTransitionDelay: string,
webkitTransitionDuration: string,
webkitTransitionProperty: string,
webkitTransitionTimingFunction: string,
webkitUserSelect: string,
whiteSpace: string,
widows: any,
width: any,
wordBreak: string,
wordSpacing: any,
wordWrap: string,
writingMode: string,
zIndex: any,
zoom: any,
(index: number): string
} 

declare interface MSHTML$HTMLWindow2 {
addEventListener(type: string, listener: any, useCapture: boolean): void,

/**
 * @param message [message='']
 */
alert(message?: string): void,
+MSHTML$applicationCache: MSHTML$applicationCache,
attachEvent(event: string, pdisp: any): boolean,
blur(): void,
clearInterval(timerID: number): void,
clearTimeout(timerID: number): void,
+clientInformation: MSHTML$IOmNavigator,
+clipboardData: MSHTML$IHTMLDataTransfer,
close(): void,
+closed: boolean,

/**
 * @param message [message='']
 */
confirm(message?: string): boolean,
+"constructor": any,
createPopup(varArgIn?: any): any,
defaultStatus: string,
detachEvent(event: string, pdisp: any): void,
dispatchEvent(evt: MSHTML$IDOMEvent): boolean,
+document: MSHTML$IHTMLDocument2,
+event: MSHTML$IHTMLEventObj,

/**
 * @param language [language='JScript']
 */
execScript(code: string, language?: string): any,
+external: any,
focus(): void,
+frameElement: MSHTML$IHTMLFrameBase,
+frames: MSHTML$FramesCollection,

/**
 * @param bstrPseudoElt [bstrPseudoElt='']
 */
getComputedStyle(
varArgIn: MSHTML$IHTMLDOMNode,
bstrPseudoElt?: string): MSHTML$IHTMLCSSStyleDeclaration,
getSelection(): MSHTML$IHTMLSelection,
+history: MSHTML$IOmHistory,
+innerHeight: number,
+innerWidth: number,
item(pvarIndex: any): any,
+length: number,
+localStorage: MSHTML$IHTMLStorage,
+location: MSHTML$IHTMLLocation,
+maxConnectionsPerServer: number,
moveBy(x: number, y: number): void,
moveTo(x: number, y: number): void,
msWriteProfilerMark(bstrProfilerMarkName: string): void,
name: string,
navigate(url: string): void,
+navigator: MSHTML$IOmNavigator,
offscreenBuffering: any,
onabort: any,
onafterprint: any,
onbeforeprint: any,
onbeforeunload: any,
onblur: any,
oncanplay: any,
oncanplaythrough: any,
onchange: any,
onclick: any,
oncontextmenu: any,
ondblclick: any,
ondrag: any,
ondragend: any,
ondragenter: any,
ondragleave: any,
ondragover: any,
ondragstart: any,
ondrop: any,
ondurationchange: any,
onemptied: any,
onended: any,
onerror: any,
onfocus: any,
onfocusin: any,
onfocusout: any,
onhashchange: any,
onhelp: any,
oninput: any,
onkeydown: any,
onkeypress: any,
onkeyup: any,
onload: any,
onloadeddata: any,
onloadedmetadata: any,
onloadstart: any,
onmessage: any,
onmousedown: any,
onmouseenter: any,
onmouseleave: any,
onmousemove: any,
onmouseout: any,
onmouseover: any,
onmouseup: any,
onmousewheel: any,
onmsgesturechange: any,
onmsgesturedoubletap: any,
onmsgestureend: any,
onmsgesturehold: any,
onmsgesturestart: any,
onmsgesturetap: any,
onmsinertiastart: any,
onmspointercancel: any,
onmspointerdown: any,
onmspointerhover: any,
onmspointermove: any,
onmspointerout: any,
onmspointerover: any,
onmspointerup: any,
onoffline: any,
ononline: any,
onpause: any,
onplay: any,
onplaying: any,
onpopstate: any,
onprogress: any,
onratechange: any,
onreadystatechange: any,
onreset: any,
onresize: any,
onscroll: any,
onseeked: any,
onseeking: any,
onselect: any,
onstalled: any,
onstorage: any,
onsubmit: any,
onsuspend: any,
ontimeupdate: any,
onunload: any,
onvolumechange: any,
onwaiting: any,

/**
 * @param url [url='']
 * @param name [name='']
 * @param features [features='']
 * @param replace [replace=false]
 */
open(
url?: string,
name?: string,
features?: string,
replace?: boolean): MSHTML$IHTMLWindow2,
opener: any,
+outerHeight: number,
+outerWidth: number,
+pageXOffset: number,
+pageYOffset: number,
+parent: MSHTML$IHTMLWindow2,
performance: any,
postMessage(msg: string, targetOrigin?: any): void,
print(): void,

/**
 * @param message [message='']
 * @param defstr [defstr='undefined']
 */
prompt(message?: string, defstr?: string): any,
removeEventListener(type: string, listener: any, useCapture: boolean): void,
resizeBy(x: number, y: number): void,
resizeTo(x: number, y: number): void,
+screen: MSHTML$IHTMLScreen,
+screenLeft: number,
+screenTop: number,
+screenX: number,
+screenY: number,
scroll(x: number, y: number): void,
scrollBy(x: number, y: number): void,
scrollTo(x: number, y: number): void,
+self: MSHTML$IHTMLWindow2,
+sessionStorage: MSHTML$IHTMLStorage,
setInterval(expression: any, msec: number, language?: any): number,
setTimeout(expression: any, msec: number, language?: any): number,

/**
 * @param features [features='']
 */
showHelp(helpURL: string, helpArg: any, features?: string): void,
showModalDialog(dialog: string, varArgIn?: any, varOptions?: any): any,

/**
 * @param url [url='']
 */
showModelessDialog(url?: string, varArgIn?: any, options?: any): MSHTML$IHTMLWindow2,
status: string,
+styleMedia: MSHTML$IHTMLStyleMedia,
+top: MSHTML$IHTMLWindow2,
toStaticHTML(bstrHTML: string): string,
toString(): string,
+window: MSHTML$IHTMLWindow2,
(pvarIndex: any): any
} 

declare interface MSHTML$HTMLWindowProxy {
addEventListener(type: string, listener: any, useCapture: boolean): void,

/**
 * @param message [message='']
 */
alert(message?: string): void,
+MSHTML$applicationCache: MSHTML$applicationCache,
attachEvent(event: string, pdisp: any): boolean,
blur(): void,
clearInterval(timerID: number): void,
clearTimeout(timerID: number): void,
+clientInformation: MSHTML$IOmNavigator,
+clipboardData: MSHTML$IHTMLDataTransfer,
close(): void,
+closed: boolean,

/**
 * @param message [message='']
 */
confirm(message?: string): boolean,
+"constructor": any,
createPopup(varArgIn?: any): any,
defaultStatus: string,
detachEvent(event: string, pdisp: any): void,
dispatchEvent(evt: MSHTML$IDOMEvent): boolean,
+document: MSHTML$IHTMLDocument2,
+event: MSHTML$IHTMLEventObj,

/**
 * @param language [language='JScript']
 */
execScript(code: string, language?: string): any,
+external: any,
focus(): void,
+frameElement: MSHTML$IHTMLFrameBase,
+frames: MSHTML$FramesCollection,

/**
 * @param bstrPseudoElt [bstrPseudoElt='']
 */
getComputedStyle(
varArgIn: MSHTML$IHTMLDOMNode,
bstrPseudoElt?: string): MSHTML$IHTMLCSSStyleDeclaration,
getSelection(): MSHTML$IHTMLSelection,
+history: MSHTML$IOmHistory,
+innerHeight: number,
+innerWidth: number,
item(pvarIndex: any): any,
+length: number,
+localStorage: MSHTML$IHTMLStorage,
+location: MSHTML$IHTMLLocation,
+maxConnectionsPerServer: number,
moveBy(x: number, y: number): void,
moveTo(x: number, y: number): void,
msWriteProfilerMark(bstrProfilerMarkName: string): void,
name: string,
navigate(url: string): void,
+navigator: MSHTML$IOmNavigator,
offscreenBuffering: any,
onabort: any,
onafterprint: any,
onbeforeprint: any,
onbeforeunload: any,
onblur: any,
oncanplay: any,
oncanplaythrough: any,
onchange: any,
onclick: any,
oncontextmenu: any,
ondblclick: any,
ondrag: any,
ondragend: any,
ondragenter: any,
ondragleave: any,
ondragover: any,
ondragstart: any,
ondrop: any,
ondurationchange: any,
onemptied: any,
onended: any,
onerror: any,
onfocus: any,
onfocusin: any,
onfocusout: any,
onhashchange: any,
onhelp: any,
oninput: any,
onkeydown: any,
onkeypress: any,
onkeyup: any,
onload: any,
onloadeddata: any,
onloadedmetadata: any,
onloadstart: any,
onmessage: any,
onmousedown: any,
onmouseenter: any,
onmouseleave: any,
onmousemove: any,
onmouseout: any,
onmouseover: any,
onmouseup: any,
onmousewheel: any,
onmsgesturechange: any,
onmsgesturedoubletap: any,
onmsgestureend: any,
onmsgesturehold: any,
onmsgesturestart: any,
onmsgesturetap: any,
onmsinertiastart: any,
onmspointercancel: any,
onmspointerdown: any,
onmspointerhover: any,
onmspointermove: any,
onmspointerout: any,
onmspointerover: any,
onmspointerup: any,
onoffline: any,
ononline: any,
onpause: any,
onplay: any,
onplaying: any,
onpopstate: any,
onprogress: any,
onratechange: any,
onreadystatechange: any,
onreset: any,
onresize: any,
onscroll: any,
onseeked: any,
onseeking: any,
onselect: any,
onstalled: any,
onstorage: any,
onsubmit: any,
onsuspend: any,
ontimeupdate: any,
onunload: any,
onvolumechange: any,
onwaiting: any,

/**
 * @param url [url='']
 * @param name [name='']
 * @param features [features='']
 * @param replace [replace=false]
 */
open(
url?: string,
name?: string,
features?: string,
replace?: boolean): MSHTML$IHTMLWindow2,
opener: any,
+outerHeight: number,
+outerWidth: number,
+pageXOffset: number,
+pageYOffset: number,
+parent: MSHTML$IHTMLWindow2,
performance: any,
postMessage(msg: string, targetOrigin?: any): void,
print(): void,

/**
 * @param message [message='']
 * @param defstr [defstr='undefined']
 */
prompt(message?: string, defstr?: string): any,
removeEventListener(type: string, listener: any, useCapture: boolean): void,
resizeBy(x: number, y: number): void,
resizeTo(x: number, y: number): void,
+screen: MSHTML$IHTMLScreen,
+screenLeft: number,
+screenTop: number,
+screenX: number,
+screenY: number,
scroll(x: number, y: number): void,
scrollBy(x: number, y: number): void,
scrollTo(x: number, y: number): void,
+self: MSHTML$IHTMLWindow2,
+sessionStorage: MSHTML$IHTMLStorage,
setInterval(expression: any, msec: number, language?: any): number,
setTimeout(expression: any, msec: number, language?: any): number,

/**
 * @param features [features='']
 */
showHelp(helpURL: string, helpArg: any, features?: string): void,
showModalDialog(dialog: string, varArgIn?: any, varOptions?: any): any,

/**
 * @param url [url='']
 */
showModelessDialog(url?: string, varArgIn?: any, options?: any): MSHTML$IHTMLWindow2,
status: string,
+styleMedia: MSHTML$IHTMLStyleMedia,
+top: MSHTML$IHTMLWindow2,
toStaticHTML(bstrHTML: string): string,
toString(): string,
+window: MSHTML$IHTMLWindow2,
(pvarIndex: any): any
} 

declare class MSHTML$HTMLWndOptionElement  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
all: any;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
ariaActivedescendant: string;
ariaBusy: string;
ariaChecked: string;
ariaControls: string;
ariaDescribedby: string;
ariaDisabled: string;
ariaExpanded: string;
ariaFlowto: string;
ariaHaspopup: string;
ariaHidden: string;
ariaInvalid: string;
ariaLabelledby: string;
ariaLevel: number;
ariaLive: string;
ariaMultiselectable: string;
ariaOwns: string;
ariaPosinset: number;
ariaPressed: string;
ariaReadonly: string;
ariaRelevant: string;
ariaRequired: string;
ariaSecret: string;
ariaSelected: string;
ariaSetsize: number;
ariaValuemax: string;
ariaValuemin: string;
ariaValuenow: string;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
canHaveHTML: boolean;
childNodes: any;
children: any;
className: string;
clearAttributes(): void;
click(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
componentFromPoint(x: number, y: number): string;
constructor: any;
contains(pChild: MSHTML$IHTMLElement): boolean;
contentEditable: string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
dataFld: string;
dataFormatAs: string;
dataSrc: string;
defaultSelected: boolean;
detachEvent(event: string, pdisp: any): void;
dir: string;
disabled: boolean;
document: any;
doScroll(component?: any): void;
dragDrop(): boolean;
filters: MSHTML$IHTMLFiltersCollection;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
form: MSHTML$IHTMLFormElement;
getAdjacentText(where: string): string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
getAttributeNS(pvarNS: any, strAttributeName: string): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
hasAttribute(name: string): boolean;
hasAttributeNS(pvarNS: any, name: string): boolean;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hideFocus: boolean;
id: string;
ie8_attributes: MSHTML$IHTMLAttributeCollection3;
ie8_getAttribute(strAttributeName: string): any;
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
ie8_removeAttribute(strAttributeName: string): boolean;
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_getAttribute(strAttributeName: string): any;
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
ie9_hasAttribute(name: string): boolean;
ie9_hasAttributes(): boolean;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_nodeName: string;
ie9_removeAttribute(strAttributeName: string): void;
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
ie9_tagName: string;
index: number;
innerHTML: string;
innerText: string;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isContentEditable: boolean;
isDefaultNamespace(pvarNamespace: any): boolean;
isDisabled: boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isMultiLine: boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
isTextEdit: boolean;
label: string;
lang: string;
language: string;
lastChild: MSHTML$IHTMLDOMNode;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
msMatchesSelector(v: string): boolean;
msReleasePointerCapture(pointerId: number): void;
msSetPointerCapture(pointerId: number): void;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforecopy: any;
onbeforecut: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
oncopy: any;
oncuechange: any;
oncut: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfilterchange: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
oninvalid: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onlayoutcomplete: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onlosecapture: any;
onmousedown: any;
onmouseenter: any;
onmouseleave: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmove: any;
onmoveend: any;
onmovestart: any;
onmsanimationend: any;
onmsanimationiteration: any;
onmsanimationstart: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsgotpointercapture: any;
onmsinertiastart: any;
onmslostpointercapture: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmstransitionend: any;
onmstransitionstart: any;
onpage: any;
onpaste: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onresize: any;
onresizeend: any;
onresizestart: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectstart: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
outerHTML: string;
outerText: string;
ownerDocument: any;
parentElement: MSHTML$IHTMLElement;
parentNode: MSHTML$IHTMLDOMNode;
parentTextEdit: MSHTML$IHTMLElement;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: any;
recordNumber: any;
releaseCapture(): void;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
removeAttributeNS(pvarNS: any, strAttributeName: string): void;
removeBehavior(cookie: number): boolean;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceAdjacentText(where: string, newText: string): string;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
role: string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollIntoView(varargStart?: any): void;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;
selected: boolean;
setActive(): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2;
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
sourceIndex: number;
spellcheck: any;
style: MSHTML$IHTMLStyle;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
tabIndex: number;
tagName: string;
tagUrn: string;
text: string;
textContent: any;
title: string;
toString(): string;
uniqueID: string;
uniqueNumber: number;
value: string;
xmsAcceleratorKey: string
}

declare interface MSHTML$HTMLWndSelectElement {
accessKey: string,
add(element: MSHTML$IHTMLElement, before?: any): void,
addBehavior(bstrURL: string, pvarFactory?: any): number,
addFilter(pUnk: any): void,
+all: any,
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement,
ariaActivedescendant: string,
ariaBusy: string,
ariaChecked: string,
ariaControls: string,
ariaDescribedby: string,
ariaDisabled: string,
ariaExpanded: string,
ariaFlowto: string,
ariaHaspopup: string,
ariaHidden: string,
ariaInvalid: string,
ariaLabelledby: string,
ariaLevel: number,
ariaLive: string,
ariaMultiselectable: string,
ariaOwns: string,
ariaPosinset: number,
ariaPressed: string,
ariaReadonly: string,
ariaRelevant: string,
ariaRequired: string,
ariaSecret: string,
ariaSelected: string,
ariaSetsize: number,
ariaValuemax: string,
ariaValuemin: string,
ariaValuenow: string,
attachEvent(event: string, pdisp: any): boolean,
+attributes: any,
+behaviorUrns: any,
blur(): void,
+canHaveChildren: boolean,
+canHaveHTML: boolean,
+childNodes: any,
+children: any,
className: string,
clearAttributes(): void,
click(): void,
+clientHeight: number,
+clientLeft: number,
+clientTop: number,
+clientWidth: number,
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode,
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number,
componentFromPoint(x: number, y: number): string,
+"constructor": any,
contains(pChild: MSHTML$IHTMLElement): boolean,
contentEditable: string,
createControlRange(): any,
+currentStyle: MSHTML$IHTMLCurrentStyle,
dataFld: string,
dataFormatAs: string,
dataSrc: string,
detachEvent(event: string, pdisp: any): void,
dir: string,
disabled: boolean,
+document: any,
doScroll(component?: any): void,
dragDrop(): boolean,
+filters: MSHTML$IHTMLFiltersCollection,
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean,
+firstChild: MSHTML$IHTMLDOMNode,
focus(): void,
+form: MSHTML$IHTMLFormElement,
getAdjacentText(where: string): string,

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any,
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute,
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2,
getAttributeNS(pvarNS: any, strAttributeName: string): any,
getBoundingClientRect(): MSHTML$IHTMLRect,
getClientRects(): MSHTML$IHTMLRectCollection,
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection,
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection,
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection,
getExpression(propname: string): any,
hasAttribute(name: string): boolean,
hasAttributeNS(pvarNS: any, name: string): boolean,
hasAttributes(): boolean,
hasChildNodes(): boolean,
hideFocus: boolean,
id: string,
+ie8_attributes: MSHTML$IHTMLAttributeCollection3,
ie8_getAttribute(strAttributeName: string): any,
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2,
ie8_removeAttribute(strAttributeName: string): boolean,
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void,
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
ie9_getAttribute(strAttributeName: string): any,
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2,
ie9_hasAttribute(name: string): boolean,
ie9_hasAttributes(): boolean,
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode,
+ie9_nodeName: string,
ie9_removeAttribute(strAttributeName: string): void,
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void,
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
+ie9_tagName: string,
innerHTML: string,
innerText: string,
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement,
insertAdjacentHTML(where: string, html: string): void,
insertAdjacentText(where: string, text: string): void,
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode,
+isContentEditable: boolean,
isDefaultNamespace(pvarNamespace: any): boolean,
+isDisabled: boolean,
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean,
+isMultiLine: boolean,
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean,
isSupported(feature: string, version: any): boolean,
+isTextEdit: boolean,
item(name?: any, index?: any): any,
lang: string,
language: string,
+lastChild: MSHTML$IHTMLDOMNode,
length: number,
+localName: any,
lookupNamespaceURI(pvarPrefix: any): any,
lookupPrefix(pvarNamespaceURI: any): any,
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void,
msMatchesSelector(v: string): boolean,
msReleasePointerCapture(pointerId: number): void,
msSetPointerCapture(pointerId: number): void,
multiple: boolean,
name: string,
namedItem(name: string): any,
+namespaceURI: any,
+nextSibling: MSHTML$IHTMLDOMNode,
+nodeName: string,
+nodeType: number,
nodeValue: any,
normalize(): void,
+offsetHeight: number,
+offsetLeft: number,
+offsetParent: MSHTML$IHTMLElement,
+offsetTop: number,
+offsetWidth: number,
onabort: any,
onactivate: any,
onafterupdate: any,
onbeforeactivate: any,
onbeforecopy: any,
onbeforecut: any,
onbeforedeactivate: any,
onbeforeeditfocus: any,
onbeforepaste: any,
onbeforeupdate: any,
onblur: any,
oncanplay: any,
oncanplaythrough: any,
oncellchange: any,
onchange: any,
onclick: any,
oncontextmenu: any,
oncontrolselect: any,
oncopy: any,
oncuechange: any,
oncut: any,
ondataavailable: any,
ondatasetchanged: any,
ondatasetcomplete: any,
ondblclick: any,
ondeactivate: any,
ondrag: any,
ondragend: any,
ondragenter: any,
ondragleave: any,
ondragover: any,
ondragstart: any,
ondrop: any,
ondurationchange: any,
onemptied: any,
onended: any,
onerror: any,
onerrorupdate: any,
onfilterchange: any,
onfocus: any,
onfocusin: any,
onfocusout: any,
onhelp: any,
oninput: any,
oninvalid: any,
onkeydown: any,
onkeypress: any,
onkeyup: any,
onlayoutcomplete: any,
onload: any,
onloadeddata: any,
onloadedmetadata: any,
onloadstart: any,
onlosecapture: any,
onmousedown: any,
onmouseenter: any,
onmouseleave: any,
onmousemove: any,
onmouseout: any,
onmouseover: any,
onmouseup: any,
onmousewheel: any,
onmove: any,
onmoveend: any,
onmovestart: any,
onmsanimationend: any,
onmsanimationiteration: any,
onmsanimationstart: any,
onmsgesturechange: any,
onmsgesturedoubletap: any,
onmsgestureend: any,
onmsgesturehold: any,
onmsgesturestart: any,
onmsgesturetap: any,
onmsgotpointercapture: any,
onmsinertiastart: any,
onmslostpointercapture: any,
onmsmanipulationstatechanged: any,
onmspointercancel: any,
onmspointerdown: any,
onmspointerhover: any,
onmspointermove: any,
onmspointerout: any,
onmspointerover: any,
onmspointerup: any,
onmstransitionend: any,
onmstransitionstart: any,
onpage: any,
onpaste: any,
onpause: any,
onplay: any,
onplaying: any,
onprogress: any,
onpropertychange: any,
onratechange: any,
onreadystatechange: any,
onreset: any,
onresize: any,
onresizeend: any,
onresizestart: any,
onrowenter: any,
onrowexit: any,
onrowsdelete: any,
onrowsinserted: any,
onscroll: any,
onseeked: any,
onseeking: any,
onselect: any,
onselectstart: any,
onstalled: any,
onsubmit: any,
onsuspend: any,
ontimeupdate: any,
onvolumechange: any,
onwaiting: any,
+options: any,
outerHTML: string,
outerText: string,
+ownerDocument: any,
+parentElement: MSHTML$IHTMLElement,
+parentNode: MSHTML$IHTMLDOMNode,
+parentTextEdit: MSHTML$IHTMLElement,
prefix: any,
+previousSibling: MSHTML$IHTMLDOMNode,
querySelector(v: string): MSHTML$IHTMLElement,
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection,
+readyState: any,
+recordNumber: any,
releaseCapture(): void,

/**
 * @param index [index=-1]
 */
remove(index?: number): void,

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean,
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute,
removeAttributeNS(pvarNS: any, strAttributeName: string): void,
removeBehavior(cookie: number): boolean,
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
removeExpression(propname: string): boolean,
removeFilter(pUnk: any): void,

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode,
replaceAdjacentText(where: string, newText: string): string,
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
role: string,
+runtimeStyle: MSHTML$IHTMLStyle,
+scopeName: string,
+scrollHeight: number,
scrollIntoView(varargStart?: any): void,
scrollLeft: number,
scrollTop: number,
+scrollWidth: number,
selectedIndex: number,
setActive(): void,

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void,
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute,
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void,

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void,

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void,
size: number,
+sourceIndex: number,
spellcheck: any,
+style: MSHTML$IHTMLStyle,
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
tabIndex: number,
+tagName: string,
tags(tagName: any): any,
tagUrn: string,
textContent: any,
title: string,
toString(): string,
+type: string,
+uniqueID: string,
+uniqueNumber: number,
urns(urn: any): any,
value: string,
xmsAcceleratorKey: string,
(name?: any, index?: any): any
} 

declare class MSHTML$HTMLXMLHttpRequest  {
constructor(): this;
abort(): void;
addEventListener(type: string, listener: any, useCapture: boolean): void;
constructor: any;
dispatchEvent(evt: MSHTML$IDOMEvent): boolean;
getAllResponseHeaders(): string;
getResponseHeader(bstrHeader: string): string;
onreadystatechange: any;
ontimeout: any;
open(
bstrMethod: string,
bstrURL: string,
varAsync: any,
varUser?: any,
varPassword?: any): void;
readyState: number;
removeEventListener(type: string, listener: any, useCapture: boolean): void;
responseBody: any;
responseText: string;
responseXML: any;
send(varBody?: any): void;
setRequestHeader(bstrHeader: string, bstrValue: string): void;
status: number;
statusText: string;
timeout: number
}

declare interface MSHTML$HTMLXMLHttpRequestFactory {
create(): MSHTML$IHTMLXMLHttpRequest,
(): MSHTML$IHTMLXMLHttpRequest
} 

declare class MSHTML$ICanvasGradient  {
constructor(): this;
addColorStop(offset: number, color: string): void
}

declare class MSHTML$ICanvasImageData  {
constructor(): this;
data: any;
height: number;
width: number
}

declare class MSHTML$ICanvasPattern  {
constructor(): this
}

declare class MSHTML$ICanvasRenderingContext2D  {
constructor(): this;
arc(
x: number,
y: number,
radius: number,
startAngle: number,
endAngle: number,
anticlockwise: number): void;
arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;
beginPath(): void;
bezierCurveTo(
cp1x: number,
cp1y: number,
cp2x: number,
cp2y: number,
x: number,
y: number): void;
canvas: MSHTML$IHTMLCanvasElement;
clearRect(x: number, y: number, w: number, h: number): void;
clip(): void;
closePath(): void;
createImageData(a1: any, a2: any): MSHTML$ICanvasImageData;
createLinearGradient(x0: number, y0: number, x1: number, y1: number): MSHTML$ICanvasGradient;
createPattern(Image: any, repetition: any): MSHTML$ICanvasPattern;
createRadialGradient(
x0: number,
y0: number,
r0: number,
x1: number,
y1: number,
r1: number): MSHTML$ICanvasGradient;
drawImage(
pSrc: any,
a1: any,
a2: any,
a3: any,
a4: any,
a5: any,
a6: any,
a7: any,
a8: any): void;
fill(): void;
fillRect(x: number, y: number, w: number, h: number): void;
fillStyle: any;
fillText(text: string, x: number, y: number, maxWidth: any): void;
font: string;
getImageData(sx: number, sy: number, sw: number, sh: number): MSHTML$ICanvasImageData;
globalAlpha: number;
globalCompositeOperation: string;
isPointInPath(x: number, y: number): boolean;
lineCap: string;
lineJoin: string;
lineTo(x: number, y: number): void;
lineWidth: number;
measureText(text: string): MSHTML$ICanvasTextMetrics;
miterLimit: number;
moveTo(x: number, y: number): void;
putImageData(
imagedata: MSHTML$ICanvasImageData,
dx: number,
dy: number,
dirtyX: any,
dirtyY: any,
dirtyWidth: any,
dirtyHeight: any): void;
quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;
rect(x: number, y: number, w: number, h: number): void;
restore(): void;
rotate(angle: number): void;
save(): void;
scale(x: number, y: number): void;
setTransform(
m11: number,
m12: number,
m21: number,
m22: number,
dx: number,
dy: number): void;
shadowBlur: number;
shadowColor: string;
shadowOffsetX: number;
shadowOffsetY: number;
stroke(): void;
strokeRect(x: number, y: number, w: number, h: number): void;
strokeStyle: any;
strokeText(text: string, x: number, y: number, maxWidth: any): void;
textAlign: string;
textBaseline: string;
transform(
m11: number,
m12: number,
m21: number,
m22: number,
dx: number,
dy: number): void;
translate(x: number, y: number): void
}

declare class MSHTML$ICanvasTextMetrics  {
constructor(): this;
width: number
}

declare class MSHTML$IDOMDocumentType  {
constructor(): this;
entities: any;
internalSubset: any;
name: string;
notations: any;
publicId: any;
systemId: any
}

declare class MSHTML$IDOMEvent  {
constructor(): this;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
eventPhase: number;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
isTrusted: boolean;
preventDefault(): void;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string
}

declare class MSHTML$IDOMNodeIterator  {
constructor(): this;
Detach(): void;
expandEntityReferences: boolean;
filter: any;
nextNode(): any;
previousNode(): any;
root: any;
whatToShow: number
}

declare class MSHTML$IDOMParser  {
constructor(): this;
parseFromString(xmlSource: string, mimeType: string): MSHTML$IHTMLDocument2
}

declare class MSHTML$IDOMProcessingInstruction  {
constructor(): this;
data: string;
target: string
}

declare class MSHTML$IDOMTreeWalker  {
constructor(): this;
currentNode: any;
expandEntityReferences: boolean;
filter: any;
firstChild(): any;
lastChild(): any;
nextNode(): any;
nextSibling(): any;
parentNode(): any;
previousNode(): any;
previousSibling(): any;
root: any;
whatToShow: number
}

declare class MSHTML$IDOMXmlSerializer  {
constructor(): this;
serializeToString(pNode: MSHTML$IHTMLDOMNode): string
}

declare class MSHTML$IEventTarget  {
constructor(): this;
addEventListener(type: string, listener: any, useCapture: boolean): void;
dispatchEvent(evt: MSHTML$IDOMEvent): boolean;
removeEventListener(type: string, listener: any, useCapture: boolean): void
}

declare interface MSHTML$IHTMLAreasCollection {
add(element: MSHTML$IHTMLElement, before?: any): void,
item(name?: any, index?: any): any,
length: number,

/**
 * @param index [index=-1]
 */
remove(index?: number): void,
tags(tagName: any): any,
(name?: any, index?: any): any
} 

declare class MSHTML$IHTMLAttributeCollection3  {
constructor(): this;
getNamedItem(bstrName: string): MSHTML$IHTMLDOMAttribute;
item(index: number): MSHTML$IHTMLDOMAttribute;
length: number;
removeNamedItem(bstrName: string): MSHTML$IHTMLDOMAttribute;
setNamedItem(pNodeIn: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute
}

declare class MSHTML$IHTMLAudioElement  {
constructor(): this
}

declare interface MSHTML$IHTMLBookmarkCollection {
item(index: number): any,
+length: number,
(index: number): any
} 

declare class MSHTML$IHTMLCanvasElement  {
constructor(): this;
getContext(contextId: string): MSHTML$ICanvasRenderingContext2D;
height: number;
toDataURL(type: string, jpegquality: any): string;
width: number
}

declare class MSHTML$IHTMLCSSRule  {
constructor(): this;
cssText: string;
parentRule: MSHTML$IHTMLCSSRule;
parentStyleSheet: MSHTML$IHTMLStyleSheet;
type: number
}

declare interface MSHTML$IHTMLCSSStyleDeclaration {
accelerator: string,
alignmentBaseline: string,
background: string,
backgroundAttachment: string,
backgroundClip: string,
backgroundColor: any,
backgroundImage: string,
backgroundOrigin: string,
backgroundPosition: string,
backgroundPositionX: any,
backgroundPositionY: any,
backgroundRepeat: string,
backgroundSize: string,
baselineShift: any,
behavior: string,
border: string,
borderBottom: string,
borderBottomColor: any,
borderBottomLeftRadius: string,
borderBottomRightRadius: string,
borderBottomStyle: string,
borderBottomWidth: any,
borderCollapse: string,
borderColor: string,
borderLeft: string,
borderLeftColor: any,
borderLeftStyle: string,
borderLeftWidth: any,
borderRadius: string,
borderRight: string,
borderRightColor: any,
borderRightStyle: string,
borderRightWidth: any,
borderSpacing: string,
borderStyle: string,
borderTop: string,
borderTopColor: any,
borderTopLeftRadius: string,
borderTopRightRadius: string,
borderTopStyle: string,
borderTopWidth: any,
borderWidth: string,
bottom: any,
boxShadow: string,
boxSizing: string,
captionSide: string,
clear: string,
clip: string,
+clipBottom: any,
clipLeft: any,
clipPath: string,
clipRight: any,
clipRule: string,
clipTop: any,
color: any,
content: string,
counterIncrement: string,
counterReset: string,
cssFloat: string,
cssText: string,
cursor: string,
direction: string,
display: string,
dominantBaseline: string,
emptyCells: string,
fill: string,
fillOpacity: any,
fillRule: string,
filter: string,
font: string,
fontFamily: string,
fontSize: any,
fontSizeAdjust: any,
fontStretch: string,
fontStyle: string,
fontVariant: string,
fontWeight: string,
getPropertyPriority(bstrPropertyName: string): string,
getPropertyValue(bstrPropertyName: string): string,
glyphOrientationHorizontal: any,
glyphOrientationVertical: any,
height: any,
imeMode: string,
item(index: number): string,
kerning: any,
layoutFlow: string,
layoutGrid: string,
layoutGridChar: any,
layoutGridLine: any,
layoutGridMode: string,
layoutGridType: string,
left: any,
+length: number,
letterSpacing: any,
lineBreak: string,
lineHeight: any,
listStyle: string,
listStyleImage: string,
listStylePosition: string,
listStyleType: string,
margin: string,
marginBottom: any,
marginLeft: any,
marginRight: any,
marginTop: any,
marker: string,
markerEnd: string,
markerMid: string,
markerStart: string,
mask: string,
maxHeight: any,
maxWidth: any,
minHeight: any,
minWidth: any,
msBlockProgression: string,
msInterpolationMode: string,
msTransform: string,
msTransformOrigin: string,
opacity: any,
orphans: any,
outline: string,
outlineColor: any,
outlineStyle: string,
outlineWidth: any,
overflow: string,
overflowX: string,
overflowY: string,
padding: string,
paddingBottom: any,
paddingLeft: any,
paddingRight: any,
paddingTop: any,
pageBreakAfter: string,
pageBreakBefore: string,
pageBreakInside: string,
+parentRule: any,
pointerEvents: string,
position: string,
quotes: string,
removeProperty(bstrPropertyName: string): string,
right: any,
rubyAlign: string,
rubyOverhang: string,
rubyPosition: string,
scrollbar3dLightColor: any,
scrollbarArrowColor: any,
scrollbarBaseColor: any,
scrollbarDarkShadowColor: any,
scrollbarFaceColor: any,
scrollbarHighlightColor: any,
scrollbarShadowColor: any,
scrollbarTrackColor: any,

/**
 * @param pvarPropertyPriority [pvarPropertyPriority='']
 */
setProperty(
bstrPropertyName: string,
pvarPropertyValue: any,
pvarPropertyPriority?: any): void,
stopColor: any,
stopOpacity: any,
stroke: string,
strokeDasharray: string,
strokeDashoffset: any,
strokeLinecap: string,
strokeLinejoin: string,
strokeMiterlimit: any,
strokeOpacity: any,
strokeWidth: any,
styleFloat: string,
tableLayout: string,
textAlign: string,
textAlignLast: string,
textAnchor: string,
textAutospace: string,
textDecoration: string,
textIndent: any,
textJustify: string,
textJustifyTrim: string,
textKashida: any,
textKashidaSpace: any,
textOverflow: string,
textTransform: string,
textUnderlinePosition: string,
top: any,
unicodeBidi: string,
verticalAlign: any,
visibility: string,
whiteSpace: string,
widows: any,
width: any,
wordBreak: string,
wordSpacing: any,
wordWrap: string,
writingMode: string,
zIndex: any,
zoom: any,
(index: number): string
} 

declare class MSHTML$IHTMLCurrentStyle  {
constructor(): this;
accelerator: string;
backgroundAttachment: string;
backgroundColor: any;
backgroundImage: string;
backgroundPositionX: any;
backgroundPositionY: any;
backgroundRepeat: string;
behavior: string;
blockDirection: string;
borderBottomColor: any;
borderBottomStyle: string;
borderBottomWidth: any;
borderCollapse: string;
borderColor: string;
borderLeftColor: any;
borderLeftStyle: string;
borderLeftWidth: any;
borderRightColor: any;
borderRightStyle: string;
borderRightWidth: any;
borderStyle: string;
borderTopColor: any;
borderTopStyle: string;
borderTopWidth: any;
borderWidth: string;
bottom: any;
clear: string;
clipBottom: any;
clipLeft: any;
clipRight: any;
clipTop: any;
color: any;
cursor: string;
direction: string;
display: string;
fontFamily: string;
fontSize: any;
fontStyle: string;
fontVariant: string;
fontWeight: any;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
height: any;
imeMode: string;
layoutGridChar: any;
layoutGridLine: any;
layoutGridMode: string;
layoutGridType: string;
left: any;
letterSpacing: any;
lineBreak: string;
lineHeight: any;
listStyleImage: string;
listStylePosition: string;
listStyleType: string;
margin: string;
marginBottom: any;
marginLeft: any;
marginRight: any;
marginTop: any;
overflow: string;
overflowX: string;
overflowY: string;
padding: string;
paddingBottom: any;
paddingLeft: any;
paddingRight: any;
paddingTop: any;
pageBreakAfter: string;
pageBreakBefore: string;
position: string;
right: any;
rubyAlign: string;
rubyOverhang: string;
rubyPosition: string;
styleFloat: string;
tableLayout: string;
textAlign: string;
textAutospace: string;
textDecoration: string;
textIndent: any;
textJustify: string;
textJustifyTrim: string;
textKashida: any;
textTransform: string;
top: any;
unicodeBidi: string;
verticalAlign: any;
visibility: string;
width: any;
wordBreak: string;
zIndex: any
}

declare class MSHTML$IHTMLDataTransfer  {
constructor(): this;
clearData(format: string): boolean;
dropEffect: string;
effectAllowed: string;
getData(format: string): any;
setData(format: string, data: any): boolean
}

declare class MSHTML$IHTMLDocument  {
constructor(): this;
Script: any
}

declare class MSHTML$IHTMLDocument2  {
constructor(): this;
activeElement: MSHTML$IHTMLElement;
alinkColor: any;
all: MSHTML$IHTMLElementCollection;
anchors: MSHTML$IHTMLElementCollection;
applets: MSHTML$IHTMLElementCollection;
bgColor: any;
body: MSHTML$IHTMLElement;
charset: string;
clear(): void;
close(): void;
cookie: string;
createElement(eTag: string): MSHTML$IHTMLElement;

/**
 * @param bstrHref [bstrHref='']
 * @param lIndex [lIndex=-1]
 */
createStyleSheet(bstrHref?: string, lIndex?: number): MSHTML$IHTMLStyleSheet;
defaultCharset: string;
designMode: string;
domain: string;
elementFromPoint(x: number, y: number): MSHTML$IHTMLElement;
embeds: MSHTML$IHTMLElementCollection;

/**
 * @param showUI [showUI=false]
 */
execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;
execCommandShowHelp(cmdID: string): boolean;
expando: boolean;
fgColor: any;
fileCreatedDate: string;
fileModifiedDate: string;
fileSize: string;
fileUpdatedDate: string;
forms: MSHTML$IHTMLElementCollection;
frames: MSHTML$FramesCollection;
images: MSHTML$IHTMLElementCollection;
lastModified: string;
linkColor: any;
links: MSHTML$IHTMLElementCollection;
location: MSHTML$IHTMLLocation;
mimeType: string;
nameProp: string;
onafterupdate: any;
onbeforeupdate: any;
onclick: any;
ondblclick: any;
ondragstart: any;
onerrorupdate: any;
onhelp: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onmousedown: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onreadystatechange: any;
onrowenter: any;
onrowexit: any;
onselectstart: any;

/**
 * @param url [url='text/html']
 */
open(url?: string, name?: any, features?: any, replace?: any): any;
parentWindow: MSHTML$IHTMLWindow2;
plugins: MSHTML$IHTMLElementCollection;
protocol: string;
queryCommandEnabled(cmdID: string): boolean;
queryCommandIndeterm(cmdID: string): boolean;
queryCommandState(cmdID: string): boolean;
queryCommandSupported(cmdID: string): boolean;
queryCommandText(cmdID: string): string;
queryCommandValue(cmdID: string): any;
readyState: string;
referrer: string;
Script: any;
scripts: MSHTML$IHTMLElementCollection;
security: string;
selection: MSHTML$IHTMLSelectionObject;
styleSheets: MSHTML$IHTMLStyleSheetsCollection;
title: string;
toString(): string;
url: string;
vlinkColor: any;
write(...psarray: any[]): void;
writeln(...psarray: any[]): void
}

declare class MSHTML$IHTMLDocument7  {
constructor(): this;
adoptNode(pNodeSource: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode3;
all: MSHTML$IHTMLElementCollection;
body: MSHTML$IHTMLElement;
characterSet: string;
createAttribute(bstrAttrName: string): MSHTML$IHTMLDOMAttribute;
createAttributeNS(pvarNS: any, bstrAttrName: string): MSHTML$IHTMLDOMAttribute;
createCDATASection(text: string): MSHTML$IHTMLDOMNode;
createElement(bstrTag: string): MSHTML$IHTMLElement;
createElementNS(pvarNS: any, bstrTag: string): MSHTML$IHTMLElement;
createProcessingInstruction(bstrTarget: string, bstrData: string): MSHTML$IDOMProcessingInstruction;
defaultView: MSHTML$IHTMLWindow2;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(pvarNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getSelection(): MSHTML$IHTMLSelection;
hasAttributes(): boolean;
head: MSHTML$IHTMLElement;
importNode(pNodeSource: MSHTML$IHTMLDOMNode, fDeep: boolean): MSHTML$IHTMLDOMNode3;
inputEncoding: string;
normalize(): void;
onabort: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
onchange: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onfocus: any;
oninput: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onmssitemodejumplistitemremoved: any;
onmsthumbnailclick: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onratechange: any;
onreset: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onstalled: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;
parentWindow: MSHTML$IHTMLWindow2;
xmlEncoding: string;
xmlStandalone: boolean;
xmlVersion: string
}

declare class MSHTML$IHTMLDocumentCompatibleInfo  {
constructor(): this;
userAgent: string;
version: string
}

declare interface MSHTML$IHTMLDocumentCompatibleInfoCollection {
item(index: number): MSHTML$IHTMLDocumentCompatibleInfo,
+length: number,
(index: number): MSHTML$IHTMLDocumentCompatibleInfo
} 

declare class MSHTML$IHTMLDOMAttribute  {
constructor(): this;
nodeName: string;
nodeValue: any;
specified: boolean
}

declare class MSHTML$IHTMLDOMAttribute2  {
constructor(): this;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
attributes: any;
childNodes: any;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMAttribute;
expando: boolean;
firstChild: MSHTML$IHTMLDOMNode;
hasChildNodes(): boolean;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
lastChild: MSHTML$IHTMLDOMNode;
name: string;
nextSibling: MSHTML$IHTMLDOMNode;
nodeType: number;
ownerDocument: any;
parentNode: MSHTML$IHTMLDOMNode;
previousSibling: MSHTML$IHTMLDOMNode;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
value: string
}

declare interface MSHTML$IHTMLDOMChildrenCollection {
item(index: number): any,
+length: number,
(index: number): any
} 

declare class MSHTML$IHTMLDOMImplementation  {
constructor(): this;
hasFeature(bstrfeature: string, version?: any): boolean
}

declare class MSHTML$IHTMLDOMNode  {
constructor(): this;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
attributes: any;
childNodes: any;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
firstChild: MSHTML$IHTMLDOMNode;
hasChildNodes(): boolean;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
lastChild: MSHTML$IHTMLDOMNode;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
parentNode: MSHTML$IHTMLDOMNode;
previousSibling: MSHTML$IHTMLDOMNode;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode
}

declare class MSHTML$IHTMLDOMNode3  {
constructor(): this;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isDefaultNamespace(pvarNamespace: any): boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
localName: any;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
namespaceURI: any;
prefix: any;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
textContent: any
}

declare class MSHTML$IHTMLDOMRange  {
constructor(): this;
cloneContents(): any;
cloneRange(): MSHTML$IHTMLDOMRange;
collapse(toStart: boolean): void;
collapsed: boolean;
commonAncestorContainer: MSHTML$IHTMLDOMNode;
compareBoundaryPoints(how: number, sourceRange: any): number;
deleteContents(): void;
Detach(): void;
endContainer: MSHTML$IHTMLDOMNode;
endOffset: number;
extractContents(): any;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
insertNode(newNode: any): void;
selectNode(refNode: any): void;
selectNodeContents(refNode: any): void;
setEnd(refNode: any, offset: number): void;
setEndAfter(refNode: any): void;
setEndBefore(refNode: any): void;
setStart(refNode: any, offset: number): void;
setStartAfter(refNode: any): void;
setStartBefore(refNode: any): void;
startContainer: MSHTML$IHTMLDOMNode;
startOffset: number;
surroundContents(newParent: any): void;
toString(): string
}

declare class MSHTML$IHTMLElement  {
constructor(): this;
all: any;
children: any;
className: string;
click(): void;
contains(pChild: MSHTML$IHTMLElement): boolean;
document: any;
filters: MSHTML$IHTMLFiltersCollection;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
id: string;
innerHTML: string;
innerText: string;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
isTextEdit: boolean;
lang: string;
language: string;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onafterupdate: any;
onbeforeupdate: any;
onclick: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondragstart: any;
onerrorupdate: any;
onfilterchange: any;
onhelp: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onmousedown: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onrowenter: any;
onrowexit: any;
onselectstart: any;
outerHTML: string;
outerText: string;
parentElement: MSHTML$IHTMLElement;
parentTextEdit: MSHTML$IHTMLElement;
recordNumber: any;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
scrollIntoView(varargStart?: any): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
sourceIndex: number;
style: MSHTML$IHTMLStyle;
tagName: string;
title: string;
toString(): string
}

declare class MSHTML$IHTMLElement2  {
constructor(): this;
accessKey: string;
addBehavior(bstrURL: string, pvarFactory?: any): number;
addFilter(pUnk: any): void;
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement;
attachEvent(event: string, pdisp: any): boolean;
behaviorUrns: any;
blur(): void;
canHaveChildren: boolean;
clearAttributes(): void;
clientHeight: number;
clientLeft: number;
clientTop: number;
clientWidth: number;
componentFromPoint(x: number, y: number): string;
createControlRange(): any;
currentStyle: MSHTML$IHTMLCurrentStyle;
detachEvent(event: string, pdisp: any): void;
dir: string;
doScroll(component?: any): void;
focus(): void;
getAdjacentText(where: string): string;
getBoundingClientRect(): MSHTML$IHTMLRect;
getClientRects(): MSHTML$IHTMLRectCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getExpression(propname: string): any;
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement;
mergeAttributes(mergeThis: MSHTML$IHTMLElement): void;
onbeforecopy: any;
onbeforecut: any;
onbeforeeditfocus: any;
onbeforepaste: any;
onblur: any;
oncellchange: any;
oncontextmenu: any;
oncopy: any;
oncut: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondrop: any;
onfocus: any;
onlosecapture: any;
onpaste: any;
onpropertychange: any;
onreadystatechange: any;
onresize: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
readyState: any;
releaseCapture(): void;
removeBehavior(cookie: number): boolean;
removeExpression(propname: string): boolean;
removeFilter(pUnk: any): void;
replaceAdjacentText(where: string, newText: string): string;
runtimeStyle: MSHTML$IHTMLStyle;
scopeName: string;
scrollHeight: number;
scrollLeft: number;
scrollTop: number;
scrollWidth: number;

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void;

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void;
tabIndex: number;
tagUrn: string
}

declare interface MSHTML$IHTMLElementCollection {
item(name?: any, index?: any): any,
length: number,
tags(tagName: any): any,
toString(): string,
(name?: any, index?: any): any
} 

declare class MSHTML$IHTMLEventObj  {
constructor(): this;
altKey: boolean;
button: number;
cancelBubble: boolean;
clientX: number;
clientY: number;
ctrlKey: boolean;
fromElement: MSHTML$IHTMLElement;
keyCode: number;
offsetX: number;
offsetY: number;
qualifier: string;
reason: number;
returnValue: any;
screenX: number;
screenY: number;
shiftKey: boolean;
srcElement: MSHTML$IHTMLElement;
srcFilter: any;
toElement: MSHTML$IHTMLElement;
type: string;
x: number;
y: number
}

declare interface MSHTML$IHTMLFiltersCollection {
item(pvarIndex: any): any,
+length: number,
(pvarIndex: any): any
} 

declare interface MSHTML$IHTMLFormElement {
action: string,
dir: string,
+elements: any,
encoding: string,
item(name?: any, index?: any): any,
length: number,
method: string,
name: string,
onreset: any,
onsubmit: any,
reset(): void,
submit(): void,
tags(tagName: any): any,
target: string,
(name?: any, index?: any): any
} 

declare class MSHTML$IHTMLFrameBase  {
constructor(): this;
border: any;
frameBorder: string;
frameSpacing: any;
marginHeight: any;
marginWidth: any;
name: string;
noResize: boolean;
scrolling: string;
src: string
}

declare class MSHTML$IHTMLImgElement  {
constructor(): this;
align: string;
alt: string;
border: any;
complete: boolean;
dynsrc: string;
fileCreatedDate: string;
fileModifiedDate: string;
fileSize: string;
fileUpdatedDate: string;
height: number;
href: string;
hspace: number;
isMap: boolean;
loop: any;
lowsrc: string;
mimeType: string;
name: string;
nameProp: string;
onabort: any;
onerror: any;
onload: any;
protocol: string;
readyState: string;
src: string;
start: string;
useMap: string;
vrml: string;
vspace: number;
width: number
}

declare class MSHTML$IHTMLLocation  {
constructor(): this;
assign(bstr: string): void;
hash: string;
host: string;
hostname: string;
href: string;
pathname: string;
port: string;
protocol: string;

/**
 * @param flag [flag=false]
 */
reload(flag?: boolean): void;
replace(bstr: string): void;
search: string;
toString(): string
}

declare class MSHTML$IHTMLMediaError  {
constructor(): this;
code: number
}

declare class MSHTML$IHTMLMSCSSKeyframeRule  {
constructor(): this;
keyText: string;
style: MSHTML$IHTMLRuleStyle
}

declare class MSHTML$IHTMLOptionElement  {
constructor(): this;
defaultSelected: boolean;
form: MSHTML$IHTMLFormElement;
index: number;
selected: boolean;
text: string;
value: string
}

declare class MSHTML$IHTMLPerformanceNavigation  {
constructor(): this;
redirectCount: number;
toJSON(): any;
toString(): string;
type: number
}

declare class MSHTML$IHTMLPerformanceTiming  {
constructor(): this;
connectEnd: number;
connectStart: number;
domainLookupEnd: number;
domainLookupStart: number;
domComplete: number;
domContentLoadedEventEnd: number;
domContentLoadedEventStart: number;
domInteractive: number;
domLoading: number;
fetchStart: number;
loadEventEnd: number;
loadEventStart: number;
msFirstPaint: number;
navigationStart: number;
redirectEnd: number;
redirectStart: number;
requestStart: number;
responseEnd: number;
responseStart: number;
toJSON(): any;
toString(): string;
unloadEventEnd: number;
unloadEventStart: number
}

declare class MSHTML$IHTMLPluginsCollection  {
constructor(): this;
length: number;

/**
 * @param reload [reload=false]
 */
refresh(reload?: boolean): void
}

declare class MSHTML$IHTMLRect  {
constructor(): this;
bottom: number;
left: number;
right: number;
top: number
}

declare interface MSHTML$IHTMLRectCollection {
item(pvarIndex: any): any,
+length: number,
(pvarIndex: any): any
} 

declare class MSHTML$IHTMLRenderStyle  {
constructor(): this;
defaultTextSelection: string;
renderingPriority: number;
textBackgroundColor: any;
textColor: any;
textDecoration: string;
textDecorationColor: any;
textEffect: string;
textLineThroughStyle: string;
textUnderlineStyle: string
}

declare class MSHTML$IHTMLRuleStyle  {
constructor(): this;
background: string;
backgroundAttachment: string;
backgroundColor: any;
backgroundImage: string;
backgroundPosition: string;
backgroundPositionX: any;
backgroundPositionY: any;
backgroundRepeat: string;
border: string;
borderBottom: string;
borderBottomColor: any;
borderBottomStyle: string;
borderBottomWidth: any;
borderColor: string;
borderLeft: string;
borderLeftColor: any;
borderLeftStyle: string;
borderLeftWidth: any;
borderRight: string;
borderRightColor: any;
borderRightStyle: string;
borderRightWidth: any;
borderStyle: string;
borderTop: string;
borderTopColor: any;
borderTopStyle: string;
borderTopWidth: any;
borderWidth: string;
clear: string;
clip: string;
color: any;
cssText: string;
cursor: string;
display: string;
filter: string;
font: string;
fontFamily: string;
fontSize: any;
fontStyle: string;
fontVariant: string;
fontWeight: string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
height: any;
left: any;
letterSpacing: any;
lineHeight: any;
listStyle: string;
listStyleImage: string;
listStylePosition: string;
listStyleType: string;
margin: string;
marginBottom: any;
marginLeft: any;
marginRight: any;
marginTop: any;
overflow: string;
padding: string;
paddingBottom: any;
paddingLeft: any;
paddingRight: any;
paddingTop: any;
pageBreakAfter: string;
pageBreakBefore: string;
position: string;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
styleFloat: string;
textAlign: string;
textDecoration: string;
textDecorationBlink: boolean;
textDecorationLineThrough: boolean;
textDecorationNone: boolean;
textDecorationOverline: boolean;
textDecorationUnderline: boolean;
textIndent: any;
textTransform: string;
top: any;
verticalAlign: any;
visibility: string;
whiteSpace: string;
width: any;
wordSpacing: any;
zIndex: any
}

declare class MSHTML$IHTMLScreen  {
constructor(): this;
availHeight: number;
availWidth: number;
bufferDepth: number;
colorDepth: number;
fontSmoothingEnabled: boolean;
height: number;
updateInterval: number;
width: number
}

declare class MSHTML$IHTMLSelection  {
constructor(): this;
addRange(range: any): void;
anchorNode: MSHTML$IHTMLDOMNode;
anchorOffset: number;
collapse(parentNode: any, offfset: number): void;
collapseToEnd(): void;
collapseToStart(): void;
deleteFromDocument(): void;
focusNode: MSHTML$IHTMLDOMNode;
focusOffset: number;
getRangeAt(index: number): MSHTML$IHTMLDOMRange;
isCollapsed: boolean;
rangeCount: number;
removeAllRanges(): void;
removeRange(range: any): void;
selectAllChildren(parentNode: any): void;
toString(): string
}

declare class MSHTML$IHTMLSelectionObject  {
constructor(): this;
clear(): void;
createRange(): any;
empty(): void;
type: string
}

declare class MSHTML$IHTMLStorage  {
constructor(): this;
clear(): void;
getItem(bstrKey: string): any;
key(lIndex: number): string;
length: number;
remainingSpace: number;
removeItem(bstrKey: string): void;
setItem(bstrKey: string, bstrValue: string): void
}

declare class MSHTML$IHTMLStyle  {
constructor(): this;
background: string;
backgroundAttachment: string;
backgroundColor: any;
backgroundImage: string;
backgroundPosition: string;
backgroundPositionX: any;
backgroundPositionY: any;
backgroundRepeat: string;
border: string;
borderBottom: string;
borderBottomColor: any;
borderBottomStyle: string;
borderBottomWidth: any;
borderColor: string;
borderLeft: string;
borderLeftColor: any;
borderLeftStyle: string;
borderLeftWidth: any;
borderRight: string;
borderRightColor: any;
borderRightStyle: string;
borderRightWidth: any;
borderStyle: string;
borderTop: string;
borderTopColor: any;
borderTopStyle: string;
borderTopWidth: any;
borderWidth: string;
clear: string;
clip: string;
color: any;
cssText: string;
cursor: string;
display: string;
filter: string;
font: string;
fontFamily: string;
fontSize: any;
fontStyle: string;
fontVariant: string;
fontWeight: string;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
height: any;
left: any;
letterSpacing: any;
lineHeight: any;
listStyle: string;
listStyleImage: string;
listStylePosition: string;
listStyleType: string;
margin: string;
marginBottom: any;
marginLeft: any;
marginRight: any;
marginTop: any;
overflow: string;
padding: string;
paddingBottom: any;
paddingLeft: any;
paddingRight: any;
paddingTop: any;
pageBreakAfter: string;
pageBreakBefore: string;
pixelHeight: number;
pixelLeft: number;
pixelTop: number;
pixelWidth: number;
posHeight: number;
position: string;
posLeft: number;
posTop: number;
posWidth: number;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
styleFloat: string;
textAlign: string;
textDecoration: string;
textDecorationBlink: boolean;
textDecorationLineThrough: boolean;
textDecorationNone: boolean;
textDecorationOverline: boolean;
textDecorationUnderline: boolean;
textIndent: any;
textTransform: string;
top: any;
toString(): string;
verticalAlign: any;
visibility: string;
whiteSpace: string;
width: any;
wordSpacing: any;
zIndex: any
}

declare class MSHTML$IHTMLStyleMedia  {
constructor(): this;
matchMedium(mediaQuery: string): boolean;
type: string
}

declare class MSHTML$IHTMLStyleSheet  {
constructor(): this;

/**
 * @param lIndex [lIndex=-1]
 */
addImport(bstrURL: string, lIndex?: number): number;

/**
 * @param lIndex [lIndex=-1]
 */
addRule(bstrSelector: string, bstrStyle: string, lIndex?: number): number;
cssText: string;
disabled: boolean;
href: string;
id: string;
imports: MSHTML$IHTMLStyleSheetsCollection;
media: string;
owningElement: MSHTML$IHTMLElement;
parentStyleSheet: MSHTML$IHTMLStyleSheet;
readOnly: boolean;
removeImport(lIndex: number): void;
removeRule(lIndex: number): void;
rules: MSHTML$IHTMLStyleSheetRulesCollection;
title: string;
type: string
}

declare class MSHTML$IHTMLStyleSheetPage  {
constructor(): this;
pseudoClass: string;
selector: string
}

declare interface MSHTML$IHTMLStyleSheetPagesCollection {
item(index: number): MSHTML$IHTMLStyleSheetPage,
+length: number,
(index: number): MSHTML$IHTMLStyleSheetPage
} 

declare class MSHTML$IHTMLStyleSheetRule  {
constructor(): this;
readOnly: boolean;
selectorText: string;
style: MSHTML$IHTMLRuleStyle
}

declare interface MSHTML$IHTMLStyleSheetRulesAppliedCollection {
item(index: number): MSHTML$IHTMLStyleSheetRule,
+length: number,
propertyAppliedBy(name: string): MSHTML$IHTMLStyleSheetRule,
propertyAppliedTrace(name: string, index: number): MSHTML$IHTMLStyleSheetRule,
propertyAppliedTraceLength(name: string): number,
(index: number): MSHTML$IHTMLStyleSheetRule
} 

declare interface MSHTML$IHTMLStyleSheetRulesCollection {
item(index: number): MSHTML$IHTMLStyleSheetRule,
+length: number,
(index: number): MSHTML$IHTMLStyleSheetRule
} 

declare interface MSHTML$IHTMLStyleSheetsCollection {
item(pvarIndex: any): any,
+length: number,
(pvarIndex: any): any
} 

declare class MSHTML$IHTMLTableCaption  {
constructor(): this;
align: string;
vAlign: string
}

declare class MSHTML$IHTMLTableSection  {
constructor(): this;
align: string;
bgColor: any;

/**
 * @param index [index=-1]
 */
deleteRow(index?: number): void;

/**
 * @param index [index=-1]
 */
insertRow(index?: number): any;
rows: MSHTML$IHTMLElementCollection;
vAlign: string
}

declare class MSHTML$IHTMLTimeRanges  {
constructor(): this;
end(index: number): number;
length: number;
start(index: number): number
}

declare class MSHTML$IHTMLTxtRange  {
constructor(): this;

/**
 * @param start [start=true]
 */
collapse(start?: boolean): void;
compareEndPoints(how: string, sourceRange: MSHTML$IHTMLTxtRange): number;
duplicate(): MSHTML$IHTMLTxtRange;

/**
 * @param showUI [showUI=false]
 */
execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;
execCommandShowHelp(cmdID: string): boolean;
expand(Unit: string): boolean;

/**
 * @param Count [Count=1073741823]
 * @param flags [flags=0]
 */
findText(String: string, Count?: number, flags?: number): boolean;
getBookmark(): string;
htmlText: string;
inRange(range: MSHTML$IHTMLTxtRange): boolean;
isEqual(range: MSHTML$IHTMLTxtRange): boolean;

/**
 * @param Count [Count=1]
 */
move(Unit: string, Count?: number): number;

/**
 * @param Count [Count=1]
 */
moveEnd(Unit: string, Count?: number): number;

/**
 * @param Count [Count=1]
 */
moveStart(Unit: string, Count?: number): number;
moveToBookmark(Bookmark: string): boolean;
moveToElementText(element: MSHTML$IHTMLElement): void;
moveToPoint(x: number, y: number): void;
parentElement(): MSHTML$IHTMLElement;
pasteHTML(html: string): void;
queryCommandEnabled(cmdID: string): boolean;
queryCommandIndeterm(cmdID: string): boolean;
queryCommandState(cmdID: string): boolean;
queryCommandSupported(cmdID: string): boolean;
queryCommandText(cmdID: string): string;
queryCommandValue(cmdID: string): any;

/**
 * @param fStart [fStart=true]
 */
scrollIntoView(fStart?: boolean): void;
select(): void;
setEndPoint(how: string, sourceRange: MSHTML$IHTMLTxtRange): void;
text: string
}

declare interface MSHTML$IHTMLWindow2 {

/**
 * @param message [message='']
 */
alert(message?: string): void,
blur(): void,
clearInterval(timerID: number): void,
clearTimeout(timerID: number): void,
+clientInformation: MSHTML$IOmNavigator,
close(): void,
+closed: boolean,

/**
 * @param message [message='']
 */
confirm(message?: string): boolean,
defaultStatus: string,
+document: MSHTML$IHTMLDocument2,
+event: MSHTML$IHTMLEventObj,

/**
 * @param language [language='JScript']
 */
execScript(code: string, language?: string): any,
+external: any,
focus(): void,
+frames: MSHTML$FramesCollection,
+history: MSHTML$IOmHistory,
+Image: MSHTML$HTMLImageElementFactory,
item(pvarIndex: any): any,
+length: number,
+location: MSHTML$IHTMLLocation,
moveBy(x: number, y: number): void,
moveTo(x: number, y: number): void,
name: string,
navigate(url: string): void,
+navigator: MSHTML$IOmNavigator,
offscreenBuffering: any,
onbeforeunload: any,
onblur: any,
onerror: any,
onfocus: any,
onhelp: any,
onload: any,
onresize: any,
onscroll: any,
onunload: any,

/**
 * @param url [url='']
 * @param name [name='']
 * @param features [features='']
 * @param replace [replace=false]
 */
open(
url?: string,
name?: string,
features?: string,
replace?: boolean): MSHTML$IHTMLWindow2,
opener: any,
+Option: MSHTML$HTMLOptionElementFactory,
+parent: MSHTML$IHTMLWindow2,

/**
 * @param message [message='']
 * @param defstr [defstr='undefined']
 */
prompt(message?: string, defstr?: string): any,
resizeBy(x: number, y: number): void,
resizeTo(x: number, y: number): void,
+screen: MSHTML$IHTMLScreen,
scroll(x: number, y: number): void,
scrollBy(x: number, y: number): void,
scrollTo(x: number, y: number): void,
+self: MSHTML$IHTMLWindow2,
setInterval(expression: string, msec: number, language?: any): number,
setTimeout(expression: string, msec: number, language?: any): number,

/**
 * @param features [features='']
 */
showHelp(helpURL: string, helpArg: any, features?: string): void,
showModalDialog(dialog: string, varArgIn?: any, varOptions?: any): any,
status: string,
+top: MSHTML$IHTMLWindow2,
toString(): string,
+window: MSHTML$IHTMLWindow2,
(pvarIndex: any): any
} 

declare class MSHTML$IHTMLXDomainRequest  {
constructor(): this;
abort(): void;
contentType: string;
onerror: any;
onload: any;
onprogress: any;
ontimeout: any;
open(bstrMethod: string, bstrURL: string): void;
responseText: string;
send(varBody?: any): void;
timeout: number
}

declare class MSHTML$IHTMLXMLHttpRequest  {
constructor(): this;
abort(): void;
getAllResponseHeaders(): string;
getResponseHeader(bstrHeader: string): string;
onreadystatechange: any;
open(
bstrMethod: string,
bstrURL: string,
varAsync: any,
varUser?: any,
varPassword?: any): void;
readyState: number;
responseBody: any;
responseText: string;
responseXML: any;
send(varBody?: any): void;
setRequestHeader(bstrHeader: string, bstrValue: string): void;
status: number;
statusText: string
}

declare class MSHTML$IOmHistory  {
constructor(): this;
back(pvargdistance?: any): void;
forward(pvargdistance?: any): void;
go(pvargdistance?: any): void;
length: number
}

declare class MSHTML$IOmNavigator  {
constructor(): this;
appCodeName: string;
appMinorVersion: string;
appName: string;
appVersion: string;
browserLanguage: string;
connectionSpeed: number;
cookieEnabled: boolean;
cpuClass: string;
javaEnabled(): boolean;
mimeTypes: MSHTML$CMimeTypes;
onLine: boolean;
opsProfile: MSHTML$COpsProfile;
platform: string;
plugins: MSHTML$IHTMLPluginsCollection;
systemLanguage: string;
taintEnabled(): boolean;
toString(): string;
userAgent: string;
userLanguage: string;
userProfile: MSHTML$COpsProfile
}

declare class MSHTML$IRulesApplied  {
constructor(): this;
appliedRules: MSHTML$IHTMLStyleSheetRulesAppliedCollection;
element: MSHTML$IHTMLElement;
hasInheritableProperty(): boolean;
inlineStyles: MSHTML$IHTMLStyle;
propertyIsInheritable(name: string): boolean;
propertyIsInline(name: string): boolean
}

declare class MSHTML$ISVGElement  {
constructor(): this;
focusable: MSHTML$SVGAnimatedEnumeration;
ownerSVGElement: MSHTML$ISVGSVGElement;
viewportElement: MSHTML$ISVGElement;
xmlbase: string
}

declare class MSHTML$ISVGElementInstance  {
constructor(): this;
childNodes: MSHTML$ISVGElementInstanceList;
correspondingElement: MSHTML$ISVGElement;
correspondingUseElement: MSHTML$ISVGUseElement;
firstChild: MSHTML$ISVGElementInstance;
lastChild: MSHTML$ISVGElementInstance;
nextSibling: MSHTML$ISVGElementInstance;
parentNode: MSHTML$ISVGElementInstance;
previousSibling: MSHTML$ISVGElementInstance
}

declare class MSHTML$ISVGElementInstanceList  {
constructor(): this;
item(index: number): MSHTML$ISVGElementInstance;
length: number
}

declare class MSHTML$ISVGPathSegArcAbs  {
constructor(): this;
angle: number;
largeArcFlag: boolean;
r1: number;
r2: number;
sweepFlag: boolean;
x: number;
y: number
}

declare class MSHTML$ISVGPathSegArcRel  {
constructor(): this;
angle: number;
largeArcFlag: boolean;
r1: number;
r2: number;
sweepFlag: boolean;
x: number;
y: number
}

declare class MSHTML$ISVGPathSegClosePath  {
constructor(): this
}

declare class MSHTML$ISVGPathSegCurvetoCubicAbs  {
constructor(): this;
x: number;
x1: number;
x2: number;
y: number;
y1: number;
y2: number
}

declare class MSHTML$ISVGPathSegCurvetoCubicRel  {
constructor(): this;
x: number;
x1: number;
x2: number;
y: number;
y1: number;
y2: number
}

declare class MSHTML$ISVGPathSegCurvetoCubicSmoothAbs  {
constructor(): this;
x: number;
x2: number;
y: number;
y2: number
}

declare class MSHTML$ISVGPathSegCurvetoCubicSmoothRel  {
constructor(): this;
x: number;
x2: number;
y: number;
y2: number
}

declare class MSHTML$ISVGPathSegCurvetoQuadraticAbs  {
constructor(): this;
x: number;
x1: number;
y: number;
y1: number
}

declare class MSHTML$ISVGPathSegCurvetoQuadraticRel  {
constructor(): this;
x: number;
x1: number;
y: number;
y1: number
}

declare class MSHTML$ISVGPathSegCurvetoQuadraticSmoothAbs  {
constructor(): this;
x: number;
y: number
}

declare class MSHTML$ISVGPathSegCurvetoQuadraticSmoothRel  {
constructor(): this;
x: number;
y: number
}

declare class MSHTML$ISVGPathSegLinetoAbs  {
constructor(): this;
x: number;
y: number
}

declare class MSHTML$ISVGPathSegLinetoHorizontalAbs  {
constructor(): this;
x: number
}

declare class MSHTML$ISVGPathSegLinetoHorizontalRel  {
constructor(): this;
x: number
}

declare class MSHTML$ISVGPathSegLinetoRel  {
constructor(): this;
x: number;
y: number
}

declare class MSHTML$ISVGPathSegLinetoVerticalAbs  {
constructor(): this;
y: number
}

declare class MSHTML$ISVGPathSegLinetoVerticalRel  {
constructor(): this;
y: number
}

declare class MSHTML$ISVGPathSegMovetoAbs  {
constructor(): this;
x: number;
y: number
}

declare class MSHTML$ISVGPathSegMovetoRel  {
constructor(): this;
x: number;
y: number
}

declare class MSHTML$ISVGSVGElement  {
constructor(): this;
animationsPaused(): boolean;
checkEnclosure(element: MSHTML$ISVGElement, rect: MSHTML$SVGRect): boolean;
checkIntersection(element: MSHTML$ISVGElement, rect: MSHTML$SVGRect): boolean;
contentScriptType: string;
contentStyleType: string;
createSVGAngle(): MSHTML$SVGAngle;
createSVGLength(): MSHTML$SVGLength;
createSVGMatrix(): MSHTML$SVGMatrix;
createSVGNumber(): MSHTML$SVGNumber;
createSVGPoint(): MSHTML$SVGPoint;
createSVGRect(): MSHTML$SVGRect;
createSVGTransform(): MSHTML$SVGTransform;
createSVGTransformFromMatrix(matrix: MSHTML$SVGMatrix): MSHTML$SVGTransform;
currentScale: number;
currentTranslate: MSHTML$SVGPoint;
currentView: MSHTML$ISVGViewSpec;
deselectAll(): void;
forceRedraw(): void;
getCurrentTime(): number;
getElementById(elementId: string): MSHTML$IHTMLElement;
getEnclosureList(rect: MSHTML$SVGRect, referenceElement: MSHTML$ISVGElement): any;
getIntersectionList(rect: MSHTML$SVGRect, referenceElement: MSHTML$ISVGElement): any;
height: MSHTML$SVGAnimatedLength;
pauseAnimations(): void;
pixelUnitToMillimeterX: number;
pixelUnitToMillimeterY: number;
screenPixelToMillimeterX: number;
screenPixelToMillimeterY: number;
setCurrentTime(seconds: number): void;
suspendRedraw(maxWaitMilliseconds: number): number;
unpauseAnimations(): void;
unsuspendRedraw(suspendHandeID: number): void;
unsuspendRedrawAll(): void;
useCurrentView: boolean;
viewport: MSHTML$SVGRect;
width: MSHTML$SVGAnimatedLength;
x: MSHTML$SVGAnimatedLength;
y: MSHTML$SVGAnimatedLength
}

declare class MSHTML$ISVGUseElement  {
constructor(): this;
animatedInstanceRoot: MSHTML$ISVGElementInstance;
height: MSHTML$SVGAnimatedLength;
instanceRoot: MSHTML$ISVGElementInstance;
width: MSHTML$SVGAnimatedLength;
x: MSHTML$SVGAnimatedLength;
y: MSHTML$SVGAnimatedLength
}

declare class MSHTML$ISVGViewSpec  {
constructor(): this
}

declare class MSHTML$IWebGeocoordinates  {
constructor(): this;
accuracy: number;
altitude: any;
altitudeAccuracy: any;
heading: any;
latitude: number;
longitude: number;
speed: any
}

declare class MSHTML$IWebGeolocation  {
constructor(): this;
clearWatch(watchId: number): void;
getCurrentPosition(successCallback: any, errorCallback?: any, options?: any): void;
watchPosition(successCallback: any, errorCallback?: any, options?: any): number
}

declare class MSHTML$NodeIterator  {
constructor(): this;
Detach(): void;
expandEntityReferences: boolean;
filter: any;
nextNode(): any;
previousNode(): any;
root: any;
whatToShow: number
}

declare class MSHTML$OldHTMLDocument  {
constructor(): this;
activeElement: MSHTML$IHTMLElement;
addEventListener(type: string, listener: any, useCapture: boolean): void;
adoptNode(pNodeSource: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode3;
alinkColor: any;
all: MSHTML$IHTMLElementCollection;
anchors: MSHTML$IHTMLElementCollection;
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
applets: MSHTML$IHTMLElementCollection;
attachEvent(event: string, pdisp: any): boolean;
attributes: any;
bgColor: any;
body: MSHTML$IHTMLElement;
characterSet: string;
charset: string;
childNodes: any;
clear(): void;
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
close(): void;
compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
compatible: MSHTML$IHTMLDocumentCompatibleInfoCollection;
compatMode: string;
constructor: any;
cookie: string;
createAttribute(bstrAttrName: string): MSHTML$IHTMLDOMAttribute;
createAttributeNS(pvarNS: any, bstrAttrName: string): MSHTML$IHTMLDOMAttribute;
createCDATASection(text: string): MSHTML$IHTMLDOMNode;
createComment(bstrData: string): MSHTML$IHTMLDOMNode;
createDocumentFragment(): MSHTML$IHTMLDocument2;
createDocumentFromUrl(bstrURL: string, bstrOptions: string): MSHTML$IHTMLDocument2;
createElement(eTag: string): MSHTML$IHTMLElement;
createElementNS(pvarNS: any, bstrTag: string): MSHTML$IHTMLElement;
createEvent(eventType: string): MSHTML$IDOMEvent;
CreateEventObject(pvarEventObject?: any): MSHTML$IHTMLEventObj;
createNodeIterator(
pRootNode: any,
ulWhatToShow: number,
pFilter: any,
fEntityReferenceExpansion: boolean): MSHTML$IDOMNodeIterator;
createProcessingInstruction(bstrTarget: string, bstrData: string): MSHTML$IDOMProcessingInstruction;
createRange(): MSHTML$IHTMLDOMRange;
createRenderStyle(v: string): MSHTML$IHTMLRenderStyle;

/**
 * @param bstrHref [bstrHref='']
 * @param lIndex [lIndex=-1]
 */
createStyleSheet(bstrHref?: string, lIndex?: number): MSHTML$IHTMLStyleSheet;
createTextNode(text: string): MSHTML$IHTMLDOMNode;
createTreeWalker(
pRootNode: any,
ulWhatToShow: number,
pFilter: any,
fEntityReferenceExpansion: boolean): MSHTML$IDOMTreeWalker;
defaultCharset: string;
defaultView: MSHTML$IHTMLWindow2;
designMode: string;
detachEvent(event: string, pdisp: any): void;
dir: string;
dispatchEvent(evt: MSHTML$IDOMEvent): boolean;
doctype: MSHTML$IHTMLDOMNode;
documentElement: MSHTML$IHTMLElement;
documentMode: any;
domain: string;
elementFromPoint(x: number, y: number): MSHTML$IHTMLElement;
elementsFromPoint(x: number, y: number): MSHTML$IHTMLDOMChildrenCollection;
elementsFromRect(
left: number,
top: number,
width: number,
height: number): MSHTML$IHTMLDOMChildrenCollection;
embeds: MSHTML$IHTMLElementCollection;

/**
 * @param showUI [showUI=false]
 */
execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;
execCommandShowHelp(cmdID: string): boolean;
expando: boolean;
fgColor: any;
fileCreatedDate: string;
fileModifiedDate: string;
fileSize: string;
fileUpdatedDate: string;
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
firstChild: MSHTML$IHTMLDOMNode;
focus(): void;
forms: MSHTML$IHTMLElementCollection;
frames: MSHTML$FramesCollection;
getElementById(v: string): MSHTML$IHTMLElement;
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
getElementsByName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
getElementsByTagNameNS(pvarNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection;
getSelection(): MSHTML$IHTMLSelection;
hasAttributes(): boolean;
hasChildNodes(): boolean;
hasFocus(): boolean;
head: MSHTML$IHTMLElement;
ie8_getElementById(bstrId: string): MSHTML$IHTMLElement2;
ie9_all: MSHTML$IHTMLElementCollection;
ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_body: MSHTML$IHTMLElement;
ie9_createAttribute(bstrAttrName: string): MSHTML$IHTMLDOMAttribute;
ie9_createElement(bstrTag: string): MSHTML$IHTMLElement;
ie9_insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
ie9_parentWindow: MSHTML$IHTMLWindow2;
ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
ie9_replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
images: MSHTML$IHTMLElementCollection;
implementation: MSHTML$IHTMLDOMImplementation;
importNode(pNodeSource: MSHTML$IHTMLDOMNode, fDeep: boolean): MSHTML$IHTMLDOMNode3;
inputEncoding: string;
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode;
isDefaultNamespace(pvarNamespace: any): boolean;
isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
isSupported(feature: string, version: any): boolean;
lastChild: MSHTML$IHTMLDOMNode;
lastModified: string;
linkColor: any;
links: MSHTML$IHTMLElementCollection;
localName: any;
location: MSHTML$IHTMLLocation;
lookupNamespaceURI(pvarPrefix: any): any;
lookupPrefix(pvarNamespaceURI: any): any;
media: string;
mimeType: string;
msCapsLockWarningOff: boolean;
nameProp: string;
namespaces: any;
namespaceURI: any;
nextSibling: MSHTML$IHTMLDOMNode;
nodeName: string;
nodeType: number;
nodeValue: any;
normalize(): void;
onabort: any;
onactivate: any;
onafterupdate: any;
onbeforeactivate: any;
onbeforedeactivate: any;
onbeforeeditfocus: any;
onbeforeupdate: any;
onblur: any;
oncanplay: any;
oncanplaythrough: any;
oncellchange: any;
onchange: any;
onclick: any;
oncontextmenu: any;
oncontrolselect: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondeactivate: any;
ondrag: any;
ondragend: any;
ondragenter: any;
ondragleave: any;
ondragover: any;
ondragstart: any;
ondrop: any;
ondurationchange: any;
onemptied: any;
onended: any;
onerror: any;
onerrorupdate: any;
onfocus: any;
onfocusin: any;
onfocusout: any;
onhelp: any;
oninput: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onload: any;
onloadeddata: any;
onloadedmetadata: any;
onloadstart: any;
onmousedown: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onmousewheel: any;
onmscontentzoom: any;
onmsgesturechange: any;
onmsgesturedoubletap: any;
onmsgestureend: any;
onmsgesturehold: any;
onmsgesturestart: any;
onmsgesturetap: any;
onmsinertiastart: any;
onmsmanipulationstatechanged: any;
onmspointercancel: any;
onmspointerdown: any;
onmspointerhover: any;
onmspointermove: any;
onmspointerout: any;
onmspointerover: any;
onmspointerup: any;
onmssitemodejumplistitemremoved: any;
onmsthumbnailclick: any;
onpause: any;
onplay: any;
onplaying: any;
onprogress: any;
onpropertychange: any;
onratechange: any;
onreadystatechange: any;
onreset: any;
onrowenter: any;
onrowexit: any;
onrowsdelete: any;
onrowsinserted: any;
onscroll: any;
onseeked: any;
onseeking: any;
onselect: any;
onselectionchange: any;
onselectstart: any;
onstalled: any;
onstop: any;
onstorage: any;
onstoragecommit: any;
onsubmit: any;
onsuspend: any;
ontimeupdate: any;
onvolumechange: any;
onwaiting: any;

/**
 * @param url [url='text/html']
 */
open(url?: string, name?: any, features?: any, replace?: any): any;
ownerDocument: any;
parentNode: MSHTML$IHTMLDOMNode;
parentWindow: MSHTML$IHTMLWindow2;
plugins: MSHTML$IHTMLElementCollection;
prefix: any;
previousSibling: MSHTML$IHTMLDOMNode;
protocol: string;
queryCommandEnabled(cmdID: string): boolean;
queryCommandIndeterm(cmdID: string): boolean;
queryCommandState(cmdID: string): boolean;
queryCommandSupported(cmdID: string): boolean;
queryCommandText(cmdID: string): string;
queryCommandValue(cmdID: string): any;
querySelector(v: string): MSHTML$IHTMLElement;
querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
readyState: string;

/**
 * @param fForce [fForce=false]
 */
recalc(fForce?: boolean): void;
referrer: string;
releaseCapture(): void;
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
removeEventListener(type: string, listener: any, useCapture: boolean): void;

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
rootElement: MSHTML$ISVGSVGElement;
Script: any;
scripts: MSHTML$IHTMLElementCollection;
security: string;
selection: MSHTML$IHTMLSelectionObject;
styleSheets: MSHTML$IHTMLStyleSheetsCollection;
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
textContent: any;
title: string;
toString(): string;
uniqueID: string;
updateSettings(): void;
url: string;
URLUnencoded: string;
vlinkColor: any;
write(...psarray: any[]): void;
writeln(...psarray: any[]): void;
xmlEncoding: string;
xmlStandalone: boolean;
xmlVersion: string
}

declare interface MSHTML$OldHTMLFormElement {
acceptCharset: string,
accessKey: string,
action: string,
addBehavior(bstrURL: string, pvarFactory?: any): number,
addFilter(pUnk: any): void,
+all: any,
appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
appendItemSeparator(): void,

/**
 * @param name [name='']
 * @param filename [filename='']
 */
appendNameFilePair(name?: string, filename?: string): void,

/**
 * @param name [name='']
 * @param value [value='']
 */
appendNameValuePair(name?: string, value?: string): void,
applyElement(apply: MSHTML$IHTMLElement, where: string): MSHTML$IHTMLElement,
ariaActivedescendant: string,
ariaBusy: string,
ariaChecked: string,
ariaControls: string,
ariaDescribedby: string,
ariaDisabled: string,
ariaExpanded: string,
ariaFlowto: string,
ariaHaspopup: string,
ariaHidden: string,
ariaInvalid: string,
ariaLabelledby: string,
ariaLevel: number,
ariaLive: string,
ariaMultiselectable: string,
ariaOwns: string,
ariaPosinset: number,
ariaPressed: string,
ariaReadonly: string,
ariaRelevant: string,
ariaRequired: string,
ariaSecret: string,
ariaSelected: string,
ariaSetsize: number,
ariaValuemax: string,
ariaValuemin: string,
ariaValuenow: string,
attachEvent(event: string, pdisp: any): boolean,
+attributes: any,
+behaviorUrns: any,
blur(): void,
+canHaveChildren: boolean,
+canHaveHTML: boolean,
+childNodes: any,
+children: any,
className: string,
clearAttributes(): void,
click(): void,
+clientHeight: number,
+clientLeft: number,
+clientTop: number,
+clientWidth: number,
cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode,
componentFromPoint(x: number, y: number): string,
+"constructor": any,
contains(pChild: MSHTML$IHTMLElement): boolean,
contentEditable: string,
createControlRange(): any,
+currentStyle: MSHTML$IHTMLCurrentStyle,
detachEvent(event: string, pdisp: any): void,
dir: string,
disabled: boolean,
+document: any,
doScroll(component?: any): void,
dragDrop(): boolean,
+elements: any,
encoding: string,
+filters: MSHTML$IHTMLFiltersCollection,
FireEvent(bstrEventName: string, pvarEventObject?: any): boolean,
+firstChild: MSHTML$IHTMLDOMNode,
focus(): void,
getAdjacentText(where: string): string,

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any,
getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute,
getAttributeNodeNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2,
getAttributeNS(pvarNS: any, strAttributeName: string): any,
getBoundingClientRect(): MSHTML$IHTMLRect,
getClientRects(): MSHTML$IHTMLRectCollection,
getElementsByClassName(v: string): MSHTML$IHTMLElementCollection,
getElementsByTagName(v: string): MSHTML$IHTMLElementCollection,
getElementsByTagNameNS(varNS: any, bstrLocalName: string): MSHTML$IHTMLElementCollection,
getExpression(propname: string): any,
hasAttribute(name: string): boolean,
hasAttributeNS(pvarNS: any, name: string): boolean,
hasAttributes(): boolean,
hasChildNodes(): boolean,
hideFocus: boolean,
id: string,
ie8_action: string,
+ie8_attributes: MSHTML$IHTMLAttributeCollection3,
ie8_getAttribute(strAttributeName: string): any,
ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2,
ie8_removeAttribute(strAttributeName: string): boolean,
ie8_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
ie8_setAttribute(strAttributeName: string, AttributeValue: any): void,
ie8_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
ie9_getAttribute(strAttributeName: string): any,
ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2,
ie9_hasAttribute(name: string): boolean,
ie9_hasAttributes(): boolean,
+ie9_nodeName: string,
ie9_removeAttribute(strAttributeName: string): void,
ie9_removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void,
ie9_setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
+ie9_tagName: string,
innerHTML: string,
innerText: string,
insertAdjacentElement(where: string, insertedElement: MSHTML$IHTMLElement): MSHTML$IHTMLElement,
insertAdjacentHTML(where: string, html: string): void,
insertAdjacentText(where: string, text: string): void,
insertBefore(newChild: MSHTML$IHTMLDOMNode, refChild?: any): MSHTML$IHTMLDOMNode,
+isContentEditable: boolean,
+isDisabled: boolean,
+isMultiLine: boolean,
+isTextEdit: boolean,
item(name?: any, index?: any): any,
lang: string,
language: string,
+lastChild: MSHTML$IHTMLDOMNode,
length: number,
mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void,
method: string,
msMatchesSelector(v: string): boolean,
msReleasePointerCapture(pointerId: number): void,
msSetPointerCapture(pointerId: number): void,
name: string,
namedItem(name: string): any,
+nextSibling: MSHTML$IHTMLDOMNode,
+nodeName: string,
+nodeType: number,
nodeValue: any,
normalize(): void,
+offsetHeight: number,
+offsetLeft: number,
+offsetParent: MSHTML$IHTMLElement,
+offsetTop: number,
+offsetWidth: number,
onabort: any,
onactivate: any,
onafterupdate: any,
onbeforeactivate: any,
onbeforecopy: any,
onbeforecut: any,
onbeforedeactivate: any,
onbeforeeditfocus: any,
onbeforepaste: any,
onbeforeupdate: any,
onblur: any,
oncanplay: any,
oncanplaythrough: any,
oncellchange: any,
onchange: any,
onclick: any,
oncontextmenu: any,
oncontrolselect: any,
oncopy: any,
oncuechange: any,
oncut: any,
ondataavailable: any,
ondatasetchanged: any,
ondatasetcomplete: any,
ondblclick: any,
ondeactivate: any,
ondrag: any,
ondragend: any,
ondragenter: any,
ondragleave: any,
ondragover: any,
ondragstart: any,
ondrop: any,
ondurationchange: any,
onemptied: any,
onended: any,
onerror: any,
onerrorupdate: any,
onfilterchange: any,
onfocus: any,
onfocusin: any,
onfocusout: any,
onhelp: any,
oninput: any,
oninvalid: any,
onkeydown: any,
onkeypress: any,
onkeyup: any,
onlayoutcomplete: any,
onload: any,
onloadeddata: any,
onloadedmetadata: any,
onloadstart: any,
onlosecapture: any,
onmousedown: any,
onmouseenter: any,
onmouseleave: any,
onmousemove: any,
onmouseout: any,
onmouseover: any,
onmouseup: any,
onmousewheel: any,
onmove: any,
onmoveend: any,
onmovestart: any,
onmsanimationend: any,
onmsanimationiteration: any,
onmsanimationstart: any,
onmsgesturechange: any,
onmsgesturedoubletap: any,
onmsgestureend: any,
onmsgesturehold: any,
onmsgesturestart: any,
onmsgesturetap: any,
onmsgotpointercapture: any,
onmsinertiastart: any,
onmslostpointercapture: any,
onmsmanipulationstatechanged: any,
onmspointercancel: any,
onmspointerdown: any,
onmspointerhover: any,
onmspointermove: any,
onmspointerout: any,
onmspointerover: any,
onmspointerup: any,
onmstransitionend: any,
onmstransitionstart: any,
onpage: any,
onpaste: any,
onpause: any,
onplay: any,
onplaying: any,
onprogress: any,
onpropertychange: any,
onratechange: any,
onreadystatechange: any,
onreset: any,
onresize: any,
onresizeend: any,
onresizestart: any,
onrowenter: any,
onrowexit: any,
onrowsdelete: any,
onrowsinserted: any,
onscroll: any,
onseeked: any,
onseeking: any,
onselect: any,
onselectstart: any,
onstalled: any,
onsubmit: any,
onsuspend: any,
ontimeupdate: any,
onvolumechange: any,
onwaiting: any,
outerHTML: string,
outerText: string,
+ownerDocument: any,
+parentElement: MSHTML$IHTMLElement,
+parentNode: MSHTML$IHTMLDOMNode,
+parentTextEdit: MSHTML$IHTMLElement,
+previousSibling: MSHTML$IHTMLDOMNode,
+readyState: any,
+recordNumber: any,
releaseCapture(): void,

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean,
removeAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute,
removeAttributeNS(pvarNS: any, strAttributeName: string): void,
removeBehavior(cookie: number): boolean,
removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
removeExpression(propname: string): boolean,
removeFilter(pUnk: any): void,

/**
 * @param fDeep [fDeep=false]
 */
removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode,
replaceAdjacentText(where: string, newText: string): string,
replaceChild(
newChild: MSHTML$IHTMLDOMNode,
oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
reset(): void,
role: string,
+runtimeStyle: MSHTML$IHTMLStyle,
+scopeName: string,
+scrollHeight: number,
scrollIntoView(varargStart?: any): void,
scrollLeft: number,
scrollTop: number,
+scrollWidth: number,
setActive(): void,

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void,
setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute,
setAttributeNodeNS(pattr: MSHTML$IHTMLDOMAttribute2): MSHTML$IHTMLDOMAttribute2,
setAttributeNS(pvarNS: any, strAttributeName: string, pvarAttributeValue: any): void,

/**
 * @param containerCapture [containerCapture=true]
 */
setCapture(containerCapture?: boolean): void,

/**
 * @param language [language='']
 */
setExpression(propname: string, expression: string, language?: string): void,
+sourceIndex: number,
spellcheck: any,
+style: MSHTML$IHTMLStyle,
submit(): void,
swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode,
tabIndex: number,
+tagName: string,
tags(tagName: any): any,
tagUrn: string,
target: string,
title: string,
toString(): string,
+uniqueID: string,
+uniqueNumber: number,
urns(urn: any): any,
xmsAcceleratorKey: string,
(name?: any, index?: any): any
} 

declare class MSHTML$RangeException  {
constructor(): this;
code: number;
message: string
}

declare class MSHTML$RulesApplied  {
constructor(): this;
appliedRules: MSHTML$IHTMLStyleSheetRulesAppliedCollection;
element: MSHTML$IHTMLElement;
hasInheritableProperty(): boolean;
inlineStyles: MSHTML$IHTMLStyle;
propertyIsInheritable(name: string): boolean;
propertyIsInline(name: string): boolean
}

declare interface MSHTML$RulesAppliedCollection {
+element: MSHTML$IHTMLElement,
item(index: number): MSHTML$IRulesApplied,
+length: number,
property(index: number): string,
+propertyCount: number,
propertyInheritedFrom(name: string): MSHTML$IRulesApplied,
propertyInheritedTrace(name: string, index: number): MSHTML$IRulesApplied,
propertyInheritedTraceLength(name: string): number,
(index: number): MSHTML$IRulesApplied
} 

declare class MSHTML$Scriptlet  {
constructor(): this;
AboutBox(): void;
embed: boolean;
event: any;
readyState: number;
Scrollbar: boolean;
url: string
}

declare interface MSHTML$StaticNodeList {
+"constructor": any,
item(index: number): any,
+length: number,
(index: number): any
} 

declare class MSHTML$SVGAElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
farthestViewportElement: MSHTML$ISVGElement;
focusable: MSHTML$SVGAnimatedEnumeration;
getBBox(): MSHTML$SVGRect;
getCTM(): MSHTML$SVGMatrix;
getScreenCTM(): MSHTML$SVGMatrix;
getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
hasExtension(extension: string): boolean;
href: MSHTML$SVGAnimatedString;
nearestViewportElement: MSHTML$ISVGElement;
ownerSVGElement: MSHTML$ISVGSVGElement;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
systemLanguage: MSHTML$SVGStringList;
target: MSHTML$SVGAnimatedString;
transform: MSHTML$SVGAnimatedTransformList;
viewportElement: MSHTML$ISVGElement;
xmlbase: string;
xmllang: string;
xmlspace: string
}

declare class MSHTML$SVGAngle  {
constructor(): this;
convertToSpecifiedUnits(unitType: number): void;
newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;
unitType: number;
value: number;
valueAsString: string;
valueInSpecifiedUnits: number
}

declare class MSHTML$SVGAnimatedAngle  {
constructor(): this;
animVal: MSHTML$SVGAngle;
baseVal: MSHTML$SVGAngle
}

declare class MSHTML$SVGAnimatedBoolean  {
constructor(): this;
animVal: boolean;
baseVal: boolean
}

declare class MSHTML$SVGAnimatedEnumeration  {
constructor(): this;
animVal: number;
baseVal: number
}

declare class MSHTML$SVGAnimatedInteger  {
constructor(): this;
animVal: number;
baseVal: number
}

declare class MSHTML$SVGAnimatedLength  {
constructor(): this;
animVal: MSHTML$SVGLength;
baseVal: MSHTML$SVGLength
}

declare class MSHTML$SVGAnimatedLengthList  {
constructor(): this;
animVal: MSHTML$SVGLengthList;
baseVal: MSHTML$SVGLengthList
}

declare class MSHTML$SVGAnimatedNumber  {
constructor(): this;
animVal: number;
baseVal: number
}

declare class MSHTML$SVGAnimatedNumberList  {
constructor(): this;
animVal: MSHTML$SVGNumberList;
baseVal: MSHTML$SVGNumberList
}

declare class MSHTML$SVGAnimatedPreserveAspectRatio  {
constructor(): this;
animVal: MSHTML$SVGPreserveAspectRatio;
baseVal: MSHTML$SVGPreserveAspectRatio
}

declare class MSHTML$SVGAnimatedRect  {
constructor(): this;
animVal: MSHTML$SVGRect;
baseVal: MSHTML$SVGRect
}

declare class MSHTML$SVGAnimatedString  {
constructor(): this;
animVal: string;
baseVal: string
}

declare class MSHTML$SVGAnimatedTransformList  {
constructor(): this;
animVal: MSHTML$SVGTransformList;
baseVal: MSHTML$SVGTransformList
}

declare class MSHTML$SVGCircleElement  {
constructor(): this;
cx: MSHTML$SVGAnimatedLength;
cy: MSHTML$SVGAnimatedLength;
farthestViewportElement: MSHTML$ISVGElement;
focusable: MSHTML$SVGAnimatedEnumeration;
getBBox(): MSHTML$SVGRect;
getCTM(): MSHTML$SVGMatrix;
getScreenCTM(): MSHTML$SVGMatrix;
getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
hasExtension(extension: string): boolean;
nearestViewportElement: MSHTML$ISVGElement;
ownerSVGElement: MSHTML$ISVGSVGElement;
r: MSHTML$SVGAnimatedLength;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
systemLanguage: MSHTML$SVGStringList;
transform: MSHTML$SVGAnimatedTransformList;
viewportElement: MSHTML$ISVGElement;
xmlbase: string
}

declare class MSHTML$SVGClipPathElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
clipPathUnits: MSHTML$SVGAnimatedEnumeration;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
farthestViewportElement: MSHTML$ISVGElement;
focusable: MSHTML$SVGAnimatedEnumeration;
getBBox(): MSHTML$SVGRect;
getCTM(): MSHTML$SVGMatrix;
getScreenCTM(): MSHTML$SVGMatrix;
getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
hasExtension(extension: string): boolean;
nearestViewportElement: MSHTML$ISVGElement;
ownerSVGElement: MSHTML$ISVGSVGElement;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
systemLanguage: MSHTML$SVGStringList;
transform: MSHTML$SVGAnimatedTransformList;
viewportElement: MSHTML$ISVGElement;
xmlbase: string;
xmllang: string;
xmlspace: string
}

declare class MSHTML$SVGDefsElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
farthestViewportElement: MSHTML$ISVGElement;
focusable: MSHTML$SVGAnimatedEnumeration;
getBBox(): MSHTML$SVGRect;
getCTM(): MSHTML$SVGMatrix;
getScreenCTM(): MSHTML$SVGMatrix;
getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
hasExtension(extension: string): boolean;
nearestViewportElement: MSHTML$ISVGElement;
ownerSVGElement: MSHTML$ISVGSVGElement;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
systemLanguage: MSHTML$SVGStringList;
transform: MSHTML$SVGAnimatedTransformList;
viewportElement: MSHTML$ISVGElement;
xmlbase: string;
xmllang: string;
xmlspace: string
}

declare class MSHTML$SVGDescElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
focusable: MSHTML$SVGAnimatedEnumeration;
ownerSVGElement: MSHTML$ISVGSVGElement;
viewportElement: MSHTML$ISVGElement;
xmlbase: string;
xmllang: string;
xmlspace: string
}

declare class MSHTML$SVGElement  {
constructor(): this;
all: any;
children: any;
className: string;
click(): void;
contains(pChild: MSHTML$IHTMLElement): boolean;
document: any;
filters: MSHTML$IHTMLFiltersCollection;
focusable: MSHTML$SVGAnimatedEnumeration;

/**
 * @param lFlags [lFlags=0]
 */
getAttribute(strAttributeName: string, lFlags?: number): any;
id: string;
innerHTML: string;
innerText: string;
insertAdjacentHTML(where: string, html: string): void;
insertAdjacentText(where: string, text: string): void;
isTextEdit: boolean;
lang: string;
language: string;
offsetHeight: number;
offsetLeft: number;
offsetParent: MSHTML$IHTMLElement;
offsetTop: number;
offsetWidth: number;
onafterupdate: any;
onbeforeupdate: any;
onclick: any;
ondataavailable: any;
ondatasetchanged: any;
ondatasetcomplete: any;
ondblclick: any;
ondragstart: any;
onerrorupdate: any;
onfilterchange: any;
onhelp: any;
onkeydown: any;
onkeypress: any;
onkeyup: any;
onmousedown: any;
onmousemove: any;
onmouseout: any;
onmouseover: any;
onmouseup: any;
onrowenter: any;
onrowexit: any;
onselectstart: any;
outerHTML: string;
outerText: string;
ownerSVGElement: MSHTML$ISVGSVGElement;
parentElement: MSHTML$IHTMLElement;
parentTextEdit: MSHTML$IHTMLElement;
recordNumber: any;

/**
 * @param lFlags [lFlags=1]
 */
removeAttribute(strAttributeName: string, lFlags?: number): boolean;
scrollIntoView(varargStart?: any): void;

/**
 * @param lFlags [lFlags=1]
 */
setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;
sourceIndex: number;
style: MSHTML$IHTMLStyle;
tagName: string;
title: string;
toString(): string;
viewportElement: MSHTML$ISVGElement;
xmlbase: string
}

declare class MSHTML$SVGElementInstance  {
constructor(): this;
addEventListener(type: string, listener: any, useCapture: boolean): void;
childNodes: MSHTML$ISVGElementInstanceList;
correspondingElement: MSHTML$ISVGElement;
correspondingUseElement: MSHTML$ISVGUseElement;
dispatchEvent(evt: MSHTML$IDOMEvent): boolean;
firstChild: MSHTML$ISVGElementInstance;
lastChild: MSHTML$ISVGElementInstance;
nextSibling: MSHTML$ISVGElementInstance;
parentNode: MSHTML$ISVGElementInstance;
previousSibling: MSHTML$ISVGElementInstance;
removeEventListener(type: string, listener: any, useCapture: boolean): void
}

declare class MSHTML$SVGElementInstanceList  {
constructor(): this;
item(index: number): MSHTML$ISVGElementInstance;
length: number
}

declare class MSHTML$SVGEllipseElement  {
constructor(): this;
cx: MSHTML$SVGAnimatedLength;
cy: MSHTML$SVGAnimatedLength;
farthestViewportElement: MSHTML$ISVGElement;
focusable: MSHTML$SVGAnimatedEnumeration;
getBBox(): MSHTML$SVGRect;
getCTM(): MSHTML$SVGMatrix;
getScreenCTM(): MSHTML$SVGMatrix;
getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
hasExtension(extension: string): boolean;
nearestViewportElement: MSHTML$ISVGElement;
ownerSVGElement: MSHTML$ISVGSVGElement;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
rx: MSHTML$SVGAnimatedLength;
ry: MSHTML$SVGAnimatedLength;
systemLanguage: MSHTML$SVGStringList;
transform: MSHTML$SVGAnimatedTransformList;
viewportElement: MSHTML$ISVGElement;
xmlbase: string
}

declare class MSHTML$SVGException  {
constructor(): this;
code: number;
message: string
}

declare class MSHTML$SVGGElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
farthestViewportElement: MSHTML$ISVGElement;
focusable: MSHTML$SVGAnimatedEnumeration;
getBBox(): MSHTML$SVGRect;
getCTM(): MSHTML$SVGMatrix;
getScreenCTM(): MSHTML$SVGMatrix;
getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
hasExtension(extension: string): boolean;
nearestViewportElement: MSHTML$ISVGElement;
ownerSVGElement: MSHTML$ISVGSVGElement;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
systemLanguage: MSHTML$SVGStringList;
transform: MSHTML$SVGAnimatedTransformList;
viewportElement: MSHTML$ISVGElement;
xmlbase: string;
xmllang: string;
xmlspace: string
}

declare class MSHTML$SVGGradientElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
focusable: MSHTML$SVGAnimatedEnumeration;
gradientTransform: MSHTML$SVGAnimatedTransformList;
gradientUnits: MSHTML$SVGAnimatedEnumeration;
href: MSHTML$SVGAnimatedString;
ownerSVGElement: MSHTML$ISVGSVGElement;
spreadMethod: MSHTML$SVGAnimatedEnumeration;
viewportElement: MSHTML$ISVGElement;
xmlbase: string
}

declare class MSHTML$SVGImageElement  {
constructor(): this;
farthestViewportElement: MSHTML$ISVGElement;
focusable: MSHTML$SVGAnimatedEnumeration;
getBBox(): MSHTML$SVGRect;
getCTM(): MSHTML$SVGMatrix;
getScreenCTM(): MSHTML$SVGMatrix;
getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
hasExtension(extension: string): boolean;
height: MSHTML$SVGAnimatedLength;
href: MSHTML$SVGAnimatedString;
nearestViewportElement: MSHTML$ISVGElement;
ownerSVGElement: MSHTML$ISVGSVGElement;
preserveAspectRatio: MSHTML$SVGAnimatedPreserveAspectRatio;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
systemLanguage: MSHTML$SVGStringList;
transform: MSHTML$SVGAnimatedTransformList;
viewBox: MSHTML$SVGAnimatedRect;
viewportElement: MSHTML$ISVGElement;
width: MSHTML$SVGAnimatedLength;
x: MSHTML$SVGAnimatedLength;
xmlbase: string;
y: MSHTML$SVGAnimatedLength
}

declare class MSHTML$SVGLength  {
constructor(): this;
convertToSpecifiedUnits(unitType: number): void;
newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;
unitType: number;
value: number;
valueAsString: string;
valueInSpecifiedUnits: number
}

declare class MSHTML$SVGLengthList  {
constructor(): this;
appendItem(newItem: MSHTML$SVGLength): MSHTML$SVGLength;
clear(): void;
getItem(index: number): MSHTML$SVGLength;
initialize(newItem: MSHTML$SVGLength): MSHTML$SVGLength;
insertItemBefore(newItem: MSHTML$SVGLength, index: number): MSHTML$SVGLength;
numberOfItems: number;
removeItem(index: number): MSHTML$SVGLength;
replaceItem(newItem: MSHTML$SVGLength, index: number): MSHTML$SVGLength
}

declare class MSHTML$SVGLinearGradientElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
focusable: MSHTML$SVGAnimatedEnumeration;
gradientTransform: MSHTML$SVGAnimatedTransformList;
gradientUnits: MSHTML$SVGAnimatedEnumeration;
href: MSHTML$SVGAnimatedString;
ownerSVGElement: MSHTML$ISVGSVGElement;
spreadMethod: MSHTML$SVGAnimatedEnumeration;
viewportElement: MSHTML$ISVGElement;
x1: MSHTML$SVGAnimatedLength;
x2: MSHTML$SVGAnimatedLength;
xmlbase: string;
y1: MSHTML$SVGAnimatedLength;
y2: MSHTML$SVGAnimatedLength
}

declare class MSHTML$SVGLineElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
farthestViewportElement: MSHTML$ISVGElement;
focusable: MSHTML$SVGAnimatedEnumeration;
getBBox(): MSHTML$SVGRect;
getCTM(): MSHTML$SVGMatrix;
getScreenCTM(): MSHTML$SVGMatrix;
getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
hasExtension(extension: string): boolean;
nearestViewportElement: MSHTML$ISVGElement;
ownerSVGElement: MSHTML$ISVGSVGElement;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
systemLanguage: MSHTML$SVGStringList;
transform: MSHTML$SVGAnimatedTransformList;
viewportElement: MSHTML$ISVGElement;
x1: MSHTML$SVGAnimatedLength;
x2: MSHTML$SVGAnimatedLength;
xmlbase: string;
xmllang: string;
xmlspace: string;
y1: MSHTML$SVGAnimatedLength;
y2: MSHTML$SVGAnimatedLength
}

declare class MSHTML$SVGMarkerElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
focusable: MSHTML$SVGAnimatedEnumeration;
markerHeight: MSHTML$SVGAnimatedLength;
markerUnits: MSHTML$SVGAnimatedEnumeration;
markerWidth: MSHTML$SVGAnimatedLength;
orientAngle: MSHTML$SVGAnimatedAngle;
orientType: MSHTML$SVGAnimatedEnumeration;
ownerSVGElement: MSHTML$ISVGSVGElement;
preserveAspectRatio: MSHTML$SVGAnimatedPreserveAspectRatio;
refX: MSHTML$SVGAnimatedLength;
refY: MSHTML$SVGAnimatedLength;
setOrientToAngle(pSVGAngle: MSHTML$SVGAngle): void;
setOrientToAuto(): void;
viewBox: MSHTML$SVGAnimatedRect;
viewportElement: MSHTML$ISVGElement;
xmlbase: string;
xmllang: string;
xmlspace: string
}

declare class MSHTML$SVGMaskElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
focusable: MSHTML$SVGAnimatedEnumeration;
hasExtension(extension: string): boolean;
height: MSHTML$SVGAnimatedLength;
maskContentUnits: MSHTML$SVGAnimatedEnumeration;
maskUnits: MSHTML$SVGAnimatedEnumeration;
ownerSVGElement: MSHTML$ISVGSVGElement;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
systemLanguage: MSHTML$SVGStringList;
viewportElement: MSHTML$ISVGElement;
width: MSHTML$SVGAnimatedLength;
x: MSHTML$SVGAnimatedLength;
xmlbase: string;
xmllang: string;
xmlspace: string;
y: MSHTML$SVGAnimatedLength
}

declare class MSHTML$SVGMatrix  {
constructor(): this;
a: number;
b: number;
c: number;
d: number;
e: number;
f: number;
flipX(): MSHTML$SVGMatrix;
flipY(): MSHTML$SVGMatrix;
inverse(): MSHTML$SVGMatrix;
multiply(secondMatrix: MSHTML$SVGMatrix): MSHTML$SVGMatrix;
rotate(angle: number): MSHTML$SVGMatrix;
rotateFromVector(x: number, y: number): MSHTML$SVGMatrix;
scale(scaleFactor: number): MSHTML$SVGMatrix;
scaleNonUniform(scaleFactorX: number, scaleFactorY: number): MSHTML$SVGMatrix;
skewX(angle: number): MSHTML$SVGMatrix;
skewY(angle: number): MSHTML$SVGMatrix;
translate(x: number, y: number): MSHTML$SVGMatrix
}

declare class MSHTML$SVGMetadataElement  {
constructor(): this;
focusable: MSHTML$SVGAnimatedEnumeration;
ownerSVGElement: MSHTML$ISVGSVGElement;
viewportElement: MSHTML$ISVGElement;
xmlbase: string
}

declare class MSHTML$SVGNumber  {
constructor(): this;
value: number
}

declare class MSHTML$SVGNumberList  {
constructor(): this;
appendItem(newItem: MSHTML$SVGNumber): MSHTML$SVGNumber;
clear(): void;
getItem(index: number): MSHTML$SVGNumber;
initialize(newItem: MSHTML$SVGNumber): MSHTML$SVGNumber;
insertItemBefore(newItem: MSHTML$SVGNumber, index: number): MSHTML$SVGNumber;
numberOfItems: number;
removeItem(index: number): MSHTML$SVGNumber;
replaceItem(newItem: MSHTML$SVGNumber, index: number): MSHTML$SVGNumber
}

declare class MSHTML$SVGPathElement  {
constructor(): this;
animatedNormalizedPathSegList: MSHTML$SVGPathSegList;
animatedPathSegList: MSHTML$SVGPathSegList;
createSVGPathSegArcAbs(
x: number,
y: number,
r1: number,
r2: number,
angle: number,
largeArcFlag: boolean,
sweepFlag: boolean): MSHTML$ISVGPathSegArcAbs;
createSVGPathSegArcRel(
x: number,
y: number,
r1: number,
r2: number,
angle: number,
largeArcFlag: boolean,
sweepFlag: boolean): MSHTML$ISVGPathSegArcRel;
createSVGPathSegClosePath(): MSHTML$ISVGPathSegClosePath;
createSVGPathSegCurvetoCubicAbs(
x: number,
y: number,
x1: number,
y1: number,
x2: number,
y2: number): MSHTML$ISVGPathSegCurvetoCubicAbs;
createSVGPathSegCurvetoCubicRel(
x: number,
y: number,
x1: number,
y1: number,
x2: number,
y2: number): MSHTML$ISVGPathSegCurvetoCubicRel;
createSVGPathSegCurvetoCubicSmoothAbs(
x: number,
y: number,
x2: number,
y2: number): MSHTML$ISVGPathSegCurvetoCubicSmoothAbs;
createSVGPathSegCurvetoCubicSmoothRel(
x: number,
y: number,
x2: number,
y2: number): MSHTML$ISVGPathSegCurvetoCubicSmoothRel;
createSVGPathSegCurvetoQuadraticAbs(
x: number,
y: number,
x1: number,
y1: number): MSHTML$ISVGPathSegCurvetoQuadraticAbs;
createSVGPathSegCurvetoQuadraticRel(
x: number,
y: number,
x1: number,
y1: number): MSHTML$ISVGPathSegCurvetoQuadraticRel;
createSVGPathSegCurvetoQuadraticSmoothAbs(x: number, y: number): MSHTML$ISVGPathSegCurvetoQuadraticSmoothAbs;
createSVGPathSegCurvetoQuadraticSmoothRel(x: number, y: number): MSHTML$ISVGPathSegCurvetoQuadraticSmoothRel;
createSVGPathSegLinetoAbs(x: number, y: number): MSHTML$ISVGPathSegLinetoAbs;
createSVGPathSegLinetoHorizontalAbs(x: number): MSHTML$ISVGPathSegLinetoHorizontalAbs;
createSVGPathSegLinetoHorizontalRel(x: number): MSHTML$ISVGPathSegLinetoHorizontalRel;
createSVGPathSegLinetoRel(x: number, y: number): MSHTML$ISVGPathSegLinetoRel;
createSVGPathSegLinetoVerticalAbs(y: number): MSHTML$ISVGPathSegLinetoVerticalAbs;
createSVGPathSegLinetoVerticalRel(y: number): MSHTML$ISVGPathSegLinetoVerticalRel;
createSVGPathSegMovetoAbs(x: number, y: number): MSHTML$ISVGPathSegMovetoAbs;
createSVGPathSegMovetoRel(x: number, y: number): MSHTML$ISVGPathSegMovetoRel;
farthestViewportElement: MSHTML$ISVGElement;
focusable: MSHTML$SVGAnimatedEnumeration;
getBBox(): MSHTML$SVGRect;
getCTM(): MSHTML$SVGMatrix;
getPathSegAtLength(fltdistance: number): number;
getPointAtLength(fltdistance: number): MSHTML$SVGPoint;
getScreenCTM(): MSHTML$SVGMatrix;
getTotalLength(): number;
getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
hasExtension(extension: string): boolean;
nearestViewportElement: MSHTML$ISVGElement;
normalizedPathSegList: MSHTML$SVGPathSegList;
ownerSVGElement: MSHTML$ISVGSVGElement;
pathLength: MSHTML$SVGAnimatedNumber;
pathSegList: MSHTML$SVGPathSegList;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
systemLanguage: MSHTML$SVGStringList;
transform: MSHTML$SVGAnimatedTransformList;
viewportElement: MSHTML$ISVGElement;
xmlbase: string
}

declare class MSHTML$SVGPathSeg  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string
}

declare class MSHTML$SVGPathSegArcAbs  {
constructor(): this;
angle: number;
largeArcFlag: boolean;
pathSegType: number;
pathSegTypeAsLetter: string;
r1: number;
r2: number;
sweepFlag: boolean;
x: number;
y: number
}

declare class MSHTML$SVGPathSegArcRel  {
constructor(): this;
angle: number;
largeArcFlag: boolean;
pathSegType: number;
pathSegTypeAsLetter: string;
r1: number;
r2: number;
sweepFlag: boolean;
x: number;
y: number
}

declare class MSHTML$SVGPathSegClosePath  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string
}

declare class MSHTML$SVGPathSegCurvetoCubicAbs  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string;
x: number;
x1: number;
x2: number;
y: number;
y1: number;
y2: number
}

declare class MSHTML$SVGPathSegCurvetoCubicRel  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string;
x: number;
x1: number;
x2: number;
y: number;
y1: number;
y2: number
}

declare class MSHTML$SVGPathSegCurvetoCubicSmoothAbs  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string;
x: number;
x2: number;
y: number;
y2: number
}

declare class MSHTML$SVGPathSegCurvetoCubicSmoothRel  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string;
x: number;
x2: number;
y: number;
y2: number
}

declare class MSHTML$SVGPathSegCurvetoQuadraticAbs  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string;
x: number;
x1: number;
y: number;
y1: number
}

declare class MSHTML$SVGPathSegCurvetoQuadraticRel  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string;
x: number;
x1: number;
y: number;
y1: number
}

declare class MSHTML$SVGPathSegCurvetoQuadraticSmoothAbs  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string;
x: number;
y: number
}

declare class MSHTML$SVGPathSegCurvetoQuadraticSmoothRel  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string;
x: number;
y: number
}

declare class MSHTML$SVGPathSegLinetoAbs  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string;
x: number;
y: number
}

declare class MSHTML$SVGPathSegLinetoHorizontalAbs  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string;
x: number
}

declare class MSHTML$SVGPathSegLinetoHorizontalRel  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string;
x: number
}

declare class MSHTML$SVGPathSegLinetoRel  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string;
x: number;
y: number
}

declare class MSHTML$SVGPathSegLinetoVerticalAbs  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string;
y: number
}

declare class MSHTML$SVGPathSegLinetoVerticalRel  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string;
y: number
}

declare class MSHTML$SVGPathSegList  {
constructor(): this;
appendItem(newItem: MSHTML$SVGPathSeg): MSHTML$SVGPathSeg;
clear(): void;
getItem(index: number): MSHTML$SVGPathSeg;
initialize(newItem: MSHTML$SVGPathSeg): MSHTML$SVGPathSeg;
insertItemBefore(newItem: MSHTML$SVGPathSeg, index: number): MSHTML$SVGPathSeg;
numberOfItems: number;
removeItem(index: number): MSHTML$SVGPathSeg;
replaceItem(newItem: MSHTML$SVGPathSeg, index: number): MSHTML$SVGPathSeg
}

declare class MSHTML$SVGPathSegMovetoAbs  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string;
x: number;
y: number
}

declare class MSHTML$SVGPathSegMovetoRel  {
constructor(): this;
pathSegType: number;
pathSegTypeAsLetter: string;
x: number;
y: number
}

declare class MSHTML$SVGPatternElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
focusable: MSHTML$SVGAnimatedEnumeration;
hasExtension(extension: string): boolean;
height: MSHTML$SVGAnimatedLength;
href: MSHTML$SVGAnimatedString;
ownerSVGElement: MSHTML$ISVGSVGElement;
patternContentUnits: MSHTML$SVGAnimatedEnumeration;
patternTransform: MSHTML$SVGAnimatedTransformList;
patternUnits: MSHTML$SVGAnimatedEnumeration;
preserveAspectRatio: MSHTML$SVGAnimatedPreserveAspectRatio;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
systemLanguage: MSHTML$SVGStringList;
viewBox: MSHTML$SVGAnimatedRect;
viewportElement: MSHTML$ISVGElement;
width: MSHTML$SVGAnimatedLength;
x: MSHTML$SVGAnimatedLength;
xmlbase: string;
xmllang: string;
xmlspace: string;
y: MSHTML$SVGAnimatedLength
}

declare class MSHTML$SVGPoint  {
constructor(): this;
matrixTransform(pMatrix: MSHTML$SVGMatrix): MSHTML$SVGPoint;
x: number;
y: number
}

declare class MSHTML$SVGPointList  {
constructor(): this;
appendItem(pNewItem: MSHTML$SVGPoint): MSHTML$SVGPoint;
clear(): void;
getItem(index: number): MSHTML$SVGPoint;
initialize(pNewItem: MSHTML$SVGPoint): MSHTML$SVGPoint;
insertItemBefore(pNewItem: MSHTML$SVGPoint, index: number): MSHTML$SVGPoint;
numberOfItems: number;
removeItem(index: number): MSHTML$SVGPoint;
replaceItem(pNewItem: MSHTML$SVGPoint, index: number): MSHTML$SVGPoint
}

declare class MSHTML$SVGPolygonElement  {
constructor(): this;
animatedPoints: MSHTML$SVGPointList;
farthestViewportElement: MSHTML$ISVGElement;
focusable: MSHTML$SVGAnimatedEnumeration;
getBBox(): MSHTML$SVGRect;
getCTM(): MSHTML$SVGMatrix;
getScreenCTM(): MSHTML$SVGMatrix;
getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
hasExtension(extension: string): boolean;
nearestViewportElement: MSHTML$ISVGElement;
ownerSVGElement: MSHTML$ISVGSVGElement;
points: MSHTML$SVGPointList;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
systemLanguage: MSHTML$SVGStringList;
transform: MSHTML$SVGAnimatedTransformList;
viewportElement: MSHTML$ISVGElement;
xmlbase: string
}

declare class MSHTML$SVGPolylineElement  {
constructor(): this;
animatedPoints: MSHTML$SVGPointList;
farthestViewportElement: MSHTML$ISVGElement;
focusable: MSHTML$SVGAnimatedEnumeration;
getBBox(): MSHTML$SVGRect;
getCTM(): MSHTML$SVGMatrix;
getScreenCTM(): MSHTML$SVGMatrix;
getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
hasExtension(extension: string): boolean;
nearestViewportElement: MSHTML$ISVGElement;
ownerSVGElement: MSHTML$ISVGSVGElement;
points: MSHTML$SVGPointList;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
systemLanguage: MSHTML$SVGStringList;
transform: MSHTML$SVGAnimatedTransformList;
viewportElement: MSHTML$ISVGElement;
xmlbase: string
}

declare class MSHTML$SVGPreserveAspectRatio  {
constructor(): this;
align: number;
meetOrSlice: number
}

declare class MSHTML$SVGRadialGradientElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
cx: MSHTML$SVGAnimatedLength;
cy: MSHTML$SVGAnimatedLength;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
focusable: MSHTML$SVGAnimatedEnumeration;
fx: MSHTML$SVGAnimatedLength;
fy: MSHTML$SVGAnimatedLength;
gradientTransform: MSHTML$SVGAnimatedTransformList;
gradientUnits: MSHTML$SVGAnimatedEnumeration;
href: MSHTML$SVGAnimatedString;
ownerSVGElement: MSHTML$ISVGSVGElement;
r: MSHTML$SVGAnimatedLength;
spreadMethod: MSHTML$SVGAnimatedEnumeration;
viewportElement: MSHTML$ISVGElement;
xmlbase: string
}

declare class MSHTML$SVGRect  {
constructor(): this;
height: number;
width: number;
x: number;
y: number
}

declare class MSHTML$SVGRectElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
farthestViewportElement: MSHTML$ISVGElement;
focusable: MSHTML$SVGAnimatedEnumeration;
getBBox(): MSHTML$SVGRect;
getCTM(): MSHTML$SVGMatrix;
getScreenCTM(): MSHTML$SVGMatrix;
getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
hasExtension(extension: string): boolean;
height: MSHTML$SVGAnimatedLength;
nearestViewportElement: MSHTML$ISVGElement;
ownerSVGElement: MSHTML$ISVGSVGElement;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
rx: MSHTML$SVGAnimatedLength;
ry: MSHTML$SVGAnimatedLength;
systemLanguage: MSHTML$SVGStringList;
transform: MSHTML$SVGAnimatedTransformList;
viewportElement: MSHTML$ISVGElement;
width: MSHTML$SVGAnimatedLength;
x: MSHTML$SVGAnimatedLength;
xmlbase: string;
xmllang: string;
xmlspace: string;
y: MSHTML$SVGAnimatedLength
}

declare class MSHTML$SVGScriptElement  {
constructor(): this;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
focusable: MSHTML$SVGAnimatedEnumeration;
href: MSHTML$SVGAnimatedString;
ownerSVGElement: MSHTML$ISVGSVGElement;
type: string;
viewportElement: MSHTML$ISVGElement;
xmlbase: string
}

declare class MSHTML$SVGStopElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
focusable: MSHTML$SVGAnimatedEnumeration;
offset: MSHTML$SVGAnimatedNumber;
ownerSVGElement: MSHTML$ISVGSVGElement;
viewportElement: MSHTML$ISVGElement;
xmlbase: string
}

declare class MSHTML$SVGStringList  {
constructor(): this;
appendItem(newItem: string): string;
clear(): void;
getItem(index: number): string;
initialize(newItem: string): string;
insertItemBefore(newItem: string, index: number): string;
numberOfItems: number;
removeItem(index: number): string;
replaceItem(newItem: string, index: number): string
}

declare class MSHTML$SVGStyleElement  {
constructor(): this;
focusable: MSHTML$SVGAnimatedEnumeration;
media: string;
ownerSVGElement: MSHTML$ISVGSVGElement;
type: string;
viewportElement: MSHTML$ISVGElement;
xmlbase: string;
xmllang: string;
xmlspace: string
}

declare class MSHTML$SVGSVGElement  {
constructor(): this;
animationsPaused(): boolean;
checkEnclosure(element: MSHTML$ISVGElement, rect: MSHTML$SVGRect): boolean;
checkIntersection(element: MSHTML$ISVGElement, rect: MSHTML$SVGRect): boolean;
className: MSHTML$SVGAnimatedString;
contentScriptType: string;
contentStyleType: string;
createSVGAngle(): MSHTML$SVGAngle;
createSVGLength(): MSHTML$SVGLength;
createSVGMatrix(): MSHTML$SVGMatrix;
createSVGNumber(): MSHTML$SVGNumber;
createSVGPoint(): MSHTML$SVGPoint;
createSVGRect(): MSHTML$SVGRect;
createSVGTransform(): MSHTML$SVGTransform;
createSVGTransformFromMatrix(matrix: MSHTML$SVGMatrix): MSHTML$SVGTransform;
currentScale: number;
currentTranslate: MSHTML$SVGPoint;
currentView: MSHTML$ISVGViewSpec;
deselectAll(): void;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
farthestViewportElement: MSHTML$ISVGElement;
focusable: MSHTML$SVGAnimatedEnumeration;
forceRedraw(): void;
getBBox(): MSHTML$SVGRect;
getCTM(): MSHTML$SVGMatrix;
getCurrentTime(): number;
getElementById(elementId: string): MSHTML$IHTMLElement;
getEnclosureList(rect: MSHTML$SVGRect, referenceElement: MSHTML$ISVGElement): any;
getIntersectionList(rect: MSHTML$SVGRect, referenceElement: MSHTML$ISVGElement): any;
getScreenCTM(): MSHTML$SVGMatrix;
getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
hasExtension(extension: string): boolean;
height: MSHTML$SVGAnimatedLength;
nearestViewportElement: MSHTML$ISVGElement;
ownerSVGElement: MSHTML$ISVGSVGElement;
pauseAnimations(): void;
pixelUnitToMillimeterX: number;
pixelUnitToMillimeterY: number;
preserveAspectRatio: MSHTML$SVGAnimatedPreserveAspectRatio;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
screenPixelToMillimeterX: number;
screenPixelToMillimeterY: number;
setCurrentTime(seconds: number): void;
suspendRedraw(maxWaitMilliseconds: number): number;
systemLanguage: MSHTML$SVGStringList;
unpauseAnimations(): void;
unsuspendRedraw(suspendHandeID: number): void;
unsuspendRedrawAll(): void;
useCurrentView: boolean;
viewBox: MSHTML$SVGAnimatedRect;
viewport: MSHTML$SVGRect;
viewportElement: MSHTML$ISVGElement;
width: MSHTML$SVGAnimatedLength;
x: MSHTML$SVGAnimatedLength;
xmlbase: string;
xmllang: string;
xmlspace: string;
y: MSHTML$SVGAnimatedLength;
zoomAndPan: number
}

declare class MSHTML$SVGSwitchElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
farthestViewportElement: MSHTML$ISVGElement;
focusable: MSHTML$SVGAnimatedEnumeration;
getBBox(): MSHTML$SVGRect;
getCTM(): MSHTML$SVGMatrix;
getScreenCTM(): MSHTML$SVGMatrix;
getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
hasExtension(extension: string): boolean;
nearestViewportElement: MSHTML$ISVGElement;
ownerSVGElement: MSHTML$ISVGSVGElement;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
systemLanguage: MSHTML$SVGStringList;
transform: MSHTML$SVGAnimatedTransformList;
viewportElement: MSHTML$ISVGElement;
xmlbase: string;
xmllang: string;
xmlspace: string
}

declare class MSHTML$SVGSymbolElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
focusable: MSHTML$SVGAnimatedEnumeration;
ownerSVGElement: MSHTML$ISVGSVGElement;
preserveAspectRatio: MSHTML$SVGAnimatedPreserveAspectRatio;
viewBox: MSHTML$SVGAnimatedRect;
viewportElement: MSHTML$ISVGElement;
xmlbase: string;
xmllang: string;
xmlspace: string
}

declare class MSHTML$SVGTextContentElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
focusable: MSHTML$SVGAnimatedEnumeration;
getCharNumAtPosition(point: MSHTML$SVGPoint): number;
getComputedTextLength(): number;
getEndPositionOfChar(charnum: number): MSHTML$SVGPoint;
getExtentOfChar(charnum: number): MSHTML$SVGRect;
getNumberOfChars(): number;
getRotationOfChar(charnum: number): number;
getStartPositionOfChar(charnum: number): MSHTML$SVGPoint;
getSubStringLength(charnum: number, nchars: number): number;
hasExtension(extension: string): boolean;
lengthAdjust: MSHTML$SVGAnimatedEnumeration;
ownerSVGElement: MSHTML$ISVGSVGElement;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
selectSubString(charnum: number, nchars: number): void;
systemLanguage: MSHTML$SVGStringList;
textLength: MSHTML$SVGAnimatedLength;
viewportElement: MSHTML$ISVGElement;
xmlbase: string;
xmllang: string;
xmlspace: string
}

declare class MSHTML$SVGTextElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
dx: MSHTML$SVGAnimatedLengthList;
dy: MSHTML$SVGAnimatedLengthList;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
farthestViewportElement: MSHTML$ISVGElement;
focusable: MSHTML$SVGAnimatedEnumeration;
getBBox(): MSHTML$SVGRect;
getCharNumAtPosition(point: MSHTML$SVGPoint): number;
getComputedTextLength(): number;
getCTM(): MSHTML$SVGMatrix;
getEndPositionOfChar(charnum: number): MSHTML$SVGPoint;
getExtentOfChar(charnum: number): MSHTML$SVGRect;
getNumberOfChars(): number;
getRotationOfChar(charnum: number): number;
getScreenCTM(): MSHTML$SVGMatrix;
getStartPositionOfChar(charnum: number): MSHTML$SVGPoint;
getSubStringLength(charnum: number, nchars: number): number;
getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
hasExtension(extension: string): boolean;
lengthAdjust: MSHTML$SVGAnimatedEnumeration;
nearestViewportElement: MSHTML$ISVGElement;
ownerSVGElement: MSHTML$ISVGSVGElement;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
rotate: MSHTML$SVGAnimatedNumberList;
selectSubString(charnum: number, nchars: number): void;
systemLanguage: MSHTML$SVGStringList;
textLength: MSHTML$SVGAnimatedLength;
transform: MSHTML$SVGAnimatedTransformList;
viewportElement: MSHTML$ISVGElement;
x: MSHTML$SVGAnimatedLengthList;
xmlbase: string;
xmllang: string;
xmlspace: string;
y: MSHTML$SVGAnimatedLengthList
}

declare class MSHTML$SVGTextPathElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
focusable: MSHTML$SVGAnimatedEnumeration;
getCharNumAtPosition(point: MSHTML$SVGPoint): number;
getComputedTextLength(): number;
getEndPositionOfChar(charnum: number): MSHTML$SVGPoint;
getExtentOfChar(charnum: number): MSHTML$SVGRect;
getNumberOfChars(): number;
getRotationOfChar(charnum: number): number;
getStartPositionOfChar(charnum: number): MSHTML$SVGPoint;
getSubStringLength(charnum: number, nchars: number): number;
hasExtension(extension: string): boolean;
href: MSHTML$SVGAnimatedString;
lengthAdjust: MSHTML$SVGAnimatedEnumeration;
method: MSHTML$SVGAnimatedEnumeration;
ownerSVGElement: MSHTML$ISVGSVGElement;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
selectSubString(charnum: number, nchars: number): void;
spacing: MSHTML$SVGAnimatedEnumeration;
startOffset: MSHTML$SVGAnimatedLength;
systemLanguage: MSHTML$SVGStringList;
textLength: MSHTML$SVGAnimatedLength;
viewportElement: MSHTML$ISVGElement;
xmlbase: string;
xmllang: string;
xmlspace: string
}

declare class MSHTML$SVGTextPositioningElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
dx: MSHTML$SVGAnimatedLengthList;
dy: MSHTML$SVGAnimatedLengthList;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
focusable: MSHTML$SVGAnimatedEnumeration;
getCharNumAtPosition(point: MSHTML$SVGPoint): number;
getComputedTextLength(): number;
getEndPositionOfChar(charnum: number): MSHTML$SVGPoint;
getExtentOfChar(charnum: number): MSHTML$SVGRect;
getNumberOfChars(): number;
getRotationOfChar(charnum: number): number;
getStartPositionOfChar(charnum: number): MSHTML$SVGPoint;
getSubStringLength(charnum: number, nchars: number): number;
hasExtension(extension: string): boolean;
lengthAdjust: MSHTML$SVGAnimatedEnumeration;
ownerSVGElement: MSHTML$ISVGSVGElement;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
rotate: MSHTML$SVGAnimatedNumberList;
selectSubString(charnum: number, nchars: number): void;
systemLanguage: MSHTML$SVGStringList;
textLength: MSHTML$SVGAnimatedLength;
viewportElement: MSHTML$ISVGElement;
x: MSHTML$SVGAnimatedLengthList;
xmlbase: string;
xmllang: string;
xmlspace: string;
y: MSHTML$SVGAnimatedLengthList
}

declare class MSHTML$SVGTitleElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
focusable: MSHTML$SVGAnimatedEnumeration;
ownerSVGElement: MSHTML$ISVGSVGElement;
viewportElement: MSHTML$ISVGElement;
xmlbase: string;
xmllang: string;
xmlspace: string
}

declare class MSHTML$SVGTransform  {
constructor(): this;
angle: number;
matrix: MSHTML$SVGMatrix;
setMatrix(matrix: MSHTML$SVGMatrix): void;
setRotate(angle: number, cx: number, cy: number): void;
setScale(sx: number, sy: number): void;
setSkewX(angle: number): void;
setSkewY(angle: number): void;
setTranslate(tx: number, ty: number): void;
type: number
}

declare class MSHTML$SVGTransformList  {
constructor(): this;
appendItem(newItem: MSHTML$SVGTransform): MSHTML$SVGTransform;
clear(): void;
consolidate(): MSHTML$SVGTransform;
createSVGTransformFromMatrix(newItem: MSHTML$SVGMatrix): MSHTML$SVGTransform;
getItem(index: number): MSHTML$SVGTransform;
initialize(newItem: MSHTML$SVGTransform): MSHTML$SVGTransform;
insertItemBefore(newItem: MSHTML$SVGTransform, index: number): MSHTML$SVGTransform;
numberOfItems: number;
removeItem(index: number): MSHTML$SVGTransform;
replaceItem(newItem: MSHTML$SVGTransform, index: number): MSHTML$SVGTransform
}

declare class MSHTML$SVGTSpanElement  {
constructor(): this;
className: MSHTML$SVGAnimatedString;
dx: MSHTML$SVGAnimatedLengthList;
dy: MSHTML$SVGAnimatedLengthList;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
focusable: MSHTML$SVGAnimatedEnumeration;
getCharNumAtPosition(point: MSHTML$SVGPoint): number;
getComputedTextLength(): number;
getEndPositionOfChar(charnum: number): MSHTML$SVGPoint;
getExtentOfChar(charnum: number): MSHTML$SVGRect;
getNumberOfChars(): number;
getRotationOfChar(charnum: number): number;
getStartPositionOfChar(charnum: number): MSHTML$SVGPoint;
getSubStringLength(charnum: number, nchars: number): number;
hasExtension(extension: string): boolean;
lengthAdjust: MSHTML$SVGAnimatedEnumeration;
ownerSVGElement: MSHTML$ISVGSVGElement;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
rotate: MSHTML$SVGAnimatedNumberList;
selectSubString(charnum: number, nchars: number): void;
systemLanguage: MSHTML$SVGStringList;
textLength: MSHTML$SVGAnimatedLength;
viewportElement: MSHTML$ISVGElement;
x: MSHTML$SVGAnimatedLengthList;
xmlbase: string;
xmllang: string;
xmlspace: string;
y: MSHTML$SVGAnimatedLengthList
}

declare class MSHTML$SVGUseElement  {
constructor(): this;
animatedInstanceRoot: MSHTML$ISVGElementInstance;
farthestViewportElement: MSHTML$ISVGElement;
focusable: MSHTML$SVGAnimatedEnumeration;
getBBox(): MSHTML$SVGRect;
getCTM(): MSHTML$SVGMatrix;
getScreenCTM(): MSHTML$SVGMatrix;
getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
hasExtension(extension: string): boolean;
height: MSHTML$SVGAnimatedLength;
href: MSHTML$SVGAnimatedString;
instanceRoot: MSHTML$ISVGElementInstance;
nearestViewportElement: MSHTML$ISVGElement;
ownerSVGElement: MSHTML$ISVGSVGElement;
requiredExtensions: MSHTML$SVGStringList;
requiredFeatures: MSHTML$SVGStringList;
systemLanguage: MSHTML$SVGStringList;
transform: MSHTML$SVGAnimatedTransformList;
viewportElement: MSHTML$ISVGElement;
width: MSHTML$SVGAnimatedLength;
x: MSHTML$SVGAnimatedLength;
xmlbase: string;
y: MSHTML$SVGAnimatedLength
}

declare class MSHTML$SVGViewElement  {
constructor(): this;
externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
focusable: MSHTML$SVGAnimatedEnumeration;
ownerSVGElement: MSHTML$ISVGSVGElement;
preserveAspectRatio: MSHTML$SVGAnimatedPreserveAspectRatio;
viewBox: MSHTML$SVGAnimatedRect;
viewportElement: MSHTML$ISVGElement;
viewTarget: MSHTML$SVGStringList;
xmlbase: string;
zoomAndPan: number
}

declare class MSHTML$SVGZoomEvent  {
constructor(): this;
bubbles: boolean;
cancelable: boolean;
cancelBubble: boolean;
currentTarget: MSHTML$IEventTarget;
defaultPrevented: boolean;
detail: number;
eventPhase: number;
initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
initUIEvent(
eventType: string,
canBubble: boolean,
cancelable: boolean,
view: MSHTML$IHTMLWindow2,
detail: number): void;
isTrusted: boolean;
newScale: number;
newTranslate: MSHTML$SVGPoint;
preventDefault(): void;
previousScale: number;
previousTranslate: MSHTML$SVGPoint;
srcElement: MSHTML$IHTMLElement;
stopImmediatePropagation(): void;
stopPropagation(): void;
target: MSHTML$IEventTarget;
timeStamp: number;
type: string;
view: MSHTML$IHTMLWindow2;
zoomRectScreen: MSHTML$SVGRect
}

declare class MSHTML$ThreadDialogProcParam  {
constructor(): this;
document: any;
moniker: any;
optionString: any;
parameters: any
}

declare class MSHTML$TreeWalker  {
constructor(): this;
currentNode: any;
expandEntityReferences: boolean;
filter: any;
firstChild(): any;
lastChild(): any;
nextNode(): any;
nextSibling(): any;
parentNode(): any;
previousNode(): any;
previousSibling(): any;
root: any;
whatToShow: number
}

declare class MSHTML$WebGeocoordinates  {
constructor(): this;
accuracy: number;
altitude: any;
altitudeAccuracy: any;
heading: any;
latitude: number;
longitude: number;
speed: any
}

declare class MSHTML$WebGeolocation  {
constructor(): this;
clearWatch(watchId: number): void;
getCurrentPosition(successCallback: any, errorCallback?: any, options?: any): void;
watchPosition(successCallback: any, errorCallback?: any, options?: any): number
}

declare class MSHTML$WebGeoposition  {
constructor(): this;
coords: MSHTML$IWebGeocoordinates;
timeStamp: number
}

declare class MSHTML$WebGeopositionError  {
constructor(): this;
code: number;
message: string
}

declare class MSHTML$XDomainRequest  {
constructor(): this;
constructor: any
}

declare interface MSHTML$XDomainRequestFactory {
create(): MSHTML$IHTMLXDomainRequest,
(): MSHTML$IHTMLXDomainRequest
} 

declare class MSHTML$XMLHttpRequestEventTarget  {
constructor(): this;
addEventListener(type: string, listener: any, useCapture: boolean): void;
dispatchEvent(evt: MSHTML$IDOMEvent): boolean;
removeEventListener(type: string, listener: any, useCapture: boolean): void
}

declare class MSHTML$XMLSerializer  {
constructor(): this;
serializeToString(pNode: MSHTML$IHTMLDOMNode): string
}
	declare interface ActiveXObject {
on(
obj: MSHTML$MSHTML$HTMLNamespace,
event: "onreadystatechange",
argNames: ["pEvtObj"],
handler: (parameter: {
+pEvtObj: MSHTML$MSHTML$IHTMLEventObj
}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLWindow2,
event: "onerror",
argNames: ["description", "url", "line"],
handler: (parameter: {
+description: string,
+url: string,
+line: number
}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLWindowProxy,
event: "onerror",
argNames: ["description", "url", "line"],
handler: (parameter: {
+description: string,
+url: string,
+line: number
}) => void): void,
on(
obj: MSHTML$MSHTML$Scriptlet,
event: "onscriptletevent",
argNames: ["name", "eventData"],
handler: (parameter: {
+name: string,
+eventData: any
}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLAnchorElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLAreaElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLAudioElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLBaseElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLBaseFontElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLBGsound,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLBlockElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLBody,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselect"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLBRElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLButtonElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLCanvasElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLCommentElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLDDElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLDivElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLDivPosition,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselect"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLDListElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLDocument,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforeupdate"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondragstart"
| "onerrorupdate"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onmousedown"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onpropertychange"
| "onreadystatechange"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onselectionchange"
| "onselectstart"
| "onstop",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLDTElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLEmbed,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLFieldSetElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselect"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLFontElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLFormElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onreset"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart"
| "onsubmit",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLFrameBase,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLFrameElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLFrameSetSite,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLGenericElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLHeadElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLHeaderElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLHRElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLHtmlElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLIFrame,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLImg,
event: "onabort"
| "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerror"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onload"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLInputButtonElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLInputElement,
event: "onabort"
| "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerror"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onload"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselect"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLInputFileElement,
event: "onabort"
| "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerror"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onload"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselect"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$htmlInputImage,
event: "onabort"
| "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerror"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onload"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLInputTextElement,
event: "onabort"
| "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerror"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onload"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselect"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLIsIndexElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLLabelElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLLegendElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselect"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLLIElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLLinkElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerror"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onload"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLListElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLMapElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLMarqueeElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "onbounce"
| "oncellchange"
| "onchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfinish"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselect"
| "onselectstart"
| "onstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLMediaElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLMetaElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLNextIdElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLNoShowElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLObjectElement,
event: "onafterupdate"
| "onbeforeupdate"
| "oncellchange"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "onerror"
| "onerrorupdate"
| "onreadystatechange"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLOListElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLOptionButtonElement,
event: "onabort"
| "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerror"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onload"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselect"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLOptionElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLParaElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLParamElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLPhraseElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLProgressElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLRichtextElement,
event: "onabort"
| "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerror"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onload"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselect"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLScriptElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerror"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLSelectElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLSemanticElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLSourceElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLSpanElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLSpanFlow,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselect"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLStyleElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerror"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onload"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLTable,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLTableCaption,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselect"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLTableCell,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselect"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLTableCol,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLTableRow,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLTableSection,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLTextAreaElement,
event: "onabort"
| "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerror"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onload"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselect"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLTextElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLTitleElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLUListElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLUnknownElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLVideoElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLWindow2,
event: "onafterprint"
| "onbeforeprint"
| "onbeforeunload"
| "onblur"
| "onfocus"
| "onhelp"
| "onload"
| "onresize"
| "onscroll"
| "onunload",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLWindowProxy,
event: "onafterprint"
| "onbeforeprint"
| "onbeforeunload"
| "onblur"
| "onfocus"
| "onhelp"
| "onload"
| "onresize"
| "onscroll"
| "onunload",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLWndOptionElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLWndSelectElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$HTMLXMLHttpRequest,
event: "onreadystatechange" | "ontimeout",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$OldHTMLDocument,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforeupdate"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondragstart"
| "onerrorupdate"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onmousedown"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onpropertychange"
| "onreadystatechange"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onselectionchange"
| "onselectstart"
| "onstop",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$OldHTMLFormElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onreset"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart"
| "onsubmit",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$Scriptlet,
event: "onclick"
| "ondblclick"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onmousedown"
| "onmousemove"
| "onmouseup"
| "onreadystatechange",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGAElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGCircleElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGClipPathElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGDefsElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGEllipseElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGGElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGGradientElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGImageElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGLineElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGMarkerElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGMaskElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGPathElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGPatternElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGPolygonElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGPolylineElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGRectElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGScriptElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGStopElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGSVGElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGSymbolElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGTextElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGTextPathElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGTSpanElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGUseElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void,
on(
obj: MSHTML$MSHTML$SVGViewElement,
event: "onactivate"
| "onafterupdate"
| "onbeforeactivate"
| "onbeforecopy"
| "onbeforecut"
| "onbeforedeactivate"
| "onbeforeeditfocus"
| "onbeforepaste"
| "onbeforeupdate"
| "onblur"
| "oncellchange"
| "onclick"
| "oncontextmenu"
| "oncontrolselect"
| "oncopy"
| "oncut"
| "ondataavailable"
| "ondatasetchanged"
| "ondatasetcomplete"
| "ondblclick"
| "ondeactivate"
| "ondrag"
| "ondragend"
| "ondragenter"
| "ondragleave"
| "ondragover"
| "ondragstart"
| "ondrop"
| "onerrorupdate"
| "onfilterchange"
| "onfocus"
| "onfocusin"
| "onfocusout"
| "onhelp"
| "onkeydown"
| "onkeypress"
| "onkeyup"
| "onlayoutcomplete"
| "onlosecapture"
| "onmousedown"
| "onmouseenter"
| "onmouseleave"
| "onmousemove"
| "onmouseout"
| "onmouseover"
| "onmouseup"
| "onmousewheel"
| "onmove"
| "onmoveend"
| "onmovestart"
| "onpage"
| "onpaste"
| "onpropertychange"
| "onreadystatechange"
| "onresize"
| "onresizeend"
| "onresizestart"
| "onrowenter"
| "onrowexit"
| "onrowsdelete"
| "onrowsinserted"
| "onscroll"
| "onselectstart",
handler: (parameter: {}) => void): void
} 
	declare interface ActiveXObjectNameMap {
htmlfile: MSHTML$MSHTML$HTMLDocument,
"ScriptBridge.ScriptBridge": MSHTML$MSHTML$Scriptlet,
"TemplatePrinter.TemplatePrinter": MSHTML$MSHTML$CTemplatePrinter
} 
    }
