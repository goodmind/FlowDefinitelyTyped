declare module "activex-mshtml" {
  declare var npm$namespace$MSHTML: {
    _BEHAVIOR_EVENT: typeof MSHTML$_BEHAVIOR_EVENT,
    _BEHAVIOR_EVENT_FLAGS: typeof MSHTML$_BEHAVIOR_EVENT_FLAGS,
    _BEHAVIOR_LAYOUT_INFO: typeof MSHTML$_BEHAVIOR_LAYOUT_INFO,
    _BEHAVIOR_LAYOUT_MODE: typeof MSHTML$_BEHAVIOR_LAYOUT_MODE,
    _BEHAVIOR_RELATION: typeof MSHTML$_BEHAVIOR_RELATION,
    _BEHAVIOR_RENDER_INFO: typeof MSHTML$_BEHAVIOR_RENDER_INFO,
    _bodyScroll: typeof MSHTML$_bodyScroll,
    _BoolValue: typeof MSHTML$_BoolValue,
    _CARET_DIRECTION: typeof MSHTML$_CARET_DIRECTION,
    _COORD_SYSTEM: typeof MSHTML$_COORD_SYSTEM,
    _DEV_CONSOLE_MESSAGE_LEVEL: typeof MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL,
    _DISPLAY_BREAK: typeof MSHTML$_DISPLAY_BREAK,
    _DISPLAY_GRAVITY: typeof MSHTML$_DISPLAY_GRAVITY,
    _DISPLAY_MOVEUNIT: typeof MSHTML$_DISPLAY_MOVEUNIT,
    _DOM_EVENT_PHASE: typeof MSHTML$_DOM_EVENT_PHASE,
    _DomConstructor: typeof MSHTML$_DomConstructor,
    _ELEMENT_ADJACENCY: typeof MSHTML$_ELEMENT_ADJACENCY,
    _ELEMENT_CORNER: typeof MSHTML$_ELEMENT_CORNER,
    _ELEMENT_TAG_ID: typeof MSHTML$_ELEMENT_TAG_ID,
    _ELEMENTDESCRIPTOR_FLAGS: typeof MSHTML$_ELEMENTDESCRIPTOR_FLAGS,
    _ELEMENTNAMESPACE_FLAGS: typeof MSHTML$_ELEMENTNAMESPACE_FLAGS,
    _FINDTEXT_FLAGS: typeof MSHTML$_FINDTEXT_FLAGS,
    _frameScrolling: typeof MSHTML$_frameScrolling,
    _HT_OPTIONS: typeof MSHTML$_HT_OPTIONS,
    _HT_RESULTS: typeof MSHTML$_HT_RESULTS,
    _HTML_PAINT_DRAW_FLAGS: typeof MSHTML$_HTML_PAINT_DRAW_FLAGS,
    _HTML_PAINT_DRAW_INFO_FLAGS: typeof MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS,
    _HTML_PAINT_EVENT_FLAGS: typeof MSHTML$_HTML_PAINT_EVENT_FLAGS,
    _HTML_PAINT_ZORDER: typeof MSHTML$_HTML_PAINT_ZORDER,
    _HTML_PAINTER: typeof MSHTML$_HTML_PAINTER,
    _htmlAdjacency: typeof MSHTML$_htmlAdjacency,
    _HTMLAppFlag: typeof MSHTML$_HTMLAppFlag,
    _htmlApplyLocation: typeof MSHTML$_htmlApplyLocation,
    _htmlBlockAlign: typeof MSHTML$_htmlBlockAlign,
    _HTMLBorder: typeof MSHTML$_HTMLBorder,
    _HTMLBorderStyle: typeof MSHTML$_HTMLBorderStyle,
    _htmlCaptionAlign: typeof MSHTML$_htmlCaptionAlign,
    _HTMLCaptionFlag: typeof MSHTML$_HTMLCaptionFlag,
    _htmlCaptionVAlign: typeof MSHTML$_htmlCaptionVAlign,
    _htmlCellAlign: typeof MSHTML$_htmlCellAlign,
    _htmlCellVAlign: typeof MSHTML$_htmlCellVAlign,
    _htmlClear: typeof MSHTML$_htmlClear,
    _htmlCompatMode: typeof MSHTML$_htmlCompatMode,
    _htmlComponent: typeof MSHTML$_htmlComponent,
    _htmlControlAlign: typeof MSHTML$_htmlControlAlign,
    _htmlDesignMode: typeof MSHTML$_htmlDesignMode,
    _htmlDir: typeof MSHTML$_htmlDir,
    _htmlDirection: typeof MSHTML$_htmlDirection,
    _HTMLDlgBorder: typeof MSHTML$_HTMLDlgBorder,
    _HTMLDlgCenter: typeof MSHTML$_HTMLDlgCenter,
    _HTMLDlgEdge: typeof MSHTML$_HTMLDlgEdge,
    _HTMLDlgFlag: typeof MSHTML$_HTMLDlgFlag,
    _htmlDraggable: typeof MSHTML$_htmlDraggable,
    _htmlDropEffect: typeof MSHTML$_htmlDropEffect,
    _htmlEditable: typeof MSHTML$_htmlEditable,
    _htmlEffectAllowed: typeof MSHTML$_htmlEffectAllowed,
    _htmlEncoding: typeof MSHTML$_htmlEncoding,
    _htmlEndPoints: typeof MSHTML$_htmlEndPoints,
    _htmlFrame: typeof MSHTML$_htmlFrame,
    _htmlGlyphMode: typeof MSHTML$_htmlGlyphMode,
    _htmlInput: typeof MSHTML$_htmlInput,
    _htmlListType: typeof MSHTML$_htmlListType,
    _htmlLoop: typeof MSHTML$_htmlLoop,
    _htmlMarqueeBehavior: typeof MSHTML$_htmlMarqueeBehavior,
    _htmlMarqueeDirection: typeof MSHTML$_htmlMarqueeDirection,
    _HTMLMaximizeFlag: typeof MSHTML$_HTMLMaximizeFlag,
    _htmlMediaErr: typeof MSHTML$_htmlMediaErr,
    _htmlMediaNetworkState: typeof MSHTML$_htmlMediaNetworkState,
    _htmlMediaReadyState: typeof MSHTML$_htmlMediaReadyState,
    _htmlMethod: typeof MSHTML$_htmlMethod,
    _HTMLMinimizeFlag: typeof MSHTML$_HTMLMinimizeFlag,
    _htmlPersistState: typeof MSHTML$_htmlPersistState,
    _htmlReadyState: typeof MSHTML$_htmlReadyState,
    _htmlRules: typeof MSHTML$_htmlRules,
    _htmlSelectExFlag: typeof MSHTML$_htmlSelectExFlag,
    _htmlSelection: typeof MSHTML$_htmlSelection,
    _htmlSelectType: typeof MSHTML$_htmlSelectType,
    _htmlSpellCheck: typeof MSHTML$_htmlSpellCheck,
    _htmlStart: typeof MSHTML$_htmlStart,
    _HTMLSysMenuFlag: typeof MSHTML$_HTMLSysMenuFlag,
    _htmlTabIndex: typeof MSHTML$_htmlTabIndex,
    _htmlUnit: typeof MSHTML$_htmlUnit,
    _HTMLWindowState: typeof MSHTML$_HTMLWindowState,
    _htmlWrap: typeof MSHTML$_htmlWrap,
    _htmlZOrder: typeof MSHTML$_htmlZOrder,
    _lengthAdjust: typeof MSHTML$_lengthAdjust,
    _LINE_DIRECTION: typeof MSHTML$_LINE_DIRECTION,
    _MARKUP_CONTEXT_TYPE: typeof MSHTML$_MARKUP_CONTEXT_TYPE,
    _mediaType: typeof MSHTML$_mediaType,
    _MOVEUNIT_ACTION: typeof MSHTML$_MOVEUNIT_ACTION,
    _PARSE_FLAGS: typeof MSHTML$_PARSE_FLAGS,
    _POINTER_GRAVITY: typeof MSHTML$_POINTER_GRAVITY,
    _sandboxAllow: typeof MSHTML$_sandboxAllow,
    _SAVE_SEGMENTS_FLAGS: typeof MSHTML$_SAVE_SEGMENTS_FLAGS,
    _SCRIPT_TIMER_TYPE: typeof MSHTML$_SCRIPT_TIMER_TYPE,
    _SECUREURLHOSTVALIDATE_FLAGS: typeof MSHTML$_SECUREURLHOSTVALIDATE_FLAGS,
    _SELECTION_TYPE: typeof MSHTML$_SELECTION_TYPE,
    _styleAccelerator: typeof MSHTML$_styleAccelerator,
    _styleAlignContent: typeof MSHTML$_styleAlignContent,
    _styleAlignItems: typeof MSHTML$_styleAlignItems,
    _styleAlignmentBaseline: typeof MSHTML$_styleAlignmentBaseline,
    _styleAlignSelf: typeof MSHTML$_styleAlignSelf,
    _styleAttrType: typeof MSHTML$_styleAttrType,
    _styleAuto: typeof MSHTML$_styleAuto,
    _styleBackfaceVisibility: typeof MSHTML$_styleBackfaceVisibility,
    _styleBackgroundAttachment: typeof MSHTML$_styleBackgroundAttachment,
    _styleBackgroundAttachment3: typeof MSHTML$_styleBackgroundAttachment3,
    _styleBackgroundClip: typeof MSHTML$_styleBackgroundClip,
    _styleBackgroundOrigin: typeof MSHTML$_styleBackgroundOrigin,
    _styleBackgroundRepeat: typeof MSHTML$_styleBackgroundRepeat,
    _styleBaselineShift: typeof MSHTML$_styleBaselineShift,
    _styleBidi: typeof MSHTML$_styleBidi,
    _styleBlockProgression: typeof MSHTML$_styleBlockProgression,
    _styleBool: typeof MSHTML$_styleBool,
    _styleBorderCollapse: typeof MSHTML$_styleBorderCollapse,
    _styleBorderImageRepeat: typeof MSHTML$_styleBorderImageRepeat,
    _styleBorderImageSliceFill: typeof MSHTML$_styleBorderImageSliceFill,
    _styleBorderStyle: typeof MSHTML$_styleBorderStyle,
    _styleBorderWidth: typeof MSHTML$_styleBorderWidth,
    _styleBoxSizing: typeof MSHTML$_styleBoxSizing,
    _styleBreak: typeof MSHTML$_styleBreak,
    _styleBreakInside: typeof MSHTML$_styleBreakInside,
    _styleCaptionSide: typeof MSHTML$_styleCaptionSide,
    _styleClipRule: typeof MSHTML$_styleClipRule,
    _styleColorInterpolationFilters: typeof MSHTML$_styleColorInterpolationFilters,
    _styleColumnFill: typeof MSHTML$_styleColumnFill,
    _styleColumnSpan: typeof MSHTML$_styleColumnSpan,
    _styleCursor: typeof MSHTML$_styleCursor,
    _styleDataRepeat: typeof MSHTML$_styleDataRepeat,
    _styleDefaultTextSelection: typeof MSHTML$_styleDefaultTextSelection,
    _styleDir: typeof MSHTML$_styleDir,
    _styleDisplay: typeof MSHTML$_styleDisplay,
    _styleDominantBaseline: typeof MSHTML$_styleDominantBaseline,
    _styleEmptyCells: typeof MSHTML$_styleEmptyCells,
    _styleEnableBackground: typeof MSHTML$_styleEnableBackground,
    _styleFillRule: typeof MSHTML$_styleFillRule,
    _styleFlex: typeof MSHTML$_styleFlex,
    _styleFlexBasis: typeof MSHTML$_styleFlexBasis,
    _styleFlexDirection: typeof MSHTML$_styleFlexDirection,
    _styleFlexWrap: typeof MSHTML$_styleFlexWrap,
    _styleFontSize: typeof MSHTML$_styleFontSize,
    _styleFontStretch: typeof MSHTML$_styleFontStretch,
    _styleFontStyle: typeof MSHTML$_styleFontStyle,
    _styleFontVariant: typeof MSHTML$_styleFontVariant,
    _styleFontWeight: typeof MSHTML$_styleFontWeight,
    _styleGridColumn: typeof MSHTML$_styleGridColumn,
    _styleGridColumnAlign: typeof MSHTML$_styleGridColumnAlign,
    _styleGridColumnSpan: typeof MSHTML$_styleGridColumnSpan,
    _styleGridRow: typeof MSHTML$_styleGridRow,
    _styleGridRowAlign: typeof MSHTML$_styleGridRowAlign,
    _styleGridRowSpan: typeof MSHTML$_styleGridRowSpan,
    _styleHyphenateLimitLines: typeof MSHTML$_styleHyphenateLimitLines,
    _styleHyphens: typeof MSHTML$_styleHyphens,
    _styleImeMode: typeof MSHTML$_styleImeMode,
    _styleInitialColor: typeof MSHTML$_styleInitialColor,
    _styleInitialString: typeof MSHTML$_styleInitialString,
    _styleInterpolation: typeof MSHTML$_styleInterpolation,
    _styleJustifyContent: typeof MSHTML$_styleJustifyContent,
    _styleLayoutFlow: typeof MSHTML$_styleLayoutFlow,
    _styleLayoutGridChar: typeof MSHTML$_styleLayoutGridChar,
    _styleLayoutGridLine: typeof MSHTML$_styleLayoutGridLine,
    _styleLayoutGridMode: typeof MSHTML$_styleLayoutGridMode,
    _styleLayoutGridType: typeof MSHTML$_styleLayoutGridType,
    _styleLineBreak: typeof MSHTML$_styleLineBreak,
    _styleListStylePosition: typeof MSHTML$_styleListStylePosition,
    _styleListStyleType: typeof MSHTML$_styleListStyleType,
    _styleMsAnimationDirection: typeof MSHTML$_styleMsAnimationDirection,
    _styleMsAnimationFillMode: typeof MSHTML$_styleMsAnimationFillMode,
    _styleMsAnimationPlayState: typeof MSHTML$_styleMsAnimationPlayState,
    _styleMsContentZoomChaining: typeof MSHTML$_styleMsContentZoomChaining,
    _styleMsContentZooming: typeof MSHTML$_styleMsContentZooming,
    _styleMsContentZoomSnapType: typeof MSHTML$_styleMsContentZoomSnapType,
    _styleMsFlexAlign: typeof MSHTML$_styleMsFlexAlign,
    _styleMsFlexItemAlign: typeof MSHTML$_styleMsFlexItemAlign,
    _styleMsFlexLinePack: typeof MSHTML$_styleMsFlexLinePack,
    _styleMsFlexPack: typeof MSHTML$_styleMsFlexPack,
    _styleMsHighContrastAdjust: typeof MSHTML$_styleMsHighContrastAdjust,
    _styleMsImeAlign: typeof MSHTML$_styleMsImeAlign,
    _styleMsOverflowStyle: typeof MSHTML$_styleMsOverflowStyle,
    _styleMsScrollChaining: typeof MSHTML$_styleMsScrollChaining,
    _styleMsScrollRails: typeof MSHTML$_styleMsScrollRails,
    _styleMsScrollSnapType: typeof MSHTML$_styleMsScrollSnapType,
    _styleMsScrollTranslation: typeof MSHTML$_styleMsScrollTranslation,
    _styleMsTextCombineHorizontal: typeof MSHTML$_styleMsTextCombineHorizontal,
    _styleMsTouchAction: typeof MSHTML$_styleMsTouchAction,
    _styleMsTouchSelect: typeof MSHTML$_styleMsTouchSelect,
    _styleMsUserSelect: typeof MSHTML$_styleMsUserSelect,
    _styleNone: typeof MSHTML$_styleNone,
    _styleNormal: typeof MSHTML$_styleNormal,
    _styleOutlineStyle: typeof MSHTML$_styleOutlineStyle,
    _styleOverflow: typeof MSHTML$_styleOverflow,
    _stylePageBreak: typeof MSHTML$_stylePageBreak,
    _stylePageBreakInside: typeof MSHTML$_stylePageBreakInside,
    _stylePerspectiveOriginX: typeof MSHTML$_stylePerspectiveOriginX,
    _stylePerspectiveOriginY: typeof MSHTML$_stylePerspectiveOriginY,
    _stylePointerEvents: typeof MSHTML$_stylePointerEvents,
    _stylePosition: typeof MSHTML$_stylePosition,
    _styleRubyAlign: typeof MSHTML$_styleRubyAlign,
    _styleRubyOverhang: typeof MSHTML$_styleRubyOverhang,
    _styleRubyPosition: typeof MSHTML$_styleRubyPosition,
    _styleStrokeLinecap: typeof MSHTML$_styleStrokeLinecap,
    _styleStrokeLinejoin: typeof MSHTML$_styleStrokeLinejoin,
    _styleStyleFloat: typeof MSHTML$_styleStyleFloat,
    _styleTableLayout: typeof MSHTML$_styleTableLayout,
    _styleTextAlignLast: typeof MSHTML$_styleTextAlignLast,
    _styleTextAnchor: typeof MSHTML$_styleTextAnchor,
    _styleTextDecoration: typeof MSHTML$_styleTextDecoration,
    _styleTextEffect: typeof MSHTML$_styleTextEffect,
    _styleTextJustify: typeof MSHTML$_styleTextJustify,
    _styleTextJustifyTrim: typeof MSHTML$_styleTextJustifyTrim,
    _styleTextLineThroughStyle: typeof MSHTML$_styleTextLineThroughStyle,
    _styleTextOverflow: typeof MSHTML$_styleTextOverflow,
    _styleTextSizeAdjust: typeof MSHTML$_styleTextSizeAdjust,
    _styleTextTransform: typeof MSHTML$_styleTextTransform,
    _styleTextUnderlinePosition: typeof MSHTML$_styleTextUnderlinePosition,
    _styleTextUnderlineStyle: typeof MSHTML$_styleTextUnderlineStyle,
    _styleTransformOriginX: typeof MSHTML$_styleTransformOriginX,
    _styleTransformOriginY: typeof MSHTML$_styleTransformOriginY,
    _styleTransformStyle: typeof MSHTML$_styleTransformStyle,
    _styleUserZoom: typeof MSHTML$_styleUserZoom,
    _styleVerticalAlign: typeof MSHTML$_styleVerticalAlign,
    _styleViewportSize: typeof MSHTML$_styleViewportSize,
    _styleVisibility: typeof MSHTML$_styleVisibility,
    _styleWebkitAppearance: typeof MSHTML$_styleWebkitAppearance,
    _styleWebkitBoxDirection: typeof MSHTML$_styleWebkitBoxDirection,
    _styleWebkitBoxOrient: typeof MSHTML$_styleWebkitBoxOrient,
    _styleWebkitBoxPack: typeof MSHTML$_styleWebkitBoxPack,
    _styleWhiteSpace: typeof MSHTML$_styleWhiteSpace,
    _styleWidowsOrphans: typeof MSHTML$_styleWidowsOrphans,
    _styleWordBreak: typeof MSHTML$_styleWordBreak,
    _styleWordWrap: typeof MSHTML$_styleWordWrap,
    _styleWrapFlow: typeof MSHTML$_styleWrapFlow,
    _styleWrapThrough: typeof MSHTML$_styleWrapThrough,
    _styleWritingMode: typeof MSHTML$_styleWritingMode,
    _styleZIndex: typeof MSHTML$_styleZIndex,
    _svgAngleType: typeof MSHTML$_svgAngleType,
    _svgChannel: typeof MSHTML$_svgChannel,
    _svgEdgemode: typeof MSHTML$_svgEdgemode,
    _svgExternalResourcesRequired: typeof MSHTML$_svgExternalResourcesRequired,
    _svgFeblendMode: typeof MSHTML$_svgFeblendMode,
    _svgFecolormatrixType: typeof MSHTML$_svgFecolormatrixType,
    _svgFecomponenttransferType: typeof MSHTML$_svgFecomponenttransferType,
    _svgFecompositeOperator: typeof MSHTML$_svgFecompositeOperator,
    _svgFocusable: typeof MSHTML$_svgFocusable,
    _svgLengthType: typeof MSHTML$_svgLengthType,
    _svgMarkerOrient: typeof MSHTML$_svgMarkerOrient,
    _svgMarkerOrientAttribute: typeof MSHTML$_svgMarkerOrientAttribute,
    _svgMarkerUnits: typeof MSHTML$_svgMarkerUnits,
    _svgMorphologyOperator: typeof MSHTML$_svgMorphologyOperator,
    _svgPathSegType: typeof MSHTML$_svgPathSegType,
    _svgPreserveAlpha: typeof MSHTML$_svgPreserveAlpha,
    _svgPreserveAspectMeetOrSliceType: typeof MSHTML$_svgPreserveAspectMeetOrSliceType,
    _svgPreserveAspectRatioAlignType: typeof MSHTML$_svgPreserveAspectRatioAlignType,
    _svgSpreadMethod: typeof MSHTML$_svgSpreadMethod,
    _svgStitchtype: typeof MSHTML$_svgStitchtype,
    _svgTransformType: typeof MSHTML$_svgTransformType,
    _svgTurbulenceType: typeof MSHTML$_svgTurbulenceType,
    _svgUnitTypes: typeof MSHTML$_svgUnitTypes,
    _textDecoration: typeof MSHTML$_textDecoration,
    _textpathMethodtype: typeof MSHTML$_textpathMethodtype,
    _textpathSpacingtype: typeof MSHTML$_textpathSpacingtype,
    _VIEW_OBJECT_ALPHA_MODE: typeof MSHTML$_VIEW_OBJECT_ALPHA_MODE,
    _VIEW_OBJECT_COMPOSITION_MODE: typeof MSHTML$_VIEW_OBJECT_COMPOSITION_MODE,
    DXGI_FORMAT: typeof MSHTML$DXGI_FORMAT,
    applicationCache: typeof MSHTML$applicationCache,
    CanvasGradient: typeof MSHTML$CanvasGradient,
    CanvasImageData: typeof MSHTML$CanvasImageData,
    CanvasPattern: typeof MSHTML$CanvasPattern,
    CanvasRenderingContext2D: typeof MSHTML$CanvasRenderingContext2D,
    CanvasTextMetrics: typeof MSHTML$CanvasTextMetrics,
    CClientCaps: typeof MSHTML$CClientCaps,
    CEventObj: typeof MSHTML$CEventObj,
    CMimeTypes: typeof MSHTML$CMimeTypes,
    COpsProfile: typeof MSHTML$COpsProfile,
    CPlugins: typeof MSHTML$CPlugins,
    CPrintManagerTemplatePrinter: typeof MSHTML$CPrintManagerTemplatePrinter,
    CTemplatePrinter: typeof MSHTML$CTemplatePrinter,
    DOMBeforeUnloadEvent: typeof MSHTML$DOMBeforeUnloadEvent,
    DOMCloseEvent: typeof MSHTML$DOMCloseEvent,
    DOMCompositionEvent: typeof MSHTML$DOMCompositionEvent,
    DOMCustomEvent: typeof MSHTML$DOMCustomEvent,
    DOMDocumentType: typeof MSHTML$DOMDocumentType,
    DOMDragEvent: typeof MSHTML$DOMDragEvent,
    DOMEvent: typeof MSHTML$DOMEvent,
    DOMException: typeof MSHTML$DOMException,
    DOMFocusEvent: typeof MSHTML$DOMFocusEvent,
    DOMKeyboardEvent: typeof MSHTML$DOMKeyboardEvent,
    DOMMessageEvent: typeof MSHTML$DOMMessageEvent,
    DOMMouseEvent: typeof MSHTML$DOMMouseEvent,
    DOMMouseWheelEvent: typeof MSHTML$DOMMouseWheelEvent,
    DOMMSAnimationEvent: typeof MSHTML$DOMMSAnimationEvent,
    DOMMSManipulationEvent: typeof MSHTML$DOMMSManipulationEvent,
    DOMMSTransitionEvent: typeof MSHTML$DOMMSTransitionEvent,
    DOMMutationEvent: typeof MSHTML$DOMMutationEvent,
    DOMParser: typeof MSHTML$DOMParser,
    DOMProcessingInstruction: typeof MSHTML$DOMProcessingInstruction,
    DOMProgressEvent: typeof MSHTML$DOMProgressEvent,
    DOMSiteModeEvent: typeof MSHTML$DOMSiteModeEvent,
    DOMStorageEvent: typeof MSHTML$DOMStorageEvent,
    DOMTextEvent: typeof MSHTML$DOMTextEvent,
    DOMUIEvent: typeof MSHTML$DOMUIEvent,
    DOMWheelEvent: typeof MSHTML$DOMWheelEvent,
    EventException: typeof MSHTML$EventException,
    HTCDefaultDispatch: typeof MSHTML$HTCDefaultDispatch,
    HTCDescBehavior: typeof MSHTML$HTCDescBehavior,
    HTCEventBehavior: typeof MSHTML$HTCEventBehavior,
    HTCMethodBehavior: typeof MSHTML$HTCMethodBehavior,
    HTCPropertyBehavior: typeof MSHTML$HTCPropertyBehavior,
    HTMLAnchorElement: typeof MSHTML$HTMLAnchorElement,
    HTMLAppBehavior: typeof MSHTML$HTMLAppBehavior,
    HTMLAreaElement: typeof MSHTML$HTMLAreaElement,
    HTMLAudioElement: typeof MSHTML$HTMLAudioElement,
    HTMLBaseElement: typeof MSHTML$HTMLBaseElement,
    HTMLBaseFontElement: typeof MSHTML$HTMLBaseFontElement,
    HTMLBGsound: typeof MSHTML$HTMLBGsound,
    HTMLBlockElement: typeof MSHTML$HTMLBlockElement,
    HTMLBody: typeof MSHTML$HTMLBody,
    HTMLBRElement: typeof MSHTML$HTMLBRElement,
    HTMLButtonElement: typeof MSHTML$HTMLButtonElement,
    HTMLCanvasElement: typeof MSHTML$HTMLCanvasElement,
    HTMLCommentElement: typeof MSHTML$HTMLCommentElement,
    HTMLCSSImportRule: typeof MSHTML$HTMLCSSImportRule,
    HTMLCSSMediaList: typeof MSHTML$HTMLCSSMediaList,
    HTMLCSSMediaRule: typeof MSHTML$HTMLCSSMediaRule,
    HTMLCSSNamespaceRule: typeof MSHTML$HTMLCSSNamespaceRule,
    HTMLCSSRule: typeof MSHTML$HTMLCSSRule,
    HTMLDDElement: typeof MSHTML$HTMLDDElement,
    HTMLDefaults: typeof MSHTML$HTMLDefaults,
    HTMLDialog: typeof MSHTML$HTMLDialog,
    HTMLDivElement: typeof MSHTML$HTMLDivElement,
    HTMLDivPosition: typeof MSHTML$HTMLDivPosition,
    HtmlDlgSafeHelper: typeof MSHTML$HtmlDlgSafeHelper,
    HTMLDListElement: typeof MSHTML$HTMLDListElement,
    HTMLDocument: typeof MSHTML$HTMLDocument,
    HTMLDocumentCompatibleInfo: typeof MSHTML$HTMLDocumentCompatibleInfo,
    HTMLDocumentCompatibleInfoCollection: typeof MSHTML$HTMLDocumentCompatibleInfoCollection,
    HTMLDOMAttribute: typeof MSHTML$HTMLDOMAttribute,
    HTMLDOMImplementation: typeof MSHTML$HTMLDOMImplementation,
    HTMLDOMRange: typeof MSHTML$HTMLDOMRange,
    HTMLDOMTextNode: typeof MSHTML$HTMLDOMTextNode,
    HTMLDTElement: typeof MSHTML$HTMLDTElement,
    HTMLEmbed: typeof MSHTML$HTMLEmbed,
    HTMLFieldSetElement: typeof MSHTML$HTMLFieldSetElement,
    HTMLFontElement: typeof MSHTML$HTMLFontElement,
    HTMLFrameBase: typeof MSHTML$HTMLFrameBase,
    HTMLFrameElement: typeof MSHTML$HTMLFrameElement,
    HTMLFrameSetSite: typeof MSHTML$HTMLFrameSetSite,
    HTMLGenericElement: typeof MSHTML$HTMLGenericElement,
    HTMLHeadElement: typeof MSHTML$HTMLHeadElement,
    HTMLHeaderElement: typeof MSHTML$HTMLHeaderElement,
    HTMLHistory: typeof MSHTML$HTMLHistory,
    HTMLHRElement: typeof MSHTML$HTMLHRElement,
    HTMLHtmlElement: typeof MSHTML$HTMLHtmlElement,
    HTMLIFrame: typeof MSHTML$HTMLIFrame,
    HTMLImg: typeof MSHTML$HTMLImg,
    HTMLInputButtonElement: typeof MSHTML$HTMLInputButtonElement,
    HTMLInputElement: typeof MSHTML$HTMLInputElement,
    HTMLInputFileElement: typeof MSHTML$HTMLInputFileElement,
    htmlInputImage: typeof MSHTML$htmlInputImage,
    HTMLInputTextElement: typeof MSHTML$HTMLInputTextElement,
    HTMLIsIndexElement: typeof MSHTML$HTMLIsIndexElement,
    HTMLLabelElement: typeof MSHTML$HTMLLabelElement,
    HTMLLegendElement: typeof MSHTML$HTMLLegendElement,
    HTMLLIElement: typeof MSHTML$HTMLLIElement,
    HTMLLinkElement: typeof MSHTML$HTMLLinkElement,
    HTMLListElement: typeof MSHTML$HTMLListElement,
    HTMLLocation: typeof MSHTML$HTMLLocation,
    HTMLMapElement: typeof MSHTML$HTMLMapElement,
    HTMLMarqueeElement: typeof MSHTML$HTMLMarqueeElement,
    HTMLMediaElement: typeof MSHTML$HTMLMediaElement,
    HTMLMediaError: typeof MSHTML$HTMLMediaError,
    HTMLMetaElement: typeof MSHTML$HTMLMetaElement,
    HTMLMSCSSKeyframeRule: typeof MSHTML$HTMLMSCSSKeyframeRule,
    HTMLMSCSSKeyframesRule: typeof MSHTML$HTMLMSCSSKeyframesRule,
    HTMLNamespace: typeof MSHTML$HTMLNamespace,
    HTMLNavigator: typeof MSHTML$HTMLNavigator,
    HTMLNextIdElement: typeof MSHTML$HTMLNextIdElement,
    HTMLNoShowElement: typeof MSHTML$HTMLNoShowElement,
    HTMLObjectElement: typeof MSHTML$HTMLObjectElement,
    HTMLOListElement: typeof MSHTML$HTMLOListElement,
    HTMLOptionButtonElement: typeof MSHTML$HTMLOptionButtonElement,
    HTMLOptionElement: typeof MSHTML$HTMLOptionElement,
    HTMLParaElement: typeof MSHTML$HTMLParaElement,
    HTMLParamElement: typeof MSHTML$HTMLParamElement,
    HTMLPerformance: typeof MSHTML$HTMLPerformance,
    HTMLPerformanceNavigation: typeof MSHTML$HTMLPerformanceNavigation,
    HTMLPerformanceTiming: typeof MSHTML$HTMLPerformanceTiming,
    HTMLPhraseElement: typeof MSHTML$HTMLPhraseElement,
    HTMLPopup: typeof MSHTML$HTMLPopup,
    HTMLProgressElement: typeof MSHTML$HTMLProgressElement,
    HTMLRenderStyle: typeof MSHTML$HTMLRenderStyle,
    HTMLRichtextElement: typeof MSHTML$HTMLRichtextElement,
    HTMLScreen: typeof MSHTML$HTMLScreen,
    HTMLScriptElement: typeof MSHTML$HTMLScriptElement,
    HTMLSemanticElement: typeof MSHTML$HTMLSemanticElement,
    HTMLSourceElement: typeof MSHTML$HTMLSourceElement,
    HTMLSpanElement: typeof MSHTML$HTMLSpanElement,
    HTMLSpanFlow: typeof MSHTML$HTMLSpanFlow,
    HTMLStorage: typeof MSHTML$HTMLStorage,
    HTMLStyleElement: typeof MSHTML$HTMLStyleElement,
    HTMLStyleFontFace: typeof MSHTML$HTMLStyleFontFace,
    HTMLStyleMedia: typeof MSHTML$HTMLStyleMedia,
    HTMLStyleSheet: typeof MSHTML$HTMLStyleSheet,
    HTMLStyleSheetPage: typeof MSHTML$HTMLStyleSheetPage,
    HTMLStyleSheetRule: typeof MSHTML$HTMLStyleSheetRule,
    HTMLTable: typeof MSHTML$HTMLTable,
    HTMLTableCaption: typeof MSHTML$HTMLTableCaption,
    HTMLTableCell: typeof MSHTML$HTMLTableCell,
    HTMLTableCol: typeof MSHTML$HTMLTableCol,
    HTMLTableRow: typeof MSHTML$HTMLTableRow,
    HTMLTableSection: typeof MSHTML$HTMLTableSection,
    HTMLTextAreaElement: typeof MSHTML$HTMLTextAreaElement,
    HTMLTextElement: typeof MSHTML$HTMLTextElement,
    HTMLTimeRanges: typeof MSHTML$HTMLTimeRanges,
    HTMLTitleElement: typeof MSHTML$HTMLTitleElement,
    HTMLUListElement: typeof MSHTML$HTMLUListElement,
    HTMLUnknownElement: typeof MSHTML$HTMLUnknownElement,
    HTMLVideoElement: typeof MSHTML$HTMLVideoElement,
    HTMLWndOptionElement: typeof MSHTML$HTMLWndOptionElement,
    HTMLXMLHttpRequest: typeof MSHTML$HTMLXMLHttpRequest,
    ICanvasGradient: typeof MSHTML$ICanvasGradient,
    ICanvasImageData: typeof MSHTML$ICanvasImageData,
    ICanvasPattern: typeof MSHTML$ICanvasPattern,
    ICanvasRenderingContext2D: typeof MSHTML$ICanvasRenderingContext2D,
    ICanvasTextMetrics: typeof MSHTML$ICanvasTextMetrics,
    IDOMDocumentType: typeof MSHTML$IDOMDocumentType,
    IDOMEvent: typeof MSHTML$IDOMEvent,
    IDOMNodeIterator: typeof MSHTML$IDOMNodeIterator,
    IDOMParser: typeof MSHTML$IDOMParser,
    IDOMProcessingInstruction: typeof MSHTML$IDOMProcessingInstruction,
    IDOMTreeWalker: typeof MSHTML$IDOMTreeWalker,
    IDOMXmlSerializer: typeof MSHTML$IDOMXmlSerializer,
    IEventTarget: typeof MSHTML$IEventTarget,
    IHTMLAttributeCollection3: typeof MSHTML$IHTMLAttributeCollection3,
    IHTMLAudioElement: typeof MSHTML$IHTMLAudioElement,
    IHTMLCanvasElement: typeof MSHTML$IHTMLCanvasElement,
    IHTMLCSSRule: typeof MSHTML$IHTMLCSSRule,
    IHTMLCurrentStyle: typeof MSHTML$IHTMLCurrentStyle,
    IHTMLDataTransfer: typeof MSHTML$IHTMLDataTransfer,
    IHTMLDocument: typeof MSHTML$IHTMLDocument,
    IHTMLDocument2: typeof MSHTML$IHTMLDocument2,
    IHTMLDocument7: typeof MSHTML$IHTMLDocument7,
    IHTMLDocumentCompatibleInfo: typeof MSHTML$IHTMLDocumentCompatibleInfo,
    IHTMLDOMAttribute: typeof MSHTML$IHTMLDOMAttribute,
    IHTMLDOMAttribute2: typeof MSHTML$IHTMLDOMAttribute2,
    IHTMLDOMImplementation: typeof MSHTML$IHTMLDOMImplementation,
    IHTMLDOMNode: typeof MSHTML$IHTMLDOMNode,
    IHTMLDOMNode3: typeof MSHTML$IHTMLDOMNode3,
    IHTMLDOMRange: typeof MSHTML$IHTMLDOMRange,
    IHTMLElement: typeof MSHTML$IHTMLElement,
    IHTMLElement2: typeof MSHTML$IHTMLElement2,
    IHTMLEventObj: typeof MSHTML$IHTMLEventObj,
    IHTMLFrameBase: typeof MSHTML$IHTMLFrameBase,
    IHTMLImgElement: typeof MSHTML$IHTMLImgElement,
    IHTMLLocation: typeof MSHTML$IHTMLLocation,
    IHTMLMediaError: typeof MSHTML$IHTMLMediaError,
    IHTMLMSCSSKeyframeRule: typeof MSHTML$IHTMLMSCSSKeyframeRule,
    IHTMLOptionElement: typeof MSHTML$IHTMLOptionElement,
    IHTMLPerformanceNavigation: typeof MSHTML$IHTMLPerformanceNavigation,
    IHTMLPerformanceTiming: typeof MSHTML$IHTMLPerformanceTiming,
    IHTMLPluginsCollection: typeof MSHTML$IHTMLPluginsCollection,
    IHTMLRect: typeof MSHTML$IHTMLRect,
    IHTMLRenderStyle: typeof MSHTML$IHTMLRenderStyle,
    IHTMLRuleStyle: typeof MSHTML$IHTMLRuleStyle,
    IHTMLScreen: typeof MSHTML$IHTMLScreen,
    IHTMLSelection: typeof MSHTML$IHTMLSelection,
    IHTMLSelectionObject: typeof MSHTML$IHTMLSelectionObject,
    IHTMLStorage: typeof MSHTML$IHTMLStorage,
    IHTMLStyle: typeof MSHTML$IHTMLStyle,
    IHTMLStyleMedia: typeof MSHTML$IHTMLStyleMedia,
    IHTMLStyleSheet: typeof MSHTML$IHTMLStyleSheet,
    IHTMLStyleSheetPage: typeof MSHTML$IHTMLStyleSheetPage,
    IHTMLStyleSheetRule: typeof MSHTML$IHTMLStyleSheetRule,
    IHTMLTableCaption: typeof MSHTML$IHTMLTableCaption,
    IHTMLTableSection: typeof MSHTML$IHTMLTableSection,
    IHTMLTimeRanges: typeof MSHTML$IHTMLTimeRanges,
    IHTMLTxtRange: typeof MSHTML$IHTMLTxtRange,
    IHTMLXDomainRequest: typeof MSHTML$IHTMLXDomainRequest,
    IHTMLXMLHttpRequest: typeof MSHTML$IHTMLXMLHttpRequest,
    IOmHistory: typeof MSHTML$IOmHistory,
    IOmNavigator: typeof MSHTML$IOmNavigator,
    IRulesApplied: typeof MSHTML$IRulesApplied,
    ISVGElement: typeof MSHTML$ISVGElement,
    ISVGElementInstance: typeof MSHTML$ISVGElementInstance,
    ISVGElementInstanceList: typeof MSHTML$ISVGElementInstanceList,
    ISVGPathSegArcAbs: typeof MSHTML$ISVGPathSegArcAbs,
    ISVGPathSegArcRel: typeof MSHTML$ISVGPathSegArcRel,
    ISVGPathSegClosePath: typeof MSHTML$ISVGPathSegClosePath,
    ISVGPathSegCurvetoCubicAbs: typeof MSHTML$ISVGPathSegCurvetoCubicAbs,
    ISVGPathSegCurvetoCubicRel: typeof MSHTML$ISVGPathSegCurvetoCubicRel,
    ISVGPathSegCurvetoCubicSmoothAbs: typeof MSHTML$ISVGPathSegCurvetoCubicSmoothAbs,
    ISVGPathSegCurvetoCubicSmoothRel: typeof MSHTML$ISVGPathSegCurvetoCubicSmoothRel,
    ISVGPathSegCurvetoQuadraticAbs: typeof MSHTML$ISVGPathSegCurvetoQuadraticAbs,
    ISVGPathSegCurvetoQuadraticRel: typeof MSHTML$ISVGPathSegCurvetoQuadraticRel,
    ISVGPathSegCurvetoQuadraticSmoothAbs: typeof MSHTML$ISVGPathSegCurvetoQuadraticSmoothAbs,
    ISVGPathSegCurvetoQuadraticSmoothRel: typeof MSHTML$ISVGPathSegCurvetoQuadraticSmoothRel,
    ISVGPathSegLinetoAbs: typeof MSHTML$ISVGPathSegLinetoAbs,
    ISVGPathSegLinetoHorizontalAbs: typeof MSHTML$ISVGPathSegLinetoHorizontalAbs,
    ISVGPathSegLinetoHorizontalRel: typeof MSHTML$ISVGPathSegLinetoHorizontalRel,
    ISVGPathSegLinetoRel: typeof MSHTML$ISVGPathSegLinetoRel,
    ISVGPathSegLinetoVerticalAbs: typeof MSHTML$ISVGPathSegLinetoVerticalAbs,
    ISVGPathSegLinetoVerticalRel: typeof MSHTML$ISVGPathSegLinetoVerticalRel,
    ISVGPathSegMovetoAbs: typeof MSHTML$ISVGPathSegMovetoAbs,
    ISVGPathSegMovetoRel: typeof MSHTML$ISVGPathSegMovetoRel,
    ISVGSVGElement: typeof MSHTML$ISVGSVGElement,
    ISVGUseElement: typeof MSHTML$ISVGUseElement,
    ISVGViewSpec: typeof MSHTML$ISVGViewSpec,
    IWebGeocoordinates: typeof MSHTML$IWebGeocoordinates,
    IWebGeolocation: typeof MSHTML$IWebGeolocation,
    NodeIterator: typeof MSHTML$NodeIterator,
    OldHTMLDocument: typeof MSHTML$OldHTMLDocument,
    RangeException: typeof MSHTML$RangeException,
    RulesApplied: typeof MSHTML$RulesApplied,
    Scriptlet: typeof MSHTML$Scriptlet,
    SVGAElement: typeof MSHTML$SVGAElement,
    SVGAngle: typeof MSHTML$SVGAngle,
    SVGAnimatedAngle: typeof MSHTML$SVGAnimatedAngle,
    SVGAnimatedBoolean: typeof MSHTML$SVGAnimatedBoolean,
    SVGAnimatedEnumeration: typeof MSHTML$SVGAnimatedEnumeration,
    SVGAnimatedInteger: typeof MSHTML$SVGAnimatedInteger,
    SVGAnimatedLength: typeof MSHTML$SVGAnimatedLength,
    SVGAnimatedLengthList: typeof MSHTML$SVGAnimatedLengthList,
    SVGAnimatedNumber: typeof MSHTML$SVGAnimatedNumber,
    SVGAnimatedNumberList: typeof MSHTML$SVGAnimatedNumberList,
    SVGAnimatedPreserveAspectRatio: typeof MSHTML$SVGAnimatedPreserveAspectRatio,
    SVGAnimatedRect: typeof MSHTML$SVGAnimatedRect,
    SVGAnimatedString: typeof MSHTML$SVGAnimatedString,
    SVGAnimatedTransformList: typeof MSHTML$SVGAnimatedTransformList,
    SVGCircleElement: typeof MSHTML$SVGCircleElement,
    SVGClipPathElement: typeof MSHTML$SVGClipPathElement,
    SVGDefsElement: typeof MSHTML$SVGDefsElement,
    SVGDescElement: typeof MSHTML$SVGDescElement,
    SVGElement: typeof MSHTML$SVGElement,
    SVGElementInstance: typeof MSHTML$SVGElementInstance,
    SVGElementInstanceList: typeof MSHTML$SVGElementInstanceList,
    SVGEllipseElement: typeof MSHTML$SVGEllipseElement,
    SVGException: typeof MSHTML$SVGException,
    SVGGElement: typeof MSHTML$SVGGElement,
    SVGGradientElement: typeof MSHTML$SVGGradientElement,
    SVGImageElement: typeof MSHTML$SVGImageElement,
    SVGLength: typeof MSHTML$SVGLength,
    SVGLengthList: typeof MSHTML$SVGLengthList,
    SVGLinearGradientElement: typeof MSHTML$SVGLinearGradientElement,
    SVGLineElement: typeof MSHTML$SVGLineElement,
    SVGMarkerElement: typeof MSHTML$SVGMarkerElement,
    SVGMaskElement: typeof MSHTML$SVGMaskElement,
    SVGMatrix: typeof MSHTML$SVGMatrix,
    SVGMetadataElement: typeof MSHTML$SVGMetadataElement,
    SVGNumber: typeof MSHTML$SVGNumber,
    SVGNumberList: typeof MSHTML$SVGNumberList,
    SVGPathElement: typeof MSHTML$SVGPathElement,
    SVGPathSeg: typeof MSHTML$SVGPathSeg,
    SVGPathSegArcAbs: typeof MSHTML$SVGPathSegArcAbs,
    SVGPathSegArcRel: typeof MSHTML$SVGPathSegArcRel,
    SVGPathSegClosePath: typeof MSHTML$SVGPathSegClosePath,
    SVGPathSegCurvetoCubicAbs: typeof MSHTML$SVGPathSegCurvetoCubicAbs,
    SVGPathSegCurvetoCubicRel: typeof MSHTML$SVGPathSegCurvetoCubicRel,
    SVGPathSegCurvetoCubicSmoothAbs: typeof MSHTML$SVGPathSegCurvetoCubicSmoothAbs,
    SVGPathSegCurvetoCubicSmoothRel: typeof MSHTML$SVGPathSegCurvetoCubicSmoothRel,
    SVGPathSegCurvetoQuadraticAbs: typeof MSHTML$SVGPathSegCurvetoQuadraticAbs,
    SVGPathSegCurvetoQuadraticRel: typeof MSHTML$SVGPathSegCurvetoQuadraticRel,
    SVGPathSegCurvetoQuadraticSmoothAbs: typeof MSHTML$SVGPathSegCurvetoQuadraticSmoothAbs,
    SVGPathSegCurvetoQuadraticSmoothRel: typeof MSHTML$SVGPathSegCurvetoQuadraticSmoothRel,
    SVGPathSegLinetoAbs: typeof MSHTML$SVGPathSegLinetoAbs,
    SVGPathSegLinetoHorizontalAbs: typeof MSHTML$SVGPathSegLinetoHorizontalAbs,
    SVGPathSegLinetoHorizontalRel: typeof MSHTML$SVGPathSegLinetoHorizontalRel,
    SVGPathSegLinetoRel: typeof MSHTML$SVGPathSegLinetoRel,
    SVGPathSegLinetoVerticalAbs: typeof MSHTML$SVGPathSegLinetoVerticalAbs,
    SVGPathSegLinetoVerticalRel: typeof MSHTML$SVGPathSegLinetoVerticalRel,
    SVGPathSegList: typeof MSHTML$SVGPathSegList,
    SVGPathSegMovetoAbs: typeof MSHTML$SVGPathSegMovetoAbs,
    SVGPathSegMovetoRel: typeof MSHTML$SVGPathSegMovetoRel,
    SVGPatternElement: typeof MSHTML$SVGPatternElement,
    SVGPoint: typeof MSHTML$SVGPoint,
    SVGPointList: typeof MSHTML$SVGPointList,
    SVGPolygonElement: typeof MSHTML$SVGPolygonElement,
    SVGPolylineElement: typeof MSHTML$SVGPolylineElement,
    SVGPreserveAspectRatio: typeof MSHTML$SVGPreserveAspectRatio,
    SVGRadialGradientElement: typeof MSHTML$SVGRadialGradientElement,
    SVGRect: typeof MSHTML$SVGRect,
    SVGRectElement: typeof MSHTML$SVGRectElement,
    SVGScriptElement: typeof MSHTML$SVGScriptElement,
    SVGStopElement: typeof MSHTML$SVGStopElement,
    SVGStringList: typeof MSHTML$SVGStringList,
    SVGStyleElement: typeof MSHTML$SVGStyleElement,
    SVGSVGElement: typeof MSHTML$SVGSVGElement,
    SVGSwitchElement: typeof MSHTML$SVGSwitchElement,
    SVGSymbolElement: typeof MSHTML$SVGSymbolElement,
    SVGTextContentElement: typeof MSHTML$SVGTextContentElement,
    SVGTextElement: typeof MSHTML$SVGTextElement,
    SVGTextPathElement: typeof MSHTML$SVGTextPathElement,
    SVGTextPositioningElement: typeof MSHTML$SVGTextPositioningElement,
    SVGTitleElement: typeof MSHTML$SVGTitleElement,
    SVGTransform: typeof MSHTML$SVGTransform,
    SVGTransformList: typeof MSHTML$SVGTransformList,
    SVGTSpanElement: typeof MSHTML$SVGTSpanElement,
    SVGUseElement: typeof MSHTML$SVGUseElement,
    SVGViewElement: typeof MSHTML$SVGViewElement,
    SVGZoomEvent: typeof MSHTML$SVGZoomEvent,
    ThreadDialogProcParam: typeof MSHTML$ThreadDialogProcParam,
    TreeWalker: typeof MSHTML$TreeWalker,
    WebGeocoordinates: typeof MSHTML$WebGeocoordinates,
    WebGeolocation: typeof MSHTML$WebGeolocation,
    WebGeoposition: typeof MSHTML$WebGeoposition,
    WebGeopositionError: typeof MSHTML$WebGeopositionError,
    XDomainRequest: typeof MSHTML$XDomainRequest,
    XMLHttpRequestEventTarget: typeof MSHTML$XMLHttpRequestEventTarget,
    XMLSerializer: typeof MSHTML$XMLSerializer
  };

  declare var MSHTML$_BEHAVIOR_EVENT: {|
    +BEHAVIOR_EVENT_Max: 2147483647, // 2147483647
    +BEHAVIOREVENT_APPLYSTYLE: 2, // 2
    +BEHAVIOREVENT_CONTENTREADY: 0, // 0
    +BEHAVIOREVENT_CONTENTSAVE: 4, // 4
    +BEHAVIOREVENT_DOCUMENTCONTEXTCHANGE: 3, // 3
    +BEHAVIOREVENT_DOCUMENTREADY: 1, // 1
    +BEHAVIOREVENT_FIRST: 0, // 0
    +BEHAVIOREVENT_LAST: 4 // 4
  |};

  declare var MSHTML$_BEHAVIOR_EVENT_FLAGS: {|
    +BEHAVIOR_EVENT_FLAGS_Max: 2147483647, // 2147483647
    +BEHAVIOREVENTFLAGS_BUBBLE: 1, // 1
    +BEHAVIOREVENTFLAGS_STANDARDADDITIVE: 2 // 2
  |};

  declare var MSHTML$_BEHAVIOR_LAYOUT_INFO: {|
    +BEHAVIOR_LAYOUT_INFO_Max: 2147483647, // 2147483647
    +BEHAVIORLAYOUTINFO_FULLDELEGATION: 1, // 1
    +BEHAVIORLAYOUTINFO_MAPSIZE: 4, // 4
    +BEHAVIORLAYOUTINFO_MODIFYNATURAL: 2 // 2
  |};

  declare var MSHTML$_BEHAVIOR_LAYOUT_MODE: {|
    +BEHAVIOR_LAYOUT_MODE_Max: 2147483647, // 2147483647
    +BEHAVIORLAYOUTMODE_FINAL_PERCENT: 32768, // 32768
    +BEHAVIORLAYOUTMODE_MAXWIDTH: 4, // 4
    +BEHAVIORLAYOUTMODE_MEDIA_RESOLUTION: 16384, // 16384
    +BEHAVIORLAYOUTMODE_MINWIDTH: 2, // 2
    +BEHAVIORLAYOUTMODE_NATURAL: 1 // 1
  |};

  declare var MSHTML$_BEHAVIOR_RELATION: {|
    +BEHAVIOR_CHILD: 2, // 2
    +BEHAVIOR_FIRSTRELATION: 0, // 0
    +BEHAVIOR_LASTRELATION: 3, // 3
    +BEHAVIOR_PARENT: 1, // 1
    +BEHAVIOR_RELATION_Max: 2147483647, // 2147483647
    +BEHAVIOR_SAMEELEMENT: 0, // 0
    +BEHAVIOR_SIBLING: 3 // 3
  |};

  declare var MSHTML$_BEHAVIOR_RENDER_INFO: {|
    +BEHAVIOR_RENDER_INFO_Max: 2147483647, // 2147483647
    +BEHAVIORRENDERINFO_3DSURFACE: 2097152, // 2097152
    +BEHAVIORRENDERINFO_ABOVECONTENT: 40, // 40
    +BEHAVIORRENDERINFO_AFTERBACKGROUND: 2, // 2
    +BEHAVIORRENDERINFO_AFTERCONTENT: 8, // 8
    +BEHAVIORRENDERINFO_AFTERFOREGROUND: 32, // 32
    +BEHAVIORRENDERINFO_ALLLAYERS: 255, // 255
    +BEHAVIORRENDERINFO_BEFOREBACKGROUND: 1, // 1
    +BEHAVIORRENDERINFO_BEFORECONTENT: 4, // 4
    +BEHAVIORRENDERINFO_DISABLEALLLAYERS: 3840, // 3840
    +BEHAVIORRENDERINFO_DISABLEBACKGROUND: 256, // 256
    +BEHAVIORRENDERINFO_DISABLECONTENT: 1024, // 1024
    +BEHAVIORRENDERINFO_DISABLENEGATIVEZ: 512, // 512
    +BEHAVIORRENDERINFO_DISABLEPOSITIVEZ: 2048, // 2048
    +BEHAVIORRENDERINFO_HITTESTING: 4096, // 4096
    +BEHAVIORRENDERINFO_SURFACE: 1048576 // 1048576
  |};

  declare var MSHTML$_bodyScroll: {|
    +bodyScroll_Max: 2147483647, // 2147483647
    +bodyScrollauto: 4, // 4
    +bodyScrolldefault: 3, // 3
    +bodyScrollno: 2, // 2
    +bodyScrollyes: 1 // 1
  |};

  declare var MSHTML$_BoolValue: {|
    +BoolValue_Max: 2147483647, // 2147483647
    +False: 0, // 0
    +True: 1 // 1
  |};

  declare var MSHTML$_CARET_DIRECTION: {|
    +CARET_DIRECTION_BACKWARD: 2, // 2
    +CARET_DIRECTION_FORWARD: 3, // 3
    +CARET_DIRECTION_INDETERMINATE: 0, // 0
    +CARET_DIRECTION_Max: 2147483647, // 2147483647
    +CARET_DIRECTION_SAME: 1 // 1
  |};

  declare var MSHTML$_COORD_SYSTEM: {|
    +COORD_SYSTEM_CLIENT: 5, // 5
    +COORD_SYSTEM_CONTAINER: 2, // 2
    +COORD_SYSTEM_CONTENT: 3, // 3
    +COORD_SYSTEM_FRAME: 4, // 4
    +COORD_SYSTEM_GLOBAL: 0, // 0
    +COORD_SYSTEM_Max: 2147483647, // 2147483647
    +COORD_SYSTEM_PARENT: 1 // 1
  |};

  declare var MSHTML$_DEV_CONSOLE_MESSAGE_LEVEL: {|
    +DCML_ERROR: 2, // 2
    +DCML_INFORMATIONAL: 0, // 0
    +DCML_WARNING: 1, // 1
    +DEV_CONSOLE_MESSAGE_LEVEL_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_DISPLAY_BREAK: {|
    +DISPLAY_BREAK_Block: 1, // 1
    +DISPLAY_BREAK_Break: 2, // 2
    +DISPLAY_BREAK_Max: 2147483647, // 2147483647
    +DISPLAY_BREAK_None: 0 // 0
  |};

  declare var MSHTML$_DISPLAY_GRAVITY: {|
    +DISPLAY_GRAVITY_Max: 2147483647, // 2147483647
    +DISPLAY_GRAVITY_NextLine: 2, // 2
    +DISPLAY_GRAVITY_PreviousLine: 1 // 1
  |};

  declare var MSHTML$_DISPLAY_MOVEUNIT: {|
    +DISPLAY_MOVEUNIT_BottomOfWindow: 6, // 6
    +DISPLAY_MOVEUNIT_CurrentLineEnd: 4, // 4
    +DISPLAY_MOVEUNIT_CurrentLineStart: 3, // 3
    +DISPLAY_MOVEUNIT_Max: 2147483647, // 2147483647
    +DISPLAY_MOVEUNIT_NextLine: 2, // 2
    +DISPLAY_MOVEUNIT_PreviousLine: 1, // 1
    +DISPLAY_MOVEUNIT_TopOfWindow: 5 // 5
  |};

  declare var MSHTML$_DOM_EVENT_PHASE: {|
    +DEP_AT_TARGET: 2, // 2
    +DEP_BUBBLING_PHASE: 3, // 3
    +DEP_CAPTURING_PHASE: 1, // 1
    +DOM_EVENT_PHASE_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_DomConstructor: {|
    +DomConstructor_Max: 2147483647, // 2147483647
    +DomConstructorAttr: 1, // 1
    +DomConstructorBehaviorUrnsCollection: 2, // 2
    +DomConstructorBookmarkCollection: 3, // 3
    +DomConstructorCompatibleInfo: 4, // 4
    +DomConstructorCompatibleInfoCollection: 5, // 5
    +DomConstructorControlRangeCollection: 6, // 6
    +DomConstructorCSSCurrentStyleDeclaration: 7, // 7
    +DomConstructorCSSRuleList: 8, // 8
    +DomConstructorCSSRuleStyleDeclaration: 9, // 9
    +DomConstructorCSSStyleDeclaration: 10, // 10
    +DomConstructorCSSStyleRule: 11, // 11
    +DomConstructorCSSStyleSheet: 12, // 12
    +DomConstructorDataTransfer: 13, // 13
    +DomConstructorDOMImplementation: 14, // 14
    +DomConstructorElement: 15, // 15
    +DomConstructorEvent: 16, // 16
    +DomConstructorHistory: 17, // 17
    +DomConstructorHTCElementBehaviorDefaults: 18, // 18
    +DomConstructorHTMLAnchorElement: 19, // 19
    +DomConstructorHTMLAreaElement: 20, // 20
    +DomConstructorHTMLAreasCollection: 21, // 21
    +DomConstructorHTMLBaseElement: 22, // 22
    +DomConstructorHTMLBaseFontElement: 23, // 23
    +DomConstructorHTMLBGSoundElement: 24, // 24
    +DomConstructorHTMLBlockElement: 25, // 25
    +DomConstructorHTMLBodyElement: 26, // 26
    +DomConstructorHTMLBRElement: 27, // 27
    +DomConstructorHTMLButtonElement: 28, // 28
    +DomConstructorHTMLCollection: 29, // 29
    +DomConstructorHTMLCommentElement: 30, // 30
    +DomConstructorHTMLDDElement: 31, // 31
    +DomConstructorHTMLDivElement: 32, // 32
    +DomConstructorHTMLDListElement: 34, // 34
    +DomConstructorHTMLDocument: 33, // 33
    +DomConstructorHTMLDTElement: 35, // 35
    +DomConstructorHTMLEmbedElement: 36, // 36
    +DomConstructorHTMLFieldSetElement: 37, // 37
    +DomConstructorHTMLFontElement: 38, // 38
    +DomConstructorHTMLFormElement: 39, // 39
    +DomConstructorHTMLFrameElement: 40, // 40
    +DomConstructorHTMLFrameSetElement: 41, // 41
    +DomConstructorHTMLGenericElement: 42, // 42
    +DomConstructorHTMLHeadElement: 43, // 43
    +DomConstructorHTMLHeadingElement: 44, // 44
    +DomConstructorHTMLHRElement: 45, // 45
    +DomConstructorHTMLHtmlElement: 46, // 46
    +DomConstructorHTMLIFrameElement: 47, // 47
    +DomConstructorHTMLImageElement: 48, // 48
    +DomConstructorHTMLInputElement: 49, // 49
    +DomConstructorHTMLIsIndexElement: 50, // 50
    +DomConstructorHTMLLabelElement: 51, // 51
    +DomConstructorHTMLLegendElement: 52, // 52
    +DomConstructorHTMLLIElement: 53, // 53
    +DomConstructorHTMLLinkElement: 54, // 54
    +DomConstructorHTMLMapElement: 55, // 55
    +DomConstructorHTMLMarqueeElement: 56, // 56
    +DomConstructorHTMLMetaElement: 57, // 57
    +DomConstructorHTMLModelessDialog: 58, // 58
    +DomConstructorHTMLNamespaceInfo: 59, // 59
    +DomConstructorHTMLNamespaceInfoCollection: 60, // 60
    +DomConstructorHTMLNextIdElement: 61, // 61
    +DomConstructorHTMLNoShowElement: 62, // 62
    +DomConstructorHTMLObjectElement: 63, // 63
    +DomConstructorHTMLOListElement: 64, // 64
    +DomConstructorHTMLOptionElement: 65, // 65
    +DomConstructorHTMLParagraphElement: 66, // 66
    +DomConstructorHTMLParamElement: 67, // 67
    +DomConstructorHTMLPhraseElement: 68, // 68
    +DomConstructorHTMLPluginsCollection: 69, // 69
    +DomConstructorHTMLPopup: 70, // 70
    +DomConstructorHTMLScriptElement: 71, // 71
    +DomConstructorHTMLSelectElement: 72, // 72
    +DomConstructorHTMLSpanElement: 73, // 73
    +DomConstructorHTMLStyleElement: 74, // 74
    +DomConstructorHTMLTableCaptionElement: 75, // 75
    +DomConstructorHTMLTableCellElement: 76, // 76
    +DomConstructorHTMLTableColElement: 77, // 77
    +DomConstructorHTMLTableElement: 78, // 78
    +DomConstructorHTMLTableRowElement: 79, // 79
    +DomConstructorHTMLTableSectionElement: 80, // 80
    +DomConstructorHTMLTextAreaElement: 81, // 81
    +DomConstructorHTMLTextElement: 82, // 82
    +DomConstructorHTMLTitleElement: 83, // 83
    +DomConstructorHTMLUListElement: 84, // 84
    +DomConstructorHTMLUnknownElement: 85, // 85
    +DomConstructorImage: 86, // 86
    +DomConstructorLocation: 87, // 87
    +DomConstructorMax: 107, // 107
    +DomConstructorNamedNodeMap: 88, // 88
    +DomConstructorNavigator: 89, // 89
    +DomConstructorNodeList: 90, // 90
    +DomConstructorObject: 0, // 0
    +DomConstructorOption: 91, // 91
    +DomConstructorScreen: 92, // 92
    +DomConstructorSelection: 93, // 93
    +DomConstructorStaticNodeList: 94, // 94
    +DomConstructorStorage: 95, // 95
    +DomConstructorStyleSheetList: 96, // 96
    +DomConstructorStyleSheetPage: 97, // 97
    +DomConstructorStyleSheetPageList: 98, // 98
    +DomConstructorText: 99, // 99
    +DomConstructorTextRange: 100, // 100
    +DomConstructorTextRangeCollection: 101, // 101
    +DomConstructorTextRectangle: 102, // 102
    +DomConstructorTextRectangleList: 103, // 103
    +DomConstructorWindow: 104, // 104
    +DomConstructorXDomainRequest: 105, // 105
    +DomConstructorXMLHttpRequest: 106 // 106
  |};

  declare var MSHTML$_ELEMENT_ADJACENCY: {|
    +ELEM_ADJ_AfterBegin: 1, // 1
    +ELEM_ADJ_AfterEnd: 3, // 3
    +ELEM_ADJ_BeforeBegin: 0, // 0
    +ELEM_ADJ_BeforeEnd: 2, // 2
    +ELEMENT_ADJACENCY_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_ELEMENT_CORNER: {|
    +ELEMENT_CORNER_BOTTOM: 3, // 3
    +ELEMENT_CORNER_BOTTOMLEFT: 7, // 7
    +ELEMENT_CORNER_BOTTOMRIGHT: 8, // 8
    +ELEMENT_CORNER_LEFT: 2, // 2
    +ELEMENT_CORNER_Max: 2147483647, // 2147483647
    +ELEMENT_CORNER_NONE: 0, // 0
    +ELEMENT_CORNER_RIGHT: 4, // 4
    +ELEMENT_CORNER_TOP: 1, // 1
    +ELEMENT_CORNER_TOPLEFT: 5, // 5
    +ELEMENT_CORNER_TOPRIGHT: 6 // 6
  |};

  declare var MSHTML$_ELEMENT_TAG_ID: {|
    +ELEMENT_TAG_ID_Max: 2147483647, // 2147483647
    +TAGID_A: 2, // 2
    +TAGID_ABBR: 110, // 110
    +TAGID_ACRONYM: 3, // 3
    +TAGID_ADDRESS: 4, // 4
    +TAGID_APPLET: 5, // 5
    +TAGID_AREA: 6, // 6
    +TAGID_ARTICLE: 199, // 199
    +TAGID_ASIDE: 200, // 200
    +TAGID_AUDIO: 192, // 192
    +TAGID_B: 7, // 7
    +TAGID_BASE: 8, // 8
    +TAGID_BASEFONT: 9, // 9
    +TAGID_BDO: 10, // 10
    +TAGID_BGSOUND: 11, // 11
    +TAGID_BIG: 12, // 12
    +TAGID_BLINK: 13, // 13
    +TAGID_BLOCKQUOTE: 14, // 14
    +TAGID_BODY: 15, // 15
    +TAGID_BR: 16, // 16
    +TAGID_BUTTON: 17, // 17
    +TAGID_CANVAS: 195, // 195
    +TAGID_CAPTION: 18, // 18
    +TAGID_CENTER: 19, // 19
    +TAGID_CITE: 20, // 20
    +TAGID_CODE: 21, // 21
    +TAGID_COL: 22, // 22
    +TAGID_COLGROUP: 23, // 23
    +TAGID_COMMAND: 220, // 220
    +TAGID_COMMENT: 24, // 24
    +TAGID_COMMENT_RAW: 25, // 25
    +TAGID_COUNT: 224, // 224
    +TAGID_DATALIST: 217, // 217
    +TAGID_DD: 26, // 26
    +TAGID_DEL: 27, // 27
    +TAGID_DETAILS: 221, // 221
    +TAGID_DFN: 28, // 28
    +TAGID_DIR: 29, // 29
    +TAGID_DIV: 30, // 30
    +TAGID_DL: 31, // 31
    +TAGID_DOCTYPE: 196, // 196
    +TAGID_DT: 32, // 32
    +TAGID_EM: 33, // 33
    +TAGID_EMBED: 34, // 34
    +TAGID_FIELDSET: 35, // 35
    +TAGID_FIGCAPTION: 201, // 201
    +TAGID_FIGURE: 202, // 202
    +TAGID_FONT: 36, // 36
    +TAGID_FOOTER: 203, // 203
    +TAGID_FORM: 37, // 37
    +TAGID_FRAME: 38, // 38
    +TAGID_FRAMESET: 39, // 39
    +TAGID_GENERIC: 40, // 40
    +TAGID_H1: 41, // 41
    +TAGID_H2: 42, // 42
    +TAGID_H3: 43, // 43
    +TAGID_H4: 44, // 44
    +TAGID_H5: 45, // 45
    +TAGID_H6: 46, // 46
    +TAGID_HEAD: 47, // 47
    +TAGID_HEADER: 204, // 204
    +TAGID_HGROUP: 205, // 205
    +TAGID_HR: 48, // 48
    +TAGID_HTML: 49, // 49
    +TAGID_I: 50, // 50
    +TAGID_IFRAME: 51, // 51
    +TAGID_IMG: 52, // 52
    +TAGID_INPUT: 53, // 53
    +TAGID_INS: 54, // 54
    +TAGID_ISINDEX: 219, // 219
    +TAGID_KBD: 55, // 55
    +TAGID_KEYGEN: 197, // 197
    +TAGID_LABEL: 56, // 56
    +TAGID_LAST_PREDEFINED: 10000, // 10000
    +TAGID_LEGEND: 57, // 57
    +TAGID_LI: 58, // 58
    +TAGID_LINK: 59, // 59
    +TAGID_LISTING: 60, // 60
    +TAGID_MAP: 61, // 61
    +TAGID_MARK: 206, // 206
    +TAGID_MARQUEE: 62, // 62
    +TAGID_MATHML_ANNOTATION_XML: 210, // 210
    +TAGID_MATHML_MATH: 211, // 211
    +TAGID_MATHML_MI: 212, // 212
    +TAGID_MATHML_MN: 213, // 213
    +TAGID_MATHML_MO: 214, // 214
    +TAGID_MATHML_MS: 215, // 215
    +TAGID_MATHML_MTEXT: 216, // 216
    +TAGID_MENU: 63, // 63
    +TAGID_META: 64, // 64
    +TAGID_NAV: 207, // 207
    +TAGID_NEXTID: 65, // 65
    +TAGID_NOBR: 66, // 66
    +TAGID_NOEMBED: 67, // 67
    +TAGID_NOFRAMES: 68, // 68
    +TAGID_NOSCRIPT: 69, // 69
    +TAGID_NULL: 0, // 0
    +TAGID_OBJECT: 70, // 70
    +TAGID_OL: 71, // 71
    +TAGID_OPTGROUP: 109, // 109
    +TAGID_OPTION: 72, // 72
    +TAGID_P: 73, // 73
    +TAGID_PARAM: 74, // 74
    +TAGID_PLAINTEXT: 75, // 75
    +TAGID_PRE: 76, // 76
    +TAGID_PROCESSINGINSTRUCTION: 198, // 198
    +TAGID_PROGRESS: 209, // 209
    +TAGID_Q: 77, // 77
    +TAGID_ROOT: 108, // 108
    +TAGID_RP: 78, // 78
    +TAGID_RT: 79, // 79
    +TAGID_RUBY: 80, // 80
    +TAGID_S: 81, // 81
    +TAGID_SAMP: 82, // 82
    +TAGID_SCRIPT: 83, // 83
    +TAGID_SECTION: 208, // 208
    +TAGID_SELECT: 84, // 84
    +TAGID_SMALL: 85, // 85
    +TAGID_SOURCE: 193, // 193
    +TAGID_SPAN: 86, // 86
    +TAGID_STRIKE: 87, // 87
    +TAGID_STRONG: 88, // 88
    +TAGID_STYLE: 89, // 89
    +TAGID_SUB: 90, // 90
    +TAGID_SUMMARY: 222, // 222
    +TAGID_SUP: 91, // 91
    +TAGID_SVG_A: 111, // 111
    +TAGID_SVG_ALTGLYPH: 112, // 112
    +TAGID_SVG_ALTGLYPHDEF: 113, // 113
    +TAGID_SVG_ALTGLYPHITEM: 114, // 114
    +TAGID_SVG_ANIMATE: 115, // 115
    +TAGID_SVG_ANIMATECOLOR: 116, // 116
    +TAGID_SVG_ANIMATEMOTION: 117, // 117
    +TAGID_SVG_ANIMATETRANSFORM: 118, // 118
    +TAGID_SVG_CIRCLE: 119, // 119
    +TAGID_SVG_CLIPPATH: 120, // 120
    +TAGID_SVG_COLOR_PROFILE: 121, // 121
    +TAGID_SVG_CURSOR: 122, // 122
    +TAGID_SVG_DEFINITION_SRC: 123, // 123
    +TAGID_SVG_DEFS: 124, // 124
    +TAGID_SVG_DESC: 125, // 125
    +TAGID_SVG_ELLIPSE: 126, // 126
    +TAGID_SVG_FEBLEND: 127, // 127
    +TAGID_SVG_FECOLORMATRIX: 128, // 128
    +TAGID_SVG_FECOMPONENTTRANSFER: 129, // 129
    +TAGID_SVG_FECOMPOSITE: 130, // 130
    +TAGID_SVG_FECONVOLVEMATRIX: 131, // 131
    +TAGID_SVG_FEDIFFUSELIGHTING: 132, // 132
    +TAGID_SVG_FEDISPLACEMENTMAP: 133, // 133
    +TAGID_SVG_FEDISTANTLIGHT: 134, // 134
    +TAGID_SVG_FEFLOOD: 135, // 135
    +TAGID_SVG_FEFUNCA: 136, // 136
    +TAGID_SVG_FEFUNCB: 137, // 137
    +TAGID_SVG_FEFUNCG: 138, // 138
    +TAGID_SVG_FEFUNCR: 139, // 139
    +TAGID_SVG_FEGAUSSIANBLUR: 140, // 140
    +TAGID_SVG_FEIMAGE: 141, // 141
    +TAGID_SVG_FEMERGE: 142, // 142
    +TAGID_SVG_FEMERGENODE: 143, // 143
    +TAGID_SVG_FEMORPHOLOGY: 144, // 144
    +TAGID_SVG_FEOFFSET: 145, // 145
    +TAGID_SVG_FEPOINTLIGHT: 146, // 146
    +TAGID_SVG_FESPECULARLIGHTING: 147, // 147
    +TAGID_SVG_FESPOTLIGHT: 148, // 148
    +TAGID_SVG_FETILE: 149, // 149
    +TAGID_SVG_FETURBULENCE: 150, // 150
    +TAGID_SVG_FILTER: 151, // 151
    +TAGID_SVG_FONT: 152, // 152
    +TAGID_SVG_FONT_FACE: 153, // 153
    +TAGID_SVG_FONT_FACE_FORMAT: 154, // 154
    +TAGID_SVG_FONT_FACE_NAME: 155, // 155
    +TAGID_SVG_FONT_FACE_SRC: 156, // 156
    +TAGID_SVG_FONT_FACE_URI: 157, // 157
    +TAGID_SVG_FOREIGNOBJECT: 158, // 158
    +TAGID_SVG_G: 159, // 159
    +TAGID_SVG_GLYPH: 160, // 160
    +TAGID_SVG_GLYPHREF: 161, // 161
    +TAGID_SVG_HKERN: 162, // 162
    +TAGID_SVG_IMAGE: 163, // 163
    +TAGID_SVG_LINE: 164, // 164
    +TAGID_SVG_LINEARGRADIENT: 165, // 165
    +TAGID_SVG_MARKER: 166, // 166
    +TAGID_SVG_MASK: 167, // 167
    +TAGID_SVG_METADATA: 168, // 168
    +TAGID_SVG_MISSING_GLYPH: 169, // 169
    +TAGID_SVG_MPATH: 170, // 170
    +TAGID_SVG_PATH: 171, // 171
    +TAGID_SVG_PATTERN: 172, // 172
    +TAGID_SVG_POLYGON: 173, // 173
    +TAGID_SVG_POLYLINE: 174, // 174
    +TAGID_SVG_RADIALGRADIENT: 175, // 175
    +TAGID_SVG_RECT: 176, // 176
    +TAGID_SVG_SCRIPT: 177, // 177
    +TAGID_SVG_SET: 178, // 178
    +TAGID_SVG_STOP: 179, // 179
    +TAGID_SVG_STYLE: 180, // 180
    +TAGID_SVG_SVG: 181, // 181
    +TAGID_SVG_SWITCH: 182, // 182
    +TAGID_SVG_SYMBOL: 183, // 183
    +TAGID_SVG_TEXT: 184, // 184
    +TAGID_SVG_TEXTPATH: 185, // 185
    +TAGID_SVG_TITLE: 186, // 186
    +TAGID_SVG_TREF: 187, // 187
    +TAGID_SVG_TSPAN: 188, // 188
    +TAGID_SVG_USE: 189, // 189
    +TAGID_SVG_VIEW: 190, // 190
    +TAGID_SVG_VKERN: 191, // 191
    +TAGID_TABLE: 92, // 92
    +TAGID_TBODY: 93, // 93
    +TAGID_TC: 94, // 94
    +TAGID_TD: 95, // 95
    +TAGID_TEXTAREA: 96, // 96
    +TAGID_TFOOT: 97, // 97
    +TAGID_TH: 98, // 98
    +TAGID_THEAD: 99, // 99
    +TAGID_TITLE: 100, // 100
    +TAGID_TR: 101, // 101
    +TAGID_TRACK: 218, // 218
    +TAGID_TT: 102, // 102
    +TAGID_U: 103, // 103
    +TAGID_UL: 104, // 104
    +TAGID_UNKNOWN: 1, // 1
    +TAGID_VAR: 105, // 105
    +TAGID_VIDEO: 194, // 194
    +TAGID_WBR: 106, // 106
    +TAGID_X_MS_WEBVIEW: 223, // 223
    +TAGID_XMP: 107 // 107
  |};

  declare var MSHTML$_ELEMENTDESCRIPTOR_FLAGS: {|
    +ELEMENTDESCRIPTOR_FLAGS_Max: 2147483647, // 2147483647
    +ELEMENTDESCRIPTORFLAGS_LITERAL: 1, // 1
    +ELEMENTDESCRIPTORFLAGS_NESTED_LITERAL: 2 // 2
  |};

  declare var MSHTML$_ELEMENTNAMESPACE_FLAGS: {|
    +ELEMENTNAMESPACE_FLAGS_Max: 2147483647, // 2147483647
    +ELEMENTNAMESPACEFLAGS_ALLOWANYTAG: 1, // 1
    +ELEMENTNAMESPACEFLAGS_QUERYFORUNKNOWNTAGS: 2 // 2
  |};

  declare var MSHTML$_FINDTEXT_FLAGS: {|
    +FINDTEXT_BACKWARDS: 1, // 1
    +FINDTEXT_FLAGS_Max: 2147483647, // 2147483647
    +FINDTEXT_MATCHALEFHAMZA: -2147483648, // -2147483648
    +FINDTEXT_MATCHCASE: 4, // 4
    +FINDTEXT_MATCHDIAC: 536870912, // 536870912
    +FINDTEXT_MATCHKASHIDA: 1073741824, // 1073741824
    +FINDTEXT_MATCHREPEATEDWHITESPACE: 262144, // 262144
    +FINDTEXT_RAW: 131072, // 131072
    +FINDTEXT_WHOLEWORD: 2 // 2
  |};

  declare var MSHTML$_frameScrolling: {|
    +frameScrolling_Max: 2147483647, // 2147483647
    +frameScrollingauto: 4, // 4
    +frameScrollingno: 2, // 2
    +frameScrollingyes: 1 // 1
  |};

  declare var MSHTML$_HT_OPTIONS: {|
    +HT_OPT_AllowAfterEOL: 1, // 1
    +HT_OPTIONS_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_HT_RESULTS: {|
    +HT_RESULTS_Glyph: 1, // 1
    +HT_RESULTS_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_HTML_PAINT_DRAW_FLAGS: {|
    +HTML_PAINT_DRAW_FLAGS_Max: 2147483647, // 2147483647
    +HTMLPAINT_DRAW_UPDATEREGION: 1, // 1
    +HTMLPAINT_DRAW_USE_XFORM: 2 // 2
  |};

  declare var MSHTML$_HTML_PAINT_DRAW_INFO_FLAGS: {|
    +HTML_PAINT_DRAW_INFO_FLAGS_Max: 2147483647, // 2147483647
    +HTMLPAINT_DRAWINFO_UPDATEREGION: 2, // 2
    +HTMLPAINT_DRAWINFO_VIEWPORT: 1, // 1
    +HTMLPAINT_DRAWINFO_XFORM: 4 // 4
  |};

  declare var MSHTML$_HTML_PAINT_EVENT_FLAGS: {|
    +HTML_PAINT_EVENT_FLAGS_Max: 2147483647, // 2147483647
    +HTMLPAINT_EVENT_SETCURSOR: 2, // 2
    +HTMLPAINT_EVENT_TARGET: 1 // 1
  |};

  declare var MSHTML$_HTML_PAINT_ZORDER: {|
    +HTML_PAINT_ZORDER_Max: 2147483647, // 2147483647
    +HTMLPAINT_ZORDER_ABOVE_CONTENT: 7, // 7
    +HTMLPAINT_ZORDER_ABOVE_FLOW: 6, // 6
    +HTMLPAINT_ZORDER_BELOW_CONTENT: 4, // 4
    +HTMLPAINT_ZORDER_BELOW_FLOW: 5, // 5
    +HTMLPAINT_ZORDER_NONE: 0, // 0
    +HTMLPAINT_ZORDER_REPLACE_ALL: 1, // 1
    +HTMLPAINT_ZORDER_REPLACE_BACKGROUND: 3, // 3
    +HTMLPAINT_ZORDER_REPLACE_CONTENT: 2, // 2
    +HTMLPAINT_ZORDER_WINDOW_TOP: 8 // 8
  |};

  declare var MSHTML$_HTML_PAINTER: {|
    +HTML_PAINTER_Max: 2147483647, // 2147483647
    +HTMLPAINTER_3DSURFACE: 512, // 512
    +HTMLPAINTER_ALPHA: 4, // 4
    +HTMLPAINTER_COMPLEX: 8, // 8
    +HTMLPAINTER_EXPAND: 65536, // 65536
    +HTMLPAINTER_HITTEST: 32, // 32
    +HTMLPAINTER_NOBAND: 1024, // 1024
    +HTMLPAINTER_NODC: 4096, // 4096
    +HTMLPAINTER_NOPHYSICALCLIP: 8192, // 8192
    +HTMLPAINTER_NOSAVEDC: 16384, // 16384
    +HTMLPAINTER_NOSCROLLBITS: 131072, // 131072
    +HTMLPAINTER_OPAQUE: 1, // 1
    +HTMLPAINTER_OVERLAY: 16, // 16
    +HTMLPAINTER_SUPPORTS_XFORM: 32768, // 32768
    +HTMLPAINTER_SURFACE: 256, // 256
    +HTMLPAINTER_TRANSPARENT: 2 // 2
  |};

  declare var MSHTML$_htmlAdjacency: {|
    +htmlAdjacency_Max: 2147483647, // 2147483647
    +htmlAdjacencyAfterBegin: 2, // 2
    +htmlAdjacencyAfterEnd: 4, // 4
    +htmlAdjacencyBeforeBegin: 1, // 1
    +htmlAdjacencyBeforeEnd: 3 // 3
  |};

  declare var MSHTML$_HTMLAppFlag: {|
    +HTMLAppFlag_Max: 2147483647, // 2147483647
    +HTMLAppFlag0: 0, // 0
    +HTMLAppFlag1: 1, // 1
    +HTMLAppFlagNo: 0, // 0
    +HTMLAppFlagOff: 0, // 0
    +HTMLAppFlagOn: 1, // 1
    +HTMLAppFlagYes: 1 // 1
  |};

  declare var MSHTML$_htmlApplyLocation: {|
    +htmlApplyLocation_Max: 2147483647, // 2147483647
    +htmlApplyLocationInside: 0, // 0
    +htmlApplyLocationOutside: 1 // 1
  |};

  declare var MSHTML$_htmlBlockAlign: {|
    +htmlBlockAlign_Max: 2147483647, // 2147483647
    +htmlBlockAlignCenter: 2, // 2
    +htmlBlockAlignJustify: 4, // 4
    +htmlBlockAlignLeft: 1, // 1
    +htmlBlockAlignNotSet: 0, // 0
    +htmlBlockAlignRight: 3 // 3
  |};

  declare var MSHTML$_HTMLBorder: {|
    +HTMLBorder_Max: 2147483647, // 2147483647
    +HTMLBorderDialog: 4194304, // 4194304
    +HTMLBorderNone: 0, // 0
    +HTMLBorderThick: 262144, // 262144
    +HTMLBorderThin: 8388608 // 8388608
  |};

  declare var MSHTML$_HTMLBorderStyle: {|
    +HTMLBorderStyle_Max: 2147483647, // 2147483647
    +HTMLBorderStylecombined: 768, // 768
    +HTMLBorderStyleNormal: 0, // 0
    +HTMLBorderStyleRaised: 256, // 256
    +HTMLBorderStyleStatic: 131072, // 131072
    +HTMLBorderStyleSunken: 512 // 512
  |};

  declare var MSHTML$_htmlCaptionAlign: {|
    +htmlCaptionAlign_Max: 2147483647, // 2147483647
    +htmlCaptionAlignBottom: 6, // 6
    +htmlCaptionAlignCenter: 2, // 2
    +htmlCaptionAlignJustify: 4, // 4
    +htmlCaptionAlignLeft: 1, // 1
    +htmlCaptionAlignNotSet: 0, // 0
    +htmlCaptionAlignRight: 3, // 3
    +htmlCaptionAlignTop: 5 // 5
  |};

  declare var MSHTML$_HTMLCaptionFlag: {|
    +HTMLCaptionFlag_Max: 2147483647, // 2147483647
    +HTMLCaptionFlagNo: 0, // 0
    +HTMLCaptionFlagYes: 12582912 // 12582912
  |};

  declare var MSHTML$_htmlCaptionVAlign: {|
    +htmlCaptionVAlign_Max: 2147483647, // 2147483647
    +htmlCaptionVAlignBottom: 2, // 2
    +htmlCaptionVAlignNotSet: 0, // 0
    +htmlCaptionVAlignTop: 1 // 1
  |};

  declare var MSHTML$_htmlCellAlign: {|
    +htmlCellAlign_Max: 2147483647, // 2147483647
    +htmlCellAlignCenter: 2, // 2
    +htmlCellAlignLeft: 1, // 1
    +htmlCellAlignMiddle: 2, // 2
    +htmlCellAlignNotSet: 0, // 0
    +htmlCellAlignRight: 3 // 3
  |};

  declare var MSHTML$_htmlCellVAlign: {|
    +htmlCellVAlign_Max: 2147483647, // 2147483647
    +htmlCellVAlignBaseline: 4, // 4
    +htmlCellVAlignBottom: 3, // 3
    +htmlCellVAlignCenter: 2, // 2
    +htmlCellVAlignMiddle: 2, // 2
    +htmlCellVAlignNotSet: 0, // 0
    +htmlCellVAlignTop: 1 // 1
  |};

  declare var MSHTML$_htmlClear: {|
    +htmlClear_Max: 2147483647, // 2147483647
    +htmlClearAll: 1, // 1
    +htmlClearBoth: 4, // 4
    +htmlClearLeft: 2, // 2
    +htmlClearNone: 5, // 5
    +htmlClearNotSet: 0, // 0
    +htmlClearRight: 3 // 3
  |};

  declare var MSHTML$_htmlCompatMode: {|
    +htmlCompatMode_Max: 2147483647, // 2147483647
    +htmlCompatModeBackCompat: 0, // 0
    +htmlCompatModeCSS1Compat: 1 // 1
  |};

  declare var MSHTML$_htmlComponent: {|
    +htmlComponent_Max: 2147483647, // 2147483647
    +htmlComponentClient: 0, // 0
    +htmlComponentGHBottom: 27, // 27
    +htmlComponentGHBottomLeft: 25, // 25
    +htmlComponentGHBottomRight: 29, // 29
    +htmlComponentGHLeft: 23, // 23
    +htmlComponentGHRight: 28, // 28
    +htmlComponentGHTop: 24, // 24
    +htmlComponentGHTopLeft: 22, // 22
    +htmlComponentGHTopRight: 26, // 26
    +htmlComponentOutside: 21, // 21
    +htmlComponentSbBottom: 20, // 20
    +htmlComponentSbDown: 10, // 10
    +htmlComponentSbDown2: 17, // 17
    +htmlComponentSbHThumb: 3, // 3
    +htmlComponentSbLeft: 1, // 1
    +htmlComponentSbLeft2: 11, // 11
    +htmlComponentSbPageDown: 9, // 9
    +htmlComponentSbPageDown2: 18, // 18
    +htmlComponentSbPageLeft: 2, // 2
    +htmlComponentSbPageLeft2: 12, // 12
    +htmlComponentSbPageRight: 4, // 4
    +htmlComponentSbPageRight2: 14, // 14
    +htmlComponentSbPageUp: 7, // 7
    +htmlComponentSbPageUp2: 16, // 16
    +htmlComponentSbRight: 5, // 5
    +htmlComponentSbRight2: 13, // 13
    +htmlComponentSbTop: 19, // 19
    +htmlComponentSbUp: 6, // 6
    +htmlComponentSbUp2: 15, // 15
    +htmlComponentSbVThumb: 8 // 8
  |};

  declare var MSHTML$_htmlControlAlign: {|
    +htmlControlAlign_Max: 2147483647, // 2147483647
    +htmlControlAlignAbsBottom: 7, // 7
    +htmlControlAlignAbsMiddle: 5, // 5
    +htmlControlAlignBaseline: 6, // 6
    +htmlControlAlignBottom: 8, // 8
    +htmlControlAlignCenter: 2, // 2
    +htmlControlAlignLeft: 1, // 1
    +htmlControlAlignMiddle: 9, // 9
    +htmlControlAlignNotSet: 0, // 0
    +htmlControlAlignRight: 3, // 3
    +htmlControlAlignTextTop: 4, // 4
    +htmlControlAlignTop: 10 // 10
  |};

  declare var MSHTML$_htmlDesignMode: {|
    +htmlDesignMode_Max: 2147483647, // 2147483647
    +htmlDesignModeInherit: -2, // -2
    +htmlDesignModeOff: 0, // 0
    +htmlDesignModeOn: -1 // -1
  |};

  declare var MSHTML$_htmlDir: {|
    +htmlDir_Max: 2147483647, // 2147483647
    +htmlDirLeftToRight: 1, // 1
    +htmlDirNotSet: 0, // 0
    +htmlDirRightToLeft: 2 // 2
  |};

  declare var MSHTML$_htmlDirection: {|
    +htmlDirection_Max: 2147483647, // 2147483647
    +htmlDirectionBackward: -99999, // -99999
    +htmlDirectionForward: 99999 // 99999
  |};

  declare var MSHTML$_HTMLDlgBorder: {|
    +HTMLDlgBorder_Max: 2147483647, // 2147483647
    +HTMLDlgBorderThick: 262144, // 262144
    +HTMLDlgBorderThin: 0 // 0
  |};

  declare var MSHTML$_HTMLDlgCenter: {|
    +HTMLDlgCenter_Max: 2147483647, // 2147483647
    +HTMLDlgCenter0: 0, // 0
    +HTMLDlgCenter1: 1, // 1
    +HTMLDlgCenterDesktop: 2, // 2
    +HTMLDlgCenterNo: 0, // 0
    +HTMLDlgCenterOff: 0, // 0
    +HTMLDlgCenterOn: 1, // 1
    +HTMLDlgCenterParent: 1, // 1
    +HTMLDlgCenterYes: 1 // 1
  |};

  declare var MSHTML$_HTMLDlgEdge: {|
    +HTMLDlgEdge_Max: 2147483647, // 2147483647
    +HTMLDlgEdgeRaised: 16, // 16
    +HTMLDlgEdgeSunken: 0 // 0
  |};

  declare var MSHTML$_HTMLDlgFlag: {|
    +HTMLDlgFlag_Max: 2147483647, // 2147483647
    +HTMLDlgFlag0: 0, // 0
    +HTMLDlgFlag1: 1, // 1
    +HTMLDlgFlagNo: 0, // 0
    +HTMLDlgFlagNotSet: -1, // -1
    +HTMLDlgFlagOff: 0, // 0
    +HTMLDlgFlagOn: 1, // 1
    +HTMLDlgFlagYes: 1 // 1
  |};

  declare var MSHTML$_htmlDraggable: {|
    +htmlDraggable_Max: 2147483647, // 2147483647
    +htmlDraggableAuto: 0, // 0
    +htmlDraggableFalse: 2, // 2
    +htmlDraggableTrue: 1 // 1
  |};

  declare var MSHTML$_htmlDropEffect: {|
    +htmlDropEffect_Max: 2147483647, // 2147483647
    +htmlDropEffectCopy: 0, // 0
    +htmlDropEffectLink: 1, // 1
    +htmlDropEffectMove: 2, // 2
    +htmlDropEffectNone: 3 // 3
  |};

  declare var MSHTML$_htmlEditable: {|
    +htmlEditable_Max: 2147483647, // 2147483647
    +htmlEditableFalse: 2, // 2
    +htmlEditableInherit: 0, // 0
    +htmlEditableTrue: 1 // 1
  |};

  declare var MSHTML$_htmlEffectAllowed: {|
    +htmlEffectAllowed_Max: 2147483647, // 2147483647
    +htmlEffectAllowedAll: 6, // 6
    +htmlEffectAllowedCopy: 0, // 0
    +htmlEffectAllowedCopyLink: 3, // 3
    +htmlEffectAllowedCopyMove: 4, // 4
    +htmlEffectAllowedLink: 1, // 1
    +htmlEffectAllowedLinkMove: 5, // 5
    +htmlEffectAllowedMove: 2, // 2
    +htmlEffectAllowedNone: 7, // 7
    +htmlEffectAllowedUninitialized: 8 // 8
  |};

  declare var MSHTML$_htmlEncoding: {|
    +htmlEncoding_Max: 2147483647, // 2147483647
    +htmlEncodingMultipart: 1, // 1
    +htmlEncodingText: 2, // 2
    +htmlEncodingURL: 0 // 0
  |};

  declare var MSHTML$_htmlEndPoints: {|
    +htmlEndPoints_Max: 2147483647, // 2147483647
    +htmlEndPointsEndToEnd: 4, // 4
    +htmlEndPointsEndToStart: 3, // 3
    +htmlEndPointsStartToEnd: 2, // 2
    +htmlEndPointsStartToStart: 1 // 1
  |};

  declare var MSHTML$_htmlFrame: {|
    +htmlFrame_Max: 2147483647, // 2147483647
    +htmlFrameabove: 2, // 2
    +htmlFramebelow: 3, // 3
    +htmlFrameborder: 9, // 9
    +htmlFramebox: 8, // 8
    +htmlFramehsides: 4, // 4
    +htmlFramelhs: 5, // 5
    +htmlFrameNotSet: 0, // 0
    +htmlFramerhs: 6, // 6
    +htmlFramevoid: 1, // 1
    +htmlFramevsides: 7 // 7
  |};

  declare var MSHTML$_htmlGlyphMode: {|
    +htmlGlyphMode_Max: 2147483647, // 2147483647
    +htmlGlyphModeBegin: 1, // 1
    +htmlGlyphModeBoth: 3, // 3
    +htmlGlyphModeEnd: 2, // 2
    +htmlGlyphModeNone: 0 // 0
  |};

  declare var MSHTML$_htmlInput: {|
    +htmlInput_Max: 2147483647, // 2147483647
    +htmlInputButton: 1, // 1
    +htmlInputCheckbox: 2, // 2
    +htmlInputEmail: 17, // 17
    +htmlInputFile: 3, // 3
    +htmlInputHidden: 4, // 4
    +htmlInputImage: 5, // 5
    +htmlInputNotSet: 0, // 0
    +htmlInputNumber: 18, // 18
    +htmlInputPassword: 6, // 6
    +htmlInputRadio: 7, // 7
    +htmlInputRange: 15, // 15
    +htmlInputReset: 8, // 8
    +htmlInputRichtext: 14, // 14
    +htmlInputSearch: 20, // 20
    +htmlInputSelectMultiple: 10, // 10
    +htmlInputSelectOne: 9, // 9
    +htmlInputSubmit: 11, // 11
    +htmlInputTel: 19, // 19
    +htmlInputText: 12, // 12
    +htmlInputTextarea: 13, // 13
    +htmlInputUrl: 16 // 16
  |};

  declare var MSHTML$_htmlListType: {|
    +htmlListType_Max: 2147483647, // 2147483647
    +htmlListTypeCircle: 7, // 7
    +htmlListTypeDisc: 6, // 6
    +htmlListTypeLargeAlpha: 1, // 1
    +htmlListTypeLargeRoman: 3, // 3
    +htmlListTypeNotSet: 0, // 0
    +htmlListTypeNumbers: 5, // 5
    +htmlListTypeSmallAlpha: 2, // 2
    +htmlListTypeSmallRoman: 4, // 4
    +htmlListTypeSquare: 8 // 8
  |};

  declare var MSHTML$_htmlLoop: {|
    +htmlLoop_Max: 2147483647, // 2147483647
    +htmlLoopLoopInfinite: -1 // -1
  |};

  declare var MSHTML$_htmlMarqueeBehavior: {|
    +htmlMarqueeBehavior_Max: 2147483647, // 2147483647
    +htmlMarqueeBehavioralternate: 3, // 3
    +htmlMarqueeBehaviorscroll: 1, // 1
    +htmlMarqueeBehaviorslide: 2 // 2
  |};

  declare var MSHTML$_htmlMarqueeDirection: {|
    +htmlMarqueeDirection_Max: 2147483647, // 2147483647
    +htmlMarqueeDirectiondown: 7, // 7
    +htmlMarqueeDirectionleft: 1, // 1
    +htmlMarqueeDirectionright: 3, // 3
    +htmlMarqueeDirectionup: 5 // 5
  |};

  declare var MSHTML$_HTMLMaximizeFlag: {|
    +HTMLMaximizeFlag_Max: 2147483647, // 2147483647
    +HTMLMaximizeFlagNo: 0, // 0
    +HTMLMaximizeFlagYes: 65536 // 65536
  |};

  declare var MSHTML$_htmlMediaErr: {|
    +htmlMediaErr_Max: 2147483647, // 2147483647
    +htmlMediaErrAborted: 0, // 0
    +htmlMediaErrDecode: 2, // 2
    +htmlMediaErrNetwork: 1, // 1
    +htmlMediaErrSrcNotSupported: 3 // 3
  |};

  declare var MSHTML$_htmlMediaNetworkState: {|
    +htmlMediaNetworkState_Max: 2147483647, // 2147483647
    +htmlMediaNetworkStateEmpty: 0, // 0
    +htmlMediaNetworkStateIdle: 1, // 1
    +htmlMediaNetworkStateLoading: 2, // 2
    +htmlMediaNetworkStateNoSource: 3 // 3
  |};

  declare var MSHTML$_htmlMediaReadyState: {|
    +htmlMediaReadyState_Max: 2147483647, // 2147483647
    +htmlMediaReadyStateHaveCurrentData: 2, // 2
    +htmlMediaReadyStateHaveEnoughData: 4, // 4
    +htmlMediaReadyStateHaveFutureData: 3, // 3
    +htmlMediaReadyStateHaveMetadata: 1, // 1
    +htmlMediaReadyStateHaveNothing: 0 // 0
  |};

  declare var MSHTML$_htmlMethod: {|
    +htmlMethod_Max: 2147483647, // 2147483647
    +htmlMethodGet: 1, // 1
    +htmlMethodNotSet: 0, // 0
    +htmlMethodPost: 2 // 2
  |};

  declare var MSHTML$_HTMLMinimizeFlag: {|
    +HTMLMinimizeFlag_Max: 2147483647, // 2147483647
    +HTMLMinimizeFlagNo: 0, // 0
    +HTMLMinimizeFlagYes: 131072 // 131072
  |};

  declare var MSHTML$_htmlPersistState: {|
    +htmlPersistState_Max: 2147483647, // 2147483647
    +htmlPersistStateFavorite: 1, // 1
    +htmlPersistStateHistory: 2, // 2
    +htmlPersistStateNormal: 0, // 0
    +htmlPersistStateSnapshot: 3, // 3
    +htmlPersistStateUserData: 4 // 4
  |};

  declare var MSHTML$_htmlReadyState: {|
    +htmlReadyState_Max: 2147483647, // 2147483647
    +htmlReadyStatecomplete: 4, // 4
    +htmlReadyStateinteractive: 3, // 3
    +htmlReadyStateloaded: 2, // 2
    +htmlReadyStateloading: 1, // 1
    +htmlReadyStateuninitialized: 0 // 0
  |};

  declare var MSHTML$_htmlRules: {|
    +htmlRules_Max: 2147483647, // 2147483647
    +htmlRulesall: 5, // 5
    +htmlRulescols: 4, // 4
    +htmlRulesgroups: 2, // 2
    +htmlRulesnone: 1, // 1
    +htmlRulesNotSet: 0, // 0
    +htmlRulesrows: 3 // 3
  |};

  declare var MSHTML$_htmlSelectExFlag: {|
    +htmlSelectExFlag_Max: 2147483647, // 2147483647
    +htmlSelectExFlagHideSelectionInDesign: 1, // 1
    +htmlSelectExFlagNone: 0 // 0
  |};

  declare var MSHTML$_htmlSelection: {|
    +htmlSelection_Max: 2147483647, // 2147483647
    +htmlSelectionControl: 2, // 2
    +htmlSelectionNone: 0, // 0
    +htmlSelectionTable: 3, // 3
    +htmlSelectionText: 1 // 1
  |};

  declare var MSHTML$_htmlSelectType: {|
    +htmlSelectType_Max: 2147483647, // 2147483647
    +htmlSelectTypeSelectMultiple: 2, // 2
    +htmlSelectTypeSelectOne: 1 // 1
  |};

  declare var MSHTML$_htmlSpellCheck: {|
    +htmlSpellCheck_Max: 2147483647, // 2147483647
    +htmlSpellCheckDefault: 3, // 3
    +htmlSpellCheckFalse: 2, // 2
    +htmlSpellCheckNotSet: 0, // 0
    +htmlSpellCheckTrue: 1 // 1
  |};

  declare var MSHTML$_htmlStart: {|
    +htmlStart_Max: 2147483647, // 2147483647
    +htmlStartfileopen: 0, // 0
    +htmlStartmouseover: 1 // 1
  |};

  declare var MSHTML$_HTMLSysMenuFlag: {|
    +HTMLSysMenuFlag_Max: 2147483647, // 2147483647
    +HTMLSysMenuFlagNo: 0, // 0
    +HTMLSysMenuFlagYes: 524288 // 524288
  |};

  declare var MSHTML$_htmlTabIndex: {|
    +htmlTabIndex_Max: 2147483647, // 2147483647
    +htmlTabIndexNotSet: -32768 // -32768
  |};

  declare var MSHTML$_htmlUnit: {|
    +htmlUnit_Max: 2147483647, // 2147483647
    +htmlUnitCharacter: 1, // 1
    +htmlUnitSentence: 3, // 3
    +htmlUnitTextEdit: 6, // 6
    +htmlUnitWord: 2 // 2
  |};

  declare var MSHTML$_HTMLWindowState: {|
    +HTMLWindowState_Max: 2147483647, // 2147483647
    +HTMLWindowStateMaximize: 3, // 3
    +HTMLWindowStateMinimize: 6, // 6
    +HTMLWindowStateNormal: 1 // 1
  |};

  declare var MSHTML$_htmlWrap: {|
    +htmlWrap_Max: 2147483647, // 2147483647
    +htmlWrapHard: 3, // 3
    +htmlWrapOff: 1, // 1
    +htmlWrapSoft: 2 // 2
  |};

  declare var MSHTML$_htmlZOrder: {|
    +htmlZOrder_Max: 2147483647, // 2147483647
    +htmlZOrderBack: 1, // 1
    +htmlZOrderFront: 0 // 0
  |};

  declare var MSHTML$_lengthAdjust: {|
    +lengthAdjust_Max: 2147483647, // 2147483647
    +LENGTHADJUST_SPACING: 1, // 1
    +LENGTHADJUST_SPACINGANDGLYPHS: 2, // 2
    +LENGTHADJUST_UNKNOWN: 0 // 0
  |};

  declare var MSHTML$_LINE_DIRECTION: {|
    +LINE_DIRECTION_LeftToRight: 2, // 2
    +LINE_DIRECTION_Max: 2147483647, // 2147483647
    +LINE_DIRECTION_RightToLeft: 1 // 1
  |};

  declare var MSHTML$_MARKUP_CONTEXT_TYPE: {|
    +CONTEXT_TYPE_EnterScope: 2, // 2
    +CONTEXT_TYPE_ExitScope: 3, // 3
    +CONTEXT_TYPE_None: 0, // 0
    +CONTEXT_TYPE_NoScope: 4, // 4
    +CONTEXT_TYPE_Text: 1, // 1
    +MARKUP_CONTEXT_TYPE_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_mediaType: {|
    +mediaType_Max: 2147483647, // 2147483647
    +mediaTypeAll: 511, // 511
    +mediaTypeAural: 1, // 1
    +mediaTypeBraille: 2, // 2
    +mediaTypeEmbossed: 4, // 4
    +mediaTypeHandheld: 8, // 8
    +mediaTypeNotSet: 0, // 0
    +mediaTypePrint: 16, // 16
    +mediaTypeProjection: 32, // 32
    +mediaTypeScreen: 64, // 64
    +mediaTypeTty: 128, // 128
    +mediaTypeTv: 256 // 256
  |};

  declare var MSHTML$_MOVEUNIT_ACTION: {|
    +MOVEUNIT_ACTION_Max: 2147483647, // 2147483647
    +MOVEUNIT_NEXTBLOCK: 19, // 19
    +MOVEUNIT_NEXTCHAR: 1, // 1
    +MOVEUNIT_NEXTCLUSTERBEGIN: 3, // 3
    +MOVEUNIT_NEXTCLUSTEREND: 5, // 5
    +MOVEUNIT_NEXTPROOFWORD: 11, // 11
    +MOVEUNIT_NEXTSENTENCE: 17, // 17
    +MOVEUNIT_NEXTURLBEGIN: 12, // 12
    +MOVEUNIT_NEXTURLEND: 14, // 14
    +MOVEUNIT_NEXTWORDBEGIN: 7, // 7
    +MOVEUNIT_NEXTWORDEND: 9, // 9
    +MOVEUNIT_PREVBLOCK: 18, // 18
    +MOVEUNIT_PREVCHAR: 0, // 0
    +MOVEUNIT_PREVCLUSTERBEGIN: 2, // 2
    +MOVEUNIT_PREVCLUSTEREND: 4, // 4
    +MOVEUNIT_PREVPROOFWORD: 10, // 10
    +MOVEUNIT_PREVSENTENCE: 16, // 16
    +MOVEUNIT_PREVURLBEGIN: 13, // 13
    +MOVEUNIT_PREVURLEND: 15, // 15
    +MOVEUNIT_PREVWORDBEGIN: 6, // 6
    +MOVEUNIT_PREVWORDEND: 8 // 8
  |};

  declare var MSHTML$_PARSE_FLAGS: {|
    +PARSE_ABSOLUTIFYIE40URLS: 1, // 1
    +PARSE_DISABLEVML: 2, // 2
    +PARSE_FLAGS_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_POINTER_GRAVITY: {|
    +POINTER_GRAVITY_Left: 0, // 0
    +POINTER_GRAVITY_Max: 2147483647, // 2147483647
    +POINTER_GRAVITY_Right: 1 // 1
  |};

  declare var MSHTML$_sandboxAllow: {|
    +sandboxAllow_Max: 2147483647, // 2147483647
    +sandboxAllowForms: 3, // 3
    +sandboxAllowPopups: 4, // 4
    +sandboxAllowSameOrigin: 1, // 1
    +sandboxAllowScripts: 0, // 0
    +sandboxAllowTopNavigation: 2 // 2
  |};

  declare var MSHTML$_SAVE_SEGMENTS_FLAGS: {|
    +SAVE_SEGMENTS_FLAGS_Max: 2147483647, // 2147483647
    +SAVE_SEGMENTS_NoIE4SelectionCompat: 1 // 1
  |};

  declare var MSHTML$_SCRIPT_TIMER_TYPE: {|
    +SCRIPT_TIMER_TYPE_Max: 2147483647, // 2147483647
    +STT_ANIMATION_FRAME: 3, // 3
    +STT_IMMEDIATE: 2, // 2
    +STT_INTERVAL: 1, // 1
    +STT_TIMEOUT: 0 // 0
  |};

  declare var MSHTML$_SECUREURLHOSTVALIDATE_FLAGS: {|
    +SECUREURLHOSTVALIDATE_FLAGS_Max: 2147483647, // 2147483647
    +SUHV_PROMPTBEFORENO: 1, // 1
    +SUHV_SILENTYES: 2, // 2
    +SUHV_UNSECURESOURCE: 4 // 4
  |};

  declare var MSHTML$_SELECTION_TYPE: {|
    +SELECTION_TYPE_Caret: 1, // 1
    +SELECTION_TYPE_Control: 3, // 3
    +SELECTION_TYPE_Max: 2147483647, // 2147483647
    +SELECTION_TYPE_None: 0, // 0
    +SELECTION_TYPE_Text: 2 // 2
  |};

  declare var MSHTML$_styleAccelerator: {|
    +styleAccelerator_Max: 2147483647, // 2147483647
    +styleAcceleratorFalse: 0, // 0
    +styleAcceleratorTrue: 1 // 1
  |};

  declare var MSHTML$_styleAlignContent: {|
    +styleAlignContent_Max: 2147483647, // 2147483647
    +styleAlignContentCenter: 2, // 2
    +styleAlignContentFlexEnd: 1, // 1
    +styleAlignContentFlexStart: 0, // 0
    +styleAlignContentNotSet: 6, // 6
    +styleAlignContentSpaceAround: 4, // 4
    +styleAlignContentSpaceBetween: 3, // 3
    +styleAlignContentStretch: 5 // 5
  |};

  declare var MSHTML$_styleAlignItems: {|
    +styleAlignItems_Max: 2147483647, // 2147483647
    +styleAlignItemsBaseline: 3, // 3
    +styleAlignItemsCenter: 2, // 2
    +styleAlignItemsFlexEnd: 1, // 1
    +styleAlignItemsFlexStart: 0, // 0
    +styleAlignItemsNotSet: 5, // 5
    +styleAlignItemsStretch: 4 // 4
  |};

  declare var MSHTML$_styleAlignmentBaseline: {|
    +styleAlignmentBaseline_Max: 2147483647, // 2147483647
    +styleAlignmentBaselineAfterEdge: 1, // 1
    +styleAlignmentBaselineAlphabetic: 2, // 2
    +styleAlignmentBaselineAuto: 3, // 3
    +styleAlignmentBaselineBaseline: 4, // 4
    +styleAlignmentBaselineBeforeEdge: 5, // 5
    +styleAlignmentBaselineCentral: 6, // 6
    +styleAlignmentBaselineHanging: 7, // 7
    +styleAlignmentBaselineIdeographic: 12, // 12
    +styleAlignmentBaselineMathematical: 8, // 8
    +styleAlignmentBaselineMiddle: 9, // 9
    +styleAlignmentBaselineNotSet: 0, // 0
    +styleAlignmentBaselineTextAfterEdge: 10, // 10
    +styleAlignmentBaselineTextBeforeEdge: 11 // 11
  |};

  declare var MSHTML$_styleAlignSelf: {|
    +styleAlignSelf_Max: 2147483647, // 2147483647
    +styleAlignSelfAuto: 5, // 5
    +styleAlignSelfBaseline: 3, // 3
    +styleAlignSelfCenter: 2, // 2
    +styleAlignSelfFlexEnd: 1, // 1
    +styleAlignSelfFlexStart: 0, // 0
    +styleAlignSelfNotSet: 6, // 6
    +styleAlignSelfStretch: 4 // 4
  |};

  declare var MSHTML$_styleAttrType: {|
    +styleAttrType_Max: 2147483647, // 2147483647
    +styleAttrTypeAngle: 20, // 20
    +styleAttrTypeCh: 15, // 15
    +styleAttrTypeCm: 10, // 10
    +styleAttrTypeColor: 1, // 1
    +styleAttrTypeDeg: 21, // 21
    +styleAttrTypeEm: 7, // 7
    +styleAttrTypeEx: 8, // 8
    +styleAttrTypeGrad: 23, // 23
    +styleAttrTypeIn: 9, // 9
    +styleAttrTypeInteger: 3, // 3
    +styleAttrTypeLength: 5, // 5
    +styleAttrTypeMm: 11, // 11
    +styleAttrTypeMs: 26, // 26
    +styleAttrTypeNumber: 4, // 4
    +styleAttrTypePc: 13, // 13
    +styleAttrTypePercentage: 19, // 19
    +styleAttrTypePt: 12, // 12
    +styleAttrTypePx: 6, // 6
    +styleAttrTypeRad: 22, // 22
    +styleAttrTypeRem: 14, // 14
    +styleAttrTypeS: 25, // 25
    +styleAttrTypeString: 0, // 0
    +styleAttrTypeTime: 24, // 24
    +styleAttrTypeUrl: 2, // 2
    +styleAttrTypeVh: 16, // 16
    +styleAttrTypeVmin: 18, // 18
    +styleAttrTypeVw: 17 // 17
  |};

  declare var MSHTML$_styleAuto: {|
    +styleAuto_Max: 2147483647, // 2147483647
    +styleAutoAuto: 0 // 0
  |};

  declare var MSHTML$_styleBackfaceVisibility: {|
    +styleBackfaceVisibility_Max: 2147483647, // 2147483647
    +styleBackfaceVisibilityHidden: 1, // 1
    +styleBackfaceVisibilityNotSet: 2, // 2
    +styleBackfaceVisibilityVisible: 0 // 0
  |};

  declare var MSHTML$_styleBackgroundAttachment: {|
    +styleBackgroundAttachment_Max: 2147483647, // 2147483647
    +styleBackgroundAttachmentFixed: 0, // 0
    +styleBackgroundAttachmentNotSet: 2, // 2
    +styleBackgroundAttachmentScroll: 1 // 1
  |};

  declare var MSHTML$_styleBackgroundAttachment3: {|
    +styleBackgroundAttachment3_Max: 2147483647, // 2147483647
    +styleBackgroundAttachment3Fixed: 0, // 0
    +styleBackgroundAttachment3Local: 2, // 2
    +styleBackgroundAttachment3NotSet: 3, // 3
    +styleBackgroundAttachment3Scroll: 1 // 1
  |};

  declare var MSHTML$_styleBackgroundClip: {|
    +styleBackgroundClip_Max: 2147483647, // 2147483647
    +styleBackgroundClipBorderBox: 0, // 0
    +styleBackgroundClipContentBox: 2, // 2
    +styleBackgroundClipNotSet: 3, // 3
    +styleBackgroundClipPaddingBox: 1 // 1
  |};

  declare var MSHTML$_styleBackgroundOrigin: {|
    +styleBackgroundOrigin_Max: 2147483647, // 2147483647
    +styleBackgroundOriginBorderBox: 0, // 0
    +styleBackgroundOriginContentBox: 2, // 2
    +styleBackgroundOriginNotSet: 3, // 3
    +styleBackgroundOriginPaddingBox: 1 // 1
  |};

  declare var MSHTML$_styleBackgroundRepeat: {|
    +styleBackgroundRepeat_Max: 2147483647, // 2147483647
    +styleBackgroundRepeatNoRepeat: 3, // 3
    +styleBackgroundRepeatNotSet: 4, // 4
    +styleBackgroundRepeatRepeat: 0, // 0
    +styleBackgroundRepeatRepeatX: 1, // 1
    +styleBackgroundRepeatRepeatY: 2 // 2
  |};

  declare var MSHTML$_styleBaselineShift: {|
    +styleBaselineShift_Max: 2147483647, // 2147483647
    +styleBaselineShiftBaseline: 0, // 0
    +styleBaselineShiftSub: 1, // 1
    +styleBaselineShiftSuper: 2 // 2
  |};

  declare var MSHTML$_styleBidi: {|
    +styleBidi_Max: 2147483647, // 2147483647
    +styleBidiEmbed: 2, // 2
    +styleBidiInherit: 4, // 4
    +styleBidiNormal: 1, // 1
    +styleBidiNotSet: 0, // 0
    +styleBidiOverride: 3 // 3
  |};

  declare var MSHTML$_styleBlockProgression: {|
    +styleBlockProgression_Max: 2147483647, // 2147483647
    +styleBlockProgressionBt: 2, // 2
    +styleBlockProgressionLr: 3, // 3
    +styleBlockProgressionNotSet: 4, // 4
    +styleBlockProgressionRl: 1, // 1
    +styleBlockProgressionTb: 0 // 0
  |};

  declare var MSHTML$_styleBool: {|
    +styleBool_Max: 2147483647, // 2147483647
    +styleBoolFalse: 0, // 0
    +styleBoolTrue: 1 // 1
  |};

  declare var MSHTML$_styleBorderCollapse: {|
    +styleBorderCollapse_Max: 2147483647, // 2147483647
    +styleBorderCollapseCollapse: 2, // 2
    +styleBorderCollapseNotSet: 0, // 0
    +styleBorderCollapseSeparate: 1 // 1
  |};

  declare var MSHTML$_styleBorderImageRepeat: {|
    +styleBorderImageRepeat_Max: 2147483647, // 2147483647
    +styleBorderImageRepeatNotSet: 4, // 4
    +styleBorderImageRepeatRepeat: 1, // 1
    +styleBorderImageRepeatRound: 2, // 2
    +styleBorderImageRepeatSpace: 3, // 3
    +styleBorderImageRepeatStretch: 0 // 0
  |};

  declare var MSHTML$_styleBorderImageSliceFill: {|
    +styleBorderImageSliceFill_Max: 2147483647, // 2147483647
    +styleBorderImageSliceFillFill: 1, // 1
    +styleBorderImageSliceFillNotSet: 0 // 0
  |};

  declare var MSHTML$_styleBorderStyle: {|
    +styleBorderStyle_Max: 2147483647, // 2147483647
    +styleBorderStyleDashed: 2, // 2
    +styleBorderStyleDotted: 1, // 1
    +styleBorderStyleDouble: 4, // 4
    +styleBorderStyleGroove: 5, // 5
    +styleBorderStyleHidden: 11, // 11
    +styleBorderStyleInset: 7, // 7
    +styleBorderStyleNone: 10, // 10
    +styleBorderStyleNotSet: 0, // 0
    +styleBorderStyleOutset: 8, // 8
    +styleBorderStyleRidge: 6, // 6
    +styleBorderStyleSolid: 3, // 3
    +styleBorderStyleWindowInset: 9 // 9
  |};

  declare var MSHTML$_styleBorderWidth: {|
    +styleBorderWidth_Max: 2147483647, // 2147483647
    +styleBorderWidthMedium: 1, // 1
    +styleBorderWidthThick: 2, // 2
    +styleBorderWidthThin: 0 // 0
  |};

  declare var MSHTML$_styleBoxSizing: {|
    +styleBoxSizing_Max: 2147483647, // 2147483647
    +styleBoxSizingBorderBox: 2, // 2
    +styleBoxSizingContentBox: 1, // 1
    +styleBoxSizingNotSet: 0 // 0
  |};

  declare var MSHTML$_styleBreak: {|
    +styleBreak_Max: 2147483647, // 2147483647
    +styleBreakAlways: 2, // 2
    +styleBreakAuto: 1, // 1
    +styleBreakAvoid: 3, // 3
    +styleBreakAvoidColumn: 9, // 9
    +styleBreakAvoidPage: 8, // 8
    +styleBreakColumn: 7, // 7
    +styleBreakLeft: 4, // 4
    +styleBreakNotSet: 0, // 0
    +styleBreakPage: 6, // 6
    +styleBreakRight: 5 // 5
  |};

  declare var MSHTML$_styleBreakInside: {|
    +styleBreakInside_Max: 2147483647, // 2147483647
    +styleBreakInsideAuto: 1, // 1
    +styleBreakInsideAvoid: 2, // 2
    +styleBreakInsideAvoidColumn: 4, // 4
    +styleBreakInsideAvoidPage: 3, // 3
    +styleBreakInsideNotSet: 0 // 0
  |};

  declare var MSHTML$_styleCaptionSide: {|
    +styleCaptionSide_Max: 2147483647, // 2147483647
    +styleCaptionSideBottom: 2, // 2
    +styleCaptionSideLeft: 3, // 3
    +styleCaptionSideNotSet: 0, // 0
    +styleCaptionSideRight: 4, // 4
    +styleCaptionSideTop: 1 // 1
  |};

  declare var MSHTML$_styleClipRule: {|
    +styleClipRule_Max: 2147483647, // 2147483647
    +styleClipRuleEvenOdd: 2, // 2
    +styleClipRuleNonZero: 1, // 1
    +styleClipRuleNotSet: 0 // 0
  |};

  declare var MSHTML$_styleColorInterpolationFilters: {|
    +styleColorInterpolationFilters_Max: 2147483647, // 2147483647
    +styleColorInterpolationFiltersAuto: 0, // 0
    +styleColorInterpolationFiltersLinearRgb: 2, // 2
    +styleColorInterpolationFiltersNotSet: 3, // 3
    +styleColorInterpolationFiltersSRgb: 1 // 1
  |};

  declare var MSHTML$_styleColumnFill: {|
    +styleColumnFill_Max: 2147483647, // 2147483647
    +styleColumnFillAuto: 0, // 0
    +styleColumnFillBalance: 1, // 1
    +styleColumnFillNotSet: 2 // 2
  |};

  declare var MSHTML$_styleColumnSpan: {|
    +styleColumnSpan_Max: 2147483647, // 2147483647
    +styleColumnSpanAll: 1, // 1
    +styleColumnSpanNone: 0, // 0
    +styleColumnSpanNotSet: 3, // 3
    +styleColumnSpanOne: 2 // 2
  |};

  declare var MSHTML$_styleCursor: {|
    +styleCursor_Max: 2147483647, // 2147483647
    +styleCursorAlias: 32, // 32
    +styleCursorall_scroll: 21, // 21
    +styleCursorAuto: 0, // 0
    +styleCursorCell: 30, // 30
    +styleCursorcol_resize: 22, // 22
    +styleCursorContext_menu: 25, // 25
    +styleCursorCopy: 31, // 31
    +styleCursorCrosshair: 1, // 1
    +styleCursorcustom: 33, // 33
    +styleCursorDefault: 2, // 2
    +styleCursorE_resize: 5, // 5
    +styleCursorEw_resize: 26, // 26
    +styleCursorHand: 3, // 3
    +styleCursorHelp: 15, // 15
    +styleCursorMove: 4, // 4
    +styleCursorN_resize: 8, // 8
    +styleCursorNe_resize: 6, // 6
    +styleCursorNesw_resize: 28, // 28
    +styleCursorNo_drop: 19, // 19
    +styleCursorNone: 24, // 24
    +styleCursorNot_allowed: 18, // 18
    +styleCursorNotSet: 34, // 34
    +styleCursorNs_resize: 27, // 27
    +styleCursorNw_resize: 7, // 7
    +styleCursorNwse_resize: 29, // 29
    +styleCursorPointer: 16, // 16
    +styleCursorProgress: 17, // 17
    +styleCursorrow_resize: 23, // 23
    +styleCursorS_resize: 11, // 11
    +styleCursorSe_resize: 9, // 9
    +styleCursorSw_resize: 10, // 10
    +styleCursorText: 13, // 13
    +styleCursorVertical_text: 20, // 20
    +styleCursorW_resize: 12, // 12
    +styleCursorWait: 14 // 14
  |};

  declare var MSHTML$_styleDataRepeat: {|
    +styleDataRepeat_Max: 2147483647, // 2147483647
    +styleDataRepeatInner: 1, // 1
    +styleDataRepeatNone: 0 // 0
  |};

  declare var MSHTML$_styleDefaultTextSelection: {|
    +styleDefaultTextSelection_Max: 2147483647, // 2147483647
    +styleDefaultTextSelectionFalse: 0, // 0
    +styleDefaultTextSelectionTrue: 1 // 1
  |};

  declare var MSHTML$_styleDir: {|
    +styleDir_Max: 2147483647, // 2147483647
    +styleDirInherit: 3, // 3
    +styleDirLeftToRight: 1, // 1
    +styleDirNotSet: 0, // 0
    +styleDirRightToLeft: 2 // 2
  |};

  declare var MSHTML$_styleDisplay: {|
    +styleDisplay_Max: 2147483647, // 2147483647
    +styleDisplayBlock: 1, // 1
    +styleDisplayFlex: 26, // 26
    +styleDisplayInline: 2, // 2
    +styleDisplayInlineBlock: 7, // 7
    +styleDisplayInlineFlex: 27, // 27
    +styleDisplayInlineTable: 9, // 9
    +styleDisplayListItem: 3, // 3
    +styleDisplayMsFlexbox: 22, // 22
    +styleDisplayMsGrid: 24, // 24
    +styleDisplayMsInlineFlexbox: 23, // 23
    +styleDisplayMsInlineGrid: 25, // 25
    +styleDisplayNone: 4, // 4
    +styleDisplayNotSet: 0, // 0
    +styleDisplayRuby: 17, // 17
    +styleDisplayRubyBase: 18, // 18
    +styleDisplayRubyBaseContainer: 20, // 20
    +styleDisplayRubyText: 19, // 19
    +styleDisplayRubyTextContainer: 21, // 21
    +styleDisplayRunIn: 16, // 16
    +styleDisplayTable: 8, // 8
    +styleDisplayTableCaption: 15, // 15
    +styleDisplayTableCell: 14, // 14
    +styleDisplayTableColumn: 12, // 12
    +styleDisplayTableColumnGroup: 13, // 13
    +styleDisplayTableFooterGroup: 6, // 6
    +styleDisplayTableHeaderGroup: 5, // 5
    +styleDisplayTableRow: 10, // 10
    +styleDisplayTableRowGroup: 11, // 11
    +styleDisplayWebkitBox: 28, // 28
    +styleDisplayWebkitInlineBox: 29 // 29
  |};

  declare var MSHTML$_styleDominantBaseline: {|
    +styleDominantBaseline_Max: 2147483647, // 2147483647
    +styleDominantBaselineAlphabetic: 1, // 1
    +styleDominantBaselineAuto: 2, // 2
    +styleDominantBaselineCentral: 3, // 3
    +styleDominantBaselineHanging: 4, // 4
    +styleDominantBaselineIdeographic: 5, // 5
    +styleDominantBaselineMathematical: 6, // 6
    +styleDominantBaselineMiddle: 7, // 7
    +styleDominantBaselineNoChange: 8, // 8
    +styleDominantBaselineNotSet: 0, // 0
    +styleDominantBaselineResetSize: 9, // 9
    +styleDominantBaselineTextAfterEdge: 10, // 10
    +styleDominantBaselineTextBeforeEdge: 11, // 11
    +styleDominantBaselineUseScript: 12 // 12
  |};

  declare var MSHTML$_styleEmptyCells: {|
    +styleEmptyCells_Max: 2147483647, // 2147483647
    +styleEmptyCellsHide: 2, // 2
    +styleEmptyCellsNotSet: 0, // 0
    +styleEmptyCellsShow: 1 // 1
  |};

  declare var MSHTML$_styleEnableBackground: {|
    +styleEnableBackground_Max: 2147483647, // 2147483647
    +styleEnableBackgroundAccumulate: 1, // 1
    +styleEnableBackgroundInherit: 3, // 3
    +styleEnableBackgroundNew: 2, // 2
    +styleEnableBackgroundNotSet: 0 // 0
  |};

  declare var MSHTML$_styleFillRule: {|
    +styleFillRule_Max: 2147483647, // 2147483647
    +styleFillRuleEvenOdd: 2, // 2
    +styleFillRuleNonZero: 1, // 1
    +styleFillRuleNotSet: 0 // 0
  |};

  declare var MSHTML$_styleFlex: {|
    +styleFlex_Max: 2147483647, // 2147483647
    +styleFlexNone: 0, // 0
    +styleFlexNotSet: 1 // 1
  |};

  declare var MSHTML$_styleFlexBasis: {|
    +styleFlexBasis_Max: 2147483647, // 2147483647
    +styleFlexBasisAuto: 0, // 0
    +styleFlexBasisNotSet: 1 // 1
  |};

  declare var MSHTML$_styleFlexDirection: {|
    +styleFlexDirection_Max: 2147483647, // 2147483647
    +styleFlexDirectionColumn: 2, // 2
    +styleFlexDirectionColumnReverse: 3, // 3
    +styleFlexDirectionNotSet: 4, // 4
    +styleFlexDirectionRow: 0, // 0
    +styleFlexDirectionRowReverse: 1 // 1
  |};

  declare var MSHTML$_styleFlexWrap: {|
    +styleFlexWrap_Max: 2147483647, // 2147483647
    +styleFlexWrapNotSet: 3, // 3
    +styleFlexWrapNowrap: 0, // 0
    +styleFlexWrapWrap: 1, // 1
    +styleFlexWrapWrapReverse: 2 // 2
  |};

  declare var MSHTML$_styleFontSize: {|
    +styleFontSize_Max: 2147483647, // 2147483647
    +styleFontSizeLarge: 4, // 4
    +styleFontSizeLarger: 8, // 8
    +styleFontSizeMedium: 3, // 3
    +styleFontSizeSmall: 2, // 2
    +styleFontSizeSmaller: 7, // 7
    +styleFontSizeXLarge: 5, // 5
    +styleFontSizeXSmall: 1, // 1
    +styleFontSizeXXLarge: 6, // 6
    +styleFontSizeXXSmall: 0 // 0
  |};

  declare var MSHTML$_styleFontStretch: {|
    +styleFontStretch_Max: 2147483647, // 2147483647
    +styleFontStretchCondensed: 5, // 5
    +styleFontStretchExpanded: 9, // 9
    +styleFontStretchExtraCondensed: 4, // 4
    +styleFontStretchExtraExpanded: 10, // 10
    +styleFontStretchNarrower: 2, // 2
    +styleFontStretchNormal: 7, // 7
    +styleFontStretchNotSet: 0, // 0
    +styleFontStretchSemiCondensed: 6, // 6
    +styleFontStretchSemiExpanded: 8, // 8
    +styleFontStretchUltraCondensed: 3, // 3
    +styleFontStretchUltraExpanded: 11, // 11
    +styleFontStretchWider: 1 // 1
  |};

  declare var MSHTML$_styleFontStyle: {|
    +styleFontStyle_Max: 2147483647, // 2147483647
    +styleFontStyleItalic: 1, // 1
    +styleFontStyleNormal: 3, // 3
    +styleFontStyleNotSet: 0, // 0
    +styleFontStyleOblique: 2 // 2
  |};

  declare var MSHTML$_styleFontVariant: {|
    +styleFontVariant_Max: 2147483647, // 2147483647
    +styleFontVariantNormal: 2, // 2
    +styleFontVariantNotSet: 0, // 0
    +styleFontVariantSmallCaps: 1 // 1
  |};

  declare var MSHTML$_styleFontWeight: {|
    +styleFontWeight_Max: 2147483647, // 2147483647
    +styleFontWeight100: 1, // 1
    +styleFontWeight200: 2, // 2
    +styleFontWeight300: 3, // 3
    +styleFontWeight400: 4, // 4
    +styleFontWeight500: 5, // 5
    +styleFontWeight600: 6, // 6
    +styleFontWeight700: 7, // 7
    +styleFontWeight800: 8, // 8
    +styleFontWeight900: 9, // 9
    +styleFontWeightBold: 11, // 11
    +styleFontWeightBolder: 12, // 12
    +styleFontWeightLighter: 13, // 13
    +styleFontWeightNormal: 10, // 10
    +styleFontWeightNotSet: 0 // 0
  |};

  declare var MSHTML$_styleGridColumn: {|
    +styleGridColumn_Max: 2147483647, // 2147483647
    +styleGridColumnNotSet: 0 // 0
  |};

  declare var MSHTML$_styleGridColumnAlign: {|
    +styleGridColumnAlign_Max: 2147483647, // 2147483647
    +styleGridColumnAlignCenter: 0, // 0
    +styleGridColumnAlignEnd: 1, // 1
    +styleGridColumnAlignNotSet: 4, // 4
    +styleGridColumnAlignStart: 2, // 2
    +styleGridColumnAlignStretch: 3 // 3
  |};

  declare var MSHTML$_styleGridColumnSpan: {|
    +styleGridColumnSpan_Max: 2147483647, // 2147483647
    +styleGridColumnSpanNotSet: 0 // 0
  |};

  declare var MSHTML$_styleGridRow: {|
    +styleGridRow_Max: 2147483647, // 2147483647
    +styleGridRowNotSet: 0 // 0
  |};

  declare var MSHTML$_styleGridRowAlign: {|
    +styleGridRowAlign_Max: 2147483647, // 2147483647
    +styleGridRowAlignCenter: 0, // 0
    +styleGridRowAlignEnd: 1, // 1
    +styleGridRowAlignNotSet: 4, // 4
    +styleGridRowAlignStart: 2, // 2
    +styleGridRowAlignStretch: 3 // 3
  |};

  declare var MSHTML$_styleGridRowSpan: {|
    +styleGridRowSpan_Max: 2147483647, // 2147483647
    +styleGridRowSpanNotSet: 0 // 0
  |};

  declare var MSHTML$_styleHyphenateLimitLines: {|
    +styleHyphenateLimitLines_Max: 2147483647, // 2147483647
    +styleHyphenateLimitLinesNoLimit: 0 // 0
  |};

  declare var MSHTML$_styleHyphens: {|
    +styleHyphens_Max: 2147483647, // 2147483647
    +styleHyphensAuto: 2, // 2
    +styleHyphensManual: 1, // 1
    +styleHyphensNone: 0, // 0
    +styleHyphensNotSet: 3 // 3
  |};

  declare var MSHTML$_styleImeMode: {|
    +styleImeMode_Max: 2147483647, // 2147483647
    +styleImeModeActive: 1, // 1
    +styleImeModeAuto: 0, // 0
    +styleImeModeDisabled: 3, // 3
    +styleImeModeInactive: 2, // 2
    +styleImeModeNotSet: 4 // 4
  |};

  declare var MSHTML$_styleInitialColor: {|
    +styleInitialColor_Max: 2147483647, // 2147483647
    +styleInitialColorColorProperty: 1, // 1
    +styleInitialColorInvert: 3, // 3
    +styleInitialColorNoInitial: 0, // 0
    +styleInitialColorTransparent: 2 // 2
  |};

  declare var MSHTML$_styleInitialString: {|
    +styleInitialString_Max: 2147483647, // 2147483647
    +styleInitialStringAuto: 2, // 2
    +styleInitialStringNoInitial: 0, // 0
    +styleInitialStringNone: 1, // 1
    +styleInitialStringNormal: 3 // 3
  |};

  declare var MSHTML$_styleInterpolation: {|
    +styleInterpolation_Max: 2147483647, // 2147483647
    +styleInterpolationBCH: 2, // 2
    +styleInterpolationNN: 1, // 1
    +styleInterpolationNotSet: 0 // 0
  |};

  declare var MSHTML$_styleJustifyContent: {|
    +styleJustifyContent_Max: 2147483647, // 2147483647
    +styleJustifyContentCenter: 2, // 2
    +styleJustifyContentFlexEnd: 1, // 1
    +styleJustifyContentFlexStart: 0, // 0
    +styleJustifyContentNotSet: 5, // 5
    +styleJustifyContentSpaceAround: 4, // 4
    +styleJustifyContentSpaceBetween: 3 // 3
  |};

  declare var MSHTML$_styleLayoutFlow: {|
    +styleLayoutFlow_Max: 2147483647, // 2147483647
    +styleLayoutFlowHorizontal: 0, // 0
    +styleLayoutFlowNotSet: 2, // 2
    +styleLayoutFlowVerticalIdeographic: 1 // 1
  |};

  declare var MSHTML$_styleLayoutGridChar: {|
    +styleLayoutGridChar_Max: 2147483647, // 2147483647
    +styleLayoutGridCharAuto: 1, // 1
    +styleLayoutGridCharNone: 2, // 2
    +styleLayoutGridCharNotSet: 0 // 0
  |};

  declare var MSHTML$_styleLayoutGridLine: {|
    +styleLayoutGridLine_Max: 2147483647, // 2147483647
    +styleLayoutGridLineAuto: 1, // 1
    +styleLayoutGridLineNone: 2, // 2
    +styleLayoutGridLineNotSet: 0 // 0
  |};

  declare var MSHTML$_styleLayoutGridMode: {|
    +styleLayoutGridMode_Max: 2147483647, // 2147483647
    +styleLayoutGridModeBoth: 3, // 3
    +styleLayoutGridModeChar: 1, // 1
    +styleLayoutGridModeLine: 2, // 2
    +styleLayoutGridModeNone: 4, // 4
    +styleLayoutGridModeNotSet: 0 // 0
  |};

  declare var MSHTML$_styleLayoutGridType: {|
    +styleLayoutGridType_Max: 2147483647, // 2147483647
    +styleLayoutGridTypeFixed: 3, // 3
    +styleLayoutGridTypeLoose: 1, // 1
    +styleLayoutGridTypeNotSet: 0, // 0
    +styleLayoutGridTypeStrict: 2 // 2
  |};

  declare var MSHTML$_styleLineBreak: {|
    +styleLineBreak_Max: 2147483647, // 2147483647
    +styleLineBreakNormal: 1, // 1
    +styleLineBreakNotSet: 0, // 0
    +styleLineBreakStrict: 2 // 2
  |};

  declare var MSHTML$_styleListStylePosition: {|
    +styleListStylePosition_Max: 2147483647, // 2147483647
    +styleListStylePositionInside: 1, // 1
    +styleListStylePositionNotSet: 0, // 0
    +styleListStylePositionOutSide: 2 // 2
  |};

  declare var MSHTML$_styleListStyleType: {|
    +styleListStyleType_Max: 2147483647, // 2147483647
    +styleListStyleTypeArmenian: 12, // 12
    +styleListStyleTypeCircle: 2, // 2
    +styleListStyleTypeDecimal: 4, // 4
    +styleListStyleTypeDecimalLeadingZero: 10, // 10
    +styleListStyleTypeDisc: 1, // 1
    +styleListStyleTypeGeorgian: 11, // 11
    +styleListStyleTypeLowerAlpha: 7, // 7
    +styleListStyleTypeLowerGreek: 16, // 16
    +styleListStyleTypeLowerLatin: 14, // 14
    +styleListStyleTypeLowerRoman: 5, // 5
    +styleListStyleTypeNone: 9, // 9
    +styleListStyleTypeNotSet: 0, // 0
    +styleListStyleTypeSquare: 3, // 3
    +styleListStyleTypeUpperAlpha: 8, // 8
    +styleListStyleTypeUpperGreek: 15, // 15
    +styleListStyleTypeUpperLatin: 13, // 13
    +styleListStyleTypeUpperRoman: 6 // 6
  |};

  declare var MSHTML$_styleMsAnimationDirection: {|
    +styleMsAnimationDirection_Max: 2147483647, // 2147483647
    +styleMsAnimationDirectionAlternate: 1, // 1
    +styleMsAnimationDirectionAlternateReverse: 3, // 3
    +styleMsAnimationDirectionNormal: 0, // 0
    +styleMsAnimationDirectionNotSet: 4, // 4
    +styleMsAnimationDirectionReverse: 2 // 2
  |};

  declare var MSHTML$_styleMsAnimationFillMode: {|
    +styleMsAnimationFillMode_Max: 2147483647, // 2147483647
    +styleMsAnimationFillModeBackwards: 2, // 2
    +styleMsAnimationFillModeBoth: 3, // 3
    +styleMsAnimationFillModeForwards: 1, // 1
    +styleMsAnimationFillModeNone: 0, // 0
    +styleMsAnimationFillModeNotSet: 4 // 4
  |};

  declare var MSHTML$_styleMsAnimationPlayState: {|
    +styleMsAnimationPlayState_Max: 2147483647, // 2147483647
    +styleMsAnimationPlayStateNotSet: 2, // 2
    +styleMsAnimationPlayStatePaused: 1, // 1
    +styleMsAnimationPlayStateRunning: 0 // 0
  |};

  declare var MSHTML$_styleMsContentZoomChaining: {|
    +styleMsContentZoomChaining_Max: 2147483647, // 2147483647
    +styleMsContentZoomChainingChained: 2, // 2
    +styleMsContentZoomChainingNone: 1, // 1
    +styleMsContentZoomChainingNotSet: 0 // 0
  |};

  declare var MSHTML$_styleMsContentZooming: {|
    +styleMsContentZooming_Max: 2147483647, // 2147483647
    +styleMsContentZoomingNone: 1, // 1
    +styleMsContentZoomingNotSet: 0, // 0
    +styleMsContentZoomingZoom: 2 // 2
  |};

  declare var MSHTML$_styleMsContentZoomSnapType: {|
    +styleMsContentZoomSnapType_Max: 2147483647, // 2147483647
    +styleMsContentZoomSnapTypeMandatory: 2, // 2
    +styleMsContentZoomSnapTypeNone: 1, // 1
    +styleMsContentZoomSnapTypeNotSet: 0, // 0
    +styleMsContentZoomSnapTypeProximity: 3 // 3
  |};

  declare var MSHTML$_styleMsFlexAlign: {|
    +styleMsFlexAlign_Max: 2147483647, // 2147483647
    +styleMsFlexAlignBaseline: 3, // 3
    +styleMsFlexAlignCenter: 2, // 2
    +styleMsFlexAlignEnd: 1, // 1
    +styleMsFlexAlignNotSet: 5, // 5
    +styleMsFlexAlignStart: 0, // 0
    +styleMsFlexAlignStretch: 4 // 4
  |};

  declare var MSHTML$_styleMsFlexItemAlign: {|
    +styleMsFlexItemAlign_Max: 2147483647, // 2147483647
    +styleMsFlexItemAlignAuto: 5, // 5
    +styleMsFlexItemAlignBaseline: 3, // 3
    +styleMsFlexItemAlignCenter: 2, // 2
    +styleMsFlexItemAlignEnd: 1, // 1
    +styleMsFlexItemAlignNotSet: 6, // 6
    +styleMsFlexItemAlignStart: 0, // 0
    +styleMsFlexItemAlignStretch: 4 // 4
  |};

  declare var MSHTML$_styleMsFlexLinePack: {|
    +styleMsFlexLinePack_Max: 2147483647, // 2147483647
    +styleMsFlexLinePackCenter: 2, // 2
    +styleMsFlexLinePackDistribute: 4, // 4
    +styleMsFlexLinePackEnd: 1, // 1
    +styleMsFlexLinePackJustify: 3, // 3
    +styleMsFlexLinePackNotSet: 6, // 6
    +styleMsFlexLinePackStart: 0, // 0
    +styleMsFlexLinePackStretch: 5 // 5
  |};

  declare var MSHTML$_styleMsFlexPack: {|
    +styleMsFlexPack_Max: 2147483647, // 2147483647
    +styleMsFlexPackCenter: 2, // 2
    +styleMsFlexPackDistribute: 4, // 4
    +styleMsFlexPackEnd: 1, // 1
    +styleMsFlexPackJustify: 3, // 3
    +styleMsFlexPackNotSet: 5, // 5
    +styleMsFlexPackStart: 0 // 0
  |};

  declare var MSHTML$_styleMsHighContrastAdjust: {|
    +styleMsHighContrastAdjust_Max: 2147483647, // 2147483647
    +styleMsHighContrastAdjustAuto: 1, // 1
    +styleMsHighContrastAdjustNone: 2, // 2
    +styleMsHighContrastAdjustNotSet: 0 // 0
  |};

  declare var MSHTML$_styleMsImeAlign: {|
    +styleMsImeAlign_Max: 2147483647, // 2147483647
    +styleMsImeAlignAfter: 1, // 1
    +styleMsImeAlignAuto: 0, // 0
    +styleMsImeAlignNotSet: 2 // 2
  |};

  declare var MSHTML$_styleMsOverflowStyle: {|
    +styleMsOverflowStyle_Max: 2147483647, // 2147483647
    +styleMsOverflowStyleAuto: 1, // 1
    +styleMsOverflowStyleMsAutoHidingScrollbar: 4, // 4
    +styleMsOverflowStyleNone: 2, // 2
    +styleMsOverflowStyleNotSet: 0, // 0
    +styleMsOverflowStyleScrollbar: 3 // 3
  |};

  declare var MSHTML$_styleMsScrollChaining: {|
    +styleMsScrollChaining_Max: 2147483647, // 2147483647
    +styleMsScrollChainingChained: 2, // 2
    +styleMsScrollChainingNone: 1, // 1
    +styleMsScrollChainingNotSet: 0 // 0
  |};

  declare var MSHTML$_styleMsScrollRails: {|
    +styleMsScrollRails_Max: 2147483647, // 2147483647
    +styleMsScrollRailsNone: 1, // 1
    +styleMsScrollRailsNotSet: 0, // 0
    +styleMsScrollRailsRailed: 2 // 2
  |};

  declare var MSHTML$_styleMsScrollSnapType: {|
    +styleMsScrollSnapType_Max: 2147483647, // 2147483647
    +styleMsScrollSnapTypeMandatory: 2, // 2
    +styleMsScrollSnapTypeNone: 1, // 1
    +styleMsScrollSnapTypeNotSet: 0, // 0
    +styleMsScrollSnapTypeProximity: 3 // 3
  |};

  declare var MSHTML$_styleMsScrollTranslation: {|
    +styleMsScrollTranslation_Max: 2147483647, // 2147483647
    +styleMsScrollTranslationNone: 1, // 1
    +styleMsScrollTranslationNotSet: 0, // 0
    +styleMsScrollTranslationVtoH: 2 // 2
  |};

  declare var MSHTML$_styleMsTextCombineHorizontal: {|
    +styleMsTextCombineHorizontal_Max: 2147483647, // 2147483647
    +styleMsTextCombineHorizontalAll: 1, // 1
    +styleMsTextCombineHorizontalDigits: 2, // 2
    +styleMsTextCombineHorizontalNone: 0, // 0
    +styleMsTextCombineHorizontalNotSet: 3 // 3
  |};

  declare var MSHTML$_styleMsTouchAction: {|
    +styleMsTouchAction_Max: 2147483647, // 2147483647
    +styleMsTouchActionAuto: 1, // 1
    +styleMsTouchActionCrossSlideX: 64, // 64
    +styleMsTouchActionCrossSlideY: 128, // 128
    +styleMsTouchActionDoubleTapZoom: 4, // 4
    +styleMsTouchActionManipulation: 2, // 2
    +styleMsTouchActionNone: 0, // 0
    +styleMsTouchActionNotSet: -1, // -1
    +styleMsTouchActionPanX: 8, // 8
    +styleMsTouchActionPanY: 16, // 16
    +styleMsTouchActionPinchZoom: 32 // 32
  |};

  declare var MSHTML$_styleMsTouchSelect: {|
    +styleMsTouchSelect_Max: 2147483647, // 2147483647
    +styleMsTouchSelectGrippers: 0, // 0
    +styleMsTouchSelectNone: 1, // 1
    +styleMsTouchSelectNotSet: 2 // 2
  |};

  declare var MSHTML$_styleMsUserSelect: {|
    +styleMsUserSelect_Max: 2147483647, // 2147483647
    +styleMsUserSelectAuto: 0, // 0
    +styleMsUserSelectElement: 2, // 2
    +styleMsUserSelectNone: 3, // 3
    +styleMsUserSelectNotSet: 4, // 4
    +styleMsUserSelectText: 1 // 1
  |};

  declare var MSHTML$_styleNone: {|
    +styleNone_Max: 2147483647, // 2147483647
    +styleNoneNone: 0 // 0
  |};

  declare var MSHTML$_styleNormal: {|
    +styleNormal_Max: 2147483647, // 2147483647
    +styleNormalNormal: 0 // 0
  |};

  declare var MSHTML$_styleOutlineStyle: {|
    +styleOutlineStyle_Max: 2147483647, // 2147483647
    +styleOutlineStyleDashed: 2, // 2
    +styleOutlineStyleDotted: 1, // 1
    +styleOutlineStyleDouble: 4, // 4
    +styleOutlineStyleGroove: 5, // 5
    +styleOutlineStyleInset: 7, // 7
    +styleOutlineStyleNone: 10, // 10
    +styleOutlineStyleNotSet: 0, // 0
    +styleOutlineStyleOutset: 8, // 8
    +styleOutlineStyleRidge: 6, // 6
    +styleOutlineStyleSolid: 3, // 3
    +styleOutlineStyleWindowInset: 9 // 9
  |};

  declare var MSHTML$_styleOverflow: {|
    +styleOverflow_Max: 2147483647, // 2147483647
    +styleOverflowAuto: 1, // 1
    +styleOverflowHidden: 2, // 2
    +styleOverflowNotSet: 0, // 0
    +styleOverflowScroll: 4, // 4
    +styleOverflowVisible: 3 // 3
  |};

  declare var MSHTML$_stylePageBreak: {|
    +stylePageBreak_Max: 2147483647, // 2147483647
    +stylePageBreakAlways: 2, // 2
    +stylePageBreakAuto: 1, // 1
    +stylePageBreakAvoid: 5, // 5
    +stylePageBreakLeft: 3, // 3
    +stylePageBreakNotSet: 0, // 0
    +stylePageBreakRight: 4 // 4
  |};

  declare var MSHTML$_stylePageBreakInside: {|
    +stylePageBreakInside_Max: 2147483647, // 2147483647
    +stylePageBreakInsideAuto: 1, // 1
    +stylePageBreakInsideAvoid: 2, // 2
    +stylePageBreakInsideNotSet: 0 // 0
  |};

  declare var MSHTML$_stylePerspectiveOriginX: {|
    +stylePerspectiveOriginX_Max: 2147483647, // 2147483647
    +stylePerspectiveOriginXCenter: 2, // 2
    +stylePerspectiveOriginXLeft: 1, // 1
    +stylePerspectiveOriginXNotSet: 0, // 0
    +stylePerspectiveOriginXRight: 3 // 3
  |};

  declare var MSHTML$_stylePerspectiveOriginY: {|
    +stylePerspectiveOriginY_Max: 2147483647, // 2147483647
    +stylePerspectiveOriginYBottom: 3, // 3
    +stylePerspectiveOriginYCenter: 2, // 2
    +stylePerspectiveOriginYNotSet: 0, // 0
    +stylePerspectiveOriginYTop: 1 // 1
  |};

  declare var MSHTML$_stylePointerEvents: {|
    +stylePointerEvents_Max: 2147483647, // 2147483647
    +stylePointerEventsAll: 8, // 8
    +stylePointerEventsAuto: 11, // 11
    +stylePointerEventsFill: 6, // 6
    +stylePointerEventsInitial: 10, // 10
    +stylePointerEventsNone: 9, // 9
    +stylePointerEventsNotSet: 0, // 0
    +stylePointerEventsPainted: 5, // 5
    +stylePointerEventsStroke: 7, // 7
    +stylePointerEventsVisible: 4, // 4
    +stylePointerEventsVisibleFill: 2, // 2
    +stylePointerEventsVisiblePainted: 1, // 1
    +stylePointerEventsVisibleStroke: 3 // 3
  |};

  declare var MSHTML$_stylePosition: {|
    +stylePosition_Max: 2147483647, // 2147483647
    +stylePositionabsolute: 3, // 3
    +stylePositionfixed: 4, // 4
    +stylePositionMsDeviceFixed: 6, // 6
    +stylePositionMsPage: 5, // 5
    +stylePositionNotSet: 0, // 0
    +stylePositionrelative: 2, // 2
    +stylePositionstatic: 1 // 1
  |};

  declare var MSHTML$_styleRubyAlign: {|
    +styleRubyAlign_Max: 2147483647, // 2147483647
    +styleRubyAlignAuto: 1, // 1
    +styleRubyAlignCenter: 3, // 3
    +styleRubyAlignDistributeLetter: 5, // 5
    +styleRubyAlignDistributeSpace: 6, // 6
    +styleRubyAlignLeft: 2, // 2
    +styleRubyAlignLineEdge: 7, // 7
    +styleRubyAlignNotSet: 0, // 0
    +styleRubyAlignRight: 4 // 4
  |};

  declare var MSHTML$_styleRubyOverhang: {|
    +styleRubyOverhang_Max: 2147483647, // 2147483647
    +styleRubyOverhangAuto: 1, // 1
    +styleRubyOverhangNone: 3, // 3
    +styleRubyOverhangNotSet: 0, // 0
    +styleRubyOverhangWhitespace: 2 // 2
  |};

  declare var MSHTML$_styleRubyPosition: {|
    +styleRubyPosition_Max: 2147483647, // 2147483647
    +styleRubyPositionAbove: 1, // 1
    +styleRubyPositionInline: 2, // 2
    +styleRubyPositionNotSet: 0 // 0
  |};

  declare var MSHTML$_styleStrokeLinecap: {|
    +styleStrokeLinecap_Max: 2147483647, // 2147483647
    +styleStrokeLinecapButt: 1, // 1
    +styleStrokeLinecapNotSet: 0, // 0
    +styleStrokeLinecapRound: 2, // 2
    +styleStrokeLinecapSquare: 3 // 3
  |};

  declare var MSHTML$_styleStrokeLinejoin: {|
    +styleStrokeLinejoin_Max: 2147483647, // 2147483647
    +styleStrokeLinejoinBevel: 3, // 3
    +styleStrokeLinejoinMiter: 1, // 1
    +styleStrokeLinejoinNotSet: 0, // 0
    +styleStrokeLinejoinRound: 2 // 2
  |};

  declare var MSHTML$_styleStyleFloat: {|
    +styleStyleFloat_Max: 2147483647, // 2147483647
    +styleStyleFloatLeft: 1, // 1
    +styleStyleFloatNone: 3, // 3
    +styleStyleFloatNotSet: 0, // 0
    +styleStyleFloatRight: 2 // 2
  |};

  declare var MSHTML$_styleTableLayout: {|
    +styleTableLayout_Max: 2147483647, // 2147483647
    +styleTableLayoutAuto: 1, // 1
    +styleTableLayoutFixed: 2, // 2
    +styleTableLayoutNotSet: 0 // 0
  |};

  declare var MSHTML$_styleTextAlignLast: {|
    +styleTextAlignLast_Max: 2147483647, // 2147483647
    +styleTextAlignLastAuto: 5, // 5
    +styleTextAlignLastCenter: 2, // 2
    +styleTextAlignLastJustify: 4, // 4
    +styleTextAlignLastLeft: 1, // 1
    +styleTextAlignLastNotSet: 0, // 0
    +styleTextAlignLastRight: 3 // 3
  |};

  declare var MSHTML$_styleTextAnchor: {|
    +styleTextAnchor_Max: 2147483647, // 2147483647
    +styleTextAnchorEnd: 3, // 3
    +styleTextAnchorMiddle: 2, // 2
    +styleTextAnchorNotSet: 0, // 0
    +styleTextAnchorStart: 1 // 1
  |};

  declare var MSHTML$_styleTextDecoration: {|
    +styleTextDecoration_Max: 2147483647, // 2147483647
    +styleTextDecorationBlink: 4, // 4
    +styleTextDecorationLineThrough: 3, // 3
    +styleTextDecorationNone: 0, // 0
    +styleTextDecorationOverline: 2, // 2
    +styleTextDecorationUnderline: 1 // 1
  |};

  declare var MSHTML$_styleTextEffect: {|
    +styleTextEffect_Max: 2147483647, // 2147483647
    +styleTextEffectEmboss: 1, // 1
    +styleTextEffectEngrave: 2, // 2
    +styleTextEffectNone: 0, // 0
    +styleTextEffectOutline: 3 // 3
  |};

  declare var MSHTML$_styleTextJustify: {|
    +styleTextJustify_Max: 2147483647, // 2147483647
    +styleTextJustifyAuto: 8, // 8
    +styleTextJustifyDistribute: 3, // 3
    +styleTextJustifyDistributeAllLines: 4, // 4
    +styleTextJustifyInterCluster: 6, // 6
    +styleTextJustifyInterIdeograph: 5, // 5
    +styleTextJustifyInterWord: 1, // 1
    +styleTextJustifyKashida: 7, // 7
    +styleTextJustifyNewspaper: 2, // 2
    +styleTextJustifyNotSet: 0 // 0
  |};

  declare var MSHTML$_styleTextJustifyTrim: {|
    +styleTextJustifyTrim_Max: 2147483647, // 2147483647
    +styleTextJustifyTrimNone: 1, // 1
    +styleTextJustifyTrimNotSet: 0, // 0
    +styleTextJustifyTrimPunctAndKana: 3, // 3
    +styleTextJustifyTrimPunctuation: 2 // 2
  |};

  declare var MSHTML$_styleTextLineThroughStyle: {|
    +styleTextLineThroughStyle_Max: 2147483647, // 2147483647
    +styleTextLineThroughStyleDouble: 2, // 2
    +styleTextLineThroughStyleSingle: 1, // 1
    +styleTextLineThroughStyleUndefined: 0 // 0
  |};

  declare var MSHTML$_styleTextOverflow: {|
    +styleTextOverflow_Max: 2147483647, // 2147483647
    +styleTextOverflowClip: 0, // 0
    +styleTextOverflowEllipsis: 1, // 1
    +styleTextOverflowNotSet: 2 // 2
  |};

  declare var MSHTML$_styleTextSizeAdjust: {|
    +styleTextSizeAdjust_Max: 2147483647, // 2147483647
    +styleTextSizeAdjustAuto: 1, // 1
    +styleTextSizeAdjustNone: 0 // 0
  |};

  declare var MSHTML$_styleTextTransform: {|
    +styleTextTransform_Max: 2147483647, // 2147483647
    +styleTextTransformCapitalize: 1, // 1
    +styleTextTransformLowercase: 2, // 2
    +styleTextTransformNone: 4, // 4
    +styleTextTransformNotSet: 0, // 0
    +styleTextTransformUppercase: 3 // 3
  |};

  declare var MSHTML$_styleTextUnderlinePosition: {|
    +styleTextUnderlinePosition_Max: 2147483647, // 2147483647
    +styleTextUnderlinePositionAbove: 1, // 1
    +styleTextUnderlinePositionAuto: 2, // 2
    +styleTextUnderlinePositionBelow: 0, // 0
    +styleTextUnderlinePositionNotSet: 3 // 3
  |};

  declare var MSHTML$_styleTextUnderlineStyle: {|
    +styleTextUnderlineStyle_Max: 2147483647, // 2147483647
    +styleTextUnderlineStyleDash: 6, // 6
    +styleTextUnderlineStyleDotDash: 7, // 7
    +styleTextUnderlineStyleDotDotDash: 8, // 8
    +styleTextUnderlineStyleDotted: 4, // 4
    +styleTextUnderlineStyleDouble: 2, // 2
    +styleTextUnderlineStyleDoubleAccounting: 11, // 11
    +styleTextUnderlineStyleSingle: 1, // 1
    +styleTextUnderlineStyleSingleAccounting: 10, // 10
    +styleTextUnderlineStyleThick: 5, // 5
    +styleTextUnderlineStyleThickDash: 12, // 12
    +styleTextUnderlineStyleUndefined: 0, // 0
    +styleTextUnderlineStyleWave: 9, // 9
    +styleTextUnderlineStyleWords: 3 // 3
  |};

  declare var MSHTML$_styleTransformOriginX: {|
    +styleTransformOriginX_Max: 2147483647, // 2147483647
    +styleTransformOriginXCenter: 2, // 2
    +styleTransformOriginXLeft: 1, // 1
    +styleTransformOriginXNotSet: 0, // 0
    +styleTransformOriginXRight: 3 // 3
  |};

  declare var MSHTML$_styleTransformOriginY: {|
    +styleTransformOriginY_Max: 2147483647, // 2147483647
    +styleTransformOriginYBottom: 3, // 3
    +styleTransformOriginYCenter: 2, // 2
    +styleTransformOriginYNotSet: 0, // 0
    +styleTransformOriginYTop: 1 // 1
  |};

  declare var MSHTML$_styleTransformStyle: {|
    +styleTransformStyle_Max: 2147483647, // 2147483647
    +styleTransformStyleFlat: 0, // 0
    +styleTransformStyleNotSet: 2, // 2
    +styleTransformStylePreserve3D: 1 // 1
  |};

  declare var MSHTML$_styleUserZoom: {|
    +styleUserZoom_Max: 2147483647, // 2147483647
    +styleUserZoomFixed: 2, // 2
    +styleUserZoomNotSet: 0, // 0
    +styleUserZoomZoom: 1 // 1
  |};

  declare var MSHTML$_styleVerticalAlign: {|
    +styleVerticalAlign_Max: 2147483647, // 2147483647
    +styleVerticalAlignAuto: 0, // 0
    +styleVerticalAlignBaseline: 1, // 1
    +styleVerticalAlignBottom: 7, // 7
    +styleVerticalAlignInherit: 9, // 9
    +styleVerticalAlignMiddle: 6, // 6
    +styleVerticalAlignNotSet: 10, // 10
    +styleVerticalAlignSub: 2, // 2
    +styleVerticalAlignSuper: 3, // 3
    +styleVerticalAlignTextBottom: 8, // 8
    +styleVerticalAlignTextTop: 5, // 5
    +styleVerticalAlignTop: 4 // 4
  |};

  declare var MSHTML$_styleViewportSize: {|
    +styleViewportSize_Max: 2147483647, // 2147483647
    +styleViewportSizeAuto: 0, // 0
    +styleViewportSizeDeviceHeight: 2, // 2
    +styleViewportSizeDeviceWidth: 1 // 1
  |};

  declare var MSHTML$_styleVisibility: {|
    +styleVisibility_Max: 2147483647, // 2147483647
    +styleVisibilityCollapse: 4, // 4
    +styleVisibilityHidden: 3, // 3
    +styleVisibilityInherit: 1, // 1
    +styleVisibilityNotSet: 0, // 0
    +styleVisibilityVisible: 2 // 2
  |};

  declare var MSHTML$_styleWebkitAppearance: {|
    +styleWebkitAppearance_Max: 2147483647, // 2147483647
    +styleWebkitAppearanceButton: 2, // 2
    +styleWebkitAppearanceButtonBevel: 3, // 3
    +styleWebkitAppearanceCapsLockIndicator: 1, // 1
    +styleWebkitAppearanceCaret: 4, // 4
    +styleWebkitAppearanceCheckbox: 5, // 5
    +styleWebkitAppearanceDefaultButton: 6, // 6
    +styleWebkitAppearanceListbox: 7, // 7
    +styleWebkitAppearanceListitem: 8, // 8
    +styleWebkitAppearanceMediaFullscreenButton: 9, // 9
    +styleWebkitAppearanceMediaMuteButton: 10, // 10
    +styleWebkitAppearanceMediaPlayButton: 11, // 11
    +styleWebkitAppearanceMediaSeekBackButton: 12, // 12
    +styleWebkitAppearanceMediaSeekForwardButton: 13, // 13
    +styleWebkitAppearanceMediaSlider: 14, // 14
    +styleWebkitAppearanceMediaSliderthumb: 15, // 15
    +styleWebkitAppearanceMenulist: 16, // 16
    +styleWebkitAppearanceMenulistButton: 17, // 17
    +styleWebkitAppearanceMenulistText: 18, // 18
    +styleWebkitAppearanceMenulistTextfield: 19, // 19
    +styleWebkitAppearanceNone: 0, // 0
    +styleWebkitAppearanceNotSet: 34, // 34
    +styleWebkitAppearancePushButton: 20, // 20
    +styleWebkitAppearanceRadio: 21, // 21
    +styleWebkitAppearanceSearchfield: 22, // 22
    +styleWebkitAppearanceSearchfieldCancelButton: 23, // 23
    +styleWebkitAppearanceSearchfieldDecoration: 24, // 24
    +styleWebkitAppearanceSearchfieldResultsButton: 25, // 25
    +styleWebkitAppearanceSearchfieldResultsDecoration: 26, // 26
    +styleWebkitAppearanceSliderHorizontal: 27, // 27
    +styleWebkitAppearanceSliderthumbHorizontal: 29, // 29
    +styleWebkitAppearanceSliderthumbVertical: 30, // 30
    +styleWebkitAppearanceSliderVertical: 28, // 28
    +styleWebkitAppearanceSquareButton: 31, // 31
    +styleWebkitAppearanceTextarea: 32, // 32
    +styleWebkitAppearanceTextfield: 33 // 33
  |};

  declare var MSHTML$_styleWebkitBoxDirection: {|
    +styleWebkitBoxDirection_Max: 2147483647, // 2147483647
    +styleWebkitBoxDirectionNormal: 0, // 0
    +styleWebkitBoxDirectionNotSet: 2, // 2
    +styleWebkitBoxDirectionReverse: 1 // 1
  |};

  declare var MSHTML$_styleWebkitBoxOrient: {|
    +styleWebkitBoxOrient_Max: 2147483647, // 2147483647
    +styleWebkitBoxOrientBlockAxis: 3, // 3
    +styleWebkitBoxOrientHorizontal: 0, // 0
    +styleWebkitBoxOrientInlineAxis: 1, // 1
    +styleWebkitBoxOrientNotSet: 4, // 4
    +styleWebkitBoxOrientVertical: 2 // 2
  |};

  declare var MSHTML$_styleWebkitBoxPack: {|
    +styleWebkitBoxPack_Max: 2147483647, // 2147483647
    +styleWebkitBoxPackCenter: 2, // 2
    +styleWebkitBoxPackEnd: 1, // 1
    +styleWebkitBoxPackJustify: 3, // 3
    +styleWebkitBoxPackNotSet: 5, // 5
    +styleWebkitBoxPackStart: 0 // 0
  |};

  declare var MSHTML$_styleWhiteSpace: {|
    +styleWhiteSpace_Max: 2147483647, // 2147483647
    +styleWhiteSpaceNormal: 1, // 1
    +styleWhiteSpaceNotSet: 0, // 0
    +styleWhiteSpaceNowrap: 3, // 3
    +styleWhiteSpacePre: 2, // 2
    +styleWhiteSpacePreline: 4, // 4
    +styleWhiteSpacePrewrap: 5 // 5
  |};

  declare var MSHTML$_styleWidowsOrphans: {|
    +styleWidowsOrphans_Max: 2147483647, // 2147483647
    +styleWidowsOrphansNotSet: -2147483647 // -2147483647
  |};

  declare var MSHTML$_styleWordBreak: {|
    +styleWordBreak_Max: 2147483647, // 2147483647
    +styleWordBreakBreakAll: 2, // 2
    +styleWordBreakKeepAll: 3, // 3
    +styleWordBreakNormal: 1, // 1
    +styleWordBreakNotSet: 0 // 0
  |};

  declare var MSHTML$_styleWordWrap: {|
    +styleWordWrap_Max: 2147483647, // 2147483647
    +styleWordWrapNotSet: 0, // 0
    +styleWordWrapOff: 1, // 1
    +styleWordWrapOn: 2 // 2
  |};

  declare var MSHTML$_styleWrapFlow: {|
    +styleWrapFlow_Max: 2147483647, // 2147483647
    +styleWrapFlowAuto: 1, // 1
    +styleWrapFlowBoth: 2, // 2
    +styleWrapFlowClear: 5, // 5
    +styleWrapFlowEnd: 4, // 4
    +styleWrapFlowMaximum: 7, // 7
    +styleWrapFlowMinimum: 6, // 6
    +styleWrapFlowNotSet: 0, // 0
    +styleWrapFlowStart: 3 // 3
  |};

  declare var MSHTML$_styleWrapThrough: {|
    +styleWrapThrough_Max: 2147483647, // 2147483647
    +styleWrapThroughNone: 2, // 2
    +styleWrapThroughNotSet: 0, // 0
    +styleWrapThroughWrap: 1 // 1
  |};

  declare var MSHTML$_styleWritingMode: {|
    +styleWritingMode_Max: 2147483647, // 2147483647
    +styleWritingModeBtlr: 6, // 6
    +styleWritingModeBtrl: 3, // 3
    +styleWritingModeLr: 9, // 9
    +styleWritingModeLrbt: 7, // 7
    +styleWritingModeLrtb: 0, // 0
    +styleWritingModeNotSet: 4, // 4
    +styleWritingModeRl: 10, // 10
    +styleWritingModeRlbt: 8, // 8
    +styleWritingModeRltb: 2, // 2
    +styleWritingModeTb: 11, // 11
    +styleWritingModeTblr: 5, // 5
    +styleWritingModeTbrl: 1 // 1
  |};

  declare var MSHTML$_styleZIndex: {|
    +styleZIndex_Max: 2147483647, // 2147483647
    +styleZIndexAuto: -2147483647 // -2147483647
  |};

  declare var MSHTML$_svgAngleType: {|
    +SVG_ANGLETYPE_DEG: 2, // 2
    +SVG_ANGLETYPE_GRAD: 4, // 4
    +SVG_ANGLETYPE_RAD: 3, // 3
    +SVG_ANGLETYPE_UNKNOWN: 0, // 0
    +SVG_ANGLETYPE_UNSPECIFIED: 1, // 1
    +svgAngleType_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgChannel: {|
    +SVG_CHANNEL_A: 4, // 4
    +SVG_CHANNEL_B: 3, // 3
    +SVG_CHANNEL_G: 2, // 2
    +SVG_CHANNEL_R: 1, // 1
    +SVG_CHANNEL_UNKNOWN: 0, // 0
    +svgChannel_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgEdgemode: {|
    +SVG_EDGEMODE_DUPLICATE: 1, // 1
    +SVG_EDGEMODE_NONE: 3, // 3
    +SVG_EDGEMODE_UNKNOWN: 0, // 0
    +SVG_EDGEMODE_WRAP: 2, // 2
    +svgEdgemode_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgExternalResourcesRequired: {|
    +svgExternalResourcesRequired_Max: 2147483647, // 2147483647
    +svgExternalResourcesRequiredFalse: 0, // 0
    +svgExternalResourcesRequiredTrue: 1 // 1
  |};

  declare var MSHTML$_svgFeblendMode: {|
    +SVG_FEBLEND_MODE_DARKEN: 4, // 4
    +SVG_FEBLEND_MODE_LIGHTEN: 5, // 5
    +SVG_FEBLEND_MODE_MULTIPLY: 2, // 2
    +SVG_FEBLEND_MODE_NORMAL: 1, // 1
    +SVG_FEBLEND_MODE_SCREEN: 3, // 3
    +SVG_FEBLEND_MODE_UNKNOWN: 0, // 0
    +svgFeblendMode_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgFecolormatrixType: {|
    +SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3, // 3
    +SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4, // 4
    +SVG_FECOLORMATRIX_TYPE_MATRIX: 1, // 1
    +SVG_FECOLORMATRIX_TYPE_SATURATE: 2, // 2
    +SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0, // 0
    +svgFecolormatrixType_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgFecomponenttransferType: {|
    +SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3, // 3
    +SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5, // 5
    +SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1, // 1
    +SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4, // 4
    +SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2, // 2
    +SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0, // 0
    +svgFecomponenttransferType_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgFecompositeOperator: {|
    +SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6, // 6
    +SVG_FECOMPOSITE_OPERATOR_ATOP: 4, // 4
    +SVG_FECOMPOSITE_OPERATOR_IN: 2, // 2
    +SVG_FECOMPOSITE_OPERATOR_OUT: 3, // 3
    +SVG_FECOMPOSITE_OPERATOR_OVER: 1, // 1
    +SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0, // 0
    +SVG_FECOMPOSITE_OPERATOR_XOR: 5, // 5
    +svgFecompositeOperator_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgFocusable: {|
    +svgFocusable_Max: 2147483647, // 2147483647
    +svgFocusableAuto: 1, // 1
    +svgFocusableFalse: 3, // 3
    +svgFocusableNotSet: 0, // 0
    +svgFocusableTrue: 2 // 2
  |};

  declare var MSHTML$_svgLengthType: {|
    +SVG_LENGTHTYPE_CM: 6, // 6
    +SVG_LENGTHTYPE_EMS: 3, // 3
    +SVG_LENGTHTYPE_EXS: 4, // 4
    +SVG_LENGTHTYPE_IN: 8, // 8
    +SVG_LENGTHTYPE_MM: 7, // 7
    +SVG_LENGTHTYPE_NUMBER: 1, // 1
    +SVG_LENGTHTYPE_PC: 10, // 10
    +SVG_LENGTHTYPE_PERCENTAGE: 2, // 2
    +SVG_LENGTHTYPE_PT: 9, // 9
    +SVG_LENGTHTYPE_PX: 5, // 5
    +SVG_LENGTHTYPE_UNKNOWN: 0, // 0
    +svgLengthType_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgMarkerOrient: {|
    +SVG_MARKER_ORIENT_ANGLE: 2, // 2
    +SVG_MARKER_ORIENT_AUTO: 1, // 1
    +SVG_MARKER_ORIENT_UNKNOWN: 0, // 0
    +svgMarkerOrient_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgMarkerOrientAttribute: {|
    +svgMarkerOrientAttribute_Max: 2147483647, // 2147483647
    +svgMarkerOrientAttributeAuto: 0 // 0
  |};

  declare var MSHTML$_svgMarkerUnits: {|
    +SVG_MARKERUNITS_STROKEWIDTH: 2, // 2
    +SVG_MARKERUNITS_UNKNOWN: 0, // 0
    +SVG_MARKERUNITS_USERSPACEONUSE: 1, // 1
    +svgMarkerUnits_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgMorphologyOperator: {|
    +SVG_MORPHOLOGY_OPERATOR_DILATE: 2, // 2
    +SVG_MORPHOLOGY_OPERATOR_ERODE: 1, // 1
    +SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0, // 0
    +svgMorphologyOperator_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgPathSegType: {|
    +PATHSEG_ARC_ABS: 10, // 10
    +PATHSEG_ARC_REL: 11, // 11
    +PATHSEG_CLOSEPATH: 1, // 1
    +PATHSEG_CURVETO_CUBIC_ABS: 6, // 6
    +PATHSEG_CURVETO_CUBIC_REL: 7, // 7
    +PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: 16, // 16
    +PATHSEG_CURVETO_CUBIC_SMOOTH_REL: 17, // 17
    +PATHSEG_CURVETO_QUADRATIC_ABS: 8, // 8
    +PATHSEG_CURVETO_QUADRATIC_REL: 9, // 9
    +PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: 18, // 18
    +PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: 19, // 19
    +PATHSEG_LINETO_ABS: 4, // 4
    +PATHSEG_LINETO_HORIZONTAL_ABS: 12, // 12
    +PATHSEG_LINETO_HORIZONTAL_REL: 13, // 13
    +PATHSEG_LINETO_REL: 5, // 5
    +PATHSEG_LINETO_VERTICAL_ABS: 14, // 14
    +PATHSEG_LINETO_VERTICAL_REL: 15, // 15
    +PATHSEG_MOVETO_ABS: 2, // 2
    +PATHSEG_MOVETO_REL: 3, // 3
    +PATHSEG_UNKNOWN: 0, // 0
    +svgPathSegType_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgPreserveAlpha: {|
    +SVG_PRESERVEALPHA_FALSE: 0, // 0
    +SVG_PRESERVEALPHA_TRUE: 1, // 1
    +svgPreserveAlpha_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgPreserveAspectMeetOrSliceType: {|
    +SVG_MEETORSLICE_MEET: 1, // 1
    +SVG_MEETORSLICE_SLICE: 2, // 2
    +SVG_MEETORSLICE_UNKNOWN: 0, // 0
    +svgPreserveAspectMeetOrSliceType_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgPreserveAspectRatioAlignType: {|
    +SVG_PRESERVEASPECTRATIO_NONE: 1, // 1
    +SVG_PRESERVEASPECTRATIO_UNKNOWN: 0, // 0
    +SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10, // 10
    +SVG_PRESERVEASPECTRATIO_XMAXYMID: 7, // 7
    +SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4, // 4
    +SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9, // 9
    +SVG_PRESERVEASPECTRATIO_XMIDYMID: 6, // 6
    +SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3, // 3
    +SVG_PRESERVEASPECTRATIO_XMINYMAX: 8, // 8
    +SVG_PRESERVEASPECTRATIO_XMINYMID: 5, // 5
    +SVG_PRESERVEASPECTRATIO_XMINYMIN: 2, // 2
    +svgPreserveAspectRatioAlignType_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgSpreadMethod: {|
    +SVG_SPREADMETHOD_PAD: 1, // 1
    +SVG_SPREADMETHOD_REFLECT: 2, // 2
    +SVG_SPREADMETHOD_REPEAT: 3, // 3
    +SVG_SPREADMETHOD_UNKNOWN: 0, // 0
    +svgSpreadMethod_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgStitchtype: {|
    +SVG_STITCHTYPE_NOSTITCH: 2, // 2
    +SVG_STITCHTYPE_STITCH: 1, // 1
    +SVG_STITCHTYPE_UNKNOWN: 0, // 0
    +svgStitchtype_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgTransformType: {|
    +SVG_TRANSFORM_MATRIX: 1, // 1
    +SVG_TRANSFORM_ROTATE: 4, // 4
    +SVG_TRANSFORM_SCALE: 3, // 3
    +SVG_TRANSFORM_SKEWX: 5, // 5
    +SVG_TRANSFORM_SKEWY: 6, // 6
    +SVG_TRANSFORM_TRANSLATE: 2, // 2
    +SVG_TRANSFORM_UNKNOWN: 0, // 0
    +svgTransformType_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgTurbulenceType: {|
    +SVG_TURBULENCE_TYPE_FACTALNOISE: 1, // 1
    +SVG_TURBULENCE_TYPE_TURBULENCE: 2, // 2
    +SVG_TURBULENCE_TYPE_UNKNOWN: 0, // 0
    +svgTurbulenceType_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_svgUnitTypes: {|
    +SVG_UNITTYPE_OBJECTBOUNDINGBOX: 2, // 2
    +SVG_UNITTYPE_UNKNOWN: 0, // 0
    +SVG_UNITTYPE_USERSPACEONUSE: 1, // 1
    +svgUnitTypes_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_textDecoration: {|
    +textDecoration_Max: 2147483647, // 2147483647
    +textDecorationBlink: 4, // 4
    +textDecorationLineThrough: 3, // 3
    +textDecorationNone: 0, // 0
    +textDecorationOverline: 2, // 2
    +textDecorationUnderline: 1 // 1
  |};

  declare var MSHTML$_textpathMethodtype: {|
    +TEXTPATH_METHODTYPE_ALIGN: 1, // 1
    +TEXTPATH_METHODTYPE_STRETCH: 2, // 2
    +TEXTPATH_METHODTYPE_UNKNOWN: 0, // 0
    +textpathMethodtype_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_textpathSpacingtype: {|
    +TEXTPATH_SPACINGTYPE_AUTO: 1, // 1
    +TEXTPATH_SPACINGTYPE_EXACT: 2, // 2
    +TEXTPATH_SPACINGTYPE_UNKNOWN: 0, // 0
    +textpathSpacingtype_Max: 2147483647 // 2147483647
  |};

  declare var MSHTML$_VIEW_OBJECT_ALPHA_MODE: {|
    +VIEW_OBJECT_ALPHA_MODE_IGNORE: 0, // 0
    +VIEW_OBJECT_ALPHA_MODE_Max: 2147483647, // 2147483647
    +VIEW_OBJECT_ALPHA_MODE_PREMULTIPLIED: 1 // 1
  |};

  declare var MSHTML$_VIEW_OBJECT_COMPOSITION_MODE: {|
    +VIEW_OBJECT_COMPOSITION_MODE_LEGACY: 0, // 0
    +VIEW_OBJECT_COMPOSITION_MODE_Max: 2147483647, // 2147483647
    +VIEW_OBJECT_COMPOSITION_MODE_SURFACEPRESENTER: 1 // 1
  |};

  declare var MSHTML$DXGI_FORMAT: {|
    +DXGI_FORMAT_420_OPAQUE: 106, // 106
    +DXGI_FORMAT_A8_UNORM: 65, // 65
    +DXGI_FORMAT_A8P8: 114, // 114
    +DXGI_FORMAT_AI44: 111, // 111
    +DXGI_FORMAT_AYUV: 100, // 100
    +DXGI_FORMAT_B4G4R4A4_UNORM: 115, // 115
    +DXGI_FORMAT_B5G5R5A1_UNORM: 86, // 86
    +DXGI_FORMAT_B5G6R5_UNORM: 85, // 85
    +DXGI_FORMAT_B8G8R8A8_TYPELESS: 90, // 90
    +DXGI_FORMAT_B8G8R8A8_UNORM: 87, // 87
    +DXGI_FORMAT_B8G8R8A8_UNORM_SRGB: 91, // 91
    +DXGI_FORMAT_B8G8R8X8_TYPELESS: 92, // 92
    +DXGI_FORMAT_B8G8R8X8_UNORM: 88, // 88
    +DXGI_FORMAT_B8G8R8X8_UNORM_SRGB: 93, // 93
    +DXGI_FORMAT_BC1_TYPELESS: 70, // 70
    +DXGI_FORMAT_BC1_UNORM: 71, // 71
    +DXGI_FORMAT_BC1_UNORM_SRGB: 72, // 72
    +DXGI_FORMAT_BC2_TYPELESS: 73, // 73
    +DXGI_FORMAT_BC2_UNORM: 74, // 74
    +DXGI_FORMAT_BC2_UNORM_SRGB: 75, // 75
    +DXGI_FORMAT_BC3_TYPELESS: 76, // 76
    +DXGI_FORMAT_BC3_UNORM: 77, // 77
    +DXGI_FORMAT_BC3_UNORM_SRGB: 78, // 78
    +DXGI_FORMAT_BC4_SNORM: 81, // 81
    +DXGI_FORMAT_BC4_TYPELESS: 79, // 79
    +DXGI_FORMAT_BC4_UNORM: 80, // 80
    +DXGI_FORMAT_BC5_SNORM: 84, // 84
    +DXGI_FORMAT_BC5_TYPELESS: 82, // 82
    +DXGI_FORMAT_BC5_UNORM: 83, // 83
    +DXGI_FORMAT_BC6H_SF16: 96, // 96
    +DXGI_FORMAT_BC6H_TYPELESS: 94, // 94
    +DXGI_FORMAT_BC6H_UF16: 95, // 95
    +DXGI_FORMAT_BC7_TYPELESS: 97, // 97
    +DXGI_FORMAT_BC7_UNORM: 98, // 98
    +DXGI_FORMAT_BC7_UNORM_SRGB: 99, // 99
    +DXGI_FORMAT_D16_UNORM: 55, // 55
    +DXGI_FORMAT_D24_UNORM_S8_UINT: 45, // 45
    +DXGI_FORMAT_D32_FLOAT: 40, // 40
    +DXGI_FORMAT_D32_FLOAT_S8X24_UINT: 20, // 20
    +DXGI_FORMAT_FORCE_UINT: -1, // -1
    +DXGI_FORMAT_G8R8_G8B8_UNORM: 69, // 69
    +DXGI_FORMAT_IA44: 112, // 112
    +DXGI_FORMAT_NV11: 110, // 110
    +DXGI_FORMAT_NV12: 103, // 103
    +DXGI_FORMAT_P010: 104, // 104
    +DXGI_FORMAT_P016: 105, // 105
    +DXGI_FORMAT_P208: 130, // 130
    +DXGI_FORMAT_P8: 113, // 113
    +DXGI_FORMAT_R1_UNORM: 66, // 66
    +DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM: 89, // 89
    +DXGI_FORMAT_R10G10B10A2_TYPELESS: 23, // 23
    +DXGI_FORMAT_R10G10B10A2_UINT: 25, // 25
    +DXGI_FORMAT_R10G10B10A2_UNORM: 24, // 24
    +DXGI_FORMAT_R11G11B10_FLOAT: 26, // 26
    +DXGI_FORMAT_R16_FLOAT: 54, // 54
    +DXGI_FORMAT_R16_SINT: 59, // 59
    +DXGI_FORMAT_R16_SNORM: 58, // 58
    +DXGI_FORMAT_R16_TYPELESS: 53, // 53
    +DXGI_FORMAT_R16_UINT: 57, // 57
    +DXGI_FORMAT_R16_UNORM: 56, // 56
    +DXGI_FORMAT_R16G16_FLOAT: 34, // 34
    +DXGI_FORMAT_R16G16_SINT: 38, // 38
    +DXGI_FORMAT_R16G16_SNORM: 37, // 37
    +DXGI_FORMAT_R16G16_TYPELESS: 33, // 33
    +DXGI_FORMAT_R16G16_UINT: 36, // 36
    +DXGI_FORMAT_R16G16_UNORM: 35, // 35
    +DXGI_FORMAT_R16G16B16A16_FLOAT: 10, // 10
    +DXGI_FORMAT_R16G16B16A16_SINT: 14, // 14
    +DXGI_FORMAT_R16G16B16A16_SNORM: 13, // 13
    +DXGI_FORMAT_R16G16B16A16_TYPELESS: 9, // 9
    +DXGI_FORMAT_R16G16B16A16_UINT: 12, // 12
    +DXGI_FORMAT_R16G16B16A16_UNORM: 11, // 11
    +DXGI_FORMAT_R24_UNORM_X8_TYPELESS: 46, // 46
    +DXGI_FORMAT_R24G8_TYPELESS: 44, // 44
    +DXGI_FORMAT_R32_FLOAT: 41, // 41
    +DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS: 21, // 21
    +DXGI_FORMAT_R32_SINT: 43, // 43
    +DXGI_FORMAT_R32_TYPELESS: 39, // 39
    +DXGI_FORMAT_R32_UINT: 42, // 42
    +DXGI_FORMAT_R32G32_FLOAT: 16, // 16
    +DXGI_FORMAT_R32G32_SINT: 18, // 18
    +DXGI_FORMAT_R32G32_TYPELESS: 15, // 15
    +DXGI_FORMAT_R32G32_UINT: 17, // 17
    +DXGI_FORMAT_R32G32B32_FLOAT: 6, // 6
    +DXGI_FORMAT_R32G32B32_SINT: 8, // 8
    +DXGI_FORMAT_R32G32B32_TYPELESS: 5, // 5
    +DXGI_FORMAT_R32G32B32_UINT: 7, // 7
    +DXGI_FORMAT_R32G32B32A32_FLOAT: 2, // 2
    +DXGI_FORMAT_R32G32B32A32_SINT: 4, // 4
    +DXGI_FORMAT_R32G32B32A32_TYPELESS: 1, // 1
    +DXGI_FORMAT_R32G32B32A32_UINT: 3, // 3
    +DXGI_FORMAT_R32G8X24_TYPELESS: 19, // 19
    +DXGI_FORMAT_R8_SINT: 64, // 64
    +DXGI_FORMAT_R8_SNORM: 63, // 63
    +DXGI_FORMAT_R8_TYPELESS: 60, // 60
    +DXGI_FORMAT_R8_UINT: 62, // 62
    +DXGI_FORMAT_R8_UNORM: 61, // 61
    +DXGI_FORMAT_R8G8_B8G8_UNORM: 68, // 68
    +DXGI_FORMAT_R8G8_SINT: 52, // 52
    +DXGI_FORMAT_R8G8_SNORM: 51, // 51
    +DXGI_FORMAT_R8G8_TYPELESS: 48, // 48
    +DXGI_FORMAT_R8G8_UINT: 50, // 50
    +DXGI_FORMAT_R8G8_UNORM: 49, // 49
    +DXGI_FORMAT_R8G8B8A8_SINT: 32, // 32
    +DXGI_FORMAT_R8G8B8A8_SNORM: 31, // 31
    +DXGI_FORMAT_R8G8B8A8_TYPELESS: 27, // 27
    +DXGI_FORMAT_R8G8B8A8_UINT: 30, // 30
    +DXGI_FORMAT_R8G8B8A8_UNORM: 28, // 28
    +DXGI_FORMAT_R8G8B8A8_UNORM_SRGB: 29, // 29
    +DXGI_FORMAT_R9G9B9E5_SHAREDEXP: 67, // 67
    +DXGI_FORMAT_UNKNOWN: 0, // 0
    +DXGI_FORMAT_V208: 131, // 131
    +DXGI_FORMAT_V408: 132, // 132
    +DXGI_FORMAT_X24_TYPELESS_G8_UINT: 47, // 47
    +DXGI_FORMAT_X32_TYPELESS_G8X24_UINT: 22, // 22
    +DXGI_FORMAT_Y210: 108, // 108
    +DXGI_FORMAT_Y216: 109, // 109
    +DXGI_FORMAT_Y410: 101, // 101
    +DXGI_FORMAT_Y416: 102, // 102
    +DXGI_FORMAT_YUY2: 107 // 107
  |};

  declare class MSHTML$applicationCache {
    constructor(): this;
    abort(): void;
    oncached: any;
    onchecking: any;
    ondownloading: any;
    onerror: any;
    onnoupdate: any;
    onobsolete: any;
    onprogress: any;
    onupdateready: any;
    status: number;
    swapCache(): void;
    update(): void;
  }

  declare interface MSHTML$BlockFormats {
    +Count: number;
    item(pvarIndex: any): string;
    (pvarIndex: any): string;
  }

  declare class MSHTML$CanvasGradient {
    constructor(): this;
    addColorStop(offset: number, color: string): void;
  }

  declare class MSHTML$CanvasImageData {
    constructor(): this;
    data: any;
    height: number;
    width: number;
  }

  declare class MSHTML$CanvasPattern {
    constructor(): this;
  }

  declare class MSHTML$CanvasRenderingContext2D {
    constructor(): this;
    arc(
      x: number,
      y: number,
      radius: number,
      startAngle: number,
      endAngle: number,
      anticlockwise: number
    ): void;
    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;
    beginPath(): void;
    bezierCurveTo(
      cp1x: number,
      cp1y: number,
      cp2x: number,
      cp2y: number,
      x: number,
      y: number
    ): void;
    canvas: MSHTML$IHTMLCanvasElement;
    clearRect(x: number, y: number, w: number, h: number): void;
    clip(): void;
    closePath(): void;
    createImageData(a1: any, a2: any): MSHTML$ICanvasImageData;
    createLinearGradient(
      x0: number,
      y0: number,
      x1: number,
      y1: number
    ): MSHTML$ICanvasGradient;
    createPattern(Image: any, repetition: any): MSHTML$ICanvasPattern;
    createRadialGradient(
      x0: number,
      y0: number,
      r0: number,
      x1: number,
      y1: number,
      r1: number
    ): MSHTML$ICanvasGradient;
    drawImage(
      pSrc: any,
      a1: any,
      a2: any,
      a3: any,
      a4: any,
      a5: any,
      a6: any,
      a7: any,
      a8: any
    ): void;
    fill(): void;
    fillRect(x: number, y: number, w: number, h: number): void;
    fillStyle: any;
    fillText(text: string, x: number, y: number, maxWidth: any): void;
    font: string;
    getImageData(
      sx: number,
      sy: number,
      sw: number,
      sh: number
    ): MSHTML$ICanvasImageData;
    globalAlpha: number;
    globalCompositeOperation: string;
    isPointInPath(x: number, y: number): boolean;
    lineCap: string;
    lineJoin: string;
    lineTo(x: number, y: number): void;
    lineWidth: number;
    measureText(text: string): MSHTML$ICanvasTextMetrics;
    miterLimit: number;
    moveTo(x: number, y: number): void;
    putImageData(
      imagedata: MSHTML$ICanvasImageData,
      dx: number,
      dy: number,
      dirtyX: any,
      dirtyY: any,
      dirtyWidth: any,
      dirtyHeight: any
    ): void;
    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;
    rect(x: number, y: number, w: number, h: number): void;
    restore(): void;
    rotate(angle: number): void;
    save(): void;
    scale(x: number, y: number): void;
    setTransform(
      m11: number,
      m12: number,
      m21: number,
      m22: number,
      dx: number,
      dy: number
    ): void;
    shadowBlur: number;
    shadowColor: string;
    shadowOffsetX: number;
    shadowOffsetY: number;
    stroke(): void;
    strokeRect(x: number, y: number, w: number, h: number): void;
    strokeStyle: any;
    strokeText(text: string, x: number, y: number, maxWidth: any): void;
    textAlign: string;
    textBaseline: string;
    transform(
      m11: number,
      m12: number,
      m21: number,
      m22: number,
      dx: number,
      dy: number
    ): void;
    translate(x: number, y: number): void;
  }

  declare class MSHTML$CanvasTextMetrics {
    constructor(): this;
    width: number;
  }

  declare class MSHTML$CClientCaps {
    constructor(): this;

    /**
     * @param bStrVer [bStrVer='']
     */
    addComponentRequest(
      bstrName: string,
      bstrURL: string,
      bStrVer?: string
    ): void;
    availHeight: number;
    availWidth: number;
    bufferDepth: number;
    clearComponentRequest(): void;
    colorDepth: number;
    compareVersions(bstrVer1: string, bstrVer2: string): number;
    connectionSpeed: number;
    connectionType: string;
    cookieEnabled: boolean;
    cpuClass: string;
    doComponentRequest(): boolean;
    getComponentVersion(bstrName: string, bstrURL: string): string;
    height: number;

    /**
     * @param bStrVer [bStrVer='']
     */
    isComponentInstalled(
      bstrName: string,
      bstrURL: string,
      bStrVer?: string
    ): boolean;
    javaEnabled: boolean;
    onLine: boolean;
    platform: string;
    systemLanguage: string;
    userLanguage: string;
    width: number;
  }

  declare class MSHTML$CEventObj {
    constructor(): this;
    actionURL: string;
    altKey: boolean;
    altLeft: boolean;
    behaviorCookie: number;
    behaviorPart: number;
    bookmarks: MSHTML$IHTMLBookmarkCollection;
    boundElements: MSHTML$IHTMLElementCollection;
    button: number;
    buttonID: number;
    cancelBubble: boolean;
    clientX: number;
    clientY: number;
    //constructor: any;
    contentOverflow: boolean;
    ctrlKey: boolean;
    ctrlLeft: boolean;
    data: string;
    dataFld: string;
    dataTransfer: MSHTML$IHTMLDataTransfer;
    fromElement: MSHTML$IHTMLElement;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    keyCode: number;
    nextPage: string;
    offsetX: number;
    offsetY: number;
    origin: string;
    propertyName: string;
    qualifier: string;
    reason: number;
    recordset: any;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    repeat: boolean;
    returnValue: any;
    screenX: number;
    screenY: number;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    shiftKey: boolean;
    shiftLeft: boolean;
    source: any;
    srcElement: MSHTML$IHTMLElement;
    srcFilter: any;
    srcUrn: string;
    toElement: MSHTML$IHTMLElement;
    type: string;
    url: string;
    wheelDelta: number;
    x: number;
    y: number;
  }

  declare class MSHTML$CMimeTypes {
    constructor(): this;
    length: number;
  }

  declare class MSHTML$COpsProfile {
    constructor(): this;
    addReadRequest(name: string, reserved?: any): boolean;
    addRequest(name: string, reserved?: any): boolean;
    clearRequest(): void;
    commitChanges(): boolean;
    doReadRequest(
      usage: any,
      fname?: any,
      domain?: any,
      path?: any,
      expire?: any,
      reserved?: any
    ): void;
    doRequest(
      usage: any,
      fname?: any,
      domain?: any,
      path?: any,
      expire?: any,
      reserved?: any
    ): void;
    doWriteRequest(): boolean;
    getAttribute(name: string): string;
    setAttribute(name: string, value: string, prefs?: any): boolean;
  }

  declare class MSHTML$CPlugins {
    constructor(): this;
    //constructor: any;
    length: number;

    /**
     * @param reload [reload=false]
     */
    refresh(reload?: boolean): void;
  }

  declare class MSHTML$CPrintManagerTemplatePrinter {
    constructor(): this;
    allLinkedDocuments: boolean;
    collate: boolean;
    copies: number;
    currentPage: boolean;
    currentPageAvail: boolean;
    deviceSupports(bstrProperty: string): any;
    drawPreviewPage(pElemDisp: any, nPage: number): void;
    duplex: boolean;
    endPrint(): void;
    ensurePrintDialogDefaults(): boolean;
    footer: string;
    frameActive: boolean;
    frameActiveEnabled: boolean;
    frameAsShown: boolean;
    framesetDocument: boolean;
    getPageMarginBottom(
      pageRule: any,
      pageWidth: number,
      pageHeight: number
    ): any;
    getPageMarginBottomImportant(pageRule: any): boolean;
    getPageMarginLeft(
      pageRule: any,
      pageWidth: number,
      pageHeight: number
    ): any;
    getPageMarginLeftImportant(pageRule: any): boolean;
    getPageMarginRight(
      pageRule: any,
      pageWidth: number,
      pageHeight: number
    ): any;
    getPageMarginRightImportant(pageRule: any): boolean;
    getPageMarginTop(pageRule: any, pageWidth: number, pageHeight: number): any;
    getPageMarginTopImportant(pageRule: any): boolean;
    getPrintTaskOptionValue(bstrKey: string): any;
    header: string;
    headerFooterFont: string;
    invalidatePreview(): void;
    marginBottom: number;
    marginLeft: number;
    marginRight: number;
    marginTop: number;
    orientation: string;
    pageFrom: number;
    pageHeight: number;
    pageTo: number;
    pageWidth: number;
    percentScale: number;
    printBlankPage(): void;
    printNonNative(pMarkup: any): boolean;
    printNonNativeFrames(pMarkup: any, fActiveFrame: boolean): void;
    printPage(pElemDisp: any): void;
    selectedPages: boolean;
    selection: boolean;
    selectionEnabled: boolean;
    setPageCount(nPage: number): void;
    showHeaderFooter: boolean;
    showPageSetupDialog(): boolean;
    showPrintDialog(): boolean;
    shrinkToFit: boolean;
    startDoc(bstrTitle: string): boolean;
    startPrint(): void;
    stopDoc(): void;
    tableOfLinks: boolean;
    unprintableBottom: number;
    unprintableLeft: number;
    unprintableRight: number;
    unprintableTop: number;
    updatePageStatus(p: number): void;
    usePrinterCopyCollate: boolean;
  }

  declare class MSHTML$CTemplatePrinter {
    constructor(): this;
    allLinkedDocuments: boolean;
    collate: boolean;
    copies: number;
    currentPage: boolean;
    currentPageAvail: boolean;
    deviceSupports(bstrProperty: string): any;
    duplex: boolean;
    ensurePrintDialogDefaults(): boolean;
    footer: string;
    frameActive: boolean;
    frameActiveEnabled: boolean;
    frameAsShown: boolean;
    framesetDocument: boolean;
    getPageMarginBottom(
      pageRule: any,
      pageWidth: number,
      pageHeight: number
    ): any;
    getPageMarginBottomImportant(pageRule: any): boolean;
    getPageMarginLeft(
      pageRule: any,
      pageWidth: number,
      pageHeight: number
    ): any;
    getPageMarginLeftImportant(pageRule: any): boolean;
    getPageMarginRight(
      pageRule: any,
      pageWidth: number,
      pageHeight: number
    ): any;
    getPageMarginRightImportant(pageRule: any): boolean;
    getPageMarginTop(pageRule: any, pageWidth: number, pageHeight: number): any;
    getPageMarginTopImportant(pageRule: any): boolean;
    header: string;
    headerFooterFont: string;
    marginBottom: number;
    marginLeft: number;
    marginRight: number;
    marginTop: number;
    orientation: string;
    pageFrom: number;
    pageHeight: number;
    pageTo: number;
    pageWidth: number;
    printBlankPage(): void;
    printNonNative(pMarkup: any): boolean;
    printNonNativeFrames(pMarkup: any, fActiveFrame: boolean): void;
    printPage(pElemDisp: any): void;
    selectedPages: boolean;
    selection: boolean;
    selectionEnabled: boolean;
    showPageSetupDialog(): boolean;
    showPrintDialog(): boolean;
    startDoc(bstrTitle: string): boolean;
    stopDoc(): void;
    tableOfLinks: boolean;
    unprintableBottom: number;
    unprintableLeft: number;
    unprintableRight: number;
    unprintableTop: number;
    updatePageStatus(p: number): void;
    usePrinterCopyCollate: boolean;
  }

  declare class MSHTML$DOMBeforeUnloadEvent {
    constructor(): this;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    eventPhase: number;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    isTrusted: boolean;
    preventDefault(): void;
    returnValue: any;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
  }

  declare interface MSHTML$DOMChildrenCollection {
    //+constructor: any;
    ie9_item(index: number): any;
    item(index: number): any;
    +length: number;
    (index: number): any;
  }

  declare class MSHTML$DOMCloseEvent {
    constructor(): this;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    eventPhase: number;
    initCloseEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      wasClean: boolean,
      code: number,
      reason: string
    ): void;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    isTrusted: boolean;
    preventDefault(): void;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
    wasClean: boolean;
  }

  declare class MSHTML$DOMCompositionEvent {
    constructor(): this;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    currentTarget: MSHTML$IEventTarget;
    data: string;
    defaultPrevented: boolean;
    detail: number;
    eventPhase: number;
    initCompositionEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      viewArg: MSHTML$IHTMLWindow2,
      data: string,
      locale: string
    ): void;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    initUIEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      view: MSHTML$IHTMLWindow2,
      detail: number
    ): void;
    isTrusted: boolean;
    locale: string;
    preventDefault(): void;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
    view: MSHTML$IHTMLWindow2;
  }

  declare class MSHTML$DOMCustomEvent {
    constructor(): this;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    detail: any;
    eventPhase: number;
    initCustomEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      detail: any
    ): void;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    isTrusted: boolean;
    preventDefault(): void;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
  }

  declare class MSHTML$DOMDocumentType {
    constructor(): this;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    attributes: any;
    childNodes: any;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    entities: any;
    firstChild: MSHTML$IHTMLDOMNode;
    hasChildNodes(): boolean;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    internalSubset: any;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    name: string;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    notations: any;
    ownerDocument: any;
    parentNode: MSHTML$IHTMLDOMNode;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    publicId: any;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    systemId: any;
    textContent: any;
  }

  declare class MSHTML$DOMDragEvent {
    constructor(): this;
    altKey: boolean;
    bubbles: boolean;
    button: number;
    buttons: number;
    cancelable: boolean;
    cancelBubble: boolean;
    clientX: number;
    clientY: number;
    ctrlKey: boolean;
    currentTarget: MSHTML$IEventTarget;
    dataTransfer: MSHTML$IHTMLDataTransfer;
    defaultPrevented: boolean;
    detail: number;
    eventPhase: number;
    fromElement: MSHTML$IHTMLElement;
    getModifierState(keyArg: string): boolean;
    initDragEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      viewArg: MSHTML$IHTMLWindow2,
      detailArg: number,
      screenXArg: number,
      screenYArg: number,
      clientXArg: number,
      clientYArg: number,
      ctrlKeyArg: boolean,
      altKeyArg: boolean,
      shiftKeyArg: boolean,
      metaKeyArg: boolean,
      buttonArg: number,
      relatedTargetArg: MSHTML$IEventTarget,
      dataTransferArg: MSHTML$IHTMLDataTransfer
    ): void;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    initMouseEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      viewArg: MSHTML$IHTMLWindow2,
      detailArg: number,
      screenXArg: number,
      screenYArg: number,
      clientXArg: number,
      clientYArg: number,
      ctrlKeyArg: boolean,
      altKeyArg: boolean,
      shiftKeyArg: boolean,
      metaKeyArg: boolean,
      buttonArg: number,
      relatedTargetArg: MSHTML$IEventTarget
    ): void;
    initUIEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      view: MSHTML$IHTMLWindow2,
      detail: number
    ): void;
    isTrusted: boolean;
    layerX: number;
    layerY: number;
    metaKey: boolean;
    offsetX: number;
    offsetY: number;
    pageX: number;
    pageY: number;
    preventDefault(): void;
    relatedTarget: MSHTML$IEventTarget;
    screenX: number;
    screenY: number;
    shiftKey: boolean;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    toElement: MSHTML$IHTMLElement;
    type: string;
    view: MSHTML$IHTMLWindow2;
    which: number;
    x: number;
    y: number;
  }

  declare class MSHTML$DOMEvent {
    constructor(): this;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    eventPhase: number;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    isTrusted: boolean;
    preventDefault(): void;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
  }

  declare class MSHTML$DOMException {
    constructor(): this;
    code: number;
    message: string;
  }

  declare class MSHTML$DOMFocusEvent {
    constructor(): this;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    detail: number;
    eventPhase: number;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    initFocusEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      view: MSHTML$IHTMLWindow2,
      detail: number,
      relatedTargetArg: MSHTML$IEventTarget
    ): void;
    initUIEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      view: MSHTML$IHTMLWindow2,
      detail: number
    ): void;
    isTrusted: boolean;
    preventDefault(): void;
    relatedTarget: MSHTML$IEventTarget;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
    view: MSHTML$IHTMLWindow2;
  }

  declare class MSHTML$DOMKeyboardEvent {
    constructor(): this;
    altKey: boolean;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    charCode: number;
    ctrlKey: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    detail: number;
    eventPhase: number;
    getModifierState(keyArg: string): boolean;
    ie9_char: any;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    initKeyboardEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      viewArg: MSHTML$IHTMLWindow2,
      keyArg: string,
      locationArg: number,
      modifiersListArg: string,
      repeat: boolean,
      locale: string
    ): void;
    initUIEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      view: MSHTML$IHTMLWindow2,
      detail: number
    ): void;
    isTrusted: boolean;
    key: string;
    keyCode: number;
    locale: string;
    location: number;
    metaKey: boolean;
    preventDefault(): void;
    repeat: boolean;
    shiftKey: boolean;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
    view: MSHTML$IHTMLWindow2;
    which: number;
  }

  declare class MSHTML$DOMMessageEvent {
    constructor(): this;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    currentTarget: MSHTML$IEventTarget;
    data: string;
    defaultPrevented: boolean;
    eventPhase: number;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    initMessageEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      data: string,
      origin: string,
      lastEventId: string,
      source: MSHTML$IHTMLWindow2
    ): void;
    isTrusted: boolean;
    origin: string;
    preventDefault(): void;
    source: MSHTML$IHTMLWindow2;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
  }

  declare class MSHTML$DOMMouseEvent {
    constructor(): this;
    altKey: boolean;
    bubbles: boolean;
    button: number;
    buttons: number;
    cancelable: boolean;
    cancelBubble: boolean;
    clientX: number;
    clientY: number;
    ctrlKey: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    detail: number;
    eventPhase: number;
    fromElement: MSHTML$IHTMLElement;
    getModifierState(keyArg: string): boolean;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    initMouseEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      viewArg: MSHTML$IHTMLWindow2,
      detailArg: number,
      screenXArg: number,
      screenYArg: number,
      clientXArg: number,
      clientYArg: number,
      ctrlKeyArg: boolean,
      altKeyArg: boolean,
      shiftKeyArg: boolean,
      metaKeyArg: boolean,
      buttonArg: number,
      relatedTargetArg: MSHTML$IEventTarget
    ): void;
    initUIEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      view: MSHTML$IHTMLWindow2,
      detail: number
    ): void;
    isTrusted: boolean;
    layerX: number;
    layerY: number;
    metaKey: boolean;
    offsetX: number;
    offsetY: number;
    pageX: number;
    pageY: number;
    preventDefault(): void;
    relatedTarget: MSHTML$IEventTarget;
    screenX: number;
    screenY: number;
    shiftKey: boolean;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    toElement: MSHTML$IHTMLElement;
    type: string;
    view: MSHTML$IHTMLWindow2;
    which: number;
    x: number;
    y: number;
  }

  declare class MSHTML$DOMMouseWheelEvent {
    constructor(): this;
    altKey: boolean;
    bubbles: boolean;
    button: number;
    buttons: number;
    cancelable: boolean;
    cancelBubble: boolean;
    clientX: number;
    clientY: number;
    ctrlKey: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    detail: number;
    eventPhase: number;
    fromElement: MSHTML$IHTMLElement;
    getModifierState(keyArg: string): boolean;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    initMouseEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      viewArg: MSHTML$IHTMLWindow2,
      detailArg: number,
      screenXArg: number,
      screenYArg: number,
      clientXArg: number,
      clientYArg: number,
      ctrlKeyArg: boolean,
      altKeyArg: boolean,
      shiftKeyArg: boolean,
      metaKeyArg: boolean,
      buttonArg: number,
      relatedTargetArg: MSHTML$IEventTarget
    ): void;
    initMouseWheelEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      viewArg: MSHTML$IHTMLWindow2,
      detailArg: number,
      screenXArg: number,
      screenYArg: number,
      clientXArg: number,
      clientYArg: number,
      buttonArg: number,
      relatedTargetArg: MSHTML$IEventTarget,
      modifiersListArg: string,
      wheelDeltaArg: number
    ): void;
    initUIEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      view: MSHTML$IHTMLWindow2,
      detail: number
    ): void;
    isTrusted: boolean;
    layerX: number;
    layerY: number;
    metaKey: boolean;
    offsetX: number;
    offsetY: number;
    pageX: number;
    pageY: number;
    preventDefault(): void;
    relatedTarget: MSHTML$IEventTarget;
    screenX: number;
    screenY: number;
    shiftKey: boolean;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    toElement: MSHTML$IHTMLElement;
    type: string;
    view: MSHTML$IHTMLWindow2;
    wheelDelta: number;
    which: number;
    x: number;
    y: number;
  }

  declare class MSHTML$DOMMSAnimationEvent {
    constructor(): this;
    animationName: string;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    elapsedTime: number;
    eventPhase: number;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    initMSAnimationEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      animationName: string,
      elapsedTime: number
    ): void;
    isTrusted: boolean;
    preventDefault(): void;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
  }

  declare class MSHTML$DOMMSManipulationEvent {
    constructor(): this;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    currentState: number;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    detail: number;
    eventPhase: number;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    initMSManipulationEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      viewArg: MSHTML$IHTMLWindow2,
      detailArg: number,
      lastState: number,
      currentState: number
    ): void;
    initUIEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      view: MSHTML$IHTMLWindow2,
      detail: number
    ): void;
    isTrusted: boolean;
    lastState: number;
    preventDefault(): void;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
    view: MSHTML$IHTMLWindow2;
  }

  declare class MSHTML$DOMMSTransitionEvent {
    constructor(): this;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    elapsedTime: number;
    eventPhase: number;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    initMSTransitionEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      propertyName: string,
      elapsedTime: number
    ): void;
    isTrusted: boolean;
    preventDefault(): void;
    propertyName: string;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
  }

  declare class MSHTML$DOMMutationEvent {
    constructor(): this;
    attrChange: number;
    attrName: string;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    eventPhase: number;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    initMutationEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      relatedNodeArg: any,
      prevValueArg: string,
      newValueArg: string,
      attrNameArg: string,
      attrChangeArg: number
    ): void;
    isTrusted: boolean;
    newValue: string;
    preventDefault(): void;
    prevValue: string;
    relatedNode: any;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
  }

  declare class MSHTML$DOMParser {
    constructor(): this;
    parseFromString(xmlSource: string, mimeType: string): MSHTML$IHTMLDocument2;
  }

  declare interface MSHTML$DOMParserFactory {
    create(): MSHTML$IDOMParser;
    (): MSHTML$IDOMParser;
  }

  declare class MSHTML$DOMProcessingInstruction {
    constructor(): this;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    attributes: any;
    childNodes: any;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    data: string;
    firstChild: MSHTML$IHTMLDOMNode;
    hasChildNodes(): boolean;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    ownerDocument: any;
    parentNode: MSHTML$IHTMLDOMNode;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    target: string;
    textContent: any;
  }

  declare class MSHTML$DOMProgressEvent {
    constructor(): this;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    eventPhase: number;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    initProgressEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      lengthComputableArg: boolean,
      loadedArg: number,
      totalArg: number
    ): void;
    isTrusted: boolean;
    lengthComputable: boolean;
    loaded: number;
    preventDefault(): void;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    total: number;
    type: string;
  }

  declare class MSHTML$DOMSiteModeEvent {
    constructor(): this;
    actionURL: string;
    bubbles: boolean;
    buttonID: number;
    cancelable: boolean;
    cancelBubble: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    eventPhase: number;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    isTrusted: boolean;
    preventDefault(): void;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
  }

  declare class MSHTML$DOMStorageEvent {
    constructor(): this;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    eventPhase: number;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    initStorageEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      keyArg: string,
      oldValueArg: string,
      newValueArg: string,
      urlArg: string,
      storageAreaArg: MSHTML$IHTMLStorage
    ): void;
    isTrusted: boolean;
    key: string;
    newValue: string;
    oldValue: string;
    preventDefault(): void;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    storageArea: MSHTML$IHTMLStorage;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
    url: string;
  }

  declare class MSHTML$DOMTextEvent {
    constructor(): this;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    currentTarget: MSHTML$IEventTarget;
    data: string;
    defaultPrevented: boolean;
    detail: number;
    eventPhase: number;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    initTextEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      viewArg: MSHTML$IHTMLWindow2,
      dataArg: string,
      inputMethod: number,
      locale: string
    ): void;
    initUIEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      view: MSHTML$IHTMLWindow2,
      detail: number
    ): void;
    inputMethod: number;
    isTrusted: boolean;
    locale: string;
    preventDefault(): void;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
    view: MSHTML$IHTMLWindow2;
  }

  declare class MSHTML$DOMUIEvent {
    constructor(): this;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    detail: number;
    eventPhase: number;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    initUIEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      view: MSHTML$IHTMLWindow2,
      detail: number
    ): void;
    isTrusted: boolean;
    preventDefault(): void;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
    view: MSHTML$IHTMLWindow2;
  }

  declare class MSHTML$DOMWheelEvent {
    constructor(): this;
    altKey: boolean;
    bubbles: boolean;
    button: number;
    buttons: number;
    cancelable: boolean;
    cancelBubble: boolean;
    clientX: number;
    clientY: number;
    ctrlKey: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    deltaMode: number;
    deltaX: number;
    deltaY: number;
    deltaZ: number;
    detail: number;
    eventPhase: number;
    fromElement: MSHTML$IHTMLElement;
    getModifierState(keyArg: string): boolean;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    initMouseEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      viewArg: MSHTML$IHTMLWindow2,
      detailArg: number,
      screenXArg: number,
      screenYArg: number,
      clientXArg: number,
      clientYArg: number,
      ctrlKeyArg: boolean,
      altKeyArg: boolean,
      shiftKeyArg: boolean,
      metaKeyArg: boolean,
      buttonArg: number,
      relatedTargetArg: MSHTML$IEventTarget
    ): void;
    initUIEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      view: MSHTML$IHTMLWindow2,
      detail: number
    ): void;
    initWheelEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      viewArg: MSHTML$IHTMLWindow2,
      detailArg: number,
      screenXArg: number,
      screenYArg: number,
      clientXArg: number,
      clientYArg: number,
      buttonArg: number,
      relatedTargetArg: MSHTML$IEventTarget,
      modifiersListArg: string,
      deltaX: number,
      deltaY: number,
      deltaZ: number,
      deltaMode: number
    ): void;
    isTrusted: boolean;
    layerX: number;
    layerY: number;
    metaKey: boolean;
    offsetX: number;
    offsetY: number;
    pageX: number;
    pageY: number;
    preventDefault(): void;
    relatedTarget: MSHTML$IEventTarget;
    screenX: number;
    screenY: number;
    shiftKey: boolean;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    toElement: MSHTML$IHTMLElement;
    type: string;
    view: MSHTML$IHTMLWindow2;
    which: number;
    x: number;
    y: number;
  }

  declare class MSHTML$EventException {
    constructor(): this;
  }

  declare interface MSHTML$FontNames {
    +Count: number;
    item(pvarIndex: any): string;
    (pvarIndex: any): string;
  }

  declare interface MSHTML$FramesCollection {
    item(pvarIndex: any): any;
    +length: number;
    (pvarIndex: any): any;
  }

  declare interface MSHTML$HTCAttachBehavior {
    detachEvent(): void;
    FireEvent(evt: any): void;
    (evt: any): void;
  }

  declare class MSHTML$HTCDefaultDispatch {
    constructor(): this;
    CreateEventObject(): MSHTML$IHTMLEventObj;
    defaults: any;
    document: any;
    element: MSHTML$IHTMLElement;
  }

  declare class MSHTML$HTCDescBehavior {
    constructor(): this;
    name: string;
    urn: string;
  }

  declare class MSHTML$HTCEventBehavior {
    constructor(): this;
    fire(pVar: MSHTML$IHTMLEventObj): void;
  }

  declare class MSHTML$HTCMethodBehavior {
    constructor(): this;
  }

  declare class MSHTML$HTCPropertyBehavior {
    constructor(): this;
    fireChange(): void;
    value: any;
  }

  declare class MSHTML$HTMLAnchorElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    charset: string;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    coords: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hash: string;
    hideFocus: boolean;
    host: string;
    hostname: string;
    href: string;
    hreflang: string;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_coords: string;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_href: string;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_shape: string;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    Methods: string;
    mimeType: string;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    name: string;
    nameProp: string;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    pathname: string;
    port: string;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    protocol: string;
    protocolLong: string;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    rel: string;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    rev: string;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    search: string;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    shape: string;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    target: string;
    textContent: any;
    title: string;
    toString(): string;
    type: string;
    uniqueID: string;
    uniqueNumber: number;
    urn: string;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLAppBehavior {
    constructor(): this;
    applicationName: string;
    border: string;
    borderStyle: string;
    caption: string;
    commandLine: string;
    contextMenu: string;
    icon: string;
    innerBorder: string;
    maximizeButton: string;
    minimizeButton: string;
    scroll: string;
    scrollFlat: string;
    selection: string;
    showInTaskBar: string;
    singleInstance: string;
    sysMenu: string;
    version: string;
    windowState: string;
  }

  declare class MSHTML$HTMLAreaElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    alt: string;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    coords: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hash: string;
    hideFocus: boolean;
    host: string;
    hostname: string;
    href: string;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_coords: string;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_href: string;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_shape: string;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    noHref: boolean;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    pathname: string;
    port: string;
    previousSibling: MSHTML$IHTMLDOMNode;
    protocol: string;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    search: string;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    shape: string;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    target: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare interface MSHTML$HTMLAreasCollection {
    add(element: MSHTML$IHTMLElement, before?: any): void;
    //+constructor: any;
    ie8_item(index: number): MSHTML$IHTMLElement2;
    +ie8_length: number;
    ie8_namedItem(name: string): MSHTML$IHTMLElement2;
    item(name?: any, index?: any): any;
    length: number;
    namedItem(name: string): any;

    /**
     * @param index [index=-1]
     */
    remove(index?: number): void;
    tags(tagName: any): any;
    urns(urn: any): any;
    (name?: any, index?: any): any;
  }

  declare interface MSHTML$HTMLAttributeCollection {
    //+constructor: any;
    getNamedItem(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getNamedItemNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_getNamedItem(bstrName: string): MSHTML$IHTMLDOMAttribute;
    ie8_item(index: number): MSHTML$IHTMLDOMAttribute;
    +ie8_length: number;
    ie8_removeNamedItem(bstrName: string): MSHTML$IHTMLDOMAttribute;
    ie8_setNamedItem(
      pNodeIn: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    ie9_getNamedItem(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_item(index: number): MSHTML$IHTMLDOMAttribute2;
    +ie9_length: number;
    ie9_removeNamedItem(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_setNamedItem(
      pNodeIn: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    item(name?: any): any;
    +length: number;
    removeNamedItem(bstrName: string): MSHTML$IHTMLDOMAttribute;
    removeNamedItemNS(pvarNS: any, bstrName: string): MSHTML$IHTMLDOMAttribute2;
    setNamedItem(ppNode: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setNamedItemNS(
      pNodeIn: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    (name?: any): any;
  }

  declare class MSHTML$HTMLAudioElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    autobuffer: boolean;
    autoplay: boolean;
    behaviorUrns: any;
    blur(): void;
    buffered: MSHTML$IHTMLTimeRanges;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    canPlayType(type: string): string;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    controls: boolean;
    createControlRange(): any;
    currentSrc: string;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    currentTime: number;
    currentTimeDouble: number;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    defaultPlaybackRate: number;
    defaultPlaybackRateDouble: number;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    duration: number;
    durationDouble: number;
    ended: boolean;
    error: MSHTML$IHTMLMediaError;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    initialTime: number;
    initialTimeDouble: number;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    load(): void;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    loop: boolean;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msPlayToDisabled: boolean;
    msPlayToPrimary: boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    muted: boolean;
    namespaceURI: any;
    networkState: number;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    pause(): void;
    paused: boolean;
    play(): void;
    playbackRate: number;
    playbackRateDouble: number;
    played: MSHTML$IHTMLTimeRanges;
    prefix: any;
    preload: string;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    seekable: MSHTML$IHTMLTimeRanges;
    seeking: boolean;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    src: string;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    volume: number;
    volumeDouble: number;
    xmsAcceleratorKey: string;
  }

  declare interface MSHTML$HTMLAudioElementFactory {
    create(src?: any): MSHTML$IHTMLAudioElement;
    (src?: any): MSHTML$IHTMLAudioElement;
  }

  declare class MSHTML$HTMLBaseElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    href: string;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_href: string;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    target: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLBaseFontElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    color: any;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    face: string;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    size: number;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLBGsound {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    balance: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    loop: any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    src: string;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    volume: any;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLBlockElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    cite: string;
    className: string;
    clear: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_cite: string;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    width: string;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLBody {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    aLink: any;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    background: string;
    behaviorUrns: any;
    bgColor: any;
    bgProperties: string;
    blur(): void;
    bottomMargin: any;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    createTextRange(): MSHTML$IHTMLTxtRange;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_background: string;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    leftMargin: any;
    link: any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    noWrap: boolean;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterprint: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeprint: any;
    onbeforeunload: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhashchange: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmessage: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onoffline: any;
    ononline: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onpopstate: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onstorage: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onunload: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    rightMargin: any;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scroll: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    text: any;
    title: string;
    topMargin: any;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    vLink: any;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLBRElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clear: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLButtonElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    createTextRange(): MSHTML$IHTMLTxtRange;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    form: MSHTML$IHTMLFormElement;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    ie9_type: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    name: string;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    status: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    type: string;
    uniqueID: string;
    uniqueNumber: number;
    value: string;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLCanvasElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getContext(contextId: string): MSHTML$ICanvasRenderingContext2D;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    height: number;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toDataURL(type: string, jpegquality: any): string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    width: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLCommentElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    appendData(bstrstring: string): void;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    atomic: number;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    data: string;
    deleteData(offset: number, Count: number): void;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_deleteData(offset: number, Count: number): void;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertData(offset: number, bstrstring: string): void;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_replaceData(offset: number, Count: number, bstrstring: string): void;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_substringData(offset: number, Count: number): string;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    insertData(offset: number, bstrstring: string): void;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    length: number;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceData(offset: number, Count: number, bstrstring: string): void;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    substringData(offset: number, Count: number): string;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    text: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLCSSImportRule {
    constructor(): this;
    cssText: string;
    href: string;
    media: any;
    parentRule: MSHTML$IHTMLCSSRule;
    parentStyleSheet: MSHTML$IHTMLStyleSheet;
    styleSheet: MSHTML$IHTMLStyleSheet;
    type: number;
  }

  declare class MSHTML$HTMLCSSMediaList {
    constructor(): this;
    appendMedium(bstrMedium: string): void;
    deleteMedium(bstrMedium: string): void;
    item(index: number): string;
    length: number;
    mediaText: string;
  }

  declare class MSHTML$HTMLCSSMediaRule {
    constructor(): this;
    cssRules: MSHTML$IHTMLStyleSheetRulesCollection;
    cssText: string;

    /**
     * @param lIndex [lIndex=-1]
     */
    deleteRule(lIndex?: number): void;

    /**
     * @param lIndex [lIndex=-1]
     */
    insertRule(bstrRule: string, lIndex?: number): number;
    media: any;
    parentRule: MSHTML$IHTMLCSSRule;
    parentStyleSheet: MSHTML$IHTMLStyleSheet;
    type: number;
  }

  declare class MSHTML$HTMLCSSNamespaceRule {
    constructor(): this;
    cssText: string;
    namespaceURI: string;
    parentRule: MSHTML$IHTMLCSSRule;
    parentStyleSheet: MSHTML$IHTMLStyleSheet;
    prefix: string;
    type: number;
  }

  declare class MSHTML$HTMLCSSRule {
    constructor(): this;
    cssText: string;
    parentRule: MSHTML$IHTMLCSSRule;
    parentStyleSheet: MSHTML$IHTMLStyleSheet;
    type: number;
  }

  declare interface MSHTML$HTMLCSSStyleDeclaration {
    accelerator: string;
    alignContent: string;
    alignItems: string;
    alignmentBaseline: string;
    alignSelf: string;
    animation: string;
    animationDelay: string;
    animationDirection: string;
    animationDuration: string;
    animationFillMode: string;
    animationIterationCount: string;
    animationName: string;
    animationPlayState: string;
    animationTimingFunction: string;
    backfaceVisibility: string;
    background: string;
    backgroundAttachment: string;
    backgroundClip: string;
    backgroundColor: any;
    backgroundImage: string;
    backgroundOrigin: string;
    backgroundPosition: string;
    backgroundPositionX: any;
    backgroundPositionY: any;
    backgroundRepeat: string;
    backgroundSize: string;
    baselineShift: any;
    behavior: string;
    border: string;
    borderBottom: string;
    borderBottomColor: any;
    borderBottomLeftRadius: string;
    borderBottomRightRadius: string;
    borderBottomStyle: string;
    borderBottomWidth: any;
    borderCollapse: string;
    borderColor: string;
    borderImage: string;
    borderImageOutset: string;
    borderImageRepeat: string;
    borderImageSlice: string;
    borderImageSource: string;
    borderImageWidth: string;
    borderLeft: string;
    borderLeftColor: any;
    borderLeftStyle: string;
    borderLeftWidth: any;
    borderRadius: string;
    borderRight: string;
    borderRightColor: any;
    borderRightStyle: string;
    borderRightWidth: any;
    borderSpacing: string;
    borderStyle: string;
    borderTop: string;
    borderTopColor: any;
    borderTopLeftRadius: string;
    borderTopRightRadius: string;
    borderTopStyle: string;
    borderTopWidth: any;
    borderWidth: string;
    bottom: any;
    boxShadow: string;
    boxSizing: string;
    breakAfter: string;
    breakBefore: string;
    breakInside: string;
    captionSide: string;
    clear: string;
    clip: string;
    +clipBottom: any;
    clipLeft: any;
    clipPath: string;
    clipRight: any;
    clipRule: string;
    clipTop: any;
    color: any;
    colorInterpolationFilters: string;
    columnCount: any;
    columnFill: string;
    columnGap: any;
    columnRule: string;
    columnRuleColor: any;
    columnRuleStyle: string;
    columnRuleWidth: any;
    columns: string;
    columnSpan: string;
    columnWidth: any;
    content: string;
    counterIncrement: string;
    counterReset: string;
    cssFloat: string;
    cssText: string;
    cursor: string;
    direction: string;
    display: string;
    dominantBaseline: string;
    emptyCells: string;
    enableBackground: string;
    fill: string;
    fillOpacity: any;
    fillRule: string;
    filter: string;
    flex: string;
    flexBasis: any;
    flexDirection: string;
    flexFlow: string;
    flexGrow: any;
    flexShrink: any;
    flexWrap: string;
    floodColor: any;
    floodOpacity: any;
    font: string;
    fontFamily: string;
    fontFeatureSettings: string;
    fontSize: any;
    fontSizeAdjust: any;
    fontStretch: string;
    fontStyle: string;
    fontVariant: string;
    fontWeight: string;
    getPropertyPriority(bstrPropertyName: string): string;
    getPropertyValue(bstrPropertyName: string): string;
    glyphOrientationHorizontal: any;
    glyphOrientationVertical: any;
    height: any;
    imeMode: string;
    item(index: number): string;
    justifyContent: string;
    kerning: any;
    layoutFlow: string;
    layoutGrid: string;
    layoutGridChar: any;
    layoutGridLine: any;
    layoutGridMode: string;
    layoutGridType: string;
    left: any;
    +length: number;
    letterSpacing: any;
    lightingColor: any;
    lineBreak: string;
    lineHeight: any;
    listStyle: string;
    listStyleImage: string;
    listStylePosition: string;
    listStyleType: string;
    margin: string;
    marginBottom: any;
    marginLeft: any;
    marginRight: any;
    marginTop: any;
    marker: string;
    markerEnd: string;
    markerMid: string;
    markerStart: string;
    mask: string;
    maxHeight: any;
    maxWidth: any;
    minHeight: any;
    minWidth: any;
    msAnimation: string;
    msAnimationDelay: string;
    msAnimationDirection: string;
    msAnimationDuration: string;
    msAnimationFillMode: string;
    msAnimationIterationCount: string;
    msAnimationName: string;
    msAnimationPlayState: string;
    msAnimationTimingFunction: string;
    msBackfaceVisibility: string;
    msBlockProgression: string;
    msContentZoomChaining: string;
    msContentZooming: string;
    msContentZoomLimit: string;
    msContentZoomLimitMax: any;
    msContentZoomLimitMin: any;
    msContentZoomSnap: string;
    msContentZoomSnapPoints: string;
    msContentZoomSnapType: string;
    msFlex: string;
    msFlexAlign: string;
    msFlexDirection: string;
    msFlexFlow: string;
    msFlexItemAlign: string;
    msFlexLinePack: string;
    msFlexNegative: any;
    msFlexOrder: any;
    msFlexPack: string;
    msFlexPositive: any;
    msFlexPreferredSize: any;
    msFlexWrap: string;
    msFlowFrom: string;
    msFlowInto: string;
    msFontFeatureSettings: string;
    msGetPropertyEnabled(name: string): boolean;
    msGridColumn: any;
    msGridColumnAlign: string;
    msGridColumns: string;
    msGridColumnSpan: any;
    msGridRow: any;
    msGridRowAlign: string;
    msGridRows: string;
    msGridRowSpan: any;
    msHighContrastAdjust: string;
    msHyphenateLimitChars: string;
    msHyphenateLimitLines: any;
    msHyphenateLimitZone: any;
    msHyphens: string;
    msImeAlign: string;
    msInterpolationMode: string;
    msOverflowStyle: string;
    msPerspective: any;
    msPerspectiveOrigin: string;
    msPutPropertyEnabled(name: string, b: boolean): void;
    msScrollChaining: string;
    msScrollLimit: string;
    msScrollLimitXMax: any;
    msScrollLimitXMin: any;
    msScrollLimitYMax: any;
    msScrollLimitYMin: any;
    msScrollRails: string;
    msScrollSnapPointsX: string;
    msScrollSnapPointsY: string;
    msScrollSnapType: string;
    msScrollSnapX: string;
    msScrollSnapY: string;
    msScrollTranslation: string;
    msTextCombineHorizontal: string;
    msTextSizeAdjust: any;
    msTouchAction: string;
    msTouchSelect: string;
    msTransform: string;
    msTransformOrigin: string;
    msTransformStyle: string;
    msTransition: string;
    msTransitionDelay: string;
    msTransitionDuration: string;
    msTransitionProperty: string;
    msTransitionTimingFunction: string;
    msUserSelect: string;
    msWrapFlow: string;
    msWrapMargin: any;
    msWrapThrough: string;
    opacity: any;
    orphans: any;
    outline: string;
    outlineColor: any;
    outlineStyle: string;
    outlineWidth: any;
    overflow: string;
    overflowX: string;
    overflowY: string;
    padding: string;
    paddingBottom: any;
    paddingLeft: any;
    paddingRight: any;
    paddingTop: any;
    pageBreakAfter: string;
    pageBreakBefore: string;
    pageBreakInside: string;
    +parentRule: any;
    perspective: any;
    perspectiveOrigin: string;
    pointerEvents: string;
    position: string;
    quotes: string;
    removeProperty(bstrPropertyName: string): string;
    right: any;
    rubyAlign: string;
    rubyOverhang: string;
    rubyPosition: string;
    scrollbar3dLightColor: any;
    scrollbarArrowColor: any;
    scrollbarBaseColor: any;
    scrollbarDarkShadowColor: any;
    scrollbarFaceColor: any;
    scrollbarHighlightColor: any;
    scrollbarShadowColor: any;
    scrollbarTrackColor: any;

    /**
     * @param pvarPropertyPriority [pvarPropertyPriority='']
     */
    setProperty(
      bstrPropertyName: string,
      pvarPropertyValue: any,
      pvarPropertyPriority?: any
    ): void;
    stopColor: any;
    stopOpacity: any;
    stroke: string;
    strokeDasharray: string;
    strokeDashoffset: any;
    strokeLinecap: string;
    strokeLinejoin: string;
    strokeMiterlimit: any;
    strokeOpacity: any;
    strokeWidth: any;
    styleFloat: string;
    tableLayout: string;
    textAlign: string;
    textAlignLast: string;
    textAnchor: string;
    textAutospace: string;
    textDecoration: string;
    textIndent: any;
    textJustify: string;
    textJustifyTrim: string;
    textKashida: any;
    textKashidaSpace: any;
    textOverflow: string;
    textShadow: string;
    textTransform: string;
    textUnderlinePosition: string;
    top: any;
    touchAction: string;
    transform: string;
    transformOrigin: string;
    transformStyle: string;
    transition: string;
    transitionDelay: string;
    transitionDuration: string;
    transitionProperty: string;
    transitionTimingFunction: string;
    unicodeBidi: string;
    verticalAlign: any;
    visibility: string;
    webkitAnimation: string;
    webkitAnimationDelay: string;
    webkitAnimationDirection: string;
    webkitAnimationDuration: string;
    webkitAnimationFillMode: string;
    webkitAnimationIterationCount: string;
    webkitAnimationName: string;
    webkitAnimationPlayState: string;
    webkitAnimationTimingFunction: string;
    webkitAppearance: string;
    webkitBackfaceVisibility: string;
    webkitBackground: string;
    webkitBackgroundAttachment: string;
    webkitBackgroundClip: string;
    webkitBackgroundColor: any;
    webkitBackgroundImage: string;
    webkitBackgroundOrigin: string;
    webkitBackgroundPosition: string;
    webkitBackgroundPositionX: any;
    webkitBackgroundPositionY: any;
    webkitBackgroundRepeat: string;
    webkitBackgroundSize: string;
    webkitBorderImage: string;
    webkitBorderImageOutset: string;
    webkitBorderImageRepeat: string;
    webkitBorderImageSlice: string;
    webkitBorderImageSource: string;
    webkitBorderImageWidth: string;
    webkitBoxAlign: string;
    webkitBoxDirection: string;
    webkitBoxFlex: any;
    webkitBoxOrdinalGroup: any;
    webkitBoxOrient: string;
    webkitBoxPack: string;
    webkitBoxSizing: string;
    webkitTextSizeAdjust: any;
    webkitTransform: string;
    webkitTransformOrigin: string;
    webkitTransition: string;
    webkitTransitionDelay: string;
    webkitTransitionDuration: string;
    webkitTransitionProperty: string;
    webkitTransitionTimingFunction: string;
    webkitUserSelect: string;
    whiteSpace: string;
    widows: any;
    width: any;
    wordBreak: string;
    wordSpacing: any;
    wordWrap: string;
    writingMode: string;
    zIndex: any;
    zoom: any;
    (index: number): string;
  }

  declare interface MSHTML$HTMLCurrentStyle {
    +accelerator: string;
    alignContent: string;
    alignItems: string;
    alignSelf: string;
    animation: string;
    animationDelay: string;
    animationDirection: string;
    animationDuration: string;
    animationFillMode: string;
    animationIterationCount: string;
    animationName: string;
    animationPlayState: string;
    animationTimingFunction: string;
    backfaceVisibility: string;
    +backgroundAttachment: string;
    +backgroundColor: any;
    +backgroundImage: string;
    +backgroundPositionX: any;
    +backgroundPositionY: any;
    +backgroundRepeat: string;
    +behavior: string;
    +blockDirection: string;
    +borderBottomColor: any;
    +borderBottomStyle: string;
    +borderBottomWidth: any;
    +borderCollapse: string;
    +borderColor: string;
    borderImage: string;
    borderImageOutset: string;
    borderImageRepeat: string;
    borderImageSlice: string;
    borderImageSource: string;
    borderImageWidth: string;
    +borderLeftColor: any;
    +borderLeftStyle: string;
    +borderLeftWidth: any;
    +borderRightColor: any;
    +borderRightStyle: string;
    +borderRightWidth: any;
    +borderSpacing: string;
    +borderStyle: string;
    +borderTopColor: any;
    +borderTopStyle: string;
    +borderTopWidth: any;
    +borderWidth: string;
    +bottom: any;
    +boxSizing: string;
    breakAfter: string;
    breakBefore: string;
    breakInside: string;
    +captionSide: string;
    +clear: string;
    +clipBottom: any;
    +clipLeft: any;
    +clipRight: any;
    +clipTop: any;
    +color: any;
    colorInterpolationFilters: string;
    columnCount: any;
    columnFill: string;
    columnGap: any;
    columnRule: string;
    columnRuleColor: any;
    columnRuleStyle: string;
    columnRuleWidth: any;
    columns: string;
    columnSpan: string;
    columnWidth: any;
     //constructor: any;
    +cursor: string;
    +direction: string;
    +display: string;
    +emptyCells: string;
    enableBackground: string;
    +filter: string;
    flex: string;
    flexBasis: any;
    flexDirection: string;
    flexFlow: string;
    flexGrow: any;
    flexShrink: any;
    flexWrap: string;
    floodColor: any;
    floodOpacity: any;
    +fontFamily: string;
    fontFeatureSettings: string;
    +fontSize: any;
    +fontStyle: string;
    +fontVariant: string;
    +fontWeight: any;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getPropertyPriority(bstrPropertyName: string): string;
    getPropertyValue(bstrPropertyName: string): string;
    +hasLayout: boolean;
    +height: any;
    +imeMode: string;
    item(index: number): string;
    justifyContent: string;
    +layoutFlow: string;
    +layoutGridChar: any;
    +layoutGridLine: any;
    +layoutGridMode: string;
    +layoutGridType: string;
    +left: any;
    +length: number;
    +letterSpacing: any;
    lightingColor: any;
    +lineBreak: string;
    +lineHeight: any;
    +listStyleImage: string;
    +listStylePosition: string;
    +listStyleType: string;
    +margin: string;
    +marginBottom: any;
    +marginLeft: any;
    +marginRight: any;
    +marginTop: any;
    +maxHeight: any;
    +maxWidth: any;
    +minHeight: any;
    +minWidth: any;
    msAnimation: string;
    msAnimationDelay: string;
    msAnimationDirection: string;
    msAnimationDuration: string;
    msAnimationFillMode: string;
    msAnimationIterationCount: string;
    msAnimationName: string;
    msAnimationPlayState: string;
    msAnimationTimingFunction: string;
    msBackfaceVisibility: string;
    +msBlockProgression: string;
    msContentZoomChaining: string;
    msContentZooming: string;
    msContentZoomLimit: string;
    msContentZoomLimitMax: any;
    msContentZoomLimitMin: any;
    msContentZoomSnap: string;
    msContentZoomSnapPoints: string;
    msContentZoomSnapType: string;
    msFlex: string;
    msFlexAlign: string;
    msFlexDirection: string;
    msFlexFlow: string;
    msFlexItemAlign: string;
    msFlexLinePack: string;
    msFlexNegative: any;
    msFlexOrder: any;
    msFlexPack: string;
    msFlexPositive: any;
    msFlexPreferredSize: any;
    msFlexWrap: string;
    msFlowFrom: string;
    msFlowInto: string;
    msFontFeatureSettings: string;
    msGridColumn: any;
    msGridColumnAlign: string;
    msGridColumns: string;
    msGridColumnSpan: any;
    msGridRow: any;
    msGridRowAlign: string;
    msGridRows: string;
    msGridRowSpan: any;
    msHighContrastAdjust: string;
    msHyphenateLimitChars: string;
    msHyphenateLimitLines: any;
    msHyphenateLimitZone: any;
    msHyphens: string;
    msImeAlign: string;
    +msInterpolationMode: string;
    msOverflowStyle: string;
    msPerspective: any;
    msPerspectiveOrigin: string;
    msScrollChaining: string;
    msScrollLimit: string;
    msScrollLimitXMax: any;
    msScrollLimitXMin: any;
    msScrollLimitYMax: any;
    msScrollLimitYMin: any;
    msScrollRails: string;
    msScrollSnapPointsX: string;
    msScrollSnapPointsY: string;
    msScrollSnapType: string;
    msScrollSnapX: string;
    msScrollSnapY: string;
    msScrollTranslation: string;
    msTextCombineHorizontal: string;
    msTextSizeAdjust: any;
    msTouchAction: string;
    msTouchSelect: string;
    msTransformStyle: string;
    msTransition: string;
    msTransitionDelay: string;
    msTransitionDuration: string;
    msTransitionProperty: string;
    msTransitionTimingFunction: string;
    msUserSelect: string;
    msWrapFlow: string;
    msWrapMargin: any;
    msWrapThrough: string;
    +orphans: any;
    +outline: string;
    +outlineColor: any;
    +outlineStyle: string;
    +outlineWidth: any;
    +overflow: string;
    +overflowX: string;
    +overflowY: string;
    +padding: string;
    +paddingBottom: any;
    +paddingLeft: any;
    +paddingRight: any;
    +paddingTop: any;
    +pageBreakAfter: string;
    +pageBreakBefore: string;
    +pageBreakInside: string;
    +parentRule: any;
    perspective: any;
    perspectiveOrigin: string;
    +position: string;
    +quotes: string;
    removeProperty(bstrPropertyName: string): string;
    +right: any;
    +rubyAlign: string;
    +rubyOverhang: string;
    +rubyPosition: string;
    +scrollbar3dLightColor: any;
    +scrollbarArrowColor: any;
    +scrollbarBaseColor: any;
    +scrollbarDarkShadowColor: any;
    +scrollbarFaceColor: any;
    +scrollbarHighlightColor: any;
    +scrollbarShadowColor: any;
    +scrollbarTrackColor: any;

    /**
     * @param pvarPropertyPriority [pvarPropertyPriority='']
     */
    setProperty(
      bstrPropertyName: string,
      pvarPropertyValue: any,
      pvarPropertyPriority?: any
    ): void;
    +styleFloat: string;
    +tableLayout: string;
    +textAlign: string;
    +textAlignLast: string;
    +textAutospace: string;
    +textDecoration: string;
    +textIndent: any;
    +textJustify: string;
    +textJustifyTrim: string;
    +textKashida: any;
    +textKashidaSpace: any;
    +textOverflow: string;
    textShadow: string;
    +textTransform: string;
    +textUnderlinePosition: string;
    +top: any;
    touchAction: string;
    transform: string;
    transformOrigin: string;
    transformStyle: string;
    transition: string;
    transitionDelay: string;
    transitionDuration: string;
    transitionProperty: string;
    transitionTimingFunction: string;
    +unicodeBidi: string;
    +verticalAlign: any;
    +visibility: string;
    webkitAnimation: string;
    webkitAnimationDelay: string;
    webkitAnimationDirection: string;
    webkitAnimationDuration: string;
    webkitAnimationFillMode: string;
    webkitAnimationIterationCount: string;
    webkitAnimationName: string;
    webkitAnimationPlayState: string;
    webkitAnimationTimingFunction: string;
    webkitAppearance: string;
    webkitBackfaceVisibility: string;
    webkitBackground: string;
    webkitBackgroundAttachment: string;
    webkitBackgroundClip: string;
    webkitBackgroundColor: any;
    webkitBackgroundImage: string;
    webkitBackgroundOrigin: string;
    webkitBackgroundPosition: string;
    webkitBackgroundPositionX: any;
    webkitBackgroundPositionY: any;
    webkitBackgroundRepeat: string;
    webkitBackgroundSize: string;
    webkitBorderImage: string;
    webkitBorderImageOutset: string;
    webkitBorderImageRepeat: string;
    webkitBorderImageSlice: string;
    webkitBorderImageSource: string;
    webkitBorderImageWidth: string;
    webkitBoxAlign: string;
    webkitBoxDirection: string;
    webkitBoxFlex: any;
    webkitBoxOrdinalGroup: any;
    webkitBoxOrient: string;
    webkitBoxPack: string;
    webkitBoxSizing: string;
    webkitTextSizeAdjust: any;
    webkitTransform: string;
    webkitTransformOrigin: string;
    webkitTransition: string;
    webkitTransitionDelay: string;
    webkitTransitionDuration: string;
    webkitTransitionProperty: string;
    webkitTransitionTimingFunction: string;
    webkitUserSelect: string;
    +whiteSpace: string;
    +widows: any;
    +width: any;
    +wordBreak: string;
    +wordSpacing: any;
    +wordWrap: string;
    +writingMode: string;
    +zIndex: any;
    +zoom: any;
    (index: number): string;
  }

  declare class MSHTML$HTMLDDElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    noWrap: boolean;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLDefaults {
    constructor(): this;
    canHaveHTML: boolean;
    //constructor: any;
    contentEditable: string;
    frozen: boolean;
    isMultiLine: boolean;
    scrollSegmentX: number;
    scrollSegmentY: number;
    style: MSHTML$IHTMLStyle;
    tabStop: boolean;
    viewInheritStyle: boolean;
    viewLink: MSHTML$IHTMLDocument;
    viewMasterTab: boolean;
  }

  declare class MSHTML$HTMLDialog {
    constructor(): this;
    close(): void;
    dialogArguments: any;
    dialogHeight: any;
    dialogLeft: any;
    dialogTop: any;
    dialogWidth: any;
    menuArguments: any;
    returnValue: any;
    toString(): string;
  }

  declare class MSHTML$HTMLDivElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    noWrap: boolean;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLDivPosition {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HtmlDlgSafeHelper {
    constructor(): this;
    MSHTML$BlockFormats: any;
    choosecolordlg(initColor?: any): any;
    fonts: any;
    getCharset(fontName: string): any;
  }

  declare class MSHTML$HTMLDListElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compact: boolean;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLDocument {
    constructor(): this;
    activeElement: MSHTML$IHTMLElement;
    addEventListener(type: string, listener: any, useCapture: boolean): void;
    adoptNode(pNodeSource: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode3;
    alinkColor: any;
    all: MSHTML$IHTMLElementCollection;
    anchors: MSHTML$IHTMLElementCollection;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applets: MSHTML$IHTMLElementCollection;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    bgColor: any;
    body: MSHTML$IHTMLElement;
    characterSet: string;
    charset: string;
    childNodes: any;
    clear(): void;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    close(): void;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    compatible: MSHTML$IHTMLDocumentCompatibleInfoCollection;
    compatMode: string;
    //constructor: any;
    cookie: string;
    createAttribute(bstrAttrName: string): MSHTML$IHTMLDOMAttribute;
    createAttributeNS(
      pvarNS: any,
      bstrAttrName: string
    ): MSHTML$IHTMLDOMAttribute;
    createCDATASection(text: string): MSHTML$IHTMLDOMNode;
    createComment(bstrData: string): MSHTML$IHTMLDOMNode;
    createDocumentFragment(): MSHTML$IHTMLDocument2;
    createDocumentFromUrl(
      bstrURL: string,
      bstrOptions: string
    ): MSHTML$IHTMLDocument2;
    createElement(eTag: string): MSHTML$IHTMLElement;
    createElementNS(pvarNS: any, bstrTag: string): MSHTML$IHTMLElement;
    createEvent(eventType: string): MSHTML$IDOMEvent;
    CreateEventObject(pvarEventObject?: any): MSHTML$IHTMLEventObj;
    createNodeIterator(
      pRootNode: any,
      ulWhatToShow: number,
      pFilter: any,
      fEntityReferenceExpansion: boolean
    ): MSHTML$IDOMNodeIterator;
    createProcessingInstruction(
      bstrTarget: string,
      bstrData: string
    ): MSHTML$IDOMProcessingInstruction;
    createRange(): MSHTML$IHTMLDOMRange;
    createRenderStyle(v: string): MSHTML$IHTMLRenderStyle;

    /**
     * @param bstrHref [bstrHref='']
     * @param lIndex [lIndex=-1]
     */
    createStyleSheet(
      bstrHref?: string,
      lIndex?: number
    ): MSHTML$IHTMLStyleSheet;
    createTextNode(text: string): MSHTML$IHTMLDOMNode;
    createTreeWalker(
      pRootNode: any,
      ulWhatToShow: number,
      pFilter: any,
      fEntityReferenceExpansion: boolean
    ): MSHTML$IDOMTreeWalker;
    defaultCharset: string;
    defaultView: MSHTML$IHTMLWindow2;
    designMode: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    dispatchEvent(evt: MSHTML$IDOMEvent): boolean;
    doctype: MSHTML$IHTMLDOMNode;
    documentElement: MSHTML$IHTMLElement;
    documentMode: any;
    domain: string;
    elementFromPoint(x: number, y: number): MSHTML$IHTMLElement;
    elementsFromPoint(x: number, y: number): MSHTML$IHTMLDOMChildrenCollection;
    elementsFromRect(
      left: number,
      top: number,
      width: number,
      height: number
    ): MSHTML$IHTMLDOMChildrenCollection;
    embeds: MSHTML$IHTMLElementCollection;

    /**
     * @param showUI [showUI=false]
     */
    execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;
    execCommandShowHelp(cmdID: string): boolean;
    expando: boolean;
    fgColor: any;
    fileCreatedDate: string;
    fileModifiedDate: string;
    fileSize: string;
    fileUpdatedDate: string;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    forms: MSHTML$IHTMLElementCollection;
    frames: MSHTML$FramesCollection;
    getElementById(v: string): MSHTML$IHTMLElement;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      pvarNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getSelection(): MSHTML$IHTMLSelection;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hasFocus(): boolean;
    head: MSHTML$IHTMLElement;
    ie8_getElementById(bstrId: string): MSHTML$IHTMLElement2;
    ie9_all: MSHTML$IHTMLElementCollection;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_body: MSHTML$IHTMLElement;
    ie9_createAttribute(bstrAttrName: string): MSHTML$IHTMLDOMAttribute;
    ie9_createElement(bstrTag: string): MSHTML$IHTMLElement;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_parentWindow: MSHTML$IHTMLWindow2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    images: MSHTML$IHTMLElementCollection;
    implementation: MSHTML$IHTMLDOMImplementation;
    importNode(
      pNodeSource: MSHTML$IHTMLDOMNode,
      fDeep: boolean
    ): MSHTML$IHTMLDOMNode3;
    inputEncoding: string;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    lastChild: MSHTML$IHTMLDOMNode;
    lastModified: string;
    linkColor: any;
    links: MSHTML$IHTMLElementCollection;
    localName: any;
    location: MSHTML$IHTMLLocation;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    media: string;
    mimeType: string;
    msCapsLockWarningOff: boolean;
    nameProp: string;
    namespaces: any;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onmousedown: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmscontentzoom: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsinertiastart: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmssitemodejumplistitemremoved: any;
    onmsthumbnailclick: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectionchange: any;
    onselectstart: any;
    onstalled: any;
    onstop: any;
    onstorage: any;
    onstoragecommit: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;

    /**
     * @param url [url='text/html']
     */
    open(url?: string, name?: any, features?: any, replace?: any): any;
    ownerDocument: any;
    parentNode: MSHTML$IHTMLDOMNode;
    parentWindow: MSHTML$IHTMLWindow2;
    plugins: MSHTML$IHTMLElementCollection;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    protocol: string;
    queryCommandEnabled(cmdID: string): boolean;
    queryCommandIndeterm(cmdID: string): boolean;
    queryCommandState(cmdID: string): boolean;
    queryCommandSupported(cmdID: string): boolean;
    queryCommandText(cmdID: string): string;
    queryCommandValue(cmdID: string): any;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: string;

    /**
     * @param fForce [fForce=false]
     */
    recalc(fForce?: boolean): void;
    referrer: string;
    releaseCapture(): void;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeEventListener(type: string, listener: any, useCapture: boolean): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    rootElement: MSHTML$ISVGSVGElement;
    Script: any;
    scripts: MSHTML$IHTMLElementCollection;
    security: string;
    selection: MSHTML$IHTMLSelectionObject;
    styleSheets: MSHTML$IHTMLStyleSheetsCollection;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    textContent: any;
    title: string;
    toString(): string;
    uniqueID: string;
    updateSettings(): void;
    url: string;
    URLUnencoded: string;
    vlinkColor: any;
    write(...psarray: any[]): void;
    writeln(...psarray: any[]): void;
    xmlEncoding: string;
    xmlStandalone: boolean;
    xmlVersion: string;
  }

  declare class MSHTML$HTMLDocumentCompatibleInfo {
    constructor(): this;
    //constructor: any;
  }

  declare class MSHTML$HTMLDocumentCompatibleInfoCollection {
    constructor(): this;
    //constructor: any;
  }

  declare class MSHTML$HTMLDOMAttribute {
    constructor(): this;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    attributes: any;
    childNodes: any;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMAttribute;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    //constructor: any;
    expando: boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    ie8_nodeValue: any;
    ie8_specified: boolean;
    ie8_value: string;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_childNodes: any;
    ie9_firstChild: MSHTML$IHTMLDOMNode;
    ie9_hasChildNodes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_lastChild: MSHTML$IHTMLDOMNode;
    ie9_name: string;
    ie9_nodeName: string;
    ie9_nodeValue: any;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_specified: boolean;
    ie9_value: string;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    name: string;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    ownerDocument: any;
    ownerElement: MSHTML$IHTMLElement2;
    parentNode: MSHTML$IHTMLDOMNode;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    specified: boolean;
    textContent: any;
    value: string;
  }

  declare class MSHTML$HTMLDOMImplementation {
    constructor(): this;
    //constructor: any;
    createDocument(
      pvarNS: any,
      pvarTagName: any,
      pDocumentType: MSHTML$IDOMDocumentType
    ): MSHTML$IHTMLDocument7;
    createDocumentType(
      bstrQualifiedName: string,
      pvarPublicId: any,
      pvarSystemId: any
    ): MSHTML$IDOMDocumentType;
    createHTMLDocument(bstrTitle: string): MSHTML$IHTMLDocument7;
    hasFeature(bstrfeature: string, version?: any): boolean;
    ie9_hasFeature(bstrfeature: string, version?: any): boolean;
  }

  declare class MSHTML$HTMLDOMRange {
    constructor(): this;
    cloneContents(): any;
    cloneRange(): MSHTML$IHTMLDOMRange;
    collapse(toStart: boolean): void;
    collapsed: boolean;
    commonAncestorContainer: MSHTML$IHTMLDOMNode;
    compareBoundaryPoints(how: number, sourceRange: any): number;
    deleteContents(): void;
    Detach(): void;
    endContainer: MSHTML$IHTMLDOMNode;
    endOffset: number;
    extractContents(): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    insertNode(newNode: any): void;
    selectNode(refNode: any): void;
    selectNodeContents(refNode: any): void;
    setEnd(refNode: any, offset: number): void;
    setEndAfter(refNode: any): void;
    setEndBefore(refNode: any): void;
    setStart(refNode: any, offset: number): void;
    setStartAfter(refNode: any): void;
    setStartBefore(refNode: any): void;
    startContainer: MSHTML$IHTMLDOMNode;
    startOffset: number;
    surroundContents(newParent: any): void;
    toString(): string;
  }

  declare class MSHTML$HTMLDOMTextNode {
    constructor(): this;
    addEventListener(type: string, listener: any, useCapture: boolean): void;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    appendData(bstrstring: string): void;
    attributes: any;
    childNodes: any;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    //constructor: any;
    data: string;
    deleteData(offset: number, Count: number): void;
    dispatchEvent(evt: MSHTML$IDOMEvent): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_deleteData(offset: number, Count: number): void;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_insertData(offset: number, bstrstring: string): void;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_replaceData(offset: number, Count: number, bstrstring: string): void;
    ie9_splitText(offset: number): MSHTML$IHTMLDOMNode;
    ie9_substringData(offset: number, Count: number): string;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    insertData(offset: number, bstrstring: string): void;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    lastChild: MSHTML$IHTMLDOMNode;
    length: number;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    ownerDocument: any;
    parentNode: MSHTML$IHTMLDOMNode;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeEventListener(type: string, listener: any, useCapture: boolean): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceData(offset: number, Count: number, bstrstring: string): void;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    replaceWholeText(bstrText: string): MSHTML$IHTMLDOMNode;
    splitText(offset: number): MSHTML$IHTMLDOMNode;
    substringData(offset: number, Count: number): string;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    textContent: any;
    toString(): string;
    wholeText: string;
  }

  declare interface MSHTML$HTMLDOMXmlSerializerFactory {
    create(): MSHTML$IDOMXmlSerializer;
    (): MSHTML$IDOMXmlSerializer;
  }

  declare class MSHTML$HTMLDTElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    noWrap: boolean;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare interface MSHTML$HTMLElementCollection {
     //constructor: any;
    ie8_item(index: number): MSHTML$IHTMLElement2;
    +ie8_length: number;
    ie8_namedItem(name: string): MSHTML$IHTMLElement2;
    item(name?: any, index?: any): any;
    length: number;
    namedItem(name: string): any;
    tags(tagName: any): any;
    toString(): string;
    urns(urn: any): any;
    (name?: any, index?: any): any;
  }

  declare class MSHTML$HTMLEmbed {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    getSVGDocument(): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    height: any;
    hidden: string;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_pluginspage: string;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_src: string;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    name: string;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    palette: string;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    pluginspage: string;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    src: string;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    units: string;
    width: any;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLFieldSetElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    form: MSHTML$IHTMLFormElement;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLFontElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    color: any;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    face: string;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    size: any;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare interface MSHTML$HTMLFormElement {
    acceptCharset: string;
    accessKey: string;
    action: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    +all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    appendItemSeparator(): void;

    /**
     * @param name [name='']
     * @param filename [filename='']
     */
    appendNameFilePair(name?: string, filename?: string): void;

    /**
     * @param name [name='']
     * @param value [value='']
     */
    appendNameValuePair(name?: string, value?: string): void;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    +attributes: any;
    +behaviorUrns: any;
    blur(): void;
    +canHaveChildren: boolean;
    +canHaveHTML: boolean;
    +childNodes: any;
    +children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    +clientHeight: number;
    +clientLeft: number;
    +clientTop: number;
    +clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
     //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    +currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    +document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    +elements: any;
    encoding: string;
    +filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    +firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_action: string;
    +ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    +ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    +ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    +isContentEditable: boolean;
    +isDisabled: boolean;
    +isMultiLine: boolean;
    +isTextEdit: boolean;
    item(name?: any, index?: any): any;
    lang: string;
    language: string;
    +lastChild: MSHTML$IHTMLDOMNode;
    length: number;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    method: string;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    name: string;
    namedItem(name: string): any;
    +nextSibling: MSHTML$IHTMLDOMNode;
    +nodeName: string;
    +nodeType: number;
    nodeValue: any;
    normalize(): void;
    +offsetHeight: number;
    +offsetLeft: number;
    +offsetParent: MSHTML$IHTMLElement;
    +offsetTop: number;
    +offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    +ownerDocument: any;
    +parentElement: MSHTML$IHTMLElement;
    +parentNode: MSHTML$IHTMLDOMNode;
    +parentTextEdit: MSHTML$IHTMLElement;
    +previousSibling: MSHTML$IHTMLDOMNode;
    +readyState: any;
    +recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    reset(): void;
    role: string;
    +runtimeStyle: MSHTML$IHTMLStyle;
    +scopeName: string;
    +scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    +scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    +sourceIndex: number;
    spellcheck: any;
    +style: MSHTML$IHTMLStyle;
    submit(): void;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    +tagName: string;
    tags(tagName: any): any;
    tagUrn: string;
    target: string;
    title: string;
    toString(): string;
    +uniqueID: string;
    +uniqueNumber: number;
    urns(urn: any): any;
    xmsAcceleratorKey: string;
    (name?: any, index?: any): any;
  }

  declare class MSHTML$HTMLFrameBase {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    allowTransparency: boolean;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    border: any;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    contentWindow: MSHTML$IHTMLWindow2;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    frameBorder: string;
    frameSpacing: any;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    longDesc: string;
    marginHeight: any;
    marginWidth: any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    name: string;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    noResize: boolean;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrolling: string;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    src: string;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLFrameElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    allowTransparency: boolean;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    border: any;
    borderColor: any;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentDocument: any;
    contentEditable: string;
    contentWindow: MSHTML$IHTMLWindow2;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    frameBorder: string;
    frameSpacing: any;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    getSVGDocument(): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    height: any;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_frameBorder: string;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_longDesc: string;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_src: string;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    longDesc: string;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    marginHeight: any;
    marginWidth: any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    name: string;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    noResize: boolean;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrolling: string;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    src: string;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    width: any;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLFrameSetSite {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    border: any;
    borderColor: any;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    cols: string;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    frameBorder: string;
    frameSpacing: any;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    name: string;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterprint: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeprint: any;
    onbeforeunload: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhashchange: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmessage: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onoffline: any;
    ononline: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onstorage: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onunload: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    rows: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLGenericElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    namedRecordset(dataMember: string, hierarchy?: any): any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    recordset: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLHeadElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_profile: string;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    profile: string;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLHeaderElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clear: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLHistory {
    constructor(): this;
    back(pvargdistance?: any): void;
    //constructor: any;
    forward(pvargdistance?: any): void;
    go(pvargdistance?: any): void;
    length: number;
  }

  declare class MSHTML$HTMLHRElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    color: any;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    noShade: boolean;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    size: any;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    width: any;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLHtmlElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    version: string;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLIFrame {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    allowTransparency: boolean;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    border: any;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentDocument: any;
    contentEditable: string;
    contentWindow: MSHTML$IHTMLWindow2;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    frameBorder: string;
    frameSpacing: any;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    getSVGDocument(): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    height: any;
    hideFocus: boolean;
    hspace: number;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_frameBorder: string;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_longDesc: string;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_src: string;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    longDesc: string;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    marginHeight: any;
    marginWidth: any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    name: string;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    noResize: boolean;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrolling: string;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    src: string;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    vspace: number;
    width: any;
    xmsAcceleratorKey: string;
  }

  declare interface MSHTML$HTMLImageElementFactory {
    create(width?: any, height?: any): MSHTML$IHTMLImgElement;
    (width?: any, height?: any): MSHTML$IHTMLImgElement;
  }

  declare class MSHTML$HTMLImg {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    alt: string;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    border: any;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    complete: boolean;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    dynsrc: string;
    fileCreatedDate: string;
    fileModifiedDate: string;
    fileSize: string;
    fileUpdatedDate: string;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    height: number;
    hideFocus: boolean;
    href: string;
    hspace: number;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_dynsrc: string;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_longDesc: string;
    ie8_lowsrc: string;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_vrml: string;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMap: boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    longDesc: string;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    loop: any;
    lowsrc: string;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    mimeType: string;
    msMatchesSelector(v: string): boolean;
    msPlayToDisabled: boolean;
    msPlayToPrimary: boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    name: string;
    nameProp: string;
    namespaceURI: any;
    naturalHeight: number;
    naturalWidth: number;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    protocol: string;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    src: string;
    start: string;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    useMap: string;
    vrml: string;
    vspace: number;
    width: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLInputButtonElement {
    constructor(): this;
    accessKey: string;
    addFilter(pUnk: any): void;
    all: any;
    blur(): void;
    children: any;
    className: string;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    createTextRange(): MSHTML$IHTMLTxtRange;
    disabled: boolean;
    document: any;
    filters: MSHTML$IHTMLFiltersCollection;
    focus(): void;
    form: MSHTML$IHTMLFormElement;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    id: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    isTextEdit: boolean;
    lang: string;
    language: string;
    name: string;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onafterupdate: any;
    onbeforeupdate: any;
    onblur: any;
    onclick: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondragstart: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onhelp: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onmousedown: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onresize: any;
    onrowenter: any;
    onrowexit: any;
    onselectstart: any;
    outerHTML: string;
    outerText: string;
    parentElement: MSHTML$IHTMLElement;
    parentTextEdit: MSHTML$IHTMLElement;
    recordNumber: any;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeFilter(pUnk: any): void;
    scrollIntoView(varargStart?: any): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    sourceIndex: number;
    status: any;
    style: MSHTML$IHTMLStyle;
    tabIndex: number;
    tagName: string;
    title: string;
    toString(): string;
    type: string;
    value: string;
  }

  declare class MSHTML$HTMLInputElement {
    constructor(): this;
    accept: string;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    alt: string;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    border: any;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    checked: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    complete: boolean;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    createTextRange(): MSHTML$IHTMLTxtRange;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    defaultChecked: boolean;
    defaultValue: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    dynsrc: string;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    form: MSHTML$IHTMLFormElement;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    height: number;
    hideFocus: boolean;
    hspace: number;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_dynsrc: string;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_lowsrc: string;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_src: string;
    ie8_vrml: string;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    indeterminate: boolean;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    loop: any;
    lowsrc: string;
    max: string;
    maxLength: number;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    min: string;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    name: string;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readOnly: boolean;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    select(): void;
    selectionEnd: number;
    selectionStart: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    setSelectionRange(start: number, end: number): void;
    size: number;
    sourceIndex: number;
    spellcheck: any;
    src: string;
    start: string;
    status: boolean;
    step: string;

    /**
     * @param n [n=1]
     */
    stepDown(n?: number): void;

    /**
     * @param n [n=1]
     */
    stepUp(n?: number): void;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    type: string;
    uniqueID: string;
    uniqueNumber: number;
    useMap: string;
    value: string;
    valueAsNumber: number;
    vrml: string;
    vspace: number;
    width: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLInputFileElement {
    constructor(): this;
    accessKey: string;
    addFilter(pUnk: any): void;
    all: any;
    blur(): void;
    children: any;
    className: string;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    disabled: boolean;
    document: any;
    filters: MSHTML$IHTMLFiltersCollection;
    focus(): void;
    form: MSHTML$IHTMLFormElement;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    id: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    isTextEdit: boolean;
    lang: string;
    language: string;
    maxLength: number;
    name: string;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onafterupdate: any;
    onbeforeupdate: any;
    onblur: any;
    onchange: any;
    onclick: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondragstart: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onhelp: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onmousedown: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onresize: any;
    onrowenter: any;
    onrowexit: any;
    onselect: any;
    onselectstart: any;
    outerHTML: string;
    outerText: string;
    parentElement: MSHTML$IHTMLElement;
    parentTextEdit: MSHTML$IHTMLElement;
    recordNumber: any;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeFilter(pUnk: any): void;
    scrollIntoView(varargStart?: any): void;
    select(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    size: number;
    sourceIndex: number;
    status: any;
    style: MSHTML$IHTMLStyle;
    tabIndex: number;
    tagName: string;
    title: string;
    toString(): string;
    type: string;
    value: string;
  }

  declare class MSHTML$htmlInputImage {
    constructor(): this;
    accessKey: string;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    alt: string;
    blur(): void;
    border: any;
    children: any;
    className: string;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    complete: boolean;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    disabled: boolean;
    document: any;
    dynsrc: string;
    filters: MSHTML$IHTMLFiltersCollection;
    focus(): void;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    height: number;
    hspace: number;
    id: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    isTextEdit: boolean;
    lang: string;
    language: string;
    loop: any;
    lowsrc: string;
    name: string;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onafterupdate: any;
    onbeforeupdate: any;
    onblur: any;
    onclick: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondragstart: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onhelp: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onload: any;
    onmousedown: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onresize: any;
    onrowenter: any;
    onrowexit: any;
    onselectstart: any;
    outerHTML: string;
    outerText: string;
    parentElement: MSHTML$IHTMLElement;
    parentTextEdit: MSHTML$IHTMLElement;
    readyState: string;
    recordNumber: any;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeFilter(pUnk: any): void;
    scrollIntoView(varargStart?: any): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    sourceIndex: number;
    src: string;
    start: string;
    style: MSHTML$IHTMLStyle;
    tabIndex: number;
    tagName: string;
    title: string;
    toString(): string;
    type: string;
    vrml: string;
    vspace: number;
    width: number;
  }

  declare class MSHTML$HTMLInputTextElement {
    constructor(): this;
    accessKey: string;
    addFilter(pUnk: any): void;
    all: any;
    blur(): void;
    children: any;
    className: string;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    createTextRange(): MSHTML$IHTMLTxtRange;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    defaultValue: string;
    disabled: boolean;
    document: any;
    filters: MSHTML$IHTMLFiltersCollection;
    focus(): void;
    form: MSHTML$IHTMLFormElement;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    id: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    isTextEdit: boolean;
    lang: string;
    language: string;
    maxLength: number;
    name: string;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onafterupdate: any;
    onbeforeupdate: any;
    onblur: any;
    onchange: any;
    onclick: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondragstart: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onhelp: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onmousedown: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onresize: any;
    onrowenter: any;
    onrowexit: any;
    onselect: any;
    onselectstart: any;
    outerHTML: string;
    outerText: string;
    parentElement: MSHTML$IHTMLElement;
    parentTextEdit: MSHTML$IHTMLElement;
    readOnly: boolean;
    recordNumber: any;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeFilter(pUnk: any): void;
    scrollIntoView(varargStart?: any): void;
    select(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    size: number;
    sourceIndex: number;
    status: any;
    style: MSHTML$IHTMLStyle;
    tabIndex: number;
    tagName: string;
    title: string;
    toString(): string;
    type: string;
    value: string;
  }

  declare class MSHTML$HTMLIsIndexElement {
    constructor(): this;
    accessKey: string;
    action: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    form: MSHTML$IHTMLFormElement;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    prompt: string;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLLabelElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    form: MSHTML$IHTMLFormElement;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    htmlFor: string;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLLegendElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    form: MSHTML$IHTMLFormElement;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLLIElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    type: string;
    uniqueID: string;
    uniqueNumber: number;
    value: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLLinkElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    charset: string;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    href: string;
    hreflang: string;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_href: string;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    media: string;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    rel: string;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    rev: string;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sheet: MSHTML$IHTMLStyleSheet;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    styleSheet: MSHTML$IHTMLStyleSheet;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    target: string;
    title: string;
    toString(): string;
    type: string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLListElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compact: boolean;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLLocation {
    constructor(): this;
    assign(bstr: string): void;
    //constructor: any;
    hash: string;
    host: string;
    hostname: string;
    href: string;
    pathname: string;
    port: string;
    protocol: string;

    /**
     * @param flag [flag=false]
     */
    reload(flag?: boolean): void;
    replace(bstr: string): void;
    search: string;
    toString(): string;
  }

  declare class MSHTML$HTMLMapElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    areas: MSHTML$IHTMLAreasCollection;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    name: string;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLMarqueeElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behavior: string;
    behaviorUrns: any;
    bgColor: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    direction: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    height: any;
    hideFocus: boolean;
    hspace: number;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    loop: number;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    onbounce: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfinish: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onstart: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollAmount: number;
    scrollDelay: number;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    start(): void;
    stop(): void;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    trueSpeed: boolean;
    uniqueID: string;
    uniqueNumber: number;
    vspace: number;
    width: any;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLMediaElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    autobuffer: boolean;
    autoplay: boolean;
    behaviorUrns: any;
    blur(): void;
    buffered: MSHTML$IHTMLTimeRanges;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    canPlayType(type: string): string;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    controls: boolean;
    createControlRange(): any;
    currentSrc: string;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    currentTime: number;
    currentTimeDouble: number;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    defaultPlaybackRate: number;
    defaultPlaybackRateDouble: number;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    duration: number;
    durationDouble: number;
    ended: boolean;
    error: MSHTML$IHTMLMediaError;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    initialTime: number;
    initialTimeDouble: number;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    load(): void;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    loop: boolean;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msPlayToDisabled: boolean;
    msPlayToPrimary: boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    muted: boolean;
    namespaceURI: any;
    networkState: number;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    pause(): void;
    paused: boolean;
    play(): void;
    playbackRate: number;
    playbackRateDouble: number;
    played: MSHTML$IHTMLTimeRanges;
    prefix: any;
    preload: string;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    seekable: MSHTML$IHTMLTimeRanges;
    seeking: boolean;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    src: string;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    volume: number;
    volumeDouble: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLMediaError {
    constructor(): this;
    code: number;
  }

  declare class MSHTML$HTMLMetaElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    charset: string;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    content: string;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    httpEquiv: string;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_url: string;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    name: string;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scheme: string;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    url: string;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLMSCSSKeyframeRule {
    constructor(): this;
    cssText: string;
    keyText: string;
    parentRule: MSHTML$IHTMLCSSRule;
    parentStyleSheet: MSHTML$IHTMLStyleSheet;
    style: MSHTML$IHTMLRuleStyle;
    type: number;
  }

  declare class MSHTML$HTMLMSCSSKeyframesRule {
    constructor(): this;
    appendRule(bstrRule: string): void;
    cssRules: MSHTML$IHTMLStyleSheetRulesCollection;
    cssText: string;
    deleteRule(bstrKey: string): void;
    findRule(bstrKey: string): MSHTML$IHTMLMSCSSKeyframeRule;
    name: string;
    parentRule: MSHTML$IHTMLCSSRule;
    parentStyleSheet: MSHTML$IHTMLStyleSheet;
    type: number;
  }

  declare class MSHTML$HTMLNamespace {
    constructor(): this;
    attachEvent(event: string, pdisp: any): boolean;
    //constructor: any;
    detachEvent(event: string, pdisp: any): void;
    doImport(bstrImplementationUrl: string): void;
    name: string;
    onreadystatechange: any;
    readyState: any;
    tagNames: any;
    urn: string;
  }

  declare interface MSHTML$HTMLNamespaceCollection {
    add(bstrNamespace: string, bstrUrn: string, implementationUrl?: any): any;
     //constructor: any;
    item(index: any): any;
    +length: number;
    (index: any): any;
  }

  declare class MSHTML$HTMLNavigator {
    constructor(): this;
    appCodeName: string;
    appMinorVersion: string;
    appName: string;
    appVersion: string;
    browserLanguage: string;
    connectionSpeed: number;
    //constructor: any;
    cookieEnabled: boolean;
    cpuClass: string;
    geolocation: MSHTML$IWebGeolocation;
    javaEnabled(): boolean;
    mimeTypes: MSHTML$CMimeTypes;
    msDoNotTrack: string;
    onLine: boolean;
    opsProfile: MSHTML$COpsProfile;
    platform: string;
    plugins: MSHTML$IHTMLPluginsCollection;
    systemLanguage: string;
    taintEnabled(): boolean;
    toString(): string;
    userAgent: string;
    userLanguage: string;
    userProfile: MSHTML$COpsProfile;
  }

  declare class MSHTML$HTMLNextIdElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    n: string;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLNoShowElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLObjectElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    alt: string;
    altHtml: string;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    archive: string;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    BaseHref: string;
    behaviorUrns: any;
    blur(): void;
    border: any;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    classid: string;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    code: string;
    codeBase: string;
    codeType: string;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentDocument: any;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    data: string;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    declare: boolean;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    form: MSHTML$IHTMLFormElement;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    getSVGDocument(): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    height: any;
    hideFocus: boolean;
    hspace: number;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_codeBase: string;
    ie8_data: string;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_object: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    name: string;
    namedRecordset(dataMember: string, hierarchy?: any): any;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    object: any;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    recordset: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    standby: string;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    type: string;
    uniqueID: string;
    uniqueNumber: number;
    useMap: string;
    vspace: number;
    width: any;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLOListElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compact: boolean;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    start: number;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    type: string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLOptionButtonElement {
    constructor(): this;
    accessKey: string;
    addFilter(pUnk: any): void;
    all: any;
    blur(): void;
    checked: boolean;
    children: any;
    className: string;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    defaultChecked: boolean;
    disabled: boolean;
    document: any;
    filters: MSHTML$IHTMLFiltersCollection;
    focus(): void;
    form: MSHTML$IHTMLFormElement;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    id: string;
    indeterminate: boolean;
    innerHTML: string;
    innerText: string;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    isTextEdit: boolean;
    lang: string;
    language: string;
    name: string;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onafterupdate: any;
    onbeforeupdate: any;
    onblur: any;
    onchange: any;
    onclick: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondragstart: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onhelp: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onmousedown: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onresize: any;
    onrowenter: any;
    onrowexit: any;
    onselectstart: any;
    outerHTML: string;
    outerText: string;
    parentElement: MSHTML$IHTMLElement;
    parentTextEdit: MSHTML$IHTMLElement;
    recordNumber: any;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeFilter(pUnk: any): void;
    scrollIntoView(varargStart?: any): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    sourceIndex: number;
    status: boolean;
    style: MSHTML$IHTMLStyle;
    tabIndex: number;
    tagName: string;
    title: string;
    toString(): string;
    type: string;
    value: string;
  }

  declare class MSHTML$HTMLOptionElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    defaultSelected: boolean;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    form: MSHTML$IHTMLFormElement;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    ie9_value: string;
    index: number;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    label: string;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    selected: boolean;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    text: string;
    textContent: any;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    value: string;
    xmsAcceleratorKey: string;
  }

  declare interface MSHTML$HTMLOptionElementFactory {
    create(
      text?: any,
      value?: any,
      defaultSelected?: any,
      selected?: any
    ): MSHTML$IHTMLOptionElement;
    (
      text?: any,
      value?: any,
      defaultSelected?: any,
      selected?: any
    ): MSHTML$IHTMLOptionElement;
  }

  declare class MSHTML$HTMLParaElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clear: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLParamElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_valueType: string;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    name: string;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    type: string;
    uniqueID: string;
    uniqueNumber: number;
    value: string;
    valueType: string;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLPerformance {
    constructor(): this;
    navigation: MSHTML$IHTMLPerformanceNavigation;
    timing: MSHTML$IHTMLPerformanceTiming;
    toJSON(): any;
    toString(): string;
  }

  declare class MSHTML$HTMLPerformanceNavigation {
    constructor(): this;
    redirectCount: number;
    toJSON(): any;
    toString(): string;
    type: number;
  }

  declare class MSHTML$HTMLPerformanceTiming {
    constructor(): this;
    connectEnd: number;
    connectStart: number;
    domainLookupEnd: number;
    domainLookupStart: number;
    domComplete: number;
    domContentLoadedEventEnd: number;
    domContentLoadedEventStart: number;
    domInteractive: number;
    domLoading: number;
    fetchStart: number;
    loadEventEnd: number;
    loadEventStart: number;
    msFirstPaint: number;
    navigationStart: number;
    redirectEnd: number;
    redirectStart: number;
    requestStart: number;
    responseEnd: number;
    responseStart: number;
    toJSON(): any;
    toString(): string;
    unloadEventEnd: number;
    unloadEventStart: number;
  }

  declare class MSHTML$HTMLPhraseElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    cite: string;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dateTime: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_cite: string;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLPopup {
    constructor(): this;
    //constructor: any;
    document: MSHTML$IHTMLDocument;
    Hide(): void;
    isOpen: boolean;
    Show(x: number, y: number, w: number, h: number, pElement: any): void;
  }

  declare class MSHTML$HTMLProgressElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    form: MSHTML$IHTMLFormElement;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    max: number;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    position: number;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    value: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLRenderStyle {
    constructor(): this;
    defaultTextSelection: string;
    renderingPriority: number;
    textBackgroundColor: any;
    textColor: any;
    textDecoration: string;
    textDecorationColor: any;
    textEffect: string;
    textLineThroughStyle: string;
    textUnderlineStyle: string;
  }

  declare class MSHTML$HTMLRichtextElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    cols: number;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    createTextRange(): MSHTML$IHTMLTxtRange;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    defaultValue: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    form: MSHTML$IHTMLFormElement;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    name: string;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readOnly: boolean;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    rows: number;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    select(): void;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    status: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    type: string;
    uniqueID: string;
    uniqueNumber: number;
    value: string;
    wrap: string;
    xmsAcceleratorKey: string;
  }

  declare interface MSHTML$HTMLRuleStyle {
    accelerator: string;
    alignContent: string;
    alignItems: string;
    alignSelf: string;
    animation: string;
    animationDelay: string;
    animationDirection: string;
    animationDuration: string;
    animationFillMode: string;
    animationIterationCount: string;
    animationName: string;
    animationPlayState: string;
    animationTimingFunction: string;
    backfaceVisibility: string;
    background: string;
    backgroundAttachment: string;
    backgroundColor: any;
    backgroundImage: string;
    backgroundPosition: string;
    backgroundPositionX: any;
    backgroundPositionY: any;
    backgroundRepeat: string;
    behavior: string;
    border: string;
    borderBottom: string;
    borderBottomColor: any;
    borderBottomStyle: string;
    borderBottomWidth: any;
    borderCollapse: string;
    borderColor: string;
    borderImage: string;
    borderImageOutset: string;
    borderImageRepeat: string;
    borderImageSlice: string;
    borderImageSource: string;
    borderImageWidth: string;
    borderLeft: string;
    borderLeftColor: any;
    borderLeftStyle: string;
    borderLeftWidth: any;
    borderRight: string;
    borderRightColor: any;
    borderRightStyle: string;
    borderRightWidth: any;
    borderSpacing: string;
    borderStyle: string;
    borderTop: string;
    borderTopColor: any;
    borderTopStyle: string;
    borderTopWidth: any;
    borderWidth: string;
    bottom: any;
    boxSizing: string;
    breakAfter: string;
    breakBefore: string;
    breakInside: string;
    captionSide: string;
    clear: string;
    clip: string;
    color: any;
    colorInterpolationFilters: string;
    columnCount: any;
    columnFill: string;
    columnGap: any;
    columnRule: string;
    columnRuleColor: any;
    columnRuleStyle: string;
    columnRuleWidth: any;
    columns: string;
    columnSpan: string;
    columnWidth: any;
     //constructor: any;
    content: string;
    counterIncrement: string;
    counterReset: string;
    cssText: string;
    cursor: string;
    direction: string;
    display: string;
    emptyCells: string;
    enableBackground: string;
    filter: string;
    flex: string;
    flexBasis: any;
    flexDirection: string;
    flexFlow: string;
    flexGrow: any;
    flexShrink: any;
    flexWrap: string;
    floodColor: any;
    floodOpacity: any;
    font: string;
    fontFamily: string;
    fontFeatureSettings: string;
    fontSize: any;
    fontStyle: string;
    fontVariant: string;
    fontWeight: string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getPropertyPriority(bstrPropertyName: string): string;
    getPropertyValue(bstrPropertyName: string): string;
    height: any;
    imeMode: string;
    item(index: number): string;
    justifyContent: string;
    layoutFlow: string;
    layoutGrid: string;
    layoutGridChar: any;
    layoutGridLine: any;
    layoutGridMode: string;
    layoutGridType: string;
    left: any;
    +length: number;
    letterSpacing: any;
    lightingColor: any;
    lineBreak: string;
    lineHeight: any;
    listStyle: string;
    listStyleImage: string;
    listStylePosition: string;
    listStyleType: string;
    margin: string;
    marginBottom: any;
    marginLeft: any;
    marginRight: any;
    marginTop: any;
    maxHeight: any;
    maxWidth: any;
    minHeight: any;
    minWidth: any;
    msAnimation: string;
    msAnimationDelay: string;
    msAnimationDirection: string;
    msAnimationDuration: string;
    msAnimationFillMode: string;
    msAnimationIterationCount: string;
    msAnimationName: string;
    msAnimationPlayState: string;
    msAnimationTimingFunction: string;
    msBackfaceVisibility: string;
    msBlockProgression: string;
    msContentZoomChaining: string;
    msContentZooming: string;
    msContentZoomLimit: string;
    msContentZoomLimitMax: any;
    msContentZoomLimitMin: any;
    msContentZoomSnap: string;
    msContentZoomSnapPoints: string;
    msContentZoomSnapType: string;
    msFlex: string;
    msFlexAlign: string;
    msFlexDirection: string;
    msFlexFlow: string;
    msFlexItemAlign: string;
    msFlexLinePack: string;
    msFlexNegative: any;
    msFlexOrder: any;
    msFlexPack: string;
    msFlexPositive: any;
    msFlexPreferredSize: any;
    msFlexWrap: string;
    msFlowFrom: string;
    msFlowInto: string;
    msFontFeatureSettings: string;
    msGetPropertyEnabled(name: string): boolean;
    msGridColumn: any;
    msGridColumnAlign: string;
    msGridColumns: string;
    msGridColumnSpan: any;
    msGridRow: any;
    msGridRowAlign: string;
    msGridRows: string;
    msGridRowSpan: any;
    msHighContrastAdjust: string;
    msHyphenateLimitChars: string;
    msHyphenateLimitLines: any;
    msHyphenateLimitZone: any;
    msHyphens: string;
    msImeAlign: string;
    msInterpolationMode: string;
    msOverflowStyle: string;
    msPerspective: any;
    msPerspectiveOrigin: string;
    msPutPropertyEnabled(name: string, b: boolean): void;
    msScrollChaining: string;
    msScrollLimit: string;
    msScrollLimitXMax: any;
    msScrollLimitXMin: any;
    msScrollLimitYMax: any;
    msScrollLimitYMin: any;
    msScrollRails: string;
    msScrollSnapPointsX: string;
    msScrollSnapPointsY: string;
    msScrollSnapType: string;
    msScrollSnapX: string;
    msScrollSnapY: string;
    msScrollTranslation: string;
    msTextCombineHorizontal: string;
    msTextSizeAdjust: any;
    msTouchAction: string;
    msTouchSelect: string;
    msTransformStyle: string;
    msTransition: string;
    msTransitionDelay: string;
    msTransitionDuration: string;
    msTransitionProperty: string;
    msTransitionTimingFunction: string;
    msUserSelect: string;
    msWrapFlow: string;
    msWrapMargin: any;
    msWrapThrough: string;
    orphans: any;
    outline: string;
    outlineColor: any;
    outlineStyle: string;
    outlineWidth: any;
    overflow: string;
    overflowX: string;
    overflowY: string;
    padding: string;
    paddingBottom: any;
    paddingLeft: any;
    paddingRight: any;
    paddingTop: any;
    pageBreakAfter: string;
    pageBreakBefore: string;
    pageBreakInside: string;
    +parentRule: any;
    perspective: any;
    perspectiveOrigin: string;
    pixelBottom: number;
    pixelRight: number;
    posBottom: number;
    position: string;
    posRight: number;
    quotes: string;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeProperty(bstrPropertyName: string): string;
    right: any;
    rubyAlign: string;
    rubyOverhang: string;
    rubyPosition: string;
    scrollbar3dLightColor: any;
    scrollbarArrowColor: any;
    scrollbarBaseColor: any;
    scrollbarDarkShadowColor: any;
    scrollbarFaceColor: any;
    scrollbarHighlightColor: any;
    scrollbarShadowColor: any;
    scrollbarTrackColor: any;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;

    /**
     * @param pvarPropertyPriority [pvarPropertyPriority='']
     */
    setProperty(
      bstrPropertyName: string,
      pvarPropertyValue: any,
      pvarPropertyPriority?: any
    ): void;
    styleFloat: string;
    tableLayout: string;
    textAlign: string;
    textAlignLast: string;
    textAutospace: string;
    textDecoration: string;
    textDecorationBlink: boolean;
    textDecorationLineThrough: boolean;
    textDecorationNone: boolean;
    textDecorationOverline: boolean;
    textDecorationUnderline: boolean;
    textIndent: any;
    textJustify: string;
    textJustifyTrim: string;
    textKashida: any;
    textKashidaSpace: any;
    textOverflow: string;
    textShadow: string;
    textTransform: string;
    textUnderlinePosition: string;
    top: any;
    touchAction: string;
    transform: string;
    transformOrigin: string;
    transformStyle: string;
    transition: string;
    transitionDelay: string;
    transitionDuration: string;
    transitionProperty: string;
    transitionTimingFunction: string;
    unicodeBidi: string;
    verticalAlign: any;
    visibility: string;
    webkitAnimation: string;
    webkitAnimationDelay: string;
    webkitAnimationDirection: string;
    webkitAnimationDuration: string;
    webkitAnimationFillMode: string;
    webkitAnimationIterationCount: string;
    webkitAnimationName: string;
    webkitAnimationPlayState: string;
    webkitAnimationTimingFunction: string;
    webkitAppearance: string;
    webkitBackfaceVisibility: string;
    webkitBackground: string;
    webkitBackgroundAttachment: string;
    webkitBackgroundClip: string;
    webkitBackgroundColor: any;
    webkitBackgroundImage: string;
    webkitBackgroundOrigin: string;
    webkitBackgroundPosition: string;
    webkitBackgroundPositionX: any;
    webkitBackgroundPositionY: any;
    webkitBackgroundRepeat: string;
    webkitBackgroundSize: string;
    webkitBorderImage: string;
    webkitBorderImageOutset: string;
    webkitBorderImageRepeat: string;
    webkitBorderImageSlice: string;
    webkitBorderImageSource: string;
    webkitBorderImageWidth: string;
    webkitBoxAlign: string;
    webkitBoxDirection: string;
    webkitBoxFlex: any;
    webkitBoxOrdinalGroup: any;
    webkitBoxOrient: string;
    webkitBoxPack: string;
    webkitBoxSizing: string;
    webkitTextSizeAdjust: any;
    webkitTransform: string;
    webkitTransformOrigin: string;
    webkitTransition: string;
    webkitTransitionDelay: string;
    webkitTransitionDuration: string;
    webkitTransitionProperty: string;
    webkitTransitionTimingFunction: string;
    webkitUserSelect: string;
    whiteSpace: string;
    widows: any;
    width: any;
    wordBreak: string;
    wordSpacing: any;
    wordWrap: string;
    writingMode: string;
    zIndex: any;
    zoom: any;
    (index: number): string;
  }

  declare class MSHTML$HTMLScreen {
    constructor(): this;
    availHeight: number;
    availWidth: number;
    bufferDepth: number;
    colorDepth: number;
    //constructor: any;
    deviceXDPI: number;
    deviceYDPI: number;
    fontSmoothingEnabled: boolean;
    height: number;
    logicalXDPI: number;
    logicalYDPI: number;
    pixelDepth: number;
    systemXDPI: number;
    systemYDPI: number;
    updateInterval: number;
    width: number;
  }

  declare class MSHTML$HTMLScriptElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    charset: string;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    defer: boolean;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    event: string;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    htmlFor: string;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_src: string;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    src: string;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    text: string;
    title: string;
    toString(): string;
    type: string;
    uniqueID: string;
    uniqueNumber: number;
    usedCharset: string;
    xmsAcceleratorKey: string;
  }

  declare interface MSHTML$HTMLSelectElement {
    accessKey: string;
    add(element: MSHTML$IHTMLElement, before?: any): void;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    +all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    +attributes: any;
    +behaviorUrns: any;
    blur(): void;
    +canHaveChildren: boolean;
    +canHaveHTML: boolean;
    +childNodes: any;
    +children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    +clientHeight: number;
    +clientLeft: number;
    +clientTop: number;
    +clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
     //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    +currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    +document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    +filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    +firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    +form: MSHTML$IHTMLFormElement;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_add(pElem: MSHTML$IHTMLOptionElement, pvarBefore: any): void;
    +ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_add(pElem: MSHTML$IHTMLOptionElement, pvarBefore: any): void;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    +ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    +ie9_tagName: string;
    ie9_value: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    +isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    +isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    +isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    +isTextEdit: boolean;
    item(name?: any, index?: any): any;
    lang: string;
    language: string;
    +lastChild: MSHTML$IHTMLDOMNode;
    length: number;
    +localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    multiple: boolean;
    name: string;
    namedItem(name: string): any;
    +namespaceURI: any;
    +nextSibling: MSHTML$IHTMLDOMNode;
    +nodeName: string;
    +nodeType: number;
    nodeValue: any;
    normalize(): void;
    +offsetHeight: number;
    +offsetLeft: number;
    +offsetParent: MSHTML$IHTMLElement;
    +offsetTop: number;
    +offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    +options: any;
    outerHTML: string;
    outerText: string;
    +ownerDocument: any;
    +parentElement: MSHTML$IHTMLElement;
    +parentNode: MSHTML$IHTMLDOMNode;
    +parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    +previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    +readyState: any;
    +recordNumber: any;
    releaseCapture(): void;

    /**
     * @param index [index=-1]
     */
    remove(index?: number): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    +runtimeStyle: MSHTML$IHTMLStyle;
    +scopeName: string;
    +scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    +scrollWidth: number;
    selectedIndex: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    size: number;
    +sourceIndex: number;
    spellcheck: any;
    +style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    +tagName: string;
    tags(tagName: any): any;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    +type: string;
    +uniqueID: string;
    +uniqueNumber: number;
    urns(urn: any): any;
    value: string;
    xmsAcceleratorKey: string;
    (name?: any, index?: any): any;
  }

  declare class MSHTML$HTMLSemanticElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLSourceElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    media: string;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    src: string;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    type: string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLSpanElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLSpanFlow {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLStorage {
    constructor(): this;
    clear(): void;
    //constructor: any;
    getItem(bstrKey: string): any;
    ie9_setItem(bstrKey: string, bstrValue: string): void;
    key(lIndex: number): string;
    length: number;
    remainingSpace: number;
    removeItem(bstrKey: string): void;
    setItem(bstrKey: string, bstrValue: string): void;
  }

  declare interface MSHTML$HTMLStyle {
    accelerator: string;
    alignContent: string;
    alignItems: string;
    alignSelf: string;
    animation: string;
    animationDelay: string;
    animationDirection: string;
    animationDuration: string;
    animationFillMode: string;
    animationIterationCount: string;
    animationName: string;
    animationPlayState: string;
    animationTimingFunction: string;
    backfaceVisibility: string;
    background: string;
    backgroundAttachment: string;
    backgroundColor: any;
    backgroundImage: string;
    backgroundPosition: string;
    backgroundPositionX: any;
    backgroundPositionY: any;
    backgroundRepeat: string;
    behavior: string;
    border: string;
    borderBottom: string;
    borderBottomColor: any;
    borderBottomStyle: string;
    borderBottomWidth: any;
    borderCollapse: string;
    borderColor: string;
    borderImage: string;
    borderImageOutset: string;
    borderImageRepeat: string;
    borderImageSlice: string;
    borderImageSource: string;
    borderImageWidth: string;
    borderLeft: string;
    borderLeftColor: any;
    borderLeftStyle: string;
    borderLeftWidth: any;
    borderRight: string;
    borderRightColor: any;
    borderRightStyle: string;
    borderRightWidth: any;
    borderSpacing: string;
    borderStyle: string;
    borderTop: string;
    borderTopColor: any;
    borderTopStyle: string;
    borderTopWidth: any;
    borderWidth: string;
    bottom: any;
    boxSizing: string;
    breakAfter: string;
    breakBefore: string;
    breakInside: string;
    captionSide: string;
    clear: string;
    clip: string;
    color: any;
    colorInterpolationFilters: string;
    columnCount: any;
    columnFill: string;
    columnGap: any;
    columnRule: string;
    columnRuleColor: any;
    columnRuleStyle: string;
    columnRuleWidth: any;
    columns: string;
    columnSpan: string;
    columnWidth: any;
     //constructor: any;
    content: string;
    counterIncrement: string;
    counterReset: string;
    cssText: string;
    cursor: string;
    direction: string;
    display: string;
    emptyCells: string;
    enableBackground: string;
    filter: string;
    flex: string;
    flexBasis: any;
    flexDirection: string;
    flexFlow: string;
    flexGrow: any;
    flexShrink: any;
    flexWrap: string;
    floodColor: any;
    floodOpacity: any;
    font: string;
    fontFamily: string;
    fontFeatureSettings: string;
    fontSize: any;
    fontStyle: string;
    fontVariant: string;
    fontWeight: string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getExpression(propname: string): any;
    getPropertyPriority(bstrPropertyName: string): string;
    getPropertyValue(bstrPropertyName: string): string;
    height: any;
    imeMode: string;
    item(index: number): string;
    justifyContent: string;
    layoutFlow: string;
    layoutGrid: string;
    layoutGridChar: any;
    layoutGridLine: any;
    layoutGridMode: string;
    layoutGridType: string;
    left: any;
    +length: number;
    letterSpacing: any;
    lightingColor: any;
    lineBreak: string;
    lineHeight: any;
    listStyle: string;
    listStyleImage: string;
    listStylePosition: string;
    listStyleType: string;
    margin: string;
    marginBottom: any;
    marginLeft: any;
    marginRight: any;
    marginTop: any;
    maxHeight: any;
    maxWidth: any;
    minHeight: any;
    minWidth: any;
    msAnimation: string;
    msAnimationDelay: string;
    msAnimationDirection: string;
    msAnimationDuration: string;
    msAnimationFillMode: string;
    msAnimationIterationCount: string;
    msAnimationName: string;
    msAnimationPlayState: string;
    msAnimationTimingFunction: string;
    msBackfaceVisibility: string;
    msBlockProgression: string;
    msContentZoomChaining: string;
    msContentZooming: string;
    msContentZoomLimit: string;
    msContentZoomLimitMax: any;
    msContentZoomLimitMin: any;
    msContentZoomSnap: string;
    msContentZoomSnapPoints: string;
    msContentZoomSnapType: string;
    msFlex: string;
    msFlexAlign: string;
    msFlexDirection: string;
    msFlexFlow: string;
    msFlexItemAlign: string;
    msFlexLinePack: string;
    msFlexNegative: any;
    msFlexOrder: any;
    msFlexPack: string;
    msFlexPositive: any;
    msFlexPreferredSize: any;
    msFlexWrap: string;
    msFlowFrom: string;
    msFlowInto: string;
    msFontFeatureSettings: string;
    msGetPropertyEnabled(name: string): boolean;
    msGridColumn: any;
    msGridColumnAlign: string;
    msGridColumns: string;
    msGridColumnSpan: any;
    msGridRow: any;
    msGridRowAlign: string;
    msGridRows: string;
    msGridRowSpan: any;
    msHighContrastAdjust: string;
    msHyphenateLimitChars: string;
    msHyphenateLimitLines: any;
    msHyphenateLimitZone: any;
    msHyphens: string;
    msImeAlign: string;
    msInterpolationMode: string;
    msOverflowStyle: string;
    msPerspective: any;
    msPerspectiveOrigin: string;
    msPutPropertyEnabled(name: string, b: boolean): void;
    msScrollChaining: string;
    msScrollLimit: string;
    msScrollLimitXMax: any;
    msScrollLimitXMin: any;
    msScrollLimitYMax: any;
    msScrollLimitYMin: any;
    msScrollRails: string;
    msScrollSnapPointsX: string;
    msScrollSnapPointsY: string;
    msScrollSnapType: string;
    msScrollSnapX: string;
    msScrollSnapY: string;
    msScrollTranslation: string;
    msTextCombineHorizontal: string;
    msTextSizeAdjust: any;
    msTouchAction: string;
    msTouchSelect: string;
    msTransformStyle: string;
    msTransition: string;
    msTransitionDelay: string;
    msTransitionDuration: string;
    msTransitionProperty: string;
    msTransitionTimingFunction: string;
    msUserSelect: string;
    msWrapFlow: string;
    msWrapMargin: any;
    msWrapThrough: string;
    orphans: any;
    outline: string;
    outlineColor: any;
    outlineStyle: string;
    outlineWidth: any;
    overflow: string;
    overflowX: string;
    overflowY: string;
    padding: string;
    paddingBottom: any;
    paddingLeft: any;
    paddingRight: any;
    paddingTop: any;
    pageBreakAfter: string;
    pageBreakBefore: string;
    pageBreakInside: string;
    +parentRule: any;
    perspective: any;
    perspectiveOrigin: string;
    pixelBottom: number;
    pixelHeight: number;
    pixelLeft: number;
    pixelRight: number;
    pixelTop: number;
    pixelWidth: number;
    posBottom: number;
    posHeight: number;
    position: string;
    posLeft: number;
    posRight: number;
    posTop: number;
    posWidth: number;
    quotes: string;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeExpression(propname: string): boolean;
    removeProperty(bstrPropertyName: string): string;
    right: any;
    rubyAlign: string;
    rubyOverhang: string;
    rubyPosition: string;
    scrollbar3dLightColor: any;
    scrollbarArrowColor: any;
    scrollbarBaseColor: any;
    scrollbarDarkShadowColor: any;
    scrollbarFaceColor: any;
    scrollbarHighlightColor: any;
    scrollbarShadowColor: any;
    scrollbarTrackColor: any;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;

    /**
     * @param pvarPropertyPriority [pvarPropertyPriority='']
     */
    setProperty(
      bstrPropertyName: string,
      pvarPropertyValue: any,
      pvarPropertyPriority?: any
    ): void;
    styleFloat: string;
    tableLayout: string;
    textAlign: string;
    textAlignLast: string;
    textAutospace: string;
    textDecoration: string;
    textDecorationBlink: boolean;
    textDecorationLineThrough: boolean;
    textDecorationNone: boolean;
    textDecorationOverline: boolean;
    textDecorationUnderline: boolean;
    textIndent: any;
    textJustify: string;
    textJustifyTrim: string;
    textKashida: any;
    textKashidaSpace: any;
    textOverflow: string;
    textShadow: string;
    textTransform: string;
    textUnderlinePosition: string;
    top: any;
    toString(): string;
    touchAction: string;
    transform: string;
    transformOrigin: string;
    transformStyle: string;
    transition: string;
    transitionDelay: string;
    transitionDuration: string;
    transitionProperty: string;
    transitionTimingFunction: string;
    unicodeBidi: string;
    verticalAlign: any;
    visibility: string;
    webkitAnimation: string;
    webkitAnimationDelay: string;
    webkitAnimationDirection: string;
    webkitAnimationDuration: string;
    webkitAnimationFillMode: string;
    webkitAnimationIterationCount: string;
    webkitAnimationName: string;
    webkitAnimationPlayState: string;
    webkitAnimationTimingFunction: string;
    webkitAppearance: string;
    webkitBackfaceVisibility: string;
    webkitBackground: string;
    webkitBackgroundAttachment: string;
    webkitBackgroundClip: string;
    webkitBackgroundColor: any;
    webkitBackgroundImage: string;
    webkitBackgroundOrigin: string;
    webkitBackgroundPosition: string;
    webkitBackgroundPositionX: any;
    webkitBackgroundPositionY: any;
    webkitBackgroundRepeat: string;
    webkitBackgroundSize: string;
    webkitBorderImage: string;
    webkitBorderImageOutset: string;
    webkitBorderImageRepeat: string;
    webkitBorderImageSlice: string;
    webkitBorderImageSource: string;
    webkitBorderImageWidth: string;
    webkitBoxAlign: string;
    webkitBoxDirection: string;
    webkitBoxFlex: any;
    webkitBoxOrdinalGroup: any;
    webkitBoxOrient: string;
    webkitBoxPack: string;
    webkitBoxSizing: string;
    webkitTextSizeAdjust: any;
    webkitTransform: string;
    webkitTransformOrigin: string;
    webkitTransition: string;
    webkitTransitionDelay: string;
    webkitTransitionDuration: string;
    webkitTransitionProperty: string;
    webkitTransitionTimingFunction: string;
    webkitUserSelect: string;
    whiteSpace: string;
    widows: any;
    width: any;
    wordBreak: string;
    wordSpacing: any;
    wordWrap: string;
    writingMode: string;
    zIndex: any;
    zoom: any;
    (index: number): string;
  }

  declare class MSHTML$HTMLStyleElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    media: string;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sheet: MSHTML$IHTMLStyleSheet;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    styleSheet: MSHTML$IHTMLStyleSheet;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    type: string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLStyleFontFace {
    constructor(): this;
    cssText: string;
    fontsrc: string;
    parentRule: MSHTML$IHTMLCSSRule;
    parentStyleSheet: MSHTML$IHTMLStyleSheet;
    style: MSHTML$IHTMLRuleStyle;
    type: number;
  }

  declare class MSHTML$HTMLStyleMedia {
    constructor(): this;
    matchMedium(mediaQuery: string): boolean;
    type: string;
  }

  declare class MSHTML$HTMLStyleSheet {
    constructor(): this;

    /**
     * @param lIndex [lIndex=-1]
     */
    addImport(bstrURL: string, lIndex?: number): number;

    /**
     * @param lIndex [lIndex=-1]
     */
    addPageRule(
      bstrSelector: string,
      bstrStyle: string,
      lIndex?: number
    ): number;

    /**
     * @param lIndex [lIndex=-1]
     */
    addRule(bstrSelector: string, bstrStyle: string, lIndex?: number): number;
    //constructor: any;
    cssRules: MSHTML$IHTMLStyleSheetRulesCollection;
    cssText: string;

    /**
     * @param lIndex [lIndex=-1]
     */
    deleteRule(lIndex?: number): void;
    disabled: boolean;
    href: string;
    id: string;
    ie8_href: string;
    ie9_href: any;
    ie9_media: any;
    ie9_title: string;
    ie9_type: string;
    imports: MSHTML$IHTMLStyleSheetsCollection;

    /**
     * @param lIndex [lIndex=-1]
     */
    insertRule(bstrRule: string, lIndex?: number): number;
    isAlternate: boolean;
    isPrefAlternate: boolean;
    media: string;
    ownerNode: MSHTML$IHTMLElement;
    ownerRule: MSHTML$IHTMLCSSRule;
    owningElement: MSHTML$IHTMLElement;
    pages: MSHTML$IHTMLStyleSheetPagesCollection;
    parentStyleSheet: MSHTML$IHTMLStyleSheet;
    readOnly: boolean;
    removeImport(lIndex: number): void;
    removeRule(lIndex: number): void;
    rules: MSHTML$IHTMLStyleSheetRulesCollection;
    title: string;
    type: string;
  }

  declare class MSHTML$HTMLStyleSheetPage {
    constructor(): this;
    //constructor: any;
    cssText: string;
    parentRule: MSHTML$IHTMLCSSRule;
    parentStyleSheet: MSHTML$IHTMLStyleSheet;
    pseudoClass: string;
    selector: string;
    selectorText: string;
    style: MSHTML$IHTMLRuleStyle;
    type: number;
  }

  declare interface MSHTML$HTMLStyleSheetPagesCollection {
     //constructor: any;
    item(index: number): MSHTML$IHTMLStyleSheetPage;
    +length: number;
    (index: number): MSHTML$IHTMLStyleSheetPage;
  }

  declare class MSHTML$HTMLStyleSheetRule {
    constructor(): this;
    //constructor: any;
    cssText: string;
    ie9_selectorText: string;
    msGetSpecificity(index: number): number;
    parentRule: MSHTML$IHTMLCSSRule;
    parentStyleSheet: MSHTML$IHTMLStyleSheet;
    readOnly: boolean;
    selectorText: string;
    style: MSHTML$IHTMLRuleStyle;
    type: number;
  }

  declare interface MSHTML$HTMLStyleSheetRulesAppliedCollection {
    item(index: number): MSHTML$IHTMLStyleSheetRule;
    +length: number;
    propertyAppliedBy(name: string): MSHTML$IHTMLStyleSheetRule;
    propertyAppliedTrace(
      name: string,
      index: number
    ): MSHTML$IHTMLStyleSheetRule;
    propertyAppliedTraceLength(name: string): number;
    (index: number): MSHTML$IHTMLStyleSheetRule;
  }

  declare interface MSHTML$HTMLStyleSheetRulesCollection {
     //constructor: any;
    ie9_item(index: number): MSHTML$IHTMLCSSRule;
    +ie9_length: number;
    item(index: number): MSHTML$IHTMLStyleSheetRule;
    +length: number;
    (index: number): MSHTML$IHTMLStyleSheetRule;
  }

  declare interface MSHTML$HTMLStyleSheetsCollection {
     //constructor: any;
    ie9_item(index: number): any;
    item(pvarIndex: any): any;
    +length: number;
    (pvarIndex: any): any;
  }

  declare class MSHTML$HTMLTable {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    background: string;
    behaviorUrns: any;
    bgColor: any;
    blur(): void;
    border: any;
    borderColor: any;
    borderColorDark: any;
    borderColorLight: any;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    caption: MSHTML$IHTMLTableCaption;
    cellPadding: any;
    cells: MSHTML$IHTMLElementCollection;
    cellSpacing: any;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    cols: number;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createCaption(): MSHTML$IHTMLTableCaption;
    createControlRange(): any;
    createTBody(): MSHTML$IHTMLTableSection;
    createTFoot(): any;
    createTHead(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataPageSize: number;
    dataSrc: string;
    deleteCaption(): void;

    /**
     * @param index [index=-1]
     */
    deleteRow(index?: number): void;
    deleteTFoot(): void;
    deleteTHead(): void;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    firstPage(): void;
    focus(): void;
    frame: string;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    height: any;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_caption: MSHTML$IHTMLTableCaption;

    /**
     * @param index [index=-1]
     */
    ie9_deleteRow(index?: number): void;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;

    /**
     * @param index [index=-1]
     */
    ie9_insertRow(index?: number): any;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    ie9_tFoot: MSHTML$IHTMLTableSection;
    ie9_tHead: MSHTML$IHTMLTableSection;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;

    /**
     * @param index [index=-1]
     */
    insertRow(index?: number): any;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    lastPage(): void;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;

    /**
     * @param indexFrom [indexFrom=-1]
     * @param indexTo [indexTo=-1]
     */
    moveRow(indexFrom?: number, indexTo?: number): any;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    namespaceURI: any;
    nextPage(): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousPage(): void;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    refresh(): void;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    rows: MSHTML$IHTMLElementCollection;
    rules: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    summary: string;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    tBodies: MSHTML$IHTMLElementCollection;
    textContent: any;
    tFoot: MSHTML$IHTMLTableSection;
    tHead: MSHTML$IHTMLTableSection;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    width: any;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLTableCaption {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    vAlign: string;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLTableCell {
    constructor(): this;
    abbr: string;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    axis: string;
    background: string;
    behaviorUrns: any;
    bgColor: any;
    blur(): void;
    borderColor: any;
    borderColorDark: any;
    borderColorLight: any;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    cellIndex: number;
    ch: string;
    childNodes: any;
    children: any;
    chOff: string;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    colSpan: number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    headers: string;
    height: any;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_ch: string;
    ie9_chOff: string;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    noWrap: boolean;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    rowSpan: number;
    runtimeStyle: MSHTML$IHTMLStyle;
    scope: string;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    vAlign: string;
    width: any;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLTableCol {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    ch: string;
    childNodes: any;
    children: any;
    chOff: string;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_ch: string;
    ie9_chOff: string;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    span: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    vAlign: string;
    width: any;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLTableRow {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    bgColor: any;
    blur(): void;
    borderColor: any;
    borderColorDark: any;
    borderColorLight: any;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    cells: MSHTML$IHTMLElementCollection;
    ch: string;
    childNodes: any;
    children: any;
    chOff: string;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;

    /**
     * @param index [index=-1]
     */
    deleteCell(index?: number): void;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    height: any;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_ch: string;
    ie9_chOff: string;

    /**
     * @param index [index=-1]
     */
    ie9_deleteCell(index?: number): void;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;

    /**
     * @param index [index=-1]
     */
    ie9_insertCell(index?: number): any;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;

    /**
     * @param index [index=-1]
     */
    insertCell(index?: number): any;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    rowIndex: number;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    sectionRowIndex: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    vAlign: string;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLTableSection {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    align: string;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    bgColor: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    ch: string;
    childNodes: any;
    children: any;
    chOff: string;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;

    /**
     * @param index [index=-1]
     */
    deleteRow(index?: number): void;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_ch: string;
    ie9_chOff: string;

    /**
     * @param index [index=-1]
     */
    ie9_deleteRow(index?: number): void;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;

    /**
     * @param index [index=-1]
     */
    ie9_insertRow(index?: number): any;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;

    /**
     * @param index [index=-1]
     */
    insertRow(index?: number): any;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;

    /**
     * @param indexFrom [indexFrom=-1]
     * @param indexTo [indexTo=-1]
     */
    moveRow(indexFrom?: number, indexTo?: number): any;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    rows: MSHTML$IHTMLElementCollection;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    vAlign: string;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLTextAreaElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    cols: number;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    createTextRange(): MSHTML$IHTMLTxtRange;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    defaultValue: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    form: MSHTML$IHTMLFormElement;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    name: string;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readOnly: boolean;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    rows: number;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    select(): void;
    selectionEnd: number;
    selectionStart: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    setSelectionRange(start: number, end: number): void;
    sourceIndex: number;
    spellcheck: any;
    status: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    type: string;
    uniqueID: string;
    uniqueNumber: number;
    value: string;
    wrap: string;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLTextElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLTimeRanges {
    constructor(): this;
    end(index: number): number;
    endDouble(index: number): number;
    length: number;
    start(index: number): number;
    startDouble(index: number): number;
  }

  declare class MSHTML$HTMLTitleElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    text: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLUListElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compact: boolean;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    type: string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare class MSHTML$HTMLUnknownElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDisabled: boolean;
    isMultiLine: boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    previousSibling: MSHTML$IHTMLDOMNode;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    xmsAcceleratorKey: string;
  }

  declare interface MSHTML$HTMLUrnCollection {
     //constructor: any;
    item(index: number): string;
    +length: number;
    (index: number): string;
  }

  declare class MSHTML$HTMLVideoElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    autobuffer: boolean;
    autoplay: boolean;
    behaviorUrns: any;
    blur(): void;
    buffered: MSHTML$IHTMLTimeRanges;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    canPlayType(type: string): string;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    controls: boolean;
    createControlRange(): any;
    currentSrc: string;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    currentTime: number;
    currentTimeDouble: number;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    defaultPlaybackRate: number;
    defaultPlaybackRateDouble: number;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    duration: number;
    durationDouble: number;
    ended: boolean;
    error: MSHTML$IHTMLMediaError;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    height: number;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    initialTime: number;
    initialTimeDouble: number;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    load(): void;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    loop: boolean;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msPlayToDisabled: boolean;
    msPlayToPrimary: boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    muted: boolean;
    namespaceURI: any;
    networkState: number;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    pause(): void;
    paused: boolean;
    play(): void;
    playbackRate: number;
    playbackRateDouble: number;
    played: MSHTML$IHTMLTimeRanges;
    poster: string;
    prefix: any;
    preload: string;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    seekable: MSHTML$IHTMLTimeRanges;
    seeking: boolean;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    src: string;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    videoHeight: number;
    videoWidth: number;
    volume: number;
    volumeDouble: number;
    width: number;
    xmsAcceleratorKey: string;
  }

  declare interface MSHTML$HTMLW3CComputedStyle {
    accelerator: string;
    alignContent: string;
    alignItems: string;
    alignmentBaseline: string;
    alignSelf: string;
    animation: string;
    animationDelay: string;
    animationDirection: string;
    animationDuration: string;
    animationFillMode: string;
    animationIterationCount: string;
    animationName: string;
    animationPlayState: string;
    animationTimingFunction: string;
    backfaceVisibility: string;
    background: string;
    backgroundAttachment: string;
    backgroundClip: string;
    backgroundColor: any;
    backgroundImage: string;
    backgroundOrigin: string;
    backgroundPosition: string;
    backgroundPositionX: any;
    backgroundPositionY: any;
    backgroundRepeat: string;
    backgroundSize: string;
    baselineShift: any;
    behavior: string;
    border: string;
    borderBottom: string;
    borderBottomColor: any;
    borderBottomLeftRadius: string;
    borderBottomRightRadius: string;
    borderBottomStyle: string;
    borderBottomWidth: any;
    borderCollapse: string;
    borderColor: string;
    borderImage: string;
    borderImageOutset: string;
    borderImageRepeat: string;
    borderImageSlice: string;
    borderImageSource: string;
    borderImageWidth: string;
    borderLeft: string;
    borderLeftColor: any;
    borderLeftStyle: string;
    borderLeftWidth: any;
    borderRadius: string;
    borderRight: string;
    borderRightColor: any;
    borderRightStyle: string;
    borderRightWidth: any;
    borderSpacing: string;
    borderStyle: string;
    borderTop: string;
    borderTopColor: any;
    borderTopLeftRadius: string;
    borderTopRightRadius: string;
    borderTopStyle: string;
    borderTopWidth: any;
    borderWidth: string;
    bottom: any;
    boxShadow: string;
    boxSizing: string;
    breakAfter: string;
    breakBefore: string;
    breakInside: string;
    captionSide: string;
    clear: string;
    clip: string;
    +clipBottom: any;
    clipLeft: any;
    clipPath: string;
    clipRight: any;
    clipRule: string;
    clipTop: any;
    color: any;
    colorInterpolationFilters: string;
    columnCount: any;
    columnFill: string;
    columnGap: any;
    columnRule: string;
    columnRuleColor: any;
    columnRuleStyle: string;
    columnRuleWidth: any;
    columns: string;
    columnSpan: string;
    columnWidth: any;
    content: string;
    counterIncrement: string;
    counterReset: string;
    cssFloat: string;
    cssText: string;
    cursor: string;
    direction: string;
    display: string;
    dominantBaseline: string;
    emptyCells: string;
    enableBackground: string;
    fill: string;
    fillOpacity: any;
    fillRule: string;
    filter: string;
    flex: string;
    flexBasis: any;
    flexDirection: string;
    flexFlow: string;
    flexGrow: any;
    flexShrink: any;
    flexWrap: string;
    floodColor: any;
    floodOpacity: any;
    font: string;
    fontFamily: string;
    fontFeatureSettings: string;
    fontSize: any;
    fontSizeAdjust: any;
    fontStretch: string;
    fontStyle: string;
    fontVariant: string;
    fontWeight: string;
    getPropertyPriority(bstrPropertyName: string): string;
    getPropertyValue(bstrPropertyName: string): string;
    glyphOrientationHorizontal: any;
    glyphOrientationVertical: any;
    height: any;
    imeMode: string;
    item(index: number): string;
    justifyContent: string;
    kerning: any;
    layoutFlow: string;
    layoutGrid: string;
    layoutGridChar: any;
    layoutGridLine: any;
    layoutGridMode: string;
    layoutGridType: string;
    left: any;
    +length: number;
    letterSpacing: any;
    lightingColor: any;
    lineBreak: string;
    lineHeight: any;
    listStyle: string;
    listStyleImage: string;
    listStylePosition: string;
    listStyleType: string;
    margin: string;
    marginBottom: any;
    marginLeft: any;
    marginRight: any;
    marginTop: any;
    marker: string;
    markerEnd: string;
    markerMid: string;
    markerStart: string;
    mask: string;
    maxHeight: any;
    maxWidth: any;
    minHeight: any;
    minWidth: any;
    msAnimation: string;
    msAnimationDelay: string;
    msAnimationDirection: string;
    msAnimationDuration: string;
    msAnimationFillMode: string;
    msAnimationIterationCount: string;
    msAnimationName: string;
    msAnimationPlayState: string;
    msAnimationTimingFunction: string;
    msBackfaceVisibility: string;
    msBlockProgression: string;
    msContentZoomChaining: string;
    msContentZooming: string;
    msContentZoomLimit: string;
    msContentZoomLimitMax: any;
    msContentZoomLimitMin: any;
    msContentZoomSnap: string;
    msContentZoomSnapPoints: string;
    msContentZoomSnapType: string;
    msFlex: string;
    msFlexAlign: string;
    msFlexDirection: string;
    msFlexFlow: string;
    msFlexItemAlign: string;
    msFlexLinePack: string;
    msFlexNegative: any;
    msFlexOrder: any;
    msFlexPack: string;
    msFlexPositive: any;
    msFlexPreferredSize: any;
    msFlexWrap: string;
    msFlowFrom: string;
    msFlowInto: string;
    msFontFeatureSettings: string;
    msGridColumn: any;
    msGridColumnAlign: string;
    msGridColumns: string;
    msGridColumnSpan: any;
    msGridRow: any;
    msGridRowAlign: string;
    msGridRows: string;
    msGridRowSpan: any;
    msHighContrastAdjust: string;
    msHyphenateLimitChars: string;
    msHyphenateLimitLines: any;
    msHyphenateLimitZone: any;
    msHyphens: string;
    msImeAlign: string;
    msInterpolationMode: string;
    msOverflowStyle: string;
    msPerspective: any;
    msPerspectiveOrigin: string;
    msScrollChaining: string;
    msScrollLimit: string;
    msScrollLimitXMax: any;
    msScrollLimitXMin: any;
    msScrollLimitYMax: any;
    msScrollLimitYMin: any;
    msScrollRails: string;
    msScrollSnapPointsX: string;
    msScrollSnapPointsY: string;
    msScrollSnapType: string;
    msScrollSnapX: string;
    msScrollSnapY: string;
    msScrollTranslation: string;
    msTextCombineHorizontal: string;
    msTextSizeAdjust: any;
    msTouchAction: string;
    msTouchSelect: string;
    msTransform: string;
    msTransformOrigin: string;
    msTransformStyle: string;
    msTransition: string;
    msTransitionDelay: string;
    msTransitionDuration: string;
    msTransitionProperty: string;
    msTransitionTimingFunction: string;
    msUserSelect: string;
    msWrapFlow: string;
    msWrapMargin: any;
    msWrapThrough: string;
    opacity: any;
    orphans: any;
    outline: string;
    outlineColor: any;
    outlineStyle: string;
    outlineWidth: any;
    overflow: string;
    overflowX: string;
    overflowY: string;
    padding: string;
    paddingBottom: any;
    paddingLeft: any;
    paddingRight: any;
    paddingTop: any;
    pageBreakAfter: string;
    pageBreakBefore: string;
    pageBreakInside: string;
    +parentRule: any;
    perspective: any;
    perspectiveOrigin: string;
    pointerEvents: string;
    position: string;
    quotes: string;
    removeProperty(bstrPropertyName: string): string;
    right: any;
    rubyAlign: string;
    rubyOverhang: string;
    rubyPosition: string;
    scrollbar3dLightColor: any;
    scrollbarArrowColor: any;
    scrollbarBaseColor: any;
    scrollbarDarkShadowColor: any;
    scrollbarFaceColor: any;
    scrollbarHighlightColor: any;
    scrollbarShadowColor: any;
    scrollbarTrackColor: any;

    /**
     * @param pvarPropertyPriority [pvarPropertyPriority='']
     */
    setProperty(
      bstrPropertyName: string,
      pvarPropertyValue: any,
      pvarPropertyPriority?: any
    ): void;
    stopColor: any;
    stopOpacity: any;
    stroke: string;
    strokeDasharray: string;
    strokeDashoffset: any;
    strokeLinecap: string;
    strokeLinejoin: string;
    strokeMiterlimit: any;
    strokeOpacity: any;
    strokeWidth: any;
    styleFloat: string;
    tableLayout: string;
    textAlign: string;
    textAlignLast: string;
    textAnchor: string;
    textAutospace: string;
    textDecoration: string;
    textIndent: any;
    textJustify: string;
    textJustifyTrim: string;
    textKashida: any;
    textKashidaSpace: any;
    textOverflow: string;
    textShadow: string;
    textTransform: string;
    textUnderlinePosition: string;
    top: any;
    touchAction: string;
    transform: string;
    transformOrigin: string;
    transformStyle: string;
    transition: string;
    transitionDelay: string;
    transitionDuration: string;
    transitionProperty: string;
    transitionTimingFunction: string;
    unicodeBidi: string;
    verticalAlign: any;
    visibility: string;
    webkitAnimation: string;
    webkitAnimationDelay: string;
    webkitAnimationDirection: string;
    webkitAnimationDuration: string;
    webkitAnimationFillMode: string;
    webkitAnimationIterationCount: string;
    webkitAnimationName: string;
    webkitAnimationPlayState: string;
    webkitAnimationTimingFunction: string;
    webkitAppearance: string;
    webkitBackfaceVisibility: string;
    webkitBackground: string;
    webkitBackgroundAttachment: string;
    webkitBackgroundClip: string;
    webkitBackgroundColor: any;
    webkitBackgroundImage: string;
    webkitBackgroundOrigin: string;
    webkitBackgroundPosition: string;
    webkitBackgroundPositionX: any;
    webkitBackgroundPositionY: any;
    webkitBackgroundRepeat: string;
    webkitBackgroundSize: string;
    webkitBorderImage: string;
    webkitBorderImageOutset: string;
    webkitBorderImageRepeat: string;
    webkitBorderImageSlice: string;
    webkitBorderImageSource: string;
    webkitBorderImageWidth: string;
    webkitBoxAlign: string;
    webkitBoxDirection: string;
    webkitBoxFlex: any;
    webkitBoxOrdinalGroup: any;
    webkitBoxOrient: string;
    webkitBoxPack: string;
    webkitBoxSizing: string;
    webkitTextSizeAdjust: any;
    webkitTransform: string;
    webkitTransformOrigin: string;
    webkitTransition: string;
    webkitTransitionDelay: string;
    webkitTransitionDuration: string;
    webkitTransitionProperty: string;
    webkitTransitionTimingFunction: string;
    webkitUserSelect: string;
    whiteSpace: string;
    widows: any;
    width: any;
    wordBreak: string;
    wordSpacing: any;
    wordWrap: string;
    writingMode: string;
    zIndex: any;
    zoom: any;
    (index: number): string;
  }

  declare interface MSHTML$HTMLWindow2 {
    addEventListener(type: string, listener: any, useCapture: boolean): void;

    /**
     * @param message [message='']
     */
    alert(message?: string): void;
    +applicationCache: MSHTML$applicationCache;
    attachEvent(event: string, pdisp: any): boolean;
    blur(): void;
    clearInterval(timerID: number): void;
    clearTimeout(timerID: number): void;
    +clientInformation: MSHTML$IOmNavigator;
    +clipboardData: MSHTML$IHTMLDataTransfer;
    close(): void;
    +closed: boolean;

    /**
     * @param message [message='']
     */
    confirm(message?: string): boolean;
     //constructor: any;
    createPopup(varArgIn?: any): any;
    defaultStatus: string;
    detachEvent(event: string, pdisp: any): void;
    dispatchEvent(evt: MSHTML$IDOMEvent): boolean;
    +document: MSHTML$IHTMLDocument2;
    +event: MSHTML$IHTMLEventObj;

    /**
     * @param language [language='JScript']
     */
    execScript(code: string, language?: string): any;
    +external: any;
    focus(): void;
    +frameElement: MSHTML$IHTMLFrameBase;
    +frames: MSHTML$FramesCollection;

    /**
     * @param bstrPseudoElt [bstrPseudoElt='']
     */
    getComputedStyle(
      varArgIn: MSHTML$IHTMLDOMNode,
      bstrPseudoElt?: string
    ): MSHTML$IHTMLCSSStyleDeclaration;
    getSelection(): MSHTML$IHTMLSelection;
    +history: MSHTML$IOmHistory;
    +innerHeight: number;
    +innerWidth: number;
    item(pvarIndex: any): any;
    +length: number;
    +localStorage: MSHTML$IHTMLStorage;
    +location: MSHTML$IHTMLLocation;
    +maxConnectionsPerServer: number;
    moveBy(x: number, y: number): void;
    moveTo(x: number, y: number): void;
    msWriteProfilerMark(bstrProfilerMarkName: string): void;
    name: string;
    navigate(url: string): void;
    +navigator: MSHTML$IOmNavigator;
    offscreenBuffering: any;
    onabort: any;
    onafterprint: any;
    onbeforeprint: any;
    onbeforeunload: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    ondblclick: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhashchange: any;
    onhelp: any;
    oninput: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onmessage: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsinertiastart: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onoffline: any;
    ononline: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onpopstate: any;
    onprogress: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onstalled: any;
    onstorage: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onunload: any;
    onvolumechange: any;
    onwaiting: any;

    /**
     * @param url [url='']
     * @param name [name='']
     * @param features [features='']
     * @param replace [replace=false]
     */
    open(
      url?: string,
      name?: string,
      features?: string,
      replace?: boolean
    ): MSHTML$IHTMLWindow2;
    opener: any;
    +outerHeight: number;
    +outerWidth: number;
    +pageXOffset: number;
    +pageYOffset: number;
    +parent: MSHTML$IHTMLWindow2;
    performance: any;
    postMessage(msg: string, targetOrigin?: any): void;
    print(): void;

    /**
     * @param message [message='']
     * @param defstr [defstr='undefined']
     */
    prompt(message?: string, defstr?: string): any;
    removeEventListener(type: string, listener: any, useCapture: boolean): void;
    resizeBy(x: number, y: number): void;
    resizeTo(x: number, y: number): void;
    +screen: MSHTML$IHTMLScreen;
    +screenLeft: number;
    +screenTop: number;
    +screenX: number;
    +screenY: number;
    scroll(x: number, y: number): void;
    scrollBy(x: number, y: number): void;
    scrollTo(x: number, y: number): void;
    +self: MSHTML$IHTMLWindow2;
    +sessionStorage: MSHTML$IHTMLStorage;
    setInterval(expression: any, msec: number, language?: any): number;
    setTimeout(expression: any, msec: number, language?: any): number;

    /**
     * @param features [features='']
     */
    showHelp(helpURL: string, helpArg: any, features?: string): void;
    showModalDialog(dialog: string, varArgIn?: any, varOptions?: any): any;

    /**
     * @param url [url='']
     */
    showModelessDialog(
      url?: string,
      varArgIn?: any,
      options?: any
    ): MSHTML$IHTMLWindow2;
    status: string;
    +styleMedia: MSHTML$IHTMLStyleMedia;
    +top: MSHTML$IHTMLWindow2;
    toStaticHTML(bstrHTML: string): string;
    toString(): string;
    +window: MSHTML$IHTMLWindow2;
    (pvarIndex: any): any;
  }

  declare interface MSHTML$HTMLWindowProxy {
    addEventListener(type: string, listener: any, useCapture: boolean): void;

    /**
     * @param message [message='']
     */
    alert(message?: string): void;
    +applicationCache: MSHTML$applicationCache;
    attachEvent(event: string, pdisp: any): boolean;
    blur(): void;
    clearInterval(timerID: number): void;
    clearTimeout(timerID: number): void;
    +clientInformation: MSHTML$IOmNavigator;
    +clipboardData: MSHTML$IHTMLDataTransfer;
    close(): void;
    +closed: boolean;

    /**
     * @param message [message='']
     */
    confirm(message?: string): boolean;
     //constructor: any;
    createPopup(varArgIn?: any): any;
    defaultStatus: string;
    detachEvent(event: string, pdisp: any): void;
    dispatchEvent(evt: MSHTML$IDOMEvent): boolean;
    +document: MSHTML$IHTMLDocument2;
    +event: MSHTML$IHTMLEventObj;

    /**
     * @param language [language='JScript']
     */
    execScript(code: string, language?: string): any;
    +external: any;
    focus(): void;
    +frameElement: MSHTML$IHTMLFrameBase;
    +frames: MSHTML$FramesCollection;

    /**
     * @param bstrPseudoElt [bstrPseudoElt='']
     */
    getComputedStyle(
      varArgIn: MSHTML$IHTMLDOMNode,
      bstrPseudoElt?: string
    ): MSHTML$IHTMLCSSStyleDeclaration;
    getSelection(): MSHTML$IHTMLSelection;
    +history: MSHTML$IOmHistory;
    +innerHeight: number;
    +innerWidth: number;
    item(pvarIndex: any): any;
    +length: number;
    +localStorage: MSHTML$IHTMLStorage;
    +location: MSHTML$IHTMLLocation;
    +maxConnectionsPerServer: number;
    moveBy(x: number, y: number): void;
    moveTo(x: number, y: number): void;
    msWriteProfilerMark(bstrProfilerMarkName: string): void;
    name: string;
    navigate(url: string): void;
    +navigator: MSHTML$IOmNavigator;
    offscreenBuffering: any;
    onabort: any;
    onafterprint: any;
    onbeforeprint: any;
    onbeforeunload: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    ondblclick: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhashchange: any;
    onhelp: any;
    oninput: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onmessage: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsinertiastart: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onoffline: any;
    ononline: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onpopstate: any;
    onprogress: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onstalled: any;
    onstorage: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onunload: any;
    onvolumechange: any;
    onwaiting: any;

    /**
     * @param url [url='']
     * @param name [name='']
     * @param features [features='']
     * @param replace [replace=false]
     */
    open(
      url?: string,
      name?: string,
      features?: string,
      replace?: boolean
    ): MSHTML$IHTMLWindow2;
    opener: any;
    +outerHeight: number;
    +outerWidth: number;
    +pageXOffset: number;
    +pageYOffset: number;
    +parent: MSHTML$IHTMLWindow2;
    performance: any;
    postMessage(msg: string, targetOrigin?: any): void;
    print(): void;

    /**
     * @param message [message='']
     * @param defstr [defstr='undefined']
     */
    prompt(message?: string, defstr?: string): any;
    removeEventListener(type: string, listener: any, useCapture: boolean): void;
    resizeBy(x: number, y: number): void;
    resizeTo(x: number, y: number): void;
    +screen: MSHTML$IHTMLScreen;
    +screenLeft: number;
    +screenTop: number;
    +screenX: number;
    +screenY: number;
    scroll(x: number, y: number): void;
    scrollBy(x: number, y: number): void;
    scrollTo(x: number, y: number): void;
    +self: MSHTML$IHTMLWindow2;
    +sessionStorage: MSHTML$IHTMLStorage;
    setInterval(expression: any, msec: number, language?: any): number;
    setTimeout(expression: any, msec: number, language?: any): number;

    /**
     * @param features [features='']
     */
    showHelp(helpURL: string, helpArg: any, features?: string): void;
    showModalDialog(dialog: string, varArgIn?: any, varOptions?: any): any;

    /**
     * @param url [url='']
     */
    showModelessDialog(
      url?: string,
      varArgIn?: any,
      options?: any
    ): MSHTML$IHTMLWindow2;
    status: string;
    +styleMedia: MSHTML$IHTMLStyleMedia;
    +top: MSHTML$IHTMLWindow2;
    toStaticHTML(bstrHTML: string): string;
    toString(): string;
    +window: MSHTML$IHTMLWindow2;
    (pvarIndex: any): any;
  }

  declare class MSHTML$HTMLWndOptionElement {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    canHaveHTML: boolean;
    childNodes: any;
    children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
    //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    defaultSelected: boolean;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    form: MSHTML$IHTMLFormElement;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_tagName: string;
    index: number;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    isTextEdit: boolean;
    label: string;
    lang: string;
    language: string;
    lastChild: MSHTML$IHTMLDOMNode;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    ownerDocument: any;
    parentElement: MSHTML$IHTMLElement;
    parentNode: MSHTML$IHTMLDOMNode;
    parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: any;
    recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;
    selected: boolean;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    sourceIndex: number;
    spellcheck: any;
    style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    tagName: string;
    tagUrn: string;
    text: string;
    textContent: any;
    title: string;
    toString(): string;
    uniqueID: string;
    uniqueNumber: number;
    value: string;
    xmsAcceleratorKey: string;
  }

  declare interface MSHTML$HTMLWndSelectElement {
    accessKey: string;
    add(element: MSHTML$IHTMLElement, before?: any): void;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    +all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    +attributes: any;
    +behaviorUrns: any;
    blur(): void;
    +canHaveChildren: boolean;
    +canHaveHTML: boolean;
    +childNodes: any;
    +children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    +clientHeight: number;
    +clientLeft: number;
    +clientTop: number;
    +clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    componentFromPoint(x: number, y: number): string;
     //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    +currentStyle: MSHTML$IHTMLCurrentStyle;
    dataFld: string;
    dataFormatAs: string;
    dataSrc: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    +document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    +filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    +firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    +form: MSHTML$IHTMLFormElement;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    +ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    +ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    +ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    +isContentEditable: boolean;
    isDefaultNamespace(pvarNamespace: any): boolean;
    +isDisabled: boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    +isMultiLine: boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    +isTextEdit: boolean;
    item(name?: any, index?: any): any;
    lang: string;
    language: string;
    +lastChild: MSHTML$IHTMLDOMNode;
    length: number;
    +localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    multiple: boolean;
    name: string;
    namedItem(name: string): any;
    +namespaceURI: any;
    +nextSibling: MSHTML$IHTMLDOMNode;
    +nodeName: string;
    +nodeType: number;
    nodeValue: any;
    normalize(): void;
    +offsetHeight: number;
    +offsetLeft: number;
    +offsetParent: MSHTML$IHTMLElement;
    +offsetTop: number;
    +offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    +options: any;
    outerHTML: string;
    outerText: string;
    +ownerDocument: any;
    +parentElement: MSHTML$IHTMLElement;
    +parentNode: MSHTML$IHTMLDOMNode;
    +parentTextEdit: MSHTML$IHTMLElement;
    prefix: any;
    +previousSibling: MSHTML$IHTMLDOMNode;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    +readyState: any;
    +recordNumber: any;
    releaseCapture(): void;

    /**
     * @param index [index=-1]
     */
    remove(index?: number): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    role: string;
    +runtimeStyle: MSHTML$IHTMLStyle;
    +scopeName: string;
    +scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    +scrollWidth: number;
    selectedIndex: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    size: number;
    +sourceIndex: number;
    spellcheck: any;
    +style: MSHTML$IHTMLStyle;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    +tagName: string;
    tags(tagName: any): any;
    tagUrn: string;
    textContent: any;
    title: string;
    toString(): string;
    +type: string;
    +uniqueID: string;
    +uniqueNumber: number;
    urns(urn: any): any;
    value: string;
    xmsAcceleratorKey: string;
    (name?: any, index?: any): any;
  }

  declare class MSHTML$HTMLXMLHttpRequest {
    constructor(): this;
    abort(): void;
    addEventListener(type: string, listener: any, useCapture: boolean): void;
    //constructor: any;
    dispatchEvent(evt: MSHTML$IDOMEvent): boolean;
    getAllResponseHeaders(): string;
    getResponseHeader(bstrHeader: string): string;
    onreadystatechange: any;
    ontimeout: any;
    open(
      bstrMethod: string,
      bstrURL: string,
      varAsync: any,
      varUser?: any,
      varPassword?: any
    ): void;
    readyState: number;
    removeEventListener(type: string, listener: any, useCapture: boolean): void;
    responseBody: any;
    responseText: string;
    responseXML: any;
    send(varBody?: any): void;
    setRequestHeader(bstrHeader: string, bstrValue: string): void;
    status: number;
    statusText: string;
    timeout: number;
  }

  declare interface MSHTML$HTMLXMLHttpRequestFactory {
    create(): MSHTML$IHTMLXMLHttpRequest;
    (): MSHTML$IHTMLXMLHttpRequest;
  }

  declare class MSHTML$ICanvasGradient {
    constructor(): this;
    addColorStop(offset: number, color: string): void;
  }

  declare class MSHTML$ICanvasImageData {
    constructor(): this;
    data: any;
    height: number;
    width: number;
  }

  declare class MSHTML$ICanvasPattern {
    constructor(): this;
  }

  declare class MSHTML$ICanvasRenderingContext2D {
    constructor(): this;
    arc(
      x: number,
      y: number,
      radius: number,
      startAngle: number,
      endAngle: number,
      anticlockwise: number
    ): void;
    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;
    beginPath(): void;
    bezierCurveTo(
      cp1x: number,
      cp1y: number,
      cp2x: number,
      cp2y: number,
      x: number,
      y: number
    ): void;
    canvas: MSHTML$IHTMLCanvasElement;
    clearRect(x: number, y: number, w: number, h: number): void;
    clip(): void;
    closePath(): void;
    createImageData(a1: any, a2: any): MSHTML$ICanvasImageData;
    createLinearGradient(
      x0: number,
      y0: number,
      x1: number,
      y1: number
    ): MSHTML$ICanvasGradient;
    createPattern(Image: any, repetition: any): MSHTML$ICanvasPattern;
    createRadialGradient(
      x0: number,
      y0: number,
      r0: number,
      x1: number,
      y1: number,
      r1: number
    ): MSHTML$ICanvasGradient;
    drawImage(
      pSrc: any,
      a1: any,
      a2: any,
      a3: any,
      a4: any,
      a5: any,
      a6: any,
      a7: any,
      a8: any
    ): void;
    fill(): void;
    fillRect(x: number, y: number, w: number, h: number): void;
    fillStyle: any;
    fillText(text: string, x: number, y: number, maxWidth: any): void;
    font: string;
    getImageData(
      sx: number,
      sy: number,
      sw: number,
      sh: number
    ): MSHTML$ICanvasImageData;
    globalAlpha: number;
    globalCompositeOperation: string;
    isPointInPath(x: number, y: number): boolean;
    lineCap: string;
    lineJoin: string;
    lineTo(x: number, y: number): void;
    lineWidth: number;
    measureText(text: string): MSHTML$ICanvasTextMetrics;
    miterLimit: number;
    moveTo(x: number, y: number): void;
    putImageData(
      imagedata: MSHTML$ICanvasImageData,
      dx: number,
      dy: number,
      dirtyX: any,
      dirtyY: any,
      dirtyWidth: any,
      dirtyHeight: any
    ): void;
    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;
    rect(x: number, y: number, w: number, h: number): void;
    restore(): void;
    rotate(angle: number): void;
    save(): void;
    scale(x: number, y: number): void;
    setTransform(
      m11: number,
      m12: number,
      m21: number,
      m22: number,
      dx: number,
      dy: number
    ): void;
    shadowBlur: number;
    shadowColor: string;
    shadowOffsetX: number;
    shadowOffsetY: number;
    stroke(): void;
    strokeRect(x: number, y: number, w: number, h: number): void;
    strokeStyle: any;
    strokeText(text: string, x: number, y: number, maxWidth: any): void;
    textAlign: string;
    textBaseline: string;
    transform(
      m11: number,
      m12: number,
      m21: number,
      m22: number,
      dx: number,
      dy: number
    ): void;
    translate(x: number, y: number): void;
  }

  declare class MSHTML$ICanvasTextMetrics {
    constructor(): this;
    width: number;
  }

  declare class MSHTML$IDOMDocumentType {
    constructor(): this;
    entities: any;
    internalSubset: any;
    name: string;
    notations: any;
    publicId: any;
    systemId: any;
  }

  declare class MSHTML$IDOMEvent {
    constructor(): this;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    eventPhase: number;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    isTrusted: boolean;
    preventDefault(): void;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
  }

  declare class MSHTML$IDOMNodeIterator {
    constructor(): this;
    Detach(): void;
    expandEntityReferences: boolean;
    filter: any;
    nextNode(): any;
    previousNode(): any;
    root: any;
    whatToShow: number;
  }

  declare class MSHTML$IDOMParser {
    constructor(): this;
    parseFromString(xmlSource: string, mimeType: string): MSHTML$IHTMLDocument2;
  }

  declare class MSHTML$IDOMProcessingInstruction {
    constructor(): this;
    data: string;
    target: string;
  }

  declare class MSHTML$IDOMTreeWalker {
    constructor(): this;
    currentNode: any;
    expandEntityReferences: boolean;
    filter: any;
    firstChild(): any;
    lastChild(): any;
    nextNode(): any;
    nextSibling(): any;
    parentNode(): any;
    previousNode(): any;
    previousSibling(): any;
    root: any;
    whatToShow: number;
  }

  declare class MSHTML$IDOMXmlSerializer {
    constructor(): this;
    serializeToString(pNode: MSHTML$IHTMLDOMNode): string;
  }

  declare class MSHTML$IEventTarget {
    constructor(): this;
    addEventListener(type: string, listener: any, useCapture: boolean): void;
    dispatchEvent(evt: MSHTML$IDOMEvent): boolean;
    removeEventListener(type: string, listener: any, useCapture: boolean): void;
  }

  declare interface MSHTML$IHTMLAreasCollection {
    add(element: MSHTML$IHTMLElement, before?: any): void;
    item(name?: any, index?: any): any;
    length: number;

    /**
     * @param index [index=-1]
     */
    remove(index?: number): void;
    tags(tagName: any): any;
    (name?: any, index?: any): any;
  }

  declare class MSHTML$IHTMLAttributeCollection3 {
    constructor(): this;
    getNamedItem(bstrName: string): MSHTML$IHTMLDOMAttribute;
    item(index: number): MSHTML$IHTMLDOMAttribute;
    length: number;
    removeNamedItem(bstrName: string): MSHTML$IHTMLDOMAttribute;
    setNamedItem(pNodeIn: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
  }

  declare class MSHTML$IHTMLAudioElement {
    constructor(): this;
  }

  declare interface MSHTML$IHTMLBookmarkCollection {
    item(index: number): any;
    +length: number;
    (index: number): any;
  }

  declare class MSHTML$IHTMLCanvasElement {
    constructor(): this;
    getContext(contextId: string): MSHTML$ICanvasRenderingContext2D;
    height: number;
    toDataURL(type: string, jpegquality: any): string;
    width: number;
  }

  declare class MSHTML$IHTMLCSSRule {
    constructor(): this;
    cssText: string;
    parentRule: MSHTML$IHTMLCSSRule;
    parentStyleSheet: MSHTML$IHTMLStyleSheet;
    type: number;
  }

  declare interface MSHTML$IHTMLCSSStyleDeclaration {
    accelerator: string;
    alignmentBaseline: string;
    background: string;
    backgroundAttachment: string;
    backgroundClip: string;
    backgroundColor: any;
    backgroundImage: string;
    backgroundOrigin: string;
    backgroundPosition: string;
    backgroundPositionX: any;
    backgroundPositionY: any;
    backgroundRepeat: string;
    backgroundSize: string;
    baselineShift: any;
    behavior: string;
    border: string;
    borderBottom: string;
    borderBottomColor: any;
    borderBottomLeftRadius: string;
    borderBottomRightRadius: string;
    borderBottomStyle: string;
    borderBottomWidth: any;
    borderCollapse: string;
    borderColor: string;
    borderLeft: string;
    borderLeftColor: any;
    borderLeftStyle: string;
    borderLeftWidth: any;
    borderRadius: string;
    borderRight: string;
    borderRightColor: any;
    borderRightStyle: string;
    borderRightWidth: any;
    borderSpacing: string;
    borderStyle: string;
    borderTop: string;
    borderTopColor: any;
    borderTopLeftRadius: string;
    borderTopRightRadius: string;
    borderTopStyle: string;
    borderTopWidth: any;
    borderWidth: string;
    bottom: any;
    boxShadow: string;
    boxSizing: string;
    captionSide: string;
    clear: string;
    clip: string;
    +clipBottom: any;
    clipLeft: any;
    clipPath: string;
    clipRight: any;
    clipRule: string;
    clipTop: any;
    color: any;
    content: string;
    counterIncrement: string;
    counterReset: string;
    cssFloat: string;
    cssText: string;
    cursor: string;
    direction: string;
    display: string;
    dominantBaseline: string;
    emptyCells: string;
    fill: string;
    fillOpacity: any;
    fillRule: string;
    filter: string;
    font: string;
    fontFamily: string;
    fontSize: any;
    fontSizeAdjust: any;
    fontStretch: string;
    fontStyle: string;
    fontVariant: string;
    fontWeight: string;
    getPropertyPriority(bstrPropertyName: string): string;
    getPropertyValue(bstrPropertyName: string): string;
    glyphOrientationHorizontal: any;
    glyphOrientationVertical: any;
    height: any;
    imeMode: string;
    item(index: number): string;
    kerning: any;
    layoutFlow: string;
    layoutGrid: string;
    layoutGridChar: any;
    layoutGridLine: any;
    layoutGridMode: string;
    layoutGridType: string;
    left: any;
    +length: number;
    letterSpacing: any;
    lineBreak: string;
    lineHeight: any;
    listStyle: string;
    listStyleImage: string;
    listStylePosition: string;
    listStyleType: string;
    margin: string;
    marginBottom: any;
    marginLeft: any;
    marginRight: any;
    marginTop: any;
    marker: string;
    markerEnd: string;
    markerMid: string;
    markerStart: string;
    mask: string;
    maxHeight: any;
    maxWidth: any;
    minHeight: any;
    minWidth: any;
    msBlockProgression: string;
    msInterpolationMode: string;
    msTransform: string;
    msTransformOrigin: string;
    opacity: any;
    orphans: any;
    outline: string;
    outlineColor: any;
    outlineStyle: string;
    outlineWidth: any;
    overflow: string;
    overflowX: string;
    overflowY: string;
    padding: string;
    paddingBottom: any;
    paddingLeft: any;
    paddingRight: any;
    paddingTop: any;
    pageBreakAfter: string;
    pageBreakBefore: string;
    pageBreakInside: string;
    +parentRule: any;
    pointerEvents: string;
    position: string;
    quotes: string;
    removeProperty(bstrPropertyName: string): string;
    right: any;
    rubyAlign: string;
    rubyOverhang: string;
    rubyPosition: string;
    scrollbar3dLightColor: any;
    scrollbarArrowColor: any;
    scrollbarBaseColor: any;
    scrollbarDarkShadowColor: any;
    scrollbarFaceColor: any;
    scrollbarHighlightColor: any;
    scrollbarShadowColor: any;
    scrollbarTrackColor: any;

    /**
     * @param pvarPropertyPriority [pvarPropertyPriority='']
     */
    setProperty(
      bstrPropertyName: string,
      pvarPropertyValue: any,
      pvarPropertyPriority?: any
    ): void;
    stopColor: any;
    stopOpacity: any;
    stroke: string;
    strokeDasharray: string;
    strokeDashoffset: any;
    strokeLinecap: string;
    strokeLinejoin: string;
    strokeMiterlimit: any;
    strokeOpacity: any;
    strokeWidth: any;
    styleFloat: string;
    tableLayout: string;
    textAlign: string;
    textAlignLast: string;
    textAnchor: string;
    textAutospace: string;
    textDecoration: string;
    textIndent: any;
    textJustify: string;
    textJustifyTrim: string;
    textKashida: any;
    textKashidaSpace: any;
    textOverflow: string;
    textTransform: string;
    textUnderlinePosition: string;
    top: any;
    unicodeBidi: string;
    verticalAlign: any;
    visibility: string;
    whiteSpace: string;
    widows: any;
    width: any;
    wordBreak: string;
    wordSpacing: any;
    wordWrap: string;
    writingMode: string;
    zIndex: any;
    zoom: any;
    (index: number): string;
  }

  declare class MSHTML$IHTMLCurrentStyle {
    constructor(): this;
    accelerator: string;
    backgroundAttachment: string;
    backgroundColor: any;
    backgroundImage: string;
    backgroundPositionX: any;
    backgroundPositionY: any;
    backgroundRepeat: string;
    behavior: string;
    blockDirection: string;
    borderBottomColor: any;
    borderBottomStyle: string;
    borderBottomWidth: any;
    borderCollapse: string;
    borderColor: string;
    borderLeftColor: any;
    borderLeftStyle: string;
    borderLeftWidth: any;
    borderRightColor: any;
    borderRightStyle: string;
    borderRightWidth: any;
    borderStyle: string;
    borderTopColor: any;
    borderTopStyle: string;
    borderTopWidth: any;
    borderWidth: string;
    bottom: any;
    clear: string;
    clipBottom: any;
    clipLeft: any;
    clipRight: any;
    clipTop: any;
    color: any;
    cursor: string;
    direction: string;
    display: string;
    fontFamily: string;
    fontSize: any;
    fontStyle: string;
    fontVariant: string;
    fontWeight: any;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    height: any;
    imeMode: string;
    layoutGridChar: any;
    layoutGridLine: any;
    layoutGridMode: string;
    layoutGridType: string;
    left: any;
    letterSpacing: any;
    lineBreak: string;
    lineHeight: any;
    listStyleImage: string;
    listStylePosition: string;
    listStyleType: string;
    margin: string;
    marginBottom: any;
    marginLeft: any;
    marginRight: any;
    marginTop: any;
    overflow: string;
    overflowX: string;
    overflowY: string;
    padding: string;
    paddingBottom: any;
    paddingLeft: any;
    paddingRight: any;
    paddingTop: any;
    pageBreakAfter: string;
    pageBreakBefore: string;
    position: string;
    right: any;
    rubyAlign: string;
    rubyOverhang: string;
    rubyPosition: string;
    styleFloat: string;
    tableLayout: string;
    textAlign: string;
    textAutospace: string;
    textDecoration: string;
    textIndent: any;
    textJustify: string;
    textJustifyTrim: string;
    textKashida: any;
    textTransform: string;
    top: any;
    unicodeBidi: string;
    verticalAlign: any;
    visibility: string;
    width: any;
    wordBreak: string;
    zIndex: any;
  }

  declare class MSHTML$IHTMLDataTransfer {
    constructor(): this;
    clearData(format: string): boolean;
    dropEffect: string;
    effectAllowed: string;
    getData(format: string): any;
    setData(format: string, data: any): boolean;
  }

  declare class MSHTML$IHTMLDocument {
    constructor(): this;
    Script: any;
  }

  declare class MSHTML$IHTMLDocument2 {
    constructor(): this;
    activeElement: MSHTML$IHTMLElement;
    alinkColor: any;
    all: MSHTML$IHTMLElementCollection;
    anchors: MSHTML$IHTMLElementCollection;
    applets: MSHTML$IHTMLElementCollection;
    bgColor: any;
    body: MSHTML$IHTMLElement;
    charset: string;
    clear(): void;
    close(): void;
    cookie: string;
    createElement(eTag: string): MSHTML$IHTMLElement;

    /**
     * @param bstrHref [bstrHref='']
     * @param lIndex [lIndex=-1]
     */
    createStyleSheet(
      bstrHref?: string,
      lIndex?: number
    ): MSHTML$IHTMLStyleSheet;
    defaultCharset: string;
    designMode: string;
    domain: string;
    elementFromPoint(x: number, y: number): MSHTML$IHTMLElement;
    embeds: MSHTML$IHTMLElementCollection;

    /**
     * @param showUI [showUI=false]
     */
    execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;
    execCommandShowHelp(cmdID: string): boolean;
    expando: boolean;
    fgColor: any;
    fileCreatedDate: string;
    fileModifiedDate: string;
    fileSize: string;
    fileUpdatedDate: string;
    forms: MSHTML$IHTMLElementCollection;
    frames: MSHTML$FramesCollection;
    images: MSHTML$IHTMLElementCollection;
    lastModified: string;
    linkColor: any;
    links: MSHTML$IHTMLElementCollection;
    location: MSHTML$IHTMLLocation;
    mimeType: string;
    nameProp: string;
    onafterupdate: any;
    onbeforeupdate: any;
    onclick: any;
    ondblclick: any;
    ondragstart: any;
    onerrorupdate: any;
    onhelp: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onmousedown: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onreadystatechange: any;
    onrowenter: any;
    onrowexit: any;
    onselectstart: any;

    /**
     * @param url [url='text/html']
     */
    open(url?: string, name?: any, features?: any, replace?: any): any;
    parentWindow: MSHTML$IHTMLWindow2;
    plugins: MSHTML$IHTMLElementCollection;
    protocol: string;
    queryCommandEnabled(cmdID: string): boolean;
    queryCommandIndeterm(cmdID: string): boolean;
    queryCommandState(cmdID: string): boolean;
    queryCommandSupported(cmdID: string): boolean;
    queryCommandText(cmdID: string): string;
    queryCommandValue(cmdID: string): any;
    readyState: string;
    referrer: string;
    Script: any;
    scripts: MSHTML$IHTMLElementCollection;
    security: string;
    selection: MSHTML$IHTMLSelectionObject;
    styleSheets: MSHTML$IHTMLStyleSheetsCollection;
    title: string;
    toString(): string;
    url: string;
    vlinkColor: any;
    write(...psarray: any[]): void;
    writeln(...psarray: any[]): void;
  }

  declare class MSHTML$IHTMLDocument7 {
    constructor(): this;
    adoptNode(pNodeSource: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode3;
    all: MSHTML$IHTMLElementCollection;
    body: MSHTML$IHTMLElement;
    characterSet: string;
    createAttribute(bstrAttrName: string): MSHTML$IHTMLDOMAttribute;
    createAttributeNS(
      pvarNS: any,
      bstrAttrName: string
    ): MSHTML$IHTMLDOMAttribute;
    createCDATASection(text: string): MSHTML$IHTMLDOMNode;
    createElement(bstrTag: string): MSHTML$IHTMLElement;
    createElementNS(pvarNS: any, bstrTag: string): MSHTML$IHTMLElement;
    createProcessingInstruction(
      bstrTarget: string,
      bstrData: string
    ): MSHTML$IDOMProcessingInstruction;
    defaultView: MSHTML$IHTMLWindow2;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      pvarNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getSelection(): MSHTML$IHTMLSelection;
    hasAttributes(): boolean;
    head: MSHTML$IHTMLElement;
    importNode(
      pNodeSource: MSHTML$IHTMLDOMNode,
      fDeep: boolean
    ): MSHTML$IHTMLDOMNode3;
    inputEncoding: string;
    normalize(): void;
    onabort: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    onchange: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onfocus: any;
    oninput: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onmssitemodejumplistitemremoved: any;
    onmsthumbnailclick: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onratechange: any;
    onreset: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    parentWindow: MSHTML$IHTMLWindow2;
    xmlEncoding: string;
    xmlStandalone: boolean;
    xmlVersion: string;
  }

  declare class MSHTML$IHTMLDocumentCompatibleInfo {
    constructor(): this;
    userAgent: string;
    version: string;
  }

  declare interface MSHTML$IHTMLDocumentCompatibleInfoCollection {
    item(index: number): MSHTML$IHTMLDocumentCompatibleInfo;
    +length: number;
    (index: number): MSHTML$IHTMLDocumentCompatibleInfo;
  }

  declare class MSHTML$IHTMLDOMAttribute {
    constructor(): this;
    nodeName: string;
    nodeValue: any;
    specified: boolean;
  }

  declare class MSHTML$IHTMLDOMAttribute2 {
    constructor(): this;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    attributes: any;
    childNodes: any;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMAttribute;
    expando: boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    hasChildNodes(): boolean;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    lastChild: MSHTML$IHTMLDOMNode;
    name: string;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeType: number;
    ownerDocument: any;
    parentNode: MSHTML$IHTMLDOMNode;
    previousSibling: MSHTML$IHTMLDOMNode;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    value: string;
  }

  declare interface MSHTML$IHTMLDOMChildrenCollection {
    item(index: number): any;
    +length: number;
    (index: number): any;
  }

  declare class MSHTML$IHTMLDOMImplementation {
    constructor(): this;
    hasFeature(bstrfeature: string, version?: any): boolean;
  }

  declare class MSHTML$IHTMLDOMNode {
    constructor(): this;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    attributes: any;
    childNodes: any;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    firstChild: MSHTML$IHTMLDOMNode;
    hasChildNodes(): boolean;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    lastChild: MSHTML$IHTMLDOMNode;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    parentNode: MSHTML$IHTMLDOMNode;
    previousSibling: MSHTML$IHTMLDOMNode;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
  }

  declare class MSHTML$IHTMLDOMNode3 {
    constructor(): this;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    localName: any;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    namespaceURI: any;
    prefix: any;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    textContent: any;
  }

  declare class MSHTML$IHTMLDOMRange {
    constructor(): this;
    cloneContents(): any;
    cloneRange(): MSHTML$IHTMLDOMRange;
    collapse(toStart: boolean): void;
    collapsed: boolean;
    commonAncestorContainer: MSHTML$IHTMLDOMNode;
    compareBoundaryPoints(how: number, sourceRange: any): number;
    deleteContents(): void;
    Detach(): void;
    endContainer: MSHTML$IHTMLDOMNode;
    endOffset: number;
    extractContents(): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    insertNode(newNode: any): void;
    selectNode(refNode: any): void;
    selectNodeContents(refNode: any): void;
    setEnd(refNode: any, offset: number): void;
    setEndAfter(refNode: any): void;
    setEndBefore(refNode: any): void;
    setStart(refNode: any, offset: number): void;
    setStartAfter(refNode: any): void;
    setStartBefore(refNode: any): void;
    startContainer: MSHTML$IHTMLDOMNode;
    startOffset: number;
    surroundContents(newParent: any): void;
    toString(): string;
  }

  declare class MSHTML$IHTMLElement {
    constructor(): this;
    all: any;
    children: any;
    className: string;
    click(): void;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    document: any;
    filters: MSHTML$IHTMLFiltersCollection;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    id: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    isTextEdit: boolean;
    lang: string;
    language: string;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onafterupdate: any;
    onbeforeupdate: any;
    onclick: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondragstart: any;
    onerrorupdate: any;
    onfilterchange: any;
    onhelp: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onmousedown: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onrowenter: any;
    onrowexit: any;
    onselectstart: any;
    outerHTML: string;
    outerText: string;
    parentElement: MSHTML$IHTMLElement;
    parentTextEdit: MSHTML$IHTMLElement;
    recordNumber: any;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    scrollIntoView(varargStart?: any): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    sourceIndex: number;
    style: MSHTML$IHTMLStyle;
    tagName: string;
    title: string;
    toString(): string;
  }

  declare class MSHTML$IHTMLElement2 {
    constructor(): this;
    accessKey: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    attachEvent(event: string, pdisp: any): boolean;
    behaviorUrns: any;
    blur(): void;
    canHaveChildren: boolean;
    clearAttributes(): void;
    clientHeight: number;
    clientLeft: number;
    clientTop: number;
    clientWidth: number;
    componentFromPoint(x: number, y: number): string;
    createControlRange(): any;
    currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    doScroll(component?: any): void;
    focus(): void;
    getAdjacentText(where: string): string;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement): void;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onblur: any;
    oncellchange: any;
    oncontextmenu: any;
    oncopy: any;
    oncut: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondrop: any;
    onfocus: any;
    onlosecapture: any;
    onpaste: any;
    onpropertychange: any;
    onreadystatechange: any;
    onresize: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    readyState: any;
    releaseCapture(): void;
    removeBehavior(cookie: number): boolean;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;
    replaceAdjacentText(where: string, newText: string): string;
    runtimeStyle: MSHTML$IHTMLStyle;
    scopeName: string;
    scrollHeight: number;
    scrollLeft: number;
    scrollTop: number;
    scrollWidth: number;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    tabIndex: number;
    tagUrn: string;
  }

  declare interface MSHTML$IHTMLElementCollection {
    item(name?: any, index?: any): any;
    length: number;
    tags(tagName: any): any;
    toString(): string;
    (name?: any, index?: any): any;
  }

  declare class MSHTML$IHTMLEventObj {
    constructor(): this;
    altKey: boolean;
    button: number;
    cancelBubble: boolean;
    clientX: number;
    clientY: number;
    ctrlKey: boolean;
    fromElement: MSHTML$IHTMLElement;
    keyCode: number;
    offsetX: number;
    offsetY: number;
    qualifier: string;
    reason: number;
    returnValue: any;
    screenX: number;
    screenY: number;
    shiftKey: boolean;
    srcElement: MSHTML$IHTMLElement;
    srcFilter: any;
    toElement: MSHTML$IHTMLElement;
    type: string;
    x: number;
    y: number;
  }

  declare interface MSHTML$IHTMLFiltersCollection {
    item(pvarIndex: any): any;
    +length: number;
    (pvarIndex: any): any;
  }

  declare interface MSHTML$IHTMLFormElement {
    action: string;
    dir: string;
    +elements: any;
    encoding: string;
    item(name?: any, index?: any): any;
    length: number;
    method: string;
    name: string;
    onreset: any;
    onsubmit: any;
    reset(): void;
    submit(): void;
    tags(tagName: any): any;
    target: string;
    (name?: any, index?: any): any;
  }

  declare class MSHTML$IHTMLFrameBase {
    constructor(): this;
    border: any;
    frameBorder: string;
    frameSpacing: any;
    marginHeight: any;
    marginWidth: any;
    name: string;
    noResize: boolean;
    scrolling: string;
    src: string;
  }

  declare class MSHTML$IHTMLImgElement {
    constructor(): this;
    align: string;
    alt: string;
    border: any;
    complete: boolean;
    dynsrc: string;
    fileCreatedDate: string;
    fileModifiedDate: string;
    fileSize: string;
    fileUpdatedDate: string;
    height: number;
    href: string;
    hspace: number;
    isMap: boolean;
    loop: any;
    lowsrc: string;
    mimeType: string;
    name: string;
    nameProp: string;
    onabort: any;
    onerror: any;
    onload: any;
    protocol: string;
    readyState: string;
    src: string;
    start: string;
    useMap: string;
    vrml: string;
    vspace: number;
    width: number;
  }

  declare class MSHTML$IHTMLLocation {
    constructor(): this;
    assign(bstr: string): void;
    hash: string;
    host: string;
    hostname: string;
    href: string;
    pathname: string;
    port: string;
    protocol: string;

    /**
     * @param flag [flag=false]
     */
    reload(flag?: boolean): void;
    replace(bstr: string): void;
    search: string;
    toString(): string;
  }

  declare class MSHTML$IHTMLMediaError {
    constructor(): this;
    code: number;
  }

  declare class MSHTML$IHTMLMSCSSKeyframeRule {
    constructor(): this;
    keyText: string;
    style: MSHTML$IHTMLRuleStyle;
  }

  declare class MSHTML$IHTMLOptionElement {
    constructor(): this;
    defaultSelected: boolean;
    form: MSHTML$IHTMLFormElement;
    index: number;
    selected: boolean;
    text: string;
    value: string;
  }

  declare class MSHTML$IHTMLPerformanceNavigation {
    constructor(): this;
    redirectCount: number;
    toJSON(): any;
    toString(): string;
    type: number;
  }

  declare class MSHTML$IHTMLPerformanceTiming {
    constructor(): this;
    connectEnd: number;
    connectStart: number;
    domainLookupEnd: number;
    domainLookupStart: number;
    domComplete: number;
    domContentLoadedEventEnd: number;
    domContentLoadedEventStart: number;
    domInteractive: number;
    domLoading: number;
    fetchStart: number;
    loadEventEnd: number;
    loadEventStart: number;
    msFirstPaint: number;
    navigationStart: number;
    redirectEnd: number;
    redirectStart: number;
    requestStart: number;
    responseEnd: number;
    responseStart: number;
    toJSON(): any;
    toString(): string;
    unloadEventEnd: number;
    unloadEventStart: number;
  }

  declare class MSHTML$IHTMLPluginsCollection {
    constructor(): this;
    length: number;

    /**
     * @param reload [reload=false]
     */
    refresh(reload?: boolean): void;
  }

  declare class MSHTML$IHTMLRect {
    constructor(): this;
    bottom: number;
    left: number;
    right: number;
    top: number;
  }

  declare interface MSHTML$IHTMLRectCollection {
    item(pvarIndex: any): any;
    +length: number;
    (pvarIndex: any): any;
  }

  declare class MSHTML$IHTMLRenderStyle {
    constructor(): this;
    defaultTextSelection: string;
    renderingPriority: number;
    textBackgroundColor: any;
    textColor: any;
    textDecoration: string;
    textDecorationColor: any;
    textEffect: string;
    textLineThroughStyle: string;
    textUnderlineStyle: string;
  }

  declare class MSHTML$IHTMLRuleStyle {
    constructor(): this;
    background: string;
    backgroundAttachment: string;
    backgroundColor: any;
    backgroundImage: string;
    backgroundPosition: string;
    backgroundPositionX: any;
    backgroundPositionY: any;
    backgroundRepeat: string;
    border: string;
    borderBottom: string;
    borderBottomColor: any;
    borderBottomStyle: string;
    borderBottomWidth: any;
    borderColor: string;
    borderLeft: string;
    borderLeftColor: any;
    borderLeftStyle: string;
    borderLeftWidth: any;
    borderRight: string;
    borderRightColor: any;
    borderRightStyle: string;
    borderRightWidth: any;
    borderStyle: string;
    borderTop: string;
    borderTopColor: any;
    borderTopStyle: string;
    borderTopWidth: any;
    borderWidth: string;
    clear: string;
    clip: string;
    color: any;
    cssText: string;
    cursor: string;
    display: string;
    filter: string;
    font: string;
    fontFamily: string;
    fontSize: any;
    fontStyle: string;
    fontVariant: string;
    fontWeight: string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    height: any;
    left: any;
    letterSpacing: any;
    lineHeight: any;
    listStyle: string;
    listStyleImage: string;
    listStylePosition: string;
    listStyleType: string;
    margin: string;
    marginBottom: any;
    marginLeft: any;
    marginRight: any;
    marginTop: any;
    overflow: string;
    padding: string;
    paddingBottom: any;
    paddingLeft: any;
    paddingRight: any;
    paddingTop: any;
    pageBreakAfter: string;
    pageBreakBefore: string;
    position: string;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    styleFloat: string;
    textAlign: string;
    textDecoration: string;
    textDecorationBlink: boolean;
    textDecorationLineThrough: boolean;
    textDecorationNone: boolean;
    textDecorationOverline: boolean;
    textDecorationUnderline: boolean;
    textIndent: any;
    textTransform: string;
    top: any;
    verticalAlign: any;
    visibility: string;
    whiteSpace: string;
    width: any;
    wordSpacing: any;
    zIndex: any;
  }

  declare class MSHTML$IHTMLScreen {
    constructor(): this;
    availHeight: number;
    availWidth: number;
    bufferDepth: number;
    colorDepth: number;
    fontSmoothingEnabled: boolean;
    height: number;
    updateInterval: number;
    width: number;
  }

  declare class MSHTML$IHTMLSelection {
    constructor(): this;
    addRange(range: any): void;
    anchorNode: MSHTML$IHTMLDOMNode;
    anchorOffset: number;
    collapse(parentNode: any, offfset: number): void;
    collapseToEnd(): void;
    collapseToStart(): void;
    deleteFromDocument(): void;
    focusNode: MSHTML$IHTMLDOMNode;
    focusOffset: number;
    getRangeAt(index: number): MSHTML$IHTMLDOMRange;
    isCollapsed: boolean;
    rangeCount: number;
    removeAllRanges(): void;
    removeRange(range: any): void;
    selectAllChildren(parentNode: any): void;
    toString(): string;
  }

  declare class MSHTML$IHTMLSelectionObject {
    constructor(): this;
    clear(): void;
    createRange(): any;
    empty(): void;
    type: string;
  }

  declare class MSHTML$IHTMLStorage {
    constructor(): this;
    clear(): void;
    getItem(bstrKey: string): any;
    key(lIndex: number): string;
    length: number;
    remainingSpace: number;
    removeItem(bstrKey: string): void;
    setItem(bstrKey: string, bstrValue: string): void;
  }

  declare class MSHTML$IHTMLStyle {
    constructor(): this;
    background: string;
    backgroundAttachment: string;
    backgroundColor: any;
    backgroundImage: string;
    backgroundPosition: string;
    backgroundPositionX: any;
    backgroundPositionY: any;
    backgroundRepeat: string;
    border: string;
    borderBottom: string;
    borderBottomColor: any;
    borderBottomStyle: string;
    borderBottomWidth: any;
    borderColor: string;
    borderLeft: string;
    borderLeftColor: any;
    borderLeftStyle: string;
    borderLeftWidth: any;
    borderRight: string;
    borderRightColor: any;
    borderRightStyle: string;
    borderRightWidth: any;
    borderStyle: string;
    borderTop: string;
    borderTopColor: any;
    borderTopStyle: string;
    borderTopWidth: any;
    borderWidth: string;
    clear: string;
    clip: string;
    color: any;
    cssText: string;
    cursor: string;
    display: string;
    filter: string;
    font: string;
    fontFamily: string;
    fontSize: any;
    fontStyle: string;
    fontVariant: string;
    fontWeight: string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    height: any;
    left: any;
    letterSpacing: any;
    lineHeight: any;
    listStyle: string;
    listStyleImage: string;
    listStylePosition: string;
    listStyleType: string;
    margin: string;
    marginBottom: any;
    marginLeft: any;
    marginRight: any;
    marginTop: any;
    overflow: string;
    padding: string;
    paddingBottom: any;
    paddingLeft: any;
    paddingRight: any;
    paddingTop: any;
    pageBreakAfter: string;
    pageBreakBefore: string;
    pixelHeight: number;
    pixelLeft: number;
    pixelTop: number;
    pixelWidth: number;
    posHeight: number;
    position: string;
    posLeft: number;
    posTop: number;
    posWidth: number;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    styleFloat: string;
    textAlign: string;
    textDecoration: string;
    textDecorationBlink: boolean;
    textDecorationLineThrough: boolean;
    textDecorationNone: boolean;
    textDecorationOverline: boolean;
    textDecorationUnderline: boolean;
    textIndent: any;
    textTransform: string;
    top: any;
    toString(): string;
    verticalAlign: any;
    visibility: string;
    whiteSpace: string;
    width: any;
    wordSpacing: any;
    zIndex: any;
  }

  declare class MSHTML$IHTMLStyleMedia {
    constructor(): this;
    matchMedium(mediaQuery: string): boolean;
    type: string;
  }

  declare class MSHTML$IHTMLStyleSheet {
    constructor(): this;

    /**
     * @param lIndex [lIndex=-1]
     */
    addImport(bstrURL: string, lIndex?: number): number;

    /**
     * @param lIndex [lIndex=-1]
     */
    addRule(bstrSelector: string, bstrStyle: string, lIndex?: number): number;
    cssText: string;
    disabled: boolean;
    href: string;
    id: string;
    imports: MSHTML$IHTMLStyleSheetsCollection;
    media: string;
    owningElement: MSHTML$IHTMLElement;
    parentStyleSheet: MSHTML$IHTMLStyleSheet;
    readOnly: boolean;
    removeImport(lIndex: number): void;
    removeRule(lIndex: number): void;
    rules: MSHTML$IHTMLStyleSheetRulesCollection;
    title: string;
    type: string;
  }

  declare class MSHTML$IHTMLStyleSheetPage {
    constructor(): this;
    pseudoClass: string;
    selector: string;
  }

  declare interface MSHTML$IHTMLStyleSheetPagesCollection {
    item(index: number): MSHTML$IHTMLStyleSheetPage;
    +length: number;
    (index: number): MSHTML$IHTMLStyleSheetPage;
  }

  declare class MSHTML$IHTMLStyleSheetRule {
    constructor(): this;
    readOnly: boolean;
    selectorText: string;
    style: MSHTML$IHTMLRuleStyle;
  }

  declare interface MSHTML$IHTMLStyleSheetRulesAppliedCollection {
    item(index: number): MSHTML$IHTMLStyleSheetRule;
    +length: number;
    propertyAppliedBy(name: string): MSHTML$IHTMLStyleSheetRule;
    propertyAppliedTrace(
      name: string,
      index: number
    ): MSHTML$IHTMLStyleSheetRule;
    propertyAppliedTraceLength(name: string): number;
    (index: number): MSHTML$IHTMLStyleSheetRule;
  }

  declare interface MSHTML$IHTMLStyleSheetRulesCollection {
    item(index: number): MSHTML$IHTMLStyleSheetRule;
    +length: number;
    (index: number): MSHTML$IHTMLStyleSheetRule;
  }

  declare interface MSHTML$IHTMLStyleSheetsCollection {
    item(pvarIndex: any): any;
    +length: number;
    (pvarIndex: any): any;
  }

  declare class MSHTML$IHTMLTableCaption {
    constructor(): this;
    align: string;
    vAlign: string;
  }

  declare class MSHTML$IHTMLTableSection {
    constructor(): this;
    align: string;
    bgColor: any;

    /**
     * @param index [index=-1]
     */
    deleteRow(index?: number): void;

    /**
     * @param index [index=-1]
     */
    insertRow(index?: number): any;
    rows: MSHTML$IHTMLElementCollection;
    vAlign: string;
  }

  declare class MSHTML$IHTMLTimeRanges {
    constructor(): this;
    end(index: number): number;
    length: number;
    start(index: number): number;
  }

  declare class MSHTML$IHTMLTxtRange {
    constructor(): this;

    /**
     * @param start [start=true]
     */
    collapse(start?: boolean): void;
    compareEndPoints(how: string, sourceRange: MSHTML$IHTMLTxtRange): number;
    duplicate(): MSHTML$IHTMLTxtRange;

    /**
     * @param showUI [showUI=false]
     */
    execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;
    execCommandShowHelp(cmdID: string): boolean;
    expand(Unit: string): boolean;

    /**
     * @param Count [Count=1073741823]
     * @param flags [flags=0]
     */
    findText(String: string, Count?: number, flags?: number): boolean;
    getBookmark(): string;
    htmlText: string;
    inRange(range: MSHTML$IHTMLTxtRange): boolean;
    isEqual(range: MSHTML$IHTMLTxtRange): boolean;

    /**
     * @param Count [Count=1]
     */
    move(Unit: string, Count?: number): number;

    /**
     * @param Count [Count=1]
     */
    moveEnd(Unit: string, Count?: number): number;

    /**
     * @param Count [Count=1]
     */
    moveStart(Unit: string, Count?: number): number;
    moveToBookmark(Bookmark: string): boolean;
    moveToElementText(element: MSHTML$IHTMLElement): void;
    moveToPoint(x: number, y: number): void;
    parentElement(): MSHTML$IHTMLElement;
    pasteHTML(html: string): void;
    queryCommandEnabled(cmdID: string): boolean;
    queryCommandIndeterm(cmdID: string): boolean;
    queryCommandState(cmdID: string): boolean;
    queryCommandSupported(cmdID: string): boolean;
    queryCommandText(cmdID: string): string;
    queryCommandValue(cmdID: string): any;

    /**
     * @param fStart [fStart=true]
     */
    scrollIntoView(fStart?: boolean): void;
    select(): void;
    setEndPoint(how: string, sourceRange: MSHTML$IHTMLTxtRange): void;
    text: string;
  }

  declare interface MSHTML$IHTMLWindow2 {
    /**
     * @param message [message='']
     */
    alert(message?: string): void;
    blur(): void;
    clearInterval(timerID: number): void;
    clearTimeout(timerID: number): void;
    +clientInformation: MSHTML$IOmNavigator;
    close(): void;
    +closed: boolean;

    /**
     * @param message [message='']
     */
    confirm(message?: string): boolean;
    defaultStatus: string;
    +document: MSHTML$IHTMLDocument2;
    +event: MSHTML$IHTMLEventObj;

    /**
     * @param language [language='JScript']
     */
    execScript(code: string, language?: string): any;
    +external: any;
    focus(): void;
    +frames: MSHTML$FramesCollection;
    +history: MSHTML$IOmHistory;
    +Image: MSHTML$HTMLImageElementFactory;
    item(pvarIndex: any): any;
    +length: number;
    +location: MSHTML$IHTMLLocation;
    moveBy(x: number, y: number): void;
    moveTo(x: number, y: number): void;
    name: string;
    navigate(url: string): void;
    +navigator: MSHTML$IOmNavigator;
    offscreenBuffering: any;
    onbeforeunload: any;
    onblur: any;
    onerror: any;
    onfocus: any;
    onhelp: any;
    onload: any;
    onresize: any;
    onscroll: any;
    onunload: any;

    /**
     * @param url [url='']
     * @param name [name='']
     * @param features [features='']
     * @param replace [replace=false]
     */
    open(
      url?: string,
      name?: string,
      features?: string,
      replace?: boolean
    ): MSHTML$IHTMLWindow2;
    opener: any;
    +Option: MSHTML$HTMLOptionElementFactory;
    +parent: MSHTML$IHTMLWindow2;

    /**
     * @param message [message='']
     * @param defstr [defstr='undefined']
     */
    prompt(message?: string, defstr?: string): any;
    resizeBy(x: number, y: number): void;
    resizeTo(x: number, y: number): void;
    +screen: MSHTML$IHTMLScreen;
    scroll(x: number, y: number): void;
    scrollBy(x: number, y: number): void;
    scrollTo(x: number, y: number): void;
    +self: MSHTML$IHTMLWindow2;
    setInterval(expression: string, msec: number, language?: any): number;
    setTimeout(expression: string, msec: number, language?: any): number;

    /**
     * @param features [features='']
     */
    showHelp(helpURL: string, helpArg: any, features?: string): void;
    showModalDialog(dialog: string, varArgIn?: any, varOptions?: any): any;
    status: string;
    +top: MSHTML$IHTMLWindow2;
    toString(): string;
    +window: MSHTML$IHTMLWindow2;
    (pvarIndex: any): any;
  }

  declare class MSHTML$IHTMLXDomainRequest {
    constructor(): this;
    abort(): void;
    contentType: string;
    onerror: any;
    onload: any;
    onprogress: any;
    ontimeout: any;
    open(bstrMethod: string, bstrURL: string): void;
    responseText: string;
    send(varBody?: any): void;
    timeout: number;
  }

  declare class MSHTML$IHTMLXMLHttpRequest {
    constructor(): this;
    abort(): void;
    getAllResponseHeaders(): string;
    getResponseHeader(bstrHeader: string): string;
    onreadystatechange: any;
    open(
      bstrMethod: string,
      bstrURL: string,
      varAsync: any,
      varUser?: any,
      varPassword?: any
    ): void;
    readyState: number;
    responseBody: any;
    responseText: string;
    responseXML: any;
    send(varBody?: any): void;
    setRequestHeader(bstrHeader: string, bstrValue: string): void;
    status: number;
    statusText: string;
  }

  declare class MSHTML$IOmHistory {
    constructor(): this;
    back(pvargdistance?: any): void;
    forward(pvargdistance?: any): void;
    go(pvargdistance?: any): void;
    length: number;
  }

  declare class MSHTML$IOmNavigator {
    constructor(): this;
    appCodeName: string;
    appMinorVersion: string;
    appName: string;
    appVersion: string;
    browserLanguage: string;
    connectionSpeed: number;
    cookieEnabled: boolean;
    cpuClass: string;
    javaEnabled(): boolean;
    mimeTypes: MSHTML$CMimeTypes;
    onLine: boolean;
    opsProfile: MSHTML$COpsProfile;
    platform: string;
    plugins: MSHTML$IHTMLPluginsCollection;
    systemLanguage: string;
    taintEnabled(): boolean;
    toString(): string;
    userAgent: string;
    userLanguage: string;
    userProfile: MSHTML$COpsProfile;
  }

  declare class MSHTML$IRulesApplied {
    constructor(): this;
    appliedRules: MSHTML$IHTMLStyleSheetRulesAppliedCollection;
    element: MSHTML$IHTMLElement;
    hasInheritableProperty(): boolean;
    inlineStyles: MSHTML$IHTMLStyle;
    propertyIsInheritable(name: string): boolean;
    propertyIsInline(name: string): boolean;
  }

  declare class MSHTML$ISVGElement {
    constructor(): this;
    focusable: MSHTML$SVGAnimatedEnumeration;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
  }

  declare class MSHTML$ISVGElementInstance {
    constructor(): this;
    childNodes: MSHTML$ISVGElementInstanceList;
    correspondingElement: MSHTML$ISVGElement;
    correspondingUseElement: MSHTML$ISVGUseElement;
    firstChild: MSHTML$ISVGElementInstance;
    lastChild: MSHTML$ISVGElementInstance;
    nextSibling: MSHTML$ISVGElementInstance;
    parentNode: MSHTML$ISVGElementInstance;
    previousSibling: MSHTML$ISVGElementInstance;
  }

  declare class MSHTML$ISVGElementInstanceList {
    constructor(): this;
    item(index: number): MSHTML$ISVGElementInstance;
    length: number;
  }

  declare class MSHTML$ISVGPathSegArcAbs {
    constructor(): this;
    angle: number;
    largeArcFlag: boolean;
    r1: number;
    r2: number;
    sweepFlag: boolean;
    x: number;
    y: number;
  }

  declare class MSHTML$ISVGPathSegArcRel {
    constructor(): this;
    angle: number;
    largeArcFlag: boolean;
    r1: number;
    r2: number;
    sweepFlag: boolean;
    x: number;
    y: number;
  }

  declare class MSHTML$ISVGPathSegClosePath {
    constructor(): this;
  }

  declare class MSHTML$ISVGPathSegCurvetoCubicAbs {
    constructor(): this;
    x: number;
    x1: number;
    x2: number;
    y: number;
    y1: number;
    y2: number;
  }

  declare class MSHTML$ISVGPathSegCurvetoCubicRel {
    constructor(): this;
    x: number;
    x1: number;
    x2: number;
    y: number;
    y1: number;
    y2: number;
  }

  declare class MSHTML$ISVGPathSegCurvetoCubicSmoothAbs {
    constructor(): this;
    x: number;
    x2: number;
    y: number;
    y2: number;
  }

  declare class MSHTML$ISVGPathSegCurvetoCubicSmoothRel {
    constructor(): this;
    x: number;
    x2: number;
    y: number;
    y2: number;
  }

  declare class MSHTML$ISVGPathSegCurvetoQuadraticAbs {
    constructor(): this;
    x: number;
    x1: number;
    y: number;
    y1: number;
  }

  declare class MSHTML$ISVGPathSegCurvetoQuadraticRel {
    constructor(): this;
    x: number;
    x1: number;
    y: number;
    y1: number;
  }

  declare class MSHTML$ISVGPathSegCurvetoQuadraticSmoothAbs {
    constructor(): this;
    x: number;
    y: number;
  }

  declare class MSHTML$ISVGPathSegCurvetoQuadraticSmoothRel {
    constructor(): this;
    x: number;
    y: number;
  }

  declare class MSHTML$ISVGPathSegLinetoAbs {
    constructor(): this;
    x: number;
    y: number;
  }

  declare class MSHTML$ISVGPathSegLinetoHorizontalAbs {
    constructor(): this;
    x: number;
  }

  declare class MSHTML$ISVGPathSegLinetoHorizontalRel {
    constructor(): this;
    x: number;
  }

  declare class MSHTML$ISVGPathSegLinetoRel {
    constructor(): this;
    x: number;
    y: number;
  }

  declare class MSHTML$ISVGPathSegLinetoVerticalAbs {
    constructor(): this;
    y: number;
  }

  declare class MSHTML$ISVGPathSegLinetoVerticalRel {
    constructor(): this;
    y: number;
  }

  declare class MSHTML$ISVGPathSegMovetoAbs {
    constructor(): this;
    x: number;
    y: number;
  }

  declare class MSHTML$ISVGPathSegMovetoRel {
    constructor(): this;
    x: number;
    y: number;
  }

  declare class MSHTML$ISVGSVGElement {
    constructor(): this;
    animationsPaused(): boolean;
    checkEnclosure(element: MSHTML$ISVGElement, rect: MSHTML$SVGRect): boolean;
    checkIntersection(
      element: MSHTML$ISVGElement,
      rect: MSHTML$SVGRect
    ): boolean;
    contentScriptType: string;
    contentStyleType: string;
    createSVGAngle(): MSHTML$SVGAngle;
    createSVGLength(): MSHTML$SVGLength;
    createSVGMatrix(): MSHTML$SVGMatrix;
    createSVGNumber(): MSHTML$SVGNumber;
    createSVGPoint(): MSHTML$SVGPoint;
    createSVGRect(): MSHTML$SVGRect;
    createSVGTransform(): MSHTML$SVGTransform;
    createSVGTransformFromMatrix(matrix: MSHTML$SVGMatrix): MSHTML$SVGTransform;
    currentScale: number;
    currentTranslate: MSHTML$SVGPoint;
    currentView: MSHTML$ISVGViewSpec;
    deselectAll(): void;
    forceRedraw(): void;
    getCurrentTime(): number;
    getElementById(elementId: string): MSHTML$IHTMLElement;
    getEnclosureList(
      rect: MSHTML$SVGRect,
      referenceElement: MSHTML$ISVGElement
    ): any;
    getIntersectionList(
      rect: MSHTML$SVGRect,
      referenceElement: MSHTML$ISVGElement
    ): any;
    height: MSHTML$SVGAnimatedLength;
    pauseAnimations(): void;
    pixelUnitToMillimeterX: number;
    pixelUnitToMillimeterY: number;
    screenPixelToMillimeterX: number;
    screenPixelToMillimeterY: number;
    setCurrentTime(seconds: number): void;
    suspendRedraw(maxWaitMilliseconds: number): number;
    unpauseAnimations(): void;
    unsuspendRedraw(suspendHandeID: number): void;
    unsuspendRedrawAll(): void;
    useCurrentView: boolean;
    viewport: MSHTML$SVGRect;
    width: MSHTML$SVGAnimatedLength;
    x: MSHTML$SVGAnimatedLength;
    y: MSHTML$SVGAnimatedLength;
  }

  declare class MSHTML$ISVGUseElement {
    constructor(): this;
    animatedInstanceRoot: MSHTML$ISVGElementInstance;
    height: MSHTML$SVGAnimatedLength;
    instanceRoot: MSHTML$ISVGElementInstance;
    width: MSHTML$SVGAnimatedLength;
    x: MSHTML$SVGAnimatedLength;
    y: MSHTML$SVGAnimatedLength;
  }

  declare class MSHTML$ISVGViewSpec {
    constructor(): this;
  }

  declare class MSHTML$IWebGeocoordinates {
    constructor(): this;
    accuracy: number;
    altitude: any;
    altitudeAccuracy: any;
    heading: any;
    latitude: number;
    longitude: number;
    speed: any;
  }

  declare class MSHTML$IWebGeolocation {
    constructor(): this;
    clearWatch(watchId: number): void;
    getCurrentPosition(
      successCallback: any,
      errorCallback?: any,
      options?: any
    ): void;
    watchPosition(
      successCallback: any,
      errorCallback?: any,
      options?: any
    ): number;
  }

  declare class MSHTML$NodeIterator {
    constructor(): this;
    Detach(): void;
    expandEntityReferences: boolean;
    filter: any;
    nextNode(): any;
    previousNode(): any;
    root: any;
    whatToShow: number;
  }

  declare class MSHTML$OldHTMLDocument {
    constructor(): this;
    activeElement: MSHTML$IHTMLElement;
    addEventListener(type: string, listener: any, useCapture: boolean): void;
    adoptNode(pNodeSource: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode3;
    alinkColor: any;
    all: MSHTML$IHTMLElementCollection;
    anchors: MSHTML$IHTMLElementCollection;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    applets: MSHTML$IHTMLElementCollection;
    attachEvent(event: string, pdisp: any): boolean;
    attributes: any;
    bgColor: any;
    body: MSHTML$IHTMLElement;
    characterSet: string;
    charset: string;
    childNodes: any;
    clear(): void;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    close(): void;
    compareDocumentPosition(otherNode: MSHTML$IHTMLDOMNode): number;
    compatible: MSHTML$IHTMLDocumentCompatibleInfoCollection;
    compatMode: string;
    //constructor: any;
    cookie: string;
    createAttribute(bstrAttrName: string): MSHTML$IHTMLDOMAttribute;
    createAttributeNS(
      pvarNS: any,
      bstrAttrName: string
    ): MSHTML$IHTMLDOMAttribute;
    createCDATASection(text: string): MSHTML$IHTMLDOMNode;
    createComment(bstrData: string): MSHTML$IHTMLDOMNode;
    createDocumentFragment(): MSHTML$IHTMLDocument2;
    createDocumentFromUrl(
      bstrURL: string,
      bstrOptions: string
    ): MSHTML$IHTMLDocument2;
    createElement(eTag: string): MSHTML$IHTMLElement;
    createElementNS(pvarNS: any, bstrTag: string): MSHTML$IHTMLElement;
    createEvent(eventType: string): MSHTML$IDOMEvent;
    CreateEventObject(pvarEventObject?: any): MSHTML$IHTMLEventObj;
    createNodeIterator(
      pRootNode: any,
      ulWhatToShow: number,
      pFilter: any,
      fEntityReferenceExpansion: boolean
    ): MSHTML$IDOMNodeIterator;
    createProcessingInstruction(
      bstrTarget: string,
      bstrData: string
    ): MSHTML$IDOMProcessingInstruction;
    createRange(): MSHTML$IHTMLDOMRange;
    createRenderStyle(v: string): MSHTML$IHTMLRenderStyle;

    /**
     * @param bstrHref [bstrHref='']
     * @param lIndex [lIndex=-1]
     */
    createStyleSheet(
      bstrHref?: string,
      lIndex?: number
    ): MSHTML$IHTMLStyleSheet;
    createTextNode(text: string): MSHTML$IHTMLDOMNode;
    createTreeWalker(
      pRootNode: any,
      ulWhatToShow: number,
      pFilter: any,
      fEntityReferenceExpansion: boolean
    ): MSHTML$IDOMTreeWalker;
    defaultCharset: string;
    defaultView: MSHTML$IHTMLWindow2;
    designMode: string;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    dispatchEvent(evt: MSHTML$IDOMEvent): boolean;
    doctype: MSHTML$IHTMLDOMNode;
    documentElement: MSHTML$IHTMLElement;
    documentMode: any;
    domain: string;
    elementFromPoint(x: number, y: number): MSHTML$IHTMLElement;
    elementsFromPoint(x: number, y: number): MSHTML$IHTMLDOMChildrenCollection;
    elementsFromRect(
      left: number,
      top: number,
      width: number,
      height: number
    ): MSHTML$IHTMLDOMChildrenCollection;
    embeds: MSHTML$IHTMLElementCollection;

    /**
     * @param showUI [showUI=false]
     */
    execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;
    execCommandShowHelp(cmdID: string): boolean;
    expando: boolean;
    fgColor: any;
    fileCreatedDate: string;
    fileModifiedDate: string;
    fileSize: string;
    fileUpdatedDate: string;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    forms: MSHTML$IHTMLElementCollection;
    frames: MSHTML$FramesCollection;
    getElementById(v: string): MSHTML$IHTMLElement;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      pvarNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getSelection(): MSHTML$IHTMLSelection;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hasFocus(): boolean;
    head: MSHTML$IHTMLElement;
    ie8_getElementById(bstrId: string): MSHTML$IHTMLElement2;
    ie9_all: MSHTML$IHTMLElementCollection;
    ie9_appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_body: MSHTML$IHTMLElement;
    ie9_createAttribute(bstrAttrName: string): MSHTML$IHTMLDOMAttribute;
    ie9_createElement(bstrTag: string): MSHTML$IHTMLElement;
    ie9_insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    ie9_parentWindow: MSHTML$IHTMLWindow2;
    ie9_removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    ie9_replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    images: MSHTML$IHTMLElementCollection;
    implementation: MSHTML$IHTMLDOMImplementation;
    importNode(
      pNodeSource: MSHTML$IHTMLDOMNode,
      fDeep: boolean
    ): MSHTML$IHTMLDOMNode3;
    inputEncoding: string;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    isDefaultNamespace(pvarNamespace: any): boolean;
    isEqualNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSameNode(otherNode: MSHTML$IHTMLDOMNode3): boolean;
    isSupported(feature: string, version: any): boolean;
    lastChild: MSHTML$IHTMLDOMNode;
    lastModified: string;
    linkColor: any;
    links: MSHTML$IHTMLElementCollection;
    localName: any;
    location: MSHTML$IHTMLLocation;
    lookupNamespaceURI(pvarPrefix: any): any;
    lookupPrefix(pvarNamespaceURI: any): any;
    media: string;
    mimeType: string;
    msCapsLockWarningOff: boolean;
    nameProp: string;
    namespaces: any;
    namespaceURI: any;
    nextSibling: MSHTML$IHTMLDOMNode;
    nodeName: string;
    nodeType: number;
    nodeValue: any;
    normalize(): void;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onmousedown: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmscontentzoom: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsinertiastart: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmssitemodejumplistitemremoved: any;
    onmsthumbnailclick: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectionchange: any;
    onselectstart: any;
    onstalled: any;
    onstop: any;
    onstorage: any;
    onstoragecommit: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;

    /**
     * @param url [url='text/html']
     */
    open(url?: string, name?: any, features?: any, replace?: any): any;
    ownerDocument: any;
    parentNode: MSHTML$IHTMLDOMNode;
    parentWindow: MSHTML$IHTMLWindow2;
    plugins: MSHTML$IHTMLElementCollection;
    prefix: any;
    previousSibling: MSHTML$IHTMLDOMNode;
    protocol: string;
    queryCommandEnabled(cmdID: string): boolean;
    queryCommandIndeterm(cmdID: string): boolean;
    queryCommandState(cmdID: string): boolean;
    queryCommandSupported(cmdID: string): boolean;
    queryCommandText(cmdID: string): string;
    queryCommandValue(cmdID: string): any;
    querySelector(v: string): MSHTML$IHTMLElement;
    querySelectorAll(v: string): MSHTML$IHTMLDOMChildrenCollection;
    readyState: string;

    /**
     * @param fForce [fForce=false]
     */
    recalc(fForce?: boolean): void;
    referrer: string;
    releaseCapture(): void;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeEventListener(type: string, listener: any, useCapture: boolean): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    rootElement: MSHTML$ISVGSVGElement;
    Script: any;
    scripts: MSHTML$IHTMLElementCollection;
    security: string;
    selection: MSHTML$IHTMLSelectionObject;
    styleSheets: MSHTML$IHTMLStyleSheetsCollection;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    textContent: any;
    title: string;
    toString(): string;
    uniqueID: string;
    updateSettings(): void;
    url: string;
    URLUnencoded: string;
    vlinkColor: any;
    write(...psarray: any[]): void;
    writeln(...psarray: any[]): void;
    xmlEncoding: string;
    xmlStandalone: boolean;
    xmlVersion: string;
  }

  declare interface MSHTML$OldHTMLFormElement {
    acceptCharset: string;
    accessKey: string;
    action: string;
    addBehavior(bstrURL: string, pvarFactory?: any): number;
    addFilter(pUnk: any): void;
    +all: any;
    appendChild(newChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    appendItemSeparator(): void;

    /**
     * @param name [name='']
     * @param filename [filename='']
     */
    appendNameFilePair(name?: string, filename?: string): void;

    /**
     * @param name [name='']
     * @param value [value='']
     */
    appendNameValuePair(name?: string, value?: string): void;
    applyElement(
      apply: MSHTML$IHTMLElement,
      where: string
    ): MSHTML$IHTMLElement;
    ariaActivedescendant: string;
    ariaBusy: string;
    ariaChecked: string;
    ariaControls: string;
    ariaDescribedby: string;
    ariaDisabled: string;
    ariaExpanded: string;
    ariaFlowto: string;
    ariaHaspopup: string;
    ariaHidden: string;
    ariaInvalid: string;
    ariaLabelledby: string;
    ariaLevel: number;
    ariaLive: string;
    ariaMultiselectable: string;
    ariaOwns: string;
    ariaPosinset: number;
    ariaPressed: string;
    ariaReadonly: string;
    ariaRelevant: string;
    ariaRequired: string;
    ariaSecret: string;
    ariaSelected: string;
    ariaSetsize: number;
    ariaValuemax: string;
    ariaValuemin: string;
    ariaValuenow: string;
    attachEvent(event: string, pdisp: any): boolean;
    +attributes: any;
    +behaviorUrns: any;
    blur(): void;
    +canHaveChildren: boolean;
    +canHaveHTML: boolean;
    +childNodes: any;
    +children: any;
    className: string;
    clearAttributes(): void;
    click(): void;
    +clientHeight: number;
    +clientLeft: number;
    +clientTop: number;
    +clientWidth: number;
    cloneNode(fDeep: boolean): MSHTML$IHTMLDOMNode;
    componentFromPoint(x: number, y: number): string;
     //constructor: any;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    contentEditable: string;
    createControlRange(): any;
    +currentStyle: MSHTML$IHTMLCurrentStyle;
    detachEvent(event: string, pdisp: any): void;
    dir: string;
    disabled: boolean;
    +document: any;
    doScroll(component?: any): void;
    dragDrop(): boolean;
    +elements: any;
    encoding: string;
    +filters: MSHTML$IHTMLFiltersCollection;
    FireEvent(bstrEventName: string, pvarEventObject?: any): boolean;
    +firstChild: MSHTML$IHTMLDOMNode;
    focus(): void;
    getAdjacentText(where: string): string;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute;
    getAttributeNodeNS(
      pvarNS: any,
      bstrName: string
    ): MSHTML$IHTMLDOMAttribute2;
    getAttributeNS(pvarNS: any, strAttributeName: string): any;
    getBoundingClientRect(): MSHTML$IHTMLRect;
    getClientRects(): MSHTML$IHTMLRectCollection;
    getElementsByClassName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagName(v: string): MSHTML$IHTMLElementCollection;
    getElementsByTagNameNS(
      varNS: any,
      bstrLocalName: string
    ): MSHTML$IHTMLElementCollection;
    getExpression(propname: string): any;
    hasAttribute(name: string): boolean;
    hasAttributeNS(pvarNS: any, name: string): boolean;
    hasAttributes(): boolean;
    hasChildNodes(): boolean;
    hideFocus: boolean;
    id: string;
    ie8_action: string;
    +ie8_attributes: MSHTML$IHTMLAttributeCollection3;
    ie8_getAttribute(strAttributeName: string): any;
    ie8_getAttributeNode(bstrName: string): MSHTML$IHTMLDOMAttribute2;
    ie8_removeAttribute(strAttributeName: string): boolean;
    ie8_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie8_setAttribute(strAttributeName: string, AttributeValue: any): void;
    ie8_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_getAttribute(strAttributeName: string): any;
    ie9_getAttributeNode(strAttributeName: string): MSHTML$IHTMLDOMAttribute2;
    ie9_hasAttribute(name: string): boolean;
    ie9_hasAttributes(): boolean;
    +ie9_nodeName: string;
    ie9_removeAttribute(strAttributeName: string): void;
    ie9_removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    ie9_setAttribute(strAttributeName: string, pvarAttributeValue: any): void;
    ie9_setAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    +ie9_tagName: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentElement(
      where: string,
      insertedElement: MSHTML$IHTMLElement
    ): MSHTML$IHTMLElement;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    insertBefore(
      newChild: MSHTML$IHTMLDOMNode,
      refChild?: any
    ): MSHTML$IHTMLDOMNode;
    +isContentEditable: boolean;
    +isDisabled: boolean;
    +isMultiLine: boolean;
    +isTextEdit: boolean;
    item(name?: any, index?: any): any;
    lang: string;
    language: string;
    +lastChild: MSHTML$IHTMLDOMNode;
    length: number;
    mergeAttributes(mergeThis: MSHTML$IHTMLElement, pvarFlags?: any): void;
    method: string;
    msMatchesSelector(v: string): boolean;
    msReleasePointerCapture(pointerId: number): void;
    msSetPointerCapture(pointerId: number): void;
    name: string;
    namedItem(name: string): any;
    +nextSibling: MSHTML$IHTMLDOMNode;
    +nodeName: string;
    +nodeType: number;
    nodeValue: any;
    normalize(): void;
    +offsetHeight: number;
    +offsetLeft: number;
    +offsetParent: MSHTML$IHTMLElement;
    +offsetTop: number;
    +offsetWidth: number;
    onabort: any;
    onactivate: any;
    onafterupdate: any;
    onbeforeactivate: any;
    onbeforecopy: any;
    onbeforecut: any;
    onbeforedeactivate: any;
    onbeforeeditfocus: any;
    onbeforepaste: any;
    onbeforeupdate: any;
    onblur: any;
    oncanplay: any;
    oncanplaythrough: any;
    oncellchange: any;
    onchange: any;
    onclick: any;
    oncontextmenu: any;
    oncontrolselect: any;
    oncopy: any;
    oncuechange: any;
    oncut: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondeactivate: any;
    ondrag: any;
    ondragend: any;
    ondragenter: any;
    ondragleave: any;
    ondragover: any;
    ondragstart: any;
    ondrop: any;
    ondurationchange: any;
    onemptied: any;
    onended: any;
    onerror: any;
    onerrorupdate: any;
    onfilterchange: any;
    onfocus: any;
    onfocusin: any;
    onfocusout: any;
    onhelp: any;
    oninput: any;
    oninvalid: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onlayoutcomplete: any;
    onload: any;
    onloadeddata: any;
    onloadedmetadata: any;
    onloadstart: any;
    onlosecapture: any;
    onmousedown: any;
    onmouseenter: any;
    onmouseleave: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onmousewheel: any;
    onmove: any;
    onmoveend: any;
    onmovestart: any;
    onmsanimationend: any;
    onmsanimationiteration: any;
    onmsanimationstart: any;
    onmsgesturechange: any;
    onmsgesturedoubletap: any;
    onmsgestureend: any;
    onmsgesturehold: any;
    onmsgesturestart: any;
    onmsgesturetap: any;
    onmsgotpointercapture: any;
    onmsinertiastart: any;
    onmslostpointercapture: any;
    onmsmanipulationstatechanged: any;
    onmspointercancel: any;
    onmspointerdown: any;
    onmspointerhover: any;
    onmspointermove: any;
    onmspointerout: any;
    onmspointerover: any;
    onmspointerup: any;
    onmstransitionend: any;
    onmstransitionstart: any;
    onpage: any;
    onpaste: any;
    onpause: any;
    onplay: any;
    onplaying: any;
    onprogress: any;
    onpropertychange: any;
    onratechange: any;
    onreadystatechange: any;
    onreset: any;
    onresize: any;
    onresizeend: any;
    onresizestart: any;
    onrowenter: any;
    onrowexit: any;
    onrowsdelete: any;
    onrowsinserted: any;
    onscroll: any;
    onseeked: any;
    onseeking: any;
    onselect: any;
    onselectstart: any;
    onstalled: any;
    onsubmit: any;
    onsuspend: any;
    ontimeupdate: any;
    onvolumechange: any;
    onwaiting: any;
    outerHTML: string;
    outerText: string;
    +ownerDocument: any;
    +parentElement: MSHTML$IHTMLElement;
    +parentNode: MSHTML$IHTMLDOMNode;
    +parentTextEdit: MSHTML$IHTMLElement;
    +previousSibling: MSHTML$IHTMLDOMNode;
    +readyState: any;
    +recordNumber: any;
    releaseCapture(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    removeAttributeNode(
      pattr: MSHTML$IHTMLDOMAttribute
    ): MSHTML$IHTMLDOMAttribute;
    removeAttributeNS(pvarNS: any, strAttributeName: string): void;
    removeBehavior(cookie: number): boolean;
    removeChild(oldChild: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    removeExpression(propname: string): boolean;
    removeFilter(pUnk: any): void;

    /**
     * @param fDeep [fDeep=false]
     */
    removeNode(fDeep?: boolean): MSHTML$IHTMLDOMNode;
    replaceAdjacentText(where: string, newText: string): string;
    replaceChild(
      newChild: MSHTML$IHTMLDOMNode,
      oldChild: MSHTML$IHTMLDOMNode
    ): MSHTML$IHTMLDOMNode;
    replaceNode(replacement: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    reset(): void;
    role: string;
    +runtimeStyle: MSHTML$IHTMLStyle;
    +scopeName: string;
    +scrollHeight: number;
    scrollIntoView(varargStart?: any): void;
    scrollLeft: number;
    scrollTop: number;
    +scrollWidth: number;
    setActive(): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    setAttributeNode(pattr: MSHTML$IHTMLDOMAttribute): MSHTML$IHTMLDOMAttribute;
    setAttributeNodeNS(
      pattr: MSHTML$IHTMLDOMAttribute2
    ): MSHTML$IHTMLDOMAttribute2;
    setAttributeNS(
      pvarNS: any,
      strAttributeName: string,
      pvarAttributeValue: any
    ): void;

    /**
     * @param containerCapture [containerCapture=true]
     */
    setCapture(containerCapture?: boolean): void;

    /**
     * @param language [language='']
     */
    setExpression(
      propname: string,
      expression: string,
      language?: string
    ): void;
    +sourceIndex: number;
    spellcheck: any;
    +style: MSHTML$IHTMLStyle;
    submit(): void;
    swapNode(otherNode: MSHTML$IHTMLDOMNode): MSHTML$IHTMLDOMNode;
    tabIndex: number;
    +tagName: string;
    tags(tagName: any): any;
    tagUrn: string;
    target: string;
    title: string;
    toString(): string;
    +uniqueID: string;
    +uniqueNumber: number;
    urns(urn: any): any;
    xmsAcceleratorKey: string;
    (name?: any, index?: any): any;
  }

  declare class MSHTML$RangeException {
    constructor(): this;
    code: number;
    message: string;
  }

  declare class MSHTML$RulesApplied {
    constructor(): this;
    appliedRules: MSHTML$IHTMLStyleSheetRulesAppliedCollection;
    element: MSHTML$IHTMLElement;
    hasInheritableProperty(): boolean;
    inlineStyles: MSHTML$IHTMLStyle;
    propertyIsInheritable(name: string): boolean;
    propertyIsInline(name: string): boolean;
  }

  declare interface MSHTML$RulesAppliedCollection {
    +element: MSHTML$IHTMLElement;
    item(index: number): MSHTML$IRulesApplied;
    +length: number;
    property(index: number): string;
    +propertyCount: number;
    propertyInheritedFrom(name: string): MSHTML$IRulesApplied;
    propertyInheritedTrace(name: string, index: number): MSHTML$IRulesApplied;
    propertyInheritedTraceLength(name: string): number;
    (index: number): MSHTML$IRulesApplied;
  }

  declare class MSHTML$Scriptlet {
    constructor(): this;
    AboutBox(): void;
    embed: boolean;
    event: any;
    readyState: number;
    Scrollbar: boolean;
    url: string;
  }

  declare interface MSHTML$StaticNodeList {
     //constructor: any;
    item(index: number): any;
    +length: number;
    (index: number): any;
  }

  declare class MSHTML$SVGAElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    farthestViewportElement: MSHTML$ISVGElement;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getBBox(): MSHTML$SVGRect;
    getCTM(): MSHTML$SVGMatrix;
    getScreenCTM(): MSHTML$SVGMatrix;
    getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
    hasExtension(extension: string): boolean;
    href: MSHTML$SVGAnimatedString;
    nearestViewportElement: MSHTML$ISVGElement;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    systemLanguage: MSHTML$SVGStringList;
    target: MSHTML$SVGAnimatedString;
    transform: MSHTML$SVGAnimatedTransformList;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
  }

  declare class MSHTML$SVGAngle {
    constructor(): this;
    convertToSpecifiedUnits(unitType: number): void;
    newValueSpecifiedUnits(
      unitType: number,
      valueInSpecifiedUnits: number
    ): void;
    unitType: number;
    value: number;
    valueAsString: string;
    valueInSpecifiedUnits: number;
  }

  declare class MSHTML$SVGAnimatedAngle {
    constructor(): this;
    animVal: MSHTML$SVGAngle;
    baseVal: MSHTML$SVGAngle;
  }

  declare class MSHTML$SVGAnimatedBoolean {
    constructor(): this;
    animVal: boolean;
    baseVal: boolean;
  }

  declare class MSHTML$SVGAnimatedEnumeration {
    constructor(): this;
    animVal: number;
    baseVal: number;
  }

  declare class MSHTML$SVGAnimatedInteger {
    constructor(): this;
    animVal: number;
    baseVal: number;
  }

  declare class MSHTML$SVGAnimatedLength {
    constructor(): this;
    animVal: MSHTML$SVGLength;
    baseVal: MSHTML$SVGLength;
  }

  declare class MSHTML$SVGAnimatedLengthList {
    constructor(): this;
    animVal: MSHTML$SVGLengthList;
    baseVal: MSHTML$SVGLengthList;
  }

  declare class MSHTML$SVGAnimatedNumber {
    constructor(): this;
    animVal: number;
    baseVal: number;
  }

  declare class MSHTML$SVGAnimatedNumberList {
    constructor(): this;
    animVal: MSHTML$SVGNumberList;
    baseVal: MSHTML$SVGNumberList;
  }

  declare class MSHTML$SVGAnimatedPreserveAspectRatio {
    constructor(): this;
    animVal: MSHTML$SVGPreserveAspectRatio;
    baseVal: MSHTML$SVGPreserveAspectRatio;
  }

  declare class MSHTML$SVGAnimatedRect {
    constructor(): this;
    animVal: MSHTML$SVGRect;
    baseVal: MSHTML$SVGRect;
  }

  declare class MSHTML$SVGAnimatedString {
    constructor(): this;
    animVal: string;
    baseVal: string;
  }

  declare class MSHTML$SVGAnimatedTransformList {
    constructor(): this;
    animVal: MSHTML$SVGTransformList;
    baseVal: MSHTML$SVGTransformList;
  }

  declare class MSHTML$SVGCircleElement {
    constructor(): this;
    cx: MSHTML$SVGAnimatedLength;
    cy: MSHTML$SVGAnimatedLength;
    farthestViewportElement: MSHTML$ISVGElement;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getBBox(): MSHTML$SVGRect;
    getCTM(): MSHTML$SVGMatrix;
    getScreenCTM(): MSHTML$SVGMatrix;
    getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
    hasExtension(extension: string): boolean;
    nearestViewportElement: MSHTML$ISVGElement;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    r: MSHTML$SVGAnimatedLength;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    systemLanguage: MSHTML$SVGStringList;
    transform: MSHTML$SVGAnimatedTransformList;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
  }

  declare class MSHTML$SVGClipPathElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    clipPathUnits: MSHTML$SVGAnimatedEnumeration;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    farthestViewportElement: MSHTML$ISVGElement;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getBBox(): MSHTML$SVGRect;
    getCTM(): MSHTML$SVGMatrix;
    getScreenCTM(): MSHTML$SVGMatrix;
    getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
    hasExtension(extension: string): boolean;
    nearestViewportElement: MSHTML$ISVGElement;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    systemLanguage: MSHTML$SVGStringList;
    transform: MSHTML$SVGAnimatedTransformList;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
  }

  declare class MSHTML$SVGDefsElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    farthestViewportElement: MSHTML$ISVGElement;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getBBox(): MSHTML$SVGRect;
    getCTM(): MSHTML$SVGMatrix;
    getScreenCTM(): MSHTML$SVGMatrix;
    getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
    hasExtension(extension: string): boolean;
    nearestViewportElement: MSHTML$ISVGElement;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    systemLanguage: MSHTML$SVGStringList;
    transform: MSHTML$SVGAnimatedTransformList;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
  }

  declare class MSHTML$SVGDescElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    focusable: MSHTML$SVGAnimatedEnumeration;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
  }

  declare class MSHTML$SVGElement {
    constructor(): this;
    all: any;
    children: any;
    className: string;
    click(): void;
    contains(pChild: MSHTML$IHTMLElement): boolean;
    document: any;
    filters: MSHTML$IHTMLFiltersCollection;
    focusable: MSHTML$SVGAnimatedEnumeration;

    /**
     * @param lFlags [lFlags=0]
     */
    getAttribute(strAttributeName: string, lFlags?: number): any;
    id: string;
    innerHTML: string;
    innerText: string;
    insertAdjacentHTML(where: string, html: string): void;
    insertAdjacentText(where: string, text: string): void;
    isTextEdit: boolean;
    lang: string;
    language: string;
    offsetHeight: number;
    offsetLeft: number;
    offsetParent: MSHTML$IHTMLElement;
    offsetTop: number;
    offsetWidth: number;
    onafterupdate: any;
    onbeforeupdate: any;
    onclick: any;
    ondataavailable: any;
    ondatasetchanged: any;
    ondatasetcomplete: any;
    ondblclick: any;
    ondragstart: any;
    onerrorupdate: any;
    onfilterchange: any;
    onhelp: any;
    onkeydown: any;
    onkeypress: any;
    onkeyup: any;
    onmousedown: any;
    onmousemove: any;
    onmouseout: any;
    onmouseover: any;
    onmouseup: any;
    onrowenter: any;
    onrowexit: any;
    onselectstart: any;
    outerHTML: string;
    outerText: string;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    parentElement: MSHTML$IHTMLElement;
    parentTextEdit: MSHTML$IHTMLElement;
    recordNumber: any;

    /**
     * @param lFlags [lFlags=1]
     */
    removeAttribute(strAttributeName: string, lFlags?: number): boolean;
    scrollIntoView(varargStart?: any): void;

    /**
     * @param lFlags [lFlags=1]
     */
    setAttribute(
      strAttributeName: string,
      AttributeValue: any,
      lFlags?: number
    ): void;
    sourceIndex: number;
    style: MSHTML$IHTMLStyle;
    tagName: string;
    title: string;
    toString(): string;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
  }

  declare class MSHTML$SVGElementInstance {
    constructor(): this;
    addEventListener(type: string, listener: any, useCapture: boolean): void;
    childNodes: MSHTML$ISVGElementInstanceList;
    correspondingElement: MSHTML$ISVGElement;
    correspondingUseElement: MSHTML$ISVGUseElement;
    dispatchEvent(evt: MSHTML$IDOMEvent): boolean;
    firstChild: MSHTML$ISVGElementInstance;
    lastChild: MSHTML$ISVGElementInstance;
    nextSibling: MSHTML$ISVGElementInstance;
    parentNode: MSHTML$ISVGElementInstance;
    previousSibling: MSHTML$ISVGElementInstance;
    removeEventListener(type: string, listener: any, useCapture: boolean): void;
  }

  declare class MSHTML$SVGElementInstanceList {
    constructor(): this;
    item(index: number): MSHTML$ISVGElementInstance;
    length: number;
  }

  declare class MSHTML$SVGEllipseElement {
    constructor(): this;
    cx: MSHTML$SVGAnimatedLength;
    cy: MSHTML$SVGAnimatedLength;
    farthestViewportElement: MSHTML$ISVGElement;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getBBox(): MSHTML$SVGRect;
    getCTM(): MSHTML$SVGMatrix;
    getScreenCTM(): MSHTML$SVGMatrix;
    getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
    hasExtension(extension: string): boolean;
    nearestViewportElement: MSHTML$ISVGElement;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    rx: MSHTML$SVGAnimatedLength;
    ry: MSHTML$SVGAnimatedLength;
    systemLanguage: MSHTML$SVGStringList;
    transform: MSHTML$SVGAnimatedTransformList;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
  }

  declare class MSHTML$SVGException {
    constructor(): this;
    code: number;
    message: string;
  }

  declare class MSHTML$SVGGElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    farthestViewportElement: MSHTML$ISVGElement;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getBBox(): MSHTML$SVGRect;
    getCTM(): MSHTML$SVGMatrix;
    getScreenCTM(): MSHTML$SVGMatrix;
    getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
    hasExtension(extension: string): boolean;
    nearestViewportElement: MSHTML$ISVGElement;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    systemLanguage: MSHTML$SVGStringList;
    transform: MSHTML$SVGAnimatedTransformList;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
  }

  declare class MSHTML$SVGGradientElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    focusable: MSHTML$SVGAnimatedEnumeration;
    gradientTransform: MSHTML$SVGAnimatedTransformList;
    gradientUnits: MSHTML$SVGAnimatedEnumeration;
    href: MSHTML$SVGAnimatedString;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    spreadMethod: MSHTML$SVGAnimatedEnumeration;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
  }

  declare class MSHTML$SVGImageElement {
    constructor(): this;
    farthestViewportElement: MSHTML$ISVGElement;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getBBox(): MSHTML$SVGRect;
    getCTM(): MSHTML$SVGMatrix;
    getScreenCTM(): MSHTML$SVGMatrix;
    getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
    hasExtension(extension: string): boolean;
    height: MSHTML$SVGAnimatedLength;
    href: MSHTML$SVGAnimatedString;
    nearestViewportElement: MSHTML$ISVGElement;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    preserveAspectRatio: MSHTML$SVGAnimatedPreserveAspectRatio;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    systemLanguage: MSHTML$SVGStringList;
    transform: MSHTML$SVGAnimatedTransformList;
    viewBox: MSHTML$SVGAnimatedRect;
    viewportElement: MSHTML$ISVGElement;
    width: MSHTML$SVGAnimatedLength;
    x: MSHTML$SVGAnimatedLength;
    xmlbase: string;
    y: MSHTML$SVGAnimatedLength;
  }

  declare class MSHTML$SVGLength {
    constructor(): this;
    convertToSpecifiedUnits(unitType: number): void;
    newValueSpecifiedUnits(
      unitType: number,
      valueInSpecifiedUnits: number
    ): void;
    unitType: number;
    value: number;
    valueAsString: string;
    valueInSpecifiedUnits: number;
  }

  declare class MSHTML$SVGLengthList {
    constructor(): this;
    appendItem(newItem: MSHTML$SVGLength): MSHTML$SVGLength;
    clear(): void;
    getItem(index: number): MSHTML$SVGLength;
    initialize(newItem: MSHTML$SVGLength): MSHTML$SVGLength;
    insertItemBefore(
      newItem: MSHTML$SVGLength,
      index: number
    ): MSHTML$SVGLength;
    numberOfItems: number;
    removeItem(index: number): MSHTML$SVGLength;
    replaceItem(newItem: MSHTML$SVGLength, index: number): MSHTML$SVGLength;
  }

  declare class MSHTML$SVGLinearGradientElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    focusable: MSHTML$SVGAnimatedEnumeration;
    gradientTransform: MSHTML$SVGAnimatedTransformList;
    gradientUnits: MSHTML$SVGAnimatedEnumeration;
    href: MSHTML$SVGAnimatedString;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    spreadMethod: MSHTML$SVGAnimatedEnumeration;
    viewportElement: MSHTML$ISVGElement;
    x1: MSHTML$SVGAnimatedLength;
    x2: MSHTML$SVGAnimatedLength;
    xmlbase: string;
    y1: MSHTML$SVGAnimatedLength;
    y2: MSHTML$SVGAnimatedLength;
  }

  declare class MSHTML$SVGLineElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    farthestViewportElement: MSHTML$ISVGElement;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getBBox(): MSHTML$SVGRect;
    getCTM(): MSHTML$SVGMatrix;
    getScreenCTM(): MSHTML$SVGMatrix;
    getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
    hasExtension(extension: string): boolean;
    nearestViewportElement: MSHTML$ISVGElement;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    systemLanguage: MSHTML$SVGStringList;
    transform: MSHTML$SVGAnimatedTransformList;
    viewportElement: MSHTML$ISVGElement;
    x1: MSHTML$SVGAnimatedLength;
    x2: MSHTML$SVGAnimatedLength;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
    y1: MSHTML$SVGAnimatedLength;
    y2: MSHTML$SVGAnimatedLength;
  }

  declare class MSHTML$SVGMarkerElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    focusable: MSHTML$SVGAnimatedEnumeration;
    markerHeight: MSHTML$SVGAnimatedLength;
    markerUnits: MSHTML$SVGAnimatedEnumeration;
    markerWidth: MSHTML$SVGAnimatedLength;
    orientAngle: MSHTML$SVGAnimatedAngle;
    orientType: MSHTML$SVGAnimatedEnumeration;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    preserveAspectRatio: MSHTML$SVGAnimatedPreserveAspectRatio;
    refX: MSHTML$SVGAnimatedLength;
    refY: MSHTML$SVGAnimatedLength;
    setOrientToAngle(pSVGAngle: MSHTML$SVGAngle): void;
    setOrientToAuto(): void;
    viewBox: MSHTML$SVGAnimatedRect;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
  }

  declare class MSHTML$SVGMaskElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    focusable: MSHTML$SVGAnimatedEnumeration;
    hasExtension(extension: string): boolean;
    height: MSHTML$SVGAnimatedLength;
    maskContentUnits: MSHTML$SVGAnimatedEnumeration;
    maskUnits: MSHTML$SVGAnimatedEnumeration;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    systemLanguage: MSHTML$SVGStringList;
    viewportElement: MSHTML$ISVGElement;
    width: MSHTML$SVGAnimatedLength;
    x: MSHTML$SVGAnimatedLength;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
    y: MSHTML$SVGAnimatedLength;
  }

  declare class MSHTML$SVGMatrix {
    constructor(): this;
    a: number;
    b: number;
    c: number;
    d: number;
    e: number;
    f: number;
    flipX(): MSHTML$SVGMatrix;
    flipY(): MSHTML$SVGMatrix;
    inverse(): MSHTML$SVGMatrix;
    multiply(secondMatrix: MSHTML$SVGMatrix): MSHTML$SVGMatrix;
    rotate(angle: number): MSHTML$SVGMatrix;
    rotateFromVector(x: number, y: number): MSHTML$SVGMatrix;
    scale(scaleFactor: number): MSHTML$SVGMatrix;
    scaleNonUniform(
      scaleFactorX: number,
      scaleFactorY: number
    ): MSHTML$SVGMatrix;
    skewX(angle: number): MSHTML$SVGMatrix;
    skewY(angle: number): MSHTML$SVGMatrix;
    translate(x: number, y: number): MSHTML$SVGMatrix;
  }

  declare class MSHTML$SVGMetadataElement {
    constructor(): this;
    focusable: MSHTML$SVGAnimatedEnumeration;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
  }

  declare class MSHTML$SVGNumber {
    constructor(): this;
    value: number;
  }

  declare class MSHTML$SVGNumberList {
    constructor(): this;
    appendItem(newItem: MSHTML$SVGNumber): MSHTML$SVGNumber;
    clear(): void;
    getItem(index: number): MSHTML$SVGNumber;
    initialize(newItem: MSHTML$SVGNumber): MSHTML$SVGNumber;
    insertItemBefore(
      newItem: MSHTML$SVGNumber,
      index: number
    ): MSHTML$SVGNumber;
    numberOfItems: number;
    removeItem(index: number): MSHTML$SVGNumber;
    replaceItem(newItem: MSHTML$SVGNumber, index: number): MSHTML$SVGNumber;
  }

  declare class MSHTML$SVGPathElement {
    constructor(): this;
    animatedNormalizedPathSegList: MSHTML$SVGPathSegList;
    animatedPathSegList: MSHTML$SVGPathSegList;
    createSVGPathSegArcAbs(
      x: number,
      y: number,
      r1: number,
      r2: number,
      angle: number,
      largeArcFlag: boolean,
      sweepFlag: boolean
    ): MSHTML$ISVGPathSegArcAbs;
    createSVGPathSegArcRel(
      x: number,
      y: number,
      r1: number,
      r2: number,
      angle: number,
      largeArcFlag: boolean,
      sweepFlag: boolean
    ): MSHTML$ISVGPathSegArcRel;
    createSVGPathSegClosePath(): MSHTML$ISVGPathSegClosePath;
    createSVGPathSegCurvetoCubicAbs(
      x: number,
      y: number,
      x1: number,
      y1: number,
      x2: number,
      y2: number
    ): MSHTML$ISVGPathSegCurvetoCubicAbs;
    createSVGPathSegCurvetoCubicRel(
      x: number,
      y: number,
      x1: number,
      y1: number,
      x2: number,
      y2: number
    ): MSHTML$ISVGPathSegCurvetoCubicRel;
    createSVGPathSegCurvetoCubicSmoothAbs(
      x: number,
      y: number,
      x2: number,
      y2: number
    ): MSHTML$ISVGPathSegCurvetoCubicSmoothAbs;
    createSVGPathSegCurvetoCubicSmoothRel(
      x: number,
      y: number,
      x2: number,
      y2: number
    ): MSHTML$ISVGPathSegCurvetoCubicSmoothRel;
    createSVGPathSegCurvetoQuadraticAbs(
      x: number,
      y: number,
      x1: number,
      y1: number
    ): MSHTML$ISVGPathSegCurvetoQuadraticAbs;
    createSVGPathSegCurvetoQuadraticRel(
      x: number,
      y: number,
      x1: number,
      y1: number
    ): MSHTML$ISVGPathSegCurvetoQuadraticRel;
    createSVGPathSegCurvetoQuadraticSmoothAbs(
      x: number,
      y: number
    ): MSHTML$ISVGPathSegCurvetoQuadraticSmoothAbs;
    createSVGPathSegCurvetoQuadraticSmoothRel(
      x: number,
      y: number
    ): MSHTML$ISVGPathSegCurvetoQuadraticSmoothRel;
    createSVGPathSegLinetoAbs(
      x: number,
      y: number
    ): MSHTML$ISVGPathSegLinetoAbs;
    createSVGPathSegLinetoHorizontalAbs(
      x: number
    ): MSHTML$ISVGPathSegLinetoHorizontalAbs;
    createSVGPathSegLinetoHorizontalRel(
      x: number
    ): MSHTML$ISVGPathSegLinetoHorizontalRel;
    createSVGPathSegLinetoRel(
      x: number,
      y: number
    ): MSHTML$ISVGPathSegLinetoRel;
    createSVGPathSegLinetoVerticalAbs(
      y: number
    ): MSHTML$ISVGPathSegLinetoVerticalAbs;
    createSVGPathSegLinetoVerticalRel(
      y: number
    ): MSHTML$ISVGPathSegLinetoVerticalRel;
    createSVGPathSegMovetoAbs(
      x: number,
      y: number
    ): MSHTML$ISVGPathSegMovetoAbs;
    createSVGPathSegMovetoRel(
      x: number,
      y: number
    ): MSHTML$ISVGPathSegMovetoRel;
    farthestViewportElement: MSHTML$ISVGElement;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getBBox(): MSHTML$SVGRect;
    getCTM(): MSHTML$SVGMatrix;
    getPathSegAtLength(fltdistance: number): number;
    getPointAtLength(fltdistance: number): MSHTML$SVGPoint;
    getScreenCTM(): MSHTML$SVGMatrix;
    getTotalLength(): number;
    getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
    hasExtension(extension: string): boolean;
    nearestViewportElement: MSHTML$ISVGElement;
    normalizedPathSegList: MSHTML$SVGPathSegList;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    pathLength: MSHTML$SVGAnimatedNumber;
    pathSegList: MSHTML$SVGPathSegList;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    systemLanguage: MSHTML$SVGStringList;
    transform: MSHTML$SVGAnimatedTransformList;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
  }

  declare class MSHTML$SVGPathSeg {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
  }

  declare class MSHTML$SVGPathSegArcAbs {
    constructor(): this;
    angle: number;
    largeArcFlag: boolean;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    r1: number;
    r2: number;
    sweepFlag: boolean;
    x: number;
    y: number;
  }

  declare class MSHTML$SVGPathSegArcRel {
    constructor(): this;
    angle: number;
    largeArcFlag: boolean;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    r1: number;
    r2: number;
    sweepFlag: boolean;
    x: number;
    y: number;
  }

  declare class MSHTML$SVGPathSegClosePath {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
  }

  declare class MSHTML$SVGPathSegCurvetoCubicAbs {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    x: number;
    x1: number;
    x2: number;
    y: number;
    y1: number;
    y2: number;
  }

  declare class MSHTML$SVGPathSegCurvetoCubicRel {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    x: number;
    x1: number;
    x2: number;
    y: number;
    y1: number;
    y2: number;
  }

  declare class MSHTML$SVGPathSegCurvetoCubicSmoothAbs {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    x: number;
    x2: number;
    y: number;
    y2: number;
  }

  declare class MSHTML$SVGPathSegCurvetoCubicSmoothRel {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    x: number;
    x2: number;
    y: number;
    y2: number;
  }

  declare class MSHTML$SVGPathSegCurvetoQuadraticAbs {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    x: number;
    x1: number;
    y: number;
    y1: number;
  }

  declare class MSHTML$SVGPathSegCurvetoQuadraticRel {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    x: number;
    x1: number;
    y: number;
    y1: number;
  }

  declare class MSHTML$SVGPathSegCurvetoQuadraticSmoothAbs {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    x: number;
    y: number;
  }

  declare class MSHTML$SVGPathSegCurvetoQuadraticSmoothRel {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    x: number;
    y: number;
  }

  declare class MSHTML$SVGPathSegLinetoAbs {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    x: number;
    y: number;
  }

  declare class MSHTML$SVGPathSegLinetoHorizontalAbs {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    x: number;
  }

  declare class MSHTML$SVGPathSegLinetoHorizontalRel {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    x: number;
  }

  declare class MSHTML$SVGPathSegLinetoRel {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    x: number;
    y: number;
  }

  declare class MSHTML$SVGPathSegLinetoVerticalAbs {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    y: number;
  }

  declare class MSHTML$SVGPathSegLinetoVerticalRel {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    y: number;
  }

  declare class MSHTML$SVGPathSegList {
    constructor(): this;
    appendItem(newItem: MSHTML$SVGPathSeg): MSHTML$SVGPathSeg;
    clear(): void;
    getItem(index: number): MSHTML$SVGPathSeg;
    initialize(newItem: MSHTML$SVGPathSeg): MSHTML$SVGPathSeg;
    insertItemBefore(
      newItem: MSHTML$SVGPathSeg,
      index: number
    ): MSHTML$SVGPathSeg;
    numberOfItems: number;
    removeItem(index: number): MSHTML$SVGPathSeg;
    replaceItem(newItem: MSHTML$SVGPathSeg, index: number): MSHTML$SVGPathSeg;
  }

  declare class MSHTML$SVGPathSegMovetoAbs {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    x: number;
    y: number;
  }

  declare class MSHTML$SVGPathSegMovetoRel {
    constructor(): this;
    pathSegType: number;
    pathSegTypeAsLetter: string;
    x: number;
    y: number;
  }

  declare class MSHTML$SVGPatternElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    focusable: MSHTML$SVGAnimatedEnumeration;
    hasExtension(extension: string): boolean;
    height: MSHTML$SVGAnimatedLength;
    href: MSHTML$SVGAnimatedString;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    patternContentUnits: MSHTML$SVGAnimatedEnumeration;
    patternTransform: MSHTML$SVGAnimatedTransformList;
    patternUnits: MSHTML$SVGAnimatedEnumeration;
    preserveAspectRatio: MSHTML$SVGAnimatedPreserveAspectRatio;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    systemLanguage: MSHTML$SVGStringList;
    viewBox: MSHTML$SVGAnimatedRect;
    viewportElement: MSHTML$ISVGElement;
    width: MSHTML$SVGAnimatedLength;
    x: MSHTML$SVGAnimatedLength;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
    y: MSHTML$SVGAnimatedLength;
  }

  declare class MSHTML$SVGPoint {
    constructor(): this;
    matrixTransform(pMatrix: MSHTML$SVGMatrix): MSHTML$SVGPoint;
    x: number;
    y: number;
  }

  declare class MSHTML$SVGPointList {
    constructor(): this;
    appendItem(pNewItem: MSHTML$SVGPoint): MSHTML$SVGPoint;
    clear(): void;
    getItem(index: number): MSHTML$SVGPoint;
    initialize(pNewItem: MSHTML$SVGPoint): MSHTML$SVGPoint;
    insertItemBefore(pNewItem: MSHTML$SVGPoint, index: number): MSHTML$SVGPoint;
    numberOfItems: number;
    removeItem(index: number): MSHTML$SVGPoint;
    replaceItem(pNewItem: MSHTML$SVGPoint, index: number): MSHTML$SVGPoint;
  }

  declare class MSHTML$SVGPolygonElement {
    constructor(): this;
    animatedPoints: MSHTML$SVGPointList;
    farthestViewportElement: MSHTML$ISVGElement;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getBBox(): MSHTML$SVGRect;
    getCTM(): MSHTML$SVGMatrix;
    getScreenCTM(): MSHTML$SVGMatrix;
    getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
    hasExtension(extension: string): boolean;
    nearestViewportElement: MSHTML$ISVGElement;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    points: MSHTML$SVGPointList;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    systemLanguage: MSHTML$SVGStringList;
    transform: MSHTML$SVGAnimatedTransformList;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
  }

  declare class MSHTML$SVGPolylineElement {
    constructor(): this;
    animatedPoints: MSHTML$SVGPointList;
    farthestViewportElement: MSHTML$ISVGElement;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getBBox(): MSHTML$SVGRect;
    getCTM(): MSHTML$SVGMatrix;
    getScreenCTM(): MSHTML$SVGMatrix;
    getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
    hasExtension(extension: string): boolean;
    nearestViewportElement: MSHTML$ISVGElement;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    points: MSHTML$SVGPointList;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    systemLanguage: MSHTML$SVGStringList;
    transform: MSHTML$SVGAnimatedTransformList;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
  }

  declare class MSHTML$SVGPreserveAspectRatio {
    constructor(): this;
    align: number;
    meetOrSlice: number;
  }

  declare class MSHTML$SVGRadialGradientElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    cx: MSHTML$SVGAnimatedLength;
    cy: MSHTML$SVGAnimatedLength;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    focusable: MSHTML$SVGAnimatedEnumeration;
    fx: MSHTML$SVGAnimatedLength;
    fy: MSHTML$SVGAnimatedLength;
    gradientTransform: MSHTML$SVGAnimatedTransformList;
    gradientUnits: MSHTML$SVGAnimatedEnumeration;
    href: MSHTML$SVGAnimatedString;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    r: MSHTML$SVGAnimatedLength;
    spreadMethod: MSHTML$SVGAnimatedEnumeration;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
  }

  declare class MSHTML$SVGRect {
    constructor(): this;
    height: number;
    width: number;
    x: number;
    y: number;
  }

  declare class MSHTML$SVGRectElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    farthestViewportElement: MSHTML$ISVGElement;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getBBox(): MSHTML$SVGRect;
    getCTM(): MSHTML$SVGMatrix;
    getScreenCTM(): MSHTML$SVGMatrix;
    getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
    hasExtension(extension: string): boolean;
    height: MSHTML$SVGAnimatedLength;
    nearestViewportElement: MSHTML$ISVGElement;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    rx: MSHTML$SVGAnimatedLength;
    ry: MSHTML$SVGAnimatedLength;
    systemLanguage: MSHTML$SVGStringList;
    transform: MSHTML$SVGAnimatedTransformList;
    viewportElement: MSHTML$ISVGElement;
    width: MSHTML$SVGAnimatedLength;
    x: MSHTML$SVGAnimatedLength;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
    y: MSHTML$SVGAnimatedLength;
  }

  declare class MSHTML$SVGScriptElement {
    constructor(): this;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    focusable: MSHTML$SVGAnimatedEnumeration;
    href: MSHTML$SVGAnimatedString;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    type: string;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
  }

  declare class MSHTML$SVGStopElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    focusable: MSHTML$SVGAnimatedEnumeration;
    offset: MSHTML$SVGAnimatedNumber;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
  }

  declare class MSHTML$SVGStringList {
    constructor(): this;
    appendItem(newItem: string): string;
    clear(): void;
    getItem(index: number): string;
    initialize(newItem: string): string;
    insertItemBefore(newItem: string, index: number): string;
    numberOfItems: number;
    removeItem(index: number): string;
    replaceItem(newItem: string, index: number): string;
  }

  declare class MSHTML$SVGStyleElement {
    constructor(): this;
    focusable: MSHTML$SVGAnimatedEnumeration;
    media: string;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    type: string;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
  }

  declare class MSHTML$SVGSVGElement {
    constructor(): this;
    animationsPaused(): boolean;
    checkEnclosure(element: MSHTML$ISVGElement, rect: MSHTML$SVGRect): boolean;
    checkIntersection(
      element: MSHTML$ISVGElement,
      rect: MSHTML$SVGRect
    ): boolean;
    className: MSHTML$SVGAnimatedString;
    contentScriptType: string;
    contentStyleType: string;
    createSVGAngle(): MSHTML$SVGAngle;
    createSVGLength(): MSHTML$SVGLength;
    createSVGMatrix(): MSHTML$SVGMatrix;
    createSVGNumber(): MSHTML$SVGNumber;
    createSVGPoint(): MSHTML$SVGPoint;
    createSVGRect(): MSHTML$SVGRect;
    createSVGTransform(): MSHTML$SVGTransform;
    createSVGTransformFromMatrix(matrix: MSHTML$SVGMatrix): MSHTML$SVGTransform;
    currentScale: number;
    currentTranslate: MSHTML$SVGPoint;
    currentView: MSHTML$ISVGViewSpec;
    deselectAll(): void;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    farthestViewportElement: MSHTML$ISVGElement;
    focusable: MSHTML$SVGAnimatedEnumeration;
    forceRedraw(): void;
    getBBox(): MSHTML$SVGRect;
    getCTM(): MSHTML$SVGMatrix;
    getCurrentTime(): number;
    getElementById(elementId: string): MSHTML$IHTMLElement;
    getEnclosureList(
      rect: MSHTML$SVGRect,
      referenceElement: MSHTML$ISVGElement
    ): any;
    getIntersectionList(
      rect: MSHTML$SVGRect,
      referenceElement: MSHTML$ISVGElement
    ): any;
    getScreenCTM(): MSHTML$SVGMatrix;
    getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
    hasExtension(extension: string): boolean;
    height: MSHTML$SVGAnimatedLength;
    nearestViewportElement: MSHTML$ISVGElement;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    pauseAnimations(): void;
    pixelUnitToMillimeterX: number;
    pixelUnitToMillimeterY: number;
    preserveAspectRatio: MSHTML$SVGAnimatedPreserveAspectRatio;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    screenPixelToMillimeterX: number;
    screenPixelToMillimeterY: number;
    setCurrentTime(seconds: number): void;
    suspendRedraw(maxWaitMilliseconds: number): number;
    systemLanguage: MSHTML$SVGStringList;
    unpauseAnimations(): void;
    unsuspendRedraw(suspendHandeID: number): void;
    unsuspendRedrawAll(): void;
    useCurrentView: boolean;
    viewBox: MSHTML$SVGAnimatedRect;
    viewport: MSHTML$SVGRect;
    viewportElement: MSHTML$ISVGElement;
    width: MSHTML$SVGAnimatedLength;
    x: MSHTML$SVGAnimatedLength;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
    y: MSHTML$SVGAnimatedLength;
    zoomAndPan: number;
  }

  declare class MSHTML$SVGSwitchElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    farthestViewportElement: MSHTML$ISVGElement;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getBBox(): MSHTML$SVGRect;
    getCTM(): MSHTML$SVGMatrix;
    getScreenCTM(): MSHTML$SVGMatrix;
    getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
    hasExtension(extension: string): boolean;
    nearestViewportElement: MSHTML$ISVGElement;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    systemLanguage: MSHTML$SVGStringList;
    transform: MSHTML$SVGAnimatedTransformList;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
  }

  declare class MSHTML$SVGSymbolElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    focusable: MSHTML$SVGAnimatedEnumeration;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    preserveAspectRatio: MSHTML$SVGAnimatedPreserveAspectRatio;
    viewBox: MSHTML$SVGAnimatedRect;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
  }

  declare class MSHTML$SVGTextContentElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getCharNumAtPosition(point: MSHTML$SVGPoint): number;
    getComputedTextLength(): number;
    getEndPositionOfChar(charnum: number): MSHTML$SVGPoint;
    getExtentOfChar(charnum: number): MSHTML$SVGRect;
    getNumberOfChars(): number;
    getRotationOfChar(charnum: number): number;
    getStartPositionOfChar(charnum: number): MSHTML$SVGPoint;
    getSubStringLength(charnum: number, nchars: number): number;
    hasExtension(extension: string): boolean;
    lengthAdjust: MSHTML$SVGAnimatedEnumeration;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    selectSubString(charnum: number, nchars: number): void;
    systemLanguage: MSHTML$SVGStringList;
    textLength: MSHTML$SVGAnimatedLength;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
  }

  declare class MSHTML$SVGTextElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    dx: MSHTML$SVGAnimatedLengthList;
    dy: MSHTML$SVGAnimatedLengthList;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    farthestViewportElement: MSHTML$ISVGElement;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getBBox(): MSHTML$SVGRect;
    getCharNumAtPosition(point: MSHTML$SVGPoint): number;
    getComputedTextLength(): number;
    getCTM(): MSHTML$SVGMatrix;
    getEndPositionOfChar(charnum: number): MSHTML$SVGPoint;
    getExtentOfChar(charnum: number): MSHTML$SVGRect;
    getNumberOfChars(): number;
    getRotationOfChar(charnum: number): number;
    getScreenCTM(): MSHTML$SVGMatrix;
    getStartPositionOfChar(charnum: number): MSHTML$SVGPoint;
    getSubStringLength(charnum: number, nchars: number): number;
    getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
    hasExtension(extension: string): boolean;
    lengthAdjust: MSHTML$SVGAnimatedEnumeration;
    nearestViewportElement: MSHTML$ISVGElement;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    rotate: MSHTML$SVGAnimatedNumberList;
    selectSubString(charnum: number, nchars: number): void;
    systemLanguage: MSHTML$SVGStringList;
    textLength: MSHTML$SVGAnimatedLength;
    transform: MSHTML$SVGAnimatedTransformList;
    viewportElement: MSHTML$ISVGElement;
    x: MSHTML$SVGAnimatedLengthList;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
    y: MSHTML$SVGAnimatedLengthList;
  }

  declare class MSHTML$SVGTextPathElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getCharNumAtPosition(point: MSHTML$SVGPoint): number;
    getComputedTextLength(): number;
    getEndPositionOfChar(charnum: number): MSHTML$SVGPoint;
    getExtentOfChar(charnum: number): MSHTML$SVGRect;
    getNumberOfChars(): number;
    getRotationOfChar(charnum: number): number;
    getStartPositionOfChar(charnum: number): MSHTML$SVGPoint;
    getSubStringLength(charnum: number, nchars: number): number;
    hasExtension(extension: string): boolean;
    href: MSHTML$SVGAnimatedString;
    lengthAdjust: MSHTML$SVGAnimatedEnumeration;
    method: MSHTML$SVGAnimatedEnumeration;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    selectSubString(charnum: number, nchars: number): void;
    spacing: MSHTML$SVGAnimatedEnumeration;
    startOffset: MSHTML$SVGAnimatedLength;
    systemLanguage: MSHTML$SVGStringList;
    textLength: MSHTML$SVGAnimatedLength;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
  }

  declare class MSHTML$SVGTextPositioningElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    dx: MSHTML$SVGAnimatedLengthList;
    dy: MSHTML$SVGAnimatedLengthList;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getCharNumAtPosition(point: MSHTML$SVGPoint): number;
    getComputedTextLength(): number;
    getEndPositionOfChar(charnum: number): MSHTML$SVGPoint;
    getExtentOfChar(charnum: number): MSHTML$SVGRect;
    getNumberOfChars(): number;
    getRotationOfChar(charnum: number): number;
    getStartPositionOfChar(charnum: number): MSHTML$SVGPoint;
    getSubStringLength(charnum: number, nchars: number): number;
    hasExtension(extension: string): boolean;
    lengthAdjust: MSHTML$SVGAnimatedEnumeration;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    rotate: MSHTML$SVGAnimatedNumberList;
    selectSubString(charnum: number, nchars: number): void;
    systemLanguage: MSHTML$SVGStringList;
    textLength: MSHTML$SVGAnimatedLength;
    viewportElement: MSHTML$ISVGElement;
    x: MSHTML$SVGAnimatedLengthList;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
    y: MSHTML$SVGAnimatedLengthList;
  }

  declare class MSHTML$SVGTitleElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    focusable: MSHTML$SVGAnimatedEnumeration;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    viewportElement: MSHTML$ISVGElement;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
  }

  declare class MSHTML$SVGTransform {
    constructor(): this;
    angle: number;
    matrix: MSHTML$SVGMatrix;
    setMatrix(matrix: MSHTML$SVGMatrix): void;
    setRotate(angle: number, cx: number, cy: number): void;
    setScale(sx: number, sy: number): void;
    setSkewX(angle: number): void;
    setSkewY(angle: number): void;
    setTranslate(tx: number, ty: number): void;
    type: number;
  }

  declare class MSHTML$SVGTransformList {
    constructor(): this;
    appendItem(newItem: MSHTML$SVGTransform): MSHTML$SVGTransform;
    clear(): void;
    consolidate(): MSHTML$SVGTransform;
    createSVGTransformFromMatrix(
      newItem: MSHTML$SVGMatrix
    ): MSHTML$SVGTransform;
    getItem(index: number): MSHTML$SVGTransform;
    initialize(newItem: MSHTML$SVGTransform): MSHTML$SVGTransform;
    insertItemBefore(
      newItem: MSHTML$SVGTransform,
      index: number
    ): MSHTML$SVGTransform;
    numberOfItems: number;
    removeItem(index: number): MSHTML$SVGTransform;
    replaceItem(
      newItem: MSHTML$SVGTransform,
      index: number
    ): MSHTML$SVGTransform;
  }

  declare class MSHTML$SVGTSpanElement {
    constructor(): this;
    className: MSHTML$SVGAnimatedString;
    dx: MSHTML$SVGAnimatedLengthList;
    dy: MSHTML$SVGAnimatedLengthList;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getCharNumAtPosition(point: MSHTML$SVGPoint): number;
    getComputedTextLength(): number;
    getEndPositionOfChar(charnum: number): MSHTML$SVGPoint;
    getExtentOfChar(charnum: number): MSHTML$SVGRect;
    getNumberOfChars(): number;
    getRotationOfChar(charnum: number): number;
    getStartPositionOfChar(charnum: number): MSHTML$SVGPoint;
    getSubStringLength(charnum: number, nchars: number): number;
    hasExtension(extension: string): boolean;
    lengthAdjust: MSHTML$SVGAnimatedEnumeration;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    rotate: MSHTML$SVGAnimatedNumberList;
    selectSubString(charnum: number, nchars: number): void;
    systemLanguage: MSHTML$SVGStringList;
    textLength: MSHTML$SVGAnimatedLength;
    viewportElement: MSHTML$ISVGElement;
    x: MSHTML$SVGAnimatedLengthList;
    xmlbase: string;
    xmllang: string;
    xmlspace: string;
    y: MSHTML$SVGAnimatedLengthList;
  }

  declare class MSHTML$SVGUseElement {
    constructor(): this;
    animatedInstanceRoot: MSHTML$ISVGElementInstance;
    farthestViewportElement: MSHTML$ISVGElement;
    focusable: MSHTML$SVGAnimatedEnumeration;
    getBBox(): MSHTML$SVGRect;
    getCTM(): MSHTML$SVGMatrix;
    getScreenCTM(): MSHTML$SVGMatrix;
    getTransformToElement(pElement: MSHTML$ISVGElement): MSHTML$SVGMatrix;
    hasExtension(extension: string): boolean;
    height: MSHTML$SVGAnimatedLength;
    href: MSHTML$SVGAnimatedString;
    instanceRoot: MSHTML$ISVGElementInstance;
    nearestViewportElement: MSHTML$ISVGElement;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    requiredExtensions: MSHTML$SVGStringList;
    requiredFeatures: MSHTML$SVGStringList;
    systemLanguage: MSHTML$SVGStringList;
    transform: MSHTML$SVGAnimatedTransformList;
    viewportElement: MSHTML$ISVGElement;
    width: MSHTML$SVGAnimatedLength;
    x: MSHTML$SVGAnimatedLength;
    xmlbase: string;
    y: MSHTML$SVGAnimatedLength;
  }

  declare class MSHTML$SVGViewElement {
    constructor(): this;
    externalResourcesRequired: MSHTML$SVGAnimatedBoolean;
    focusable: MSHTML$SVGAnimatedEnumeration;
    ownerSVGElement: MSHTML$ISVGSVGElement;
    preserveAspectRatio: MSHTML$SVGAnimatedPreserveAspectRatio;
    viewBox: MSHTML$SVGAnimatedRect;
    viewportElement: MSHTML$ISVGElement;
    viewTarget: MSHTML$SVGStringList;
    xmlbase: string;
    zoomAndPan: number;
  }

  declare class MSHTML$SVGZoomEvent {
    constructor(): this;
    bubbles: boolean;
    cancelable: boolean;
    cancelBubble: boolean;
    currentTarget: MSHTML$IEventTarget;
    defaultPrevented: boolean;
    detail: number;
    eventPhase: number;
    initEvent(eventType: string, canBubble: boolean, cancelable: boolean): void;
    initUIEvent(
      eventType: string,
      canBubble: boolean,
      cancelable: boolean,
      view: MSHTML$IHTMLWindow2,
      detail: number
    ): void;
    isTrusted: boolean;
    newScale: number;
    newTranslate: MSHTML$SVGPoint;
    preventDefault(): void;
    previousScale: number;
    previousTranslate: MSHTML$SVGPoint;
    srcElement: MSHTML$IHTMLElement;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    target: MSHTML$IEventTarget;
    timeStamp: number;
    type: string;
    view: MSHTML$IHTMLWindow2;
    zoomRectScreen: MSHTML$SVGRect;
  }

  declare class MSHTML$ThreadDialogProcParam {
    constructor(): this;
    document: any;
    moniker: any;
    optionString: any;
    parameters: any;
  }

  declare class MSHTML$TreeWalker {
    constructor(): this;
    currentNode: any;
    expandEntityReferences: boolean;
    filter: any;
    firstChild(): any;
    lastChild(): any;
    nextNode(): any;
    nextSibling(): any;
    parentNode(): any;
    previousNode(): any;
    previousSibling(): any;
    root: any;
    whatToShow: number;
  }

  declare class MSHTML$WebGeocoordinates {
    constructor(): this;
    accuracy: number;
    altitude: any;
    altitudeAccuracy: any;
    heading: any;
    latitude: number;
    longitude: number;
    speed: any;
  }

  declare class MSHTML$WebGeolocation {
    constructor(): this;
    clearWatch(watchId: number): void;
    getCurrentPosition(
      successCallback: any,
      errorCallback?: any,
      options?: any
    ): void;
    watchPosition(
      successCallback: any,
      errorCallback?: any,
      options?: any
    ): number;
  }

  declare class MSHTML$WebGeoposition {
    constructor(): this;
    coords: MSHTML$IWebGeocoordinates;
    timeStamp: number;
  }

  declare class MSHTML$WebGeopositionError {
    constructor(): this;
    code: number;
    message: string;
  }

  declare class MSHTML$XDomainRequest {
    constructor(): this;
    //constructor: any;
  }

  declare interface MSHTML$XDomainRequestFactory {
    create(): MSHTML$IHTMLXDomainRequest;
    (): MSHTML$IHTMLXDomainRequest;
  }

  declare class MSHTML$XMLHttpRequestEventTarget {
    constructor(): this;
    addEventListener(type: string, listener: any, useCapture: boolean): void;
    dispatchEvent(evt: MSHTML$IDOMEvent): boolean;
    removeEventListener(type: string, listener: any, useCapture: boolean): void;
  }

  declare class MSHTML$XMLSerializer {
    constructor(): this;
    serializeToString(pNode: MSHTML$IHTMLDOMNode): string;
  }
  declare interface ActiveXObject {
    on(
      obj: MSHTML$HTMLNamespace,
      event: "onreadystatechange",
      argNames: ["pEvtObj"],
      handler: (parameter: {
        +pEvtObj: MSHTML$IHTMLEventObj
      }) => void
    ): void;
    on(
      obj: MSHTML$HTMLWindow2,
      event: "onerror",
      argNames: ["description", "url", "line"],
      handler: (parameter: {
        +description: string,
        +url: string,
        +line: number
      }) => void
    ): void;
    on(
      obj: MSHTML$HTMLWindowProxy,
      event: "onerror",
      argNames: ["description", "url", "line"],
      handler: (parameter: {
        +description: string,
        +url: string,
        +line: number
      }) => void
    ): void;
    on(
      obj: MSHTML$Scriptlet,
      event: "onscriptletevent",
      argNames: ["name", "eventData"],
      handler: (parameter: {
        +name: string,
        +eventData: any
      }) => void
    ): void;
    on(
      obj: MSHTML$HTMLAnchorElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLAreaElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLAudioElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLBaseElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLBaseFontElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLBGsound,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLBlockElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLBody,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselect"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLBRElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLButtonElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLCanvasElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLCommentElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLDDElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLDivElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLDivPosition,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselect"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLDListElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLDocument,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforeupdate"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondragstart"
        | "onerrorupdate"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onmousedown"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onpropertychange"
        | "onreadystatechange"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onselectionchange"
        | "onselectstart"
        | "onstop",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLDTElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLEmbed,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLFieldSetElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselect"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLFontElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLFormElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onreset"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart"
        | "onsubmit",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLFrameBase,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLFrameElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLFrameSetSite,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLGenericElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLHeadElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLHeaderElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLHRElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLHtmlElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLIFrame,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLImg,
      event:
        | "onabort"
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerror"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onload"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLInputButtonElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLInputElement,
      event:
        | "onabort"
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerror"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onload"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselect"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLInputFileElement,
      event:
        | "onabort"
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerror"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onload"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselect"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$htmlInputImage,
      event:
        | "onabort"
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerror"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onload"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLInputTextElement,
      event:
        | "onabort"
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerror"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onload"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselect"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLIsIndexElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLLabelElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLLegendElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselect"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLLIElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLLinkElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerror"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onload"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLListElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLMapElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLMarqueeElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "onbounce"
        | "oncellchange"
        | "onchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfinish"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselect"
        | "onselectstart"
        | "onstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLMediaElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLMetaElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLNextIdElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLNoShowElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLObjectElement,
      event:
        | "onafterupdate"
        | "onbeforeupdate"
        | "oncellchange"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "onerror"
        | "onerrorupdate"
        | "onreadystatechange"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLOListElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLOptionButtonElement,
      event:
        | "onabort"
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerror"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onload"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselect"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLOptionElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLParaElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLParamElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLPhraseElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLProgressElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLRichtextElement,
      event:
        | "onabort"
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerror"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onload"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselect"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLScriptElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerror"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLSelectElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLSemanticElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLSourceElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLSpanElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLSpanFlow,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselect"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLStyleElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerror"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onload"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLTable,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLTableCaption,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselect"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLTableCell,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselect"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLTableCol,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLTableRow,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLTableSection,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLTextAreaElement,
      event:
        | "onabort"
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerror"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onload"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselect"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLTextElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLTitleElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLUListElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLUnknownElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLVideoElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLWindow2,
      event:
        | "onafterprint"
        | "onbeforeprint"
        | "onbeforeunload"
        | "onblur"
        | "onfocus"
        | "onhelp"
        | "onload"
        | "onresize"
        | "onscroll"
        | "onunload",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLWindowProxy,
      event:
        | "onafterprint"
        | "onbeforeprint"
        | "onbeforeunload"
        | "onblur"
        | "onfocus"
        | "onhelp"
        | "onload"
        | "onresize"
        | "onscroll"
        | "onunload",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLWndOptionElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLWndSelectElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$HTMLXMLHttpRequest,
      event: "onreadystatechange" | "ontimeout",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$OldHTMLDocument,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforeupdate"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondragstart"
        | "onerrorupdate"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onmousedown"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onpropertychange"
        | "onreadystatechange"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onselectionchange"
        | "onselectstart"
        | "onstop",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$OldHTMLFormElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onreset"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart"
        | "onsubmit",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$Scriptlet,
      event:
        | "onclick"
        | "ondblclick"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onmousedown"
        | "onmousemove"
        | "onmouseup"
        | "onreadystatechange",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGAElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGCircleElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGClipPathElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGDefsElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGEllipseElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGGElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGGradientElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGImageElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGLineElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGMarkerElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGMaskElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGPathElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGPatternElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGPolygonElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGPolylineElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGRectElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGScriptElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGStopElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGSVGElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGSymbolElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGTextElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGTextPathElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGTSpanElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGUseElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
    on(
      obj: MSHTML$SVGViewElement,
      event:
        | "onactivate"
        | "onafterupdate"
        | "onbeforeactivate"
        | "onbeforecopy"
        | "onbeforecut"
        | "onbeforedeactivate"
        | "onbeforeeditfocus"
        | "onbeforepaste"
        | "onbeforeupdate"
        | "onblur"
        | "oncellchange"
        | "onclick"
        | "oncontextmenu"
        | "oncontrolselect"
        | "oncopy"
        | "oncut"
        | "ondataavailable"
        | "ondatasetchanged"
        | "ondatasetcomplete"
        | "ondblclick"
        | "ondeactivate"
        | "ondrag"
        | "ondragend"
        | "ondragenter"
        | "ondragleave"
        | "ondragover"
        | "ondragstart"
        | "ondrop"
        | "onerrorupdate"
        | "onfilterchange"
        | "onfocus"
        | "onfocusin"
        | "onfocusout"
        | "onhelp"
        | "onkeydown"
        | "onkeypress"
        | "onkeyup"
        | "onlayoutcomplete"
        | "onlosecapture"
        | "onmousedown"
        | "onmouseenter"
        | "onmouseleave"
        | "onmousemove"
        | "onmouseout"
        | "onmouseover"
        | "onmouseup"
        | "onmousewheel"
        | "onmove"
        | "onmoveend"
        | "onmovestart"
        | "onpage"
        | "onpaste"
        | "onpropertychange"
        | "onreadystatechange"
        | "onresize"
        | "onresizeend"
        | "onresizestart"
        | "onrowenter"
        | "onrowexit"
        | "onrowsdelete"
        | "onrowsinserted"
        | "onscroll"
        | "onselectstart",
      handler: (parameter: {}) => void
    ): void;
  }
  declare interface ActiveXObjectNameMap {
    htmlfile: MSHTML$HTMLDocument;
    "ScriptBridge.ScriptBridge": MSHTML$Scriptlet;
    "TemplatePrinter.TemplatePrinter": MSHTML$CTemplatePrinter;
  }
}
