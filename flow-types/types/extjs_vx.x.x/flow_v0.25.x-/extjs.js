declare module "extjs" {
  declare var npm$namespace$Ext: {
    addBehaviors: typeof Ext$addBehaviors,
    addNamespaces: typeof Ext$addNamespaces,
    application: typeof Ext$application,
    apply: typeof Ext$apply,
    applyIf: typeof Ext$applyIf,
    batchLayouts: typeof Ext$batchLayouts,
    bind: typeof Ext$bind,
    callback: typeof Ext$callback,
    clean: typeof Ext$clean,
    clone: typeof Ext$clone,
    coerce: typeof Ext$coerce,
    copyTo: typeof Ext$copyTo,
    create: typeof Ext$create,
    createByAlias: typeof Ext$createByAlias,
    createWidget: typeof Ext$createWidget,
    decode: typeof Ext$decode,
    defer: typeof Ext$defer,
    define: typeof Ext$define,
    deprecate: typeof Ext$deprecate,
    destroy: typeof Ext$destroy,
    destroyMembers: typeof Ext$destroyMembers,
    each: typeof Ext$each,
    encode: typeof Ext$encode,
    escapeRe: typeof Ext$escapeRe,
    exclude: typeof Ext$exclude,
    extend: typeof Ext$extend,
    flatten: typeof Ext$flatten,
    fly: typeof Ext$fly,
    get: typeof Ext$get,
    getBody: typeof Ext$getBody,
    getClass: typeof Ext$getClass,
    getClassName: typeof Ext$getClassName,
    getCmp: typeof Ext$getCmp,
    getDoc: typeof Ext$getDoc,
    getDom: typeof Ext$getDom,
    getHead: typeof Ext$getHead,
    getNamespace: typeof Ext$getNamespace,
    getOrientation: typeof Ext$getOrientation,
    getScrollBarWidth: typeof Ext$getScrollBarWidth,
    getScrollbarSize: typeof Ext$getScrollbarSize,
    getStore: typeof Ext$getStore,
    getVersion: typeof Ext$getVersion,
    htmlDecode: typeof Ext$htmlDecode,
    htmlEncode: typeof Ext$htmlEncode,
    id: typeof Ext$id,
    identityFn: typeof Ext$identityFn,
    invoke: typeof Ext$invoke,
    isArray: typeof Ext$isArray,
    isBoolean: typeof Ext$isBoolean,
    isDate: typeof Ext$isDate,
    isDefined: typeof Ext$isDefined,
    isElement: typeof Ext$isElement,
    isEmpty: typeof Ext$isEmpty,
    isFunction: typeof Ext$isFunction,
    isIterable: typeof Ext$isIterable,
    isNumber: typeof Ext$isNumber,
    isNumeric: typeof Ext$isNumeric,
    isObject: typeof Ext$isObject,
    isPrimitive: typeof Ext$isPrimitive,
    isString: typeof Ext$isString,
    isTextNode: typeof Ext$isTextNode,
    iterate: typeof Ext$iterate,
    log: typeof Ext$log,
    max: typeof Ext$max,
    mean: typeof Ext$mean,
    merge: typeof Ext$merge,
    min: typeof Ext$min,
    namespace: typeof Ext$namespace,
    ns: typeof Ext$ns,
    num: typeof Ext$num,
    on: typeof Ext$on,
    onDocumentReady: typeof Ext$onDocumentReady,
    onReady: typeof Ext$onReady,
    override: typeof Ext$override,
    partition: typeof Ext$partition,
    pass: typeof Ext$pass,
    pluck: typeof Ext$pluck,
    preg: typeof Ext$preg,
    query: typeof Ext$query,
    regModel: typeof Ext$regModel,
    regStore: typeof Ext$regStore,
    removeNode: typeof Ext$removeNode,
    require: typeof Ext$require,
    resumeLayouts: typeof Ext$resumeLayouts,
    select: typeof Ext$select,
    setGlyphFontFamily: typeof Ext$setGlyphFontFamily,
    setVersion: typeof Ext$setVersion,
    sum: typeof Ext$sum,
    suspendLayouts: typeof Ext$suspendLayouts,
    syncRequire: typeof Ext$syncRequire,
    toArray: typeof Ext$toArray,
    toSentence: typeof Ext$toSentence,
    type: typeof Ext$type,
    typeOf: typeof Ext$typeOf,
    un: typeof Ext$un,
    unique: typeof Ext$unique,
    urlAppend: typeof Ext$urlAppend,
    urlDecode: typeof Ext$urlDecode,
    urlEncode: typeof Ext$urlEncode,
    value: typeof Ext$value,
    valueFrom: typeof Ext$valueFrom,
    widget: typeof Ext$widget,
    zip: typeof Ext$zip,
    BLANK_IMAGE_URL: typeof Ext$BLANK_IMAGE_URL,
    SSL_SECURE_URL: typeof Ext$SSL_SECURE_URL,
    USE_NATIVE_JSON: typeof Ext$USE_NATIVE_JSON,
    chromeVersion: typeof Ext$chromeVersion,
    emptyFn: typeof Ext$emptyFn,
    emptyString: typeof Ext$emptyString,
    enableFx: typeof Ext$enableFx,
    enableGarbageCollector: typeof Ext$enableGarbageCollector,
    enableListenerCollection: typeof Ext$enableListenerCollection,
    enableNestedListenerRemoval: typeof Ext$enableNestedListenerRemoval,
    enumerables: typeof Ext$enumerables,
    firefoxVersion: typeof Ext$firefoxVersion,
    globalEvents: typeof Ext$globalEvents,
    ieVersion: typeof Ext$ieVersion,
    isChrome: typeof Ext$isChrome,
    isFF10: typeof Ext$isFF10,
    isFF3_0: typeof Ext$isFF3_0,
    isFF3_5: typeof Ext$isFF3_5,
    isFF3_6: typeof Ext$isFF3_6,
    isFF4: typeof Ext$isFF4,
    isFF5: typeof Ext$isFF5,
    isGecko: typeof Ext$isGecko,
    isGecko10: typeof Ext$isGecko10,
    isGecko3: typeof Ext$isGecko3,
    isGecko4: typeof Ext$isGecko4,
    isGecko5: typeof Ext$isGecko5,
    isIE: typeof Ext$isIE,
    isIE10: typeof Ext$isIE10,
    isIE10m: typeof Ext$isIE10m,
    isIE10p: typeof Ext$isIE10p,
    isIE6: typeof Ext$isIE6,
    isIE7: typeof Ext$isIE7,
    isIE7m: typeof Ext$isIE7m,
    isIE7p: typeof Ext$isIE7p,
    isIE8: typeof Ext$isIE8,
    isIE8m: typeof Ext$isIE8m,
    isIE8p: typeof Ext$isIE8p,
    isIE9: typeof Ext$isIE9,
    isIE9m: typeof Ext$isIE9m,
    isIE9p: typeof Ext$isIE9p,
    isLinux: typeof Ext$isLinux,
    isMac: typeof Ext$isMac,
    isOpera: typeof Ext$isOpera,
    isOpera10_5: typeof Ext$isOpera10_5,
    isReady: typeof Ext$isReady,
    isSafari: typeof Ext$isSafari,
    isSafari2: typeof Ext$isSafari2,
    isSafari3: typeof Ext$isSafari3,
    isSafari4: typeof Ext$isSafari4,
    isSafari5: typeof Ext$isSafari5,
    isSafari5_0: typeof Ext$isSafari5_0,
    isSecure: typeof Ext$isSecure,
    isWebKit: typeof Ext$isWebKit,
    isWindows: typeof Ext$isWindows,
    name: typeof Ext$name,
    operaVersion: typeof Ext$operaVersion,
    safariVersion: typeof Ext$safariVersion,
    useShims: typeof Ext$useShims,
    webKitVersion: typeof Ext$webKitVersion
  };
  declare export type Ext$IAbstractComponent = {
    /**
     * [Config Option] (String/Object)
     */
    autoEl?: any,

    /**
     * [Config Option] (Ext.ComponentLoader/Object/String/Boolean)
     */
    autoLoad?: any,

    /**
     * [Config Option] (Boolean/String/HTMLElement/Ext.Element)
     */
    autoRender?: any,

    /**
     * [Config Option] (Boolean)
     */
    autoShow?: boolean,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Number/String/Boolean)
     */
    border?: any,

    /**
     * [Config Option] (Object[])
     */
    childEls?: any[],

    /**
     * [Config Option] (String)
     */
    cls?: string,

    /**
     * [Config Option] (String)
     */
    componentCls?: string,

    /**
     * [Config Option] (String/Object)
     */
    componentLayout?: any,

    /**
     * [Config Option] (String)
     */
    contentEl?: string,

    /**
     * [Config Option] (Object)
     */
    Ext$data?: any,

    /**
     * [Config Option] (Boolean)
     */
    disabled?: boolean,

    /**
     * [Config Option] (String)
     */
    disabledCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    draggable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    floating?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    frame?: boolean,

    /**
     * [Config Option] (Number)
     */
    height?: number,

    /**
     * [Config Option] (Boolean)
     */
    hidden?: boolean,

    /**
     * [Config Option] (String)
     */
    hideMode?: string,

    /**
     * [Config Option] (String/Object)
     */
    html?: any,

    /**
     * [Config Option] (String)
     */
    Ext$id?: string,

    /**
     * [Config Option] (String)
     */
    itemId?: string,

    /**
     * [Config Option] (Ext.ComponentLoader/Object)
     */
    loader?: any,

    /**
     * [Config Option] (Number/String)
     */
    margin?: any,

    /**
     * [Config Option] (Number)
     */
    maxHeight?: number,

    /**
     * [Config Option] (Number)
     */
    maxWidth?: number,

    /**
     * [Config Option] (Number)
     */
    minHeight?: number,

    /**
     * [Config Option] (Number)
     */
    minWidth?: number,

    /**
     * [Config Option] (String)
     */
    overCls?: string,

    /**
     * [Config Option] (Number/String)
     */
    padding?: any,

    /**
     * [Config Option] (Ext.AbstractPlugin[]/Ext.AbstractPlugin/Object[]/Object/Ext.enums.Plugin[]/Ext.enums.Plugin)
     */
    plugins?: any,

    /**
     * [Config Option] (Object)
     */
    renderData?: any,

    /**
     * [Config Option] (Object)
     */
    renderSelectors?: any,

    /**
     * [Config Option] (String/HTMLElement/Ext.Element)
     */
    renderTo?: any,

    /**
     * [Config Option] (Ext.XTemplate/String/String[])
     */
    renderTpl?: any,

    /**
     * [Config Option] (Boolean)
     */
    rtl?: boolean,

    /**
     * [Config Option] (Boolean/Number)
     */
    shrinkWrap?: any,

    /**
     * [Config Option] (String/Object)
     */
    style?: any,

    /**
     * [Config Option] (Ext.XTemplate/Ext.Template/String/String[])
     */
    tpl?: any,

    /**
     * [Config Option] (String)
     */
    tplWriteMode?: string,

    /**
     * [Config Option] (String)
     */
    ui?: string,

    /**
     * [Config Option] (Number)
     */
    width?: number,

    /**
     * [Config Option] (Ext.enums.Widget)
     */
    xtype?: Ext$Ext$enums.enums$IWidget,

    /**
     * [Property] (Boolean)
     */
    _isLayoutRoot?: boolean,

    /**
     * [Property] (String)
     */
    contentPaddingProperty?: string,

    /**
     * [Property] (Object)
     */
    frameSize?: any,

    /**
     * [Property] (Boolean)
     */
    isComponent?: boolean,

    /**
     * [Property] (Boolean)
     */
    maskOnDisable?: boolean,

    /**
     * [Property] (Ext.Container)
     */
    ownerCt?: Ext$container$IContainer,

    /**
     * [Property] (Boolean)
     */
    rendered?: boolean,

    /**
     * [Method] Adds each argument passed to this method to the childEls array
     */
    addChildEls?: () => void,

    /**
     * [Method] Adds a CSS class to the top level element representing this component
     * @param cls String/String[] The CSS class name to add.
     * @returns Ext.Component Returns the Component to allow method chaining.
     */
    addClass?: (cls?: any) => Ext$component$IComponent,

    /**
     * [Method] Adds a CSS class to the top level element representing this component
     * @param cls String/String[] The CSS class name to add.
     * @returns Ext.Component Returns the Component to allow method chaining.
     */
    addCls?: (cls?: any) => Ext$component$IComponent,

    /**
     * [Method] Adds a cls to the uiCls array which will also call addUIClsToElement and adds to all elements of this component
     * @param classes String/String[] A string or an array of strings to add to the uiCls.
     * @param skip Object (Boolean) skip true to skip adding it to the class and do it later (via the return).
     */
    addClsWithUI?: (classes?: any, skip?: any) => void,

    /**
     * [Method] Adds the specified events to the list of events which this Observable may fire
     * @param eventNames Object/String... Either an object with event names as properties with a value of true. For example: this.addEvents({  storeloaded: true,  storecleared: true });  Or any number of event names as separate parameters. For example: this.addEvents('storeloaded', 'storecleared');
     */
    addEvents?: (eventNames?: any) => void,

    /**
     * [Method] Appends an event handler to this object
     * @param element Object
     * @param listeners Object
     * @param scope Object
     * @param options Object
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    addListener?: (
      element?: any,
      listeners?: any,
      scope?: any,
      options?: any
    ) => any,

    /**
     * [Method] Adds listeners to any Observable object or Ext Element which are automatically removed when this Component is destr
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    addManagedListener?: (
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ) => any,

    /**
     * [Method] Save a property to the given state object if it is not its default or configured value
     * @param state Object The state object.
     * @param propName String The name of the property on this object to save.
     * @param value String The value of the state property (defaults to this[propName]).
     * @returns Boolean The state object or a new object if state was null and the property was saved.
     */
    addPropertyToState?: (
      Ext$state?: any,
      propName?: string,
      Ext$value?: string
    ) => boolean,

    /**
     * [Method] Add events that will trigger the state to be saved
     * @param events String/String[] The event name or an array of event names.
     */
    addStateEvents?: (events?: any) => void,

    /**
     * [Method] Method which adds a specified UI  uiCls to the components element
     * @param ui String The UI to remove from the element.
     */
    addUIClsToElement?: (ui?: string) => void,

    /**
     * [Method] Called by the layout system after the Component has been laid out
     * @param width Number The width that was set
     * @param height Number The height that was set
     * @param oldWidth Number/undefined The old width, or undefined if this was the initial layout.
     * @param oldHeight Number/undefined The old height, or undefined if this was the initial layout.
     */
    afterComponentLayout?: (
      width?: number,
      height?: number,
      oldWidth?: any,
      oldHeight?: any
    ) => void,

    /**
     * [Method] Allows addition of behavior after rendering is complete
     */
    afterRender?: () => void,

    /**
     * [Method] Template method called after a Component has been positioned
     * @param x Number
     * @param y Number
     */
    afterSetPosition?: (x?: number, y?: number) => void,

    /**
     * [Method] Aligns the element with another element relative to the specified anchor points
     * @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to.
     * @param position String The position to align to
     * @param offsets Number[] Offset the positioning by [x, y]
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.util.Positionable this
     */
    alignTo?: (
      element?: any,
      position?: string,
      offsets?: number[],
      animate?: any
    ) => Ext$Ext$util.util$IPositionable,

    /**
     * [Method] Anchors an element to another element and realigns it when the window is resized
     * @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to.
     * @param position String The position to align to
     * @param offsets Number[] Offset the positioning by [x, y]
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @param monitorScroll Boolean/Number True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay in milliseconds.
     * @param callback Function The function to call after the animation finishes
     * @returns Ext.util.Positionable this
     */
    anchorTo?: (
      element?: any,
      position?: string,
      offsets?: number[],
      animate?: any,
      monitorScroll?: any,
      Ext$callback?: any
    ) => Ext$Ext$util.util$IPositionable,

    /**
     * [Method] Performs custom animation on this object. ...
     */
    animate?: any,

    /**
     * [Method] Applies the state to the object
     * @param state Object The state
     */
    applyState?: (Ext$state?: any) => void,

    /**
     * [Method] Template method to do any pre blur processing
     * @param e Ext.EventObject The event object
     */
    beforeBlur?: (e?: Ext$Ext$IEventObject) => void,

    /**
     * [Method] Occurs before componentLayout is run
     * @param adjWidth Number The box-adjusted width that was set.
     * @param adjHeight Number The box-adjusted height that was set.
     */
    beforeComponentLayout?: (adjWidth?: number, adjHeight?: number) => void,

    /**
     * [Method] Invoked before the Component is destroyed
     */
    beforeDestroy?: () => void,

    /**
     * [Method] Template method to do any pre focus processing
     * @param e Ext.EventObject The event object
     */
    beforeFocus?: (e?: Ext$Ext$IEventObject) => void,

    /**
     * [Method] Occurs before componentLayout is run
     */
    beforeLayout?: () => void,

    /**
     * [Method] Calculates the new x y position to move this Positionable into a constrain region
     * @param constrainTo String/HTMLElement/Ext.Element/Ext.util.Region The Element or Region into which this Component is to be constrained. Defaults to the element into which this Positionable was rendered, or this Component's {@link Ext.Component.constrainTo.
     * @param proposedPosition Number[] A proposed [X, Y] position to test for validity and to coerce into constraints instead of using this Positionable's current position.
     * @param local Boolean The proposedPosition is local (relative to floatParent if a floating Component)
     * @param proposedSize Number[] A proposed [width, height] size to use when calculating constraints instead of using this Positionable's current size.
     * @returns Number[] If the element needs to be translated, the new [X, Y] position within constraints if possible, giving priority to keeping the top and left edge in the constrain region. Otherwise, false.
     */
    calculateConstrainedPosition?: (
      constrainTo?: any,
      proposedPosition?: number[],
      local?: boolean,
      proposedSize?: number[]
    ) => number[],

    /**
     * [Method] Removes all listeners for this object including the managed listeners
     */
    clearListeners?: () => void,

    /**
     * [Method] Removes all managed listeners for this object
     */
    clearManagedListeners?: () => void,

    /**
     * [Method] Destroys the Component
     */
    Ext$destroy?: () => void,

    /**
     * [Method] Disable the component
     * @param silent Boolean Passing true will suppress the disable event from being fired.
     */
    disable?: (silent?: boolean) => void,

    /**
     * [Method] Handles autoRender
     */
    doAutoRender?: () => void,

    /**
     * [Method] This method needs to be called whenever you change something on this component that requires the Component s layout t
     * @returns Ext.container.Container this
     */
    doComponentLayout?: () => Ext$Ext$container.container$IContainer,

    /**
     * [Method] Enable the component
     * @param silent Boolean Passing true will suppress the enable event from being fired.
     */
    enable?: (silent?: boolean) => void,

    /**
     * [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
     * @param eventNames String/String[] The event name to bubble, or an Array of event names.
     */
    enableBubble?: (eventNames?: any) => void,

    /**
     * [Method] Ensures that this component is attached to document body
     * @param runLayout Boolean True to run the component's layout.
     */
    ensureAttachedToBody?: (runLayout?: boolean) => void,

    /**
     * [Method] Retrieves plugin from this component s collection by its ptype
     * @param ptype String The Plugin's ptype as specified by the class's alias configuration.
     * @returns Ext.AbstractPlugin plugin instance.
     */
    findPlugin?: (ptype?: string) => Ext$Ext$IAbstractPlugin,

    /**
     * [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
     * @param eventName String The name of the event to fire.
     * @param args Object... Variable number of parameters are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    fireEvent?: (eventName: string, ...args: any[]) => boolean,

    /**
     * [Method] Fires the specified event with the passed parameter list
     * @param eventName String The name of the event to fire.
     * @param args Object[] An array of parameters which are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    fireEventArgs?: (eventName?: string, args?: any[]) => boolean,

    /**
     * [Method] Forces this component to redo its componentLayout
     */
    forceComponentLayout?: () => void,

    /**
     * [Method] Returns the current animation if this object has any effects actively running or queued else returns false
     * @returns Ext.fx.Anim/Boolean Anim if element has active effects, else false
     */
    getActiveAnimation?: () => any,

    /**
     * [Method] Gets the x y coordinates to align this element with another element
     * @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to.
     * @param position String The position to align to
     * @param offsets Number[] Offset the positioning by [x, y]
     * @returns Number[] [x, y]
     */
    getAlignToXY?: (
      element?: any,
      position?: string,
      offsets?: number[]
    ) => number[],

    /**
     * [Method] Gets the x y coordinates specified by the anchor position on the element
     * @param anchor String The specified anchor position. See alignTo for details on supported anchor positions.
     * @param local Boolean True to get the local (element top/left-relative) anchor position instead of page coordinates
     * @param size Object An object containing the size to use for calculating anchor position {width: (target width), height: (target height)} (defaults to the element's current size)
     * @returns Number[] [x, y] An array containing the element's x and y coordinates
     */
    getAnchorXY?: (anchor?: string, local?: boolean, size?: any) => number[],

    /**
     * [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati
     * @param contentBox Boolean If true a box for the content of the element is returned.
     * @param local Boolean If true the element's left and top relative to its offsetParent are returned instead of page x/y.
     * @returns Object box An object in the format: {  x: &lt;Element's X position&gt;,  y: &lt;Element's Y position&gt;,  left: &lt;Element's X position (an alias for x)&gt;,  top: &lt;Element's Y position (an alias for y)&gt;,  width: &lt;Element's width&gt;,  height: &lt;Element's height&gt;,  bottom: &lt;Element's lower bound&gt;,  right: &lt;Element's rightmost bound&gt; }  The returned object may also be addressed as an Array where index 0 contains the X position and index 1 contains the Y position. The result may also be used for setXY
     */
    getBox?: (contentBox?: boolean, local?: boolean) => any,

    /**
     * [Method] Provides the link for Observable s fireEvent method to bubble up the ownership hierarchy
     * @returns Ext.container.Container the Container which owns this Component.
     */
    getBubbleTarget?: () => Ext$Ext$container.container$IContainer,

    /**
     * [Method] Returns the X Y vector by which this Positionable s element must be translated to make a best attempt to constrain
     * @param constrainTo Ext.util.Positionable/HTMLElement/String/Ext.util.Region The Positionable, HTMLElement, element id, or Region into which the element is to be constrained.
     * @param proposedPosition Number[] A proposed [X, Y] position to test for validity and to produce a vector for instead of using the element's current position
     * @param proposedSize Number[] A proposed [width, height] size to constrain instead of using the element's current size
     * @returns Number[]/Boolean If the element needs to be translated, an [X, Y] vector by which this element must be translated. Otherwise, false.
     */
    getConstrainVector?: (
      constrainTo?: any,
      proposedPosition?: number[],
      proposedSize?: number[]
    ) => any,

    /**
     * [Method] Retrieves the top level element representing this component
     * @returns Ext.dom.Element
     */
    getEl?: () => Ext$Ext$dom.target$IElement,

    /**
     * [Method] Gets the current height of the component s underlying element
     * @returns Number
     */
    getHeight?: () => number,

    /**
     * [Method] Retrieves the id of this component
     * @returns String
     */
    getId?: () => string,

    /**
     * [Method] This function takes the position argument passed to onRender and returns a DOM element that you can use in the insert
     * @param position String/Number/Ext.dom.Element/HTMLElement Index, element id or element you want to put this component before.
     * @returns HTMLElement DOM element that you can use in the insertBefore
     */
    getInsertPosition?: (position?: any) => HTMLElement,

    /**
     * [Method] Returns the value of itemId assigned to this component or when that is not set returns the value of id
     * @returns String
     */
    getItemId?: () => string,

    /**
     * [Method] Gets the Ext ComponentLoader for this Component
     * @returns Ext.ComponentLoader The loader instance, null if it doesn't exist.
     */
    getLoader?: () => Ext$Ext$IComponentLoader,

    /**
     * [Method] Overridden in Ext rtl AbstractComponent
     * @returns Number The local x coordinate
     */
    getLocalX?: () => number,

    /**
     * [Method] Overridden in Ext rtl AbstractComponent
     * @returns Number[] The local XY position of the element
     */
    getLocalXY?: () => number[],

    /**
     * [Method] Returns the y coordinate of this element reletive to its offsetParent
     * @returns Number The local y coordinate
     */
    getLocalY?: () => number,

    /**
     * [Method] Returns the offsets of this element from the passed element
     * @param offsetsTo Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or element id to get get the offsets from.
     * @returns Number[] The XY page offsets (e.g. [100, -200])
     */
    getOffsetsTo?: (offsetsTo?: any) => number[],

    /**
     * [Method] Retrieves a plugin from this component s collection by its pluginId
     * @param pluginId String
     * @returns Ext.AbstractPlugin plugin instance.
     */
    getPlugin?: (pluginId?: string) => Ext$Ext$IAbstractPlugin,

    /**
     * [Method] Returns a region object that defines the area of this element
     * @returns Ext.util.Region A Region containing "top, left, bottom, right" properties.
     */
    getRegion?: () => Ext$Ext$util.util$IRegion,

    /**
     * [Method] Gets the current size of the component s underlying element
     * @returns Object An object containing the element's size {width: (element width), height: (element height)}
     */
    getSize?: () => any,

    /**
     * [Method] Returns an object that describes how this component s width and height are managed
     * @param ownerCtSizeModel Object
     * @returns Object The size model for this component.
     */
    getSizeModel?: (ownerCtSizeModel?: any) => any,

    /**
     * [Method] The supplied default state gathering method for the AbstractComponent class
     * @returns Object
     */
    getState?: () => any,

    /**
     * [Method] Returns the content region of this element
     * @returns Ext.util.Region A Region containing "top, left, bottom, right" member data.
     */
    getViewRegion?: () => Ext$Ext$util.util$IRegion,

    /**
     * [Method] Gets the current width of the component s underlying element
     * @returns Number
     */
    getWidth?: () => number,

    /**
     * [Method] Gets the current X position of the DOM element based on page coordinates
     * @returns Number The X position of the element
     */
    getX?: () => number,

    /**
     * [Method] Returns this Component s xtype hierarchy as a slash delimited string
     * @returns String The xtype hierarchy string
     */
    getXTypes?: () => string,

    /**
     * [Method] Gets the current position of the DOM element based on page coordinates
     * @returns Number[] The XY position of the element
     */
    getXY?: () => number[],

    /**
     * [Method] Gets the current Y position of the DOM element based on page coordinates
     * @returns Number The Y position of the element
     */
    getY?: () => number,

    /**
     * [Method] Returns the current animation if this object has any effects actively running or queued else returns false
     * @returns Ext.fx.Anim/Boolean Anim if element has active effects, else false
     */
    hasActiveFx?: () => any,

    /**
     * [Method] Checks if the specified CSS class exists on this element s DOM node
     * @param className String The CSS class to check for.
     * @returns Boolean true if the class exists, else false.
     */
    hasCls?: (className?: string) => boolean,

    /**
     * [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles
     * @param eventName String The name of the event to check for
     * @returns Boolean true if the event is being listened for or bubbles, else false
     */
    hasListener?: (eventName?: string) => boolean,

    /**
     * [Method] Checks if there is currently a specified uiCls
     * @param cls String The cls to check.
     */
    hasUICls?: (cls?: string) => void,

    /**
     * [Method] Initialize any events on this component
     */
    initEvents?: () => void,

    /**
     * [Method] Initialized the renderData to be used when rendering the renderTpl
     * @returns Object Object with keys and values that are going to be applied to the renderTpl
     */
    initRenderData?: () => any,

    /**
     * [Method] Tests whether this Component matches the selector string
     * @param selector String The selector string to test against.
     * @returns Boolean true if this Component matches the selector.
     */
    is?: (selector?: string) => boolean,

    /**
     * [Method] Determines whether this component is the descendant of a particular container
     * @param container Ext.Container
     * @returns Boolean true if the component is the descendant of a particular container, otherwise false.
     */
    isDescendantOf?: (Ext$container?: Ext$container$IContainer) => boolean,

    /**
     * [Method] Method to determine whether this Component is currently disabled
     * @returns Boolean the disabled state of this Component.
     */
    isDisabled?: () => boolean,

    /**
     * [Method] Method to determine whether this Component is draggable
     * @returns Boolean the draggable state of this component.
     */
    isDraggable?: () => boolean,

    /**
     * [Method] Method to determine whether this Component is droppable
     * @returns Boolean the droppable state of this component.
     */
    isDroppable?: () => boolean,

    /**
     * [Method] Method to determine whether this Component is floating
     * @returns Boolean the floating state of this component.
     */
    isFloating?: () => boolean,

    /**
     * [Method] Method to determine whether this Component is currently set to hidden
     * @returns Boolean the hidden state of this Component.
     */
    isHidden?: () => boolean,

    /**
     * [Method] Determines whether this Component is the root of a layout
     */
    isLayoutRoot?: () => void,

    /**
     * [Method] Returns true if layout is suspended for this component
     * @returns Boolean true layout of this component is suspended.
     */
    isLayoutSuspended?: () => boolean,

    /**
     * [Method] Returns true if this component is visible
     * @param deep Boolean Pass true to interrogate the visibility status of all parent Containers to determine whether this Component is truly visible to the user. Generally, to determine whether a Component is hidden, the no argument form is needed. For example when creating dynamically laid out UIs in a hidden Container before showing them.
     * @returns Boolean true if this component is visible, false otherwise.
     */
    isVisible?: (deep?: boolean) => boolean,

    /**
     * [Method] Tests whether or not this Component is of a specific xtype
     * @param xtype String The xtype to check for this Component
     * @param shallow Boolean true to check whether this Component is directly of the specified xtype, false to check whether this Component is descended from the xtype.
     * @returns Boolean true if this component descends from the specified xtype, false otherwise.
     */
    isXType?: (xtype?: string, shallow?: boolean) => boolean,

    /**
     * [Method] Shorthand for addManagedListener
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    mon?: (
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ) => any,

    /**
     * [Method] Move the element relative to its current position
     * @param direction String Possible values are:  "l" (or "left") "r" (or "right") "t" (or "top", or "up") "b" (or "bottom", or "down")
     * @param distance Number How far to move the element in pixels
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     */
    move?: (direction?: string, distance?: number, animate?: any) => void,

    /**
     * [Method] Shorthand for removeManagedListener
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    mun?: (item?: any, ename?: any, fn?: any, scope?: any) => void,

    /**
     * [Method] Returns the next node in the Component tree in tree traversal order
     * @param selector String A ComponentQuery selector to filter the following nodes.
     * @returns Ext.Component The next node (or the next node which matches the selector). Returns null if there is no matching node.
     */
    nextNode?: (selector?: string) => Ext$component$IComponent,

    /**
     * [Method] Returns the next sibling of this Component
     * @param selector String A ComponentQuery selector to filter the following items.
     * @returns Ext.Component The next sibling (or the next sibling which matches the selector). Returns null if there is no matching sibling.
     */
    nextSibling?: (selector?: string) => Ext$component$IComponent,

    /**
     * [Method] Shorthand for addListener
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    Ext$on?: (eventName?: any, fn?: any, scope?: any, options?: any) => any,

    /**
     * [Method] Method to manage awareness of when components are added to their respective Container firing an added event
     * @param container Ext.container.Container Container which holds the component.
     * @param pos Number Position at which the component was added.
     */
    onAdded?: (
      Ext$container?: Ext$Ext$container.container$IContainer,
      pos?: number
    ) => void,

    /**
     * [Method] Allows addition of behavior to the disable operation
     */
    onDisable?: () => void,

    /**
     * [Method] Allows addition of behavior to the enable operation
     */
    onEnable?: () => void,

    /**
     * [Method] Called after the component is moved this method is empty by default but can be implemented by any subclass that need
     * @param x Number The new x position.
     * @param y Number The new y position.
     */
    onPosition?: (x?: number, y?: number) => void,

    /**
     * [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event
     * @param destroying Boolean Will be passed as true if the Container performing the remove operation will delete this Component upon remove.
     */
    onRemoved?: (destroying?: boolean) => void,

    /**
     * [Method] Template method called when this Component s DOM structure is created
     * @param parentNode Ext.core.Element The parent Element in which this Component's encapsulating element is contained.
     * @param containerIdx Number The index within the parent Container's child collection of this Component.
     */
    onRender?: (
      parentNode?: Ext$Ext$core.target$IElement,
      containerIdx?: number
    ) => void,

    /**
     * [Method] Allows addition of behavior to the resize operation
     * @param width Object
     * @param height Object
     * @param oldWidth Object
     * @param oldHeight Object
     */
    onResize?: (
      width?: any,
      height?: any,
      oldWidth?: any,
      oldHeight?: any
    ) => void,

    /**
     * [Method] Template method to do any post blur processing
     * @param e Ext.EventObject The event object
     */
    postBlur?: (e?: Ext$Ext$IEventObject) => void,

    /**
     * [Method] Returns the previous node in the Component tree in tree traversal order
     * @param selector String A ComponentQuery selector to filter the preceding nodes.
     * @returns Ext.Component The previous node (or the previous node which matches the selector). Returns null if there is no matching node.
     */
    previousNode?: (selector?: string) => Ext$component$IComponent,

    /**
     * [Method] Returns the previous sibling of this Component
     * @param selector String A ComponentQuery selector to filter the preceding items.
     * @returns Ext.Component The previous sibling (or the previous sibling which matches the selector). Returns null if there is no matching sibling.
     */
    previousSibling?: (selector?: string) => Ext$component$IComponent,

    /**
     * [Method] Called by Component doAutoRender Register a Container configured floating true with this Component s ZIndexManager
     * @param cmp Object
     */
    registerFloatingItem?: (cmp?: any) => void,

    /**
     * [Method] Relays selected events from the specified Observable as if the events were fired by this
     * @param origin Object The Observable whose events this object is to relay.
     * @param events String[] Array of event names to relay.
     * @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
     * @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or this.store.relayers.destroy();
     */
    relayEvents?: (origin?: any, events?: string[], prefix?: string) => any,

    /**
     * [Method] Remove any anchor to this element
     * @returns Ext.util.Positionable this
     */
    removeAnchor?: () => Ext$Ext$util.util$IPositionable,

    /**
     * [Method] Removes items in the childEls array based on the return value of a supplied test function
     * @param testFn Function The test function.
     */
    removeChildEls?: (testFn?: any) => void,

    /**
     * [Method] Removes a CSS class from the top level element representing this component
     * @param cls String/String[] The CSS class name to remove.
     * @returns Ext.Component Returns the Component to allow method chaining.
     */
    removeCls?: (cls?: any) => Ext$component$IComponent,

    /**
     * [Method] Removes a cls to the uiCls array which will also call removeUIClsFromElement and removes it from all elements of thi
     * @param cls String/String[] A string or an array of strings to remove to the uiCls.
     */
    removeClsWithUI?: (cls?: any) => void,

    /**
     * [Method] Removes an event handler
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    removeListener?: (eventName?: string, fn?: any, scope?: any) => void,

    /**
     * [Method] Removes listeners that were added by the mon method
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    removeManagedListener?: (
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Method which removes a specified UI  uiCls from the components element
     * @param ui String The UI to add to the element.
     */
    removeUIClsFromElement?: (ui?: string) => void,

    /**
     * [Method] Renders the Component into the passed HTML element
     * @param container Ext.Element/HTMLElement/String The element this Component should be rendered into. If it is being created from existing markup, this should be omitted.
     * @param position String/Number The element ID or DOM node index within the container before which this component will be inserted (defaults to appending to the end of the container)
     */
    render?: (Ext$container?: any, position?: any) => void,

    /**
     * [Method] Resumes firing of the named event s
     * @param eventName String... Multiple event names to resume.
     */
    resumeEvent?: (...eventName: any[]) => void,

    /**
     * [Method] Resumes firing events see suspendEvents
     */
    resumeEvents?: () => void,

    /**
     * [Method] Conditionally saves a single property from this object to the given state object
     * @param propName String The name of the property to save.
     * @param state Object The state object in to which to save the property.
     * @param stateName String The name to use for the property in state.
     * @returns Boolean True if the property was saved, false if not.
     */
    savePropToState?: (
      propName?: string,
      Ext$state?: any,
      stateName?: string
    ) => boolean,

    /**
     * [Method] Gathers additional named properties of the instance and adds their current values to the passed state object
     * @param propNames String/String[] The name (or array of names) of the property to save.
     * @param state Object The state object in to which to save the property values.
     * @returns Object state
     */
    savePropsToState?: (propNames?: any, Ext$state?: any) => any,

    /**
     * [Method] Saves the state of the object to the persistence store
     */
    saveState?: () => void,

    /**
     * [Method] Ensures that all effects queued after sequenceFx is called on this object are run in sequence
     * @returns Object this
     */
    sequenceFx?: () => any,

    /**
     * [Method]
     * @param border String/Number The border, see border. If a falsey value is passed the border will be removed.
     */
    setBorder?: (border?: any) => void,

    /**
     * [Method] Sets the element s box
     * @param box Object The box to fill {x, y, width, height}
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.util.Positionable this
     */
    setBox?: (box?: any, animate?: any) => Ext$Ext$util.util$IPositionable,

    /**
     * [Method] Enable or disable the component
     * @param disabled Boolean true to disable.
     */
    setDisabled?: (disabled?: boolean) => void,

    /**
     * [Method] Sets the dock position of this component in its parent panel
     * @param dock Object The dock position.
     * @param layoutParent Boolean true to re-layout parent.
     * @returns Ext.Component this
     */
    setDocked?: (
      dock?: any,
      layoutParent?: boolean
    ) => Ext$component$IComponent,

    /**
     * [Method] Sets the height of the component
     * @param height Number The new height to set. This may be one of:  A Number specifying the new height in the Element's Ext.Element.defaultUnits (by default, pixels). A String used to set the CSS height style. undefined to leave the height unchanged.
     * @returns Ext.Component this
     */
    setHeight?: (height?: number) => Ext$component$IComponent,

    /**
     * [Method] Overridden in Ext rtl AbstractComponent
     * @param x Object
     * @returns Ext.util.Positionable this
     */
    setLocalX?: (x?: any) => Ext$Ext$util.util$IPositionable,

    /**
     * [Method] Overridden in Ext rtl AbstractComponent
     * @param x Object
     * @param y Object
     * @returns Ext.util.Positionable this
     */
    setLocalXY?: (x?: any, y?: any) => Ext$Ext$util.util$IPositionable,

    /**
     * [Method] Sets the local y coordinate of this element using CSS style
     * @param y Object
     * @returns Ext.util.Positionable this
     */
    setLocalY?: (y?: any) => Ext$Ext$util.util$IPositionable,

    /**
     * [Method] Sets the margin on the target element
     * @param margin Number/String The margin to set. See the margin config.
     */
    setMargin?: (margin?: any) => void,

    /**
     * [Method] Sets the element s position and size to the specified region
     * @param region Ext.util.Region The region to fill
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.util.Positionable this
     */
    setRegion?: (
      region?: Ext$Ext$util.util$IRegion,
      animate?: any
    ) => Ext$Ext$util.util$IPositionable,

    /**
     * [Method] Sets the width and height of this Component
     * @param width Number/String/Object The new width to set. This may be one of:  A Number specifying the new width in the Element's Ext.Element.defaultUnits (by default, pixels). A String used to set the CSS width style. A size object in the format {width: widthValue, height: heightValue}. undefined to leave the width unchanged.
     * @param height Number/String The new height to set (not required if a size object is passed as the first arg). This may be one of:  A Number specifying the new height in the Element's Ext.Element.defaultUnits (by default, pixels). A String used to set the CSS height style. Animation may not be used. undefined to leave the height unchanged.
     * @returns Ext.Component this
     */
    setSize?: (width?: any, height?: any) => Ext$component$IComponent,

    /**
     * [Method] Sets the UI for the component
     * @param ui String The new UI for the component.
     */
    setUI?: (ui?: string) => void,

    /**
     * [Method] Convenience function to hide or show this component by Boolean
     * @param visible Boolean true to show, false to hide.
     * @returns Ext.Component this
     */
    setVisible?: (visible?: boolean) => Ext$component$IComponent,

    /**
     * [Method] Sets the width of the component
     * @param width Number The new width to setThis may be one of:  A Number specifying the new width in the Element's Ext.Element.defaultUnits (by default, pixels). A String used to set the CSS width style.
     * @returns Ext.Component this
     */
    setWidth?: (width?: number) => Ext$component$IComponent,

    /**
     * [Method] Sets the X position of the DOM element based on page coordinates
     * @param x Object
     * @param animate Object
     * @returns Ext.util.Positionable this
     */
    setX?: (x?: any, animate?: any) => Ext$Ext$util.util$IPositionable,

    /**
     * [Method] Sets the position of the DOM element in page coordinates
     * @param xy Object
     * @param animate Object
     * @returns Ext.util.Positionable this
     */
    setXY?: (xy?: any, animate?: any) => Ext$Ext$util.util$IPositionable,

    /**
     * [Method] Sets the Y position of the DOM element based on page coordinates
     * @param y Object
     * @param animate Object
     * @returns Ext.util.Positionable this
     */
    setY?: (y?: any, animate?: any) => Ext$Ext$util.util$IPositionable,

    /**
     * [Method] Stops any running effects and clears this object s internal effects queue if it contains any additional effects that
     * @returns Ext.Element The Element
     */
    stopAnimation?: () => Ext$target$IElement,

    /**
     * [Method] Stops any running effects and clears this object s internal effects queue if it contains any additional effects that
     * @returns Ext.Element The Element
     */
    stopFx?: () => Ext$target$IElement,

    /**
     * [Method] Suspends firing of the named event s
     * @param eventName String... Multiple event names to suspend.
     */
    suspendEvent?: (...eventName: any[]) => void,

    /**
     * [Method] Suspends the firing of all events
     * @param queueSuspended Boolean Pass as true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events.
     */
    suspendEvents?: (queueSuspended?: boolean) => void,

    /**
     * [Method] Ensures that all effects queued after syncFx is called on this object are run concurrently
     * @returns Object this
     */
    syncFx?: () => any,

    /**
     * [Method] Translates the passed page coordinates into left top css values for the element
     * @param x Number/Array The page x or an array containing [x, y]
     * @param y Number The page y, required if x is not an array
     * @returns Object An object with left and top properties. e.g. {left: (value), top: (value)}
     */
    translatePoints?: (x?: any, y?: number) => any,

    /**
     * [Method] Shorthand for removeListener
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    Ext$un?: (eventName?: string, fn?: any, scope?: any) => void,

    /**
     * [Method] Navigates up the ownership hierarchy searching for an ancestor Container which matches any passed simple selector or
     * @param selector String/Ext.Component The simple selector component or actual component to test. If not passed the immediate owner/activater is returned.
     * @param limit String/Number/Ext.Component This may be a selector upon which to stop the upward scan, or a limit of teh number of steps, or Component reference to stop on.
     * @returns Ext.container.Container The matching ancestor Container (or undefined if no match was found).
     */
    up?: (
      selector?: any,
      limit?: any
    ) => Ext$Ext$container.container$IContainer,

    /**
     * [Method] Update the content area of a component
     * @param htmlOrData String/Object If this component has been configured with a template via the tpl config then it will use this argument as data to populate the template. If this component was not configured with a template, the components content area will be updated via Ext.Element update.
     * @param loadScripts Boolean Only legitimate when using the html configuration.
     * @param callback Function Only legitimate when using the html configuration. Callback to execute when scripts have finished loading.
     */
    update?: (
      htmlOrData?: any,
      loadScripts?: boolean,
      Ext$callback?: any
    ) => void,

    /**
     * [Method] Updates this component s layout
     * @param options Object An object with layout options.
     */
    updateLayout?: (options?: any) => void
  } & Ext$field$IBase &
    undefined.util$IPositionable &
    undefined.util$IObservable &
    undefined.util$IAnimate &
    undefined.util$IElementContainer &
    undefined.util$IRenderable &
    undefined.state$IStateful;

  declare export class Ext$AbstractComponent {
    /**
     * [Method] Add methods  properties to the prototype of this class
     * @param members Object
     */
    static addMembers(members?: any): void;

    /**
     * [Method] Add  override static properties of this class
     * @param members Object
     * @returns Ext.Base this
     */
    static addStatics(members?: any): Ext$field$IBase;

    /**
     * [Method] Cancels layout of a component
     * @param comp Ext.Component
     */
    static cancelLayout(comp?: Ext$component$IComponent): void;

    /**
     * [Method] Create a new instance of this Class
     * @returns Object the created instance.
     */
    static create(): any;

    /**
     * [Method] Create aliases for existing prototype methods
     * @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
     * @param origin String/Object The original method name
     */
    static createAlias(alias?: any, origin?: any): void;

    /**
     * [Method] Performs all pending layouts that were scheduled while suspendLayouts was in effect
     */
    static flushLayouts(): void;

    /**
     * [Method] Get the current class name in string format
     * @returns String className
     */
    static getName(): string;

    /**
     * [Method] Adds members to class
     */
    static implement(): void;

    /**
     * [Method] Override members of this class
     * @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
     * @returns Ext.Base this class
     */
    static override(members?: any): Ext$field$IBase;

    /**
     * [Method] Resumes layout activity in the whole framework
     * @param flush Boolean true to perform all the pending layouts. This can also be achieved by calling flushLayouts directly.
     */
    static resumeLayouts(flush?: boolean): void;

    /**
     * [Method] Stops layouts from happening in the whole framework
     */
    static suspendLayouts(): void;

    /**
     * [Method] Updates layout of a component
     * @param comp Ext.Component The component to update.
     * @param defer Boolean true to just queue the layout if this component.
     */
    static updateLayout(
      comp?: Ext$component$IComponent,
      Ext$defer?: boolean
    ): void;
  }

  declare export type Ext$IAbstractManager = {
    /**
     * [Property] (Ext.util.HashMap)
     */
    all?: Ext$Ext$util.util$IHashMap,

    /**
     * [Method] Creates and returns an instance of whatever this manager manages based on the supplied type and config object
     * @param config Object The config object
     * @param defaultType String If no type is discovered in the config object, we fall back to this type
     * @returns Object The instance of whatever this manager is managing
     */
    Ext$create?: (config?: any, defaultType?: string) => any,

    /**
     * [Method] Executes the specified function once for each item in the collection
     * @param fn Function The function to execute.
     * @param scope Object The scope to execute in. Defaults to this.
     */
    Ext$each?: (fn?: any, scope?: any) => void,

    /**
     * [Method] Returns an item by id
     * @param id String The id of the item
     * @returns Object The item, undefined if not found.
     */
    Ext$get?: (Ext$id?: string) => any,

    /**
     * [Method] Gets the number of items in the collection
     * @returns Number The number of items in the collection.
     */
    getCount?: () => number,

    /**
     * [Method] Checks if an item type is registered
     * @param type String The mnemonic string by which the class may be looked up
     * @returns Boolean Whether the type is registered.
     */
    isRegistered?: (Ext$type?: string) => boolean,

    /**
     * [Method] Registers a function that will be called when an item with the specified id is added to the manager
     * @param id String The item id
     * @param fn Function The callback function. Called with a single parameter, the item.
     * @param scope Object The scope (this reference) in which the callback is executed. Defaults to the item.
     */
    onAvailable?: (Ext$id?: string, fn?: any, scope?: any) => void,

    /**
     * [Method] Registers an item to be managed
     * @param item Object The item to register
     */
    register?: (item?: any) => void,

    /**
     * [Method] Registers a new item constructor keyed by a type key
     * @param type String The mnemonic string by which the class may be looked up.
     * @param cls Function The new instance class.
     */
    registerType?: (Ext$type?: string, cls?: any) => void,

    /**
     * [Method] Unregisters an item by removing it from this manager
     * @param item Object The item to unregister
     */
    unregister?: (item?: any) => void
  } & Ext$field$IBase;

  declare export type Ext$IAbstractPlugin = {
    /**
     * [Config Option] (String)
     */
    pluginId?: string,

    /**
     * [Property] (Boolean)
     */
    isPlugin?: boolean,

    /**
     * [Method] Creates clone of the plugin
     * @param overrideCfg Object Additional config for the derived plugin.
     */
    clonePlugin?: (overrideCfg?: any) => void,

    /**
     * [Method] The destroy method is invoked by the owning Component at the time the Component is being destroyed
     */
    Ext$destroy?: () => void,

    /**
     * [Method] The base implementation just sets the plugin s disabled flag to true Plugin subclasses which need more complex proce
     */
    disable?: () => void,

    /**
     * [Method] The base implementation just sets the plugin s disabled flag to false Plugin subclasses which need more complex proc
     */
    enable?: () => void,

    /**
     * [Method] Returns the component to which this plugin is attached
     * @returns Ext.Component Owner component.
     */
    Ext$getCmp?: () => Ext$component$IComponent,

    /**
     * [Method] The init method is invoked after initComponent method has been run for the client Component
     * @param client Ext.Component The client Component which owns this plugin.
     */
    init?: (client?: Ext$component$IComponent) => void,

    /**
     * [Method] Sets the component to which this plugin is attached
     * @param cmp Ext.Component Owner component.
     */
    setCmp?: (cmp?: Ext$component$IComponent) => void
  } & Ext$field$IBase;

  declare export type Ext$IAction = {
    /**
     * [Config Option] (Boolean)
     */
    disabled?: boolean,

    /**
     * [Config Option] (Function)
     */
    handler?: any,

    /**
     * [Config Option] (Boolean)
     */
    hidden?: boolean,

    /**
     * [Config Option] (String)
     */
    iconCls?: string,

    /**
     * [Config Option] (String)
     */
    itemId?: string,

    /**
     * [Config Option] (Object)
     */
    scope?: any,

    /**
     * [Config Option] (String)
     */
    text?: string,

    /**
     * [Method] Disables all components configured by this Action
     */
    disable?: () => void,

    /**
     * [Method] Executes the specified function once for each Component currently tied to this Action
     * @param fn Function The function to execute for each component
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the Component.
     */
    Ext$each?: (fn?: any, scope?: any) => void,

    /**
     * [Method] Enables all components configured by this Action
     */
    enable?: () => void,

    /**
     * [Method] Executes this Action manually using the handler function specified in the original config object or the handler funct
     * @param args Object... Variable number of arguments passed to the handler function
     */
    execute?: (...args: any[]) => void,

    /**
     * [Method] Gets the icon CSS class currently used by all components configured by this Action
     */
    getIconCls?: () => void,

    /**
     * [Method] Gets the text currently displayed by all components configured by this Action
     */
    getText?: () => void,

    /**
     * [Method] Hides all components configured by this Action
     */
    hide?: () => void,

    /**
     * [Method] Returns true if the components using this Action are currently disabled else returns false
     */
    isDisabled?: () => void,

    /**
     * [Method] Returns true if the components configured by this Action are currently hidden else returns false
     */
    isHidden?: () => void,

    /**
     * [Method] Sets the disabled state of all components configured by this Action
     * @param disabled Boolean True to disable the component, false to enable it
     */
    setDisabled?: (disabled?: boolean) => void,

    /**
     * [Method] Sets the function that will be called by each Component using this action when its primary event is triggered
     * @param fn Function The function that will be invoked by the action's components. The function will be called with no arguments.
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the Component firing the event.
     */
    setHandler?: (fn?: any, scope?: any) => void,

    /**
     * [Method] Sets the hidden state of all components configured by this Action
     * @param hidden Boolean True to hide the component, false to show it.
     */
    setHidden?: (hidden?: boolean) => void,

    /**
     * [Method] Sets the icon CSS class for all components configured by this Action
     * @param cls String The CSS class supplying the icon image
     */
    setIconCls?: (cls?: string) => void,

    /**
     * [Method] Sets the text to be displayed by all components configured by this Action
     * @param text String The text to display
     */
    setText?: (text?: string) => void,

    /**
     * [Method] Shows all components configured by this Action
     */
    show?: () => void,

    /**
     * [Config Option] (Function)
     */
    failure?: any,

    /**
     * [Config Option] (Ext.form.Basic)
     */
    Ext$form?: Ext$Ext$form.form$IBasic,

    /**
     * [Config Option] (Object)
     */
    headers?: any,

    /**
     * [Config Option] (String)
     */
    method?: string,

    /**
     * [Config Option] (Object/String)
     */
    params?: any,

    /**
     * [Config Option] (Boolean)
     */
    reset?: boolean,

    /**
     * [Config Option] (Object)
     */
    scope?: any,

    /**
     * [Config Option] (Boolean)
     */
    submitEmptyText?: boolean,

    /**
     * [Config Option] (Function)
     */
    success?: any,

    /**
     * [Config Option] (Number)
     */
    timeout?: number,

    /**
     * [Config Option] (String)
     */
    url?: string,

    /**
     * [Config Option] (String)
     */
    waitMsg?: string,

    /**
     * [Config Option] (String)
     */
    waitTitle?: string,

    /**
     * [Property] (String)
     */
    failureType?: string,

    /**
     * [Property] (Object)
     */
    response?: any,

    /**
     * [Property] (Object)
     */
    result?: any,

    /**
     * [Property] (String)
     */
    Ext$type?: string,

    /**
     * [Property] (String)
     */
    CLIENT_INVALID?: string,

    /**
     * [Property] (String)
     */
    CONNECT_FAILURE?: string,

    /**
     * [Property] (String)
     */
    LOAD_FAILURE?: string,

    /**
     * [Property] (String)
     */
    SERVER_INVALID?: string,

    /**
     * [Method] Invokes this action using the current configuration
     */
    run?: () => void,

    /**
     * [Config Option] (Function)
     */
    failure?: any,

    /**
     * [Config Option] (Ext.form.Basic)
     */
    Ext$form?: Ext$Ext$form.form$IBasic,

    /**
     * [Config Option] (Object)
     */
    headers?: any,

    /**
     * [Config Option] (String)
     */
    method?: string,

    /**
     * [Config Option] (Object/String)
     */
    params?: any,

    /**
     * [Config Option] (Boolean)
     */
    reset?: boolean,

    /**
     * [Config Option] (Object)
     */
    scope?: any,

    /**
     * [Config Option] (Boolean)
     */
    submitEmptyText?: boolean,

    /**
     * [Config Option] (Function)
     */
    success?: any,

    /**
     * [Config Option] (Number)
     */
    timeout?: number,

    /**
     * [Config Option] (String)
     */
    url?: string,

    /**
     * [Config Option] (String)
     */
    waitMsg?: string,

    /**
     * [Config Option] (String)
     */
    waitTitle?: string,

    /**
     * [Property] (String)
     */
    failureType?: string,

    /**
     * [Property] (Object)
     */
    response?: any,

    /**
     * [Property] (Object)
     */
    result?: any,

    /**
     * [Property] (String)
     */
    Ext$type?: string,

    /**
     * [Property] (String)
     */
    CLIENT_INVALID?: string,

    /**
     * [Property] (String)
     */
    CONNECT_FAILURE?: string,

    /**
     * [Property] (String)
     */
    LOAD_FAILURE?: string,

    /**
     * [Property] (String)
     */
    SERVER_INVALID?: string,

    /**
     * [Method] Invokes this action using the current configuration
     */
    run?: () => void,

    /**
     * [Config Option] (String)
     */
    altText?: string,

    /**
     * [Config Option] (Boolean)
     */
    disabled?: boolean,

    /**
     * [Config Option] (Function)
     */
    Ext$getClass?: any,

    /**
     * [Config Option] (Function)
     */
    getTip?: any,

    /**
     * [Config Option] (Function)
     */
    handler?: any,

    /**
     * [Config Option] (String)
     */
    icon?: string,

    /**
     * [Config Option] (String)
     */
    iconCls?: string,

    /**
     * [Config Option] (Object[])
     */
    items?: any[],

    /**
     * [Config Option] (String)
     */
    menuText?: string,

    /**
     * [Config Option] (Object)
     */
    scope?: any,

    /**
     * [Config Option] (Boolean)
     */
    sortable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    stopSelection?: boolean,

    /**
     * [Config Option] (String)
     */
    tooltip?: string,

    /**
     * [Method] Cascades down the component container heirarchy from this component passed in the first call  calling the specified
     * @param fn Object
     * @param scope Object
     * @returns Ext.Container this
     */
    cascade?: (fn?: any, scope?: any) => Ext$container$IContainer,

    /**
     * [Method] Renderer closure iterates through items creating an element for each and tagging with an identifying class name x ac
     * @param v Object
     * @param meta Object
     * @param record Object
     * @param rowIdx Object
     * @param colIdx Object
     * @param store Object
     * @param view Object
     */
    defaultRenderer?: (
      v?: any,
      meta?: any,
      record?: any,
      rowIdx?: any,
      colIdx?: any,
      store?: any,
      Ext$view?: any
    ) => void,

    /**
     * [Method] Disables this ActionColumn s action at the specified index
     * @param index Number/Ext.grid.column.Action
     * @param silent Boolean
     */
    disableAction?: (index?: any, silent?: boolean) => void,

    /**
     * [Method] Enables this ActionColumn s action at the specified index
     * @param index Number/Ext.grid.column.Action
     * @param silent Boolean
     */
    enableAction?: (index?: any, silent?: boolean) => void,

    /**
     * [Method] Private override because this cannot function as a Container and it has an items property which is an Array NOT a M
     */
    getRefItems?: () => void
  } & Ext$field$IBase;

  declare export type Ext$IAjax = {
    /**
     * [Config Option] (Boolean)
     */
    binary?: boolean,

    /**
     * [Config Option] (Object)
     */
    headers?: any,

    /**
     * [Property] (Object)
     */
    actionMethods?: any,

    /**
     * [Method] Returns the HTTP method name for a given request
     * @param request Ext.data.Request The request object
     * @returns String The HTTP method to use (should be one of 'GET', 'POST', 'PUT' or 'DELETE')
     */
    getMethod?: (request?: Ext$Ext$data.data$IRequest) => string
  } & undefined.data$IConnection;

  declare export class Ext$Ajax {
    /**
     * [Property] (Boolean)
     */
    static autoAbort: boolean;

    /**
     * [Property] (Object)
     */
    static defaultHeaders: any;

    /**
     * [Property] (Boolean)
     */
    static disableCaching: boolean;

    /**
     * [Property] (Object)
     */
    static extraParams: any;

    /**
     * [Property] (Object)
     */
    static hasListeners: any;

    /**
     * [Property] (Boolean)
     */
    static isObservable: boolean;

    /**
     * [Property] (String)
     */
    static method: string;

    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Property] (Number)
     */
    static timeout: number;

    /**
     * [Property] (String)
     */
    static url: string;

    /**
     * [Method] Aborts an active request
     * @param request Object Defaults to the last request
     */
    static abort(request?: any): void;

    /**
     * [Method] Aborts all active requests
     */
    static abortAll(): void;

    /**
     * [Method] Adds the specified events to the list of events which this Observable may fire
     * @param eventNames Object/String... Either an object with event names as properties with a value of true. For example: this.addEvents({  storeloaded: true,  storecleared: true });  Or any number of event names as separate parameters. For example: this.addEvents('storeloaded', 'storecleared');
     */
    static addEvents(eventNames?: any): void;

    /**
     * [Method] Appends an event handler to this object
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addListener(
      eventName?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Adds listeners to any Observable object or Ext Element which are automatically removed when this Component is destr
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Removes all listeners for this object including the managed listeners
     */
    static clearListeners(): void;

    /**
     * [Method] Removes all managed listeners for this object
     */
    static clearManagedListeners(): void;

    /**
     * [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
     * @param eventNames String/String[] The event name to bubble, or an Array of event names.
     */
    static enableBubble(eventNames?: any): void;

    /**
     * [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
     * @param eventName String The name of the event to fire.
     * @param args Object... Variable number of parameters are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEvent(eventName: string, ...args: any[]): boolean;

    /**
     * [Method] Fires the specified event with the passed parameter list
     * @param eventName String The name of the event to fire.
     * @param args Object[] An array of parameters which are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEventArgs(eventName?: string, args?: any[]): boolean;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(name?: string): any;

    /**
     * [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles
     * @param eventName String The name of the event to check for
     * @returns Boolean true if the event is being listened for or bubbles, else false
     */
    static hasListener(eventName?: string): boolean;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$field$IBase;

    /**
     * [Method] Determines whether this object has a request outstanding
     * @param request Object Defaults to the last transaction
     * @returns Boolean True if there is an outstanding request.
     */
    static isLoading(request?: any): boolean;

    /**
     * [Method] Shorthand for addManagedListener
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static mon(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Shorthand for removeManagedListener
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static mun(item?: any, ename?: any, fn?: any, scope?: any): void;

    /**
     * [Method] Shorthand for addListener
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static on(eventName?: any, fn?: any, scope?: any, options?: any): any;

    /**
     * [Method] Checks if the response status was successful
     * @param status Number The status code
     * @returns Object An object containing success/status state
     */
    static parseStatus(status?: number): any;

    /**
     * [Method] Relays selected events from the specified Observable as if the events were fired by this
     * @param origin Object The Observable whose events this object is to relay.
     * @param events String[] Array of event names to relay.
     * @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
     * @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or this.store.relayers.destroy();
     */
    static relayEvents(origin?: any, events?: string[], prefix?: string): any;

    /**
     * [Method] Removes an event handler
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static removeListener(eventName?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Removes listeners that were added by the mon method
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static removeManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any
    ): void;

    /**
     * [Method] Sends an HTTP request to a remote server
     * @param options Object An object which may contain the following properties: (The options object may also contain any other property which might be needed to perform postprocessing in a callback because it is passed to callback functions.)
     * @returns Object The request object. This may be used to cancel the request.
     */
    static request(options?: any): any;

    /**
     * [Method] Resumes firing of the named event s
     * @param eventName String... Multiple event names to resume.
     */
    static resumeEvent(...eventName: any[]): void;

    /**
     * [Method] Resumes firing events see suspendEvents
     */
    static resumeEvents(): void;

    /**
     * [Method] Sets various options such as the url params for the request
     * @param options Object The initial options
     * @param scope Object The scope to execute in
     * @returns Object The params for the request
     */
    static setOptions(options?: any, scope?: any): any;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Suspends firing of the named event s
     * @param eventName String... Multiple event names to suspend.
     */
    static suspendEvent(...eventName: any[]): void;

    /**
     * [Method] Suspends the firing of all events
     * @param queueSuspended Boolean Pass as true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events.
     */
    static suspendEvents(queueSuspended?: boolean): void;

    /**
     * [Method] Shorthand for removeListener
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static un(eventName?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Uploads a form using a hidden iframe
     * @param form String/HTMLElement/Ext.Element The form to upload
     * @param url String The url to post to
     * @param params String Any extra parameters to pass
     * @param options Object The initial options
     */
    static upload(
      Ext$form?: any,
      url?: string,
      params?: string,
      options?: any
    ): void;
  }

  declare export type app$IEventDomain = {
    /**
     * [Config Option] (String)
     */
    idProperty?: string,

    /**
     * [Property] (Object)
     */
    instances?: any,

    /**
     * [Method] This method matches the firer of the event the target to the given selector
     * @param target Object The firer of the event.
     * @param selector String The selector to which to match the target.
     * @returns Boolean true if the target matches the selector.
     */
    match?: (target?: any, selector?: string) => boolean,

    /**
     * [Method] This method is called by the derived class to monitor fireEvent calls
     * @param observable Ext.Class The Observable to monitor for events.
     */
    monitor?: (observable?: Ext$Ext$IClass) => void
  } & Ext$field$IBase;

  declare export interface Ext$IArray {
    /**
     * [Config Option] (String)
     */
    successProperty?: string;

    /**
     * [Config Option] (String)
     */
    totalProperty?: string;
  }

  declare export class Ext$Array {
    /**
     * [Method] Filter through an array and remove empty item as defined in Ext isEmpty See filter
     * @param array Array
     * @returns Array results
     */
    static clean(array?: any[]): any[];

    /**
     * [Method] Clone a flat array without referencing the previous one
     * @param array Array The array
     * @returns Array The clone array
     */
    static clone(array?: any[]): any[];

    /**
     * [Method] Checks whether or not the given array contains the specified item
     * @param array Array The array to check
     * @param item Object The item to look for
     * @returns Boolean True if the array contains the item, false otherwise
     */
    static contains(array?: any[], item?: any): boolean;

    /**
     * [Method] Perform a set difference A B by subtracting all items in array B from array A
     * @param arrayA Array
     * @param arrayB Array
     * @returns Array difference
     */
    static difference(arrayA?: any[], arrayB?: any[]): any[];

    /**
     * [Method] Iterates an array or an iterable value and invoke the given callback function for each item
     * @param iterable Array/NodeList/Object The value to be iterated. If this argument is not iterable, the callback function is called once.
     * @param fn Function The callback function. If it returns false, the iteration stops and this method returns the current index.
     * @param scope Object The scope (this reference) in which the specified function is executed.
     * @param reverse Boolean Reverse the iteration order (loop from the end to the beginning) Defaults false
     * @returns Boolean See description for the fn parameter.
     */
    static each(
      iterable?: any,
      fn?: any,
      scope?: any,
      reverse?: boolean
    ): boolean;

    /**
     * [Method] Shallow compares the contents of 2 arrays using strict equality
     * @param array1 Array
     * @param array2 Array
     * @returns Boolean true if the arrays are equal.
     */
    static equals(array1?: any[], array2?: any[]): boolean;

    /**
     * [Method] Removes items from an array
     * @param array Array The Array on which to replace.
     * @param index Number The index in the array at which to operate.
     * @param removeCount Number The number of items to remove at index.
     * @returns Array The array passed.
     */
    static erase(array?: any[], index?: number, removeCount?: number): any[];

    /**
     * [Method] Executes the specified function for each array element until the function returns a falsy value
     * @param array Array
     * @param fn Function Callback function for each item
     * @param scope Object Callback function scope
     * @returns Boolean True if no false value is returned by the callback function.
     */
    static every(array?: any[], fn?: any, scope?: any): boolean;

    /**
     * [Method] Creates a new array with all of the elements of this array for which the provided filtering function returns true
     * @param array Array
     * @param fn Function Callback function for each item
     * @param scope Object Callback function scope
     * @returns Array results
     */
    static filter(array?: any[], fn?: any, scope?: any): any[];

    /**
     * [Method] Returns the first item in the array which elicits a true return value from the passed selection function
     * @param array Array The array to search
     * @param fn Function The selection function to execute for each item.
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the array
     * @returns Object The first item in the array which returned true from the selection function, or null if none was found.
     */
    static findBy(array?: any[], fn?: any, scope?: any): any;

    /**
     * [Method] Recursively flattens into 1 d Array
     * @param array Array The array to flatten
     * @returns Array The 1-d array.
     */
    static flatten(array?: any[]): any[];

    /**
     * [Method] Iterates an array and invoke the given callback function for each item
     * @param array Array The array to iterate
     * @param fn Function The callback function.
     * @param scope Object The execution scope (this) in which the specified function is executed.
     */
    static forEach(array?: any[], fn?: any, scope?: any): void;

    /**
     * [Method] Converts a value to an array if it s not already an array returns An empty array if given value is undefined or n
     * @param value Object The value to convert to an array if it's not already is an array
     * @param newReference Boolean True to clone the given array and return a new reference if necessary, defaults to false
     * @returns Array array
     */
    static from(Ext$value?: any, newReference?: boolean): any[];

    /**
     * [Method] Push an item into the array only if the array doesn t contain it yet
     * @param array Array The array
     * @param item Object The item to include
     */
    static include(array?: any[], item?: any): void;

    /**
     * [Method] Get the index of the provided item in the given array a supplement for the missing arrayPrototype indexOf in Interne
     * @param array Array The array to check
     * @param item Object The item to look for
     * @param from Number The index at which to begin the search
     * @returns Number The index of item in the array (or -1 if it is not found)
     */
    static indexOf(array?: any[], item?: any, from?: number): number;

    /**
     * [Method] Inserts items in to an array
     * @param array Array The Array in which to insert.
     * @param index Number The index in the array at which to operate.
     * @param items Array The array of items to insert at index.
     * @returns Array The array passed.
     */
    static insert(array?: any[], index?: number, items?: any[]): any[];

    /**
     * [Method] Merge multiple arrays into one with unique items that exist in all of the arrays
     * @param array1 Array
     * @param array2 Array
     * @param etc Array
     * @returns Array intersect
     */
    static intersect(array1?: any[], array2?: any[], etc?: any[]): any[];

    /**
     * [Method] Creates a new array with the results of calling a provided function on every element in this array
     * @param array Array
     * @param fn Function Callback function for each item
     * @param scope Object Callback function scope
     * @returns Array results
     */
    static map(array?: any[], fn?: any, scope?: any): any[];

    /**
     * [Method] Returns the maximum value in the Array
     * @param array Array/NodeList The Array from which to select the maximum value.
     * @param comparisonFn Function a function to perform the comparision which determines maximization. If omitted the ">" operator will be used. Note: gt = 1; eq = 0; lt = -1
     * @returns Object maxValue The maximum value
     */
    static max(array?: any, comparisonFn?: any): any;

    /**
     * [Method] Calculates the mean of all items in the array
     * @param array Array The Array to calculate the mean value of.
     * @returns Number The mean.
     */
    static mean(array?: any[]): number;

    /**
     * [Method] Merge multiple arrays into one with unique items
     * @param array1 Array
     * @param array2 Array
     * @param etc Array
     * @returns Array merged
     */
    static merge(array1?: any[], array2?: any[], etc?: any[]): any[];

    /**
     * [Method] Returns the minimum value in the Array
     * @param array Array/NodeList The Array from which to select the minimum value.
     * @param comparisonFn Function a function to perform the comparision which determines minimization. If omitted the "&lt;" operator will be used. Note: gt = 1; eq = 0; lt = -1
     * @returns Object minValue The minimum value
     */
    static min(array?: any, comparisonFn?: any): any;

    /**
     * [Method] Plucks the value of a property from each item in the Array
     * @param array Array/NodeList The Array of items to pluck the value from.
     * @param propertyName String The property name to pluck from each element.
     * @returns Array The value from each item in the Array.
     */
    static pluck(array?: any, propertyName?: string): any[];

    /**
     * [Method] Pushes new items onto the end of an Array
     * @param target Array The Array onto which to push new items
     * @param elements Object... The elements to add to the array. Each parameter may be an Array, in which case all the elements of that Array will be pushed into the end of the destination Array.
     * @returns Array An array containing all the new items push onto the end.
     */
    static push(target: any[], ...elements: any[]): any[];

    /**
     * [Method] Removes the specified item from the array if it exists
     * @param array Array The array
     * @param item Object The item to remove
     * @returns Array The passed array itself
     */
    static remove(array?: any[], item?: any): any[];

    /**
     * [Method] Replaces items in an array
     * @param array Array The Array on which to replace.
     * @param index Number The index in the array at which to operate.
     * @param removeCount Number The number of items to remove at index (can be 0).
     * @param insert Array An array of items to insert at index.
     * @returns Array The array passed.
     */
    static replace(
      array?: any[],
      index?: number,
      removeCount?: number,
      insert?: any[]
    ): any[];

    /**
     * [Method] Returns a shallow copy of a part of an array
     * @param array Array The array (or arguments object).
     * @param begin Number The index at which to begin. Negative values are offsets from the end of the array.
     * @param end Number The index at which to end. The copied items do not include end. Negative values are offsets from the end of the array. If end is omitted, all items up to the end of the array are copied.
     * @returns Array The copied piece of the array.
     */
    static slice(array?: any[], begin?: number, end?: number): any[];

    /**
     * [Method] Executes the specified function for each array element until the function returns a truthy value
     * @param array Array
     * @param fn Function Callback function for each item
     * @param scope Object Callback function scope
     * @returns Boolean True if the callback function returns a truthy value.
     */
    static some(array?: any[], fn?: any, scope?: any): boolean;

    /**
     * [Method] Sorts the elements of an Array
     * @param array Array The array to sort.
     * @param sortFn Function The comparison function.
     * @returns Array The sorted array.
     */
    static sort(array?: any[], sortFn?: any): any[];

    /**
     * [Method] Replaces items in an array
     * @param array Array The Array on which to replace.
     * @param index Number The index in the array at which to operate.
     * @param removeCount Number The number of items to remove at index (can be 0).
     * @param elements Object... The elements to add to the array. If you don't specify any elements, splice simply removes elements from the array.
     * @returns Array An array containing the removed items.
     */
    static splice(
      array: any[],
      index: number,
      removeCount: number,
      ...elements: any[]
    ): any[];

    /**
     * [Method] Calculates the sum of all items in the given array
     * @param array Array The Array to calculate the sum value of.
     * @returns Number The sum.
     */
    static sum(array?: any[]): number;

    /**
     * [Method] Converts any iterable numeric indices and a length property into a true array
     * @param iterable Object the iterable object to be turned into a true Array.
     * @param start Number a zero-based index that specifies the start of extraction. Defaults to 0
     * @param end Number a 1-based index that specifies the end of extraction. Defaults to the last index of the iterable value
     * @returns Array array
     */
    static toArray(iterable?: any, start?: number, end?: number): any[];

    /**
     * [Method] Creates a map object keyed by the elements of the given array
     * @param array Array The Array to create the map from.
     * @param getKey String/Function Name of the object property to use as a key or a function to extract the key.
     * @param scope Object Value of this inside callback.
     * @returns Object The resulting map.
     */
    static toMap(array?: any[], getKey?: any, scope?: any): any;

    /**
     * [Method] Creates a map object keyed by a property of elements of the given array
     * @param array Array The Array to create the map from.
     * @param getKey String/Function Name of the object property to use as a key or a function to extract the key.
     * @param scope Object Value of this inside callback.
     * @returns Object The resulting map.
     */
    static toValueMap(array?: any[], getKey?: any, scope?: any): any;

    /**
     * [Method] Merge multiple arrays into one with unique items
     * @param array1 Array
     * @param array2 Array
     * @param etc Array
     * @returns Array merged
     */
    static union(array1?: any[], array2?: any[], etc?: any[]): any[];

    /**
     * [Method] Returns a new array with unique items
     * @param array Array
     * @returns Array results
     */
    static unique(array?: any[]): any[];
  }

  declare export type Ext$IBase = {
    /**
     * [Property] (Ext.Class)
     */
    self?: Ext$Ext$IClass,

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    callOverridden?: (args?: any) => any,

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    callParent?: (args?: any) => any,

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    callSuper?: (args?: any) => any,

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    getInitialConfig?: (name?: string) => any,

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    initConfig?: (config?: any) => Ext$Ext$IBase,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Number)
     */
    checkChangeBuffer?: number,

    /**
     * [Config Option] (String[])
     */
    checkChangeEvents?: string[],

    /**
     * [Config Option] (String/Object)
     */
    componentLayout?: any,

    /**
     * [Config Option] (String)
     */
    dirtyCls?: string,

    /**
     * [Config Option] (String)
     */
    fieldCls?: string,

    /**
     * [Config Option] (String)
     */
    fieldStyle?: string,

    /**
     * [Config Option] (String)
     */
    focusCls?: string,

    /**
     * [Config Option] (String/Array/Ext.XTemplate)
     */
    inputAttrTpl?: any,

    /**
     * [Config Option] (String)
     */
    inputId?: string,

    /**
     * [Config Option] (String)
     */
    inputType?: string,

    /**
     * [Config Option] (String)
     */
    invalidText?: string,

    /**
     * [Config Option] (String)
     */
    name?: string,

    /**
     * [Config Option] (Boolean)
     */
    readOnly?: boolean,

    /**
     * [Config Option] (String)
     */
    readOnlyCls?: string,

    /**
     * [Config Option] (Number)
     */
    tabIndex?: number,

    /**
     * [Config Option] (Boolean)
     */
    validateOnBlur?: boolean,

    /**
     * [Property] (Ext.Element)
     */
    inputEl?: Ext$target$IElement,

    /**
     * [Property] (Boolean)
     */
    maskOnDisable?: boolean,

    /**
     * [Method] A utility for grouping a set of modifications which may trigger value changes into a single transaction to prevent e
     * @param fn Object A function containing the transaction code
     */
    batchChanges?: (fn?: any) => void,

    /**
     * [Method] Template method before a field is reset
     */
    beforeReset?: () => void,

    /**
     * [Method] Checks whether the value of the field has changed since the last time it was checked
     */
    checkChange?: () => void,

    /**
     * [Method] Checks the isDirty state of the field and if it has changed since the last time it was checked fires the dirtychange
     */
    checkDirty?: () => void,

    /**
     * [Method] Clear any invalid styles messages for this field
     */
    clearInvalid?: () => void,

    /**
     * [Method] This method needs to be called whenever you change something on this component that requires the Component s layout t
     * @returns Ext.container.Container this
     */
    doComponentLayout?: () => Ext$Ext$container.container$IContainer,

    /**
     * [Method] Only relevant if the instance s isFileUpload method returns true
     * @returns HTMLElement
     */
    extractFileInput?: () => HTMLElement,

    /**
     * [Method] Gets the active error message for this component if any
     * @returns String The active error message on the component; if there is no error, an empty string is returned.
     */
    getActiveError?: () => string,

    /**
     * [Method] Gets an Array of any active error messages currently applied to the field
     * @returns String[] The active error messages on the component; if there are no errors, an empty Array is returned.
     */
    getActiveErrors?: () => string[],

    /**
     * [Method] Runs this field s validators and returns an array of error messages for any validation failures
     * @param value Object The value to get errors for (defaults to the current field value)
     * @returns String[] All error messages for this field; an empty Array if none.
     */
    getErrors?: (Ext$value?: any) => string[],

    /**
     * [Method] Returns the label for the field
     * @returns String The configured field label, or empty string if not defined
     */
    getFieldLabel?: () => string,

    /**
     * [Method] Gets the width of the label if visible
     * @returns Number The label width
     */
    getLabelWidth?: () => number,

    /**
     * [Method] Generates the arguments for the field decorations rendering template
     * @returns Object The template arguments
     */
    getLabelableRenderData?: () => any,

    /**
     * [Method] Returns the value s that should be saved to the Ext data Model instance for this field when Ext form Basic updateRe
     * @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted.
     */
    getModelData?: () => any,

    /**
     * [Method] Returns the name attribute of the field
     * @returns String name The field name
     */
    getName?: () => string,

    /**
     * [Method] Returns the raw value of the field without performing any normalization conversion or validation
     * @returns any value The raw String value of the field
     */
    getRawValue?: () => any,

    /**
     * [Method] Creates and returns the data object to be used when rendering the fieldSubTpl
     * @returns Object The template data
     */
    getSubTplData?: () => any,

    /**
     * [Method] private override to use getSubmitValue  as a convenience
     * @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted.
     */
    getSubmitData?: () => any,

    /**
     * [Method] Returns the value that would be included in a standard form submit for this field
     * @returns any The value to be submitted, or null.
     */
    getSubmitValue?: () => any,

    /**
     * [Method] Returns the current data value of the field
     * @returns Object value The field value
     */
    getValue?: () => any,

    /**
     * [Method] Tells whether the field currently has an active error message
     * @returns Boolean
     */
    hasActiveError?: () => boolean,

    /**
     * [Method] Checks if the field has a visible label
     * @returns Boolean True if the field has a visible label
     */
    hasVisibleLabel?: () => boolean,

    /**
     * [Method] private
     */
    initComponent?: () => void,

    /**
     * [Method] private
     */
    initEvents?: () => void,

    /**
     * [Method] Initializes this Field mixin on the current instance
     */
    initField?: () => void,

    /**
     * [Method] Performs initialization of this mixin
     */
    initLabelable?: () => void,

    /**
     * [Method] Initialized the renderData to be used when rendering the renderTpl
     * @returns Object Object with keys and values that are going to be applied to the renderTpl
     */
    initRenderData?: () => any,

    /**
     * [Method] Initializes the field s value based on the initial config
     */
    initValue?: () => void,

    /**
     * [Method] Returns true if the value of this Field has been changed from its originalValue
     * @returns Boolean True if this field has been changed from its original value (and is not disabled), false otherwise.
     */
    isDirty?: () => boolean,

    /**
     * [Method] Returns whether two field values are logically equal
     * @param value1 Object The first value to compare
     * @param value2 Object The second value to compare
     * @returns Boolean True if the values are equal, false if inequal.
     */
    isEqual?: (value1?: any, value2?: any) => boolean,

    /**
     * [Method] Returns whether this Field is a file upload field if it returns true forms will use special techniques for submitti
     * @returns Boolean
     */
    isFileUpload?: () => boolean,

    /**
     * [Method] Returns whether or not the field value is currently valid by validating the processed raw value of the field
     * @returns Boolean True if the value is valid, else false
     */
    isValid?: () => boolean,

    /**
     * [Method] Display one or more error messages associated with this field using msgTarget to determine how to display the messag
     * @param errors String/String[] The validation message(s) to display.
     */
    markInvalid?: (errors?: any) => void,

    /**
     * [Method] private
     */
    onDisable?: () => void,

    /**
     * [Method] private
     */
    onEnable?: () => void,

    /**
     * [Method] private
     */
    onRender?: () => void,

    /**
     * [Method] Performs any necessary manipulation of a raw field value to prepare it for conversion and or validation for instance
     * @param value Object The unprocessed string value
     * @returns Object The processed string value
     */
    processRawValue?: (Ext$value?: any) => any,

    /**
     * [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type
     * @param rawValue Object
     * @returns Object The converted value.
     */
    rawToValue?: (rawValue?: any) => any,

    /**
     * [Method] Resets the current field value to the originally loaded value and clears any validation messages
     */
    reset?: () => void,

    /**
     * [Method] Resets the field s originalValue property so it matches the current value
     */
    resetOriginalValue?: () => void,

    /**
     * [Method] Sets the active error message to the given string
     * @param msg String The error message
     */
    setActiveError?: (msg?: string) => void,

    /**
     * [Method] Set the active error message to an Array of error messages
     * @param errors String[] The error messages
     */
    setActiveErrors?: (errors?: string[]) => void,

    /**
     * [Method] Applies a set of default configuration values to this Labelable instance
     * @param defaults Object The defaults to apply to the object.
     */
    setFieldDefaults?: (defaults?: any) => void,

    /**
     * [Method] Set the label of this field
     * @param label String The new label. The labelSeparator will be automatically appended to the label string.
     */
    setFieldLabel?: (label?: string) => void,

    /**
     * [Method] Set the CSS style of the field input element
     * @param style String/Object/Function The style(s) to apply. Should be a valid argument to Ext.Element.applyStyles.
     */
    setFieldStyle?: (style?: any) => void,

    /**
     * [Method] Sets the field s raw value directly bypassing value conversion change detection and validation
     * @param value Object The value to set
     * @returns Object value The field value that is set
     */
    setRawValue?: (Ext$value?: any) => any,

    /**
     * [Method] Sets the read only state of this field
     * @param readOnly Boolean Whether the field should be read only.
     */
    setReadOnly?: (readOnly?: boolean) => void,

    /**
     * [Method] Sets a data value into the field and runs the change detection and validation
     * @param value Object The value to set
     * @returns any this
     */
    setValue?: (Ext$value?: any) => any,

    /**
     * [Method] Allows for any necessary modifications before the original value is set
     * @param value Object The initial value
     * @returns Object The modified initial value
     */
    transformOriginalValue?: (Ext$value?: any) => any,

    /**
     * [Method] Transform the raw value before it is set
     * @param value Object The value
     * @returns Object The value to set
     */
    transformRawValue?: (Ext$value?: any) => any,

    /**
     * [Method] Returns the trimmed label by slicing off the label separator character
     * @returns String The trimmed field label, or empty string if not defined
     */
    trimLabelSeparator?: () => string,

    /**
     * [Method] Clears the active error message s
     */
    unsetActiveError?: () => void,

    /**
     * [Method] Returns whether or not the field value is currently valid by validating the field s current value and fires the vali
     * @returns Boolean True if the value is valid, else false
     */
    validate?: () => boolean,

    /**
     * [Method] Uses getErrors to build an array of validation errors
     * @param value Object The value to validate
     * @returns Boolean True if all validations passed, false if one or more failed
     */
    validateValue?: (Ext$value?: any) => boolean,

    /**
     * [Method] Converts a mixed type value to a raw representation suitable for displaying in the field
     * @param value Object The mixed-type value to convert to the raw representation.
     * @returns Object The converted raw value.
     */
    valueToRaw?: (Ext$value?: any) => any
  } & Ext$Ext$IClass;

  declare export class Ext$Base {
    /**
     * [Method] Add methods  properties to the prototype of this class
     * @param members Object
     */
    static addMembers(members?: any): void;

    /**
     * [Method] Add  override static properties of this class
     * @param members Object
     * @returns Ext.Base this
     */
    static addStatics(members?: any): Ext$Ext$IBase;

    /**
     * [Method] Create a new instance of this Class
     * @returns Object the created instance.
     */
    static create(): any;

    /**
     * [Method] Create aliases for existing prototype methods
     * @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
     * @param origin String/Object The original method name
     */
    static createAlias(alias?: any, origin?: any): void;

    /**
     * [Method] Get the current class name in string format
     * @returns String className
     */
    static getName(): string;

    /**
     * [Method] Adds members to class
     */
    static implement(): void;

    /**
     * [Method] Override members of this class
     * @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
     * @returns Ext.Base this class
     */
    static override(members?: any): Ext$Ext$IBase;
  }

  declare export type button$ISplit = {
    /**
     * [Config Option] (Function)
     */
    arrowHandler?: any,

    /**
     * [Config Option] (String)
     */
    arrowTooltip?: string,

    /**
     * [Method] Sets this button s arrow click handler
     * @param handler Function The function to call when the arrow is clicked.
     * @param scope Object Scope for the function passed above.
     */
    setArrowHandler?: (handler?: any, scope?: any) => void
  } & undefined.component$IButton;

  declare export type Ext$IButton = {
    /**
     * [Config Option] (Boolean)
     */
    allowDepress?: boolean,

    /**
     * [Config Option] (String)
     */
    arrowAlign?: string,

    /**
     * [Config Option] (String)
     */
    arrowCls?: string,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Object)
     */
    baseParams?: any,

    /**
     * [Config Option] (String)
     */
    clickEvent?: string,

    /**
     * [Config Option] (String)
     */
    cls?: string,

    /**
     * [Config Option] (String/Object)
     */
    componentLayout?: any,

    /**
     * [Config Option] (Boolean)
     */
    destroyMenu?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    disabled?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    enableToggle?: boolean,

    /**
     * [Config Option] (String)
     */
    focusCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    frame?: boolean,

    /**
     * [Config Option] (Number/String)
     */
    glyph?: any,

    /**
     * [Config Option] (Boolean)
     */
    handleMouseEvents?: boolean,

    /**
     * [Config Option] (Function)
     */
    handler?: any,

    /**
     * [Config Option] (Boolean)
     */
    hidden?: boolean,

    /**
     * [Config Option] (String)
     */
    href?: string,

    /**
     * [Config Option] (String)
     */
    hrefTarget?: string,

    /**
     * [Config Option] (String)
     */
    icon?: string,

    /**
     * [Config Option] (String)
     */
    iconAlign?: string,

    /**
     * [Config Option] (String)
     */
    iconCls?: string,

    /**
     * [Config Option] (Ext.menu.Menu/String/Object)
     */
    Ext$menu?: any,

    /**
     * [Config Option] (String)
     */
    menuActiveCls?: string,

    /**
     * [Config Option] (String)
     */
    menuAlign?: string,

    /**
     * [Config Option] (Number)
     */
    minWidth?: number,

    /**
     * [Config Option] (String)
     */
    overCls?: string,

    /**
     * [Config Option] (String)
     */
    overflowText?: string,

    /**
     * [Config Option] (Object)
     */
    params?: any,

    /**
     * [Config Option] (Boolean)
     */
    pressed?: boolean,

    /**
     * [Config Option] (String)
     */
    pressedCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    preventDefault?: boolean,

    /**
     * [Config Option] (Ext.XTemplate/String/String[])
     */
    renderTpl?: any,

    /**
     * [Config Option] (Boolean/Object)
     */
    repeat?: any,

    /**
     * [Config Option] ("small"/"medium"/"large")
     */
    scale?: any,

    /**
     * [Config Option] (Object)
     */
    scope?: any,

    /**
     * [Config Option] (Boolean)
     */
    showEmptyMenu?: boolean,

    /**
     * [Config Option] (Boolean/Number)
     */
    shrinkWrap?: any,

    /**
     * [Config Option] (Number)
     */
    tabIndex?: number,

    /**
     * [Config Option] (String)
     */
    text?: string,

    /**
     * [Config Option] (String)
     */
    textAlign?: string,

    /**
     * [Config Option] (String)
     */
    toggleGroup?: string,

    /**
     * [Config Option] (Function)
     */
    toggleHandler?: any,

    /**
     * [Config Option] (String/Object)
     */
    tooltip?: any,

    /**
     * [Config Option] (String)
     */
    tooltipType?: string,

    /**
     * [Property] (Boolean)
     */
    isAction?: boolean,

    /**
     * [Property] (Ext.Template)
     */
    template?: Ext$Ext$ITemplate,

    /**
     * [Method] Retrieves the first direct child of this container which matches the passed selector or component
     * @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned.
     * @returns Object Ext.Component The matching child Ext.Component (or null if no match was found).
     */
    child?: (selector?: any) => any,

    /**
     * [Method] inherit docs
     * @param silent Object
     */
    disable?: (silent?: any) => void,

    /**
     * [Method] Retrieves the first descendant of this container which matches the passed selector
     * @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned.
     * @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found).
     */
    down?: (selector?: any) => any,

    /**
     * [Method] inherit docs
     * @param silent Object
     */
    enable?: (silent?: any) => void,

    /**
     * [Method] This method returns an object which provides substitution parameters for the XTemplate used to create this Button s D
     * @returns Object Substitution data for a Template. The default implementation which provides data for the default template returns an Object containing the following properties:
     */
    getTemplateArgs?: () => any,

    /**
     * [Method] Gets the text for this Button
     * @returns String The button text
     */
    getText?: () => string,

    /**
     * [Method] Returns true if the button has a menu and it is visible
     * @returns Boolean
     */
    hasVisibleMenu?: () => boolean,

    /**
     * [Method] Hides this button s menu if it has one
     * @returns Ext.button.Button this
     */
    hideMenu?: () => Ext$Ext$button.Ext$IButton,

    /**
     * [Method] inherit docs
     */
    initComponent?: () => void,

    /**
     * [Method] See comments in onFocus
     */
    onDisable?: () => void,

    /**
     * [Method] Retrieves all descendant components which match the passed selector
     * @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned.
     * @returns Ext.Component[] Components which matched the selector
     */
    Ext$query?: (selector?: string) => Ext$component$IComponent[],

    /**
     * [Method] Retrieves all descendant components which match the passed function
     * @param fn Function The matcher function. It will be called with a single argument, the component being tested.
     * @param scope Object The scope in which to run the function. If not specified, it will default to the active component.
     * @returns Ext.Component[] Components matched by the passed function
     */
    queryBy?: (fn?: any, scope?: any) => Ext$component$IComponent[],

    /**
     * [Method] Finds a component at any level under this container matching the id itemId
     * @param id String The id to find
     * @returns Ext.Component The matching id, null if not found
     */
    queryById?: (Ext$id?: string) => Ext$component$IComponent,

    /**
     * [Method] Sets this button s glyph
     * @param glyph Number/String the numeric charCode or string charCode/font-family. This parameter expects a format consistent with that of glyph
     * @returns Ext.button.Button this
     */
    setGlyph?: (glyph?: any) => Ext$Ext$button.Ext$IButton,

    /**
     * [Method] Assigns this Button s click handler
     * @param handler Function The function to call when the button is clicked
     * @param scope Object The scope (this reference) in which the handler function is executed. Defaults to this Button.
     * @returns Ext.button.Button this
     */
    setHandler?: (handler?: any, scope?: any) => Ext$Ext$button.Ext$IButton,

    /**
     * [Method] Sets the href of the embedded anchor element to the passed URL
     * @param href String The URL to set in the anchor element.
     */
    setHref?: (href?: string) => void,

    /**
     * [Method] Sets the background image inline style of the button
     * @param icon String The path to an image to display in the button
     * @returns Ext.button.Button this
     */
    setIcon?: (icon?: string) => Ext$Ext$button.Ext$IButton,

    /**
     * [Method] Sets the CSS class that provides a background image to use as the button s icon
     * @param cls String The CSS class providing the icon image
     * @returns Ext.button.Button this
     */
    setIconCls?: (cls?: string) => Ext$Ext$button.Ext$IButton,

    /**
     * [Method] Sets the href of the link dynamically according to the params passed and any baseParams configured
     * @param params Object Parameters to use in the href URL.
     */
    setParams?: (params?: any) => void,

    /**
     * [Method] Method to change the scale of the button
     * @param scale String The scale to change to.
     */
    setScale?: (scale?: string) => void,

    /**
     * [Method] Sets this Button s text
     * @param text String The button text
     * @returns Ext.button.Button this
     */
    setText?: (text?: string) => Ext$Ext$button.Ext$IButton,

    /**
     * [Method] Sets the text alignment for this button
     * @param align String The new alignment of the button text. See textAlign.
     */
    setTextAlign?: (align?: string) => void,

    /**
     * [Method] Sets the tooltip for this Button
     * @param tooltip String/Object This may be:  String : A string to be used as innerHTML (html tags are accepted) to show in a tooltip Object : A configuration object for Ext.tip.QuickTipManager.register.
     * @returns Ext.button.Button this
     */
    setTooltip?: (tooltip?: any) => Ext$Ext$button.Ext$IButton,

    /**
     * [Method] inherit docs
     * @param ui Object
     */
    setUI?: (ui?: any) => void,

    /**
     * [Method] Shows this button s menu if it has one
     * @param fromEvent Object
     */
    showMenu?: (fromEvent?: any) => void,

    /**
     * [Method] If a state it passed it becomes the pressed state otherwise the current state is toggled
     * @param state Boolean Force a particular state
     * @param suppressEvent Boolean True to stop events being fired when calling this method.
     * @returns Ext.button.Button this
     */
    toggle?: (
      Ext$state?: boolean,
      suppressEvent?: boolean
    ) => Ext$Ext$button.Ext$IButton,

    /**
     * [Config Option] (Boolean)
     */
    allowDepress?: boolean,

    /**
     * [Config Option] (String)
     */
    arrowAlign?: string,

    /**
     * [Config Option] (String)
     */
    arrowCls?: string,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Object)
     */
    baseParams?: any,

    /**
     * [Config Option] (String)
     */
    clickEvent?: string,

    /**
     * [Config Option] (String)
     */
    cls?: string,

    /**
     * [Config Option] (String/Object)
     */
    componentLayout?: any,

    /**
     * [Config Option] (Boolean)
     */
    destroyMenu?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    disabled?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    enableToggle?: boolean,

    /**
     * [Config Option] (String)
     */
    focusCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    frame?: boolean,

    /**
     * [Config Option] (Number/String)
     */
    glyph?: any,

    /**
     * [Config Option] (Boolean)
     */
    handleMouseEvents?: boolean,

    /**
     * [Config Option] (Function)
     */
    handler?: any,

    /**
     * [Config Option] (Boolean)
     */
    hidden?: boolean,

    /**
     * [Config Option] (String)
     */
    href?: string,

    /**
     * [Config Option] (String)
     */
    hrefTarget?: string,

    /**
     * [Config Option] (String)
     */
    icon?: string,

    /**
     * [Config Option] (String)
     */
    iconAlign?: string,

    /**
     * [Config Option] (String)
     */
    iconCls?: string,

    /**
     * [Config Option] (Ext.menu.Menu/String/Object)
     */
    Ext$menu?: any,

    /**
     * [Config Option] (String)
     */
    menuActiveCls?: string,

    /**
     * [Config Option] (String)
     */
    menuAlign?: string,

    /**
     * [Config Option] (Number)
     */
    minWidth?: number,

    /**
     * [Config Option] (String)
     */
    overCls?: string,

    /**
     * [Config Option] (String)
     */
    overflowText?: string,

    /**
     * [Config Option] (Object)
     */
    params?: any,

    /**
     * [Config Option] (Boolean)
     */
    pressed?: boolean,

    /**
     * [Config Option] (String)
     */
    pressedCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    preventDefault?: boolean,

    /**
     * [Config Option] (Ext.XTemplate/String/String[])
     */
    renderTpl?: any,

    /**
     * [Config Option] (Boolean/Object)
     */
    repeat?: any,

    /**
     * [Config Option] ("small"/"medium"/"large")
     */
    scale?: any,

    /**
     * [Config Option] (Object)
     */
    scope?: any,

    /**
     * [Config Option] (Boolean)
     */
    showEmptyMenu?: boolean,

    /**
     * [Config Option] (Boolean/Number)
     */
    shrinkWrap?: any,

    /**
     * [Config Option] (Number)
     */
    tabIndex?: number,

    /**
     * [Config Option] (String)
     */
    text?: string,

    /**
     * [Config Option] (String)
     */
    textAlign?: string,

    /**
     * [Config Option] (String)
     */
    toggleGroup?: string,

    /**
     * [Config Option] (Function)
     */
    toggleHandler?: any,

    /**
     * [Config Option] (String/Object)
     */
    tooltip?: any,

    /**
     * [Config Option] (String)
     */
    tooltipType?: string,

    /**
     * [Property] (Boolean)
     */
    isAction?: boolean,

    /**
     * [Property] (Ext.Template)
     */
    template?: Ext$Ext$ITemplate,

    /**
     * [Method] Retrieves the first direct child of this container which matches the passed selector or component
     * @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned.
     * @returns Object Ext.Component The matching child Ext.Component (or null if no match was found).
     */
    child?: (selector?: any) => any,

    /**
     * [Method] inherit docs
     * @param silent Object
     */
    disable?: (silent?: any) => void,

    /**
     * [Method] Retrieves the first descendant of this container which matches the passed selector
     * @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned.
     * @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found).
     */
    down?: (selector?: any) => any,

    /**
     * [Method] inherit docs
     * @param silent Object
     */
    enable?: (silent?: any) => void,

    /**
     * [Method] This method returns an object which provides substitution parameters for the XTemplate used to create this Button s D
     * @returns Object Substitution data for a Template. The default implementation which provides data for the default template returns an Object containing the following properties:
     */
    getTemplateArgs?: () => any,

    /**
     * [Method] Gets the text for this Button
     * @returns String The button text
     */
    getText?: () => string,

    /**
     * [Method] Returns true if the button has a menu and it is visible
     * @returns Boolean
     */
    hasVisibleMenu?: () => boolean,

    /**
     * [Method] Hides this button s menu if it has one
     * @returns Ext.button.Button this
     */
    hideMenu?: () => Ext$Ext$button.Ext$IButton,

    /**
     * [Method] inherit docs
     */
    initComponent?: () => void,

    /**
     * [Method] See comments in onFocus
     */
    onDisable?: () => void,

    /**
     * [Method] Retrieves all descendant components which match the passed selector
     * @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned.
     * @returns Ext.Component[] Components which matched the selector
     */
    Ext$query?: (selector?: string) => Ext$component$IComponent[],

    /**
     * [Method] Retrieves all descendant components which match the passed function
     * @param fn Function The matcher function. It will be called with a single argument, the component being tested.
     * @param scope Object The scope in which to run the function. If not specified, it will default to the active component.
     * @returns Ext.Component[] Components matched by the passed function
     */
    queryBy?: (fn?: any, scope?: any) => Ext$component$IComponent[],

    /**
     * [Method] Finds a component at any level under this container matching the id itemId
     * @param id String The id to find
     * @returns Ext.Component The matching id, null if not found
     */
    queryById?: (Ext$id?: string) => Ext$component$IComponent,

    /**
     * [Method] Sets this button s glyph
     * @param glyph Number/String the numeric charCode or string charCode/font-family. This parameter expects a format consistent with that of glyph
     * @returns Ext.button.Button this
     */
    setGlyph?: (glyph?: any) => Ext$Ext$button.Ext$IButton,

    /**
     * [Method] Assigns this Button s click handler
     * @param handler Function The function to call when the button is clicked
     * @param scope Object The scope (this reference) in which the handler function is executed. Defaults to this Button.
     * @returns Ext.button.Button this
     */
    setHandler?: (handler?: any, scope?: any) => Ext$Ext$button.Ext$IButton,

    /**
     * [Method] Sets the href of the embedded anchor element to the passed URL
     * @param href String The URL to set in the anchor element.
     */
    setHref?: (href?: string) => void,

    /**
     * [Method] Sets the background image inline style of the button
     * @param icon String The path to an image to display in the button
     * @returns Ext.button.Button this
     */
    setIcon?: (icon?: string) => Ext$Ext$button.Ext$IButton,

    /**
     * [Method] Sets the CSS class that provides a background image to use as the button s icon
     * @param cls String The CSS class providing the icon image
     * @returns Ext.button.Button this
     */
    setIconCls?: (cls?: string) => Ext$Ext$button.Ext$IButton,

    /**
     * [Method] Sets the href of the link dynamically according to the params passed and any baseParams configured
     * @param params Object Parameters to use in the href URL.
     */
    setParams?: (params?: any) => void,

    /**
     * [Method] Method to change the scale of the button
     * @param scale String The scale to change to.
     */
    setScale?: (scale?: string) => void,

    /**
     * [Method] Sets this Button s text
     * @param text String The button text
     * @returns Ext.button.Button this
     */
    setText?: (text?: string) => Ext$Ext$button.Ext$IButton,

    /**
     * [Method] Sets the text alignment for this button
     * @param align String The new alignment of the button text. See textAlign.
     */
    setTextAlign?: (align?: string) => void,

    /**
     * [Method] Sets the tooltip for this Button
     * @param tooltip String/Object This may be:  String : A string to be used as innerHTML (html tags are accepted) to show in a tooltip Object : A configuration object for Ext.tip.QuickTipManager.register.
     * @returns Ext.button.Button this
     */
    setTooltip?: (tooltip?: any) => Ext$Ext$button.Ext$IButton,

    /**
     * [Method] inherit docs
     * @param ui Object
     */
    setUI?: (ui?: any) => void,

    /**
     * [Method] Shows this button s menu if it has one
     * @param fromEvent Object
     */
    showMenu?: (fromEvent?: any) => void,

    /**
     * [Method] If a state it passed it becomes the pressed state otherwise the current state is toggled
     * @param state Boolean Force a particular state
     * @param suppressEvent Boolean True to stop events being fired when calling this method.
     * @returns Ext.button.Button this
     */
    toggle?: (
      Ext$state?: boolean,
      suppressEvent?: boolean
    ) => Ext$Ext$button.Ext$IButton,

    /**
     * [Method] Called before any calculation cycles to prepare for layout
     * @param ownerContext Object
     */
    beginLayout?: (ownerContext?: any) => void,

    /**
     * [Method] Called before any calculation cycles to reset DOM values and prepare for calculation
     * @param ownerContext Object
     */
    beginLayoutCycle?: (ownerContext?: any) => void,

    /**
     * [Method] Called to perform the calculations for this layout
     * @param ownerContext Object
     */
    calculate?: (ownerContext?: any) => void
  } & Ext$component$IComponent &
    Ext$Ext$IQueryable;

  declare export type Ext$ICycleButton = {
    /**
     * [Config Option] (Function)
     */
    changeHandler?: any,

    /**
     * [Config Option] (Number/String)
     */
    forceGlyph?: any,

    /**
     * [Config Option] (String)
     */
    forceIcon?: string,

    /**
     * [Config Option] (Object[])
     */
    items?: any[],

    /**
     * [Config Option] (String)
     */
    prependText?: string,

    /**
     * [Config Option] (Boolean)
     */
    showText?: boolean,

    /**
     * [Property] (Ext.menu.Menu)
     */
    Ext$menu?: Ext$Ext$menu.menu$IMenu,

    /**
     * [Method] Gets the currently active menu item
     * @returns Ext.menu.CheckItem The active item
     */
    getActiveItem?: () => Ext$Ext$menu.menu$ICheckItem,

    /**
     * [Method] Sets the button s active menu item
     * @param item Ext.menu.CheckItem The item to activate
     * @param suppressEvent Boolean True to prevent the button's change event from firing.
     */
    setActiveItem?: (
      item?: Ext$Ext$menu.menu$ICheckItem,
      suppressEvent?: boolean
    ) => void,

    /**
     * [Method] This is normally called internally on button click but can be called externally to advance the button s active item
     */
    toggleSelected?: () => void
  } & undefined.button$ISplit;

  declare export type Ext$IButtonToggleManager = {} & Ext$Ext$IBase;

  declare export class Ext$ButtonToggleManager {
    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(name?: string): any;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;
  }

  declare export type Ext$ISplitButton = {
    /**
     * [Config Option] (Function)
     */
    arrowHandler?: any,

    /**
     * [Config Option] (String)
     */
    arrowTooltip?: string,

    /**
     * [Method] Sets this button s arrow click handler
     * @param handler Function The function to call when the arrow is clicked.
     * @param scope Object Scope for the function passed above.
     */
    setArrowHandler?: (handler?: any, scope?: any) => void
  } & undefined.Ext$IButton;

  declare export type chart$ITipSurface = {} & undefined.component$IComponent;

  declare export interface Ext$IClass {
    /**
     * [Config Option] (String[])
     */
    alias?: string[];

    /**
     * [Config Option] (String/String[])
     */
    alternateClassName?: any;

    /**
     * [Config Option] (Object)
     */
    config?: any;

    /**
     * [Config Option] (String)
     */
    Ext$extend?: string;

    /**
     * [Config Option] (Object)
     */
    inheritableStatics?: any;

    /**
     * [Config Option] (String[]/Object)
     */
    mixins?: any;

    /**
     * [Config Option] (String[])
     */
    requires?: string[];

    /**
     * [Config Option] (Boolean)
     */
    singleton?: boolean;

    /**
     * [Config Option] (Object)
     */
    statics?: any;

    /**
     * [Config Option] (String[])
     */
    uses?: string[];
  }

  declare export interface Ext$IClassManager {}

  declare export class Ext$ClassManager {
    /**
     * [Method] Adds a batch of class name to alias mappings
     * @param aliases Object The set of mappings of the form className : [values...]
     * @returns Ext.ClassManager this
     */
    static addNameAliasMappings(aliases?: any): Ext$Ext$IClassManager;

    /**
     * [Method]
     * @param alternates Object The set of mappings of the form className : [values...]
     * @returns Ext.ClassManager this
     */
    static addNameAlternateMappings(alternates?: any): Ext$Ext$IClassManager;

    /**
     * [Method] Defines a class
     * @param className Object
     * @param data Object
     * @param createdFn Object
     */
    static create(className?: any, Ext$data?: any, createdFn?: any): void;

    /**
     * [Method] Retrieve a class by its name
     * @param name String
     * @returns Ext.Class class
     */
    static get(name?: string): Ext$Ext$IClass;

    /**
     * [Method] Get the aliases of a class by the class name
     * @param name String
     * @returns Array aliases
     */
    static getAliasesByName(name?: string): any[];

    /**
     * [Method] Get a reference to the class by its alias
     * @param alias String
     * @returns Ext.Class class
     */
    static getByAlias(alias?: string): Ext$Ext$IClass;

    /**
     * [Method] Get the class of the provided object returns null if it s not an instance of any class created with Ext define
     * @param object Object
     * @returns Ext.Class class
     */
    static getClass(object?: any): Ext$Ext$IClass;

    /**
     * [Method] Returns the displayName property or className or object
     * @param object Object
     * @returns String
     */
    static getDisplayName(object?: any): string;

    /**
     * [Method] Get the name of the class by its reference or its instance  getName is usually invoked by the shorthand Ext getClass
     * @param object Ext.Class/Object
     * @returns String className
     */
    static getName(object?: any): string;

    /**
     * [Method] Get the name of a class by its alias
     * @param alias String
     * @returns String className
     */
    static getNameByAlias(alias?: string): string;

    /**
     * [Method] Get the name of a class by its alternate name
     * @param alternate String
     * @returns String className
     */
    static getNameByAlternate(alternate?: string): string;

    /**
     * [Method] Converts a string expression to an array of matching class names
     * @param expression String
     * @returns String[] classNames
     */
    static getNamesByExpression(expression?: string): string[];

    /**
     * [Method] Instantiate a class by its alias
     * @param alias String
     * @param args Object... Additional arguments after the alias will be passed to the class constructor.
     * @returns Object instance
     */
    static instantiateByAlias(alias: string, ...args: any[]): any;

    /**
     * [Method] Checks if a class has already been created
     * @param className String
     * @returns Boolean exist
     */
    static isCreated(className?: string): boolean;

    /**
     * [Method] Sets a name reference to a class
     * @param name String
     * @param value Object
     * @returns Ext.ClassManager this
     */
    static set(name?: string, Ext$value?: any): Ext$Ext$IClassManager;

    /**
     * [Method] Register the alias for a class
     * @param cls Ext.Class/String a reference to a class or a className
     * @param alias String Alias to use when referring to this class
     * @returns Ext.ClassManager this
     */
    static setAlias(cls?: any, alias?: string): Ext$Ext$IClassManager;

    /**
     * [Method] Creates a namespace and assign the value to the created object Ext ClassManager setNamespace MyCompany pkg Example
     * @param name String
     * @param value Object
     */
    static setNamespace(name?: string, Ext$value?: any): void;
  }

  declare export type Ext$IComponent = {
    /**
     * [Config Option] (Boolean)
     */
    autoScroll?: boolean,

    /**
     * [Config Option] (Number/String)
     */
    columnWidth?: any,

    /**
     * [Config Option] (Ext.util.Region/Ext.Element)
     */
    constrainTo?: any,

    /**
     * [Config Option] (Object/String)
     */
    constraintInsets?: any,

    /**
     * [Config Option] (String)
     */
    defaultAlign?: string,

    /**
     * [Config Option] (Boolean)
     */
    floating?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    formBind?: boolean,

    /**
     * [Config Option] (String)
     */
    overflowX?: string,

    /**
     * [Config Option] (String)
     */
    overflowY?: string,

    /**
     * [Config Option] ("north"/"south"/"east"/"west"/"center")
     */
    region?: any,

    /**
     * [Config Option] (Boolean/Object)
     */
    resizable?: any,

    /**
     * [Config Option] (String)
     */
    resizeHandles?: string,

    /**
     * [Config Option] (Boolean)
     */
    toFrontOnShow?: boolean,

    /**
     * [Property] (Ext.Container)
     */
    floatParent?: Ext$container$IContainer,

    /**
     * [Property] (Object)
     */
    scrollFlags?: any,

    /**
     * [Property] (Ext.ZIndexManager)
     */
    zIndexManager?: Ext$Ext$IZIndexManager,

    /**
     * [Property] (Ext.Container)
     */
    zIndexParent?: Ext$container$IContainer,

    /**
     * [Method] Called by the layout system after the Component has been laid out
     */
    afterComponentLayout?: () => void,

    /**
     * [Method] Invoked after the Component has been hidden
     * @param callback Function
     * @param scope Object
     */
    afterHide?: (Ext$callback?: any, scope?: any) => void,

    /**
     * [Method] Allows addition of behavior after rendering is complete
     */
    afterRender?: () => void,

    /**
     * [Method] Template method called after a Component has been positioned
     * @param ax Object
     * @param ay Object
     */
    afterSetPosition?: (ax?: any, ay?: any) => void,

    /**
     * [Method] Invoked after the Component is shown after onShow is called
     * @param animateTarget String/Ext.Element
     * @param callback Function
     * @param scope Object
     */
    afterShow?: (animateTarget?: any, Ext$callback?: any, scope?: any) => void,

    /**
     * [Method] Occurs before componentLayout is run
     */
    beforeLayout?: () => void,

    /**
     * [Method] Invoked before the Component is shown
     */
    beforeShow?: () => void,

    /**
     * [Method] Bubbles up the component container heirarchy calling the specified function with each component
     * @param fn Function The function to call
     * @param scope Object The scope of the function. Defaults to current node.
     * @param args Array The args to call the function with. Defaults to passing the current component.
     * @returns Ext.Component this
     */
    bubble?: (fn?: any, scope?: any, args?: any[]) => Ext$Ext$IComponent,

    /**
     * [Method] Cancel any deferred focus on this component
     */
    cancelFocus?: () => void,

    /**
     * [Method] Center this Component in its container
     * @returns Ext.Component this
     */
    center?: () => Ext$Ext$IComponent,

    /**
     * [Method] Clone the current component using the original config values passed into this instance by default
     * @param overrides Object A new config containing any properties to override in the cloned version. An id property can be passed on this object, otherwise one will be generated to avoid duplicates.
     * @returns Ext.Component clone The cloned copy of this component
     */
    cloneConfig?: (overrides?: any) => Ext$Ext$IComponent,

    /**
     * [Method] Moves this floating Component into a constrain region
     * @param constrainTo String/HTMLElement/Ext.Element/Ext.util.Region The Element or Region into which this Component is to be constrained. Defaults to the element into which this floating Component was rendered.
     */
    doConstrain?: (constrainTo?: any) => void,

    /**
     * [Method] Find a container above this component at any level by a custom function
     * @param fn Function The custom function to call with the arguments (container, this component).
     * @returns Ext.container.Container The first Container for which the custom function returns true
     */
    findParentBy?: (fn?: any) => Ext$Ext$container.container$IContainer,

    /**
     * [Method] Find a container above this component at any level by xtype or class See also the up method
     * @param xtype String/Ext.Class The xtype string for a component, or the class of the component directly
     * @returns Ext.container.Container The first Container which matches the given xtype or class
     */
    findParentByType?: (xtype?: any) => Ext$Ext$container.container$IContainer,

    /**
     * [Method] Try to focus this component
     * @param selectText Boolean If applicable, true to also select the text in this component
     * @param delay Boolean/Number Delay the focus this number of milliseconds (true for 10 milliseconds).
     * @param callback Function Only needed if the delay parameter is used. A function to call upon focus.
     * @param scope Function Only needed if the delay parameter is used. The scope (this reference) in which to execute the callback.
     * @returns Ext.Component The focused Component. Usually this Component. Some Containers may delegate focus to a descendant Component (Windows can do this through their defaultFocus config option.
     */
    focus?: (
      selectText?: boolean,
      delay?: any,
      Ext$callback?: any,
      scope?: any
    ) => Ext$Ext$IComponent,

    /**
     * [Method] Retrieves the top level element representing this component
     * @returns Ext.dom.Element
     */
    getEl?: () => Ext$Ext$dom.target$IElement,

    /**
     * [Method] Retrieves the id of this component
     * @returns String
     */
    getId?: () => string,

    /**
     * [Method] Gets the current XY position of the component s underlying element
     * @param local Boolean If true the element's left and top are returned instead of page XY.
     * @returns Number[] The XY position of the element (e.g., [100, 200])
     */
    getPosition?: (local?: boolean) => number[],

    /**
     * [Method] Gets the xtype for this component as registered with Ext ComponentManager
     * @returns String The xtype
     */
    getXType?: () => string,

    /**
     * [Method] Hides this Component setting it to invisible using the configured hideMode
     * @param animateTarget String/Ext.Element/Ext.Component only valid for floating Components such as Windows or ToolTips, or regular Components which have been configured with floating: true.. The target to which the Component should animate while hiding.
     * @param callback Function A callback function to call after the Component is hidden.
     * @param scope Object The scope (this reference) in which the callback is executed. Defaults to this Component.
     * @returns Ext.Component this
     */
    hide?: (
      animateTarget?: any,
      Ext$callback?: any,
      scope?: any
    ) => Ext$Ext$IComponent,

    /**
     * [Method] The initComponent template method is an important initialization step for a Component
     */
    initComponent?: () => void,

    /**
     * [Method] Method to manage awareness of when components are added to their respective Container firing an added event
     */
    onAdded?: () => void,

    /**
     * [Method] Allows addition of behavior to the destroy operation
     */
    onDestroy?: () => void,

    /**
     * [Method] Possibly animates down to a target element
     * @param animateTarget String/Ext.Element/Ext.Component
     * @param callback Function
     * @param scope Object
     */
    onHide?: (animateTarget?: any, Ext$callback?: any, scope?: any) => void,

    /**
     * [Method] Allows addition of behavior to the show operation
     * @param animateTarget String/Ext.Element
     * @param callback Function
     * @param scope Object
     */
    onShow?: (animateTarget?: any, Ext$callback?: any, scope?: any) => void,

    /**
     * [Method] Invoked after the afterShow method is complete
     * @param callback Function
     * @param scope Object
     */
    onShowComplete?: (Ext$callback?: any, scope?: any) => void,

    /**
     * [Method] Scrolls this Component s target element by the passed delta values optionally animating
     * @param deltaX Number/Number[]/Object Either the x delta, an Array specifying x and y deltas or an object with "x" and "y" properties.
     * @param deltaY Number/Boolean/Object Either the y delta, or an animate flag or config object.
     * @param animate Boolean/Object Animate flag/config object if the delta values were passed separately.
     */
    scrollBy?: (deltaX?: any, deltaY?: any, animate?: any) => void,

    /**
     * [Method] This method is called internally by Ext ZIndexManager to signal that a floating Component has either been moved to th
     * @param active Boolean True to activate the Component, false to deactivate it.
     * @param newActive Ext.Component The newly active Component which is taking over topmost zIndex position.
     */
    setActive?: (active?: boolean, newActive?: Ext$Ext$IComponent) => void,

    /**
     * [Method] Sets the overflow on the content element of the component
     * @param scroll Boolean True to allow the Component to auto scroll.
     * @returns Ext.Component this
     */
    setAutoScroll?: (scroll?: boolean) => Ext$Ext$IComponent,

    /**
     * [Method] This method changes the region config property for this border region
     * @param region String The new region value ("north", "south", "east" or "west").
     * @returns String The previous value of the region property.
     */
    setBorderRegion?: (region?: string) => string,

    /**
     * [Method] This method allows you to show or hide a LoadMask on top of this component
     * @param load Boolean/Object/String True to show the default LoadMask, a config object that will be passed to the LoadMask constructor, or a message String to show. False to hide the current LoadMask.
     * @param targetEl Boolean True to mask the targetEl of this Component instead of the this.el. For example, setting this to true on a Panel will cause only the body to be masked.
     * @returns Ext.LoadMask The LoadMask instance that has just been shown.
     */
    setLoading?: (load?: any, targetEl?: boolean) => Ext$Ext$ILoadMask,

    /**
     * [Method] Sets the overflow x y on the content element of the component
     * @param overflowX String The overflow-x value.
     * @param overflowY String The overflow-y value.
     * @returns Ext.Component this
     */
    setOverflowXY?: (
      overflowX?: string,
      overflowY?: string
    ) => Ext$Ext$IComponent,

    /**
     * [Method] Sets the page XY position of the component
     * @param x Number/Number[] The new x position or an array of [x,y].
     * @param y Number The new y position.
     * @param animate Boolean/Object True to animate the Component into its new position. You may also pass an animation configuration.
     * @returns Ext.Component this
     */
    setPagePosition?: (
      x?: any,
      y?: number,
      animate?: any
    ) => Ext$Ext$IComponent,

    /**
     * [Method] Sets the left and top of the component
     * @param x Number/Number[]/Object The new left, an array of [x,y], or animation config object containing x and y properties.
     * @param y Number The new top.
     * @param animate Boolean/Object If true, the Component is animated into its new position. You may also pass an animation configuration.
     * @returns Ext.Component this
     */
    setPosition?: (x?: any, y?: number, animate?: any) => Ext$Ext$IComponent,

    /**
     * [Method] Sets the weight config property for this component
     * @param weight Number The new weight value.
     * @returns Number The previous value of the weight property.
     */
    setRegionWeight?: (weight?: number) => number,

    /**
     * [Method] Shows this Component rendering it first if autoRender or floating are true
     * @param animateTarget String/Ext.Element only valid for floating Components such as Windows or ToolTips, or regular Components which have been configured with floating: true. The target from which the Component should animate from while opening.
     * @param callback Function A callback function to call after the Component is displayed. Only necessary if animation was specified.
     * @param scope Object The scope (this reference) in which the callback is executed. Defaults to this Component.
     * @returns Ext.Component this
     */
    show?: (
      animateTarget?: any,
      Ext$callback?: any,
      scope?: any
    ) => Ext$Ext$IComponent,

    /**
     * [Method] Displays component at specific xy position
     * @param x Number/Number[] The new x position or array of [x,y].
     * @param y Number The new y position
     * @param animate Boolean/Object True to animate the Component into its new position. You may also pass an animation configuration.
     * @returns Ext.Component this
     */
    showAt?: (x?: any, y?: number, animate?: any) => Ext$Ext$IComponent,

    /**
     * [Method] Shows this component by the specified Component or Element
     * @param component Ext.Component/Ext.dom.Element The Ext.Component or Ext.Element to show the component by.
     * @param position String Alignment position as used by Ext.util.Positionable.getAlignToXY. Defaults to defaultAlign.
     * @param offsets Number[] Alignment offsets as used by Ext.util.Positionable.getAlignToXY.
     * @returns Ext.Component this
     */
    showBy?: (
      component?: any,
      position?: string,
      offsets?: number[]
    ) => Ext$Ext$IComponent,

    /**
     * [Method] Sends this Component to the back of lower z index than any other visible windows
     * @returns Ext.Component this
     */
    toBack?: () => Ext$Ext$IComponent,

    /**
     * [Method] Brings this floating Component to the front of any other visible floating Components managed by the same ZIndexManag
     * @param preventFocus Boolean Specify true to prevent the Component from being focused.
     * @returns Ext.Component this
     */
    toFront?: (preventFocus?: boolean) => Ext$Ext$IComponent,

    /**
     * [Method] Sets the current box measurements of the component s underlying element
     * @param box Object An object in the format {x, y, width, height}
     * @returns Ext.Component this
     */
    updateBox?: (box?: any) => Ext$Ext$IComponent,

    /**
     * [Config Option] (Boolean)
     */
    autoSize?: boolean,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (String/Object)
     */
    componentLayout?: any,

    /**
     * [Config Option] (String[])
     */
    enginePriority?: string[],

    /**
     * [Config Option] (Object[])
     */
    gradients?: any[],

    /**
     * [Config Option] (Ext.draw.Sprite[])
     */
    items?: Ext$Ext$draw.target$ISprite[],

    /**
     * [Config Option] (Boolean/Number)
     */
    shrinkWrap?: any,

    /**
     * [Config Option] (Boolean)
     */
    viewBox?: boolean,

    /**
     * [Property] (Ext.draw.Surface)
     */
    surface?: Ext$Ext$draw.draw$ISurface,

    /**
     * [Config Option] (String)
     */
    backgroundColor?: string,

    /**
     * [Config Option] (Boolean)
     */
    expressInstall?: boolean,

    /**
     * [Config Option] (Object)
     */
    flashAttributes?: any,

    /**
     * [Config Option] (Object)
     */
    flashParams?: any,

    /**
     * [Config Option] (Object)
     */
    flashVars?: any,

    /**
     * [Config Option] (String)
     */
    flashVersion?: string,

    /**
     * [Config Option] (Ext.XTemplate/String/String[])
     */
    renderTpl?: any,

    /**
     * [Config Option] (String/Number)
     */
    swfHeight?: any,

    /**
     * [Config Option] (String/Number)
     */
    swfWidth?: any,

    /**
     * [Config Option] (String)
     */
    url?: string,

    /**
     * [Config Option] (String)
     */
    wmode?: string,

    /**
     * [Property] (Ext.Element)
     */
    swf?: Ext$target$IElement,

    /**
     * [Property] (String)
     */
    EXPRESS_INSTALL_URL?: string,

    /**
     * [Method] Allows addition of behavior after rendering is complete
     */
    afterRender?: () => void,

    /**
     * [Method] Invoked before the Component is destroyed
     */
    beforeDestroy?: () => void,

    /**
     * [Method] Retrieves the id of the SWF object embed element
     */
    getSwfId?: () => void,

    /**
     * [Method] The initComponent template method is an important initialization step for a Component
     */
    initComponent?: () => void,

    /**
     * [Method] Called before any calculation cycles to reset DOM values and prepare for calculation
     * @param ownerContext Object
     * @param firstCycle Object
     */
    beginLayoutCycle?: (ownerContext?: any, firstCycle?: any) => void,

    /**
     * [Method] This method is called after all layouts are complete and their calculations flushed to the DOM
     * @param ownerContext Object
     */
    finishedLayout?: (ownerContext?: any) => void,

    /**
     * [Method] Returns the element into which rendering must take place
     * @returns Ext.Element
     */
    getRenderTarget?: () => Ext$target$IElement,

    /**
     * [Method] Returns the owner component s resize element
     * @returns Ext.Element
     */
    getTarget?: () => Ext$target$IElement,

    /**
     * [Method] This method if implemented is called after all layouts are finished and all have a lastComponentSize cached
     * @param ownerContext Object
     */
    notifyOwner?: (ownerContext?: any) => void
  } & undefined.app$IEventDomain;

  declare export type Ext$IComponentLoader = {
    /**
     * [Config Option] (Boolean/Object)
     */
    loadMask?: any,

    /**
     * [Config Option] (Boolean)
     */
    scripts?: boolean,

    /**
     * [Config Option] (Ext.Component/String)
     */
    target?: any,

    /**
     * [Method] Set a Ext Component as the target of this loader
     * @param target String/Ext.Component The component to be the target of this loader. If a string is passed it will be looked up via its id.
     */
    setTarget?: (target?: any) => void
  } & Ext$Ext$IElementLoader;

  declare export type Ext$IComponentManager = {} & Ext$Ext$IAbstractManager;

  declare export class Ext$ComponentManager {
    /**
     * [Property] (Ext.util.HashMap)
     */
    static all: Ext$Ext$util.util$IHashMap;

    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Creates a new Component from the specified config object using the config object s xtype to determine the class to in
     * @param config Object A configuration object for the Component you wish to create.
     * @param defaultType String The xtype to use if the config object does not contain a xtype. (Optional if the config contains a xtype).
     * @returns Ext.Component The newly instantiated Component.
     */
    static create(config?: any, defaultType?: string): Ext$Ext$IComponent;

    /**
     * [Method] Executes the specified function once for each item in the collection
     * @param fn Function The function to execute.
     * @param scope Object The scope to execute in. Defaults to this.
     */
    static each(fn?: any, scope?: any): void;

    /**
     * [Method] Returns an item by id
     * @param id String The id of the item
     * @returns Object The item, undefined if not found.
     */
    static get(Ext$id?: string): any;

    /**
     * [Method] Gets the number of items in the collection
     * @returns Number The number of items in the collection.
     */
    static getCount(): number;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(name?: string): any;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Checks if an item type is registered
     * @param type String The mnemonic string by which the class may be looked up
     * @returns Boolean Whether the type is registered.
     */
    static isRegistered(Ext$type?: string): boolean;

    /**
     * [Method] Registers a function that will be called when an item with the specified id is added to the manager
     * @param id String The item id
     * @param fn Function The callback function. Called with a single parameter, the item.
     * @param scope Object The scope (this reference) in which the callback is executed. Defaults to the item.
     */
    static onAvailable(Ext$id?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Registers an item to be managed
     * @param item Object The item to register
     */
    static register(item?: any): void;

    /**
     * [Method] Registers a new item constructor keyed by a type key
     * @param type Object
     * @param cls Object
     */
    static registerType(Ext$type?: any, cls?: any): void;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Unregisters an item by removing it from this manager
     * @param item Object The item to unregister
     */
    static unregister(item?: any): void;
  }

  declare export type Ext$IComponentMgr = {} & Ext$Ext$IAbstractManager;

  declare export class Ext$ComponentMgr {
    /**
     * [Property] (Ext.util.HashMap)
     */
    static all: Ext$Ext$util.util$IHashMap;

    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Creates a new Component from the specified config object using the config object s xtype to determine the class to in
     * @param config Object A configuration object for the Component you wish to create.
     * @param defaultType String The xtype to use if the config object does not contain a xtype. (Optional if the config contains a xtype).
     * @returns Ext.Component The newly instantiated Component.
     */
    static create(config?: any, defaultType?: string): Ext$Ext$IComponent;

    /**
     * [Method] Executes the specified function once for each item in the collection
     * @param fn Function The function to execute.
     * @param scope Object The scope to execute in. Defaults to this.
     */
    static each(fn?: any, scope?: any): void;

    /**
     * [Method] Returns an item by id
     * @param id String The id of the item
     * @returns Object The item, undefined if not found.
     */
    static get(Ext$id?: string): any;

    /**
     * [Method] Gets the number of items in the collection
     * @returns Number The number of items in the collection.
     */
    static getCount(): number;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(name?: string): any;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Checks if an item type is registered
     * @param type String The mnemonic string by which the class may be looked up
     * @returns Boolean Whether the type is registered.
     */
    static isRegistered(Ext$type?: string): boolean;

    /**
     * [Method] Registers a function that will be called when an item with the specified id is added to the manager
     * @param id String The item id
     * @param fn Function The callback function. Called with a single parameter, the item.
     * @param scope Object The scope (this reference) in which the callback is executed. Defaults to the item.
     */
    static onAvailable(Ext$id?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Registers an item to be managed
     * @param item Object The item to register
     */
    static register(item?: any): void;

    /**
     * [Method] Registers a new item constructor keyed by a type key
     * @param type Object
     * @param cls Object
     */
    static registerType(Ext$type?: any, cls?: any): void;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Unregisters an item by removing it from this manager
     * @param item Object The item to unregister
     */
    static unregister(item?: any): void;
  }

  declare export type Ext$IComponentQuery = {} & Ext$Ext$IBase;

  declare export class Ext$ComponentQuery {
    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(name?: string): any;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Tests whether the passed Component matches the selector string
     * @param component Ext.Component The Component to test
     * @param selector String The selector string to test against.
     * @returns Boolean True if the Component matches the selector.
     */
    static is(component?: Ext$Ext$IComponent, selector?: string): boolean;

    /**
     * [Method] Returns an array of matched Components from within the passed root object
     * @param selector String The selector string to filter returned Components
     * @param root Ext.container.Container The Container within which to perform the query. If omitted, all Components within the document are included in the search. This parameter may also be an array of Components to filter according to the selector.
     * @returns Ext.Component[] The matched Components.
     */
    static query(
      selector?: string,
      root?: Ext$Ext$container.container$IContainer
    ): Ext$Ext$IComponent[];

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;
  }

  declare export type container$IViewport = {
    /**
     * [Property] (Boolean)
     */
    isViewport?: boolean,

    /**
     * [Method] Template method called when this Component s DOM structure is created
     */
    onRender?: () => void,

    /**
     * [Property] (Boolean)
     */
    isViewport?: boolean,

    /**
     * [Method] Template method called when this Component s DOM structure is created
     */
    onRender?: () => void
  } & undefined.container$IContainer;

  declare export type Ext$IButtonGroup = {
    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Number)
     */
    columns?: number,

    /**
     * [Config Option] (String)
     */
    defaultButtonUI?: string,

    /**
     * [Config Option] (String)
     */
    defaultType?: string,

    /**
     * [Config Option] (Boolean)
     */
    frame?: boolean,

    /**
     * [Config Option] (Ext.enums.Layout/Object)
     */
    Ext$layout?: any,

    /**
     * [Config Option] (String)
     */
    titleAlign?: string,

    /**
     * [Method] private
     * @param component Object
     */
    onBeforeAdd?: (component?: any) => void,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Number)
     */
    columns?: number,

    /**
     * [Config Option] (String)
     */
    defaultButtonUI?: string,

    /**
     * [Config Option] (String)
     */
    defaultType?: string,

    /**
     * [Config Option] (Boolean)
     */
    frame?: boolean,

    /**
     * [Config Option] (Ext.enums.Layout/Object)
     */
    Ext$layout?: any,

    /**
     * [Config Option] (String)
     */
    titleAlign?: string,

    /**
     * [Method] private
     * @param component Object
     */
    onBeforeAdd?: (component?: any) => void
  } & undefined.tree$IPanel;

  declare export type Ext$IContainer = {
    /**
     * [Config Option] (Number/Object)
     */
    anchorSize?: any,

    /**
     * [Method] Return the immediate child Component in which the passed element is located
     * @param el Ext.Element/HTMLElement/String The element to test (or ID of element).
     * @param deep Boolean If true, returns the deepest descendant Component which contains the passed element.
     * @returns Ext.Component The child item which contains the passed element.
     */
    getChildByElement?: (el?: any, deep?: boolean) => Ext$Ext$IComponent,

    /**
     * [Config Option] (Number/Object)
     */
    anchorSize?: any,

    /**
     * [Method] Return the immediate child Component in which the passed element is located
     * @param el Ext.Element/HTMLElement/String The element to test (or ID of element).
     * @param deep Boolean If true, returns the deepest descendant Component which contains the passed element.
     * @returns Ext.Component The child item which contains the passed element.
     */
    getChildByElement?: (el?: any, deep?: boolean) => Ext$Ext$IComponent,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Number/String/Boolean)
     */
    border?: any,

    /**
     * [Config Option] (String)
     */
    defaultType?: string,

    /**
     * [Config Option] (Number)
     */
    defaultWidth?: number,

    /**
     * [Config Option] (Boolean)
     */
    detachOnRemove?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    enableColumnHide?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    sealed?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    sortable?: boolean,

    /**
     * [Config Option] (Number)
     */
    weight?: number,

    /**
     * [Property] (Boolean)
     */
    isGroupHeader?: boolean,

    /**
     * [Method] Returns the number of grid columns descended from this HeaderContainer
     */
    getColumnCount?: () => void,

    /**
     * [Method] Returns an array of menu CheckItems corresponding to all immediate children of the passed Container which have been c
     * @param headerContainer Object
     */
    getColumnMenu?: (headerContainer?: any) => void,

    /**
     * [Method] Gets the full width of all columns that are visible
     */
    getFullWidth?: () => void,

    /**
     * [Method] Returns an array of all columns which appear in the grid s View
     * @param inResult Object
     * @param hiddenAncestor Object
     * @returns Array
     */
    getGridColumns?: (inResult?: any, hiddenAncestor?: any) => any[],

    /**
     * [Method] Get a leaf level header by index regardless of what the nesting structure is
     * @param index Number The column index for which to retrieve the column.
     */
    getHeaderAtIndex?: (index?: number) => void,

    /**
     * [Method] Returns the index of a leaf level header regardless of what the nesting structure is
     * @param header Ext.grid.column.Column The header to find the index of
     * @returns Number The index of the specified column header
     */
    getHeaderIndex?: (header?: Ext$Ext$grid.column.tree$IColumn) => number,

    /**
     * [Method] Returns an array of menu items to be placed into the shared menu across all headers in this header container
     * @returns Array menuItems
     */
    getMenuItems?: () => any[],

    /**
     * [Method] Returns an array of the visible columns in the grid
     * @returns Array
     */
    getVisibleGridColumns?: () => any[],

    /**
     * [Method] When passed a column index returns the closet visible column to that
     * @param index Number Position at which to find the closest visible column.
     */
    getVisibleHeaderClosestToIndex?: (index?: number) => void,

    /**
     * [Method] Determines whether this Component is the root of a layout
     */
    isLayoutRoot?: () => void,

    /**
     * [Method] Invalidate column cache on add We cannot refresh the View on every add because this method is called when the HeaderD
     * @param c Object
     */
    onAdd?: (c?: any) => void,

    /**
     * [Method] Allows addition of behavior to the destroy operation
     */
    onDestroy?: () => void,

    /**
     * [Method] Invalidate column cache on remove We cannot refresh the View on every remove because this method is called when the H
     * @param c Object
     */
    onRemove?: (c?: any) => void,

    /**
     * [Method] Allows addition of behavior to the show operation
     */
    onShow?: () => void,

    /**
     * [Config Option] (String)
     */
    itemCls?: string,

    /**
     * [Property] (Ext.Element)
     */
    overflowPadderEl?: Ext$target$IElement,

    /**
     * [Method] Adds each argument passed to this method to the childEls array
     */
    addChildEls?: () => void,

    /**
     * [Method] In addition to work done by our base classes containers benefit from some extra cached data
     * @param ownerContext Object
     */
    beginLayout?: (ownerContext?: any) => void,

    /**
     * [Method] Called before any calculation cycles to reset DOM values and prepare for calculation
     * @param ownerContext Object
     * @param firstCycle Object
     */
    beginLayoutCycle?: (ownerContext?: any, firstCycle?: any) => void,

    /**
     * [Method] Adds layout s itemCls and owning Container s itemCls
     * @param item Object
     */
    configureItem?: (item?: any) => void,

    /**
     * [Method] Returns the container size that of the target
     * @param ownerContext Ext.layout.ContextItem The owner's context item.
     * @param inDom Boolean True if the container size must be in the DOM.
     * @returns Object The size
     */
    getContainerSize?: (
      ownerContext?: Ext$Ext$layout.layout$IContextItem,
      inDom?: boolean
    ) => any,

    /**
     * [Method] Returns the element into which extra functional DOM elements can be inserted
     * @returns Ext.Element
     */
    getElementTarget?: () => Ext$target$IElement,

    /**
     * [Method] Returns an array of child components either for a render phase Performed in the beforeLayout method of the layout s
     * @returns Ext.Component[] of child components
     */
    getLayoutItems?: () => Ext$Ext$IComponent[],

    /**
     * [Method] Returns the element into which rendering must take place
     * @returns Ext.Element
     */
    getRenderTarget?: () => Ext$target$IElement,

    /**
     * [Method] Returns all items that are rendered
     * @returns Array All matching items
     */
    getRenderedItems?: () => any[],

    /**
     * [Method] Returns the owner component s resize element
     * @returns Ext.Element
     */
    getTarget?: () => Ext$target$IElement,

    /**
     * [Method] Returns all items that are both rendered and visible
     * @returns Array All matching items
     */
    getVisibleItems?: () => any[],

    /**
     * [Method] Removes items in the childEls array based on the return value of a supplied test function
     * @param testFn Function The test function.
     */
    removeChildEls?: (testFn?: any) => void
  } & undefined.container$IAbstractContainer;

  declare export type Ext$IViewport = {
    /**
     * [Property] (Boolean)
     */
    isViewport?: boolean,

    /**
     * [Method] Template method called when this Component s DOM structure is created
     */
    onRender?: () => void,

    /**
     * [Property] (Boolean)
     */
    isViewport?: boolean,

    /**
     * [Method] Template method called when this Component s DOM structure is created
     */
    onRender?: () => void
  } & undefined.Ext$IContainer;

  declare export type data$IXmlStore = {} & undefined.property$IStore;

  declare export type Ext$IStoreMgr = {} & undefined.util$IMixedCollection;

  declare export class Ext$StoreMgr {
    /**
     * [Property] (Object)
     */
    static hasListeners: any;

    /**
     * [Property] (Boolean)
     */
    static isMixedCollection: boolean;

    /**
     * [Property] (Boolean)
     */
    static isObservable: boolean;

    /**
     * [Property] (Boolean)
     */
    static isSortable: boolean;

    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Property] (Ext.util.MixedCollection)
     */
    static sorters: Ext$Ext$util.util$IMixedCollection;

    /**
     * [Method] Adds an item to the collection
     * @param key String/Object The key to associate with the item, or the new item. If a getKey implementation was specified for this MixedCollection, or if the key of the stored items is in a property called id, the MixedCollection will be able to derive the key for the new item. In this case just pass the new item in this parameter.
     * @param obj Object The item to add.
     * @returns Object The item added.
     */
    static add(key?: any, obj?: any): any;

    /**
     * [Method] Adds all elements of an Array or an Object to the collection
     * @param objs Object/Array An Object containing properties which will be added to the collection, or an Array of values, each of which are added to the collection. Functions references will be added to the collection if allowFunctions has been set to true.
     */
    static addAll(objs?: any): void;

    /**
     * [Method] Adds the specified events to the list of events which this Observable may fire
     * @param eventNames Object/String... Either an object with event names as properties with a value of true. For example: this.addEvents({  storeloaded: true,  storecleared: true });  Or any number of event names as separate parameters. For example: this.addEvents('storeloaded', 'storecleared');
     */
    static addEvents(eventNames?: any): void;

    /**
     * [Method] Appends an event handler to this object
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addListener(
      eventName?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Adds listeners to any Observable object or Ext Element which are automatically removed when this Component is destr
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Removes all items from the collection
     */
    static clear(): void;

    /**
     * [Method] Removes all listeners for this object including the managed listeners
     */
    static clearListeners(): void;

    /**
     * [Method] Removes all managed listeners for this object
     */
    static clearManagedListeners(): void;

    /**
     * [Method] Creates a shallow copy of this collection
     * @returns Ext.util.MixedCollection
     */
    static clone(): Ext$Ext$util.util$IMixedCollection;

    /**
     * [Method] Collects unique values of a particular property in this MixedCollection
     * @param property String The property to collect on
     * @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object
     * @param allowBlank Boolean Pass true to allow null, undefined or empty string values
     * @returns Array The unique values
     */
    static collect(
      property?: string,
      root?: string,
      allowBlank?: boolean
    ): any[];

    /**
     * [Method] Returns true if the collection contains the passed Object as an item
     * @param o Object The Object to look for in the collection.
     * @returns Boolean True if the collection contains the Object as an item.
     */
    static contains(o?: any): boolean;

    /**
     * [Method] Returns true if the collection contains the passed Object as a key
     * @param key String The key to look for in the collection.
     * @returns Boolean True if the collection contains the Object as a key.
     */
    static containsKey(key?: string): boolean;

    /**
     * [Method] Executes the specified function once for every item in the collection
     * @param fn Function The function to execute for each item.
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the current item in the iteration.
     */
    static each(fn?: any, scope?: any): void;

    /**
     * [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th
     * @param fn Function The function to execute for each item.
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
     */
    static eachKey(fn?: any, scope?: any): void;

    /**
     * [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
     * @param eventNames String/String[] The event name to bubble, or an Array of event names.
     */
    static enableBubble(eventNames?: any): void;

    /**
     * [Method] Filters the objects in this collection by a set of Filters or by a single property value pair with optional paramete
     * @param property Ext.util.Filter[]/String A property on your objects, or an array of Filter objects
     * @param value String/RegExp Either string that the property values should start with or a RegExp to test against the property
     * @param anyMatch Boolean True to match any part of the string, not just the beginning
     * @param caseSensitive Boolean True for case sensitive comparison.
     * @returns Ext.util.MixedCollection The new filtered collection
     */
    static filter(
      property?: any,
      Ext$value?: any,
      anyMatch?: boolean,
      caseSensitive?: boolean
    ): Ext$Ext$util.util$IMixedCollection;

    /**
     * [Method] Filter by a function
     * @param fn Function The function to be called.
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection.
     * @returns Ext.util.MixedCollection The new filtered collection
     */
    static filterBy(fn?: any, scope?: any): Ext$Ext$util.util$IMixedCollection;

    /**
     * [Method] Returns the first item in the collection which elicits a true return value from the passed selection function
     */
    static find(): void;

    /**
     * [Method] Returns the first item in the collection which elicits a true return value from the passed selection function
     * @param fn Function The selection function to execute for each item.
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
     * @returns Object The first item in the collection which returned true from the selection function, or null if none was found.
     */
    static findBy(fn?: any, scope?: any): any;

    /**
     * [Method] Finds the index of the first matching object in this collection by a specific property value
     * @param property String The name of a property on your objects.
     * @param value String/RegExp A string that the property values should start with or a RegExp to test against the property.
     * @param start Number The index to start searching at.
     * @param anyMatch Boolean True to match any part of the string, not just the beginning.
     * @param caseSensitive Boolean True for case sensitive comparison.
     * @returns Number The matched index or -1
     */
    static findIndex(
      property?: string,
      Ext$value?: any,
      start?: number,
      anyMatch?: boolean,
      caseSensitive?: boolean
    ): number;

    /**
     * [Method] Find the index of the first matching object in this collection by a function
     * @param fn Function The function to be called.
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection.
     * @param start Number The index to start searching at.
     * @returns Number The matched index or -1
     */
    static findIndexBy(fn?: any, scope?: any, start?: number): number;

    /**
     * [Method] Calculates the insertion index of the new item based upon the comparison function passed or the current sort order
     * @param newItem Object The new object to find the insertion position of.
     * @param sorterFn Function The function to sort by. This is the same as the sorting function passed to sortBy. It accepts 2 items from this MixedCollection, and returns -1 0, or 1 depending on the relative sort positions of the 2 compared items. If omitted, a function generated from the currently defined set of sorters will be used.
     * @returns Number The insertion point to add the new item into this MixedCollection at using insert
     */
    static findInsertionIndex(newItem?: any, sorterFn?: any): number;

    /**
     * [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
     * @param eventName String The name of the event to fire.
     * @param args Object... Variable number of parameters are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEvent(eventName: string, ...args: any[]): boolean;

    /**
     * [Method] Fires the specified event with the passed parameter list
     * @param eventName String The name of the event to fire.
     * @param args Object[] An array of parameters which are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEventArgs(eventName?: string, args?: any[]): boolean;

    /**
     * [Method] Returns the first item in the collection
     * @returns Object the first item in the collection..
     */
    static first(): any;

    /**
     * [Method] Returns a comparator function which compares two items and returns 1 0 or 1 depending on the currently defined set
     */
    static generateComparator(): void;

    /**
     * [Method] Returns the item associated with the passed key OR index
     * @param key String/Number The key or index of the item.
     * @returns Object If the item is found, returns the item. If the item was not found, returns undefined. If an item was found, but is a Class, returns null.
     */
    static get(key?: any): any;

    /**
     * [Method] Returns the item at the specified index
     * @param index Number The index of the item.
     * @returns Object The item at the specified index.
     */
    static getAt(index?: number): any;

    /**
     * [Method] Returns the item associated with the passed key
     * @param key String/Number The key of the item.
     * @returns Object The item associated with the passed key.
     */
    static getByKey(key?: any): any;

    /**
     * [Method] Returns the number of items in the collection
     * @returns Number the number of items in the collection.
     */
    static getCount(): number;

    /**
     * [Method] Gets the first sorter from the sorters collection excluding any groupers that may be in place
     * @returns Ext.util.Sorter The sorter, null if none exist
     */
    static getFirstSorter(): Ext$Ext$util.util$ISorter;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(name?: string): any;

    /**
     * [Method] getKey implementation for MixedCollection
     * @param o Object
     * @returns Object The key for the passed item.
     */
    static getKey(o?: any): any;

    /**
     * [Method] Returns a range of items in this collection
     * @param startIndex Number The starting index. Defaults to 0.
     * @param endIndex Number The ending index. Defaults to the last item.
     * @returns Array An array of items
     */
    static getRange(startIndex?: number, endIndex?: number): any[];

    /**
     * [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles
     * @param eventName String The name of the event to check for
     * @returns Boolean true if the event is being listened for or bubbles, else false
     */
    static hasListener(eventName?: string): boolean;

    /**
     * [Method] Returns index within the collection of the passed Object
     * @param o Object The item to find the index of.
     * @returns Number index of the item. Returns -1 if not found.
     */
    static indexOf(o?: any): number;

    /**
     * [Method] Returns index within the collection of the passed key
     * @param key String The key to find the index of.
     * @returns Number index of the key.
     */
    static indexOfKey(key?: string): number;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Performs initialization of this mixin
     */
    static initSortable(): void;

    /**
     * [Method] Inserts an item at the specified index in the collection
     * @param index Number The index to insert the item at.
     * @param key String/Object/String[]/Object[] The key to associate with the new item, or the item itself. May also be an array of either to insert multiple items at once.
     * @param o Object/Object[] If the second parameter was a key, the new item. May also be an array to insert multiple items at once.
     * @returns Object The item inserted or an array of items inserted.
     */
    static insert(index?: number, key?: any, o?: any): any;

    /**
     * [Method] Returns the last item in the collection
     * @returns Object the last item in the collection..
     */
    static last(): any;

    /**
     * [Method] Gets a registered Store by id
     * @param store String/Object The id of the Store, or a Store instance, or a store configuration
     * @returns Ext.data.Store
     */
    static lookup(store?: any): Ext$Ext$data.property$IStore;

    /**
     * [Method] Shorthand for addManagedListener
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static mon(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Shorthand for removeManagedListener
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static mun(item?: any, ename?: any, fn?: any, scope?: any): void;

    /**
     * [Method] Shorthand for addListener
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static on(eventName?: any, fn?: any, scope?: any, options?: any): any;

    /**
     * [Method] Registers one or more Stores with the StoreManager
     * @param stores Ext.data.Store... Any number of Store instances
     */
    static register(stores: Ext$Ext$data.property$IStore): void;

    /**
     * [Method] Relays selected events from the specified Observable as if the events were fired by this
     * @param origin Object The Observable whose events this object is to relay.
     * @param events String[] Array of event names to relay.
     * @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
     * @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or this.store.relayers.destroy();
     */
    static relayEvents(origin?: any, events?: string[], prefix?: string): any;

    /**
     * [Method] Remove an item from the collection
     * @param o Object The item to remove.
     * @returns Object The item removed or false if no item was removed.
     */
    static remove(o?: any): any;

    /**
     * [Method] Remove all items in the collection
     * @param items Array An array of items to be removed.
     * @returns Ext.util.MixedCollection this object
     */
    static removeAll(items?: any[]): Ext$Ext$util.util$IMixedCollection;

    /**
     * [Method] Remove an item from a specified index in the collection
     * @param index Number The index within the collection of the item to remove.
     * @returns Object The item removed or false if no item was removed.
     */
    static removeAt(index?: number): any;

    /**
     * [Method] Removes an item associated with the passed key fom the collection
     * @param key String The key of the item to remove. If null is passed, all objects which yielded no key from the configured getKey function are removed.
     * @returns Object Only returned if removing at a specified key. The item removed or false if no item was removed.
     */
    static removeAtKey(key?: string): any;

    /**
     * [Method] Removes an event handler
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static removeListener(eventName?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Removes listeners that were added by the mon method
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static removeManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any
    ): void;

    /**
     * [Method] Remove a range of items starting at a specified index in the collection
     * @param index Number The index within the collection of the item to remove.
     * @param removeCount Number The nuber of items to remove beginning at the specified index.
     * @returns Object The last item removed or false if no item was removed.
     */
    static removeRange(index?: number, removeCount?: number): any;

    /**
     * [Method] Reorders each of the items based on a mapping from old index to new index
     * @param mapping Object Mapping from old item index to new item index
     */
    static reorder(mapping?: any): void;

    /**
     * [Method] Replaces an item in the collection
     * @param key String The key associated with the item to replace, or the replacement item. If you supplied a getKey implementation for this MixedCollection, or if the key of your stored items is in a property called id, then the MixedCollection will be able to derive the key of the replacement item. If you want to replace an item with one having the same key value, then just pass the replacement item in this parameter.
     * @param o Object {Object} o (optional) If the first parameter passed was a key, the item to associate with that key.
     * @returns Object The new item.
     */
    static replace(key?: string, o?: any): any;

    /**
     * [Method] Resumes firing of the named event s
     * @param eventName String... Multiple event names to resume.
     */
    static resumeEvent(...eventName: any[]): void;

    /**
     * [Method] Resumes firing events see suspendEvents
     */
    static resumeEvents(): void;

    /**
     * [Method] Sorts the data in the Store by one or more of its properties
     * @param sorters String/Ext.util.Sorter[] Either a string name of one of the fields in this Store's configured Model, or an array of sorter configurations.
     * @param direction String The overall direction to sort the data by.
     * @returns Ext.util.Sorter[]
     */
    static sort(sorters?: any, direction?: string): Ext$Ext$util.util$ISorter[];

    /**
     * [Method] Sorts the collection by a single sorter function
     * @param sorterFn Function The function to sort by
     */
    static sortBy(sorterFn?: any): void;

    /**
     * [Method] Sorts this collection by keys
     * @param direction String 'ASC' or 'DESC'. Defaults to 'ASC'.
     * @param fn Function Comparison function that defines the sort order. Defaults to sorting by case insensitive string.
     */
    static sortByKey(direction?: string, fn?: any): void;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Collects all of the values of the given property and returns their sum
     * @param property String The property to sum by
     * @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object
     * @param start Number The record index to start at
     * @param end Number The record index to end at
     * @returns Number The total
     */
    static sum(
      property?: string,
      root?: string,
      start?: number,
      end?: number
    ): number;

    /**
     * [Method] Suspends firing of the named event s
     * @param eventName String... Multiple event names to suspend.
     */
    static suspendEvent(...eventName: any[]): void;

    /**
     * [Method] Suspends the firing of all events
     * @param queueSuspended Boolean Pass as true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events.
     */
    static suspendEvents(queueSuspended?: boolean): void;

    /**
     * [Method] Shorthand for removeListener
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static un(eventName?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Unregisters one or more Stores with the StoreManager
     * @param stores String/Object... Any number of Store instances or ID-s
     */
    static unregister(stores?: any): void;

    /**
     * [Method] Change the key for an existing item in the collection
     * @param oldKey Object The old key
     * @param newKey Object The new key
     */
    static updateKey(oldKey?: any, newKey?: any): void;
  }

  declare export type Ext$IStoreManager = {} & undefined.util$IMixedCollection;

  declare export class Ext$StoreManager {
    /**
     * [Property] (Object)
     */
    static hasListeners: any;

    /**
     * [Property] (Boolean)
     */
    static isMixedCollection: boolean;

    /**
     * [Property] (Boolean)
     */
    static isObservable: boolean;

    /**
     * [Property] (Boolean)
     */
    static isSortable: boolean;

    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Property] (Ext.util.MixedCollection)
     */
    static sorters: Ext$Ext$util.util$IMixedCollection;

    /**
     * [Method] Adds an item to the collection
     * @param key String/Object The key to associate with the item, or the new item. If a getKey implementation was specified for this MixedCollection, or if the key of the stored items is in a property called id, the MixedCollection will be able to derive the key for the new item. In this case just pass the new item in this parameter.
     * @param obj Object The item to add.
     * @returns Object The item added.
     */
    static add(key?: any, obj?: any): any;

    /**
     * [Method] Adds all elements of an Array or an Object to the collection
     * @param objs Object/Array An Object containing properties which will be added to the collection, or an Array of values, each of which are added to the collection. Functions references will be added to the collection if allowFunctions has been set to true.
     */
    static addAll(objs?: any): void;

    /**
     * [Method] Adds the specified events to the list of events which this Observable may fire
     * @param eventNames Object/String... Either an object with event names as properties with a value of true. For example: this.addEvents({  storeloaded: true,  storecleared: true });  Or any number of event names as separate parameters. For example: this.addEvents('storeloaded', 'storecleared');
     */
    static addEvents(eventNames?: any): void;

    /**
     * [Method] Appends an event handler to this object
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addListener(
      eventName?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Adds listeners to any Observable object or Ext Element which are automatically removed when this Component is destr
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Removes all items from the collection
     */
    static clear(): void;

    /**
     * [Method] Removes all listeners for this object including the managed listeners
     */
    static clearListeners(): void;

    /**
     * [Method] Removes all managed listeners for this object
     */
    static clearManagedListeners(): void;

    /**
     * [Method] Creates a shallow copy of this collection
     * @returns Ext.util.MixedCollection
     */
    static clone(): Ext$Ext$util.util$IMixedCollection;

    /**
     * [Method] Collects unique values of a particular property in this MixedCollection
     * @param property String The property to collect on
     * @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object
     * @param allowBlank Boolean Pass true to allow null, undefined or empty string values
     * @returns Array The unique values
     */
    static collect(
      property?: string,
      root?: string,
      allowBlank?: boolean
    ): any[];

    /**
     * [Method] Returns true if the collection contains the passed Object as an item
     * @param o Object The Object to look for in the collection.
     * @returns Boolean True if the collection contains the Object as an item.
     */
    static contains(o?: any): boolean;

    /**
     * [Method] Returns true if the collection contains the passed Object as a key
     * @param key String The key to look for in the collection.
     * @returns Boolean True if the collection contains the Object as a key.
     */
    static containsKey(key?: string): boolean;

    /**
     * [Method] Executes the specified function once for every item in the collection
     * @param fn Function The function to execute for each item.
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the current item in the iteration.
     */
    static each(fn?: any, scope?: any): void;

    /**
     * [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th
     * @param fn Function The function to execute for each item.
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
     */
    static eachKey(fn?: any, scope?: any): void;

    /**
     * [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
     * @param eventNames String/String[] The event name to bubble, or an Array of event names.
     */
    static enableBubble(eventNames?: any): void;

    /**
     * [Method] Filters the objects in this collection by a set of Filters or by a single property value pair with optional paramete
     * @param property Ext.util.Filter[]/String A property on your objects, or an array of Filter objects
     * @param value String/RegExp Either string that the property values should start with or a RegExp to test against the property
     * @param anyMatch Boolean True to match any part of the string, not just the beginning
     * @param caseSensitive Boolean True for case sensitive comparison.
     * @returns Ext.util.MixedCollection The new filtered collection
     */
    static filter(
      property?: any,
      Ext$value?: any,
      anyMatch?: boolean,
      caseSensitive?: boolean
    ): Ext$Ext$util.util$IMixedCollection;

    /**
     * [Method] Filter by a function
     * @param fn Function The function to be called.
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection.
     * @returns Ext.util.MixedCollection The new filtered collection
     */
    static filterBy(fn?: any, scope?: any): Ext$Ext$util.util$IMixedCollection;

    /**
     * [Method] Returns the first item in the collection which elicits a true return value from the passed selection function
     */
    static find(): void;

    /**
     * [Method] Returns the first item in the collection which elicits a true return value from the passed selection function
     * @param fn Function The selection function to execute for each item.
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
     * @returns Object The first item in the collection which returned true from the selection function, or null if none was found.
     */
    static findBy(fn?: any, scope?: any): any;

    /**
     * [Method] Finds the index of the first matching object in this collection by a specific property value
     * @param property String The name of a property on your objects.
     * @param value String/RegExp A string that the property values should start with or a RegExp to test against the property.
     * @param start Number The index to start searching at.
     * @param anyMatch Boolean True to match any part of the string, not just the beginning.
     * @param caseSensitive Boolean True for case sensitive comparison.
     * @returns Number The matched index or -1
     */
    static findIndex(
      property?: string,
      Ext$value?: any,
      start?: number,
      anyMatch?: boolean,
      caseSensitive?: boolean
    ): number;

    /**
     * [Method] Find the index of the first matching object in this collection by a function
     * @param fn Function The function to be called.
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection.
     * @param start Number The index to start searching at.
     * @returns Number The matched index or -1
     */
    static findIndexBy(fn?: any, scope?: any, start?: number): number;

    /**
     * [Method] Calculates the insertion index of the new item based upon the comparison function passed or the current sort order
     * @param newItem Object The new object to find the insertion position of.
     * @param sorterFn Function The function to sort by. This is the same as the sorting function passed to sortBy. It accepts 2 items from this MixedCollection, and returns -1 0, or 1 depending on the relative sort positions of the 2 compared items. If omitted, a function generated from the currently defined set of sorters will be used.
     * @returns Number The insertion point to add the new item into this MixedCollection at using insert
     */
    static findInsertionIndex(newItem?: any, sorterFn?: any): number;

    /**
     * [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
     * @param eventName String The name of the event to fire.
     * @param args Object... Variable number of parameters are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEvent(eventName: string, ...args: any[]): boolean;

    /**
     * [Method] Fires the specified event with the passed parameter list
     * @param eventName String The name of the event to fire.
     * @param args Object[] An array of parameters which are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEventArgs(eventName?: string, args?: any[]): boolean;

    /**
     * [Method] Returns the first item in the collection
     * @returns Object the first item in the collection..
     */
    static first(): any;

    /**
     * [Method] Returns a comparator function which compares two items and returns 1 0 or 1 depending on the currently defined set
     */
    static generateComparator(): void;

    /**
     * [Method] Returns the item associated with the passed key OR index
     * @param key String/Number The key or index of the item.
     * @returns Object If the item is found, returns the item. If the item was not found, returns undefined. If an item was found, but is a Class, returns null.
     */
    static get(key?: any): any;

    /**
     * [Method] Returns the item at the specified index
     * @param index Number The index of the item.
     * @returns Object The item at the specified index.
     */
    static getAt(index?: number): any;

    /**
     * [Method] Returns the item associated with the passed key
     * @param key String/Number The key of the item.
     * @returns Object The item associated with the passed key.
     */
    static getByKey(key?: any): any;

    /**
     * [Method] Returns the number of items in the collection
     * @returns Number the number of items in the collection.
     */
    static getCount(): number;

    /**
     * [Method] Gets the first sorter from the sorters collection excluding any groupers that may be in place
     * @returns Ext.util.Sorter The sorter, null if none exist
     */
    static getFirstSorter(): Ext$Ext$util.util$ISorter;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(name?: string): any;

    /**
     * [Method] getKey implementation for MixedCollection
     * @param o Object
     * @returns Object The key for the passed item.
     */
    static getKey(o?: any): any;

    /**
     * [Method] Returns a range of items in this collection
     * @param startIndex Number The starting index. Defaults to 0.
     * @param endIndex Number The ending index. Defaults to the last item.
     * @returns Array An array of items
     */
    static getRange(startIndex?: number, endIndex?: number): any[];

    /**
     * [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles
     * @param eventName String The name of the event to check for
     * @returns Boolean true if the event is being listened for or bubbles, else false
     */
    static hasListener(eventName?: string): boolean;

    /**
     * [Method] Returns index within the collection of the passed Object
     * @param o Object The item to find the index of.
     * @returns Number index of the item. Returns -1 if not found.
     */
    static indexOf(o?: any): number;

    /**
     * [Method] Returns index within the collection of the passed key
     * @param key String The key to find the index of.
     * @returns Number index of the key.
     */
    static indexOfKey(key?: string): number;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Performs initialization of this mixin
     */
    static initSortable(): void;

    /**
     * [Method] Inserts an item at the specified index in the collection
     * @param index Number The index to insert the item at.
     * @param key String/Object/String[]/Object[] The key to associate with the new item, or the item itself. May also be an array of either to insert multiple items at once.
     * @param o Object/Object[] If the second parameter was a key, the new item. May also be an array to insert multiple items at once.
     * @returns Object The item inserted or an array of items inserted.
     */
    static insert(index?: number, key?: any, o?: any): any;

    /**
     * [Method] Returns the last item in the collection
     * @returns Object the last item in the collection..
     */
    static last(): any;

    /**
     * [Method] Gets a registered Store by id
     * @param store String/Object The id of the Store, or a Store instance, or a store configuration
     * @returns Ext.data.Store
     */
    static lookup(store?: any): Ext$Ext$data.property$IStore;

    /**
     * [Method] Shorthand for addManagedListener
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static mon(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Shorthand for removeManagedListener
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static mun(item?: any, ename?: any, fn?: any, scope?: any): void;

    /**
     * [Method] Shorthand for addListener
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static on(eventName?: any, fn?: any, scope?: any, options?: any): any;

    /**
     * [Method] Registers one or more Stores with the StoreManager
     * @param stores Ext.data.Store... Any number of Store instances
     */
    static register(stores: Ext$Ext$data.property$IStore): void;

    /**
     * [Method] Relays selected events from the specified Observable as if the events were fired by this
     * @param origin Object The Observable whose events this object is to relay.
     * @param events String[] Array of event names to relay.
     * @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
     * @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or this.store.relayers.destroy();
     */
    static relayEvents(origin?: any, events?: string[], prefix?: string): any;

    /**
     * [Method] Remove an item from the collection
     * @param o Object The item to remove.
     * @returns Object The item removed or false if no item was removed.
     */
    static remove(o?: any): any;

    /**
     * [Method] Remove all items in the collection
     * @param items Array An array of items to be removed.
     * @returns Ext.util.MixedCollection this object
     */
    static removeAll(items?: any[]): Ext$Ext$util.util$IMixedCollection;

    /**
     * [Method] Remove an item from a specified index in the collection
     * @param index Number The index within the collection of the item to remove.
     * @returns Object The item removed or false if no item was removed.
     */
    static removeAt(index?: number): any;

    /**
     * [Method] Removes an item associated with the passed key fom the collection
     * @param key String The key of the item to remove. If null is passed, all objects which yielded no key from the configured getKey function are removed.
     * @returns Object Only returned if removing at a specified key. The item removed or false if no item was removed.
     */
    static removeAtKey(key?: string): any;

    /**
     * [Method] Removes an event handler
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static removeListener(eventName?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Removes listeners that were added by the mon method
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static removeManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any
    ): void;

    /**
     * [Method] Remove a range of items starting at a specified index in the collection
     * @param index Number The index within the collection of the item to remove.
     * @param removeCount Number The nuber of items to remove beginning at the specified index.
     * @returns Object The last item removed or false if no item was removed.
     */
    static removeRange(index?: number, removeCount?: number): any;

    /**
     * [Method] Reorders each of the items based on a mapping from old index to new index
     * @param mapping Object Mapping from old item index to new item index
     */
    static reorder(mapping?: any): void;

    /**
     * [Method] Replaces an item in the collection
     * @param key String The key associated with the item to replace, or the replacement item. If you supplied a getKey implementation for this MixedCollection, or if the key of your stored items is in a property called id, then the MixedCollection will be able to derive the key of the replacement item. If you want to replace an item with one having the same key value, then just pass the replacement item in this parameter.
     * @param o Object {Object} o (optional) If the first parameter passed was a key, the item to associate with that key.
     * @returns Object The new item.
     */
    static replace(key?: string, o?: any): any;

    /**
     * [Method] Resumes firing of the named event s
     * @param eventName String... Multiple event names to resume.
     */
    static resumeEvent(...eventName: any[]): void;

    /**
     * [Method] Resumes firing events see suspendEvents
     */
    static resumeEvents(): void;

    /**
     * [Method] Sorts the data in the Store by one or more of its properties
     * @param sorters String/Ext.util.Sorter[] Either a string name of one of the fields in this Store's configured Model, or an array of sorter configurations.
     * @param direction String The overall direction to sort the data by.
     * @returns Ext.util.Sorter[]
     */
    static sort(sorters?: any, direction?: string): Ext$Ext$util.util$ISorter[];

    /**
     * [Method] Sorts the collection by a single sorter function
     * @param sorterFn Function The function to sort by
     */
    static sortBy(sorterFn?: any): void;

    /**
     * [Method] Sorts this collection by keys
     * @param direction String 'ASC' or 'DESC'. Defaults to 'ASC'.
     * @param fn Function Comparison function that defines the sort order. Defaults to sorting by case insensitive string.
     */
    static sortByKey(direction?: string, fn?: any): void;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Collects all of the values of the given property and returns their sum
     * @param property String The property to sum by
     * @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object
     * @param start Number The record index to start at
     * @param end Number The record index to end at
     * @returns Number The total
     */
    static sum(
      property?: string,
      root?: string,
      start?: number,
      end?: number
    ): number;

    /**
     * [Method] Suspends firing of the named event s
     * @param eventName String... Multiple event names to suspend.
     */
    static suspendEvent(...eventName: any[]): void;

    /**
     * [Method] Suspends the firing of all events
     * @param queueSuspended Boolean Pass as true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events.
     */
    static suspendEvents(queueSuspended?: boolean): void;

    /**
     * [Method] Shorthand for removeListener
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static un(eventName?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Unregisters one or more Stores with the StoreManager
     * @param stores String/Object... Any number of Store instances or ID-s
     */
    static unregister(stores?: any): void;

    /**
     * [Method] Change the key for an existing item in the collection
     * @param oldKey Object The old key
     * @param newKey Object The new key
     */
    static updateKey(oldKey?: any, newKey?: any): void;
  }

  declare export interface Ext$IDate {
    /**
     * [Config Option] (String)
     */
    altFormats?: string;

    /**
     * [Config Option] (String[])
     */
    disabledDates?: string[];

    /**
     * [Config Option] (String)
     */
    disabledDatesText?: string;

    /**
     * [Config Option] (Number[])
     */
    disabledDays?: number[];

    /**
     * [Config Option] (String)
     */
    disabledDaysText?: string;

    /**
     * [Config Option] (String)
     */
    format?: string;

    /**
     * [Config Option] (String)
     */
    invalidText?: string;

    /**
     * [Config Option] (Boolean)
     */
    matchFieldWidth?: boolean;

    /**
     * [Config Option] (String)
     */
    maxText?: string;

    /**
     * [Config Option] (Date/String)
     */
    maxValue?: any;

    /**
     * [Config Option] (String)
     */
    minText?: string;

    /**
     * [Config Option] (Date/String)
     */
    minValue?: any;

    /**
     * [Config Option] (Boolean)
     */
    showToday?: boolean;

    /**
     * [Config Option] (Number)
     */
    startDay?: number;

    /**
     * [Config Option] (String)
     */
    submitFormat?: string;

    /**
     * [Config Option] (String)
     */
    triggerCls?: string;

    /**
     * [Config Option] (Boolean)
     */
    useStrict?: boolean;

    /**
     * [Method] private
     */
    beforeBlur?: () => void;

    /**
     * [Method] Creates and returns the component to be used as this field s picker
     */
    createPicker?: () => void;

    /**
     * [Method] Runs all of Date s validations and returns an array of any errors
     * @param value Object The value to get errors for (defaults to the current field value)
     * @returns String[] All validation errors for this field
     */
    getErrors?: (Ext$value?: any) => string[];

    /**
     * [Method]
     */
    initComponent?: () => void;

    /**
     * [Method] Initializes the field s value based on the initial config
     */
    initValue?: () => void;

    /**
     * [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type
     * @param rawValue Object
     * @returns Object The converted value.
     */
    rawToValue?: (rawValue?: any) => any;

    /**
     * [Method] Attempts to parse a given string value using a given date format. ...
     */
    safeParse?: any;

    /**
     * [Method] Replaces any existing disabled dates with new values and refreshes the Date picker
     * @param disabledDates String[] An array of date strings (see the disabledDates config for details on supported values) used to disable a pattern of dates.
     */
    setDisabledDates?: (disabledDates?: string[]) => void;

    /**
     * [Method] Replaces any existing disabled days by index 0 6 with new values and refreshes the Date picker
     * @param disabledDays Number[] An array of disabled day indexes. See the disabledDays config for details on supported values.
     */
    setDisabledDays?: (disabledDays?: number[]) => void;

    /**
     * [Method] Replaces any existing maxValue with the new value and refreshes the Date picker
     * @param value Date The maximum date that can be selected
     */
    setMaxValue?: (Ext$value?: any) => void;

    /**
     * [Method] Replaces any existing minValue with the new value and refreshes the Date picker
     * @param value Date The minimum date that can be selected
     */
    setMinValue?: (Ext$value?: any) => void;

    /**
     * [Method] Sets the value of the date field
     * @param date String/Date The date or valid date string
     * @returns Ext.form.field.Date this
     */
    setValue?: (date?: any) => Ext$Ext$form.field.Ext$IDate;

    /**
     * [Method] Converts a mixed type value to a raw representation suitable for displaying in the field
     * @param value Object
     * @returns Object The converted raw value.
     */
    valueToRaw?: (Ext$value?: any) => any;

    /**
     * [Config Option] (String)
     */
    altFormats?: string;

    /**
     * [Config Option] (String[])
     */
    disabledDates?: string[];

    /**
     * [Config Option] (String)
     */
    disabledDatesText?: string;

    /**
     * [Config Option] (Number[])
     */
    disabledDays?: number[];

    /**
     * [Config Option] (String)
     */
    disabledDaysText?: string;

    /**
     * [Config Option] (String)
     */
    format?: string;

    /**
     * [Config Option] (String)
     */
    invalidText?: string;

    /**
     * [Config Option] (Boolean)
     */
    matchFieldWidth?: boolean;

    /**
     * [Config Option] (String)
     */
    maxText?: string;

    /**
     * [Config Option] (Date/String)
     */
    maxValue?: any;

    /**
     * [Config Option] (String)
     */
    minText?: string;

    /**
     * [Config Option] (Date/String)
     */
    minValue?: any;

    /**
     * [Config Option] (Boolean)
     */
    showToday?: boolean;

    /**
     * [Config Option] (Number)
     */
    startDay?: number;

    /**
     * [Config Option] (String)
     */
    submitFormat?: string;

    /**
     * [Config Option] (String)
     */
    triggerCls?: string;

    /**
     * [Config Option] (Boolean)
     */
    useStrict?: boolean;

    /**
     * [Method] private
     */
    beforeBlur?: () => void;

    /**
     * [Method] Creates and returns the component to be used as this field s picker
     */
    createPicker?: () => void;

    /**
     * [Method] Runs all of Date s validations and returns an array of any errors
     * @param value Object The value to get errors for (defaults to the current field value)
     * @returns String[] All validation errors for this field
     */
    getErrors?: (Ext$value?: any) => string[];

    /**
     * [Method]
     */
    initComponent?: () => void;

    /**
     * [Method] Initializes the field s value based on the initial config
     */
    initValue?: () => void;

    /**
     * [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type
     * @param rawValue Object
     * @returns Object The converted value.
     */
    rawToValue?: (rawValue?: any) => any;

    /**
     * [Method] Attempts to parse a given string value using a given date format. ...
     */
    safeParse?: any;

    /**
     * [Method] Replaces any existing disabled dates with new values and refreshes the Date picker
     * @param disabledDates String[] An array of date strings (see the disabledDates config for details on supported values) used to disable a pattern of dates.
     */
    setDisabledDates?: (disabledDates?: string[]) => void;

    /**
     * [Method] Replaces any existing disabled days by index 0 6 with new values and refreshes the Date picker
     * @param disabledDays Number[] An array of disabled day indexes. See the disabledDays config for details on supported values.
     */
    setDisabledDays?: (disabledDays?: number[]) => void;

    /**
     * [Method] Replaces any existing maxValue with the new value and refreshes the Date picker
     * @param value Date The maximum date that can be selected
     */
    setMaxValue?: (Ext$value?: any) => void;

    /**
     * [Method] Replaces any existing minValue with the new value and refreshes the Date picker
     * @param value Date The minimum date that can be selected
     */
    setMinValue?: (Ext$value?: any) => void;

    /**
     * [Method] Sets the value of the date field
     * @param date String/Date The date or valid date string
     * @returns Ext.form.field.Date this
     */
    setValue?: (date?: any) => Ext$Ext$form.field.Ext$IDate;

    /**
     * [Method] Converts a mixed type value to a raw representation suitable for displaying in the field
     * @param value Object
     * @returns Object The converted raw value.
     */
    valueToRaw?: (Ext$value?: any) => any;

    /**
     * [Config Option] (String)
     */
    format?: string;

    /**
     * [Method] When defined this will take precedence over the renderer config
     * @param value Object
     */
    defaultRenderer?: (Ext$value?: any) => void;

    /**
     * [Config Option] (String)
     */
    ariaTitle?: string;

    /**
     * [Config Option] (String)
     */
    ariaTitleDateFormat?: string;

    /**
     * [Config Option] (String)
     */
    baseCls?: string;

    /**
     * [Config Option] (Number/String/Boolean)
     */
    border?: any;

    /**
     * [Config Option] (String[])
     */
    dayNames?: string[];

    /**
     * [Config Option] (Boolean)
     */
    disableAnim?: boolean;

    /**
     * [Config Option] (String)
     */
    disabledCellCls?: string;

    /**
     * [Config Option] (String[])
     */
    disabledDates?: string[];

    /**
     * [Config Option] (RegExp)
     */
    disabledDatesRE?: RegExp;

    /**
     * [Config Option] (String)
     */
    disabledDatesText?: string;

    /**
     * [Config Option] (Number[])
     */
    disabledDays?: number[];

    /**
     * [Config Option] (String)
     */
    disabledDaysText?: string;

    /**
     * [Config Option] (Boolean)
     */
    focusOnShow?: boolean;

    /**
     * [Config Option] (String)
     */
    format?: string;

    /**
     * [Config Option] (Function)
     */
    handler?: any;

    /**
     * [Config Option] (Object)
     */
    keyNavConfig?: any;

    /**
     * [Config Option] (String)
     */
    longDayFormat?: string;

    /**
     * [Config Option] (Date)
     */
    maxDate?: any;

    /**
     * [Config Option] (String)
     */
    maxText?: string;

    /**
     * [Config Option] (Date)
     */
    minDate?: any;

    /**
     * [Config Option] (String)
     */
    minText?: string;

    /**
     * [Config Option] (String[])
     */
    monthNames?: string[];

    /**
     * [Config Option] (String)
     */
    monthYearFormat?: string;

    /**
     * [Config Option] (String)
     */
    monthYearText?: string;

    /**
     * [Config Option] (String)
     */
    nextText?: string;

    /**
     * [Config Option] (String)
     */
    prevText?: string;

    /**
     * [Config Option] (Ext.XTemplate/String/String[])
     */
    renderTpl?: any;

    /**
     * [Config Option] (Object)
     */
    scope?: any;

    /**
     * [Config Option] (String)
     */
    selectedCls?: string;

    /**
     * [Config Option] (Boolean)
     */
    showToday?: boolean;

    /**
     * [Config Option] (Number)
     */
    startDay?: number;

    /**
     * [Config Option] (String)
     */
    todayText?: string;

    /**
     * [Config Option] (String)
     */
    todayTip?: string;

    /**
     * [Method] Gets a single character to represent the day of the week
     * @param value Object
     * @returns String The character
     */
    getDayInitial?: (Ext$value?: any) => string;

    /**
     * [Method] Gets the current selected value of the date field
     * @returns Date The selected date
     */
    getValue?: () => any;

    /**
     * [Method] Hides the month picker if it s visible
     * @param animate Boolean Indicates whether to animate this action. If the animate parameter is not specified, the behavior will use disableAnim to determine whether to animate or not.
     * @returns Ext.picker.Date this
     */
    hideMonthPicker?: (animate?: boolean) => Ext$Ext$picker.Ext$IDate;

    /**
     * [Method] private inherit docs
     */
    initComponent?: () => void;

    /**
     * [Method] Sets the current value to today
     * @returns Ext.picker.Date this
     */
    selectToday?: () => Ext$Ext$picker.Ext$IDate;

    /**
     * [Method] Replaces any existing disabled dates with new values and refreshes the DatePicker
     * @param disabledDates String[]/RegExp An array of date strings (see the disabledDates config for details on supported values), or a JavaScript regular expression used to disable a pattern of dates.
     * @returns Ext.picker.Date this
     */
    setDisabledDates?: (disabledDates?: any) => Ext$Ext$picker.Ext$IDate;

    /**
     * [Method] Replaces any existing disabled days by index 0 6 with new values and refreshes the DatePicker
     * @param disabledDays Number[] An array of disabled day indexes. See the disabledDays config for details on supported values.
     * @returns Ext.picker.Date this
     */
    setDisabledDays?: (disabledDays?: number[]) => Ext$Ext$picker.Ext$IDate;

    /**
     * [Method] Replaces any existing maxDate with the new value and refreshes the DatePicker
     * @param value Date The maximum date that can be selected
     * @returns Ext.picker.Date this
     */
    setMaxDate?: (Ext$value?: any) => Ext$Ext$picker.Ext$IDate;

    /**
     * [Method] Replaces any existing minDate with the new value and refreshes the DatePicker
     * @param value Date The minimum date that can be selected
     * @returns Ext.picker.Date this
     */
    setMinDate?: (Ext$value?: any) => Ext$Ext$picker.Ext$IDate;

    /**
     * [Method] Sets the value of the date field
     * @param value Date The date to set
     * @returns Ext.picker.Date this
     */
    setValue?: (Ext$value?: any) => Ext$Ext$picker.Ext$IDate;

    /**
     * [Method] Show the month picker
     * @param animate Boolean Indicates whether to animate this action. If the animate parameter is not specified, the behavior will use disableAnim to determine whether to animate or not.
     * @returns Ext.picker.Date this
     */
    showMonthPicker?: (animate?: boolean) => Ext$Ext$picker.Ext$IDate;

    /**
     * [Method] Show the next month
     * @param e Object
     * @returns Ext.picker.Date this
     */
    showNextMonth?: (e?: any) => Ext$Ext$picker.Ext$IDate;

    /**
     * [Method] Show the next year
     * @returns Ext.picker.Date this
     */
    showNextYear?: () => Ext$Ext$picker.Ext$IDate;

    /**
     * [Method] Show the previous month
     * @param e Object
     * @returns Ext.picker.Date this
     */
    showPrevMonth?: (e?: any) => Ext$Ext$picker.Ext$IDate;

    /**
     * [Method] Show the previous year
     * @returns Ext.picker.Date this
     */
    showPrevYear?: () => Ext$Ext$picker.Ext$IDate;
  }

  declare export class Ext$Date {
    /**
     * [Property] (String)
     */
    static DAY: string;

    /**
     * [Property] (String)
     */
    static HOUR: string;

    /**
     * [Property] (String)
     */
    static MILLI: string;

    /**
     * [Property] (String)
     */
    static MINUTE: string;

    /**
     * [Property] (String)
     */
    static MONTH: string;

    /**
     * [Property] (String)
     */
    static SECOND: string;

    /**
     * [Property] (String)
     */
    static YEAR: string;

    /**
     * [Property] (String[])
     */
    static dayNames: string[];

    /**
     * [Property] (String)
     */
    static defaultFormat: string;

    /**
     * [Property] (Object)
     */
    static defaults: any;

    /**
     * [Property] (Object)
     */
    static formatCodes: any;

    /**
     * [Property] (Object)
     */
    static formatFunctions: any;

    /**
     * [Property] (String[])
     */
    static monthNames: string[];

    /**
     * [Property] (Object)
     */
    static monthNumbers: any;

    /**
     * [Property] (Object)
     */
    static parseFunctions: any;

    /**
     * [Property] (Boolean)
     */
    static useStrict: boolean;

    /**
     * [Method] Provides a convenient method for performing basic date arithmetic
     * @param date Date The date to modify
     * @param interval String A valid date interval enum value.
     * @param value Number The amount to add to the current date.
     * @returns Date The new Date instance.
     */
    static add(date?: any, interval?: string, Ext$value?: number): any;

    /**
     * [Method] Checks if a date falls on or between the given start and end dates
     * @param date Date The date to check
     * @param start Date Start date
     * @param end Date End date
     * @returns Boolean true if this date falls on or between the given start and end dates.
     */
    static between(date?: any, start?: any, end?: any): boolean;

    /**
     * [Method] Attempts to clear all time information from this Date by setting the time to midnight of the same day automatically
     * @param date Date The date
     * @param clone Boolean true to create a clone of this date, clear the time and return it.
     * @returns Date this or the clone.
     */
    static clearTime(date?: any, Ext$clone?: boolean): any;

    /**
     * [Method] Creates and returns a new Date instance with the exact same date value as the called instance
     * @param date Date The date.
     * @returns Date The new Date instance.
     */
    static clone(date?: any): any;

    /**
     * [Method] Formats a date given the supplied format string
     * @param date Date The date to format
     * @param format String The format string
     * @returns String The formatted date or an empty string if date parameter is not a JavaScript Date object
     */
    static format(date?: any, format?: string): string;

    /**
     * [Method] Checks if the specified format contains information about anything other than the time
     * @param format String The format to check
     * @returns Boolean True if the format contains information about date/day information.
     */
    static formatContainsDateInfo(format?: string): boolean;

    /**
     * [Method] Checks if the specified format contains hour information
     * @param format String The format to check
     * @returns Boolean True if the format contains hour information
     */
    static formatContainsHourInfo(format?: string): boolean;

    /**
     * [Method] Get the numeric day number of the year adjusted for leap year
     * @param date Date The date
     * @returns Number 0 to 364 (365 in leap years).
     */
    static getDayOfYear(date?: any): number;

    /**
     * [Method] Get the number of days in the current month adjusted for leap year
     * @param date Date The date
     * @returns Number The number of days in the month.
     */
    static getDaysInMonth(date?: any): number;

    /**
     * [Method] Returns the number of milliseconds between two dates
     * @param dateA Date The first date.
     * @param dateB Date The second date.
     * @returns Number The difference in milliseconds
     */
    static getElapsed(dateA?: any, dateB?: any): number;

    /**
     * [Method] Get the date of the first day of the month in which this date resides
     * @param date Date The date
     * @returns Date
     */
    static getFirstDateOfMonth(date?: any): any;

    /**
     * [Method] Get the first day of the current month adjusted for leap year
     * @param date Date The date
     * @returns Number The day number (0-6).
     */
    static getFirstDayOfMonth(date?: any): number;

    /**
     * [Method] Get the offset from GMT of the current date equivalent to the format specifier O
     * @param date Date The date
     * @param colon Boolean true to separate the hours and minutes with a colon.
     * @returns String The 4-character offset string prefixed with + or - (e.g. '-0600').
     */
    static getGMTOffset(date?: any, colon?: boolean): string;

    /**
     * [Method] Get the date of the last day of the month in which this date resides
     * @param date Date The date
     * @returns Date
     */
    static getLastDateOfMonth(date?: any): any;

    /**
     * [Method] Get the last day of the current month adjusted for leap year
     * @param date Date The date
     * @returns Number The day number (0-6).
     */
    static getLastDayOfMonth(date?: any): number;

    /**
     * [Method] Get the zero based JavaScript month number for the given short full month name
     * @param name String The short/full month name.
     * @returns Number The zero-based JavaScript month number.
     */
    static getMonthNumber(name?: string): number;

    /**
     * [Method] Get the short day name for the given day number
     * @param day Number A zero-based JavaScript day number.
     * @returns String The short day name.
     */
    static getShortDayName(day?: number): string;

    /**
     * [Method] Get the short month name for the given month number
     * @param month Number A zero-based JavaScript month number.
     * @returns String The short month name.
     */
    static getShortMonthName(month?: number): string;

    /**
     * [Method] Get the English ordinal suffix of the current day equivalent to the format specifier S
     * @param date Date The date
     * @returns String 'st, 'nd', 'rd' or 'th'.
     */
    static getSuffix(date?: any): string;

    /**
     * [Method] Get the timezone abbreviation of the current date equivalent to the format specifier T
     * @param date Date The date
     * @returns String The abbreviated timezone name (e.g. 'CST', 'PDT', 'EDT', 'MPST' ...).
     */
    static getTimezone(date?: any): string;

    /**
     * [Method] Get the numeric ISO 8601 week number of the year
     * @param date Date The date
     * @returns Number 1 to 53
     */
    static getWeekOfYear(date?: any): number;

    /**
     * [Method] Checks if the current date is affected by Daylight Saving Time DST
     * @param date Date The date
     * @returns Boolean true if the current date is affected by DST.
     */
    static isDST(date?: any): boolean;

    /**
     * [Method] Compares if two dates are equal by comparing their values
     * @param date1 Date
     * @param date2 Date
     * @returns Boolean true if the date values are equal
     */
    static isEqual(date1?: any, date2?: any): boolean;

    /**
     * [Method] Checks if the current date falls within a leap year
     * @param date Date The date
     * @returns Boolean True if the current date falls within a leap year, false otherwise.
     */
    static isLeapYear(date?: any): boolean;

    /**
     * [Method] Checks if the passed Date parameters will cause a JavaScript Date rollover
     * @param year Number 4-digit year
     * @param month Number 1-based month-of-year
     * @param day Number Day of month
     * @param hour Number Hour
     * @param minute Number Minute
     * @param second Number Second
     * @param millisecond Number Millisecond
     * @returns Boolean true if the passed parameters do not cause a Date "rollover", false otherwise.
     */
    static isValid(
      year?: number,
      month?: number,
      day?: number,
      hour?: number,
      minute?: number,
      second?: number,
      millisecond?: number
    ): boolean;

    /**
     * [Method] Returns the current timestamp
     * @returns Number Milliseconds since UNIX epoch.
     */
    static now(): number;

    /**
     * [Method] Parses the passed string using the specified date format
     * @param input String The raw date string.
     * @param format String The expected date string format.
     * @param strict Boolean true to validate date strings while parsing (i.e. prevents JavaScript Date "rollover"). Invalid date strings will return null when parsed.
     * @returns Date The parsed Date.
     */
    static parse(input?: string, format?: string, strict?: boolean): any;

    /**
     * [Method] Provides a convenient method for performing basic date arithmetic
     * @param date Date The date to modify
     * @param interval String A valid date interval enum value.
     * @param value Number The amount to subtract from the current date.
     * @returns Date The new Date instance.
     */
    static subtract(date?: any, interval?: string, Ext$value?: number): any;

    /**
     * [Method] Removes all escaping for a date format string
     * @param format String The format to unescape
     * @returns String The unescaped format
     */
    static unescapeFormat(format?: string): string;
  }

  declare export type dd$IPanelProxy = {
    /**
     * [Config Option] (Boolean)
     */
    insertProxy?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    moveOnDrag?: boolean,

    /**
     * [Property] (Ext.panel.Panel)
     */
    Ext$panel?: Ext$Ext$panel.tree$IPanel,

    /**
     * [Method] Gets the proxy s element
     * @returns Ext.Element The proxy's element
     */
    getEl?: () => Ext$target$IElement,

    /**
     * [Method] Gets the proxy s ghost Panel
     * @returns Ext.panel.Panel The proxy's ghost Panel
     */
    getGhost?: () => Ext$Ext$panel.tree$IPanel,

    /**
     * [Method] Gets the proxy element
     * @returns Ext.Element The proxy's element
     */
    getProxy?: () => Ext$target$IElement,

    /**
     * [Method] Hides the proxy
     */
    hide?: () => void,

    /**
     * [Method] Moves the proxy to a different position in the DOM
     * @param parentNode HTMLElement The proxy's parent DOM node
     * @param before HTMLElement The sibling node before which the proxy should be inserted. Defaults to the parent's last child if not specified.
     */
    moveProxy?: (parentNode?: HTMLElement, before?: HTMLElement) => void,

    /**
     * [Method] Shows the proxy
     */
    show?: () => void
  } & Ext$Ext$IBase;

  declare export type direct$ITransaction = {
    /**
     * [Config Option] (Ext.direct.Provider)
     */
    provider?: Ext$Ext$direct.state$IProvider
  } & Ext$Ext$IBase;

  declare export type Ext$IDirect = {
    /**
     * [Config Option] (Object)
     */
    api?: any,

    /**
     * [Config Option] (Function/String)
     */
    directFn?: any,

    /**
     * [Config Option] (Object)
     */
    extraParams?: any,

    /**
     * [Config Option] (String/String[])
     */
    paramOrder?: any,

    /**
     * [Config Option] (Boolean)
     */
    paramsAsHash?: boolean,

    /**
     * [Method] inherit docs
     * @returns String The url
     */
    buildUrl?: () => string,

    /**
     * [Method] In ServerProxy subclasses the create read update and destroy methods all pass through to doRequest
     * @param operation Object
     * @param callback Object
     * @param scope Object
     */
    doRequest?: (operation?: any, Ext$callback?: any, scope?: any) => void
  } & undefined.app$IEventDomain;

  declare export class Ext$Direct {
    /**
     * [Property] (Object)
     */
    static exceptions: any;

    /**
     * [Property] (Object)
     */
    static hasListeners: any;

    /**
     * [Property] (Boolean)
     */
    static isObservable: boolean;

    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Method] Adds the specified events to the list of events which this Observable may fire
     * @param eventNames Object/String... Either an object with event names as properties with a value of true. For example: this.addEvents({  storeloaded: true,  storecleared: true });  Or any number of event names as separate parameters. For example: this.addEvents('storeloaded', 'storecleared');
     */
    static addEvents(eventNames?: any): void;

    /**
     * [Method] Appends an event handler to this object
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addListener(
      eventName?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Adds listeners to any Observable object or Ext Element which are automatically removed when this Component is destr
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Adds an Ext Direct Provider and creates the proxy or stub methods to execute server side methods
     * @param provider Ext.direct.Provider/Object... Accepts any number of Provider descriptions (an instance or config object for a Provider). Each Provider description instructs Ext.Direct how to create client-side stub methods.
     */
    static addProvider(provider?: any): void;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Removes all listeners for this object including the managed listeners
     */
    static clearListeners(): void;

    /**
     * [Method] Removes all managed listeners for this object
     */
    static clearManagedListeners(): void;

    /**
     * [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
     * @param eventNames String/String[] The event name to bubble, or an Array of event names.
     */
    static enableBubble(eventNames?: any): void;

    /**
     * [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
     * @param eventName String The name of the event to fire.
     * @param args Object... Variable number of parameters are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEvent(eventName: string, ...args: any[]): boolean;

    /**
     * [Method] Fires the specified event with the passed parameter list
     * @param eventName String The name of the event to fire.
     * @param args Object[] An array of parameters which are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEventArgs(eventName?: string, args?: any[]): boolean;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(name?: string): any;

    /**
     * [Method] Retrieves a provider by the id specified when the provider is added
     * @param id String/Ext.direct.Provider The id of the provider, or the provider instance.
     */
    static getProvider(Ext$id?: any): void;

    /**
     * [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles
     * @param eventName String The name of the event to check for
     * @returns Boolean true if the event is being listened for or bubbles, else false
     */
    static hasListener(eventName?: string): boolean;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Shorthand for addManagedListener
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static mon(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Shorthand for removeManagedListener
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static mun(item?: any, ename?: any, fn?: any, scope?: any): void;

    /**
     * [Method] Shorthand for addListener
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static on(eventName?: any, fn?: any, scope?: any, options?: any): any;

    /**
     * [Method] Parses a direct function
     * @param fn String/Function The direct function
     * @returns Function The function to use in the direct call. Null if not found
     */
    static parseMethod(fn?: any): any;

    /**
     * [Method] Relays selected events from the specified Observable as if the events were fired by this
     * @param origin Object The Observable whose events this object is to relay.
     * @param events String[] Array of event names to relay.
     * @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
     * @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or this.store.relayers.destroy();
     */
    static relayEvents(origin?: any, events?: string[], prefix?: string): any;

    /**
     * [Method] Removes an event handler
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static removeListener(eventName?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Removes listeners that were added by the mon method
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static removeManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any
    ): void;

    /**
     * [Method] Removes the provider
     * @param provider String/Ext.direct.Provider The provider instance or the id of the provider.
     * @returns Ext.direct.Provider The provider, null if not found.
     */
    static removeProvider(provider?: any): Ext$Ext$direct.state$IProvider;

    /**
     * [Method] Resumes firing of the named event s
     * @param eventName String... Multiple event names to resume.
     */
    static resumeEvent(...eventName: any[]): void;

    /**
     * [Method] Resumes firing events see suspendEvents
     */
    static resumeEvents(): void;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Suspends firing of the named event s
     * @param eventName String... Multiple event names to suspend.
     */
    static suspendEvent(...eventName: any[]): void;

    /**
     * [Method] Suspends the firing of all events
     * @param queueSuspended Boolean Pass as true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events.
     */
    static suspendEvents(queueSuspended?: boolean): void;

    /**
     * [Method] Shorthand for removeListener
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static un(eventName?: string, fn?: any, scope?: any): void;
  }

  declare export interface dom$IQuery {}

  declare export class dom$Query {
    /**
     * [Property] (Object)
     */
    static matchers: any;

    /**
     * [Property] (Object)
     */
    static operators: any;

    /**
     * [Property] (Object)
     */
    static pseudos: any;

    /**
     * [Method] Compiles a selector xpath query into a reusable function
     * @param selector String The selector/xpath query
     * @param type String Either "select" or "simple" for a simple selector match
     * @returns Function
     */
    static compile(selector?: string, Ext$type?: string): any;

    /**
     * [Method] Filters an array of elements to only include matches of a simple selector e g
     * @param el HTMLElement[] An array of elements to filter
     * @param selector String The simple selector to test
     * @param nonMatches Boolean If true, it returns the elements that DON'T match the selector instead of the ones that match
     * @returns HTMLElement[] An Array of DOM elements which match the selector. If there are no matches, and empty Array is returned.
     */
    static filter(
      el?: HTMLElement[],
      selector?: string,
      nonMatches?: boolean
    ): HTMLElement[];

    /**
     * [Method] Returns true if the passed element s match the passed simple selector e g
     * @param el String/HTMLElement/HTMLElement[] An element id, element or array of elements
     * @param selector String The simple selector to test
     * @returns Boolean
     */
    static is(el?: any, selector?: string): boolean;

    /**
     * [Method] Selects an array of DOM nodes using JavaScript only implementation
     * @param selector String The selector/xpath query (can be a comma separated list of selectors)
     * @param root HTMLElement/String The start of the query.
     * @returns HTMLElement[] An Array of DOM elements which match the selector. If there are no matches, and empty Array is returned.
     */
    static jsSelect(selector?: string, root?: any): HTMLElement[];

    /**
     * [Method] Selects an array of DOM nodes by CSS XPath selector
     * @param path String The selector/xpath query
     * @param root HTMLElement The start of the query.
     * @param type String Either "select" or "simple" for a simple selector match (only valid when used when the call is deferred to the jsSelect method)
     * @param single Boolean Pass true to select only the first matching node using document.querySelector (where available)
     * @returns HTMLElement[] An array of DOM elements (not a NodeList as returned by querySelectorAll).
     */
    static select(
      path?: string,
      root?: HTMLElement,
      Ext$type?: string,
      single?: boolean
    ): HTMLElement[];

    /**
     * [Method] Selects a single element
     * @param selector String The selector/xpath query
     * @param root HTMLElement The start of the query.
     * @returns HTMLElement The DOM element which matched the selector.
     */
    static selectNode(selector?: string, root?: HTMLElement): HTMLElement;

    /**
     * [Method] Selects the value of a node parsing integers and floats
     * @param selector String The selector/xpath query
     * @param root HTMLElement The start of the query.
     * @param defaultValue Number When specified, this is return as empty value.
     * @returns Number
     */
    static selectNumber(
      selector?: string,
      root?: HTMLElement,
      defaultValue?: number
    ): number;

    /**
     * [Method] Selects the value of a node optionally replacing null with the defaultValue
     * @param selector String The selector/xpath query
     * @param root HTMLElement The start of the query.
     * @param defaultValue String When specified, this is return as empty value.
     * @returns String
     */
    static selectValue(
      selector?: string,
      root?: HTMLElement,
      defaultValue?: string
    ): string;
  }

  declare export type Ext$ICompositeElement = {
    /**
     * [Property] (Boolean)
     */
    isComposite?: boolean
  } & undefined.Ext$ICompositeElementLite;

  declare export type Ext$ICompositeElementLite = {
    /**
     * [Property] (HTMLElement[])
     */
    elements?: HTMLElement[],

    /**
     * [Property] (Boolean)
     */
    isComposite?: boolean,

    /**
     * [Method] Adds elements to this Composite object
     * @param els HTMLElement[]/Ext.dom.CompositeElement Either an Array of DOM elements to add, or another Composite object who's elements should be added.
     * @returns Ext.dom.CompositeElement This Composite object.
     */
    add?: (els?: any) => Ext$Ext$dom.Ext$ICompositeElement,

    /**
     * [Method] Removes all elements from this Composite
     * @param removeDom Boolean True to also remove the elements from the document.
     */
    clear?: (removeDom?: boolean) => void,

    /**
     * [Method] Returns true if this composite contains the passed element
     * @param el String/HTMLElement/Ext.Element/Number The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection.
     * @returns Boolean
     */
    contains?: (el?: any) => boolean,

    /**
     * [Method] Calls the passed function for each element in this composite
     * @param fn Function The function to call.
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the Element.
     * @returns Ext.dom.CompositeElement this
     */
    Ext$each?: (fn?: any, scope?: any) => Ext$Ext$dom.Ext$ICompositeElement,

    /**
     * [Method] Clears this Composite and adds the elements passed
     * @param els HTMLElement[]/Ext.dom.CompositeElement Either an array of DOM elements, or another Composite from which to fill this Composite.
     * @returns Ext.dom.CompositeElement this
     */
    fill?: (els?: any) => Ext$Ext$dom.Ext$ICompositeElement,

    /**
     * [Method] Filters this composite to only elements that match the passed selector
     * @param selector String/Function A string CSS selector or a comparison function. The comparison function will be called with the following arguments:
     * @returns Ext.dom.CompositeElement this
     */
    filter?: (selector?: any) => Ext$Ext$dom.Ext$ICompositeElement,

    /**
     * [Method] Returns the first Element
     * @returns Ext.dom.Element
     */
    first?: () => Ext$Ext$dom.target$IElement,

    /**
     * [Method] Returns the number of elements in this Composite
     * @returns Number
     */
    getCount?: () => number,

    /**
     * [Method] Find the index of the passed element within the composite collection
     * @param el String/HTMLElement/Ext.Element/Number The id of an element, or an Ext.dom.Element, or an HtmlElement to find within the composite collection.
     * @returns Number The index of the passed Ext.dom.Element in the composite collection, or -1 if not found.
     */
    indexOf?: (el?: any) => number,

    /**
     * [Method] Returns a flyweight Element of the dom element object at the specified index
     * @param index Number
     * @returns Ext.dom.Element
     */
    item?: (index?: number) => Ext$Ext$dom.target$IElement,

    /**
     * [Method] Returns the last Element
     * @returns Ext.dom.Element
     */
    last?: () => Ext$Ext$dom.target$IElement,

    /**
     * [Method] Removes the specified element s
     * @param el String/HTMLElement/Ext.Element/Number The id of an element, the Element itself, the index of the element in this composite or an array of any of those.
     * @param removeDom Boolean True to also remove the element from the document.
     * @returns Ext.dom.CompositeElement this
     */
    removeElement?: (
      el?: any,
      removeDom?: boolean
    ) => Ext$Ext$dom.Ext$ICompositeElement,

    /**
     * [Method] Replaces the specified element with the passed element
     * @param el String/HTMLElement/Ext.Element/Number The id of an element, the Element itself, the index of the element in this composite to replace.
     * @param replacement String/Ext.Element The id of an element or the Element itself.
     * @param domReplace Boolean True to remove and replace the element in the document too.
     * @returns Ext.dom.CompositeElement this
     */
    replaceElement?: (
      el?: any,
      replacement?: any,
      domReplace?: boolean
    ) => Ext$Ext$dom.Ext$ICompositeElement,

    /**
     * [Method] Gets a range nodes
     * @param start Number The index of the first node in the range
     * @param end Number The index of the last node in the range
     * @returns HTMLElement[] An array of nodes
     */
    slice?: (start?: number, end?: number) => HTMLElement[],

    /**
     * [Property] (HTMLElement[])
     */
    elements?: HTMLElement[],

    /**
     * [Property] (Boolean)
     */
    isComposite?: boolean,

    /**
     * [Method] Adds elements to this Composite object
     * @param els HTMLElement[]/Ext.dom.CompositeElement Either an Array of DOM elements to add, or another Composite object who's elements should be added.
     * @returns Ext.dom.CompositeElement This Composite object.
     */
    add?: (els?: any) => Ext$Ext$dom.Ext$ICompositeElement,

    /**
     * [Method] Removes all elements from this Composite
     * @param removeDom Boolean True to also remove the elements from the document.
     */
    clear?: (removeDom?: boolean) => void,

    /**
     * [Method] Returns true if this composite contains the passed element
     * @param el String/HTMLElement/Ext.Element/Number The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection.
     * @returns Boolean
     */
    contains?: (el?: any) => boolean,

    /**
     * [Method] Calls the passed function for each element in this composite
     * @param fn Function The function to call.
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the Element.
     * @returns Ext.dom.CompositeElement this
     */
    Ext$each?: (fn?: any, scope?: any) => Ext$Ext$dom.Ext$ICompositeElement,

    /**
     * [Method] Clears this Composite and adds the elements passed
     * @param els HTMLElement[]/Ext.dom.CompositeElement Either an array of DOM elements, or another Composite from which to fill this Composite.
     * @returns Ext.dom.CompositeElement this
     */
    fill?: (els?: any) => Ext$Ext$dom.Ext$ICompositeElement,

    /**
     * [Method] Filters this composite to only elements that match the passed selector
     * @param selector String/Function A string CSS selector or a comparison function. The comparison function will be called with the following arguments:
     * @returns Ext.dom.CompositeElement this
     */
    filter?: (selector?: any) => Ext$Ext$dom.Ext$ICompositeElement,

    /**
     * [Method] Returns the first Element
     * @returns Ext.dom.Element
     */
    first?: () => Ext$Ext$dom.target$IElement,

    /**
     * [Method] Returns the number of elements in this Composite
     * @returns Number
     */
    getCount?: () => number,

    /**
     * [Method] Find the index of the passed element within the composite collection
     * @param el String/HTMLElement/Ext.Element/Number The id of an element, or an Ext.dom.Element, or an HtmlElement to find within the composite collection.
     * @returns Number The index of the passed Ext.dom.Element in the composite collection, or -1 if not found.
     */
    indexOf?: (el?: any) => number,

    /**
     * [Method] Returns a flyweight Element of the dom element object at the specified index
     * @param index Number
     * @returns Ext.dom.Element
     */
    item?: (index?: number) => Ext$Ext$dom.target$IElement,

    /**
     * [Method] Returns the last Element
     * @returns Ext.dom.Element
     */
    last?: () => Ext$Ext$dom.target$IElement,

    /**
     * [Method] Removes the specified element s
     * @param el String/HTMLElement/Ext.Element/Number The id of an element, the Element itself, the index of the element in this composite or an array of any of those.
     * @param removeDom Boolean True to also remove the element from the document.
     * @returns Ext.dom.CompositeElement this
     */
    removeElement?: (
      el?: any,
      removeDom?: boolean
    ) => Ext$Ext$dom.Ext$ICompositeElement,

    /**
     * [Method] Replaces the specified element with the passed element
     * @param el String/HTMLElement/Ext.Element/Number The id of an element, the Element itself, the index of the element in this composite to replace.
     * @param replacement String/Ext.Element The id of an element or the Element itself.
     * @param domReplace Boolean True to remove and replace the element in the document too.
     * @returns Ext.dom.CompositeElement this
     */
    replaceElement?: (
      el?: any,
      replacement?: any,
      domReplace?: boolean
    ) => Ext$Ext$dom.Ext$ICompositeElement,

    /**
     * [Method] Gets a range nodes
     * @param start Number The index of the first node in the range
     * @param end Number The index of the last node in the range
     * @returns HTMLElement[] An array of nodes
     */
    slice?: (start?: number, end?: number) => HTMLElement[]
  } & Ext$Ext$IBase;

  declare export type Ext$IElement = {
    /**
     * [Property] (Boolean)
     */
    autoBoxAdjust?: boolean,

    /**
     * [Property] (String)
     */
    originalDisplay?: string,

    /**
     * [Method] Sets up event handlers to add and remove a css class when the mouse is down and then up on this element a click effe
     * @param className String The class to add
     * @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added.
     * @param scope Object The scope to execute the testFn in.
     * @returns Ext.dom.Element this
     */
    addClsOnClick?: (
      className?: string,
      testFn?: any,
      scope?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets up event handlers to add and remove a css class when this element has the focus Defined in override Ext dom Ele
     * @param className String The class to add
     * @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added.
     * @param scope Object The scope to execute the testFn in.
     * @returns Ext.dom.Element this
     */
    addClsOnFocus?: (
      className?: string,
      testFn?: any,
      scope?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets up event handlers to add and remove a css class when the mouse is over this element Defined in override Ext dom
     * @param className String The class to add
     * @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added.
     * @param scope Object The scope to execute the testFn in.
     * @returns Ext.dom.Element this
     */
    addClsOnOver?: (
      className?: string,
      testFn?: any,
      scope?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Convenience method for constructing a KeyMap
     * @param key String/Number/Number[]/Object Either a string with the keys to listen for, the numeric key code, array of key codes or an object with the following options:
     * @param fn Function The function to call
     * @param scope Object The scope (this reference) in which the specified function is executed. Defaults to this Element.
     * @returns Ext.util.KeyMap The KeyMap created
     */
    addKeyListener?: (
      key?: any,
      fn?: any,
      scope?: any
    ) => Ext$Ext$util.Ext$IKeyMap,

    /**
     * [Method] Creates a KeyMap for this element
     * @param config Object The KeyMap config. See Ext.util.KeyMap for more details
     * @returns Ext.util.KeyMap The KeyMap created
     */
    addKeyMap?: (config?: any) => Ext$Ext$util.Ext$IKeyMap,

    /**
     * [Method] Shorthand for on
     * @param eventName String The name of event to handle.
     * @param fn Function The handler function the event invokes. This function is passed the following parameters: evt : EventObject The EventObject describing the event. el : HtmlElement The DOM element which was the target of the event. Note that this may be filtered by using the delegate option. o : Object The options object from the call that setup the listener.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to this Element.
     * @param options Object An object containing handler configuration properties. This may contain any of the following properties: scope Object : The scope (this reference) in which the handler function is executed. If omitted, defaults to this Element. delegate String: A simple selector to filter the target or look for a descendant of the target. See below for additional details. stopEvent Boolean: True to stop the event. That is stop propagation, and prevent the default action. preventDefault Boolean: True to prevent the default action stopPropagation Boolean: True to prevent event propagation normalized Boolean: False to pass a browser event to the handler function instead of an Ext.EventObject target Ext.dom.Element: Only call the handler if the event was fired on the target Element, not if the event was bubbled up from a child node. delay Number: The number of milliseconds to delay the invocation of the handler after the event fires. single Boolean: True to add a handler to handle just the next firing of the event, and then remove itself. buffer Number: Causes the handler to be scheduled to run in an Ext.util.DelayedTask delayed by the specified number of milliseconds. If the event fires again within that time, the original handler is not invoked, but the new handler is scheduled in its place. Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener that auto stops the event and adds a custom argument (forumId) to the options object. The options object is available as the third parameter in the handler function.  Code:  el.on('click', this.onClick, this, {  single: true,  delay: 100,  stopEvent : true,  forumId: 4 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers.  Code:  el.on({  'click' : {  fn: this.onClick,  scope: this,  delay: 100  },  'mouseover' : {  fn: this.onMouseOver,  scope: this  },  'mouseout' : {  fn: this.onMouseOut,  scope: this  } }); Or a shorthand syntax:  Code:  el.on({  'click' : this.onClick,  'mouseover' : this.onMouseOver,  'mouseout' : this.onMouseOut,  scope: this }); delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. Event delegation is a technique that is used to reduce memory consumption and prevent exposure to memory-leaks. By registering an event for a container element as opposed to each element within a container. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  // using this markup: &lt;div id='elId'&gt;  &lt;p id='p1'&gt;paragraph one&lt;/p&gt;  &lt;p id='p2' class='clickable'&gt;paragraph two&lt;/p&gt;  &lt;p id='p3'&gt;paragraph three&lt;/p&gt; &lt;/div&gt; // utilize event delegation to registering just one handler on the container element: el = Ext.get('elId'); el.on(  'click',  function(e,t) {  // handle click  console.info(t.id); // 'p2'  },  this,  {  // filter the target element to be a descendant with the class 'clickable'  delegate: '.clickable'  } );
     * @returns Ext.dom.Element this
     */
    addListener?: (
      eventName?: string,
      fn?: any,
      scope?: any,
      options?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Performs custom animation on this Element
     * @param config Object Configuration for Ext.fx.Anim. Note that the to config is required.
     * @returns Ext.dom.Element this
     */
    animate?: (config?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Tries to blur the element
     * @returns Ext.dom.Element this
     */
    blur?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Wraps the specified element with a special 9 element markup CSS block that renders by default as a gray container wit
     * @param class String A base CSS class to apply to the containing wrapper element. Note that there are a number of CSS rules that are dependent on this name to make the overall effect work, so if you supply an alternate base class, make sure you also supply all of the necessary rules.
     * @returns Ext.dom.Element The outermost wrapping element of the created box structure.
     */
    boxWrap?: (clazz?: string) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] When an element is moved around in the DOM or is hidden using display none it loses layout and therefore all scrol
     * @returns Function A function which will restore all descentant elements of this Element to their scroll positions recorded when this function was executed. Be aware that the returned function is a closure which has captured the scope of cacheScrollValues, so take care to derefence it as soon as not needed - if is it is a var it will drop out of scope, and the reference will be freed.
     */
    cacheScrollValues?: () => any,

    /**
     * [Method] Centers the Element in either the viewport or another Element
     * @param centerIn String/HTMLElement/Ext.dom.Element element in which to center the element.
     */
    center?: (centerIn?: any) => void,

    /**
     * [Method] Removes Empty or whitespace filled text nodes
     * @param forceReclean Boolean By default the element keeps track if it has been cleaned already so you can call this over and over. However, if you update the element and need to force a reclean, you can pass true.
     */
    Ext$clean?: (forceReclean?: boolean) => void,

    /**
     * [Method] Alias for removeAllListeners
     * @returns Ext.dom.Element this
     */
    clearListeners?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Clears any opacity settings from this element
     * @returns Ext.dom.Element this
     */
    clearOpacity?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Clears positioning back to the default when the document was loaded
     * @param value String The value to use for the left, right, top, bottom. You could use 'auto'.
     * @returns Ext.dom.Element this
     */
    clearPositioning?: (Ext$value?: string) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Store the current overflow setting and clip overflow on the element  use unclip to remove Defined in override Ext d
     * @returns Ext.dom.Element this
     */
    clip?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Creates a proxy element of this element
     * @param config String/Object The class name of the proxy element or a DomHelper config object
     * @param renderTo String/HTMLElement The element or element id to render the proxy to. Defaults to: document.body.
     * @param matchBox Boolean True to align and size the proxy to this element now.
     * @returns Ext.dom.Element The new proxy element
     */
    createProxy?: (
      config?: any,
      renderTo?: any,
      matchBox?: boolean
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Creates an iframe shim for this element to keep selects and other windowed objects from showing through
     * @returns Ext.dom.Element The new shim element
     */
    createShim?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Convenience method for setVisibilityMode Element DISPLAY
     * @param display String What to set display to when visible
     * @returns Ext.dom.Element this
     */
    enableDisplayMode?: (display?: string) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Fade an element in from transparent to opaque
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.Element The Element
     */
    fadeIn?: (options?: any) => Ext$Ext$IElement,

    /**
     * [Method] Fade an element out from opaque to transparent
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.Element The Element
     */
    fadeOut?: (options?: any) => Ext$Ext$IElement,

    /**
     * [Method] Tries to focus the element
     * @param defer Number Milliseconds to defer the focus
     * @returns Ext.dom.Element this
     */
    focus?: (Ext$defer?: number) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Alias for isFocusable
     * @returns Boolean True if the element is focusable
     */
    focusable?: () => boolean,

    /**
     * [Method] Shows a ripple of exploding attenuating borders to draw attention to an Element
     * @param color String The hex color value for the border.
     * @param count Number The number of ripples to display.
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    frame?: (
      color?: string,
      count?: number,
      options?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Returns the value of a namespaced attribute from the element s underlying DOM node
     * @param namespace String The namespace in which to look for the attribute
     * @param name String The attribute name
     * @returns String The attribute value
     */
    getAttributeNS?: (Ext$namespace?: string, name?: string) => string,

    /**
     * [Method] Gets the bottom Y coordinate of the element element Y position  element height  Defined in override Ext dom Elemen
     * @param local Boolean True to get the local css position instead of page coordinate
     * @returns Number
     */
    getBottom?: (local?: boolean) => number,

    /**
     * [Method] Calculates the x y to center this element on the screen Defined in override Ext dom Element_position
     * @returns Number[] The x, y values [x, y]
     */
    getCenterXY?: () => number[],

    /**
     * [Method] Return the CSS color for the specified CSS attribute
     * @param attr String The css attribute
     * @param defaultValue String The default value to use when a valid color isn't found
     * @param prefix String defaults to #. Use an empty string when working with color anims.
     */
    getColor?: (attr?: string, defaultValue?: string, prefix?: string) => void,

    /**
     * [Method] Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders when
     * @returns Number
     */
    getComputedHeight?: () => number,

    /**
     * [Method] Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders when ne
     * @returns Number
     */
    getComputedWidth?: () => number,

    /**
     * [Method] Returns the sum width of the padding and borders for the passed sides
     * @param sides String
     * @returns Number
     */
    getFrameWidth?: (sides?: string) => number,

    /**
     * [Method] Gets the left X coordinate Defined in override Ext dom Element_position
     * @param local Boolean True to get the local css position instead of page coordinate
     * @returns Number
     */
    getLeft?: (local?: boolean) => number,

    /**
     * [Method] Gets this element s ElementLoader
     * @returns Ext.ElementLoader The loader
     */
    getLoader?: () => Ext$Ext$IElementLoader,

    /**
     * [Method] Gets the local CSS X position for the element Defined in override Ext dom Element_position
     * @returns Number
     */
    getLocalX?: () => number,

    /**
     * [Method] Gets the local CSS X and Y position for the element Defined in override Ext dom Element_position
     * @returns Array [x, y]
     */
    getLocalXY?: () => any[],

    /**
     * [Method] Gets the local CSS Y position for the element Defined in override Ext dom Element_position
     * @returns Number
     */
    getLocalY?: () => number,

    /**
     * [Method] Returns an object defining the area of this Element which can be passed to Ext util Positionable setBox to set anothe
     * @param asRegion Boolean If true an Ext.util.Region will be returned
     * @returns Object/Ext.util.Region box An object in the following format: {  left: &lt;Element's X position&gt;,  top: &lt;Element's Y position&gt;,  width: &lt;Element's width&gt;,  height: &lt;Element's height&gt;,  bottom: &lt;Element's lower bound&gt;,  right: &lt;Element's rightmost bound&gt; }  The returned object may also be addressed as an Array where index 0 contains the X position and index 1 contains the Y position. So the result may also be used for setXY
     */
    getPageBox?: (asRegion?: boolean) => any,

    /**
     * [Method] Gets an object with all CSS positioning properties
     * @param autoPx Boolean true to return pixel values for "auto" styles.
     * @returns Object
     */
    getPositioning?: (autoPx?: boolean) => any,

    /**
     * [Method] Gets the right X coordinate of the element element X position  element width  Defined in override Ext dom Element_
     * @param local Boolean True to get the local css position instead of page coordinates
     * @returns Number
     */
    getRight?: (local?: boolean) => number,

    /**
     * [Method] Returns the current scroll position of the element
     * @returns Object An object containing the scroll position in the format {left: (scrollLeft), top: (scrollTop)}
     */
    getScroll?: () => any,

    /**
     * [Method] Gets the left scroll position Defined in override Ext dom Element_scroll
     * @returns Number The left scroll position
     */
    getScrollLeft?: () => number,

    /**
     * [Method] Gets the top scroll position Defined in override Ext dom Element_scroll
     * @returns Number The top scroll position
     */
    getScrollTop?: () => number,

    /**
     * [Method] Returns the dimensions of the element available to lay content out in
     * @returns Object Object describing width and height.
     */
    getStyleSize?: () => any,

    /**
     * [Method] Returns the width in pixels of the passed text or the width of the text in this Element
     * @param text String The text to measure. Defaults to the innerHTML of the element.
     * @param min Number The minumum value to return.
     * @param max Number The maximum value to return.
     * @returns Number The text width in pixels.
     */
    getTextWidth?: (
      text?: string,
      Ext$min?: number,
      Ext$max?: number
    ) => number,

    /**
     * [Method] Gets the top Y coordinate Defined in override Ext dom Element_position
     * @param local Boolean True to get the local css position instead of page coordinates
     * @returns Number
     */
    getTop?: (local?: boolean) => number,

    /**
     * [Method] Gets element X position in page coordinates Defined in override Ext dom Element_position
     * @returns Number
     */
    getX?: () => number,

    /**
     * [Method] Gets element X and Y positions in page coordinates Defined in override Ext dom Element_position
     * @returns Array [x, y]
     */
    getXY?: () => any[],

    /**
     * [Method] Gets element Y position in page coordinates Defined in override Ext dom Element_position
     * @returns Number
     */
    getY?: () => number,

    /**
     * [Method] Slides the element while fading it out of view
     * @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to bottom: 'b')
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    ghost?: (anchor?: string, options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Hide this element  Uses display mode to determine whether to use display or visibility
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    hide?: (animate?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Highlights the Element by setting a color applies to the background color by default but can be changed using the
     * @param color String The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c')
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    highlight?: (color?: string, options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element
     * @param overFn Function The function to call when the mouse enters the Element.
     * @param outFn Function The function to call when the mouse leaves the Element.
     * @param scope Object The scope (this reference) in which the functions are executed. Defaults to the Element's DOM element.
     * @param options Object Options for the listener. See the options parameter.
     * @returns Ext.dom.Element this
     */
    hover?: (
      overFn?: any,
      outFn?: any,
      scope?: any,
      options?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Initializes a Ext dd DD drag drop object for this element
     * @param group String The group the DD object is member of
     * @param config Object The DD config object
     * @param overrides Object An object containing methods to override/implement on the DD object
     * @returns Ext.dd.DD The DD object
     */
    initDD?: (
      group?: string,
      config?: any,
      overrides?: any
    ) => Ext$Ext$dd.panel$IDD,

    /**
     * [Method] Initializes a Ext dd DDProxy object for this element
     * @param group String The group the DDProxy object is member of
     * @param config Object The DDProxy config object
     * @param overrides Object An object containing methods to override/implement on the DDProxy object
     * @returns Ext.dd.DDProxy The DDProxy object
     */
    initDDProxy?: (
      group?: string,
      config?: any,
      overrides?: any
    ) => Ext$Ext$dd.dd$IDDProxy,

    /**
     * [Method] Initializes a Ext dd DDTarget object for this element
     * @param group String The group the DDTarget object is member of
     * @param config Object The DDTarget config object
     * @param overrides Object An object containing methods to override/implement on the DDTarget object
     * @returns Ext.dd.DDTarget The DDTarget object
     */
    initDDTarget?: (
      group?: string,
      config?: any,
      overrides?: any
    ) => Ext$Ext$dd.dd$IDDTarget,

    /**
     * [Method] Tests various css rules browsers to determine if this element uses a border box
     * @returns Boolean
     */
    isBorderBox?: () => boolean,

    /**
     * [Method] Returns true if display is not none
     * @returns Boolean
     */
    isDisplayed?: () => boolean,

    /**
     * [Method] Checks whether this element can be focused
     * @param asFocusEl Object
     * @returns Boolean True if the element is focusable
     */
    isFocusable?: (asFocusEl?: any) => boolean,

    /**
     * [Method] Returns true if this element is masked
     * @returns Boolean
     */
    isMasked?: () => boolean,

    /**
     * [Method] Returns true if this element is scrollable
     * @returns Boolean
     */
    isScrollable?: () => boolean,

    /**
     * [Method] Checks whether the element is currently visible using both visibility and display properties
     * @param deep Boolean True to walk the dom and see if parent elements are hidden. If false, the function only checks the visibility of the element itself and it may return true even though a parent is not visible.
     * @returns Boolean true if the element is currently visible, else false
     */
    isVisible?: (deep?: boolean) => boolean,

    /**
     * [Method] Direct access to the Ext ElementLoader Ext ElementLoader load method
     * @param options Object
     * @returns Ext.dom.Element this
     */
    load?: (options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Puts a mask over this element to disable user interaction
     * @param msg String A message to display in the mask
     * @param msgCls String A css class to apply to the msg element
     * @returns Ext.dom.Element The mask element
     */
    mask?: (msg?: string, msgCls?: string) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Monitors this Element for the mouse leaving
     * @param delay Number The delay in milliseconds to wait for possible mouse re-entry before calling the handler function.
     * @param handler Function The function to call if the mouse remains outside of this Element for the specified time.
     * @param scope Object The scope (this reference) in which the handler function executes. Defaults to this Element.
     * @returns Object The listeners object which was added to this element so that monitoring can be stopped. Example usage: // Hide the menu if the mouse moves out for 250ms or more this.mouseLeaveMonitor = this.menuEl.monitorMouseLeave(250, this.hideMenu, this); ... // Remove mouseleave monitor on menu destroy this.menuEl.un(this.mouseLeaveMonitor);
     */
    monitorMouseLeave?: (delay?: number, handler?: any, scope?: any) => any,

    /**
     * [Method] Sets the position of the element in page coordinates
     * @param x Number X value for new position (coordinates are page-based)
     * @param y Number Y value for new position (coordinates are page-based)
     * @param animate Boolean/Object True for the default animation, or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    moveTo?: (
      x?: number,
      y?: number,
      animate?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Returns true if this element needs an explicit tabIndex to make it focusable
     */
    needsTabIndex?: () => void,

    /**
     * [Method] Appends an event handler to this element
     * @param eventName String The name of event to handle.
     * @param fn Function The handler function the event invokes. This function is passed the following parameters: evt : EventObject The EventObject describing the event. el : HtmlElement The DOM element which was the target of the event. Note that this may be filtered by using the delegate option. o : Object The options object from the call that setup the listener.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to this Element.
     * @param options Object An object containing handler configuration properties. This may contain any of the following properties: scope Object : The scope (this reference) in which the handler function is executed. If omitted, defaults to this Element. delegate String: A simple selector to filter the target or look for a descendant of the target. See below for additional details. stopEvent Boolean: True to stop the event. That is stop propagation, and prevent the default action. preventDefault Boolean: True to prevent the default action stopPropagation Boolean: True to prevent event propagation normalized Boolean: False to pass a browser event to the handler function instead of an Ext.EventObject target Ext.dom.Element: Only call the handler if the event was fired on the target Element, not if the event was bubbled up from a child node. delay Number: The number of milliseconds to delay the invocation of the handler after the event fires. single Boolean: True to add a handler to handle just the next firing of the event, and then remove itself. buffer Number: Causes the handler to be scheduled to run in an Ext.util.DelayedTask delayed by the specified number of milliseconds. If the event fires again within that time, the original handler is not invoked, but the new handler is scheduled in its place. Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener that auto stops the event and adds a custom argument (forumId) to the options object. The options object is available as the third parameter in the handler function.  Code:  el.on('click', this.onClick, this, {  single: true,  delay: 100,  stopEvent : true,  forumId: 4 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers.  Code:  el.on({  'click' : {  fn: this.onClick,  scope: this,  delay: 100  },  'mouseover' : {  fn: this.onMouseOver,  scope: this  },  'mouseout' : {  fn: this.onMouseOut,  scope: this  } }); Or a shorthand syntax:  Code:  el.on({  'click' : this.onClick,  'mouseover' : this.onMouseOver,  'mouseout' : this.onMouseOut,  scope: this }); delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. Event delegation is a technique that is used to reduce memory consumption and prevent exposure to memory-leaks. By registering an event for a container element as opposed to each element within a container. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  // using this markup: &lt;div id='elId'&gt;  &lt;p id='p1'&gt;paragraph one&lt;/p&gt;  &lt;p id='p2' class='clickable'&gt;paragraph two&lt;/p&gt;  &lt;p id='p3'&gt;paragraph three&lt;/p&gt; &lt;/div&gt; // utilize event delegation to registering just one handler on the container element: el = Ext.get('elId'); el.on(  'click',  function(e,t) {  // handle click  console.info(t.id); // 'p2'  },  this,  {  // filter the target element to be a descendant with the class 'clickable'  delegate: '.clickable'  } );
     * @returns Ext.dom.Element this
     */
    Ext$on?: (
      eventName?: string,
      fn?: any,
      scope?: any,
      options?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Creates a pause before any subsequent queued effects begin
     * @param seconds Number The length of time to pause (in seconds)
     * @returns Ext.Element The Element
     */
    pause?: (seconds?: number) => Ext$Ext$IElement,

    /**
     * [Method] Initializes positioning on this element
     * @param pos String Positioning to use "relative", "absolute" or "fixed"
     * @param zIndex Number The zIndex to apply
     * @param x Number Set the page X position
     * @param y Number Set the page Y position
     */
    position?: (pos?: string, zIndex?: number, x?: number, y?: number) => void,

    /**
     * [Method] Fades the element out while slowly expanding it in all directions
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    puff?: (options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Recursively removes all previous added listeners from this element and its children
     * @returns Ext.dom.Element this
     */
    purgeAllListeners?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Create an event handler on this element such that when the event fires and is handled by this element it will be rel
     * @param eventName String The type of event to relay
     * @param observable Object Any object that extends Ext.util.Observable that will provide the context for firing the relayed event
     */
    relayEvent?: (eventName?: string, observable?: any) => void,

    /**
     * [Method] Removes all previous added listeners from this element
     * @returns Ext.dom.Element this
     */
    removeAllListeners?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Shorthand for un
     * @param eventName String The name of the event from which to remove the handler.
     * @param fn Function The handler function to remove. This must be a reference to the function passed into the on call.
     * @param scope Object If a scope (this reference) was specified when the listener was added, then this must refer to the same object.
     * @returns Ext.dom.Element this
     */
    removeListener?: (
      eventName?: string,
      fn?: any,
      scope?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Animates the transition of an element s dimensions from a starting height width to an ending height width
     * @param width Number The new width (pass undefined to keep the original width)
     * @param height Number The new height (pass undefined to keep the original height)
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.Element The Element
     */
    scale?: (
      width?: number,
      height?: number,
      options?: any
    ) => Ext$Ext$IElement,

    /**
     * [Method] Scrolls this element the specified direction
     * @param direction String Possible values are:  "l" (or "left") "r" (or "right") "t" (or "top", or "up") "b" (or "bottom", or "down")
     * @param distance Number How far to scroll the element in pixels
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Boolean Returns true if a scroll was triggered or false if the element was scrolled as far as it could go.
     */
    scroll?: (direction?: string, distance?: number, animate?: any) => boolean,

    /**
     * [Method] Scrolls this element by the passed delta values optionally animating
     * @param deltaX Number/Number[]/Object Either the x delta, an Array specifying x and y deltas or an object with "x" and "y" properties.
     * @param deltaY Number/Boolean/Object Either the y delta, or an animate flag or config object.
     * @param animate Boolean/Object Animate flag/config object if the delta values were passed separately.
     * @returns Ext.Element this
     */
    scrollBy?: (deltaX?: any, deltaY?: any, animate?: any) => Ext$Ext$IElement,

    /**
     * [Method] Scrolls this element into view within the passed container
     * @param container String/HTMLElement/Ext.Element The container element to scroll. Should be a string (id), dom node, or Ext.Element.
     * @param hscroll Boolean False to disable horizontal scroll.
     * @param animate Boolean/Object true for the default animation or a standard Element
     * @param highlight Boolean true to highlight the element when it is in view. animation config object
     * @returns Ext.dom.Element this
     */
    scrollIntoView?: (
      Ext$container?: any,
      hscroll?: boolean,
      animate?: any,
      highlight?: boolean
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Scrolls this element the specified scroll point
     * @param side String Either "left" for scrollLeft values or "top" for scrollTop values.
     * @param value Number The new scroll value
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.Element this
     */
    scrollTo?: (
      side?: string,
      Ext$value?: number,
      animate?: any
    ) => Ext$Ext$IElement,

    /**
     * [Method] Enable text selection for this element normalized across browsers  Defined in override Ext dom Element_style
     * @returns Ext.Element this
     */
    selectable?: () => Ext$Ext$IElement,

    /**
     * [Method] Sets the element s CSS bottom style
     * @param bottom Number/String Number of pixels or CSS string value to set as the bottom CSS property value
     * @returns Ext.dom.Element this
     */
    setBottom?: (bottom?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s position and size in one shot
     * @param x Number X value for new position (coordinates are page-based)
     * @param y Number Y value for new position (coordinates are page-based)
     * @param width Number/String The new width. This may be one of:  A Number specifying the new width in this Element's defaultUnits (by default, pixels) A String used to set the CSS width style. Animation may not be used.
     * @param height Number/String The new height. This may be one of:  A Number specifying the new height in this Element's defaultUnits (by default, pixels) A String used to set the CSS height style. Animation may not be used.
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    setBounds?: (
      x?: number,
      y?: number,
      width?: any,
      height?: any,
      animate?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the CSS display property
     * @param value Boolean/String Boolean value to display the element using its default display, or a string to set the display directly.
     * @returns Ext.dom.Element this
     */
    setDisplayed?: (Ext$value?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s left position directly using CSS style instead of setX
     * @param left Number/String Number of pixels or CSS string value to set as the left CSS property value
     * @returns Ext.dom.Element this
     */
    setLeft?: (left?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s left and top positions directly using CSS style Defined in override Ext dom Element_position
     * @param left Number/String Number of pixels or CSS string value to set as the left CSS property value
     * @param top Number/String Number of pixels or CSS string value to set as the top CSS property value
     * @returns Ext.dom.Element this
     */
    setLeftTop?: (left?: any, top?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the position of the element in page coordinates
     * @param x Number X value for new position
     * @param y Number Y value for new position
     * @param animate Boolean/Object True for the default animation, or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    setLocation?: (
      x?: number,
      y?: number,
      animate?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Set the opacity of the element Defined in override Ext dom Element_style
     * @param opacity Number The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc
     * @param animate Boolean/Object a standard Element animation config object or true for the default animation ({duration: 350, easing: 'easeIn'})
     * @returns Ext.dom.Element this
     */
    setOpacity?: (opacity?: number, animate?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Set positioning with an object returned by getPositioning
     * @param posCfg Object
     * @returns Ext.dom.Element this
     */
    setPositioning?: (posCfg?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s CSS right style
     * @param right Number/String Number of pixels or CSS string value to set as the right CSS property value
     * @returns Ext.dom.Element this
     */
    setRight?: (right?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the left scroll position Defined in override Ext dom Element_scroll
     * @param left Number The left scroll position
     * @returns Ext.dom.Element this
     */
    setScrollLeft?: (left?: number) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the top scroll position Defined in override Ext dom Element_scroll
     * @param top Number The top scroll position
     * @returns Ext.dom.Element this
     */
    setScrollTop?: (top?: number) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s top position directly using CSS style instead of setY
     * @param top Number/String Number of pixels or CSS string value to set as the top CSS property value
     * @returns Ext.dom.Element this
     */
    setTop?: (top?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the visibility of the element see details
     * @param visible Boolean Whether the element is visible
     * @param animate Boolean/Object True for the default animation, or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    setVisible?: (visible?: boolean, animate?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Animates the transition of any combination of an element s dimensions xy position and or opacity
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.Element The Element
     */
    shift?: (options?: any) => Ext$Ext$IElement,

    /**
     * [Method] Show this element  Uses display mode to determine whether to use display or visibility
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    show?: (animate?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Slides the element into view
     * @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to top: 't')
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    slideIn?: (anchor?: string, options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Slides the element out of view
     * @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to top: 't')
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    slideOut?: (anchor?: string, options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Stops the specified event s from bubbling and optionally prevents the default action
     * @param eventName String/String[] an event / array of events to stop from bubbling
     * @param preventDefault Boolean true to prevent the default action too
     * @returns Ext.dom.Element this
     */
    swallowEvent?: (
      eventName?: any,
      preventDefault?: boolean
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Blinks the element as if it was clicked and then collapses on its center similar to switching off a television
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    switchOff?: (options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Toggles the element s visibility or display depending on visibility mode
     * @param animate Boolean/Object True for the default animation, or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    toggle?: (animate?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Removes an event handler from this element
     * @param eventName String The name of the event from which to remove the handler.
     * @param fn Function The handler function to remove. This must be a reference to the function passed into the on call.
     * @param scope Object If a scope (this reference) was specified when the listener was added, then this must refer to the same object.
     * @returns Ext.dom.Element this
     */
    Ext$un?: (
      eventName?: string,
      fn?: any,
      scope?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Return clipping overflow to original clipping before clip was called Defined in override Ext dom Element_style
     * @returns Ext.dom.Element this
     */
    unclip?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Hides a previously applied mask
     */
    unmask?: () => void,

    /**
     * [Method] Disables text selection for this element normalized across browsers  Defined in override Ext dom Element_style
     * @returns Ext.dom.Element this
     */
    unselectable?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Updates the innerHTML of this element optionally searching for and processing scripts
     * @param html String The new HTML
     * @param loadScripts Boolean True to look for and process scripts (defaults to false)
     * @param callback Function For async script loading you can be notified when the update completes
     * @returns Ext.dom.Element this
     */
    update?: (
      html?: string,
      loadScripts?: boolean,
      Ext$callback?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Property] (Boolean)
     */
    autoBoxAdjust?: boolean,

    /**
     * [Property] (String)
     */
    originalDisplay?: string,

    /**
     * [Method] Sets up event handlers to add and remove a css class when the mouse is down and then up on this element a click effe
     * @param className String The class to add
     * @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added.
     * @param scope Object The scope to execute the testFn in.
     * @returns Ext.dom.Element this
     */
    addClsOnClick?: (
      className?: string,
      testFn?: any,
      scope?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets up event handlers to add and remove a css class when this element has the focus Defined in override Ext dom Ele
     * @param className String The class to add
     * @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added.
     * @param scope Object The scope to execute the testFn in.
     * @returns Ext.dom.Element this
     */
    addClsOnFocus?: (
      className?: string,
      testFn?: any,
      scope?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets up event handlers to add and remove a css class when the mouse is over this element Defined in override Ext dom
     * @param className String The class to add
     * @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added.
     * @param scope Object The scope to execute the testFn in.
     * @returns Ext.dom.Element this
     */
    addClsOnOver?: (
      className?: string,
      testFn?: any,
      scope?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Convenience method for constructing a KeyMap
     * @param key String/Number/Number[]/Object Either a string with the keys to listen for, the numeric key code, array of key codes or an object with the following options:
     * @param fn Function The function to call
     * @param scope Object The scope (this reference) in which the specified function is executed. Defaults to this Element.
     * @returns Ext.util.KeyMap The KeyMap created
     */
    addKeyListener?: (
      key?: any,
      fn?: any,
      scope?: any
    ) => Ext$Ext$util.Ext$IKeyMap,

    /**
     * [Method] Creates a KeyMap for this element
     * @param config Object The KeyMap config. See Ext.util.KeyMap for more details
     * @returns Ext.util.KeyMap The KeyMap created
     */
    addKeyMap?: (config?: any) => Ext$Ext$util.Ext$IKeyMap,

    /**
     * [Method] Shorthand for on
     * @param eventName String The name of event to handle.
     * @param fn Function The handler function the event invokes. This function is passed the following parameters: evt : EventObject The EventObject describing the event. el : HtmlElement The DOM element which was the target of the event. Note that this may be filtered by using the delegate option. o : Object The options object from the call that setup the listener.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to this Element.
     * @param options Object An object containing handler configuration properties. This may contain any of the following properties: scope Object : The scope (this reference) in which the handler function is executed. If omitted, defaults to this Element. delegate String: A simple selector to filter the target or look for a descendant of the target. See below for additional details. stopEvent Boolean: True to stop the event. That is stop propagation, and prevent the default action. preventDefault Boolean: True to prevent the default action stopPropagation Boolean: True to prevent event propagation normalized Boolean: False to pass a browser event to the handler function instead of an Ext.EventObject target Ext.dom.Element: Only call the handler if the event was fired on the target Element, not if the event was bubbled up from a child node. delay Number: The number of milliseconds to delay the invocation of the handler after the event fires. single Boolean: True to add a handler to handle just the next firing of the event, and then remove itself. buffer Number: Causes the handler to be scheduled to run in an Ext.util.DelayedTask delayed by the specified number of milliseconds. If the event fires again within that time, the original handler is not invoked, but the new handler is scheduled in its place. Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener that auto stops the event and adds a custom argument (forumId) to the options object. The options object is available as the third parameter in the handler function.  Code:  el.on('click', this.onClick, this, {  single: true,  delay: 100,  stopEvent : true,  forumId: 4 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers.  Code:  el.on({  'click' : {  fn: this.onClick,  scope: this,  delay: 100  },  'mouseover' : {  fn: this.onMouseOver,  scope: this  },  'mouseout' : {  fn: this.onMouseOut,  scope: this  } }); Or a shorthand syntax:  Code:  el.on({  'click' : this.onClick,  'mouseover' : this.onMouseOver,  'mouseout' : this.onMouseOut,  scope: this }); delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. Event delegation is a technique that is used to reduce memory consumption and prevent exposure to memory-leaks. By registering an event for a container element as opposed to each element within a container. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  // using this markup: &lt;div id='elId'&gt;  &lt;p id='p1'&gt;paragraph one&lt;/p&gt;  &lt;p id='p2' class='clickable'&gt;paragraph two&lt;/p&gt;  &lt;p id='p3'&gt;paragraph three&lt;/p&gt; &lt;/div&gt; // utilize event delegation to registering just one handler on the container element: el = Ext.get('elId'); el.on(  'click',  function(e,t) {  // handle click  console.info(t.id); // 'p2'  },  this,  {  // filter the target element to be a descendant with the class 'clickable'  delegate: '.clickable'  } );
     * @returns Ext.dom.Element this
     */
    addListener?: (
      eventName?: string,
      fn?: any,
      scope?: any,
      options?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Performs custom animation on this Element
     * @param config Object Configuration for Ext.fx.Anim. Note that the to config is required.
     * @returns Ext.dom.Element this
     */
    animate?: (config?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Tries to blur the element
     * @returns Ext.dom.Element this
     */
    blur?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Wraps the specified element with a special 9 element markup CSS block that renders by default as a gray container wit
     * @param class String A base CSS class to apply to the containing wrapper element. Note that there are a number of CSS rules that are dependent on this name to make the overall effect work, so if you supply an alternate base class, make sure you also supply all of the necessary rules.
     * @returns Ext.dom.Element The outermost wrapping element of the created box structure.
     */
    boxWrap?: (clazz?: string) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] When an element is moved around in the DOM or is hidden using display none it loses layout and therefore all scrol
     * @returns Function A function which will restore all descentant elements of this Element to their scroll positions recorded when this function was executed. Be aware that the returned function is a closure which has captured the scope of cacheScrollValues, so take care to derefence it as soon as not needed - if is it is a var it will drop out of scope, and the reference will be freed.
     */
    cacheScrollValues?: () => any,

    /**
     * [Method] Centers the Element in either the viewport or another Element
     * @param centerIn String/HTMLElement/Ext.dom.Element element in which to center the element.
     */
    center?: (centerIn?: any) => void,

    /**
     * [Method] Removes Empty or whitespace filled text nodes
     * @param forceReclean Boolean By default the element keeps track if it has been cleaned already so you can call this over and over. However, if you update the element and need to force a reclean, you can pass true.
     */
    Ext$clean?: (forceReclean?: boolean) => void,

    /**
     * [Method] Alias for removeAllListeners
     * @returns Ext.dom.Element this
     */
    clearListeners?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Clears any opacity settings from this element
     * @returns Ext.dom.Element this
     */
    clearOpacity?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Clears positioning back to the default when the document was loaded
     * @param value String The value to use for the left, right, top, bottom. You could use 'auto'.
     * @returns Ext.dom.Element this
     */
    clearPositioning?: (Ext$value?: string) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Store the current overflow setting and clip overflow on the element  use unclip to remove Defined in override Ext d
     * @returns Ext.dom.Element this
     */
    clip?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Creates a proxy element of this element
     * @param config String/Object The class name of the proxy element or a DomHelper config object
     * @param renderTo String/HTMLElement The element or element id to render the proxy to. Defaults to: document.body.
     * @param matchBox Boolean True to align and size the proxy to this element now.
     * @returns Ext.dom.Element The new proxy element
     */
    createProxy?: (
      config?: any,
      renderTo?: any,
      matchBox?: boolean
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Creates an iframe shim for this element to keep selects and other windowed objects from showing through
     * @returns Ext.dom.Element The new shim element
     */
    createShim?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Convenience method for setVisibilityMode Element DISPLAY
     * @param display String What to set display to when visible
     * @returns Ext.dom.Element this
     */
    enableDisplayMode?: (display?: string) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Fade an element in from transparent to opaque
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.Element The Element
     */
    fadeIn?: (options?: any) => Ext$Ext$IElement,

    /**
     * [Method] Fade an element out from opaque to transparent
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.Element The Element
     */
    fadeOut?: (options?: any) => Ext$Ext$IElement,

    /**
     * [Method] Tries to focus the element
     * @param defer Number Milliseconds to defer the focus
     * @returns Ext.dom.Element this
     */
    focus?: (Ext$defer?: number) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Alias for isFocusable
     * @returns Boolean True if the element is focusable
     */
    focusable?: () => boolean,

    /**
     * [Method] Shows a ripple of exploding attenuating borders to draw attention to an Element
     * @param color String The hex color value for the border.
     * @param count Number The number of ripples to display.
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    frame?: (
      color?: string,
      count?: number,
      options?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Returns the value of a namespaced attribute from the element s underlying DOM node
     * @param namespace String The namespace in which to look for the attribute
     * @param name String The attribute name
     * @returns String The attribute value
     */
    getAttributeNS?: (Ext$namespace?: string, name?: string) => string,

    /**
     * [Method] Gets the bottom Y coordinate of the element element Y position  element height  Defined in override Ext dom Elemen
     * @param local Boolean True to get the local css position instead of page coordinate
     * @returns Number
     */
    getBottom?: (local?: boolean) => number,

    /**
     * [Method] Calculates the x y to center this element on the screen Defined in override Ext dom Element_position
     * @returns Number[] The x, y values [x, y]
     */
    getCenterXY?: () => number[],

    /**
     * [Method] Return the CSS color for the specified CSS attribute
     * @param attr String The css attribute
     * @param defaultValue String The default value to use when a valid color isn't found
     * @param prefix String defaults to #. Use an empty string when working with color anims.
     */
    getColor?: (attr?: string, defaultValue?: string, prefix?: string) => void,

    /**
     * [Method] Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders when
     * @returns Number
     */
    getComputedHeight?: () => number,

    /**
     * [Method] Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders when ne
     * @returns Number
     */
    getComputedWidth?: () => number,

    /**
     * [Method] Returns the sum width of the padding and borders for the passed sides
     * @param sides String
     * @returns Number
     */
    getFrameWidth?: (sides?: string) => number,

    /**
     * [Method] Gets the left X coordinate Defined in override Ext dom Element_position
     * @param local Boolean True to get the local css position instead of page coordinate
     * @returns Number
     */
    getLeft?: (local?: boolean) => number,

    /**
     * [Method] Gets this element s ElementLoader
     * @returns Ext.ElementLoader The loader
     */
    getLoader?: () => Ext$Ext$IElementLoader,

    /**
     * [Method] Gets the local CSS X position for the element Defined in override Ext dom Element_position
     * @returns Number
     */
    getLocalX?: () => number,

    /**
     * [Method] Gets the local CSS X and Y position for the element Defined in override Ext dom Element_position
     * @returns Array [x, y]
     */
    getLocalXY?: () => any[],

    /**
     * [Method] Gets the local CSS Y position for the element Defined in override Ext dom Element_position
     * @returns Number
     */
    getLocalY?: () => number,

    /**
     * [Method] Returns an object defining the area of this Element which can be passed to Ext util Positionable setBox to set anothe
     * @param asRegion Boolean If true an Ext.util.Region will be returned
     * @returns Object/Ext.util.Region box An object in the following format: {  left: &lt;Element's X position&gt;,  top: &lt;Element's Y position&gt;,  width: &lt;Element's width&gt;,  height: &lt;Element's height&gt;,  bottom: &lt;Element's lower bound&gt;,  right: &lt;Element's rightmost bound&gt; }  The returned object may also be addressed as an Array where index 0 contains the X position and index 1 contains the Y position. So the result may also be used for setXY
     */
    getPageBox?: (asRegion?: boolean) => any,

    /**
     * [Method] Gets an object with all CSS positioning properties
     * @param autoPx Boolean true to return pixel values for "auto" styles.
     * @returns Object
     */
    getPositioning?: (autoPx?: boolean) => any,

    /**
     * [Method] Gets the right X coordinate of the element element X position  element width  Defined in override Ext dom Element_
     * @param local Boolean True to get the local css position instead of page coordinates
     * @returns Number
     */
    getRight?: (local?: boolean) => number,

    /**
     * [Method] Returns the current scroll position of the element
     * @returns Object An object containing the scroll position in the format {left: (scrollLeft), top: (scrollTop)}
     */
    getScroll?: () => any,

    /**
     * [Method] Gets the left scroll position Defined in override Ext dom Element_scroll
     * @returns Number The left scroll position
     */
    getScrollLeft?: () => number,

    /**
     * [Method] Gets the top scroll position Defined in override Ext dom Element_scroll
     * @returns Number The top scroll position
     */
    getScrollTop?: () => number,

    /**
     * [Method] Returns the dimensions of the element available to lay content out in
     * @returns Object Object describing width and height.
     */
    getStyleSize?: () => any,

    /**
     * [Method] Returns the width in pixels of the passed text or the width of the text in this Element
     * @param text String The text to measure. Defaults to the innerHTML of the element.
     * @param min Number The minumum value to return.
     * @param max Number The maximum value to return.
     * @returns Number The text width in pixels.
     */
    getTextWidth?: (
      text?: string,
      Ext$min?: number,
      Ext$max?: number
    ) => number,

    /**
     * [Method] Gets the top Y coordinate Defined in override Ext dom Element_position
     * @param local Boolean True to get the local css position instead of page coordinates
     * @returns Number
     */
    getTop?: (local?: boolean) => number,

    /**
     * [Method] Gets element X position in page coordinates Defined in override Ext dom Element_position
     * @returns Number
     */
    getX?: () => number,

    /**
     * [Method] Gets element X and Y positions in page coordinates Defined in override Ext dom Element_position
     * @returns Array [x, y]
     */
    getXY?: () => any[],

    /**
     * [Method] Gets element Y position in page coordinates Defined in override Ext dom Element_position
     * @returns Number
     */
    getY?: () => number,

    /**
     * [Method] Slides the element while fading it out of view
     * @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to bottom: 'b')
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    ghost?: (anchor?: string, options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Hide this element  Uses display mode to determine whether to use display or visibility
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    hide?: (animate?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Highlights the Element by setting a color applies to the background color by default but can be changed using the
     * @param color String The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c')
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    highlight?: (color?: string, options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element
     * @param overFn Function The function to call when the mouse enters the Element.
     * @param outFn Function The function to call when the mouse leaves the Element.
     * @param scope Object The scope (this reference) in which the functions are executed. Defaults to the Element's DOM element.
     * @param options Object Options for the listener. See the options parameter.
     * @returns Ext.dom.Element this
     */
    hover?: (
      overFn?: any,
      outFn?: any,
      scope?: any,
      options?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Initializes a Ext dd DD drag drop object for this element
     * @param group String The group the DD object is member of
     * @param config Object The DD config object
     * @param overrides Object An object containing methods to override/implement on the DD object
     * @returns Ext.dd.DD The DD object
     */
    initDD?: (
      group?: string,
      config?: any,
      overrides?: any
    ) => Ext$Ext$dd.panel$IDD,

    /**
     * [Method] Initializes a Ext dd DDProxy object for this element
     * @param group String The group the DDProxy object is member of
     * @param config Object The DDProxy config object
     * @param overrides Object An object containing methods to override/implement on the DDProxy object
     * @returns Ext.dd.DDProxy The DDProxy object
     */
    initDDProxy?: (
      group?: string,
      config?: any,
      overrides?: any
    ) => Ext$Ext$dd.dd$IDDProxy,

    /**
     * [Method] Initializes a Ext dd DDTarget object for this element
     * @param group String The group the DDTarget object is member of
     * @param config Object The DDTarget config object
     * @param overrides Object An object containing methods to override/implement on the DDTarget object
     * @returns Ext.dd.DDTarget The DDTarget object
     */
    initDDTarget?: (
      group?: string,
      config?: any,
      overrides?: any
    ) => Ext$Ext$dd.dd$IDDTarget,

    /**
     * [Method] Tests various css rules browsers to determine if this element uses a border box
     * @returns Boolean
     */
    isBorderBox?: () => boolean,

    /**
     * [Method] Returns true if display is not none
     * @returns Boolean
     */
    isDisplayed?: () => boolean,

    /**
     * [Method] Checks whether this element can be focused
     * @param asFocusEl Object
     * @returns Boolean True if the element is focusable
     */
    isFocusable?: (asFocusEl?: any) => boolean,

    /**
     * [Method] Returns true if this element is masked
     * @returns Boolean
     */
    isMasked?: () => boolean,

    /**
     * [Method] Returns true if this element is scrollable
     * @returns Boolean
     */
    isScrollable?: () => boolean,

    /**
     * [Method] Checks whether the element is currently visible using both visibility and display properties
     * @param deep Boolean True to walk the dom and see if parent elements are hidden. If false, the function only checks the visibility of the element itself and it may return true even though a parent is not visible.
     * @returns Boolean true if the element is currently visible, else false
     */
    isVisible?: (deep?: boolean) => boolean,

    /**
     * [Method] Direct access to the Ext ElementLoader Ext ElementLoader load method
     * @param options Object
     * @returns Ext.dom.Element this
     */
    load?: (options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Puts a mask over this element to disable user interaction
     * @param msg String A message to display in the mask
     * @param msgCls String A css class to apply to the msg element
     * @returns Ext.dom.Element The mask element
     */
    mask?: (msg?: string, msgCls?: string) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Monitors this Element for the mouse leaving
     * @param delay Number The delay in milliseconds to wait for possible mouse re-entry before calling the handler function.
     * @param handler Function The function to call if the mouse remains outside of this Element for the specified time.
     * @param scope Object The scope (this reference) in which the handler function executes. Defaults to this Element.
     * @returns Object The listeners object which was added to this element so that monitoring can be stopped. Example usage: // Hide the menu if the mouse moves out for 250ms or more this.mouseLeaveMonitor = this.menuEl.monitorMouseLeave(250, this.hideMenu, this); ... // Remove mouseleave monitor on menu destroy this.menuEl.un(this.mouseLeaveMonitor);
     */
    monitorMouseLeave?: (delay?: number, handler?: any, scope?: any) => any,

    /**
     * [Method] Sets the position of the element in page coordinates
     * @param x Number X value for new position (coordinates are page-based)
     * @param y Number Y value for new position (coordinates are page-based)
     * @param animate Boolean/Object True for the default animation, or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    moveTo?: (
      x?: number,
      y?: number,
      animate?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Returns true if this element needs an explicit tabIndex to make it focusable
     */
    needsTabIndex?: () => void,

    /**
     * [Method] Appends an event handler to this element
     * @param eventName String The name of event to handle.
     * @param fn Function The handler function the event invokes. This function is passed the following parameters: evt : EventObject The EventObject describing the event. el : HtmlElement The DOM element which was the target of the event. Note that this may be filtered by using the delegate option. o : Object The options object from the call that setup the listener.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to this Element.
     * @param options Object An object containing handler configuration properties. This may contain any of the following properties: scope Object : The scope (this reference) in which the handler function is executed. If omitted, defaults to this Element. delegate String: A simple selector to filter the target or look for a descendant of the target. See below for additional details. stopEvent Boolean: True to stop the event. That is stop propagation, and prevent the default action. preventDefault Boolean: True to prevent the default action stopPropagation Boolean: True to prevent event propagation normalized Boolean: False to pass a browser event to the handler function instead of an Ext.EventObject target Ext.dom.Element: Only call the handler if the event was fired on the target Element, not if the event was bubbled up from a child node. delay Number: The number of milliseconds to delay the invocation of the handler after the event fires. single Boolean: True to add a handler to handle just the next firing of the event, and then remove itself. buffer Number: Causes the handler to be scheduled to run in an Ext.util.DelayedTask delayed by the specified number of milliseconds. If the event fires again within that time, the original handler is not invoked, but the new handler is scheduled in its place. Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener that auto stops the event and adds a custom argument (forumId) to the options object. The options object is available as the third parameter in the handler function.  Code:  el.on('click', this.onClick, this, {  single: true,  delay: 100,  stopEvent : true,  forumId: 4 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers.  Code:  el.on({  'click' : {  fn: this.onClick,  scope: this,  delay: 100  },  'mouseover' : {  fn: this.onMouseOver,  scope: this  },  'mouseout' : {  fn: this.onMouseOut,  scope: this  } }); Or a shorthand syntax:  Code:  el.on({  'click' : this.onClick,  'mouseover' : this.onMouseOver,  'mouseout' : this.onMouseOut,  scope: this }); delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. Event delegation is a technique that is used to reduce memory consumption and prevent exposure to memory-leaks. By registering an event for a container element as opposed to each element within a container. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  // using this markup: &lt;div id='elId'&gt;  &lt;p id='p1'&gt;paragraph one&lt;/p&gt;  &lt;p id='p2' class='clickable'&gt;paragraph two&lt;/p&gt;  &lt;p id='p3'&gt;paragraph three&lt;/p&gt; &lt;/div&gt; // utilize event delegation to registering just one handler on the container element: el = Ext.get('elId'); el.on(  'click',  function(e,t) {  // handle click  console.info(t.id); // 'p2'  },  this,  {  // filter the target element to be a descendant with the class 'clickable'  delegate: '.clickable'  } );
     * @returns Ext.dom.Element this
     */
    Ext$on?: (
      eventName?: string,
      fn?: any,
      scope?: any,
      options?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Creates a pause before any subsequent queued effects begin
     * @param seconds Number The length of time to pause (in seconds)
     * @returns Ext.Element The Element
     */
    pause?: (seconds?: number) => Ext$Ext$IElement,

    /**
     * [Method] Initializes positioning on this element
     * @param pos String Positioning to use "relative", "absolute" or "fixed"
     * @param zIndex Number The zIndex to apply
     * @param x Number Set the page X position
     * @param y Number Set the page Y position
     */
    position?: (pos?: string, zIndex?: number, x?: number, y?: number) => void,

    /**
     * [Method] Fades the element out while slowly expanding it in all directions
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    puff?: (options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Recursively removes all previous added listeners from this element and its children
     * @returns Ext.dom.Element this
     */
    purgeAllListeners?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Create an event handler on this element such that when the event fires and is handled by this element it will be rel
     * @param eventName String The type of event to relay
     * @param observable Object Any object that extends Ext.util.Observable that will provide the context for firing the relayed event
     */
    relayEvent?: (eventName?: string, observable?: any) => void,

    /**
     * [Method] Removes all previous added listeners from this element
     * @returns Ext.dom.Element this
     */
    removeAllListeners?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Shorthand for un
     * @param eventName String The name of the event from which to remove the handler.
     * @param fn Function The handler function to remove. This must be a reference to the function passed into the on call.
     * @param scope Object If a scope (this reference) was specified when the listener was added, then this must refer to the same object.
     * @returns Ext.dom.Element this
     */
    removeListener?: (
      eventName?: string,
      fn?: any,
      scope?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Animates the transition of an element s dimensions from a starting height width to an ending height width
     * @param width Number The new width (pass undefined to keep the original width)
     * @param height Number The new height (pass undefined to keep the original height)
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.Element The Element
     */
    scale?: (
      width?: number,
      height?: number,
      options?: any
    ) => Ext$Ext$IElement,

    /**
     * [Method] Scrolls this element the specified direction
     * @param direction String Possible values are:  "l" (or "left") "r" (or "right") "t" (or "top", or "up") "b" (or "bottom", or "down")
     * @param distance Number How far to scroll the element in pixels
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Boolean Returns true if a scroll was triggered or false if the element was scrolled as far as it could go.
     */
    scroll?: (direction?: string, distance?: number, animate?: any) => boolean,

    /**
     * [Method] Scrolls this element by the passed delta values optionally animating
     * @param deltaX Number/Number[]/Object Either the x delta, an Array specifying x and y deltas or an object with "x" and "y" properties.
     * @param deltaY Number/Boolean/Object Either the y delta, or an animate flag or config object.
     * @param animate Boolean/Object Animate flag/config object if the delta values were passed separately.
     * @returns Ext.Element this
     */
    scrollBy?: (deltaX?: any, deltaY?: any, animate?: any) => Ext$Ext$IElement,

    /**
     * [Method] Scrolls this element into view within the passed container
     * @param container String/HTMLElement/Ext.Element The container element to scroll. Should be a string (id), dom node, or Ext.Element.
     * @param hscroll Boolean False to disable horizontal scroll.
     * @param animate Boolean/Object true for the default animation or a standard Element
     * @param highlight Boolean true to highlight the element when it is in view. animation config object
     * @returns Ext.dom.Element this
     */
    scrollIntoView?: (
      Ext$container?: any,
      hscroll?: boolean,
      animate?: any,
      highlight?: boolean
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Scrolls this element the specified scroll point
     * @param side String Either "left" for scrollLeft values or "top" for scrollTop values.
     * @param value Number The new scroll value
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.Element this
     */
    scrollTo?: (
      side?: string,
      Ext$value?: number,
      animate?: any
    ) => Ext$Ext$IElement,

    /**
     * [Method] Enable text selection for this element normalized across browsers  Defined in override Ext dom Element_style
     * @returns Ext.Element this
     */
    selectable?: () => Ext$Ext$IElement,

    /**
     * [Method] Sets the element s CSS bottom style
     * @param bottom Number/String Number of pixels or CSS string value to set as the bottom CSS property value
     * @returns Ext.dom.Element this
     */
    setBottom?: (bottom?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s position and size in one shot
     * @param x Number X value for new position (coordinates are page-based)
     * @param y Number Y value for new position (coordinates are page-based)
     * @param width Number/String The new width. This may be one of:  A Number specifying the new width in this Element's defaultUnits (by default, pixels) A String used to set the CSS width style. Animation may not be used.
     * @param height Number/String The new height. This may be one of:  A Number specifying the new height in this Element's defaultUnits (by default, pixels) A String used to set the CSS height style. Animation may not be used.
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    setBounds?: (
      x?: number,
      y?: number,
      width?: any,
      height?: any,
      animate?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the CSS display property
     * @param value Boolean/String Boolean value to display the element using its default display, or a string to set the display directly.
     * @returns Ext.dom.Element this
     */
    setDisplayed?: (Ext$value?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s left position directly using CSS style instead of setX
     * @param left Number/String Number of pixels or CSS string value to set as the left CSS property value
     * @returns Ext.dom.Element this
     */
    setLeft?: (left?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s left and top positions directly using CSS style Defined in override Ext dom Element_position
     * @param left Number/String Number of pixels or CSS string value to set as the left CSS property value
     * @param top Number/String Number of pixels or CSS string value to set as the top CSS property value
     * @returns Ext.dom.Element this
     */
    setLeftTop?: (left?: any, top?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the position of the element in page coordinates
     * @param x Number X value for new position
     * @param y Number Y value for new position
     * @param animate Boolean/Object True for the default animation, or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    setLocation?: (
      x?: number,
      y?: number,
      animate?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Set the opacity of the element Defined in override Ext dom Element_style
     * @param opacity Number The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc
     * @param animate Boolean/Object a standard Element animation config object or true for the default animation ({duration: 350, easing: 'easeIn'})
     * @returns Ext.dom.Element this
     */
    setOpacity?: (opacity?: number, animate?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Set positioning with an object returned by getPositioning
     * @param posCfg Object
     * @returns Ext.dom.Element this
     */
    setPositioning?: (posCfg?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s CSS right style
     * @param right Number/String Number of pixels or CSS string value to set as the right CSS property value
     * @returns Ext.dom.Element this
     */
    setRight?: (right?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the left scroll position Defined in override Ext dom Element_scroll
     * @param left Number The left scroll position
     * @returns Ext.dom.Element this
     */
    setScrollLeft?: (left?: number) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the top scroll position Defined in override Ext dom Element_scroll
     * @param top Number The top scroll position
     * @returns Ext.dom.Element this
     */
    setScrollTop?: (top?: number) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s top position directly using CSS style instead of setY
     * @param top Number/String Number of pixels or CSS string value to set as the top CSS property value
     * @returns Ext.dom.Element this
     */
    setTop?: (top?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the visibility of the element see details
     * @param visible Boolean Whether the element is visible
     * @param animate Boolean/Object True for the default animation, or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    setVisible?: (visible?: boolean, animate?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Animates the transition of any combination of an element s dimensions xy position and or opacity
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.Element The Element
     */
    shift?: (options?: any) => Ext$Ext$IElement,

    /**
     * [Method] Show this element  Uses display mode to determine whether to use display or visibility
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    show?: (animate?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Slides the element into view
     * @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to top: 't')
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    slideIn?: (anchor?: string, options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Slides the element out of view
     * @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to top: 't')
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    slideOut?: (anchor?: string, options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Stops the specified event s from bubbling and optionally prevents the default action
     * @param eventName String/String[] an event / array of events to stop from bubbling
     * @param preventDefault Boolean true to prevent the default action too
     * @returns Ext.dom.Element this
     */
    swallowEvent?: (
      eventName?: any,
      preventDefault?: boolean
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Blinks the element as if it was clicked and then collapses on its center similar to switching off a television
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    switchOff?: (options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Toggles the element s visibility or display depending on visibility mode
     * @param animate Boolean/Object True for the default animation, or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    toggle?: (animate?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Removes an event handler from this element
     * @param eventName String The name of the event from which to remove the handler.
     * @param fn Function The handler function to remove. This must be a reference to the function passed into the on call.
     * @param scope Object If a scope (this reference) was specified when the listener was added, then this must refer to the same object.
     * @returns Ext.dom.Element this
     */
    Ext$un?: (
      eventName?: string,
      fn?: any,
      scope?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Return clipping overflow to original clipping before clip was called Defined in override Ext dom Element_style
     * @returns Ext.dom.Element this
     */
    unclip?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Hides a previously applied mask
     */
    unmask?: () => void,

    /**
     * [Method] Disables text selection for this element normalized across browsers  Defined in override Ext dom Element_style
     * @returns Ext.dom.Element this
     */
    unselectable?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Updates the innerHTML of this element optionally searching for and processing scripts
     * @param html String The new HTML
     * @param loadScripts Boolean True to look for and process scripts (defaults to false)
     * @param callback Function For async script loading you can be notified when the update completes
     * @returns Ext.dom.Element this
     */
    update?: (
      html?: string,
      loadScripts?: boolean,
      Ext$callback?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Property] (Boolean)
     */
    autoBoxAdjust?: boolean,

    /**
     * [Property] (String)
     */
    originalDisplay?: string,

    /**
     * [Method] Sets up event handlers to add and remove a css class when the mouse is down and then up on this element a click effe
     * @param className String The class to add
     * @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added.
     * @param scope Object The scope to execute the testFn in.
     * @returns Ext.dom.Element this
     */
    addClsOnClick?: (
      className?: string,
      testFn?: any,
      scope?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets up event handlers to add and remove a css class when this element has the focus Defined in override Ext dom Ele
     * @param className String The class to add
     * @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added.
     * @param scope Object The scope to execute the testFn in.
     * @returns Ext.dom.Element this
     */
    addClsOnFocus?: (
      className?: string,
      testFn?: any,
      scope?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets up event handlers to add and remove a css class when the mouse is over this element Defined in override Ext dom
     * @param className String The class to add
     * @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added.
     * @param scope Object The scope to execute the testFn in.
     * @returns Ext.dom.Element this
     */
    addClsOnOver?: (
      className?: string,
      testFn?: any,
      scope?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Convenience method for constructing a KeyMap
     * @param key String/Number/Number[]/Object Either a string with the keys to listen for, the numeric key code, array of key codes or an object with the following options:
     * @param fn Function The function to call
     * @param scope Object The scope (this reference) in which the specified function is executed. Defaults to this Element.
     * @returns Ext.util.KeyMap The KeyMap created
     */
    addKeyListener?: (
      key?: any,
      fn?: any,
      scope?: any
    ) => Ext$Ext$util.Ext$IKeyMap,

    /**
     * [Method] Creates a KeyMap for this element
     * @param config Object The KeyMap config. See Ext.util.KeyMap for more details
     * @returns Ext.util.KeyMap The KeyMap created
     */
    addKeyMap?: (config?: any) => Ext$Ext$util.Ext$IKeyMap,

    /**
     * [Method] Shorthand for on
     * @param eventName String The name of event to handle.
     * @param fn Function The handler function the event invokes. This function is passed the following parameters: evt : EventObject The EventObject describing the event. el : HtmlElement The DOM element which was the target of the event. Note that this may be filtered by using the delegate option. o : Object The options object from the call that setup the listener.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to this Element.
     * @param options Object An object containing handler configuration properties. This may contain any of the following properties: scope Object : The scope (this reference) in which the handler function is executed. If omitted, defaults to this Element. delegate String: A simple selector to filter the target or look for a descendant of the target. See below for additional details. stopEvent Boolean: True to stop the event. That is stop propagation, and prevent the default action. preventDefault Boolean: True to prevent the default action stopPropagation Boolean: True to prevent event propagation normalized Boolean: False to pass a browser event to the handler function instead of an Ext.EventObject target Ext.dom.Element: Only call the handler if the event was fired on the target Element, not if the event was bubbled up from a child node. delay Number: The number of milliseconds to delay the invocation of the handler after the event fires. single Boolean: True to add a handler to handle just the next firing of the event, and then remove itself. buffer Number: Causes the handler to be scheduled to run in an Ext.util.DelayedTask delayed by the specified number of milliseconds. If the event fires again within that time, the original handler is not invoked, but the new handler is scheduled in its place. Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener that auto stops the event and adds a custom argument (forumId) to the options object. The options object is available as the third parameter in the handler function.  Code:  el.on('click', this.onClick, this, {  single: true,  delay: 100,  stopEvent : true,  forumId: 4 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers.  Code:  el.on({  'click' : {  fn: this.onClick,  scope: this,  delay: 100  },  'mouseover' : {  fn: this.onMouseOver,  scope: this  },  'mouseout' : {  fn: this.onMouseOut,  scope: this  } }); Or a shorthand syntax:  Code:  el.on({  'click' : this.onClick,  'mouseover' : this.onMouseOver,  'mouseout' : this.onMouseOut,  scope: this }); delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. Event delegation is a technique that is used to reduce memory consumption and prevent exposure to memory-leaks. By registering an event for a container element as opposed to each element within a container. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  // using this markup: &lt;div id='elId'&gt;  &lt;p id='p1'&gt;paragraph one&lt;/p&gt;  &lt;p id='p2' class='clickable'&gt;paragraph two&lt;/p&gt;  &lt;p id='p3'&gt;paragraph three&lt;/p&gt; &lt;/div&gt; // utilize event delegation to registering just one handler on the container element: el = Ext.get('elId'); el.on(  'click',  function(e,t) {  // handle click  console.info(t.id); // 'p2'  },  this,  {  // filter the target element to be a descendant with the class 'clickable'  delegate: '.clickable'  } );
     * @returns Ext.dom.Element this
     */
    addListener?: (
      eventName?: string,
      fn?: any,
      scope?: any,
      options?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Performs custom animation on this Element
     * @param config Object Configuration for Ext.fx.Anim. Note that the to config is required.
     * @returns Ext.dom.Element this
     */
    animate?: (config?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Tries to blur the element
     * @returns Ext.dom.Element this
     */
    blur?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Wraps the specified element with a special 9 element markup CSS block that renders by default as a gray container wit
     * @param class String A base CSS class to apply to the containing wrapper element. Note that there are a number of CSS rules that are dependent on this name to make the overall effect work, so if you supply an alternate base class, make sure you also supply all of the necessary rules.
     * @returns Ext.dom.Element The outermost wrapping element of the created box structure.
     */
    boxWrap?: (clazz?: string) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] When an element is moved around in the DOM or is hidden using display none it loses layout and therefore all scrol
     * @returns Function A function which will restore all descentant elements of this Element to their scroll positions recorded when this function was executed. Be aware that the returned function is a closure which has captured the scope of cacheScrollValues, so take care to derefence it as soon as not needed - if is it is a var it will drop out of scope, and the reference will be freed.
     */
    cacheScrollValues?: () => any,

    /**
     * [Method] Centers the Element in either the viewport or another Element
     * @param centerIn String/HTMLElement/Ext.dom.Element element in which to center the element.
     */
    center?: (centerIn?: any) => void,

    /**
     * [Method] Removes Empty or whitespace filled text nodes
     * @param forceReclean Boolean By default the element keeps track if it has been cleaned already so you can call this over and over. However, if you update the element and need to force a reclean, you can pass true.
     */
    Ext$clean?: (forceReclean?: boolean) => void,

    /**
     * [Method] Alias for removeAllListeners
     * @returns Ext.dom.Element this
     */
    clearListeners?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Clears any opacity settings from this element
     * @returns Ext.dom.Element this
     */
    clearOpacity?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Clears positioning back to the default when the document was loaded
     * @param value String The value to use for the left, right, top, bottom. You could use 'auto'.
     * @returns Ext.dom.Element this
     */
    clearPositioning?: (Ext$value?: string) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Store the current overflow setting and clip overflow on the element  use unclip to remove Defined in override Ext d
     * @returns Ext.dom.Element this
     */
    clip?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Creates a proxy element of this element
     * @param config String/Object The class name of the proxy element or a DomHelper config object
     * @param renderTo String/HTMLElement The element or element id to render the proxy to. Defaults to: document.body.
     * @param matchBox Boolean True to align and size the proxy to this element now.
     * @returns Ext.dom.Element The new proxy element
     */
    createProxy?: (
      config?: any,
      renderTo?: any,
      matchBox?: boolean
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Creates an iframe shim for this element to keep selects and other windowed objects from showing through
     * @returns Ext.dom.Element The new shim element
     */
    createShim?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Convenience method for setVisibilityMode Element DISPLAY
     * @param display String What to set display to when visible
     * @returns Ext.dom.Element this
     */
    enableDisplayMode?: (display?: string) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Fade an element in from transparent to opaque
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.Element The Element
     */
    fadeIn?: (options?: any) => Ext$Ext$IElement,

    /**
     * [Method] Fade an element out from opaque to transparent
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.Element The Element
     */
    fadeOut?: (options?: any) => Ext$Ext$IElement,

    /**
     * [Method] Tries to focus the element
     * @param defer Number Milliseconds to defer the focus
     * @returns Ext.dom.Element this
     */
    focus?: (Ext$defer?: number) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Alias for isFocusable
     * @returns Boolean True if the element is focusable
     */
    focusable?: () => boolean,

    /**
     * [Method] Shows a ripple of exploding attenuating borders to draw attention to an Element
     * @param color String The hex color value for the border.
     * @param count Number The number of ripples to display.
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    frame?: (
      color?: string,
      count?: number,
      options?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Returns the value of a namespaced attribute from the element s underlying DOM node
     * @param namespace String The namespace in which to look for the attribute
     * @param name String The attribute name
     * @returns String The attribute value
     */
    getAttributeNS?: (Ext$namespace?: string, name?: string) => string,

    /**
     * [Method] Gets the bottom Y coordinate of the element element Y position  element height  Defined in override Ext dom Elemen
     * @param local Boolean True to get the local css position instead of page coordinate
     * @returns Number
     */
    getBottom?: (local?: boolean) => number,

    /**
     * [Method] Calculates the x y to center this element on the screen Defined in override Ext dom Element_position
     * @returns Number[] The x, y values [x, y]
     */
    getCenterXY?: () => number[],

    /**
     * [Method] Return the CSS color for the specified CSS attribute
     * @param attr String The css attribute
     * @param defaultValue String The default value to use when a valid color isn't found
     * @param prefix String defaults to #. Use an empty string when working with color anims.
     */
    getColor?: (attr?: string, defaultValue?: string, prefix?: string) => void,

    /**
     * [Method] Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders when
     * @returns Number
     */
    getComputedHeight?: () => number,

    /**
     * [Method] Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders when ne
     * @returns Number
     */
    getComputedWidth?: () => number,

    /**
     * [Method] Returns the sum width of the padding and borders for the passed sides
     * @param sides String
     * @returns Number
     */
    getFrameWidth?: (sides?: string) => number,

    /**
     * [Method] Gets the left X coordinate Defined in override Ext dom Element_position
     * @param local Boolean True to get the local css position instead of page coordinate
     * @returns Number
     */
    getLeft?: (local?: boolean) => number,

    /**
     * [Method] Gets this element s ElementLoader
     * @returns Ext.ElementLoader The loader
     */
    getLoader?: () => Ext$Ext$IElementLoader,

    /**
     * [Method] Gets the local CSS X position for the element Defined in override Ext dom Element_position
     * @returns Number
     */
    getLocalX?: () => number,

    /**
     * [Method] Gets the local CSS X and Y position for the element Defined in override Ext dom Element_position
     * @returns Array [x, y]
     */
    getLocalXY?: () => any[],

    /**
     * [Method] Gets the local CSS Y position for the element Defined in override Ext dom Element_position
     * @returns Number
     */
    getLocalY?: () => number,

    /**
     * [Method] Returns an object defining the area of this Element which can be passed to Ext util Positionable setBox to set anothe
     * @param asRegion Boolean If true an Ext.util.Region will be returned
     * @returns Object/Ext.util.Region box An object in the following format: {  left: &lt;Element's X position&gt;,  top: &lt;Element's Y position&gt;,  width: &lt;Element's width&gt;,  height: &lt;Element's height&gt;,  bottom: &lt;Element's lower bound&gt;,  right: &lt;Element's rightmost bound&gt; }  The returned object may also be addressed as an Array where index 0 contains the X position and index 1 contains the Y position. So the result may also be used for setXY
     */
    getPageBox?: (asRegion?: boolean) => any,

    /**
     * [Method] Gets an object with all CSS positioning properties
     * @param autoPx Boolean true to return pixel values for "auto" styles.
     * @returns Object
     */
    getPositioning?: (autoPx?: boolean) => any,

    /**
     * [Method] Gets the right X coordinate of the element element X position  element width  Defined in override Ext dom Element_
     * @param local Boolean True to get the local css position instead of page coordinates
     * @returns Number
     */
    getRight?: (local?: boolean) => number,

    /**
     * [Method] Returns the current scroll position of the element
     * @returns Object An object containing the scroll position in the format {left: (scrollLeft), top: (scrollTop)}
     */
    getScroll?: () => any,

    /**
     * [Method] Gets the left scroll position Defined in override Ext dom Element_scroll
     * @returns Number The left scroll position
     */
    getScrollLeft?: () => number,

    /**
     * [Method] Gets the top scroll position Defined in override Ext dom Element_scroll
     * @returns Number The top scroll position
     */
    getScrollTop?: () => number,

    /**
     * [Method] Returns the dimensions of the element available to lay content out in
     * @returns Object Object describing width and height.
     */
    getStyleSize?: () => any,

    /**
     * [Method] Returns the width in pixels of the passed text or the width of the text in this Element
     * @param text String The text to measure. Defaults to the innerHTML of the element.
     * @param min Number The minumum value to return.
     * @param max Number The maximum value to return.
     * @returns Number The text width in pixels.
     */
    getTextWidth?: (
      text?: string,
      Ext$min?: number,
      Ext$max?: number
    ) => number,

    /**
     * [Method] Gets the top Y coordinate Defined in override Ext dom Element_position
     * @param local Boolean True to get the local css position instead of page coordinates
     * @returns Number
     */
    getTop?: (local?: boolean) => number,

    /**
     * [Method] Gets element X position in page coordinates Defined in override Ext dom Element_position
     * @returns Number
     */
    getX?: () => number,

    /**
     * [Method] Gets element X and Y positions in page coordinates Defined in override Ext dom Element_position
     * @returns Array [x, y]
     */
    getXY?: () => any[],

    /**
     * [Method] Gets element Y position in page coordinates Defined in override Ext dom Element_position
     * @returns Number
     */
    getY?: () => number,

    /**
     * [Method] Slides the element while fading it out of view
     * @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to bottom: 'b')
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    ghost?: (anchor?: string, options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Hide this element  Uses display mode to determine whether to use display or visibility
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    hide?: (animate?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Highlights the Element by setting a color applies to the background color by default but can be changed using the
     * @param color String The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c')
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    highlight?: (color?: string, options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element
     * @param overFn Function The function to call when the mouse enters the Element.
     * @param outFn Function The function to call when the mouse leaves the Element.
     * @param scope Object The scope (this reference) in which the functions are executed. Defaults to the Element's DOM element.
     * @param options Object Options for the listener. See the options parameter.
     * @returns Ext.dom.Element this
     */
    hover?: (
      overFn?: any,
      outFn?: any,
      scope?: any,
      options?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Initializes a Ext dd DD drag drop object for this element
     * @param group String The group the DD object is member of
     * @param config Object The DD config object
     * @param overrides Object An object containing methods to override/implement on the DD object
     * @returns Ext.dd.DD The DD object
     */
    initDD?: (
      group?: string,
      config?: any,
      overrides?: any
    ) => Ext$Ext$dd.panel$IDD,

    /**
     * [Method] Initializes a Ext dd DDProxy object for this element
     * @param group String The group the DDProxy object is member of
     * @param config Object The DDProxy config object
     * @param overrides Object An object containing methods to override/implement on the DDProxy object
     * @returns Ext.dd.DDProxy The DDProxy object
     */
    initDDProxy?: (
      group?: string,
      config?: any,
      overrides?: any
    ) => Ext$Ext$dd.dd$IDDProxy,

    /**
     * [Method] Initializes a Ext dd DDTarget object for this element
     * @param group String The group the DDTarget object is member of
     * @param config Object The DDTarget config object
     * @param overrides Object An object containing methods to override/implement on the DDTarget object
     * @returns Ext.dd.DDTarget The DDTarget object
     */
    initDDTarget?: (
      group?: string,
      config?: any,
      overrides?: any
    ) => Ext$Ext$dd.dd$IDDTarget,

    /**
     * [Method] Tests various css rules browsers to determine if this element uses a border box
     * @returns Boolean
     */
    isBorderBox?: () => boolean,

    /**
     * [Method] Returns true if display is not none
     * @returns Boolean
     */
    isDisplayed?: () => boolean,

    /**
     * [Method] Checks whether this element can be focused
     * @param asFocusEl Object
     * @returns Boolean True if the element is focusable
     */
    isFocusable?: (asFocusEl?: any) => boolean,

    /**
     * [Method] Returns true if this element is masked
     * @returns Boolean
     */
    isMasked?: () => boolean,

    /**
     * [Method] Returns true if this element is scrollable
     * @returns Boolean
     */
    isScrollable?: () => boolean,

    /**
     * [Method] Checks whether the element is currently visible using both visibility and display properties
     * @param deep Boolean True to walk the dom and see if parent elements are hidden. If false, the function only checks the visibility of the element itself and it may return true even though a parent is not visible.
     * @returns Boolean true if the element is currently visible, else false
     */
    isVisible?: (deep?: boolean) => boolean,

    /**
     * [Method] Direct access to the Ext ElementLoader Ext ElementLoader load method
     * @param options Object
     * @returns Ext.dom.Element this
     */
    load?: (options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Puts a mask over this element to disable user interaction
     * @param msg String A message to display in the mask
     * @param msgCls String A css class to apply to the msg element
     * @returns Ext.dom.Element The mask element
     */
    mask?: (msg?: string, msgCls?: string) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Monitors this Element for the mouse leaving
     * @param delay Number The delay in milliseconds to wait for possible mouse re-entry before calling the handler function.
     * @param handler Function The function to call if the mouse remains outside of this Element for the specified time.
     * @param scope Object The scope (this reference) in which the handler function executes. Defaults to this Element.
     * @returns Object The listeners object which was added to this element so that monitoring can be stopped. Example usage: // Hide the menu if the mouse moves out for 250ms or more this.mouseLeaveMonitor = this.menuEl.monitorMouseLeave(250, this.hideMenu, this); ... // Remove mouseleave monitor on menu destroy this.menuEl.un(this.mouseLeaveMonitor);
     */
    monitorMouseLeave?: (delay?: number, handler?: any, scope?: any) => any,

    /**
     * [Method] Sets the position of the element in page coordinates
     * @param x Number X value for new position (coordinates are page-based)
     * @param y Number Y value for new position (coordinates are page-based)
     * @param animate Boolean/Object True for the default animation, or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    moveTo?: (
      x?: number,
      y?: number,
      animate?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Returns true if this element needs an explicit tabIndex to make it focusable
     */
    needsTabIndex?: () => void,

    /**
     * [Method] Appends an event handler to this element
     * @param eventName String The name of event to handle.
     * @param fn Function The handler function the event invokes. This function is passed the following parameters: evt : EventObject The EventObject describing the event. el : HtmlElement The DOM element which was the target of the event. Note that this may be filtered by using the delegate option. o : Object The options object from the call that setup the listener.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to this Element.
     * @param options Object An object containing handler configuration properties. This may contain any of the following properties: scope Object : The scope (this reference) in which the handler function is executed. If omitted, defaults to this Element. delegate String: A simple selector to filter the target or look for a descendant of the target. See below for additional details. stopEvent Boolean: True to stop the event. That is stop propagation, and prevent the default action. preventDefault Boolean: True to prevent the default action stopPropagation Boolean: True to prevent event propagation normalized Boolean: False to pass a browser event to the handler function instead of an Ext.EventObject target Ext.dom.Element: Only call the handler if the event was fired on the target Element, not if the event was bubbled up from a child node. delay Number: The number of milliseconds to delay the invocation of the handler after the event fires. single Boolean: True to add a handler to handle just the next firing of the event, and then remove itself. buffer Number: Causes the handler to be scheduled to run in an Ext.util.DelayedTask delayed by the specified number of milliseconds. If the event fires again within that time, the original handler is not invoked, but the new handler is scheduled in its place. Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener that auto stops the event and adds a custom argument (forumId) to the options object. The options object is available as the third parameter in the handler function.  Code:  el.on('click', this.onClick, this, {  single: true,  delay: 100,  stopEvent : true,  forumId: 4 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers.  Code:  el.on({  'click' : {  fn: this.onClick,  scope: this,  delay: 100  },  'mouseover' : {  fn: this.onMouseOver,  scope: this  },  'mouseout' : {  fn: this.onMouseOut,  scope: this  } }); Or a shorthand syntax:  Code:  el.on({  'click' : this.onClick,  'mouseover' : this.onMouseOver,  'mouseout' : this.onMouseOut,  scope: this }); delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. Event delegation is a technique that is used to reduce memory consumption and prevent exposure to memory-leaks. By registering an event for a container element as opposed to each element within a container. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  // using this markup: &lt;div id='elId'&gt;  &lt;p id='p1'&gt;paragraph one&lt;/p&gt;  &lt;p id='p2' class='clickable'&gt;paragraph two&lt;/p&gt;  &lt;p id='p3'&gt;paragraph three&lt;/p&gt; &lt;/div&gt; // utilize event delegation to registering just one handler on the container element: el = Ext.get('elId'); el.on(  'click',  function(e,t) {  // handle click  console.info(t.id); // 'p2'  },  this,  {  // filter the target element to be a descendant with the class 'clickable'  delegate: '.clickable'  } );
     * @returns Ext.dom.Element this
     */
    Ext$on?: (
      eventName?: string,
      fn?: any,
      scope?: any,
      options?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Creates a pause before any subsequent queued effects begin
     * @param seconds Number The length of time to pause (in seconds)
     * @returns Ext.Element The Element
     */
    pause?: (seconds?: number) => Ext$Ext$IElement,

    /**
     * [Method] Initializes positioning on this element
     * @param pos String Positioning to use "relative", "absolute" or "fixed"
     * @param zIndex Number The zIndex to apply
     * @param x Number Set the page X position
     * @param y Number Set the page Y position
     */
    position?: (pos?: string, zIndex?: number, x?: number, y?: number) => void,

    /**
     * [Method] Fades the element out while slowly expanding it in all directions
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    puff?: (options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Recursively removes all previous added listeners from this element and its children
     * @returns Ext.dom.Element this
     */
    purgeAllListeners?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Create an event handler on this element such that when the event fires and is handled by this element it will be rel
     * @param eventName String The type of event to relay
     * @param observable Object Any object that extends Ext.util.Observable that will provide the context for firing the relayed event
     */
    relayEvent?: (eventName?: string, observable?: any) => void,

    /**
     * [Method] Removes all previous added listeners from this element
     * @returns Ext.dom.Element this
     */
    removeAllListeners?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Shorthand for un
     * @param eventName String The name of the event from which to remove the handler.
     * @param fn Function The handler function to remove. This must be a reference to the function passed into the on call.
     * @param scope Object If a scope (this reference) was specified when the listener was added, then this must refer to the same object.
     * @returns Ext.dom.Element this
     */
    removeListener?: (
      eventName?: string,
      fn?: any,
      scope?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Animates the transition of an element s dimensions from a starting height width to an ending height width
     * @param width Number The new width (pass undefined to keep the original width)
     * @param height Number The new height (pass undefined to keep the original height)
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.Element The Element
     */
    scale?: (
      width?: number,
      height?: number,
      options?: any
    ) => Ext$Ext$IElement,

    /**
     * [Method] Scrolls this element the specified direction
     * @param direction String Possible values are:  "l" (or "left") "r" (or "right") "t" (or "top", or "up") "b" (or "bottom", or "down")
     * @param distance Number How far to scroll the element in pixels
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Boolean Returns true if a scroll was triggered or false if the element was scrolled as far as it could go.
     */
    scroll?: (direction?: string, distance?: number, animate?: any) => boolean,

    /**
     * [Method] Scrolls this element by the passed delta values optionally animating
     * @param deltaX Number/Number[]/Object Either the x delta, an Array specifying x and y deltas or an object with "x" and "y" properties.
     * @param deltaY Number/Boolean/Object Either the y delta, or an animate flag or config object.
     * @param animate Boolean/Object Animate flag/config object if the delta values were passed separately.
     * @returns Ext.Element this
     */
    scrollBy?: (deltaX?: any, deltaY?: any, animate?: any) => Ext$Ext$IElement,

    /**
     * [Method] Scrolls this element into view within the passed container
     * @param container String/HTMLElement/Ext.Element The container element to scroll. Should be a string (id), dom node, or Ext.Element.
     * @param hscroll Boolean False to disable horizontal scroll.
     * @param animate Boolean/Object true for the default animation or a standard Element
     * @param highlight Boolean true to highlight the element when it is in view. animation config object
     * @returns Ext.dom.Element this
     */
    scrollIntoView?: (
      Ext$container?: any,
      hscroll?: boolean,
      animate?: any,
      highlight?: boolean
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Scrolls this element the specified scroll point
     * @param side String Either "left" for scrollLeft values or "top" for scrollTop values.
     * @param value Number The new scroll value
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.Element this
     */
    scrollTo?: (
      side?: string,
      Ext$value?: number,
      animate?: any
    ) => Ext$Ext$IElement,

    /**
     * [Method] Enable text selection for this element normalized across browsers  Defined in override Ext dom Element_style
     * @returns Ext.Element this
     */
    selectable?: () => Ext$Ext$IElement,

    /**
     * [Method] Sets the element s CSS bottom style
     * @param bottom Number/String Number of pixels or CSS string value to set as the bottom CSS property value
     * @returns Ext.dom.Element this
     */
    setBottom?: (bottom?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s position and size in one shot
     * @param x Number X value for new position (coordinates are page-based)
     * @param y Number Y value for new position (coordinates are page-based)
     * @param width Number/String The new width. This may be one of:  A Number specifying the new width in this Element's defaultUnits (by default, pixels) A String used to set the CSS width style. Animation may not be used.
     * @param height Number/String The new height. This may be one of:  A Number specifying the new height in this Element's defaultUnits (by default, pixels) A String used to set the CSS height style. Animation may not be used.
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    setBounds?: (
      x?: number,
      y?: number,
      width?: any,
      height?: any,
      animate?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the CSS display property
     * @param value Boolean/String Boolean value to display the element using its default display, or a string to set the display directly.
     * @returns Ext.dom.Element this
     */
    setDisplayed?: (Ext$value?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s left position directly using CSS style instead of setX
     * @param left Number/String Number of pixels or CSS string value to set as the left CSS property value
     * @returns Ext.dom.Element this
     */
    setLeft?: (left?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s left and top positions directly using CSS style Defined in override Ext dom Element_position
     * @param left Number/String Number of pixels or CSS string value to set as the left CSS property value
     * @param top Number/String Number of pixels or CSS string value to set as the top CSS property value
     * @returns Ext.dom.Element this
     */
    setLeftTop?: (left?: any, top?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the position of the element in page coordinates
     * @param x Number X value for new position
     * @param y Number Y value for new position
     * @param animate Boolean/Object True for the default animation, or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    setLocation?: (
      x?: number,
      y?: number,
      animate?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Set the opacity of the element Defined in override Ext dom Element_style
     * @param opacity Number The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc
     * @param animate Boolean/Object a standard Element animation config object or true for the default animation ({duration: 350, easing: 'easeIn'})
     * @returns Ext.dom.Element this
     */
    setOpacity?: (opacity?: number, animate?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Set positioning with an object returned by getPositioning
     * @param posCfg Object
     * @returns Ext.dom.Element this
     */
    setPositioning?: (posCfg?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s CSS right style
     * @param right Number/String Number of pixels or CSS string value to set as the right CSS property value
     * @returns Ext.dom.Element this
     */
    setRight?: (right?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the left scroll position Defined in override Ext dom Element_scroll
     * @param left Number The left scroll position
     * @returns Ext.dom.Element this
     */
    setScrollLeft?: (left?: number) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the top scroll position Defined in override Ext dom Element_scroll
     * @param top Number The top scroll position
     * @returns Ext.dom.Element this
     */
    setScrollTop?: (top?: number) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s top position directly using CSS style instead of setY
     * @param top Number/String Number of pixels or CSS string value to set as the top CSS property value
     * @returns Ext.dom.Element this
     */
    setTop?: (top?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the visibility of the element see details
     * @param visible Boolean Whether the element is visible
     * @param animate Boolean/Object True for the default animation, or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    setVisible?: (visible?: boolean, animate?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Animates the transition of any combination of an element s dimensions xy position and or opacity
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.Element The Element
     */
    shift?: (options?: any) => Ext$Ext$IElement,

    /**
     * [Method] Show this element  Uses display mode to determine whether to use display or visibility
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    show?: (animate?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Slides the element into view
     * @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to top: 't')
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    slideIn?: (anchor?: string, options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Slides the element out of view
     * @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to top: 't')
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    slideOut?: (anchor?: string, options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Stops the specified event s from bubbling and optionally prevents the default action
     * @param eventName String/String[] an event / array of events to stop from bubbling
     * @param preventDefault Boolean true to prevent the default action too
     * @returns Ext.dom.Element this
     */
    swallowEvent?: (
      eventName?: any,
      preventDefault?: boolean
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Blinks the element as if it was clicked and then collapses on its center similar to switching off a television
     * @param options Object Object literal with any of the Ext.fx.Anim config options
     * @returns Ext.dom.Element The Element
     */
    switchOff?: (options?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Toggles the element s visibility or display depending on visibility mode
     * @param animate Boolean/Object True for the default animation, or a standard Element animation config object
     * @returns Ext.dom.Element this
     */
    toggle?: (animate?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Removes an event handler from this element
     * @param eventName String The name of the event from which to remove the handler.
     * @param fn Function The handler function to remove. This must be a reference to the function passed into the on call.
     * @param scope Object If a scope (this reference) was specified when the listener was added, then this must refer to the same object.
     * @returns Ext.dom.Element this
     */
    Ext$un?: (
      eventName?: string,
      fn?: any,
      scope?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Return clipping overflow to original clipping before clip was called Defined in override Ext dom Element_style
     * @returns Ext.dom.Element this
     */
    unclip?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Hides a previously applied mask
     */
    unmask?: () => void,

    /**
     * [Method] Disables text selection for this element normalized across browsers  Defined in override Ext dom Element_style
     * @returns Ext.dom.Element this
     */
    unselectable?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Updates the innerHTML of this element optionally searching for and processing scripts
     * @param html String The new HTML
     * @param loadScripts Boolean True to look for and process scripts (defaults to false)
     * @param callback Function For async script loading you can be notified when the update completes
     * @returns Ext.dom.Element this
     */
    update?: (
      html?: string,
      loadScripts?: boolean,
      Ext$callback?: any
    ) => Ext$Ext$dom.Ext$IElement
  } & undefined.dom$IAbstractElement;

  declare export class Ext$Element {
    /**
     * [Method] Add methods  properties to the prototype of this class
     * @param members Object
     */
    static addMembers(members?: any): void;

    /**
     * [Method] Add  override static properties of this class
     * @param members Object
     * @returns Ext.Base this
     */
    static addStatics(members?: any): Ext$Ext$IBase;

    /**
     * [Method] Create a new instance of this Class
     * @returns Object the created instance.
     */
    static create(): any;

    /**
     * [Method] Create aliases for existing prototype methods
     * @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
     * @param origin String/Object The original method name
     */
    static createAlias(alias?: any, origin?: any): void;

    /**
     * [Method] Returns the top Element that is located at the passed coordinates Defined in override Ext dom AbstractElement_static
     * @param x Number The x coordinate
     * @param y Number The y coordinate
     * @returns String The found Element
     */
    static fromPoint(x?: number, y?: number): string;

    /**
     * [Method] Retrieves Ext dom Element objects
     * @param el String/HTMLElement/Ext.Element The id of the node, a DOM Node or an existing Element.
     * @returns Ext.dom.Element The Element object (or null if no matching element was found)
     */
    static get(el?: any): Ext$Ext$dom.Ext$IElement;

    /**
     * [Method] Retrieves the document height Defined in override Ext dom AbstractElement_static
     * @returns Number documentHeight
     */
    static getDocumentHeight(): number;

    /**
     * [Method] Retrieves the document width Defined in override Ext dom AbstractElement_static
     * @returns Number documentWidth
     */
    static getDocumentWidth(): number;

    /**
     * [Method] Get the current class name in string format
     * @returns String className
     */
    static getName(): string;

    /**
     * [Method] Retrieves the current orientation of the window
     * @returns String Orientation of window: 'portrait' or 'landscape'
     */
    static getOrientation(): string;

    /**
     * [Method] Retrieves the viewport size of the window
     * @returns Object object containing width and height properties
     */
    static getViewSize(): any;

    /**
     * [Method] Retrieves the viewport height of the window
     * @returns Number viewportHeight
     */
    static getViewportHeight(): number;

    /**
     * [Method] Retrieves the viewport width of the window
     * @returns Number viewportWidth
     */
    static getViewportWidth(): number;

    /**
     * [Method] Adds members to class
     */
    static implement(): void;

    /**
     * [Method] Returns an array of unique class names based upon the input strings or string arrays
     * @param clsList1 Mixed A string of class names, or an array of class names.
     * @param clsList2 Mixed A string of class names, or an array of class names.
     * @returns Array An array of strings representing remaining unique, merged class names. If class names were added to the first list, the changed property will be true.
     */
    static mergeClsList(clsList1?: any, clsList2?: any): any[];

    /**
     * [Method] Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax
     * @param prop String The property to normalize
     * @returns String The normalized string
     */
    static normalize(prop?: string): string;

    /**
     * [Method] Override members of this class
     * @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
     * @returns Ext.Base this class
     */
    static override(members?: any): Ext$Ext$IBase;

    /**
     * [Method] Parses a number or string representing margin sizes into an object
     * @param box Number/String The encoded margins
     * @returns Object An object with margin sizes for top, right, bottom and left
     */
    static parseBox(box?: any): any;

    /**
     * [Method] Converts a CSS string into an object with a property for each style
     * @param styles String A CSS string
     * @returns Object styles
     */
    static parseStyles(styles?: string): any;

    /**
     * [Method] Returns an array of unique class names deom the first parameter with all class names from the second parameter removed
     * @param existingClsList Mixed A string of class names, or an array of class names.
     * @param removeClsList Mixed A string of class names, or an array of class names to remove from existingClsList.
     * @returns Array An array of strings representing remaining class names. If class names were removed, the changed property will be true.
     */
    static removeCls(existingClsList?: any, removeClsList?: any): any[];

    /**
     * [Method] Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in
     * @param selector String/HTMLElement[] The CSS selector or an array of elements
     * @param unique Boolean true to create a unique Ext.Element for each element (defaults to a shared flyweight object)
     * @param root HTMLElement/String The root element of the query or id of the root
     * @returns Ext.CompositeElementLite/Ext.CompositeElement
     */
    static select(selector?: any, Ext$unique?: boolean, root?: any): any;

    /**
     * [Method] Parses a number or string representing margin sizes into an object
     * @param box Number/String/Object The encoded margins, or an object with top, right, bottom, and left properties
     * @param units String The type of units to add
     * @returns String An string with unitized (px if units is not specified) metrics for top, right, bottom and left
     */
    static unitizeBox(box?: any, units?: string): string;
  }

  declare export type core$IDomHelper = {} & undefined.dom$IHelper;

  declare export class core$DomHelper {
    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Property] (Boolean)
     */
    static useDom: boolean;

    /**
     * [Method] Creates new DOM element s and appends them to el
     * @param el String/HTMLElement/Ext.Element The context element
     * @param o Object/String The DOM object spec (and children) or raw HTML blob
     * @param returnElement Boolean true to return a Ext.Element
     * @returns HTMLElement/Ext.Element The new node
     */
    static append(el?: any, o?: any, returnElement?: boolean): any;

    /**
     * [Method] Applies a style specification to an element
     * @param el String/HTMLElement The element to apply styles to
     * @param styles String/Object/Function A style specification string e.g. 'width:100px', or object in the form {width:'100px'}, or a function which returns such a specification.
     */
    static applyStyles(el?: any, styles?: any): void;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Creates new DOM element s without inserting them to the document
     * @param o Object/String The DOM object spec (and children) or raw HTML blob
     * @returns HTMLElement The new uninserted node
     */
    static createDom(o?: any): HTMLElement;

    /**
     * [Method] Alias for markup
     * @param spec Object The DOM object spec (and children)
     * @returns String
     */
    static createHtml(spec?: any): string;

    /**
     * [Method] Creates a new Ext Template from the DOM object spec
     * @param o Object The DOM object spec (and children)
     * @returns Ext.Template The new template
     */
    static createTemplate(o?: any): Ext$Ext$ITemplate;

    /**
     * [Method] Converts the styles from the given object to text
     * @param styles Object The object describing the styles.
     * @param buffer String[] The output buffer.
     * @returns String/String[] If buffer is passed, it is returned. Otherwise the style string is returned.
     */
    static generateStyles(styles?: any, buffer?: string[]): any;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(name?: string): any;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Creates new DOM element s and inserts them after el
     * @param el String/HTMLElement/Ext.Element The context element
     * @param o Object The DOM object spec (and children)
     * @param returnElement Boolean true to return a Ext.Element
     * @returns HTMLElement/Ext.Element The new node
     */
    static insertAfter(el?: any, o?: any, returnElement?: boolean): any;

    /**
     * [Method] Creates new DOM element s and inserts them before el
     * @param el String/HTMLElement/Ext.Element The context element
     * @param o Object/String The DOM object spec (and children) or raw HTML blob
     * @param returnElement Boolean true to return a Ext.Element
     * @returns HTMLElement/Ext.Element The new node
     */
    static insertBefore(el?: any, o?: any, returnElement?: boolean): any;

    /**
     * [Method] Creates new DOM element s and inserts them as the first child of el
     * @param el String/HTMLElement/Ext.Element The context element
     * @param o Object/String The DOM object spec (and children) or raw HTML blob
     * @param returnElement Boolean true to return a Ext.Element
     * @returns HTMLElement/Ext.Element The new node
     */
    static insertFirst(el?: any, o?: any, returnElement?: boolean): any;

    /**
     * [Method] Inserts an HTML fragment into the DOM
     * @param where String Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd. For example take the following HTML: &lt;div&gt;Contents&lt;/div&gt; Using different where values inserts element to the following places:  beforeBegin: &lt;HERE&gt;&lt;div&gt;Contents&lt;/div&gt; afterBegin: &lt;div&gt;&lt;HERE&gt;Contents&lt;/div&gt; beforeEnd: &lt;div&gt;Contents&lt;HERE&gt;&lt;/div&gt; afterEnd: &lt;div&gt;Contents&lt;/div&gt;&lt;HERE&gt;
     * @param el HTMLElement/TextNode The context element
     * @param html String The HTML fragment
     * @returns HTMLElement The new node
     */
    static insertHtml(where?: string, el?: any, html?: string): HTMLElement;

    /**
     * [Method] Returns the markup for the passed Element s config
     * @param spec Object The DOM object spec (and children)
     * @returns String
     */
    static markup(spec?: any): string;

    /**
     * [Method] Creates new DOM element s and overwrites the contents of el with them
     * @param el String/HTMLElement/Ext.Element The context element
     * @param o Object/String The DOM object spec (and children) or raw HTML blob
     * @param returnElement Boolean true to return an Ext.Element
     * @returns HTMLElement/Ext.Element The new node
     */
    static overwrite(el?: any, o?: any, returnElement?: boolean): any;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;
  }

  declare export type Ext$ILayer = {
    /**
     * [Config Option] (String)
     */
    cls?: string,

    /**
     * [Config Option] (Boolean)
     */
    constrain?: boolean,

    /**
     * [Config Option] (Object)
     */
    dh?: any,

    /**
     * [Config Option] (String)
     */
    hideMode?: string,

    /**
     * [Config Option] (String/Boolean)
     */
    shadow?: any,

    /**
     * [Config Option] (Number)
     */
    shadowOffset?: number,

    /**
     * [Config Option] (Boolean)
     */
    shim?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    useDisplay?: boolean,

    /**
     * [Config Option] (String)
     */
    visibilityCls?: string,

    /**
     * [Config Option] (Number)
     */
    zindex?: number,

    /**
     * [Method] Removes this element s dom reference
     */
    remove?: () => void,

    /**
     * [Method] overridden Element method
     * @param x Object
     * @param y Object
     * @param width Object
     * @param height Object
     * @param animate Object
     * @param duration Object
     * @param callback Object
     * @param easing Object
     * @returns Ext.dom.Element this
     */
    setBounds?: (
      x?: any,
      y?: any,
      width?: any,
      height?: any,
      animate?: any,
      duration?: any,
      Ext$callback?: any,
      easing?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] overridden Element method
     * @param h Object
     * @param animate Object
     * @param duration Object
     * @param callback Object
     * @param easing Object
     * @returns Ext.dom.Element this
     */
    setHeight?: (
      h?: any,
      animate?: any,
      duration?: any,
      Ext$callback?: any,
      easing?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] overridden Element method
     * @param left Object
     * @returns Ext.dom.Element this
     */
    setLeft?: (left?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s left and top positions directly using CSS style Defined in override Ext dom Element_position
     * @param left Object
     * @param top Object
     * @returns Ext.dom.Element this
     */
    setLeftTop?: (left?: any, top?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] overridden Element method
     * @param w Object
     * @param h Object
     * @param animate Object
     * @param duration Object
     * @param callback Object
     * @param easing Object
     * @returns Ext.dom.Element this
     */
    setSize?: (
      w?: any,
      h?: any,
      animate?: any,
      duration?: any,
      Ext$callback?: any,
      easing?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s top position directly using CSS style instead of setY
     * @param top Object
     * @returns Ext.dom.Element this
     */
    setTop?: (top?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] overridden Element method
     * @param visible Object
     * @param animate Object
     * @param duration Object
     * @param callback Object
     * @param easing Object
     * @returns Ext.dom.Element this
     */
    setVisible?: (
      visible?: any,
      animate?: any,
      duration?: any,
      Ext$callback?: any,
      easing?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] overridden Element method
     * @param w Object
     * @param animate Object
     * @param duration Object
     * @param callback Object
     * @param easing Object
     * @returns Ext.dom.Element this
     */
    setWidth?: (
      w?: any,
      animate?: any,
      duration?: any,
      Ext$callback?: any,
      easing?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the z index of this layer and adjusts any shadow and shim z indexes
     * @param zindex Number The new z-index to set
     * @returns Ext.Layer The Layer
     */
    setZIndex?: (zindex?: number) => Ext$Ext$ILayer,

    /**
     * [Config Option] (String)
     */
    cls?: string,

    /**
     * [Config Option] (Boolean)
     */
    constrain?: boolean,

    /**
     * [Config Option] (Object)
     */
    dh?: any,

    /**
     * [Config Option] (String)
     */
    hideMode?: string,

    /**
     * [Config Option] (String/Boolean)
     */
    shadow?: any,

    /**
     * [Config Option] (Number)
     */
    shadowOffset?: number,

    /**
     * [Config Option] (Boolean)
     */
    shim?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    useDisplay?: boolean,

    /**
     * [Config Option] (String)
     */
    visibilityCls?: string,

    /**
     * [Config Option] (Number)
     */
    zindex?: number,

    /**
     * [Method] Removes this element s dom reference
     */
    remove?: () => void,

    /**
     * [Method] overridden Element method
     * @param x Object
     * @param y Object
     * @param width Object
     * @param height Object
     * @param animate Object
     * @param duration Object
     * @param callback Object
     * @param easing Object
     * @returns Ext.dom.Element this
     */
    setBounds?: (
      x?: any,
      y?: any,
      width?: any,
      height?: any,
      animate?: any,
      duration?: any,
      Ext$callback?: any,
      easing?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] overridden Element method
     * @param h Object
     * @param animate Object
     * @param duration Object
     * @param callback Object
     * @param easing Object
     * @returns Ext.dom.Element this
     */
    setHeight?: (
      h?: any,
      animate?: any,
      duration?: any,
      Ext$callback?: any,
      easing?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] overridden Element method
     * @param left Object
     * @returns Ext.dom.Element this
     */
    setLeft?: (left?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s left and top positions directly using CSS style Defined in override Ext dom Element_position
     * @param left Object
     * @param top Object
     * @returns Ext.dom.Element this
     */
    setLeftTop?: (left?: any, top?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] overridden Element method
     * @param w Object
     * @param h Object
     * @param animate Object
     * @param duration Object
     * @param callback Object
     * @param easing Object
     * @returns Ext.dom.Element this
     */
    setSize?: (
      w?: any,
      h?: any,
      animate?: any,
      duration?: any,
      Ext$callback?: any,
      easing?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the element s top position directly using CSS style instead of setY
     * @param top Object
     * @returns Ext.dom.Element this
     */
    setTop?: (top?: any) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] overridden Element method
     * @param visible Object
     * @param animate Object
     * @param duration Object
     * @param callback Object
     * @param easing Object
     * @returns Ext.dom.Element this
     */
    setVisible?: (
      visible?: any,
      animate?: any,
      duration?: any,
      Ext$callback?: any,
      easing?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] overridden Element method
     * @param w Object
     * @param animate Object
     * @param duration Object
     * @param callback Object
     * @param easing Object
     * @returns Ext.dom.Element this
     */
    setWidth?: (
      w?: any,
      animate?: any,
      duration?: any,
      Ext$callback?: any,
      easing?: any
    ) => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Sets the z index of this layer and adjusts any shadow and shim z indexes
     * @param zindex Number The new z-index to set
     * @returns Ext.Layer The Layer
     */
    setZIndex?: (zindex?: number) => Ext$Ext$ILayer
  } & Ext$Ext$IElement;

  declare export interface Ext$IDomQuery {}

  declare export class Ext$DomQuery {
    /**
     * [Property] (Object)
     */
    static matchers: any;

    /**
     * [Property] (Object)
     */
    static operators: any;

    /**
     * [Property] (Object)
     */
    static pseudos: any;

    /**
     * [Method] Compiles a selector xpath query into a reusable function
     * @param selector String The selector/xpath query
     * @param type String Either "select" or "simple" for a simple selector match
     * @returns Function
     */
    static compile(selector?: string, Ext$type?: string): any;

    /**
     * [Method] Filters an array of elements to only include matches of a simple selector e g
     * @param el HTMLElement[] An array of elements to filter
     * @param selector String The simple selector to test
     * @param nonMatches Boolean If true, it returns the elements that DON'T match the selector instead of the ones that match
     * @returns HTMLElement[] An Array of DOM elements which match the selector. If there are no matches, and empty Array is returned.
     */
    static filter(
      el?: HTMLElement[],
      selector?: string,
      nonMatches?: boolean
    ): HTMLElement[];

    /**
     * [Method] Returns true if the passed element s match the passed simple selector e g
     * @param el String/HTMLElement/HTMLElement[] An element id, element or array of elements
     * @param selector String The simple selector to test
     * @returns Boolean
     */
    static is(el?: any, selector?: string): boolean;

    /**
     * [Method] Selects an array of DOM nodes using JavaScript only implementation
     * @param selector String The selector/xpath query (can be a comma separated list of selectors)
     * @param root HTMLElement/String The start of the query.
     * @returns HTMLElement[] An Array of DOM elements which match the selector. If there are no matches, and empty Array is returned.
     */
    static jsSelect(selector?: string, root?: any): HTMLElement[];

    /**
     * [Method] Selects an array of DOM nodes by CSS XPath selector
     * @param path String The selector/xpath query
     * @param root HTMLElement The start of the query.
     * @param type String Either "select" or "simple" for a simple selector match (only valid when used when the call is deferred to the jsSelect method)
     * @param single Boolean Pass true to select only the first matching node using document.querySelector (where available)
     * @returns HTMLElement[] An array of DOM elements (not a NodeList as returned by querySelectorAll).
     */
    static select(
      path?: string,
      root?: HTMLElement,
      Ext$type?: string,
      single?: boolean
    ): HTMLElement[];

    /**
     * [Method] Selects a single element
     * @param selector String The selector/xpath query
     * @param root HTMLElement The start of the query.
     * @returns HTMLElement The DOM element which matched the selector.
     */
    static selectNode(selector?: string, root?: HTMLElement): HTMLElement;

    /**
     * [Method] Selects the value of a node parsing integers and floats
     * @param selector String The selector/xpath query
     * @param root HTMLElement The start of the query.
     * @param defaultValue Number When specified, this is return as empty value.
     * @returns Number
     */
    static selectNumber(
      selector?: string,
      root?: HTMLElement,
      defaultValue?: number
    ): number;

    /**
     * [Method] Selects the value of a node optionally replacing null with the defaultValue
     * @param selector String The selector/xpath query
     * @param root HTMLElement The start of the query.
     * @param defaultValue String When specified, this is return as empty value.
     * @returns String
     */
    static selectValue(
      selector?: string,
      root?: HTMLElement,
      defaultValue?: string
    ): string;
  }

  declare export type Ext$IDomHelper = {} & undefined.dom$IHelper;

  declare export class Ext$DomHelper {
    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Property] (Boolean)
     */
    static useDom: boolean;

    /**
     * [Method] Creates new DOM element s and appends them to el
     * @param el String/HTMLElement/Ext.Element The context element
     * @param o Object/String The DOM object spec (and children) or raw HTML blob
     * @param returnElement Boolean true to return a Ext.Element
     * @returns HTMLElement/Ext.Element The new node
     */
    static append(el?: any, o?: any, returnElement?: boolean): any;

    /**
     * [Method] Applies a style specification to an element
     * @param el String/HTMLElement The element to apply styles to
     * @param styles String/Object/Function A style specification string e.g. 'width:100px', or object in the form {width:'100px'}, or a function which returns such a specification.
     */
    static applyStyles(el?: any, styles?: any): void;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Creates new DOM element s without inserting them to the document
     * @param o Object/String The DOM object spec (and children) or raw HTML blob
     * @returns HTMLElement The new uninserted node
     */
    static createDom(o?: any): HTMLElement;

    /**
     * [Method] Alias for markup
     * @param spec Object The DOM object spec (and children)
     * @returns String
     */
    static createHtml(spec?: any): string;

    /**
     * [Method] Creates a new Ext Template from the DOM object spec
     * @param o Object The DOM object spec (and children)
     * @returns Ext.Template The new template
     */
    static createTemplate(o?: any): Ext$Ext$ITemplate;

    /**
     * [Method] Converts the styles from the given object to text
     * @param styles Object The object describing the styles.
     * @param buffer String[] The output buffer.
     * @returns String/String[] If buffer is passed, it is returned. Otherwise the style string is returned.
     */
    static generateStyles(styles?: any, buffer?: string[]): any;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(name?: string): any;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Creates new DOM element s and inserts them after el
     * @param el String/HTMLElement/Ext.Element The context element
     * @param o Object The DOM object spec (and children)
     * @param returnElement Boolean true to return a Ext.Element
     * @returns HTMLElement/Ext.Element The new node
     */
    static insertAfter(el?: any, o?: any, returnElement?: boolean): any;

    /**
     * [Method] Creates new DOM element s and inserts them before el
     * @param el String/HTMLElement/Ext.Element The context element
     * @param o Object/String The DOM object spec (and children) or raw HTML blob
     * @param returnElement Boolean true to return a Ext.Element
     * @returns HTMLElement/Ext.Element The new node
     */
    static insertBefore(el?: any, o?: any, returnElement?: boolean): any;

    /**
     * [Method] Creates new DOM element s and inserts them as the first child of el
     * @param el String/HTMLElement/Ext.Element The context element
     * @param o Object/String The DOM object spec (and children) or raw HTML blob
     * @param returnElement Boolean true to return a Ext.Element
     * @returns HTMLElement/Ext.Element The new node
     */
    static insertFirst(el?: any, o?: any, returnElement?: boolean): any;

    /**
     * [Method] Inserts an HTML fragment into the DOM
     * @param where String Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd. For example take the following HTML: &lt;div&gt;Contents&lt;/div&gt; Using different where values inserts element to the following places:  beforeBegin: &lt;HERE&gt;&lt;div&gt;Contents&lt;/div&gt; afterBegin: &lt;div&gt;&lt;HERE&gt;Contents&lt;/div&gt; beforeEnd: &lt;div&gt;Contents&lt;HERE&gt;&lt;/div&gt; afterEnd: &lt;div&gt;Contents&lt;/div&gt;&lt;HERE&gt;
     * @param el HTMLElement/TextNode The context element
     * @param html String The HTML fragment
     * @returns HTMLElement The new node
     */
    static insertHtml(where?: string, el?: any, html?: string): HTMLElement;

    /**
     * [Method] Returns the markup for the passed Element s config
     * @param spec Object The DOM object spec (and children)
     * @returns String
     */
    static markup(spec?: any): string;

    /**
     * [Method] Creates new DOM element s and overwrites the contents of el with them
     * @param el String/HTMLElement/Ext.Element The context element
     * @param o Object/String The DOM object spec (and children) or raw HTML blob
     * @param returnElement Boolean true to return an Ext.Element
     * @returns HTMLElement/Ext.Element The new node
     */
    static overwrite(el?: any, o?: any, returnElement?: boolean): any;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;
  }

  declare export type draw$IText = {
    /**
     * [Config Option] (Boolean)
     */
    autoSize?: boolean,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Number)
     */
    degrees?: number,

    /**
     * [Config Option] (String)
     */
    styleSelector?: string,

    /**
     * [Config Option] (String)
     */
    text?: string,

    /**
     * [Config Option] (Boolean)
     */
    viewBox?: boolean,

    /**
     * [Method] The initComponent template method is an important initialization step for a Component
     */
    initComponent?: () => void,

    /**
     * [Method] Sets the clockwise rotation angle relative to the horizontal axis
     * @param degrees Number The clockwise angle (in degrees) from the horizontal axis by which the text should be rotated.
     */
    setAngle?: (degrees?: number) => void,

    /**
     * [Method] Updates this item s text
     * @param t String The text to display (html not accepted).
     */
    setText?: (t?: string) => void,

    /**
     * [Config Option] (Boolean)
     */
    allowBlank?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    allowOnlyWhitespace?: boolean,

    /**
     * [Config Option] (String)
     */
    blankText?: string,

    /**
     * [Config Option] (Boolean)
     */
    disableKeyFilter?: boolean,

    /**
     * [Config Option] (String)
     */
    emptyCls?: string,

    /**
     * [Config Option] (String)
     */
    emptyText?: string,

    /**
     * [Config Option] (Boolean)
     */
    enableKeyEvents?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    enforceMaxLength?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    grow?: boolean,

    /**
     * [Config Option] (String)
     */
    growAppend?: string,

    /**
     * [Config Option] (Number)
     */
    growMax?: number,

    /**
     * [Config Option] (Number)
     */
    growMin?: number,

    /**
     * [Config Option] (RegExp)
     */
    maskRe?: RegExp,

    /**
     * [Config Option] (Number)
     */
    maxLength?: number,

    /**
     * [Config Option] (String)
     */
    maxLengthText?: string,

    /**
     * [Config Option] (Number)
     */
    minLength?: number,

    /**
     * [Config Option] (String)
     */
    minLengthText?: string,

    /**
     * [Config Option] (RegExp)
     */
    regex?: RegExp,

    /**
     * [Config Option] (String)
     */
    regexText?: string,

    /**
     * [Config Option] (String)
     */
    requiredCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    selectOnFocus?: boolean,

    /**
     * [Config Option] (Number)
     */
    size?: number,

    /**
     * [Config Option] (RegExp)
     */
    stripCharsRe?: RegExp,

    /**
     * [Config Option] (Boolean)
     */
    validateBlank?: boolean,

    /**
     * [Config Option] (Function)
     */
    validator?: any,

    /**
     * [Config Option] (String)
     */
    vtype?: string,

    /**
     * [Config Option] (String)
     */
    vtypeText?: string,

    /**
     * [Method] Called by the layout system after the Component has been laid out
     */
    afterComponentLayout?: () => void,

    /**
     * [Method] Allows addition of behavior after rendering is complete
     */
    afterRender?: () => void,

    /**
     * [Method] Applies the state to the object
     * @param state Object
     */
    applyState?: (Ext$state?: any) => void,

    /**
     * [Method] Automatically grows the field to accomodate the width of the text up to the maximum field width allowed
     */
    autoSize?: () => void,

    /**
     * [Method] private
     */
    beforeFocus?: () => void,

    /**
     * [Method] Validates a value according to the field s validation rules and returns an array of errors for any failing validations
     * @param value Object The value to validate. The processed raw value will be used if nothing is passed.
     * @returns String[] Array of any validation errors
     */
    getErrors?: (Ext$value?: any) => string[],

    /**
     * [Method] Returns the raw String value of the field without performing any normalization conversion or validation
     * @returns String The raw String value of the field
     */
    getRawValue?: () => string,

    /**
     * [Method] The supplied default state gathering method for the AbstractComponent class
     * @returns Object
     */
    getState?: () => any,

    /**
     * [Method] Creates and returns the data object to be used when rendering the fieldSubTpl
     * @returns Object The template data
     */
    getSubTplData?: () => any,

    /**
     * [Method] private
     */
    initComponent?: () => void,

    /**
     * [Method] private
     */
    initEvents?: () => void,

    /**
     * [Method] Allows addition of behavior to the destroy operation
     */
    onDestroy?: () => void,

    /**
     * [Method] private
     */
    onDisable?: () => void,

    /**
     * [Method] private
     */
    onEnable?: () => void,

    /**
     * [Method] private
     */
    postBlur?: () => void,

    /**
     * [Method] Performs any necessary manipulation of a raw String value to prepare it for conversion and or validation
     * @param value String The unprocessed string value
     * @returns String The processed string value
     */
    processRawValue?: (Ext$value?: string) => string,

    /**
     * [Method] Resets the current field value to the originally loaded value and clears any validation messages
     */
    reset?: () => void,

    /**
     * [Method] Selects text in this field
     * @param start Number The index where the selection should start
     * @param end Number The index where the selection should end (defaults to the text length)
     */
    selectText?: (start?: number, end?: number) => void,

    /**
     * [Method] Sets a data value into the field and runs the change detection and validation
     * @param value Object The value to set
     * @returns any this
     */
    setValue?: (Ext$value?: any) => any,

    /**
     * [Config Option] (Boolean)
     */
    allowBlank?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    allowOnlyWhitespace?: boolean,

    /**
     * [Config Option] (String)
     */
    blankText?: string,

    /**
     * [Config Option] (Boolean)
     */
    disableKeyFilter?: boolean,

    /**
     * [Config Option] (String)
     */
    emptyCls?: string,

    /**
     * [Config Option] (String)
     */
    emptyText?: string,

    /**
     * [Config Option] (Boolean)
     */
    enableKeyEvents?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    enforceMaxLength?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    grow?: boolean,

    /**
     * [Config Option] (String)
     */
    growAppend?: string,

    /**
     * [Config Option] (Number)
     */
    growMax?: number,

    /**
     * [Config Option] (Number)
     */
    growMin?: number,

    /**
     * [Config Option] (RegExp)
     */
    maskRe?: RegExp,

    /**
     * [Config Option] (Number)
     */
    maxLength?: number,

    /**
     * [Config Option] (String)
     */
    maxLengthText?: string,

    /**
     * [Config Option] (Number)
     */
    minLength?: number,

    /**
     * [Config Option] (String)
     */
    minLengthText?: string,

    /**
     * [Config Option] (RegExp)
     */
    regex?: RegExp,

    /**
     * [Config Option] (String)
     */
    regexText?: string,

    /**
     * [Config Option] (String)
     */
    requiredCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    selectOnFocus?: boolean,

    /**
     * [Config Option] (Number)
     */
    size?: number,

    /**
     * [Config Option] (RegExp)
     */
    stripCharsRe?: RegExp,

    /**
     * [Config Option] (Boolean)
     */
    validateBlank?: boolean,

    /**
     * [Config Option] (Function)
     */
    validator?: any,

    /**
     * [Config Option] (String)
     */
    vtype?: string,

    /**
     * [Config Option] (String)
     */
    vtypeText?: string,

    /**
     * [Method] Called by the layout system after the Component has been laid out
     */
    afterComponentLayout?: () => void,

    /**
     * [Method] Allows addition of behavior after rendering is complete
     */
    afterRender?: () => void,

    /**
     * [Method] Applies the state to the object
     * @param state Object
     */
    applyState?: (Ext$state?: any) => void,

    /**
     * [Method] Automatically grows the field to accomodate the width of the text up to the maximum field width allowed
     */
    autoSize?: () => void,

    /**
     * [Method] private
     */
    beforeFocus?: () => void,

    /**
     * [Method] Validates a value according to the field s validation rules and returns an array of errors for any failing validations
     * @param value Object The value to validate. The processed raw value will be used if nothing is passed.
     * @returns String[] Array of any validation errors
     */
    getErrors?: (Ext$value?: any) => string[],

    /**
     * [Method] Returns the raw String value of the field without performing any normalization conversion or validation
     * @returns String The raw String value of the field
     */
    getRawValue?: () => string,

    /**
     * [Method] The supplied default state gathering method for the AbstractComponent class
     * @returns Object
     */
    getState?: () => any,

    /**
     * [Method] Creates and returns the data object to be used when rendering the fieldSubTpl
     * @returns Object The template data
     */
    getSubTplData?: () => any,

    /**
     * [Method] private
     */
    initComponent?: () => void,

    /**
     * [Method] private
     */
    initEvents?: () => void,

    /**
     * [Method] Allows addition of behavior to the destroy operation
     */
    onDestroy?: () => void,

    /**
     * [Method] private
     */
    onDisable?: () => void,

    /**
     * [Method] private
     */
    onEnable?: () => void,

    /**
     * [Method] private
     */
    postBlur?: () => void,

    /**
     * [Method] Performs any necessary manipulation of a raw String value to prepare it for conversion and or validation
     * @param value String The unprocessed string value
     * @returns String The processed string value
     */
    processRawValue?: (Ext$value?: string) => string,

    /**
     * [Method] Resets the current field value to the originally loaded value and clears any validation messages
     */
    reset?: () => void,

    /**
     * [Method] Selects text in this field
     * @param start Number The index where the selection should start
     * @param end Number The index where the selection should end (defaults to the text length)
     */
    selectText?: (start?: number, end?: number) => void,

    /**
     * [Method] Sets a data value into the field and runs the change detection and validation
     * @param value Object The value to set
     * @returns any this
     */
    setValue?: (Ext$value?: any) => any,

    /**
     * [Method] Called before any calculation cycles to reset DOM values and prepare for calculation
     * @param ownerContext Object
     */
    beginLayoutCycle?: (ownerContext?: any) => void
  } & undefined.Ext$IComponent;

  declare export type Ext$IEditor = {
    /**
     * [Config Option] (String)
     */
    alignment?: string,

    /**
     * [Config Option] (Boolean)
     */
    allowBlur?: boolean,

    /**
     * [Config Option] (Boolean/Object)
     */
    autoSize?: any,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    cancelOnEsc?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    completeOnEnter?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    constrain?: boolean,

    /**
     * [Config Option] (Ext.form.field.Field)
     */
    field?: Ext$Ext$form.field.field$IField,

    /**
     * [Config Option] (Boolean)
     */
    focusOnToFront?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    hidden?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    hideEl?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    ignoreNoChange?: boolean,

    /**
     * [Config Option] (Ext.enums.Layout/Object)
     */
    Ext$layout?: any,

    /**
     * [Config Option] (Number[])
     */
    offsets?: number[],

    /**
     * [Config Option] (String/HTMLElement/Ext.Element)
     */
    parentEl?: any,

    /**
     * [Config Option] (Boolean)
     */
    revertInvalid?: boolean,

    /**
     * [Config Option] (Boolean/String)
     */
    shadow?: any,

    /**
     * [Config Option] (Boolean)
     */
    swallowKeys?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    updateEl?: boolean,

    /**
     * [Config Option] (Object)
     */
    Ext$value?: any,

    /**
     * [Method] private
     * @param ct Object
     * @param position Object
     */
    afterRender?: (ct?: any, position?: any) => void,

    /**
     * [Method] Cancels the editing process and hides the editor without persisting any changes
     * @param remainVisible Boolean Override the default behavior and keep the editor visible after cancel
     */
    cancelEdit?: (remainVisible?: boolean) => void,

    /**
     * [Method] Ends the editing process persists the changed value to the underlying field and hides the editor
     * @param remainVisible Boolean Override the default behavior and keep the editor visible after edit
     */
    completeEdit?: (remainVisible?: boolean) => void,

    /**
     * [Method] Gets the data value of the editor
     * @returns Object The data value
     */
    getValue?: () => any,

    /**
     * [Method] private
     */
    onHide?: () => void,

    /**
     * [Method] private
     */
    onShow?: () => void,

    /**
     * [Method] Realigns the editor to the bound field based on the current alignment config value
     * @param autoSize Boolean True to size the field to the dimensions of the bound element.
     */
    realign?: (autoSize?: boolean) => void,

    /**
     * [Method] Sets the data value of the editor
     * @param value Object Any valid value supported by the underlying field
     */
    setValue?: (Ext$value?: any) => void,

    /**
     * [Method] Starts the editing process and shows the editor
     * @param el String/HTMLElement/Ext.Element The element to edit
     * @param value String A value to initialize the editor with. If a value is not provided, it defaults to the innerHTML of el.
     */
    startEdit?: (el?: any, Ext$value?: string) => void,

    /**
     * [Method] Called to perform the calculations for this layout
     * @param ownerContext Object
     */
    calculate?: (ownerContext?: any) => void,

    /**
     * [Method] Returns an object describing how this layout manages the size of the given component
     * @param item Object
     * @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item.
     */
    getItemSizePolicy?: (item?: any) => Ext$Ext$layout.layout$ISizePolicy
  } & undefined.Ext$IContainer;

  declare export type Ext$IElementLoader = {
    /**
     * [Config Option] (Object)
     */
    ajaxOptions?: any,

    /**
     * [Config Option] (Boolean/Object)
     */
    autoLoad?: any,

    /**
     * [Config Option] (Object)
     */
    baseParams?: any,

    /**
     * [Config Option] (Function)
     */
    Ext$callback?: any,

    /**
     * [Config Option] (Function)
     */
    failure?: any,

    /**
     * [Config Option] (Boolean/String)
     */
    loadMask?: any,

    /**
     * [Config Option] (Object)
     */
    params?: any,

    /**
     * [Config Option] (Function)
     */
    renderer?: any,

    /**
     * [Config Option] (Object)
     */
    scope?: any,

    /**
     * [Config Option] (Boolean)
     */
    scripts?: boolean,

    /**
     * [Config Option] (Function)
     */
    success?: any,

    /**
     * [Config Option] (HTMLElement/Ext.Element/String)
     */
    target?: any,

    /**
     * [Config Option] (String)
     */
    url?: string,

    /**
     * [Property] (Boolean)
     */
    isLoader?: boolean,

    /**
     * [Method] Aborts the active load request
     */
    abort?: () => void,

    /**
     * [Method] Adds the specified events to the list of events which this Observable may fire
     * @param eventNames Object/String... Either an object with event names as properties with a value of true. For example: this.addEvents({  storeloaded: true,  storecleared: true });  Or any number of event names as separate parameters. For example: this.addEvents('storeloaded', 'storecleared');
     */
    addEvents?: (eventNames?: any) => void,

    /**
     * [Method] Appends an event handler to this object
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    addListener?: (
      eventName?: any,
      fn?: any,
      scope?: any,
      options?: any
    ) => any,

    /**
     * [Method] Adds listeners to any Observable object or Ext Element which are automatically removed when this Component is destr
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    addManagedListener?: (
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ) => any,

    /**
     * [Method] Removes all listeners for this object including the managed listeners
     */
    clearListeners?: () => void,

    /**
     * [Method] Removes all managed listeners for this object
     */
    clearManagedListeners?: () => void,

    /**
     * [Method] Destroys the loader
     */
    Ext$destroy?: () => void,

    /**
     * [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
     * @param eventNames String/String[] The event name to bubble, or an Array of event names.
     */
    enableBubble?: (eventNames?: any) => void,

    /**
     * [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
     * @param eventName String The name of the event to fire.
     * @param args Object... Variable number of parameters are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    fireEvent?: (eventName: string, ...args: any[]) => boolean,

    /**
     * [Method] Fires the specified event with the passed parameter list
     * @param eventName String The name of the event to fire.
     * @param args Object[] An array of parameters which are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    fireEventArgs?: (eventName?: string, args?: any[]) => boolean,

    /**
     * [Method] Returns the target of this loader
     * @returns Ext.Component The target or null if none exists.
     */
    getTarget?: () => Ext$Ext$IComponent,

    /**
     * [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles
     * @param eventName String The name of the event to check for
     * @returns Boolean true if the event is being listened for or bubbles, else false
     */
    hasListener?: (eventName?: string) => boolean,

    /**
     * [Method] Checks whether the loader is automatically refreshing
     * @returns Boolean True if the loader is automatically refreshing
     */
    isAutoRefreshing?: () => boolean,

    /**
     * [Method] Loads new data from the server
     * @param options Object The options for the request. They can be any configuration option that can be specified for the class, with the exception of the target option. Note that any options passed to the method will override any class defaults.
     */
    load?: (options?: any) => void,

    /**
     * [Method] Shorthand for addManagedListener
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    mon?: (
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ) => any,

    /**
     * [Method] Shorthand for removeManagedListener
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    mun?: (item?: any, ename?: any, fn?: any, scope?: any) => void,

    /**
     * [Method] Shorthand for addListener
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    Ext$on?: (eventName?: any, fn?: any, scope?: any, options?: any) => any,

    /**
     * [Method] Relays selected events from the specified Observable as if the events were fired by this
     * @param origin Object The Observable whose events this object is to relay.
     * @param events String[] Array of event names to relay.
     * @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
     * @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or this.store.relayers.destroy();
     */
    relayEvents?: (origin?: any, events?: string[], prefix?: string) => any,

    /**
     * [Method] Removes an event handler
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    removeListener?: (eventName?: string, fn?: any, scope?: any) => void,

    /**
     * [Method] Removes listeners that were added by the mon method
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    removeManagedListener?: (
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Resumes firing of the named event s
     * @param eventName String... Multiple event names to resume.
     */
    resumeEvent?: (...eventName: any[]) => void,

    /**
     * [Method] Resumes firing events see suspendEvents
     */
    resumeEvents?: () => void,

    /**
     * [Method] Sets an Ext Element as the target of this loader
     * @param target String/HTMLElement/Ext.Element The element or its ID.
     */
    setTarget?: (target?: any) => void,

    /**
     * [Method] Automatically refreshes the content over a specified period
     * @param interval Number The interval to refresh in ms.
     * @param options Object The options to pass to the load method. See load
     */
    startAutoRefresh?: (interval?: number, options?: any) => void,

    /**
     * [Method] Clears any auto refresh
     */
    stopAutoRefresh?: () => void,

    /**
     * [Method] Suspends firing of the named event s
     * @param eventName String... Multiple event names to suspend.
     */
    suspendEvent?: (...eventName: any[]) => void,

    /**
     * [Method] Suspends the firing of all events
     * @param queueSuspended Boolean Pass as true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events.
     */
    suspendEvents?: (queueSuspended?: boolean) => void,

    /**
     * [Method] Shorthand for removeListener
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    Ext$un?: (eventName?: string, fn?: any, scope?: any) => void
  } & Ext$Ext$IBase &
    undefined.util$IObservable;

  declare export interface enums$IWidget {
    /**
     * [Property] (String)
     */
    actioncolumn?: string;

    /**
     * [Property] (String)
     */
    booleancolumn?: string;

    /**
     * [Property] (String)
     */
    boundlist?: string;

    /**
     * [Property] (String)
     */
    box?: string;

    /**
     * [Property] (String)
     */
    Ext$button?: string;

    /**
     * [Property] (String)
     */
    buttongroup?: string;

    /**
     * [Property] (String)
     */
    Ext$chart?: string;

    /**
     * [Property] (String)
     */
    checkbox?: string;

    /**
     * [Property] (String)
     */
    checkboxfield?: string;

    /**
     * [Property] (String)
     */
    checkboxgroup?: string;

    /**
     * [Property] (String)
     */
    checkcolumn?: string;

    /**
     * [Property] (String)
     */
    colormenu?: string;

    /**
     * [Property] (String)
     */
    colorpicker?: string;

    /**
     * [Property] (String)
     */
    combo?: string;

    /**
     * [Property] (String)
     */
    combobox?: string;

    /**
     * [Property] (String)
     */
    component?: string;

    /**
     * [Property] (String)
     */
    Ext$container?: string;

    /**
     * [Property] (String)
     */
    cycle?: string;

    /**
     * [Property] (String)
     */
    dataview?: string;

    /**
     * [Property] (String)
     */
    datecolumn?: string;

    /**
     * [Property] (String)
     */
    datefield?: string;

    /**
     * [Property] (String)
     */
    datemenu?: string;

    /**
     * [Property] (String)
     */
    datepicker?: string;

    /**
     * [Property] (String)
     */
    displayfield?: string;

    /**
     * [Property] (String)
     */
    Ext$draw?: string;

    /**
     * [Property] (String)
     */
    editor?: string;

    /**
     * [Property] (String)
     */
    field?: string;

    /**
     * [Property] (String)
     */
    fieldcontainer?: string;

    /**
     * [Property] (String)
     */
    fieldset?: string;

    /**
     * [Property] (String)
     */
    filebutton?: string;

    /**
     * [Property] (String)
     */
    filefield?: string;

    /**
     * [Property] (String)
     */
    fileuploadfield?: string;

    /**
     * [Property] (String)
     */
    Ext$flash?: string;

    /**
     * [Property] (String)
     */
    Ext$form?: string;

    /**
     * [Property] (String)
     */
    Ext$grid?: string;

    /**
     * [Property] (String)
     */
    gridcolumn?: string;

    /**
     * [Property] (String)
     */
    gridpanel?: string;

    /**
     * [Property] (String)
     */
    gridview?: string;

    /**
     * [Property] (String)
     */
    header?: string;

    /**
     * [Property] (String)
     */
    headercontainer?: string;

    /**
     * [Property] (String)
     */
    hidden?: string;

    /**
     * [Property] (String)
     */
    hiddenfield?: string;

    /**
     * [Property] (String)
     */
    htmleditor?: string;

    /**
     * [Property] (String)
     */
    image?: string;

    /**
     * [Property] (String)
     */
    imagecomponent?: string;

    /**
     * [Property] (String)
     */
    jsonpstore?: string;

    /**
     * [Property] (String)
     */
    label?: string;

    /**
     * [Property] (String)
     */
    loadmask?: string;

    /**
     * [Property] (String)
     */
    Ext$menu?: string;

    /**
     * [Property] (String)
     */
    menucheckitem?: string;

    /**
     * [Property] (String)
     */
    menuitem?: string;

    /**
     * [Property] (String)
     */
    menuseparator?: string;

    /**
     * [Property] (String)
     */
    messagebox?: string;

    /**
     * [Property] (String)
     */
    multislider?: string;

    /**
     * [Property] (String)
     */
    numbercolumn?: string;

    /**
     * [Property] (String)
     */
    numberfield?: string;

    /**
     * [Property] (String)
     */
    pagingtoolbar?: string;

    /**
     * [Property] (String)
     */
    Ext$panel?: string;

    /**
     * [Property] (String)
     */
    pickerfield?: string;

    /**
     * [Property] (String)
     */
    progressbar?: string;

    /**
     * [Property] (String)
     */
    propertygrid?: string;

    /**
     * [Property] (String)
     */
    quicktip?: string;

    /**
     * [Property] (String)
     */
    radio?: string;

    /**
     * [Property] (String)
     */
    radiofield?: string;

    /**
     * [Property] (String)
     */
    radiogroup?: string;

    /**
     * [Property] (String)
     */
    rownumberer?: string;

    /**
     * [Property] (String)
     */
    Ext$slider?: string;

    /**
     * [Property] (String)
     */
    sliderfield?: string;

    /**
     * [Property] (String)
     */
    slidertip?: string;

    /**
     * [Property] (String)
     */
    spinnerfield?: string;

    /**
     * [Property] (String)
     */
    splitbutton?: string;

    /**
     * [Property] (String)
     */
    splitter?: string;

    /**
     * [Property] (String)
     */
    Ext$tab?: string;

    /**
     * [Property] (String)
     */
    tabbar?: string;

    /**
     * [Property] (String)
     */
    tablepanel?: string;

    /**
     * [Property] (String)
     */
    tableview?: string;

    /**
     * [Property] (String)
     */
    tabpanel?: string;

    /**
     * [Property] (String)
     */
    tbfill?: string;

    /**
     * [Property] (String)
     */
    tbitem?: string;

    /**
     * [Property] (String)
     */
    tbseparator?: string;

    /**
     * [Property] (String)
     */
    tbspacer?: string;

    /**
     * [Property] (String)
     */
    tbtext?: string;

    /**
     * [Property] (String)
     */
    templatecolumn?: string;

    /**
     * [Property] (String)
     */
    text?: string;

    /**
     * [Property] (String)
     */
    textarea?: string;

    /**
     * [Property] (String)
     */
    textareafield?: string;

    /**
     * [Property] (String)
     */
    textfield?: string;

    /**
     * [Property] (String)
     */
    timefield?: string;

    /**
     * [Property] (String)
     */
    timepicker?: string;

    /**
     * [Property] (String)
     */
    Ext$tip?: string;

    /**
     * [Property] (String)
     */
    tool?: string;

    /**
     * [Property] (String)
     */
    Ext$toolbar?: string;

    /**
     * [Property] (String)
     */
    tooltip?: string;

    /**
     * [Property] (String)
     */
    treepanel?: string;

    /**
     * [Property] (String)
     */
    treeview?: string;

    /**
     * [Property] (String)
     */
    trigger?: string;

    /**
     * [Property] (String)
     */
    triggerfield?: string;

    /**
     * [Property] (String)
     */
    viewport?: string;

    /**
     * [Property] (String)
     */
    Ext$window?: string;
  }

  declare export interface Ext$IError {
    /**
     * [Property] (Boolean)
     */
    ignore?: boolean;

    /**
     * [Property] (Boolean)
     */
    notify?: boolean;

    /**
     * [Method] Provides a custom string representation of the error object
     * @returns String The error message. If raised from within the Ext 4 class system, the error message will also include the raising class and method names, if available.
     */
    toString?: () => string;
  }

  declare export class Ext$Error {
    /**
     * [Method] Globally handle any Ext errors that may be raised optionally providing custom logic to handle different errors indiv
     * @param err Ext.Error The Ext.Error object being raised. It will contain any attributes that were originally raised with it, plus properties about the method and class from which the error originated (if raised from a class that uses the Ext 4 class system).
     */
    static handle(err?: Ext$Ext$IError): void;

    /**
     * [Method] Raise an error that can include additional data and supports automatic console logging if available
     * @param err String/Object The error message string, or an object containing the attribute "msg" that will be used as the error message. Any other data included in the object will also be logged to the browser console, if available.
     */
    static raise(err?: any): void;
  }

  declare export interface Ext$IEventManager {}

  declare export class Ext$EventManager {
    /**
     * [Property] (Object)
     */
    static idleEvent: any;

    /**
     * [Method] Appends an event handler to an element
     * @param el String/Ext.Element/HTMLElement/Window The html element or id to assign the event handler to.
     * @param eventName String The name of the event to listen for.
     * @param handler Function/String The handler function the event invokes. A String parameter is assumed to be method name in scope object, or Element object if no scope is provided.
     * @param scope Object The scope (this reference) in which the handler function is executed. Defaults to the Element.
     * @param options Object An object containing handler configuration properties. This may contain any of the following properties (See Ext.Element.addListener for examples of how to use these options.):
     */
    static addListener(
      el?: any,
      eventName?: string,
      handler?: any,
      scope?: any,
      options?: any
    ): void;

    /**
     * [Method] Get the id of the element
     * @param element HTMLElement/Ext.Element The element to get the id for.
     * @returns String id
     */
    static getId(element?: any): string;

    /**
     * [Method] Indicates which event to use for getting key presses
     * @returns String The appropriate event name.
     */
    static getKeyEvent(): string;

    /**
     * [Method] Gets the x coordinate from the event
     * @param event Object The event
     * @returns Number The x coordinate
     */
    static getPageX(event?: any): number;

    /**
     * [Method] Gets the x amp y coordinate from the event
     * @param event Object The event
     * @returns Number[] The x/y coordinate
     */
    static getPageXY(event?: any): number[];

    /**
     * [Method] Gets the y coordinate from the event
     * @param event Object The event
     * @returns Number The y coordinate
     */
    static getPageY(event?: any): number;

    /**
     * [Method] Gets the related target from the event
     * @param event Object The event
     * @returns HTMLElement The related target.
     */
    static getRelatedTarget(event?: any): HTMLElement;

    /**
     * [Method] Gets the target of the event
     * @param event Object The event
     * @returns HTMLElement target
     */
    static getTarget(event?: any): HTMLElement;

    /**
     * [Method] Appends an event handler to an element
     * @param el String/Ext.Element/HTMLElement/Window The html element or id to assign the event handler to.
     * @param eventName String The name of the event to listen for.
     * @param handler Function/String The handler function the event invokes. A String parameter is assumed to be method name in scope object, or Element object if no scope is provided.
     * @param scope Object The scope (this reference) in which the handler function is executed. Defaults to the Element.
     * @param options Object An object containing handler configuration properties. This may contain any of the following properties (See Ext.Element.addListener for examples of how to use these options.):
     */
    static on(
      el?: any,
      eventName?: string,
      handler?: any,
      scope?: any,
      options?: any
    ): void;

    /**
     * [Method] Adds a listener to be notified when the document is ready before onload and before images are loaded
     * @param fn Function The method the event invokes.
     * @param scope Object The scope (this reference) in which the handler function executes. Defaults to the browser window.
     * @param options Object Options object as passed to Ext.Element.addListener.
     */
    static onDocumentReady(fn?: any, scope?: any, options?: any): void;

    /**
     * [Method] Adds a listener to be notified when the browser window is resized and provides resize event buffering 100 millisecon
     * @param fn Function The handler function the window resize event invokes.
     * @param scope Object The scope (this reference) in which the handler function executes. Defaults to the browser window.
     * @param options Boolean Options object as passed to Ext.Element.addListener
     */
    static onWindowResize(fn?: any, scope?: any, options?: boolean): void;

    /**
     * [Method] Adds a listener to be notified when the browser window is unloaded
     * @param fn Function The handler function the window unload event invokes.
     * @param scope Object The scope (this reference) in which the handler function executes. Defaults to the browser window.
     * @param options Boolean Options object as passed to Ext.Element.addListener
     */
    static onWindowUnload(fn?: any, scope?: any, options?: boolean): void;

    /**
     * [Method] This strategy has minimal benefits for Sencha solutions that build themselves ie
     */
    static pollScroll(): void;

    /**
     * [Method] Prevents the browsers default handling of the event
     * @param event Event The event to prevent the default
     */
    static preventDefault(event?: Event): void;

    /**
     * [Method] Recursively removes all previous added listeners from an element and its children
     * @param el String/Ext.Element/HTMLElement/Window The id or html element from which to remove all event handlers.
     * @param eventName String The name of the event.
     */
    static purgeElement(el?: any, eventName?: string): void;

    /**
     * [Method] Removes all event handers from an element
     * @param el String/Ext.Element/HTMLElement/Window The id or html element from which to remove all event handlers.
     */
    static removeAll(el?: any): void;

    /**
     * [Method] Removes an event handler from an element
     * @param el String/Ext.Element/HTMLElement/Window The id or html element from which to remove the listener.
     * @param eventName String The name of the event.
     * @param fn Function The handler function to remove. This must be a reference to the function passed into the addListener call.
     * @param scope Object If a scope (this reference) was specified when the listener was added, then this must refer to the same object.
     */
    static removeListener(
      el?: any,
      eventName?: string,
      fn?: any,
      scope?: any
    ): void;

    /**
     * [Method] Removes the passed window resize listener
     * @param fn Function The method the event invokes
     * @param scope Object The scope of handler
     */
    static removeResizeListener(fn?: any, scope?: any): void;

    /**
     * [Method] Removes the passed window unload listener
     * @param fn Function The method the event invokes
     * @param scope Object The scope of handler
     */
    static removeUnloadListener(fn?: any, scope?: any): void;

    /**
     * [Method] Stop the event preventDefault and stopPropagation
     * @param event Event The event to stop
     */
    static stopEvent(event?: Event): void;

    /**
     * [Method] Cancels bubbling of the event
     * @param event Event The event to stop bubbling.
     */
    static stopPropagation(event?: Event): void;

    /**
     * [Method] Removes an event handler from an element
     * @param el String/Ext.Element/HTMLElement/Window The id or html element from which to remove the listener.
     * @param eventName String The name of the event.
     * @param fn Function The handler function to remove. This must be a reference to the function passed into the addListener call.
     * @param scope Object If a scope (this reference) was specified when the listener was added, then this must refer to the same object.
     */
    static un(el?: any, eventName?: string, fn?: any, scope?: any): void;
  }

  declare export interface Ext$IEventObject {}

  declare export class Ext$EventObject {
    /**
     * [Property] (Number)
     */
    static A: number;

    /**
     * [Property] (Number)
     */
    static ALT: number;

    /**
     * [Property] (Number)
     */
    static B: number;

    /**
     * [Property] (Number)
     */
    static BACKSPACE: number;

    /**
     * [Property] (Number)
     */
    static C: number;

    /**
     * [Property] (Number)
     */
    static CAPS_LOCK: number;

    /**
     * [Property] (Number)
     */
    static CONTEXT_MENU: number;

    /**
     * [Property] (Number)
     */
    static CTRL: number;

    /**
     * [Property] (Number)
     */
    static D: number;

    /**
     * [Property] (Number)
     */
    static DELETE: number;

    /**
     * [Property] (Number)
     */
    static DOWN: number;

    /**
     * [Property] (Number)
     */
    static E: number;

    /**
     * [Property] (Number)
     */
    static EIGHT: number;

    /**
     * [Property] (Number)
     */
    static END: number;

    /**
     * [Property] (Number)
     */
    static ENTER: number;

    /**
     * [Property] (Number)
     */
    static ESC: number;

    /**
     * [Property] (Number)
     */
    static F: number;

    /**
     * [Property] (Number)
     */
    static F1: number;

    /**
     * [Property] (Number)
     */
    static F10: number;

    /**
     * [Property] (Number)
     */
    static F11: number;

    /**
     * [Property] (Number)
     */
    static F12: number;

    /**
     * [Property] (Number)
     */
    static F2: number;

    /**
     * [Property] (Number)
     */
    static F3: number;

    /**
     * [Property] (Number)
     */
    static F4: number;

    /**
     * [Property] (Number)
     */
    static F5: number;

    /**
     * [Property] (Number)
     */
    static F6: number;

    /**
     * [Property] (Number)
     */
    static F7: number;

    /**
     * [Property] (Number)
     */
    static F8: number;

    /**
     * [Property] (Number)
     */
    static F9: number;

    /**
     * [Property] (Number)
     */
    static FIVE: number;

    /**
     * [Property] (Number)
     */
    static FOUR: number;

    /**
     * [Property] (Number)
     */
    static G: number;

    /**
     * [Property] (Number)
     */
    static H: number;

    /**
     * [Property] (Number)
     */
    static HOME: number;

    /**
     * [Property] (Number)
     */
    static I: number;

    /**
     * [Property] (Number)
     */
    static INSERT: number;

    /**
     * [Property] (Number)
     */
    static J: number;

    /**
     * [Property] (Number)
     */
    static K: number;

    /**
     * [Property] (Number)
     */
    static L: number;

    /**
     * [Property] (Number)
     */
    static LEFT: number;

    /**
     * [Property] (Number)
     */
    static M: number;

    /**
     * [Property] (Number)
     */
    static N: number;

    /**
     * [Property] (Number)
     */
    static NINE: number;

    /**
     * [Property] (Number)
     */
    static NUM_CENTER: number;

    /**
     * [Property] (Number)
     */
    static NUM_DIVISION: number;

    /**
     * [Property] (Number)
     */
    static NUM_EIGHT: number;

    /**
     * [Property] (Number)
     */
    static NUM_FIVE: number;

    /**
     * [Property] (Number)
     */
    static NUM_FOUR: number;

    /**
     * [Property] (Number)
     */
    static NUM_MINUS: number;

    /**
     * [Property] (Number)
     */
    static NUM_MULTIPLY: number;

    /**
     * [Property] (Number)
     */
    static NUM_NINE: number;

    /**
     * [Property] (Number)
     */
    static NUM_ONE: number;

    /**
     * [Property] (Number)
     */
    static NUM_PERIOD: number;

    /**
     * [Property] (Number)
     */
    static NUM_PLUS: number;

    /**
     * [Property] (Number)
     */
    static NUM_SEVEN: number;

    /**
     * [Property] (Number)
     */
    static NUM_SIX: number;

    /**
     * [Property] (Number)
     */
    static NUM_THREE: number;

    /**
     * [Property] (Number)
     */
    static NUM_TWO: number;

    /**
     * [Property] (Number)
     */
    static NUM_ZERO: number;

    /**
     * [Property] (Number)
     */
    static O: number;

    /**
     * [Property] (Number)
     */
    static ONE: number;

    /**
     * [Property] (Number)
     */
    static P: number;

    /**
     * [Property] (Number)
     */
    static PAGE_DOWN: number;

    /**
     * [Property] (Number)
     */
    static PAGE_UP: number;

    /**
     * [Property] (Number)
     */
    static PAUSE: number;

    /**
     * [Property] (Number)
     */
    static PRINT_SCREEN: number;

    /**
     * [Property] (Number)
     */
    static Q: number;

    /**
     * [Property] (Number)
     */
    static R: number;

    /**
     * [Property] (Number)
     */
    static RETURN: number;

    /**
     * [Property] (Number)
     */
    static RIGHT: number;

    /**
     * [Property] (Number)
     */
    static S: number;

    /**
     * [Property] (Number)
     */
    static SEVEN: number;

    /**
     * [Property] (Number)
     */
    static SHIFT: number;

    /**
     * [Property] (Number)
     */
    static SIX: number;

    /**
     * [Property] (Number)
     */
    static SPACE: number;

    /**
     * [Property] (Number)
     */
    static T: number;

    /**
     * [Property] (Number)
     */
    static TAB: number;

    /**
     * [Property] (Number)
     */
    static THREE: number;

    /**
     * [Property] (Number)
     */
    static TWO: number;

    /**
     * [Property] (Number)
     */
    static U: number;

    /**
     * [Property] (Number)
     */
    static UP: number;

    /**
     * [Property] (Number)
     */
    static V: number;

    /**
     * [Property] (Number)
     */
    static W: number;

    /**
     * [Property] (Number)
     */
    static WHEEL_SCALE: number;

    /**
     * [Property] (Number)
     */
    static X: number;

    /**
     * [Property] (Number)
     */
    static Y: number;

    /**
     * [Property] (Number)
     */
    static Z: number;

    /**
     * [Property] (Number)
     */
    static ZERO: number;

    /**
     * [Property] (Boolean)
     */
    static altKey: boolean;

    /**
     * [Property] (Boolean)
     */
    static ctrlKey: boolean;

    /**
     * [Property] (Boolean)
     */
    static shiftKey: boolean;

    /**
     * [Method] Correctly scales a given wheel delta
     * @param delta Number The delta value.
     */
    static correctWheelDelta(delta?: number): void;

    /**
     * [Method] Gets the character code for the event
     * @returns Number
     */
    static getCharCode(): number;

    /**
     * [Method] Returns a normalized keyCode for the event
     * @returns Number The key code
     */
    static getKey(): number;

    /**
     * [Method] Gets the x coordinate of the event
     * @returns Number
     */
    static getPageX(): number;

    /**
     * [Method] Gets the y coordinate of the event
     * @returns Number
     */
    static getPageY(): number;

    /**
     * [Method] Returns a point object that consists of the object coordinates
     * @returns Ext.util.Point point
     */
    static getPoint(): Ext$Ext$util.util$IPoint;

    /**
     * [Method] Gets the related target
     * @param selector String A simple selector to filter the target or look for an ancestor of the target
     * @param maxDepth Number/HTMLElement The max depth to search as a number or element (defaults to 10 || document.body)
     * @param returnEl Boolean True to return a Ext.Element object instead of DOM node
     * @returns HTMLElement
     */
    static getRelatedTarget(
      selector?: string,
      maxDepth?: any,
      returnEl?: boolean
    ): HTMLElement;

    /**
     * [Method] Gets the target for the event
     * @param selector String A simple selector to filter the target or look for an ancestor of the target
     * @param maxDepth Number/HTMLElement The max depth to search as a number or element (defaults to 10 || document.body)
     * @param returnEl Boolean True to return a Ext.Element object instead of DOM node
     * @returns HTMLElement
     */
    static getTarget(
      selector?: string,
      maxDepth?: any,
      returnEl?: boolean
    ): HTMLElement;

    /**
     * [Method] Normalizes mouse wheel y delta across browsers
     * @returns Number The mouse wheel y-delta
     */
    static getWheelDelta(): number;

    /**
     * [Method] Returns the mouse wheel deltas for this event
     * @returns Object An object with "x" and "y" properties holding the mouse wheel deltas.
     */
    static getWheelDeltas(): any;

    /**
     * [Method] Gets the x coordinate of the event
     * @returns Number
     */
    static getX(): number;

    /**
     * [Method] Gets the page coordinates of the event
     * @returns Number[] The xy values like [x, y]
     */
    static getXY(): number[];

    /**
     * [Method] Gets the y coordinate of the event
     * @returns Number
     */
    static getY(): number;

    /**
     * [Method] Returns true if the control meta shift or alt key was pressed during this event
     * @returns Boolean
     */
    static hasModifier(): boolean;

    /**
     * [Method] Injects a DOM event using the data in this object and optionally a new target
     * @param target Ext.Element/HTMLElement If specified, the target for the event. This is likely to be used when relaying a DOM event. If not specified, getTarget is used to determine the target.
     */
    static injectEvent(target?: any): void;

    /**
     * [Method] Checks if the key pressed was a navigation key
     * @returns Boolean True if the press is a navigation keypress
     */
    static isNavKeyPress(): boolean;

    /**
     * [Method] Checks if the key pressed was a special key
     * @returns Boolean True if the press is a special keypress
     */
    static isSpecialKey(): boolean;

    /**
     * [Method] Prevents the browsers default handling of the event
     */
    static preventDefault(): void;

    /**
     * [Method] Stop the event preventDefault and stopPropagation
     */
    static stopEvent(): void;

    /**
     * [Method] Cancels bubbling of the event
     */
    static stopPropagation(): void;

    /**
     * [Method] Returns true if the target of this event is a child of el
     * @param el String/HTMLElement/Ext.Element The id, DOM element or Ext.Element to check
     * @param related Boolean true to test if the related target is within el instead of the target
     * @param allowEl Boolean true to also check if the passed element is the target or related target
     * @returns Boolean
     */
    static within(el?: any, related?: boolean, allowEl?: boolean): boolean;
  }

  declare export type flash$IComponent = {
    /**
     * [Config Option] (Boolean)
     */
    autoScroll?: boolean,

    /**
     * [Config Option] (Number/String)
     */
    columnWidth?: any,

    /**
     * [Config Option] (Ext.util.Region/Ext.Element)
     */
    constrainTo?: any,

    /**
     * [Config Option] (Object/String)
     */
    constraintInsets?: any,

    /**
     * [Config Option] (String)
     */
    defaultAlign?: string,

    /**
     * [Config Option] (Boolean)
     */
    floating?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    formBind?: boolean,

    /**
     * [Config Option] (String)
     */
    overflowX?: string,

    /**
     * [Config Option] (String)
     */
    overflowY?: string,

    /**
     * [Config Option] ("north"/"south"/"east"/"west"/"center")
     */
    region?: any,

    /**
     * [Config Option] (Boolean/Object)
     */
    resizable?: any,

    /**
     * [Config Option] (String)
     */
    resizeHandles?: string,

    /**
     * [Config Option] (Boolean)
     */
    toFrontOnShow?: boolean,

    /**
     * [Property] (Ext.Container)
     */
    floatParent?: Ext$Ext$IContainer,

    /**
     * [Property] (Object)
     */
    scrollFlags?: any,

    /**
     * [Property] (Ext.ZIndexManager)
     */
    zIndexManager?: Ext$Ext$IZIndexManager,

    /**
     * [Property] (Ext.Container)
     */
    zIndexParent?: Ext$Ext$IContainer,

    /**
     * [Method] Called by the layout system after the Component has been laid out
     */
    afterComponentLayout?: () => void,

    /**
     * [Method] Invoked after the Component has been hidden
     * @param callback Function
     * @param scope Object
     */
    afterHide?: (Ext$callback?: any, scope?: any) => void,

    /**
     * [Method] Allows addition of behavior after rendering is complete
     */
    afterRender?: () => void,

    /**
     * [Method] Template method called after a Component has been positioned
     * @param ax Object
     * @param ay Object
     */
    afterSetPosition?: (ax?: any, ay?: any) => void,

    /**
     * [Method] Invoked after the Component is shown after onShow is called
     * @param animateTarget String/Ext.Element
     * @param callback Function
     * @param scope Object
     */
    afterShow?: (animateTarget?: any, Ext$callback?: any, scope?: any) => void,

    /**
     * [Method] Occurs before componentLayout is run
     */
    beforeLayout?: () => void,

    /**
     * [Method] Invoked before the Component is shown
     */
    beforeShow?: () => void,

    /**
     * [Method] Bubbles up the component container heirarchy calling the specified function with each component
     * @param fn Function The function to call
     * @param scope Object The scope of the function. Defaults to current node.
     * @param args Array The args to call the function with. Defaults to passing the current component.
     * @returns Ext.Component this
     */
    bubble?: (fn?: any, scope?: any, args?: any[]) => Ext$flash$IComponent,

    /**
     * [Method] Cancel any deferred focus on this component
     */
    cancelFocus?: () => void,

    /**
     * [Method] Center this Component in its container
     * @returns Ext.Component this
     */
    center?: () => Ext$flash$IComponent,

    /**
     * [Method] Clone the current component using the original config values passed into this instance by default
     * @param overrides Object A new config containing any properties to override in the cloned version. An id property can be passed on this object, otherwise one will be generated to avoid duplicates.
     * @returns Ext.Component clone The cloned copy of this component
     */
    cloneConfig?: (overrides?: any) => Ext$flash$IComponent,

    /**
     * [Method] Moves this floating Component into a constrain region
     * @param constrainTo String/HTMLElement/Ext.Element/Ext.util.Region The Element or Region into which this Component is to be constrained. Defaults to the element into which this floating Component was rendered.
     */
    doConstrain?: (constrainTo?: any) => void,

    /**
     * [Method] Find a container above this component at any level by a custom function
     * @param fn Function The custom function to call with the arguments (container, this component).
     * @returns Ext.container.Container The first Container for which the custom function returns true
     */
    findParentBy?: (fn?: any) => Ext$Ext$container.Ext$IContainer,

    /**
     * [Method] Find a container above this component at any level by xtype or class See also the up method
     * @param xtype String/Ext.Class The xtype string for a component, or the class of the component directly
     * @returns Ext.container.Container The first Container which matches the given xtype or class
     */
    findParentByType?: (xtype?: any) => Ext$Ext$container.Ext$IContainer,

    /**
     * [Method] Try to focus this component
     * @param selectText Boolean If applicable, true to also select the text in this component
     * @param delay Boolean/Number Delay the focus this number of milliseconds (true for 10 milliseconds).
     * @param callback Function Only needed if the delay parameter is used. A function to call upon focus.
     * @param scope Function Only needed if the delay parameter is used. The scope (this reference) in which to execute the callback.
     * @returns Ext.Component The focused Component. Usually this Component. Some Containers may delegate focus to a descendant Component (Windows can do this through their defaultFocus config option.
     */
    focus?: (
      selectText?: boolean,
      delay?: any,
      Ext$callback?: any,
      scope?: any
    ) => Ext$flash$IComponent,

    /**
     * [Method] Retrieves the top level element representing this component
     * @returns Ext.dom.Element
     */
    getEl?: () => Ext$Ext$dom.Ext$IElement,

    /**
     * [Method] Retrieves the id of this component
     * @returns String
     */
    getId?: () => string,

    /**
     * [Method] Gets the current XY position of the component s underlying element
     * @param local Boolean If true the element's left and top are returned instead of page XY.
     * @returns Number[] The XY position of the element (e.g., [100, 200])
     */
    getPosition?: (local?: boolean) => number[],

    /**
     * [Method] Gets the xtype for this component as registered with Ext ComponentManager
     * @returns String The xtype
     */
    getXType?: () => string,

    /**
     * [Method] Hides this Component setting it to invisible using the configured hideMode
     * @param animateTarget String/Ext.Element/Ext.Component only valid for floating Components such as Windows or ToolTips, or regular Components which have been configured with floating: true.. The target to which the Component should animate while hiding.
     * @param callback Function A callback function to call after the Component is hidden.
     * @param scope Object The scope (this reference) in which the callback is executed. Defaults to this Component.
     * @returns Ext.Component this
     */
    hide?: (
      animateTarget?: any,
      Ext$callback?: any,
      scope?: any
    ) => Ext$flash$IComponent,

    /**
     * [Method] The initComponent template method is an important initialization step for a Component
     */
    initComponent?: () => void,

    /**
     * [Method] Method to manage awareness of when components are added to their respective Container firing an added event
     */
    onAdded?: () => void,

    /**
     * [Method] Allows addition of behavior to the destroy operation
     */
    onDestroy?: () => void,

    /**
     * [Method] Possibly animates down to a target element
     * @param animateTarget String/Ext.Element/Ext.Component
     * @param callback Function
     * @param scope Object
     */
    onHide?: (animateTarget?: any, Ext$callback?: any, scope?: any) => void,

    /**
     * [Method] Allows addition of behavior to the show operation
     * @param animateTarget String/Ext.Element
     * @param callback Function
     * @param scope Object
     */
    onShow?: (animateTarget?: any, Ext$callback?: any, scope?: any) => void,

    /**
     * [Method] Invoked after the afterShow method is complete
     * @param callback Function
     * @param scope Object
     */
    onShowComplete?: (Ext$callback?: any, scope?: any) => void,

    /**
     * [Method] Scrolls this Component s target element by the passed delta values optionally animating
     * @param deltaX Number/Number[]/Object Either the x delta, an Array specifying x and y deltas or an object with "x" and "y" properties.
     * @param deltaY Number/Boolean/Object Either the y delta, or an animate flag or config object.
     * @param animate Boolean/Object Animate flag/config object if the delta values were passed separately.
     */
    scrollBy?: (deltaX?: any, deltaY?: any, animate?: any) => void,

    /**
     * [Method] This method is called internally by Ext ZIndexManager to signal that a floating Component has either been moved to th
     * @param active Boolean True to activate the Component, false to deactivate it.
     * @param newActive Ext.Component The newly active Component which is taking over topmost zIndex position.
     */
    setActive?: (active?: boolean, newActive?: Ext$flash$IComponent) => void,

    /**
     * [Method] Sets the overflow on the content element of the component
     * @param scroll Boolean True to allow the Component to auto scroll.
     * @returns Ext.Component this
     */
    setAutoScroll?: (scroll?: boolean) => Ext$flash$IComponent,

    /**
     * [Method] This method changes the region config property for this border region
     * @param region String The new region value ("north", "south", "east" or "west").
     * @returns String The previous value of the region property.
     */
    setBorderRegion?: (region?: string) => string,

    /**
     * [Method] This method allows you to show or hide a LoadMask on top of this component
     * @param load Boolean/Object/String True to show the default LoadMask, a config object that will be passed to the LoadMask constructor, or a message String to show. False to hide the current LoadMask.
     * @param targetEl Boolean True to mask the targetEl of this Component instead of the this.el. For example, setting this to true on a Panel will cause only the body to be masked.
     * @returns Ext.LoadMask The LoadMask instance that has just been shown.
     */
    setLoading?: (load?: any, targetEl?: boolean) => Ext$Ext$ILoadMask,

    /**
     * [Method] Sets the overflow x y on the content element of the component
     * @param overflowX String The overflow-x value.
     * @param overflowY String The overflow-y value.
     * @returns Ext.Component this
     */
    setOverflowXY?: (
      overflowX?: string,
      overflowY?: string
    ) => Ext$flash$IComponent,

    /**
     * [Method] Sets the page XY position of the component
     * @param x Number/Number[] The new x position or an array of [x,y].
     * @param y Number The new y position.
     * @param animate Boolean/Object True to animate the Component into its new position. You may also pass an animation configuration.
     * @returns Ext.Component this
     */
    setPagePosition?: (
      x?: any,
      y?: number,
      animate?: any
    ) => Ext$flash$IComponent,

    /**
     * [Method] Sets the left and top of the component
     * @param x Number/Number[]/Object The new left, an array of [x,y], or animation config object containing x and y properties.
     * @param y Number The new top.
     * @param animate Boolean/Object If true, the Component is animated into its new position. You may also pass an animation configuration.
     * @returns Ext.Component this
     */
    setPosition?: (x?: any, y?: number, animate?: any) => Ext$flash$IComponent,

    /**
     * [Method] Sets the weight config property for this component
     * @param weight Number The new weight value.
     * @returns Number The previous value of the weight property.
     */
    setRegionWeight?: (weight?: number) => number,

    /**
     * [Method] Shows this Component rendering it first if autoRender or floating are true
     * @param animateTarget String/Ext.Element only valid for floating Components such as Windows or ToolTips, or regular Components which have been configured with floating: true. The target from which the Component should animate from while opening.
     * @param callback Function A callback function to call after the Component is displayed. Only necessary if animation was specified.
     * @param scope Object The scope (this reference) in which the callback is executed. Defaults to this Component.
     * @returns Ext.Component this
     */
    show?: (
      animateTarget?: any,
      Ext$callback?: any,
      scope?: any
    ) => Ext$flash$IComponent,

    /**
     * [Method] Displays component at specific xy position
     * @param x Number/Number[] The new x position or array of [x,y].
     * @param y Number The new y position
     * @param animate Boolean/Object True to animate the Component into its new position. You may also pass an animation configuration.
     * @returns Ext.Component this
     */
    showAt?: (x?: any, y?: number, animate?: any) => Ext$flash$IComponent,

    /**
     * [Method] Shows this component by the specified Component or Element
     * @param component Ext.Component/Ext.dom.Element The Ext.Component or Ext.Element to show the component by.
     * @param position String Alignment position as used by Ext.util.Positionable.getAlignToXY. Defaults to defaultAlign.
     * @param offsets Number[] Alignment offsets as used by Ext.util.Positionable.getAlignToXY.
     * @returns Ext.Component this
     */
    showBy?: (
      component?: any,
      position?: string,
      offsets?: number[]
    ) => Ext$flash$IComponent,

    /**
     * [Method] Sends this Component to the back of lower z index than any other visible windows
     * @returns Ext.Component this
     */
    toBack?: () => Ext$flash$IComponent,

    /**
     * [Method] Brings this floating Component to the front of any other visible floating Components managed by the same ZIndexManag
     * @param preventFocus Boolean Specify true to prevent the Component from being focused.
     * @returns Ext.Component this
     */
    toFront?: (preventFocus?: boolean) => Ext$flash$IComponent,

    /**
     * [Method] Sets the current box measurements of the component s underlying element
     * @param box Object An object in the format {x, y, width, height}
     * @returns Ext.Component this
     */
    updateBox?: (box?: any) => Ext$flash$IComponent,

    /**
     * [Config Option] (Boolean)
     */
    autoSize?: boolean,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (String/Object)
     */
    componentLayout?: any,

    /**
     * [Config Option] (String[])
     */
    enginePriority?: string[],

    /**
     * [Config Option] (Object[])
     */
    gradients?: any[],

    /**
     * [Config Option] (Ext.draw.Sprite[])
     */
    items?: Ext$Ext$draw.target$ISprite[],

    /**
     * [Config Option] (Boolean/Number)
     */
    shrinkWrap?: any,

    /**
     * [Config Option] (Boolean)
     */
    viewBox?: boolean,

    /**
     * [Property] (Ext.draw.Surface)
     */
    surface?: Ext$Ext$draw.draw$ISurface,

    /**
     * [Config Option] (String)
     */
    backgroundColor?: string,

    /**
     * [Config Option] (Boolean)
     */
    expressInstall?: boolean,

    /**
     * [Config Option] (Object)
     */
    flashAttributes?: any,

    /**
     * [Config Option] (Object)
     */
    flashParams?: any,

    /**
     * [Config Option] (Object)
     */
    flashVars?: any,

    /**
     * [Config Option] (String)
     */
    flashVersion?: string,

    /**
     * [Config Option] (Ext.XTemplate/String/String[])
     */
    renderTpl?: any,

    /**
     * [Config Option] (String/Number)
     */
    swfHeight?: any,

    /**
     * [Config Option] (String/Number)
     */
    swfWidth?: any,

    /**
     * [Config Option] (String)
     */
    url?: string,

    /**
     * [Config Option] (String)
     */
    wmode?: string,

    /**
     * [Property] (Ext.Element)
     */
    swf?: Ext$Ext$IElement,

    /**
     * [Property] (String)
     */
    EXPRESS_INSTALL_URL?: string,

    /**
     * [Method] Allows addition of behavior after rendering is complete
     */
    afterRender?: () => void,

    /**
     * [Method] Invoked before the Component is destroyed
     */
    beforeDestroy?: () => void,

    /**
     * [Method] Retrieves the id of the SWF object embed element
     */
    getSwfId?: () => void,

    /**
     * [Method] The initComponent template method is an important initialization step for a Component
     */
    initComponent?: () => void,

    /**
     * [Method] Called before any calculation cycles to reset DOM values and prepare for calculation
     * @param ownerContext Object
     * @param firstCycle Object
     */
    beginLayoutCycle?: (ownerContext?: any, firstCycle?: any) => void,

    /**
     * [Method] This method is called after all layouts are complete and their calculations flushed to the DOM
     * @param ownerContext Object
     */
    finishedLayout?: (ownerContext?: any) => void,

    /**
     * [Method] Returns the element into which rendering must take place
     * @returns Ext.Element
     */
    getRenderTarget?: () => Ext$Ext$IElement,

    /**
     * [Method] Returns the owner component s resize element
     * @returns Ext.Element
     */
    getTarget?: () => Ext$Ext$IElement,

    /**
     * [Method] This method if implemented is called after all layouts are finished and all have a lastComponentSize cached
     * @param ownerContext Object
     */
    notifyOwner?: (ownerContext?: any) => void
  } & undefined.app$IEventDomain;

  declare export type Ext$IFlashComponent = {
    /**
     * [Config Option] (String)
     */
    backgroundColor?: string,

    /**
     * [Config Option] (Boolean)
     */
    expressInstall?: boolean,

    /**
     * [Config Option] (Object)
     */
    flashAttributes?: any,

    /**
     * [Config Option] (Object)
     */
    flashParams?: any,

    /**
     * [Config Option] (Object)
     */
    flashVars?: any,

    /**
     * [Config Option] (String)
     */
    flashVersion?: string,

    /**
     * [Config Option] (Ext.XTemplate/String/String[])
     */
    renderTpl?: any,

    /**
     * [Config Option] (String/Number)
     */
    swfHeight?: any,

    /**
     * [Config Option] (String/Number)
     */
    swfWidth?: any,

    /**
     * [Config Option] (String)
     */
    url?: string,

    /**
     * [Config Option] (String)
     */
    wmode?: string,

    /**
     * [Property] (Ext.Element)
     */
    swf?: Ext$Ext$IElement,

    /**
     * [Property] (String)
     */
    EXPRESS_INSTALL_URL?: string,

    /**
     * [Method] Allows addition of behavior after rendering is complete
     */
    afterRender?: () => void,

    /**
     * [Method] Invoked before the Component is destroyed
     */
    beforeDestroy?: () => void,

    /**
     * [Method] Retrieves the id of the SWF object embed element
     */
    getSwfId?: () => void,

    /**
     * [Method] The initComponent template method is an important initialization step for a Component
     */
    initComponent?: () => void
  } & Ext$flash$IComponent;

  declare export type Ext$IFocusManager = {} & Ext$Ext$IBase &
    undefined.util$IObservable;

  declare export class Ext$FocusManager {
    /**
     * [Property] (Boolean)
     */
    static enabled: boolean;

    /**
     * [Property] (Ext.Component)
     */
    static focusedCmp: Ext$flash$IComponent;

    /**
     * [Property] (Object)
     */
    static hasListeners: any;

    /**
     * [Property] (Boolean)
     */
    static isObservable: boolean;

    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Property] (String[])
     */
    static whitelist: string[];

    /**
     * [Method] Adds the specified events to the list of events which this Observable may fire
     * @param eventNames Object/String... Either an object with event names as properties with a value of true. For example: this.addEvents({  storeloaded: true,  storecleared: true });  Or any number of event names as separate parameters. For example: this.addEvents('storeloaded', 'storecleared');
     */
    static addEvents(eventNames?: any): void;

    /**
     * [Method] Appends an event handler to this object
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addListener(
      eventName?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Adds listeners to any Observable object or Ext Element which are automatically removed when this Component is destr
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Adds the specified xtype to the whitelist
     * @param xtype String/String[] Adds the xtype(s) to the whitelist.
     */
    static addXTypeToWhitelist(xtype?: any): void;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Removes all listeners for this object including the managed listeners
     */
    static clearListeners(): void;

    /**
     * [Method] Removes all managed listeners for this object
     */
    static clearManagedListeners(): void;

    /**
     * [Method] Disables the FocusManager by turning of all automatic focus management and keyboard navigation
     */
    static disable(): void;

    /**
     * [Method] Enables the FocusManager by turning on all automatic focus management and keyboard navigation
     * @param options Boolean/Object Either true/false to turn on the focus frame, or an object with the following options:
     */
    static enable(options?: any): void;

    /**
     * [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
     * @param eventNames String/String[] The event name to bubble, or an Array of event names.
     */
    static enableBubble(eventNames?: any): void;

    /**
     * [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
     * @param eventName String The name of the event to fire.
     * @param args Object... Variable number of parameters are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEvent(eventName: string, ...args: any[]): boolean;

    /**
     * [Method] Fires the specified event with the passed parameter list
     * @param eventName String The name of the event to fire.
     * @param args Object[] An array of parameters which are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEventArgs(eventName?: string, args?: any[]): boolean;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(name?: string): any;

    /**
     * [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles
     * @param eventName String The name of the event to check for
     * @returns Boolean true if the event is being listened for or bubbles, else false
     */
    static hasListener(eventName?: string): boolean;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Shorthand for addManagedListener
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static mon(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Shorthand for removeManagedListener
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static mun(item?: any, ename?: any, fn?: any, scope?: any): void;

    /**
     * [Method] Shorthand for addListener
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static on(eventName?: any, fn?: any, scope?: any, options?: any): any;

    /**
     * [Method] Relays selected events from the specified Observable as if the events were fired by this
     * @param origin Object The Observable whose events this object is to relay.
     * @param events String[] Array of event names to relay.
     * @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
     * @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or this.store.relayers.destroy();
     */
    static relayEvents(origin?: any, events?: string[], prefix?: string): any;

    /**
     * [Method] Removes an event handler
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static removeListener(eventName?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Removes listeners that were added by the mon method
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static removeManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any
    ): void;

    /**
     * [Method] Removes the specified xtype from the whitelist
     * @param xtype String/String[] Removes the xtype(s) from the whitelist.
     */
    static removeXTypeFromWhitelist(xtype?: any): void;

    /**
     * [Method] Resumes firing of the named event s
     * @param eventName String... Multiple event names to resume.
     */
    static resumeEvent(...eventName: any[]): void;

    /**
     * [Method] Resumes firing events see suspendEvents
     */
    static resumeEvents(): void;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Suspends firing of the named event s
     * @param eventName String... Multiple event names to suspend.
     */
    static suspendEvent(...eventName: any[]): void;

    /**
     * [Method] Suspends the firing of all events
     * @param queueSuspended Boolean Pass as true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events.
     */
    static suspendEvents(queueSuspended?: boolean): void;

    /**
     * [Method] Shorthand for removeListener
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static un(eventName?: string, fn?: any, scope?: any): void;
  }

  declare export type Ext$IFocusMgr = {} & Ext$Ext$IBase &
    undefined.util$IObservable;

  declare export class Ext$FocusMgr {
    /**
     * [Property] (Boolean)
     */
    static enabled: boolean;

    /**
     * [Property] (Ext.Component)
     */
    static focusedCmp: Ext$flash$IComponent;

    /**
     * [Property] (Object)
     */
    static hasListeners: any;

    /**
     * [Property] (Boolean)
     */
    static isObservable: boolean;

    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Property] (String[])
     */
    static whitelist: string[];

    /**
     * [Method] Adds the specified events to the list of events which this Observable may fire
     * @param eventNames Object/String... Either an object with event names as properties with a value of true. For example: this.addEvents({  storeloaded: true,  storecleared: true });  Or any number of event names as separate parameters. For example: this.addEvents('storeloaded', 'storecleared');
     */
    static addEvents(eventNames?: any): void;

    /**
     * [Method] Appends an event handler to this object
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addListener(
      eventName?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Adds listeners to any Observable object or Ext Element which are automatically removed when this Component is destr
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Adds the specified xtype to the whitelist
     * @param xtype String/String[] Adds the xtype(s) to the whitelist.
     */
    static addXTypeToWhitelist(xtype?: any): void;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Removes all listeners for this object including the managed listeners
     */
    static clearListeners(): void;

    /**
     * [Method] Removes all managed listeners for this object
     */
    static clearManagedListeners(): void;

    /**
     * [Method] Disables the FocusManager by turning of all automatic focus management and keyboard navigation
     */
    static disable(): void;

    /**
     * [Method] Enables the FocusManager by turning on all automatic focus management and keyboard navigation
     * @param options Boolean/Object Either true/false to turn on the focus frame, or an object with the following options:
     */
    static enable(options?: any): void;

    /**
     * [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
     * @param eventNames String/String[] The event name to bubble, or an Array of event names.
     */
    static enableBubble(eventNames?: any): void;

    /**
     * [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
     * @param eventName String The name of the event to fire.
     * @param args Object... Variable number of parameters are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEvent(eventName: string, ...args: any[]): boolean;

    /**
     * [Method] Fires the specified event with the passed parameter list
     * @param eventName String The name of the event to fire.
     * @param args Object[] An array of parameters which are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEventArgs(eventName?: string, args?: any[]): boolean;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(name?: string): any;

    /**
     * [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles
     * @param eventName String The name of the event to check for
     * @returns Boolean true if the event is being listened for or bubbles, else false
     */
    static hasListener(eventName?: string): boolean;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Shorthand for addManagedListener
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static mon(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Shorthand for removeManagedListener
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static mun(item?: any, ename?: any, fn?: any, scope?: any): void;

    /**
     * [Method] Shorthand for addListener
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static on(eventName?: any, fn?: any, scope?: any, options?: any): any;

    /**
     * [Method] Relays selected events from the specified Observable as if the events were fired by this
     * @param origin Object The Observable whose events this object is to relay.
     * @param events String[] Array of event names to relay.
     * @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
     * @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or this.store.relayers.destroy();
     */
    static relayEvents(origin?: any, events?: string[], prefix?: string): any;

    /**
     * [Method] Removes an event handler
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static removeListener(eventName?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Removes listeners that were added by the mon method
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static removeManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any
    ): void;

    /**
     * [Method] Removes the specified xtype from the whitelist
     * @param xtype String/String[] Removes the xtype(s) from the whitelist.
     */
    static removeXTypeFromWhitelist(xtype?: any): void;

    /**
     * [Method] Resumes firing of the named event s
     * @param eventName String... Multiple event names to resume.
     */
    static resumeEvent(...eventName: any[]): void;

    /**
     * [Method] Resumes firing events see suspendEvents
     */
    static resumeEvents(): void;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Suspends firing of the named event s
     * @param eventName String... Multiple event names to suspend.
     */
    static suspendEvent(...eventName: any[]): void;

    /**
     * [Method] Suspends the firing of all events
     * @param queueSuspended Boolean Pass as true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events.
     */
    static suspendEvents(queueSuspended?: boolean): void;

    /**
     * [Method] Shorthand for removeListener
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static un(eventName?: string, fn?: any, scope?: any): void;
  }

  declare export type form$ISliderField = {
    /**
     * [Method] Returns the current value of the slider
     * @returns any The current value of the slider
     */
    getValue?: () => any,

    /**
     * [Method] Programmatically sets the value of the Slider
     * @param value Number The value to set the slider to. (This will be constrained within minValue and maxValue)
     * @param animate Boolean Turn on or off animation
     */
    setValue?: (Ext$value?: number, animate?: boolean) => void
  } & undefined.slider$IMulti;

  declare export type ux$ICheckColumn = {
    /**
     * [Config Option] (Boolean)
     */
    stopSelection?: boolean,

    /**
     * [Config Option] (String)
     */
    tdCls?: string,

    /**
     * [Method] Disables this CheckColumn
     * @param silent Boolean
     */
    onDisable?: (silent?: boolean) => void,

    /**
     * [Method] Enables this CheckColumn
     * @param silent Boolean
     */
    onEnable?: (silent?: boolean) => void,

    /**
     * [Config Option] (Boolean)
     */
    stopSelection?: boolean,

    /**
     * [Config Option] (String)
     */
    tdCls?: string,

    /**
     * [Method] Disables this CheckColumn
     * @param silent Boolean
     */
    onDisable?: (silent?: boolean) => void,

    /**
     * [Method] Enables this CheckColumn
     * @param silent Boolean
     */
    onEnable?: (silent?: boolean) => void
  } & undefined.tree$IColumn;

  declare export type Ext$IFormPanel = {
    /**
     * [Config Option] (Ext.enums.Layout/Object)
     */
    Ext$layout?: any,

    /**
     * [Config Option] (Boolean)
     */
    pollForChanges?: boolean,

    /**
     * [Config Option] (Number)
     */
    pollInterval?: number,

    /**
     * [Method] Forces each field within the form panel to check if its value has changed
     */
    checkChange?: () => void,

    /**
     * [Method] Provides access to the Form which this Panel contains
     * @returns Ext.form.Basic The Form which this Panel contains.
     */
    getForm?: () => Ext$Ext$form.form$IBasic,

    /**
     * [Method] Returns the currently loaded Ext data Model instance if one was loaded via loadRecord
     * @returns Ext.data.Model The loaded instance
     */
    getRecord?: () => Ext$Ext$data.selection$IModel,

    /**
     * [Method] Convenience function for fetching the current value of each field in the form
     * @param asString Boolean If true, will return the key/value collection as a single URL-encoded param string.
     * @param dirtyOnly Boolean If true, only fields that are dirty will be included in the result.
     * @param includeEmptyText Boolean If true, the configured emptyText of empty fields will be used.
     * @param useDataValues Boolean If true, the getModelData method is used to retrieve values from fields, otherwise the getSubmitData method is used.
     * @returns String/Object
     */
    getValues?: (
      asString?: boolean,
      dirtyOnly?: boolean,
      includeEmptyText?: boolean,
      useDataValues?: boolean
    ) => any,

    /**
     * [Method] Convenience function to check if the form has any invalid fields
     */
    hasInvalidField?: () => void,

    /**
     * [Method] Initializes the FieldAncestor s state this must be called from the initComponent method of any components importing
     */
    initFieldAncestor?: () => void,

    /**
     * [Method] Convenience function to check if the form has any dirty fields
     * @returns Boolean
     */
    isDirty?: () => boolean,

    /**
     * [Method] Convenience function to check if the form has all valid fields
     * @returns Boolean
     */
    isValid?: () => boolean,

    /**
     * [Method] This is a proxy for the underlying BasicForm s Ext form Basic load call
     * @param options Object The options to pass to the action (see Ext.form.Basic.load and Ext.form.Basic.doAction for details)
     */
    load?: (options?: any) => void,

    /**
     * [Method] Loads an Ext data Model into this form internally just calls Ext form Basic loadRecord See also trackResetOnLoad
     * @param record Ext.data.Model The record to load
     * @returns Ext.form.Basic The Ext.form.Basic attached to this FormPanel
     */
    loadRecord?: (
      record?: Ext$Ext$data.selection$IModel
    ) => Ext$Ext$form.form$IBasic,

    /**
     * [Method] Fired when the error message of any field within the container changes
     * @param field Ext.form.Labelable The sub-field whose active error changed
     * @param error String The new active error message
     */
    onFieldErrorChange?: (
      field?: Ext$Ext$form.form$ILabelable,
      error?: string
    ) => void,

    /**
     * [Method] Fired when the validity of any field within the container changes
     * @param field Ext.form.field.Field The sub-field whose validity changed
     * @param valid Boolean The new validity state
     */
    onFieldValidityChange?: (
      field?: Ext$Ext$form.field.field$IField,
      valid?: boolean
    ) => void,

    /**
     * [Method] Start an interval task to continuously poll all the fields in the form for changes in their values
     * @param interval Number The interval in milliseconds at which the check should run.
     */
    startPolling?: (interval?: number) => void,

    /**
     * [Method] Stop a running interval task that was started by startPolling
     */
    stopPolling?: () => void,

    /**
     * [Method] This is a proxy for the underlying BasicForm s Ext form Basic submit call
     * @param options Object The options to pass to the action (see Ext.form.Basic.submit and Ext.form.Basic.doAction for details)
     */
    submit?: (options?: any) => void,

    /**
     * [Method] Persists the values in this form into the passed Ext data Model object in a beginEdit endEdit block
     * @param record Ext.data.Model The record to edit
     * @returns Ext.form.Basic The Ext.form.Basic attached to this FormPanel
     */
    updateRecord?: (
      record?: Ext$Ext$data.selection$IModel
    ) => Ext$Ext$form.form$IBasic,

    /**
     * [Config Option] (Ext.enums.Layout/Object)
     */
    Ext$layout?: any,

    /**
     * [Config Option] (Boolean)
     */
    pollForChanges?: boolean,

    /**
     * [Config Option] (Number)
     */
    pollInterval?: number,

    /**
     * [Method] Forces each field within the form panel to check if its value has changed
     */
    checkChange?: () => void,

    /**
     * [Method] Provides access to the Form which this Panel contains
     * @returns Ext.form.Basic The Form which this Panel contains.
     */
    getForm?: () => Ext$Ext$form.form$IBasic,

    /**
     * [Method] Returns the currently loaded Ext data Model instance if one was loaded via loadRecord
     * @returns Ext.data.Model The loaded instance
     */
    getRecord?: () => Ext$Ext$data.selection$IModel,

    /**
     * [Method] Convenience function for fetching the current value of each field in the form
     * @param asString Boolean If true, will return the key/value collection as a single URL-encoded param string.
     * @param dirtyOnly Boolean If true, only fields that are dirty will be included in the result.
     * @param includeEmptyText Boolean If true, the configured emptyText of empty fields will be used.
     * @param useDataValues Boolean If true, the getModelData method is used to retrieve values from fields, otherwise the getSubmitData method is used.
     * @returns String/Object
     */
    getValues?: (
      asString?: boolean,
      dirtyOnly?: boolean,
      includeEmptyText?: boolean,
      useDataValues?: boolean
    ) => any,

    /**
     * [Method] Convenience function to check if the form has any invalid fields
     */
    hasInvalidField?: () => void,

    /**
     * [Method] Initializes the FieldAncestor s state this must be called from the initComponent method of any components importing
     */
    initFieldAncestor?: () => void,

    /**
     * [Method] Convenience function to check if the form has any dirty fields
     * @returns Boolean
     */
    isDirty?: () => boolean,

    /**
     * [Method] Convenience function to check if the form has all valid fields
     * @returns Boolean
     */
    isValid?: () => boolean,

    /**
     * [Method] This is a proxy for the underlying BasicForm s Ext form Basic load call
     * @param options Object The options to pass to the action (see Ext.form.Basic.load and Ext.form.Basic.doAction for details)
     */
    load?: (options?: any) => void,

    /**
     * [Method] Loads an Ext data Model into this form internally just calls Ext form Basic loadRecord See also trackResetOnLoad
     * @param record Ext.data.Model The record to load
     * @returns Ext.form.Basic The Ext.form.Basic attached to this FormPanel
     */
    loadRecord?: (
      record?: Ext$Ext$data.selection$IModel
    ) => Ext$Ext$form.form$IBasic,

    /**
     * [Method] Fired when the error message of any field within the container changes
     * @param field Ext.form.Labelable The sub-field whose active error changed
     * @param error String The new active error message
     */
    onFieldErrorChange?: (
      field?: Ext$Ext$form.form$ILabelable,
      error?: string
    ) => void,

    /**
     * [Method] Fired when the validity of any field within the container changes
     * @param field Ext.form.field.Field The sub-field whose validity changed
     * @param valid Boolean The new validity state
     */
    onFieldValidityChange?: (
      field?: Ext$Ext$form.field.field$IField,
      valid?: boolean
    ) => void,

    /**
     * [Method] Start an interval task to continuously poll all the fields in the form for changes in their values
     * @param interval Number The interval in milliseconds at which the check should run.
     */
    startPolling?: (interval?: number) => void,

    /**
     * [Method] Stop a running interval task that was started by startPolling
     */
    stopPolling?: () => void,

    /**
     * [Method] This is a proxy for the underlying BasicForm s Ext form Basic submit call
     * @param options Object The options to pass to the action (see Ext.form.Basic.submit and Ext.form.Basic.doAction for details)
     */
    submit?: (options?: any) => void,

    /**
     * [Method] Persists the values in this form into the passed Ext data Model object in a beginEdit endEdit block
     * @param record Ext.data.Model The record to edit
     * @returns Ext.form.Basic The Ext.form.Basic attached to this FormPanel
     */
    updateRecord?: (
      record?: Ext$Ext$data.selection$IModel
    ) => Ext$Ext$form.form$IBasic
  } & undefined.tree$IPanel &
    undefined.form$IFieldAncestor;

  declare export interface Ext$IFunction {}

  declare export class Ext$Function {
    /**
     * [Method] Create an alias to the provided method property with name methodName of object
     * @param object Object/Function
     * @param methodName String
     * @returns Function aliasFn
     */
    static alias(object?: any, methodName?: string): any;

    /**
     * [Method] Create a new function from the provided fn change this to the provided scope optionally overrides arguments for the
     * @param fn Function The function to delegate.
     * @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the default global environment object (usually the browser window).
     * @param args Array Overrides arguments for the call. (Defaults to the arguments passed by the caller)
     * @param appendArgs Boolean/Number if True args are appended to call args instead of overriding, if a number the args are inserted at the specified position
     * @returns Function The new function
     */
    static bind(fn?: any, scope?: any, args?: any[], appendArgs?: any): any;

    /**
     * [Method] Create a clone of the provided method
     * @param method Function
     * @returns Function cloneFn
     */
    static clone(method?: any): any;

    /**
     * [Method] Creates a delegate function optionally with a bound scope which when called buffers the execution of the passed fu
     * @param fn Function The function to invoke on a buffered timer.
     * @param buffer Number The number of milliseconds by which to buffer the invocation of the function.
     * @param scope Object The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope specified by the caller.
     * @param args Array Override arguments for the call. Defaults to the arguments passed by the caller.
     * @returns Function A function which invokes the passed function after buffering for the specified time.
     */
    static createBuffered(
      fn?: any,
      buffer?: number,
      scope?: any,
      args?: any[]
    ): any;

    /**
     * [Method] Creates a delegate callback which when called executes after a specific delay
     * @param fn Function The function which will be called on a delay when the returned function is called. Optionally, a replacement (or additional) argument list may be specified.
     * @param delay Number The number of milliseconds to defer execution by whenever called.
     * @param scope Object The scope (this reference) used by the function at execution time.
     * @param args Array Override arguments for the call. (Defaults to the arguments passed by the caller)
     * @param appendArgs Boolean/Number if True args are appended to call args instead of overriding, if a number the args are inserted at the specified position.
     * @returns Function A function which, when called, executes the original function after the specified delay.
     */
    static createDelayed(
      fn?: any,
      delay?: number,
      scope?: any,
      args?: any[],
      appendArgs?: any
    ): any;

    /**
     * [Method] Creates an interceptor function
     * @param origFn Function The original function.
     * @param newFn Function The function to call before the original
     * @param scope Object The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope in which the original function is called or the browser window.
     * @param returnValue Object The value to return if the passed function return false.
     * @returns Function The new function
     */
    static createInterceptor(
      origFn?: any,
      newFn?: any,
      scope?: any,
      returnValue?: any
    ): any;

    /**
     * [Method] Create a combined function call sequence of the original function  the passed function
     * @param originalFn Function The original function.
     * @param newFn Function The function to sequence
     * @param scope Object The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope in which the original function is called or the default global environment object (usually the browser window).
     * @returns Function The new function
     */
    static createSequence(originalFn?: any, newFn?: any, scope?: any): any;

    /**
     * [Method] Creates a throttled version of the passed function which when called repeatedly and rapidly invokes the passed func
     * @param fn Function The function to execute at a regular time interval.
     * @param interval Number The interval in milliseconds on which the passed function is executed.
     * @param scope Object The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope specified by the caller.
     * @returns Function A function which invokes the passed function at the specified interval.
     */
    static createThrottled(fn?: any, interval?: number, scope?: any): any;

    /**
     * [Method] Calls this function after the number of millseconds specified optionally in a specific scope
     * @param fn Function The function to defer.
     * @param millis Number The number of milliseconds for the setTimeout call (if less than or equal to 0 the function is executed immediately)
     * @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the browser window.
     * @param args Array Overrides arguments for the call. (Defaults to the arguments passed by the caller)
     * @param appendArgs Boolean/Number if True args are appended to call args instead of overriding, if a number the args are inserted at the specified position
     * @returns Number The timeout id that can be used with clearTimeout
     */
    static defer(
      fn?: any,
      millis?: number,
      scope?: any,
      args?: any[],
      appendArgs?: any
    ): number;

    /**
     * [Method] A very commonly used method throughout the framework
     * @param setter Function
     * @returns Function flexSetter
     */
    static flexSetter(setter?: any): any;

    /**
     * [Method] Adds behavior to an existing method that is executed after the original behavior of the function
     * @param object Object The target object
     * @param methodName String Name of the method to override
     * @param fn Function Function with the new behavior. It will be called with the same arguments as the original method. The return value of this function will be the return value of the new method.
     * @param scope Object The scope to execute the interceptor function. Defaults to the object.
     * @returns Function The new function just created.
     */
    static interceptAfter(
      object?: any,
      methodName?: string,
      fn?: any,
      scope?: any
    ): any;

    /**
     * [Method] Adds behavior to an existing method that is executed before the original behavior of the function
     * @param object Object The target object
     * @param methodName String Name of the method to override
     * @param fn Function Function with the new behavior. It will be called with the same arguments as the original method. The return value of this function will be the return value of the new method.
     * @param scope Object The scope to execute the interceptor function. Defaults to the object.
     * @returns Function The new function just created.
     */
    static interceptBefore(
      object?: any,
      methodName?: string,
      fn?: any,
      scope?: any
    ): any;

    /**
     * [Method] Create a new function from the provided fn the arguments of which are pre set to args
     * @param fn Function The original function
     * @param args Array The arguments to pass to new callback
     * @param scope Object The scope (this reference) in which the function is executed.
     * @returns Function The new callback function
     */
    static pass(fn?: any, args?: any[], scope?: any): any;
  }

  declare export type util$ITextMetrics = {
    /**
     * [Method] Binds this TextMetrics instance to a new element
     * @param el String/HTMLElement/Ext.Element The element or its ID.
     */
    Ext$bind?: (el?: any) => void,

    /**
     * [Method] Destroy this instance
     */
    Ext$destroy?: () => void,

    /**
     * [Method] Returns the measured height of the specified text
     * @param text String The text to measure
     * @returns Number height The height in pixels
     */
    getHeight?: (text?: string) => number,

    /**
     * [Method] Returns the size of the specified text based on the internal element s style and width properties
     * @param text String The text to measure
     * @returns Object An object containing the text's size {width: (width), height: (height)}
     */
    getSize?: (text?: string) => any,

    /**
     * [Method] Returns the measured width of the specified text
     * @param text String The text to measure
     * @returns Number width The width in pixels
     */
    getWidth?: (text?: string) => number,

    /**
     * [Method] Sets a fixed width on the internal measurement element
     * @param width Number The width to set on the element
     */
    setFixedWidth?: (width?: number) => void
  } & Ext$Ext$IBase;

  declare export class util$TextMetrics {
    /**
     * [Method] Add methods  properties to the prototype of this class
     * @param members Object
     */
    static addMembers(members?: any): void;

    /**
     * [Method] Add  override static properties of this class
     * @param members Object
     * @returns Ext.Base this
     */
    static addStatics(members?: any): Ext$Ext$IBase;

    /**
     * [Method] Create a new instance of this Class
     * @returns Object the created instance.
     */
    static create(): any;

    /**
     * [Method] Create aliases for existing prototype methods
     * @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
     * @param origin String/Object The original method name
     */
    static createAlias(alias?: any, origin?: any): void;

    /**
     * [Method] Destroy the TextMetrics instance created by measure
     */
    static destroy(): void;

    /**
     * [Method] Get the current class name in string format
     * @returns String className
     */
    static getName(): string;

    /**
     * [Method] Adds members to class
     */
    static implement(): void;

    /**
     * [Method] Measures the size of the specified text
     * @param el String/HTMLElement The element, dom node or id from which to copy existing CSS styles that can affect the size of the rendered text
     * @param text String The text to measure
     * @param fixedWidth Number If the text will be multiline, you have to set a fixed width in order to accurately measure the text height
     * @returns Object An object containing the text's size {width: (width), height: (height)}
     */
    static measure(el?: any, text?: string, fixedWidth?: number): any;

    /**
     * [Method] Override members of this class
     * @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
     * @returns Ext.Base this class
     */
    static override(members?: any): Ext$Ext$IBase;
  }

  declare export type target$ITarget = {} & Ext$Ext$IBase;

  declare export type grid$IViewDropZone = {
    /**
     * [Config Option] (Boolean)
     */
    allowContainerDrop?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    allowParentInserts?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    appendOnly?: boolean,

    /**
     * [Config Option] (Number)
     */
    expandDelay?: number,

    /**
     * [Method] Moved out of the DropZone without dropping
     */
    notifyOut?: () => void,

    /**
     * [Method] The mouse is past the end of all nodes or there are no nodes
     * @param dd Object
     * @param e Object
     * @param data Object
     * @returns String status The CSS class that communicates the drop status back to the source so that the underlying Ext.dd.StatusProxy can be updated
     */
    onContainerOver?: (Ext$dd?: any, e?: any, Ext$data?: any) => string,

    /**
     * [Method] The mouse is no longer over a tree node so dropping is not valid
     * @param n Object
     * @param dd Object
     * @param e Object
     * @param data Object
     */
    onNodeOut?: (n?: any, Ext$dd?: any, e?: any, Ext$data?: any) => void,

    /**
     * [Method] The mouse is over a View node
     * @param node Object
     * @param dragZone Object
     * @param e Object
     * @param data Object
     * @returns String status The CSS class that communicates the drop status back to the source so that the underlying Ext.dd.StatusProxy can be updated
     */
    onNodeOver?: (node?: any, dragZone?: any, e?: any, Ext$data?: any) => string
  } & undefined.view$IDropZone;

  declare export type list$IListView = {
    /**
     * [Config Option] (Ext.grid.column.Column[]/Object)
     */
    columns?: any,

    /**
     * [Config Option] (Boolean)
     */
    rowLines?: boolean,

    /**
     * [Config Option] (String)
     */
    viewType?: string,

    /**
     * [Method] Reconfigures the grid with a new store columns
     * @param store Ext.data.Store The new store.
     * @param columns Object[] An array of column configs
     */
    reconfigure?: (
      store?: Ext$Ext$data.property$IStore,
      columns?: any[]
    ) => void,

    /**
     * [Config Option] (Ext.grid.column.Column[]/Object)
     */
    columns?: any,

    /**
     * [Config Option] (Boolean)
     */
    rowLines?: boolean,

    /**
     * [Config Option] (String)
     */
    viewType?: string,

    /**
     * [Method] Reconfigures the grid with a new store columns
     * @param store Ext.data.Store The new store.
     * @param columns Object[] An array of column configs
     */
    reconfigure?: (
      store?: Ext$Ext$data.property$IStore,
      columns?: any[]
    ) => void
  } & undefined.view$ITable;

  declare export type Ext$IListView = {
    /**
     * [Config Option] (Ext.grid.column.Column[]/Object)
     */
    columns?: any,

    /**
     * [Config Option] (Boolean)
     */
    rowLines?: boolean,

    /**
     * [Config Option] (String)
     */
    viewType?: string,

    /**
     * [Method] Reconfigures the grid with a new store columns
     * @param store Ext.data.Store The new store.
     * @param columns Object[] An array of column configs
     */
    reconfigure?: (
      store?: Ext$Ext$data.property$IStore,
      columns?: any[]
    ) => void,

    /**
     * [Config Option] (Ext.grid.column.Column[]/Object)
     */
    columns?: any,

    /**
     * [Config Option] (Boolean)
     */
    rowLines?: boolean,

    /**
     * [Config Option] (String)
     */
    viewType?: string,

    /**
     * [Method] Reconfigures the grid with a new store columns
     * @param store Ext.data.Store The new store.
     * @param columns Object[] An array of column configs
     */
    reconfigure?: (
      store?: Ext$Ext$data.property$IStore,
      columns?: any[]
    ) => void
  } & undefined.view$ITable;

  declare export type Ext$IPropGridProperty = {
    /**
     * [Config Option] (String/Object/Ext.data.Field)
     */
    idProperty?: any,

    /**
     * [Property] (Ext.util.MixedCollection)
     */
    fields?: Ext$Ext$util.util$IMixedCollection
  } & undefined.selection$IModel;

  declare export type Ext$IImg = {
    /**
     * [Config Option] (String)
     */
    alt?: string,

    /**
     * [Config Option] (String/Object)
     */
    autoEl?: any,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Number/String)
     */
    glyph?: any,

    /**
     * [Config Option] (String)
     */
    imgCls?: string,

    /**
     * [Config Option] (String)
     */
    src?: string,

    /**
     * [Config Option] (String)
     */
    title?: string,

    /**
     * [Method] Allows addition of behavior to the destroy operation
     */
    onDestroy?: () => void,

    /**
     * [Method] Template method called when this Component s DOM structure is created
     */
    onRender?: () => void,

    /**
     * [Method] Updates the src of the image
     * @param src String
     */
    setSrc?: (src?: string) => void
  } & Ext$flash$IComponent;

  declare export interface Ext$IIs {}

  declare export class Ext$Is {
    /**
     * [Property] (Boolean)
     */
    static Android: boolean;

    /**
     * [Property] (Boolean)
     */
    static Blackberry: boolean;

    /**
     * [Property] (Boolean)
     */
    static Desktop: boolean;

    /**
     * [Property] (Boolean)
     */
    static Linux: boolean;

    /**
     * [Property] (Boolean)
     */
    static Mac: boolean;

    /**
     * [Property] (Boolean)
     */
    static Phone: boolean;

    /**
     * [Property] (Boolean)
     */
    static Standalone: boolean;

    /**
     * [Property] (Object)
     */
    static Tablet: any;

    /**
     * [Property] (Boolean)
     */
    static Windows: boolean;

    /**
     * [Property] (Boolean)
     */
    static iOS: boolean;

    /**
     * [Property] (Boolean)
     */
    static iPad: boolean;

    /**
     * [Property] (Boolean)
     */
    static iPhone: boolean;

    /**
     * [Property] (Boolean)
     */
    static iPod: boolean;
  }

  /**
   * [Property] (String)
   */
  declare export var Ext$BLANK_IMAGE_URL: string;

  /**
   * [Property] (String)
   */
  declare export var Ext$SSL_SECURE_URL: string;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$USE_NATIVE_JSON: boolean;

  /**
   * [Property] (Number)
   */
  declare export var Ext$chromeVersion: number;

  /**
   * [Property] (Function)
   */
  declare export var Ext$emptyFn: any;

  /**
   * [Property] (Object)
   */
  declare export var Ext$emptyString: any;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$enableFx: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$enableGarbageCollector: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$enableListenerCollection: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$enableNestedListenerRemoval: boolean;

  /**
   * [Property] (String[])
   */
  declare export var Ext$enumerables: string[];

  /**
   * [Property] (Number)
   */
  declare export var Ext$firefoxVersion: number;

  /**
   * [Property] (Ext.util.Observable)
   */
  declare export var Ext$globalEvents: Ext$Ext$util.util$IObservable;

  /**
   * [Property] (Number)
   */
  declare export var Ext$ieVersion: number;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isChrome: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isFF10: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isFF3_0: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isFF3_5: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isFF3_6: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isFF4: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isFF5: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isGecko: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isGecko10: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isGecko3: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isGecko4: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isGecko5: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isIE: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isIE10: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isIE10m: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isIE10p: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isIE6: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isIE7: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isIE7m: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isIE7p: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isIE8: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isIE8m: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isIE8p: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isIE9: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isIE9m: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isIE9p: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isLinux: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isMac: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isOpera: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isOpera10_5: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isReady: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isSafari: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isSafari2: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isSafari3: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isSafari4: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isSafari5: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isSafari5_0: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isSecure: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isWebKit: boolean;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$isWindows: boolean;

  /**
   * [Property] (String)
   */
  declare export var Ext$name: string;

  /**
   * [Property] (Number)
   */
  declare export var Ext$operaVersion: number;

  /**
   * [Property] (Number)
   */
  declare export var Ext$safariVersion: number;

  /**
   * [Property] (Boolean)
   */
  declare export var Ext$useShims: boolean;

  /**
   * [Property] (Number)
   */
  declare export var Ext$webKitVersion: number;

  /**
   * [Method] Applies event listeners to elements by selectors when the document is ready
   * @param obj Object The list of behaviors to apply
   */
  declare export function Ext$addBehaviors(obj?: any): void;

  /**
   * [Method] Adds namespace s to known list
   * @param namespace String/String[]
   */
  declare export function Ext$addNamespaces(Ext$namespace?: any): void;

  /**
   * [Method] Loads Ext app Application class and starts it up with given configuration after the page is ready
   * @param config Object/String Application config object or name of a class derived from Ext.app.Application.
   */
  declare export function Ext$application(config?: any): void;

  /**
   * [Method] Copies all the properties of config to the specified object
   * @param object Object The receiver of the properties
   * @param config Object The source of the properties
   * @param defaults Object A different object that will also be applied for default values
   * @returns Object returns obj
   */
  declare export function Ext$apply(
    object?: any,
    config?: any,
    defaults?: any
  ): any;

  /**
   * [Method] Copies all the properties of config to object if they don t already exist
   * @param object Object The receiver of the properties
   * @param config Object The source of the properties
   * @returns Object returns obj
   */
  declare export function Ext$applyIf(object?: any, config?: any): any;

  /**
   * [Method] Utility wrapper that suspends layouts of all components for the duration of a given function
   * @param fn Function The function to execute.
   * @param scope Object The scope (this reference) in which the specified function is executed.
   */
  declare export function Ext$batchLayouts(fn?: any, scope?: any): void;

  /**
   * [Method] Create a new function from the provided fn change this to the provided scope optionally overrides arguments for the
   * @param fn Function The function to delegate.
   * @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the default global environment object (usually the browser window).
   * @param args Array Overrides arguments for the call. (Defaults to the arguments passed by the caller)
   * @param appendArgs Boolean/Number if True args are appended to call args instead of overriding, if a number the args are inserted at the specified position
   * @returns Function The new function
   */
  declare export function Ext$bind(
    fn?: any,
    scope?: any,
    args?: any[],
    appendArgs?: any
  ): any;

  /**
   * [Method] Execute a callback function in a particular scope
   * @param callback Function The callback to execute
   * @param scope Object The scope to execute in
   * @param args Array The arguments to pass to the function
   * @param delay Number Pass a number to delay the call by a number of milliseconds.
   * @returns Object The value returned by the callback or undefined (if there is a delay or if the callback is not a function).
   */
  declare export function Ext$callback(
    Ext$callback?: any,
    scope?: any,
    args?: any[],
    delay?: number
  ): any;

  /**
   * [Method] Old alias to Ext Array clean
   * @param array Array
   * @returns Array results
   */
  declare export function Ext$clean(array?: any[]): any[];

  /**
   * [Method] Clone simple variables including array  like objects DOM nodes and Date without keeping the old reference
   * @param item Object The variable to clone
   * @returns Object clone
   */
  declare export function Ext$clone(item?: any): any;

  /**
   * [Method] Coerces the first value if possible so that it is comparable to the second value
   * @param from Mixed The value to coerce
   * @param to Mixed The value it must be compared against
   * @returns Object The coerced value.
   */
  declare export function Ext$coerce(from?: any, to?: any): any;

  /**
   * [Method] Copies a set of named properties fom the source object to the destination object
   * @param dest Object The destination object.
   * @param source Object The source object.
   * @param names String/String[] Either an Array of property names, or a comma-delimited list of property names to copy.
   * @param usePrototypeKeys Boolean Defaults to false. Pass true to copy keys off of the prototype as well as the instance.
   * @returns Object The modified object.
   */
  declare export function Ext$copyTo(
    dest?: any,
    source?: any,
    names?: any,
    usePrototypeKeys?: boolean
  ): any;

  /**
   * [Method] Instantiate a class by either full name alias or alternate name
   * @param name String The class name or alias. Can be specified as xclass property if only one object parameter is specified.
   * @param args Object... Additional arguments after the name will be passed to the class' constructor.
   * @returns Object instance
   */
  declare export function Ext$create(Ext$name: string, ...args: any[]): any;

  /**
   * [Method] Instantiate a class by its alias
   * @param alias String
   * @param args Object... Additional arguments after the alias will be passed to the class constructor.
   * @returns Object instance
   */
  declare export function Ext$createByAlias(alias: string, ...args: any[]): any;

  /**
   * [Method] Old name for widget
   */
  declare export function Ext$createWidget(): void;

  /**
   * [Method] Shorthand for Ext JSON decode
   * @param json String The JSON string
   * @param safe Boolean True to return null, false to throw an exception if the JSON is invalid.
   * @returns Object The resulting object
   */
  declare export function Ext$decode(json?: string, safe?: boolean): any;

  /**
   * [Method] Calls this function after the number of millseconds specified optionally in a specific scope
   * @param fn Function The function to defer.
   * @param millis Number The number of milliseconds for the setTimeout call (if less than or equal to 0 the function is executed immediately)
   * @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the browser window.
   * @param args Array Overrides arguments for the call. (Defaults to the arguments passed by the caller)
   * @param appendArgs Boolean/Number if True args are appended to call args instead of overriding, if a number the args are inserted at the specified position
   * @returns Number The timeout id that can be used with clearTimeout
   */
  declare export function Ext$defer(
    fn?: any,
    millis?: number,
    scope?: any,
    args?: any[],
    appendArgs?: any
  ): number;

  /**
   * [Method] Defines a class or override
   * @param className String The class name to create in string dot-namespaced format, for example: 'My.very.awesome.Class', 'FeedViewer.plugin.CoolPager' It is highly recommended to follow this simple convention: - The root and the class name are 'CamelCased' - Everything else is lower-cased Pass null to create an anonymous class.
   * @param data Object The key - value pairs of properties to apply to this class. Property names can be of any valid strings, except those in the reserved listed below: - mixins - statics - config - alias - self - singleton - alternateClassName - override
   * @param createdFn Function Optional callback to execute after the class is created, the execution scope of which (this) will be the newly created class itself.
   * @returns Ext.Base
   */
  declare export function Ext$define(
    className?: string,
    Ext$data?: any,
    createdFn?: any
  ): Ext$Ext$IBase;

  /**
   * [Method] Create a closure for deprecated code
   * @param packageName String The package name
   * @param since String The last version before it's deprecated
   * @param closure Function The callback function to be executed with the specified version is less than the current version
   * @param scope Object The execution scope (this) if the closure
   */
  declare export function Ext$deprecate(
    packageName?: string,
    since?: string,
    closure?: any,
    scope?: any
  ): void;

  /**
   * [Method] Attempts to destroy any objects passed to it by removing all event listeners removing them from the DOM if applicab
   * @param args Ext.dom.Element/Ext.util.Observable/Ext.dom.Element[]/Ext.util.Observable[]... Any number of elements or components, or an Array of either of these to destroy.
   */
  declare export function Ext$destroy(args?: any): void;

  /**
   * [Method] Attempts to destroy and then remove a set of named properties of the passed object
   * @param o Object The object (most likely a Component) who's properties you wish to destroy.
   * @param args String... One or more names of the properties to destroy and remove from the object.
   */
  declare export function Ext$destroyMembers(o: any, ...args: any[]): void;

  /**
   * [Method] Iterates an array or an iterable value and invoke the given callback function for each item
   * @param iterable Array/NodeList/Object The value to be iterated. If this argument is not iterable, the callback function is called once.
   * @param fn Function The callback function. If it returns false, the iteration stops and this method returns the current index.
   * @param scope Object The scope (this reference) in which the specified function is executed.
   * @param reverse Boolean Reverse the iteration order (loop from the end to the beginning) Defaults false
   * @returns Boolean See description for the fn parameter.
   */
  declare export function Ext$each(
    iterable?: any,
    fn?: any,
    scope?: any,
    reverse?: boolean
  ): boolean;

  /**
   * [Method] Shorthand for Ext JSON encode
   * @param o Object The variable to encode
   * @returns String The JSON string
   */
  declare export function Ext$encode(o?: any): string;

  /**
   * [Method] Escapes the passed string for use in a regular expression
   * @param str String
   * @returns String
   */
  declare export function Ext$escapeRe(str?: string): string;

  /**
   * [Method] Convenient shortcut to Ext Loader exclude
   * @param excludes Array
   * @returns Object object contains require method for chaining
   */
  declare export function Ext$exclude(excludes?: any[]): any;

  /**
   * [Method] This method deprecated
   * @param superclass Function
   * @param overrides Object
   * @returns Function The subclass constructor from the overrides parameter, or a generated one if not provided.
   */
  declare export function Ext$extend(superclass?: any, overrides?: any): any;

  /**
   * [Method] Old alias to Ext Array flatten
   * @param array Array The array to flatten
   * @returns Array The 1-d array.
   */
  declare export function Ext$flatten(array?: any[]): any[];

  /**
   * [Method] Gets the singleton flyweight element with the passed node as the active element
   * @param dom String/HTMLElement The dom node or id
   * @param named String Allows for creation of named reusable flyweights to prevent conflicts (e.g. internally Ext uses "_global")
   * @returns Ext.dom.Element.Fly The singleton flyweight object (or null if no matching element was found)
   */
  declare export function Ext$fly(
    Ext$dom?: any,
    named?: string
  ): Ext$Ext$dom.element.abstractelement$IFly;

  /**
   * [Method] Retrieves Ext dom Element objects
   * @param el String/HTMLElement/Ext.Element The id of the node, a DOM Node or an existing Element.
   * @returns Ext.dom.Element The Element object (or null if no matching element was found)
   */
  declare export function Ext$get(el?: any): Ext$Ext$dom.Ext$IElement;

  /**
   * [Method] Returns the current document body as an Ext Element
   * @returns Ext.Element The document body
   */
  declare export function Ext$getBody(): Ext$Ext$IElement;

  /**
   * [Method] Get the class of the provided object returns null if it s not an instance of any class created with Ext define
   * @param object Object
   * @returns Ext.Class class
   */
  declare export function Ext$getClass(object?: any): Ext$Ext$IClass;

  /**
   * [Method] Get the name of the class by its reference or its instance  Ext ClassManager getName is usually invoked by the short
   * @param object Ext.Class/Object
   * @returns String className
   */
  declare export function Ext$getClassName(object?: any): string;

  /**
   * [Method] This is shorthand reference to Ext ComponentManager get
   * @param id String The component id
   * @returns Object Ext.Component The Component, undefined if not found, or null if a Class was found.
   */
  declare export function Ext$getCmp(Ext$id?: string): any;

  /**
   * [Method] Returns the current HTML document object as an Ext Element
   * @returns Ext.Element The document
   */
  declare export function Ext$getDoc(): Ext$Ext$IElement;

  /**
   * [Method] Returns the dom node for the passed String id  dom node or Ext Element
   * @param el String/HTMLElement/Ext.Element
   * @returns Object HTMLElement
   */
  declare export function Ext$getDom(el?: any): any;

  /**
   * [Method] Returns the current document head as an Ext Element
   * @returns Ext.Element The document head
   */
  declare export function Ext$getHead(): Ext$Ext$IElement;

  /**
   * [Method] Get namespace prefix for a class name
   * @param className String
   * @returns String Namespace prefix if it's known, otherwise undefined
   */
  declare export function Ext$getNamespace(className?: string): string;

  /**
   * [Method] Returns the current orientation of the mobile device
   * @returns String Either 'portrait' or 'landscape'
   */
  declare export function Ext$getOrientation(): string;

  /**
   * [Method] Utility method for getting the width of the browser s vertical scrollbar
   * @param force Boolean true to force a recalculation of the value.
   * @returns Number The width of a vertical scrollbar.
   */
  declare export function Ext$getScrollBarWidth(force?: boolean): number;

  /**
   * [Method] Returns the size of the browser scrollbars
   * @param force Boolean true to force a recalculation of the value.
   * @returns Object An object containing scrollbar sizes.
   */
  declare export function Ext$getScrollbarSize(force?: boolean): any;

  /**
   * [Method] Shortcut to Ext data StoreManager lookup
   * @param store String/Object The id of the Store, or a Store instance, or a store configuration
   * @returns Ext.data.Store
   */
  declare export function Ext$getStore(
    store?: any
  ): Ext$Ext$data.property$IStore;

  /**
   * [Method] Get the version number of the supplied package name will return the last registered version last Ext setVersion cal
   * @param packageName String The package name, for example: 'core', 'touch', 'extjs'
   * @returns Ext.Version The version
   */
  declare export function Ext$getVersion(
    packageName?: string
  ): Ext$Ext$IVersion;

  /**
   * [Method] Old alias to Ext String htmlDecode
   * @param value String The string to decode.
   * @returns String The decoded text.
   */
  declare export function Ext$htmlDecode(Ext$value?: string): string;

  /**
   * [Method] Old alias to Ext String htmlEncode
   * @param value String The string to encode.
   * @returns String The encoded text.
   */
  declare export function Ext$htmlEncode(Ext$value?: string): string;

  /**
   * [Method] Generates unique ids
   * @param el HTMLElement/Ext.Element The element to generate an id for
   * @param prefix String Id prefix (defaults "ext-gen")
   * @returns String The generated Id.
   */
  declare export function Ext$id(el?: any, prefix?: string): string;

  /**
   * [Method] A reusable identity function
   * @param o Object
   */
  declare export function Ext$identityFn(o?: any): void;

  /**
   * [Method] Invokes a method on each item in an Array
   * @param arr Array/NodeList The Array of items to invoke the method on.
   * @param methodName String The method name to invoke.
   * @param args Object... Arguments to send into the method invocation.
   * @returns Array The results of invoking the method on each item in the array.
   */
  declare export function Ext$invoke(
    arr: any,
    methodName: string,
    ...args: any[]
  ): any[];

  /**
   * [Method] Returns true if the passed value is a JavaScript Array false otherwise
   * @param target Object The target to test
   * @returns Boolean
   */
  declare export function Ext$isArray(target?: any): boolean;

  /**
   * [Method] Returns true if the passed value is a boolean
   * @param value Object The value to test
   * @returns Boolean
   */
  declare export function Ext$isBoolean(Ext$value?: any): boolean;

  /**
   * [Method] Returns true if the passed value is a JavaScript Date object false otherwise
   * @param object Object The object to test
   * @returns Boolean
   */
  declare export function Ext$isDate(object?: any): boolean;

  /**
   * [Method] Returns true if the passed value is defined
   * @param value Object The value to test
   * @returns Boolean
   */
  declare export function Ext$isDefined(Ext$value?: any): boolean;

  /**
   * [Method] Returns true if the passed value is an HTMLElement
   * @param value Object The value to test
   * @returns Boolean
   */
  declare export function Ext$isElement(Ext$value?: any): boolean;

  /**
   * [Method] Returns true if the passed value is empty false otherwise
   * @param value Object The value to test
   * @param allowEmptyString Boolean true to allow empty strings (defaults to false)
   * @returns Boolean
   */
  declare export function Ext$isEmpty(
    Ext$value?: any,
    allowEmptyString?: boolean
  ): boolean;

  /**
   * [Method] Returns true if the passed value is a JavaScript Function false otherwise
   * @param value Object The value to test
   * @returns Boolean
   */
  declare export function Ext$isFunction(Ext$value?: any): boolean;

  /**
   * [Method] Returns true if the passed value is iterable that is if elements of it are addressable using array notation with nu
   * @param value Object The value to test
   * @returns Boolean
   */
  declare export function Ext$isIterable(Ext$value?: any): boolean;

  /**
   * [Method] Returns true if the passed value is a number
   * @param value Object The value to test
   * @returns Boolean
   */
  declare export function Ext$isNumber(Ext$value?: any): boolean;

  /**
   * [Method] Validates that a value is numeric
   * @param value Object Examples: 1, '1', '2.34'
   * @returns Boolean True if numeric, false otherwise
   */
  declare export function Ext$isNumeric(Ext$value?: any): boolean;

  /**
   * [Method] Returns true if the passed value is a JavaScript Object false otherwise
   * @param value Object The value to test
   * @returns Boolean
   */
  declare export function Ext$isObject(Ext$value?: any): boolean;

  /**
   * [Method] Returns true if the passed value is a JavaScript primitive  a string number or boolean
   * @param value Object The value to test
   * @returns Boolean
   */
  declare export function Ext$isPrimitive(Ext$value?: any): boolean;

  /**
   * [Method] Returns true if the passed value is a string
   * @param value Object The value to test
   * @returns Boolean
   */
  declare export function Ext$isString(Ext$value?: any): boolean;

  /**
   * [Method] Returns true if the passed value is a TextNode
   * @param value Object The value to test
   * @returns Boolean
   */
  declare export function Ext$isTextNode(Ext$value?: any): boolean;

  /**
   * [Method] Iterates either an array or an object
   * @param object Object/Array The object or array to be iterated.
   * @param fn Function The function to be called for each iteration. See and Ext.Array.each and Ext.Object.each for detailed lists of arguments passed to this function depending on the given object type that is being iterated.
   * @param scope Object The scope (this reference) in which the specified function is executed. Defaults to the object being iterated itself.
   */
  declare export function Ext$iterate(
    object?: any,
    fn?: any,
    scope?: any
  ): void;

  /**
   * [Method] Logs a message
   * @param options String/Object The message to log or an options object with any of the following properties:  msg: The message to log (required). level: One of: "error", "warn", "info" or "log" (the default is "log"). dump: An object to dump to the log as part of the message. stack: True to include a stack trace in the log. indent: Cause subsequent log statements to be indented one step. outdent: Cause this and following statements to be one step less indented.
   * @param message String... The message to log (required unless specified in options object).
   */
  declare export function Ext$log(options: any, ...message: any[]): void;

  /**
   * [Method] Old alias to Ext Array max
   * @param array Array/NodeList The Array from which to select the maximum value.
   * @param comparisonFn Function a function to perform the comparision which determines maximization. If omitted the ">" operator will be used. Note: gt = 1; eq = 0; lt = -1
   * @returns Object maxValue The maximum value
   */
  declare export function Ext$max(array?: any, comparisonFn?: any): any;

  /**
   * [Method] Old alias to Ext Array mean
   * @param array Array The Array to calculate the mean value of.
   * @returns Number The mean.
   */
  declare export function Ext$mean(array?: any[]): number;

  /**
   * [Method] A convenient alias method for Ext Object merge
   * @param destination Object The object into which all subsequent objects are merged.
   * @param object Object... Any number of objects to merge into the destination.
   * @returns Object merged The destination object with all passed objects merged in.
   */
  declare export function Ext$merge(destination: any, ...object: any[]): any;

  /**
   * [Method] Old alias to Ext Array min
   * @param array Array/NodeList The Array from which to select the minimum value.
   * @param comparisonFn Function a function to perform the comparision which determines minimization. If omitted the "&lt;" operator will be used. Note: gt = 1; eq = 0; lt = -1
   * @returns Object minValue The minimum value
   */
  declare export function Ext$min(array?: any, comparisonFn?: any): any;

  /**
   * [Method] Creates namespaces to be used for scoping variables and classes so that they are not global
   * @param namespaces String...
   * @returns Object The namespace object. (If multiple arguments are passed, this will be the last namespace created)
   */
  declare export function Ext$namespace(...namespaces: any[]): any;

  /**
   * [Method] Convenient alias for Ext namespace
   * @param namespaces String...
   * @returns Object The namespace object. (If multiple arguments are passed, this will be the last namespace created)
   */
  declare export function Ext$ns(...namespaces: any[]): any;

  /**
   * [Method] Validate that a value is numeric and convert it to a number if necessary
   * @param value Object
   * @param defaultValue Number The value to return if the original value is non-numeric
   * @returns Number value, if numeric, defaultValue otherwise
   */
  declare export function Ext$num(
    Ext$value?: any,
    defaultValue?: number
  ): number;

  /**
   * [Method] Shorthand for the Ext util Observable addListener method of the globalEvents Observable instance
   * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
   * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
   * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
   * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
   * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
   */
  declare export function Ext$on(
    eventName?: any,
    fn?: any,
    scope?: any,
    options?: any
  ): any;

  /**
   * [Method] Adds a listener to be notified when the document is ready before onload and before images are loaded
   * @param fn Function The method the event invokes.
   * @param scope Object The scope (this reference) in which the handler function executes. Defaults to the browser window.
   * @param options Object Options object as passed to Ext.Element.addListener.
   */
  declare export function Ext$onDocumentReady(
    fn?: any,
    scope?: any,
    options?: any
  ): void;

  /**
   * [Method] Adds a function to be called when the DOM is ready and all required classes have been loaded
   * @param fn Function The function callback to be executed
   * @param scope Object The execution scope (this reference) of the callback function
   * @param options Object The options to modify the listener as passed to addListener.
   */
  declare export function Ext$onReady(
    fn?: any,
    scope?: any,
    options?: any
  ): void;

  /**
   * [Method] Overrides members of the specified target with the given values
   * @param target Object The target to override.
   * @param overrides Object The properties to add or replace on target.
   */
  declare export function Ext$override(target?: any, overrides?: any): void;

  /**
   * [Method] Partitions the set into two sets a true set and a false set
   * @param arr Array/NodeList The array to partition
   * @param truth Function a function to determine truth. If this is omitted the element itself must be able to be evaluated for its truthfulness.
   * @returns Array [array of truish values, array of falsy values]
   */
  declare export function Ext$partition(arr?: any, truth?: any): any[];

  /**
   * [Method] Create a new function from the provided fn the arguments of which are pre set to args
   * @param fn Function The original function
   * @param args Array The arguments to pass to new callback
   * @param scope Object The scope (this reference) in which the function is executed.
   * @returns Function The new callback function
   */
  declare export function Ext$pass(fn?: any, args?: any[], scope?: any): any;

  /**
   * [Method] Old alias to Ext Array pluck
   * @param array Array/NodeList The Array of items to pluck the value from.
   * @param propertyName String The property name to pluck from each element.
   * @returns Array The value from each item in the Array.
   */
  declare export function Ext$pluck(array?: any, propertyName?: string): any[];

  /**
   * [Method] Shorthand for Ext PluginManager registerType
   * @param ptype String The ptype mnemonic string by which the Plugin class may be looked up.
   * @param cls Function The new Plugin class.
   */
  declare export function Ext$preg(ptype?: string, cls?: any): void;

  /**
   * [Method] Shorthand of Ext dom Query select
   * @param path String The selector/xpath query
   * @param root HTMLElement The start of the query.
   * @param type String Either "select" or "simple" for a simple selector match (only valid when used when the call is deferred to the jsSelect method)
   * @param single Boolean Pass true to select only the first matching node using document.querySelector (where available)
   * @returns HTMLElement[] An array of DOM elements (not a NodeList as returned by querySelectorAll).
   */
  declare export function Ext$query(
    path?: string,
    root?: HTMLElement,
    Ext$type?: string,
    single?: boolean
  ): HTMLElement[];

  /**
   * [Method] Old way for creating Model classes
   * @param name String Name of the Model class.
   * @param config Object A configuration object for the Model you wish to create.
   * @returns Ext.data.Model The newly registered Model
   */
  declare export function Ext$regModel(
    Ext$name?: string,
    config?: any
  ): Ext$Ext$data.selection$IModel;

  /**
   * [Method] Creates a new store for the given id and config then registers it with the Store Manager
   * @param id String The id to set on the new store
   * @param config Object The store config
   */
  declare export function Ext$regStore(Ext$id?: string, config?: any): void;

  /**
   * [Method] Removes a DOM node from the document
   * @param node HTMLElement The node to remove
   */
  declare export function Ext$removeNode(node?: HTMLElement): void;

  /**
   * [Method] Loads all classes by the given names and all their direct dependencies optionally executes the given callback functi
   * @param expressions String/Array Can either be a string or an array of string
   * @param fn Function The callback function
   * @param scope Object The execution scope (this) of the callback function
   * @param excludes String/Array Classes to be excluded, useful when being used with expressions
   */
  declare export function Ext$require(
    expressions?: any,
    fn?: any,
    scope?: any,
    excludes?: any
  ): void;

  /**
   * [Method]
   * @param flush Object
   */
  declare export function Ext$resumeLayouts(flush?: any): void;

  /**
   * [Method] Shorthand of Ext Element select
   * @param selector String The CSS selector
   * @param unique Boolean True to create a unique Ext.Element for each element. Defaults to a shared flyweight object.
   * @returns Ext.CompositeElement The composite element
   */
  declare export function Ext$select(
    selector?: string,
    Ext$unique?: boolean
  ): Ext$Ext$ICompositeElement;

  /**
   * [Method] Sets the default font family to use for components that support a glyph config
   * @param fontFamily String The name of the font-family
   */
  declare export function Ext$setGlyphFontFamily(fontFamily?: string): void;

  /**
   * [Method] Set version number for the given package name
   * @param packageName String The package name, for example: 'core', 'touch', 'extjs'
   * @param version String/Ext.Version The version, for example: '1.2.3alpha', '2.4.0-dev'
   * @returns any
   */
  declare export function Ext$setVersion(
    packageName?: string,
    version?: any
  ): any;

  /**
   * [Method] Old alias to Ext Array sum
   * @param array Array The Array to calculate the sum value of.
   * @returns Number The sum.
   */
  declare export function Ext$sum(array?: any[]): number;

  /**
   * [Method]
   */
  declare export function Ext$suspendLayouts(): void;

  /**
   * [Method] Synchronously loads all classes by the given names and all their direct dependencies optionally executes the given c
   * @param expressions String/Array Can either be a string or an array of string
   * @param fn Function The callback function
   * @param scope Object The execution scope (this) of the callback function
   * @param excludes String/Array Classes to be excluded, useful when being used with expressions
   */
  declare export function Ext$syncRequire(
    expressions?: any,
    fn?: any,
    scope?: any,
    excludes?: any
  ): void;

  /**
   * [Method] Converts any iterable numeric indices and a length property into a true array
   * @param iterable Object the iterable object to be turned into a true Array.
   * @param start Number a zero-based index that specifies the start of extraction. Defaults to 0
   * @param end Number a 1-based index that specifies the end of extraction. Defaults to the last index of the iterable value
   * @returns Array array
   */
  declare export function Ext$toArray(
    iterable?: any,
    start?: number,
    end?: number
  ): any[];

  /**
   * [Method] Turns an array into a sentence joined by a specified connector  e g Ext toSentence  Adama Tigh Roslin
   * @param items String[] The array to create a sentence from
   * @param connector String The string to use to connect the last two words. Usually 'and' or 'or' - defaults to 'and'.
   * @returns String The sentence string
   */
  declare export function Ext$toSentence(
    items?: string[],
    connector?: string
  ): string;

  /**
   * [Method] Old alias to typeOf
   * @param value Object
   * @returns String
   */
  declare export function Ext$type(Ext$value?: any): string;

  /**
   * [Method] Returns the type of the given variable in string format
   * @param value Object
   * @returns String
   */
  declare export function Ext$typeOf(Ext$value?: any): string;

  /**
   * [Method] Shorthand for the Ext util Observable removeListener method of the globalEvents Observable instance
   * @param eventName String The type of event the handler was associated with.
   * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
   * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
   */
  declare export function Ext$un(
    eventName?: string,
    fn?: any,
    scope?: any
  ): void;

  /**
   * [Method] Old alias to Ext Array unique
   * @param array Array
   * @returns Array results
   */
  declare export function Ext$unique(array?: any[]): any[];

  /**
   * [Method] Old alias to Ext String urlAppend
   * @param url String The URL to append to.
   * @param string String The content to append to the URL.
   * @returns String The resulting URL
   */
  declare export function Ext$urlAppend(url?: string, string?: string): string;

  /**
   * [Method] Alias for Ext Object fromQueryString
   * @param queryString String The query string to decode
   * @param recursive Boolean Whether or not to recursively decode the string. This format is supported by PHP / Ruby on Rails servers and similar.
   * @returns Object
   */
  declare export function Ext$urlDecode(
    queryString?: string,
    recursive?: boolean
  ): any;

  /**
   * [Method] Takes an object and converts it to an encoded query string
   * @param object Object The object to encode
   * @param recursive Boolean Whether or not to interpret the object in recursive format. (PHP / Ruby on Rails servers and similar).
   * @returns String queryString
   */
  declare export function Ext$urlEncode(
    object?: any,
    recursive?: boolean
  ): string;

  /**
   * [Method] Utility method for returning a default value if the passed value is empty
   * @param value Object The value to test
   * @param defaultValue Object The value to return if the original value is empty
   * @param allowBlank Boolean true to allow zero length strings to qualify as non-empty.
   * @returns Object value, if non-empty, else defaultValue
   */
  declare export function Ext$value(
    Ext$value?: any,
    defaultValue?: any,
    allowBlank?: boolean
  ): any;

  /**
   * [Method] Returns the given value itself if it s not empty as described in isEmpty returns the default value second argument
   * @param value Object The value to test
   * @param defaultValue Object The value to return if the original value is empty
   * @param allowBlank Boolean true to allow zero length strings to qualify as non-empty (defaults to false)
   * @returns Object value, if non-empty, else defaultValue
   */
  declare export function Ext$valueFrom(
    Ext$value?: any,
    defaultValue?: any,
    allowBlank?: boolean
  ): any;

  /**
   * [Method] Convenient shorthand to create a widget by its xtype or a config object
   * @param name String The xtype of the widget to create.
   * @param config Object The configuration object for the widget constructor.
   * @returns Object The widget instance
   */
  declare export function Ext$widget(Ext$name?: string, config?: any): any;

  /**
   * [Method] Zips N sets together
   * @param arr Array/NodeList... This argument may be repeated. Array(s) to contribute values.
   * @param zipper Function The last item in the argument list. This will drive how the items are zipped together.
   * @returns Array The zipped set.
   */
  declare export function Ext$zip(arr?: any, zipper?: any): any[];

  declare export interface Ext$IJSON {}

  declare export class Ext$JSON {
    /**
     * [Method] Decodes parses a JSON string to an object
     * @param json String The JSON string
     * @param safe Boolean True to return null, false to throw an exception if the JSON is invalid.
     * @returns Object The resulting object
     */
    static decode(json?: string, safe?: boolean): any;

    /**
     * [Method] Encodes an Object Array or other value
     * @param o Object The variable to encode
     * @returns String The JSON string
     */
    static encode(o?: any): string;

    /**
     * [Method] Encodes a Date
     * @param d Date The Date to encode
     * @returns String The string literal to use in a JSON string.
     */
    static encodeDate(d?: any): string;

    /**
     * [Method] Encodes a String
     * @param s String The String to encode
     * @returns String The string literal to use in a JSON string.
     */
    static encodeString(s?: string): string;

    /**
     * [Method] The function which encode uses to encode all javascript values to their JSON representations when Ext USE_NATIVE_JSON
     * @param o Object Any javascript value to be converted to its JSON representation
     * @returns String The JSON representation of the passed value.
     */
    static encodeValue(o?: any): string;
  }

  declare export interface layout$ISizePolicy {
    /**
     * [Property] (Boolean)
     */
    readsHeight?: boolean;

    /**
     * [Property] (Boolean)
     */
    readsWidth?: boolean;

    /**
     * [Property] (Boolean)
     */
    setsHeight?: boolean;

    /**
     * [Property] (Boolean)
     */
    setsWidth?: boolean;
  }

  declare export interface Ext$ILoader {}

  declare export class Ext$Loader {
    /**
     * [Config Option] (Boolean)
     */
    static disableCaching: boolean;

    /**
     * [Config Option] (String)
     */
    static disableCachingParam: string;

    /**
     * [Config Option] (Boolean)
     */
    static enabled: boolean;

    /**
     * [Config Option] (Boolean)
     */
    static garbageCollect: boolean;

    /**
     * [Config Option] (Object)
     */
    static paths: any;

    /**
     * [Config Option] (Boolean)
     */
    static preserveScripts: boolean;

    /**
     * [Config Option] (Boolean)
     */
    static scriptChainDelay: boolean;

    /**
     * [Config Option] (String)
     */
    static scriptCharset: string;

    /**
     * [Property] (Array)
     */
    static history: any[];

    /**
     * [Method] Sets a batch of path entries
     * @param paths Object a set of className: path mappings
     * @returns Ext.Loader this
     */
    static addClassPathMappings(paths?: Ext$Object): Ext$Ext$ILoader;

    /**
     * [Method] Explicitly exclude files from being loaded
     * @param excludes Array
     * @returns Object object contains require method for chaining
     */
    static exclude(excludes?: any[]): any;

    /**
     * [Method] Get the config value corresponding to the specified name
     * @param name String The config property name
     * @returns Object
     */
    static getConfig(Ext$name?: string): any;

    /**
     * [Method] Translates a className to a file path by adding the the proper prefix and converting the  s to  s
     * @param className String
     * @returns String path
     */
    static getPath(className?: string): string;

    /**
     * [Method] Loads the specified script URL and calls the supplied callbacks
     * @param options Object/String The options object or simply the URL to load.
     */
    static loadScript(options?: any): void;

    /**
     * [Method] Add a new listener to be executed when all required scripts are fully loaded
     * @param fn Function The function callback to be executed
     * @param scope Object The execution scope (this) of the callback function
     * @param withDomReady Boolean Whether or not to wait for document dom ready as well
     */
    static onReady(fn?: any, scope?: any, withDomReady?: boolean): void;

    /**
     * [Method] Loads all classes by the given names and all their direct dependencies optionally executes the given callback functi
     * @param expressions String/Array Can either be a string or an array of string
     * @param fn Function The callback function
     * @param scope Object The execution scope (this) of the callback function
     * @param excludes String/Array Classes to be excluded, useful when being used with expressions
     */
    static require(
      expressions?: any,
      fn?: any,
      scope?: any,
      excludes?: any
    ): void;

    /**
     * [Method] Set the configuration for the loader
     * @param config Object The config object to override the default values
     * @returns Ext.Loader this
     */
    static setConfig(config?: any): Ext$Ext$ILoader;

    /**
     * [Method] Sets the path of a namespace
     * @param name String/Object See flexSetter
     * @param path String See flexSetter
     * @returns Ext.Loader this
     */
    static setPath(Ext$name?: any, path?: string): Ext$Ext$ILoader;

    /**
     * [Method] Synchronously loads all classes by the given names and all their direct dependencies optionally executes the given c
     * @param expressions String/Array Can either be a string or an array of string
     * @param fn Function The callback function
     * @param scope Object The execution scope (this) of the callback function
     * @param excludes String/Array Classes to be excluded, useful when being used with expressions
     */
    static syncRequire(
      expressions?: any,
      fn?: any,
      scope?: any,
      excludes?: any
    ): void;
  }

  declare export type Ext$ILoadMask = {
    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (String)
     */
    maskCls?: string,

    /**
     * [Config Option] (String)
     */
    msg?: string,

    /**
     * [Config Option] (String)
     */
    msgCls?: string,

    /**
     * [Config Option] (Ext.XTemplate/String/String[])
     */
    renderTpl?: any,

    /**
     * [Config Option] (Ext.data.Store)
     */
    store?: Ext$Ext$data.property$IStore,

    /**
     * [Config Option] (Ext.Component)
     */
    target?: Ext$flash$IComponent,

    /**
     * [Config Option] (Boolean)
     */
    useMsg?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    useTargetEl?: boolean,

    /**
     * [Method] Allows addition of behavior after rendering is complete
     */
    afterRender?: () => void,

    /**
     * [Method] Invoked after the Component is shown after onShow is called
     */
    afterShow?: () => void,

    /**
     * [Method] Changes the data store bound to this LoadMask
     * @param store Ext.data.Store The store to bind to this LoadMask
     */
    bindStore?: (store?: Ext$Ext$data.property$IStore) => void,

    /**
     * [Method] Binds listeners for this component to the store
     * @param store Ext.data.AbstractStore The store to bind to
     */
    bindStoreListeners?: (store?: Ext$Ext$data.data$IAbstractStore) => void,

    /**
     * [Method] Center this Component in its container
     * @returns Ext.Component this
     */
    center?: () => Ext$flash$IComponent,

    /**
     * [Method] Moves this floating Component into a constrain region
     * @param constrainTo String/HTMLElement/Ext.Element/Ext.util.Region The Element or Region into which this Component is to be constrained. Defaults to the element into which this floating Component was rendered.
     */
    doConstrain?: (constrainTo?: any) => void,

    /**
     * [Method] Gets the current store instance
     * @returns Ext.data.AbstractStore The store, null if one does not exist.
     */
    Ext$getStore?: () => Ext$Ext$data.data$IAbstractStore,

    /**
     * [Method] Gets the listeners to bind to a new store
     * @param store Object
     * @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance.
     */
    getStoreListeners?: (store?: any) => any,

    /**
     * [Method] Hides this Component setting it to invisible using the configured hideMode
     * @returns Ext.Component this
     */
    hide?: () => Ext$flash$IComponent,

    /**
     * [Method] Template method it is called when a new store is bound to the current instance
     * @param store Ext.data.AbstractStore The store being bound
     * @param initial Boolean True if this store is being bound as initialization of the instance.
     */
    onBindStore?: (
      store?: Ext$Ext$data.data$IAbstractStore,
      initial?: boolean
    ) => void,

    /**
     * [Method] Allows addition of behavior to the destroy operation
     */
    onDestroy?: () => void,

    /**
     * [Method] Allows addition of behavior to the disable operation
     */
    onDisable?: () => void,

    /**
     * [Method] Possibly animates down to a target element
     */
    onHide?: () => void,

    /**
     * [Method] Allows addition of behavior to the show operation
     */
    onShow?: () => void,

    /**
     * [Method] Template method it is called when an existing store is unbound from the current instance
     * @param store Ext.data.AbstractStore The store being unbound
     * @param initial Boolean True if this store is being bound as initialization of the instance.
     */
    onUnbindStore?: (
      store?: Ext$Ext$data.data$IAbstractStore,
      initial?: boolean
    ) => void,

    /**
     * [Method] This method is called internally by Ext ZIndexManager to signal that a floating Component has either been moved to th
     * @param active Boolean True to activate the Component, false to deactivate it.
     * @param newActive Ext.Component The newly active Component which is taking over topmost zIndex position.
     */
    setActive?: (active?: boolean, newActive?: Ext$flash$IComponent) => void,

    /**
     * [Method] Shows this Component rendering it first if autoRender or floating are true
     * @returns Ext.Component this
     */
    show?: () => Ext$flash$IComponent,

    /**
     * [Method] Sends this Component to the back of lower z index than any other visible windows
     * @returns Ext.Component this
     */
    toBack?: () => Ext$flash$IComponent,

    /**
     * [Method] Brings this floating Component to the front of any other visible floating Components managed by the same ZIndexManag
     * @param preventFocus Boolean Specify true to prevent the Component from being focused.
     * @returns Ext.Component this
     */
    toFront?: (preventFocus?: boolean) => Ext$flash$IComponent,

    /**
     * [Method] Unbinds listeners from this component to the store
     * @param store Ext.data.AbstractStore The store to unbind from
     */
    unbindStoreListeners?: (store?: Ext$Ext$data.data$IAbstractStore) => void
  } & Ext$flash$IComponent &
    undefined.util$IFloating &
    undefined.util$IBindable;

  declare export type menu$ISeparator = {
    /**
     * [Config Option] (String)
     */
    separatorCls?: string,

    /**
     * [Config Option] (String)
     */
    baseCls?: string
  } & undefined.toolbar$IItem;

  declare export type Ext$IMessageBox = {
    /**
     * [Config Option] (String)
     */
    closeAction?: string,

    /**
     * [Config Option] (String)
     */
    cls?: string,

    /**
     * [Config Option] (Boolean)
     */
    constrain?: boolean,

    /**
     * [Config Option] (String)
     */
    hideMode?: string,

    /**
     * [Config Option] (Ext.enums.Layout/Object)
     */
    Ext$layout?: any,

    /**
     * [Config Option] (Number)
     */
    maxHeight?: number,

    /**
     * [Config Option] (Number)
     */
    maxWidth?: number,

    /**
     * [Config Option] (Number)
     */
    minHeight?: number,

    /**
     * [Config Option] (Number)
     */
    minWidth?: number,

    /**
     * [Config Option] (Boolean/Object)
     */
    resizable?: any,

    /**
     * [Config Option] (Boolean/Number)
     */
    shrinkWrapDock?: any,

    /**
     * [Config Option] (String)
     */
    title?: string,

    /**
     * [Property] (Number)
     */
    CANCEL?: number,

    /**
     * [Property] (String)
     */
    ERROR?: string,

    /**
     * [Property] (String)
     */
    INFO?: string,

    /**
     * [Property] (Number)
     */
    NO?: number,

    /**
     * [Property] (Number)
     */
    OK?: number,

    /**
     * [Property] (Number)
     */
    OKCANCEL?: number,

    /**
     * [Property] (String)
     */
    QUESTION?: string,

    /**
     * [Property] (String)
     */
    WARNING?: string,

    /**
     * [Property] (Number)
     */
    YES?: number,

    /**
     * [Property] (Number)
     */
    YESNO?: number,

    /**
     * [Property] (Number)
     */
    YESNOCANCEL?: number,

    /**
     * [Property] (Object)
     */
    buttonText?: any,

    /**
     * [Property] (Number)
     */
    defaultTextHeight?: number,

    /**
     * [Property] (Number)
     */
    minProgressWidth?: number,

    /**
     * [Property] (Number)
     */
    minPromptWidth?: number,

    /**
     * [Method] Displays a standard read only message box with an OK button comparable to the basic JavaScript alert prompt
     * @param title String The title bar text
     * @param msg String The message box body text
     * @param fn Function The callback function invoked after the message box is closed. See show method for details.
     * @param scope Object The scope (this reference) in which the callback is executed.
     * @returns Ext.window.MessageBox this
     */
    alert?: (
      title?: string,
      msg?: string,
      fn?: any,
      scope?: any
    ) => Ext$Ext$window.Ext$IMessageBox,

    /**
     * [Method] Displays a confirmation message box with Yes and No buttons comparable to JavaScript s confirm
     * @param title String The title bar text
     * @param msg String The message box body text
     * @param fn Function The callback function invoked after the message box is closed. See show method for details.
     * @param scope Object The scope (this reference) in which the callback is executed.
     * @returns Ext.window.MessageBox this
     */
    confirm?: (
      title?: string,
      msg?: string,
      fn?: any,
      scope?: any
    ) => Ext$Ext$window.Ext$IMessageBox,

    /**
     * [Method] Hides this Component setting it to invisible using the configured hideMode
     * @returns Ext.Component this
     */
    hide?: () => Ext$flash$IComponent,

    /**
     * [Method] Allows addition of behavior to the show operation
     */
    onShow?: () => void,

    /**
     * [Method] Displays a message box with a progress bar
     * @param title String The title bar text
     * @param msg String The message box body text
     * @param progressText String The text to display inside the progress bar
     * @returns Ext.window.MessageBox this
     */
    progress?: (
      title?: string,
      msg?: string,
      progressText?: string
    ) => Ext$Ext$window.Ext$IMessageBox,

    /**
     * [Method] Displays a message box with OK and Cancel buttons prompting the user to enter some text comparable to JavaScript s p
     * @param title String The title bar text
     * @param msg String The message box body text
     * @param fn Function The callback function invoked after the message box is closed. See show method for details.
     * @param scope Object The scope (this reference) in which the callback is executed.
     * @param multiline Boolean/Number True to create a multiline textbox using the defaultTextHeight property, or the height in pixels to create the textbox/
     * @param value String Default value of the text input element
     * @returns Ext.window.MessageBox this
     */
    prompt?: (
      title?: string,
      msg?: string,
      fn?: any,
      scope?: any,
      multiline?: any,
      Ext$value?: string
    ) => Ext$Ext$window.Ext$IMessageBox,

    /**
     * [Method] Adds the specified icon to the dialog
     * @param icon String A CSS classname specifying the icon's background image url, or empty string to clear the icon
     * @param width Number The width of the icon. If not specified, the default is used
     * @param height Number The height of the icon. If not specified, the default is used
     * @returns Ext.window.MessageBox this
     */
    setIcon?: (
      icon?: string,
      width?: number,
      height?: number
    ) => Ext$Ext$window.Ext$IMessageBox,

    /**
     * [Method] Displays a new message box or reinitializes an existing message box based on the config options passed in
     * @param config Object The following config options are supported:
     * @returns Ext.window.MessageBox this
     */
    show?: (config?: any) => Ext$Ext$window.Ext$IMessageBox,

    /**
     * [Method] Updates a progress style message box s text and progress bar
     * @param value Number Any number between 0 and 1 (e.g., .5)
     * @param progressText String The progress text to display inside the progress bar.
     * @param msg String The message box's body text is replaced with the specified string (defaults to undefined so that any existing body text will not get overwritten by default unless a new value is passed in)
     * @returns Ext.window.MessageBox this
     */
    updateProgress?: (
      Ext$value?: number,
      progressText?: string,
      msg?: string
    ) => Ext$Ext$window.Ext$IMessageBox,

    /**
     * [Method] Displays a message box with an infinitely auto updating progress bar
     * @param msg String The message box body text
     * @param title String The title bar text
     * @param config Object A Ext.ProgressBar.wait config object
     * @returns Ext.window.MessageBox this
     */
    wait?: (
      msg?: string,
      title?: string,
      config?: any
    ) => Ext$Ext$window.Ext$IMessageBox
  } & undefined.Ext$IMessageBox;

  declare export class Ext$MessageBox {
    /**
     * [Property] (Number)
     */
    static CANCEL: number;

    /**
     * [Property] (String)
     */
    static ERROR: string;

    /**
     * [Property] (String)
     */
    static INFO: string;

    /**
     * [Property] (Number)
     */
    static NO: number;

    /**
     * [Property] (Number)
     */
    static OK: number;

    /**
     * [Property] (Number)
     */
    static OKCANCEL: number;

    /**
     * [Property] (String)
     */
    static QUESTION: string;

    /**
     * [Property] (String)
     */
    static WARNING: string;

    /**
     * [Property] (Number)
     */
    static YES: number;

    /**
     * [Property] (Number)
     */
    static YESNO: number;

    /**
     * [Property] (Number)
     */
    static YESNOCANCEL: number;

    /**
     * [Property] (Boolean)
     */
    static _isLayoutRoot: boolean;

    /**
     * [Property] (Ext.dom.Element)
     */
    static body: Ext$Ext$dom.Ext$IElement;

    /**
     * [Property] (Object)
     */
    static buttonText: any;

    /**
     * [Property] (String)
     */
    static contentPaddingProperty: string;

    /**
     * [Property] (Ext.util.ComponentDragger)
     */
    static Ext$dd: Ext$Ext$util.util$IComponentDragger;

    /**
     * [Property] (Number)
     */
    static defaultTextHeight: number;

    /**
     * [Property] (Boolean)
     */
    static draggable: boolean;

    /**
     * [Property] (Ext.Container)
     */
    static floatParent: Ext$Ext$IContainer;

    /**
     * [Property] (Object)
     */
    static frameSize: any;

    /**
     * [Property] (Object)
     */
    static hasListeners: any;

    /**
     * [Property] (Boolean)
     */
    static isComponent: boolean;

    /**
     * [Property] (Boolean)
     */
    static isObservable: boolean;

    /**
     * [Property] (Boolean)
     */
    static isPanel: boolean;

    /**
     * [Property] (Boolean)
     */
    static isWindow: boolean;

    /**
     * [Property] (Ext.util.AbstractMixedCollection)
     */
    static items: Ext$Ext$util.util$IAbstractMixedCollection;

    /**
     * [Property] (Boolean)
     */
    static maskOnDisable: boolean;

    /**
     * [Property] (Number)
     */
    static minProgressWidth: number;

    /**
     * [Property] (Number)
     */
    static minPromptWidth: number;

    /**
     * [Property] (Ext.Container)
     */
    static ownerCt: Ext$Ext$IContainer;

    /**
     * [Property] (Boolean)
     */
    static rendered: boolean;

    /**
     * [Property] (Object)
     */
    static scrollFlags: any;

    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Property] (Ext.ZIndexManager)
     */
    static zIndexManager: Ext$Ext$IZIndexManager;

    /**
     * [Property] (Ext.Container)
     */
    static zIndexParent: Ext$Ext$IContainer;

    /**
     * [Method] Adds Component s to this Container
     * @param component Ext.Component[]|Object[]/Ext.Component.../Object... Either one or more Components to add or an Array of Components to add. See items for additional information.
     * @returns Ext.Component[]/Ext.Component The Components that were added.
     */
    static add(component?: any): any;

    /**
     * [Method] Adds a CSS class to the body element
     * @param cls String The class to add
     * @returns Ext.panel.Panel this
     */
    static addBodyCls(cls?: string): Ext$Ext$panel.tree$IPanel;

    /**
     * [Method] Adds each argument passed to this method to the childEls array
     */
    static addChildEls(): void;

    /**
     * [Method] Adds a CSS class to the top level element representing this component
     * @param cls String/String[] The CSS class name to add.
     * @returns Ext.Component Returns the Component to allow method chaining.
     */
    static addClass(cls?: any): Ext$flash$IComponent;

    /**
     * [Method] Adds a CSS class to the top level element representing this component
     * @param cls String/String[] The CSS class name to add.
     * @returns Ext.Component Returns the Component to allow method chaining.
     */
    static addCls(cls?: any): Ext$flash$IComponent;

    /**
     * [Method] Adds a cls to the uiCls array which will also call addUIClsToElement and adds to all elements of this component
     * @param classes String/String[] A string or an array of strings to add to the uiCls.
     * @param skip Object (Boolean) skip true to skip adding it to the class and do it later (via the return).
     */
    static addClsWithUI(classes?: any, skip?: any): void;

    /**
     * [Method] Adds docked item s to the container
     * @param component Object/Object[] The Component or array of components to add. The components must include a 'dock' parameter on each component to indicate where it should be docked ('top', 'right', 'bottom', 'left').
     * @param pos Number The index at which the Component will be added
     * @returns Ext.Component[] The added components.
     */
    static addDocked(component?: any, pos?: number): Ext$flash$IComponent[];

    /**
     * [Method] Adds the specified events to the list of events which this Observable may fire
     * @param eventNames Object/String... Either an object with event names as properties with a value of true. For example: this.addEvents({  storeloaded: true,  storecleared: true });  Or any number of event names as separate parameters. For example: this.addEvents('storeloaded', 'storecleared');
     */
    static addEvents(eventNames?: any): void;

    /**
     * [Method] Appends an event handler to this object
     * @param element Object
     * @param listeners Object
     * @param scope Object
     * @param options Object
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addListener(
      element?: any,
      listeners?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Adds listeners to any Observable object or Ext Element which are automatically removed when this Component is destr
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Save a property to the given state object if it is not its default or configured value
     * @param state Object The state object.
     * @param propName String The name of the property on this object to save.
     * @param value String The value of the state property (defaults to this[propName]).
     * @returns Boolean The state object or a new object if state was null and the property was saved.
     */
    static addPropertyToState(
      Ext$state?: any,
      propName?: string,
      Ext$value?: string
    ): boolean;

    /**
     * [Method] Add events that will trigger the state to be saved
     * @param events String/String[] The event name or an array of event names.
     */
    static addStateEvents(events?: any): void;

    /**
     * [Method] Add tools to this panel
     * @param tools Object[]/Ext.panel.Tool[] The tools to add
     */
    static addTool(tools?: any): void;

    /**
     * [Method] inherit docs
     * @param cls Object
     */
    static addUIClsToElement(cls?: any): void;

    /**
     * [Method] Invoked after the Panel is Collapsed
     */
    static afterCollapse(): void;

    /**
     * [Method] Called by the layout system after the Component has been laid out
     */
    static afterComponentLayout(): void;

    /**
     * [Method] Invoked after the Panel is Expanded
     */
    static afterExpand(): void;

    /**
     * [Method] Invoked after the Container has laid out and rendered if necessary its child Components
     * @param layout Ext.layout.container.Container
     */
    static afterLayout(
      Ext$layout?: Ext$Ext$layout.Ext$container.Ext$IContainer
    ): void;

    /**
     * [Method] Template method called after a Component has been positioned
     * @param ax Object
     * @param ay Object
     */
    static afterSetPosition(ax?: any, ay?: any): void;

    /**
     * [Method] Invoked after the Component is shown after onShow is called
     * @param animateTarget String/Ext.Element
     * @param callback Function
     * @param scope Object
     */
    static afterShow(
      animateTarget?: any,
      Ext$callback?: any,
      scope?: any
    ): void;

    /**
     * [Method] Displays a standard read only message box with an OK button comparable to the basic JavaScript alert prompt
     * @param title String The title bar text
     * @param msg String The message box body text
     * @param fn Function The callback function invoked after the message box is closed. See show method for details.
     * @param scope Object The scope (this reference) in which the callback is executed.
     * @returns Ext.window.MessageBox this
     */
    static alert(
      title?: string,
      msg?: string,
      fn?: any,
      scope?: any
    ): Ext$Ext$window.Ext$IMessageBox;

    /**
     * [Method] Aligns the element with another element relative to the specified anchor points
     * @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to.
     * @param position String The position to align to
     * @param offsets Number[] Offset the positioning by [x, y]
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.util.Positionable this
     */
    static alignTo(
      element?: any,
      position?: string,
      offsets?: number[],
      animate?: any
    ): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Anchors an element to another element and realigns it when the window is resized
     * @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to.
     * @param position String The position to align to
     * @param offsets Number[] Offset the positioning by [x, y]
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @param monitorScroll Boolean/Number True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay in milliseconds.
     * @param callback Function The function to call after the animation finishes
     * @returns Ext.util.Positionable this
     */
    static anchorTo(
      element?: any,
      position?: string,
      offsets?: number[],
      animate?: any,
      monitorScroll?: any,
      Ext$callback?: any
    ): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Performs custom animation on this object
     * @param animObj Object
     * @returns Object this
     */
    static animate(animObj?: any): any;

    /**
     * [Method] Applies the state to the object
     * @param state Object
     */
    static applyState(Ext$state?: any): void;

    /**
     * [Method] Template method to do any pre blur processing
     * @param e Ext.EventObject The event object
     */
    static beforeBlur(e?: Ext$Ext$IEventObject): void;

    /**
     * [Method] Occurs before componentLayout is run
     * @param adjWidth Number The box-adjusted width that was set.
     * @param adjHeight Number The box-adjusted height that was set.
     */
    static beforeComponentLayout(adjWidth?: number, adjHeight?: number): void;

    /**
     * [Method] Template method to do any pre focus processing
     * @param e Ext.EventObject The event object
     */
    static beforeFocus(e?: Ext$Ext$IEventObject): void;

    /**
     * [Method] Occurs before componentLayout is run
     */
    static beforeLayout(): void;

    /**
     * [Method] Invoked before the Component is shown
     */
    static beforeShow(): void;

    /**
     * [Method] Bubbles up the component container heirarchy calling the specified function with each component
     * @param fn Function The function to call
     * @param scope Object The scope of the function. Defaults to current node.
     * @param args Array The args to call the function with. Defaults to passing the current component.
     * @returns Ext.Component this
     */
    static bubble(fn?: any, scope?: any, args?: any[]): Ext$flash$IComponent;

    /**
     * [Method] Calculates the new x y position to move this Positionable into a constrain region
     * @param constrainTo String/HTMLElement/Ext.Element/Ext.util.Region The Element or Region into which this Component is to be constrained. Defaults to the element into which this Positionable was rendered, or this Component's {@link Ext.Component.constrainTo.
     * @param proposedPosition Number[] A proposed [X, Y] position to test for validity and to coerce into constraints instead of using this Positionable's current position.
     * @param local Boolean The proposedPosition is local (relative to floatParent if a floating Component)
     * @param proposedSize Number[] A proposed [width, height] size to use when calculating constraints instead of using this Positionable's current size.
     * @returns Number[] If the element needs to be translated, the new [X, Y] position within constraints if possible, giving priority to keeping the top and left edge in the constrain region. Otherwise, false.
     */
    static calculateConstrainedPosition(
      constrainTo?: any,
      proposedPosition?: number[],
      local?: boolean,
      proposedSize?: number[]
    ): number[];

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Cancel any deferred focus on this component
     */
    static cancelFocus(): void;

    /**
     * [Method] Cascades down the component container heirarchy from this component passed in the first call  calling the specified
     * @param fn Function The function to call
     * @param scope Object The scope of the function (defaults to current component)
     * @param args Array The args to call the function with. The current component always passed as the last argument.
     * @returns Ext.Container this
     */
    static cascade(fn?: any, scope?: any, args?: any[]): Ext$Ext$IContainer;

    /**
     * [Method] Center this Component in its container
     * @returns Ext.Component this
     */
    static center(): Ext$flash$IComponent;

    /**
     * [Method] Retrieves the first direct child of this container which matches the passed selector or component
     * @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned.
     * @returns Object Ext.Component The matching child Ext.Component (or null if no match was found).
     */
    static child(selector?: any): any;

    /**
     * [Method] Removes all listeners for this object including the managed listeners
     */
    static clearListeners(): void;

    /**
     * [Method] Removes all managed listeners for this object
     */
    static clearManagedListeners(): void;

    /**
     * [Method] Clone the current component using the original config values passed into this instance by default
     * @param overrides Object A new config containing any properties to override in the cloned version. An id property can be passed on this object, otherwise one will be generated to avoid duplicates.
     * @returns Ext.Component clone The cloned copy of this component
     */
    static cloneConfig(overrides?: any): Ext$flash$IComponent;

    /**
     * [Method] Closes the Panel
     */
    static close(): void;

    /**
     * [Method] Collapses the panel body so that the body becomes hidden
     * @param direction String The direction to collapse towards. Must be one of  Ext.Component.DIRECTION_TOP Ext.Component.DIRECTION_RIGHT Ext.Component.DIRECTION_BOTTOM Ext.Component.DIRECTION_LEFT Defaults to collapseDirection.
     * @param animate Boolean True to animate the transition, else false (defaults to the value of the animCollapse panel config). May also be specified as the animation duration in milliseconds.
     * @returns Ext.panel.Panel this
     */
    static collapse(
      direction?: string,
      animate?: boolean
    ): Ext$Ext$panel.tree$IPanel;

    /**
     * [Method] Displays a confirmation message box with Yes and No buttons comparable to JavaScript s confirm
     * @param title String The title bar text
     * @param msg String The message box body text
     * @param fn Function The callback function invoked after the message box is closed. See show method for details.
     * @param scope Object The scope (this reference) in which the callback is executed.
     * @returns Ext.window.MessageBox this
     */
    static confirm(
      title?: string,
      msg?: string,
      fn?: any,
      scope?: any
    ): Ext$Ext$window.Ext$IMessageBox;

    /**
     * [Method] Determines whether the passed Component is either an immediate child of this Container or whether it is a descendant
     * @param comp Ext.Component The Component to test.
     * @param deep Boolean Pass true to test for the Component being a descendant at any level.
     * @returns Boolean true if the passed Component is contained at the specified level.
     */
    static contains(comp?: Ext$flash$IComponent, deep?: boolean): boolean;

    /**
     * [Method] converts a collapsdDir into an anchor argument for Element slideIn overridden in rtl mode to switch l and r
     * @param collapseDir Object
     */
    static convertCollapseDir(collapseDir?: any): void;

    /**
     * [Method] Inherit docs Disable all immediate children that was previously disabled Override disable because onDisable only gets
     * @returns Ext.container.AbstractContainer this
     */
    static disable(): Ext$Ext$container.container$IAbstractContainer;

    /**
     * [Method] Handles autoRender
     */
    static doAutoRender(): void;

    /**
     * [Method] This method needs to be called whenever you change something on this component that requires the Component s layout t
     * @returns Ext.container.Container this
     */
    static doComponentLayout(): Ext$Ext$container.Ext$IContainer;

    /**
     * [Method] Moves this floating Component into a constrain region
     * @param constrainTo String/HTMLElement/Ext.Element/Ext.util.Region The Element or Region into which this Component is to be constrained. Defaults to the element into which this floating Component was rendered.
     */
    static doConstrain(constrainTo?: any): void;

    /**
     * [Method] Manually force this container s layout to be recalculated
     * @returns Ext.container.Container this
     */
    static doLayout(): Ext$Ext$container.Ext$IContainer;

    /**
     * [Method] Retrieves the first descendant of this container which matches the passed selector
     * @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned.
     * @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found).
     */
    static down(selector?: any): any;

    /**
     * [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
     * @param eventNames String/String[] The event name to bubble, or an Array of event names.
     */
    static enableBubble(eventNames?: any): void;

    /**
     * [Method] Ensures that this component is attached to document body
     * @param runLayout Boolean True to run the component's layout.
     */
    static ensureAttachedToBody(runLayout?: boolean): void;

    /**
     * [Method] Expands the panel body so that it becomes visible
     * @param animate Boolean True to animate the transition, else false (defaults to the value of the animCollapse panel config). May also be specified as the animation duration in milliseconds.
     * @returns Ext.panel.Panel this
     */
    static expand(animate?: boolean): Ext$Ext$panel.tree$IPanel;

    /**
     * [Method] Find a container above this component at any level by a custom function
     * @param fn Function The custom function to call with the arguments (container, this component).
     * @returns Ext.container.Container The first Container for which the custom function returns true
     */
    static findParentBy(fn?: any): Ext$Ext$container.Ext$IContainer;

    /**
     * [Method] Find a container above this component at any level by xtype or class See also the up method
     * @param xtype String/Ext.Class The xtype string for a component, or the class of the component directly
     * @returns Ext.container.Container The first Container which matches the given xtype or class
     */
    static findParentByType(xtype?: any): Ext$Ext$container.Ext$IContainer;

    /**
     * [Method] Retrieves plugin from this component s collection by its ptype
     * @param ptype String The Plugin's ptype as specified by the class's alias configuration.
     * @returns Ext.AbstractPlugin plugin instance.
     */
    static findPlugin(ptype?: string): Ext$Ext$IAbstractPlugin;

    /**
     * [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
     * @param eventName String The name of the event to fire.
     * @param args Object... Variable number of parameters are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEvent(eventName: string, ...args: any[]): boolean;

    /**
     * [Method] Fires the specified event with the passed parameter list
     * @param eventName String The name of the event to fire.
     * @param args Object[] An array of parameters which are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEventArgs(eventName?: string, args?: any[]): boolean;

    /**
     * [Method] Try to focus this component
     * @param selectText Boolean If applicable, true to also select the text in this component
     * @param delay Boolean/Number Delay the focus this number of milliseconds (true for 10 milliseconds).
     * @param callback Function Only needed if the delay parameter is used. A function to call upon focus.
     * @param scope Function Only needed if the delay parameter is used. The scope (this reference) in which to execute the callback.
     * @returns Ext.Component The focused Component. Usually this Component. Some Containers may delegate focus to a descendant Component (Windows can do this through their defaultFocus config option.
     */
    static focus(
      selectText?: boolean,
      delay?: any,
      Ext$callback?: any,
      scope?: any
    ): Ext$flash$IComponent;

    /**
     * [Method] Forces this component to redo its componentLayout
     */
    static forceComponentLayout(): void;

    /**
     * [Method] Returns the current animation if this object has any effects actively running or queued else returns false
     * @returns Ext.fx.Anim/Boolean Anim if element has active effects, else false
     */
    static getActiveAnimation(): any;

    /**
     * [Method] Gets the x y coordinates to align this element with another element
     * @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to.
     * @param position String The position to align to
     * @param offsets Number[] Offset the positioning by [x, y]
     * @returns Number[] [x, y]
     */
    static getAlignToXY(
      element?: any,
      position?: string,
      offsets?: number[]
    ): number[];

    /**
     * [Method] Gets the x y coordinates specified by the anchor position on the element
     * @param anchor String The specified anchor position. See alignTo for details on supported anchor positions.
     * @param local Boolean True to get the local (element top/left-relative) anchor position instead of page coordinates
     * @param size Object An object containing the size to use for calculating anchor position {width: (target width), height: (target height)} (defaults to the element's current size)
     * @returns Number[] [x, y] An array containing the element's x and y coordinates
     */
    static getAnchorXY(anchor?: string, local?: boolean, size?: any): number[];

    /**
     * [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati
     * @param contentBox Boolean If true a box for the content of the element is returned.
     * @param local Boolean If true the element's left and top relative to its offsetParent are returned instead of page x/y.
     * @returns Object box An object in the format: {  x: &lt;Element's X position&gt;,  y: &lt;Element's Y position&gt;,  left: &lt;Element's X position (an alias for x)&gt;,  top: &lt;Element's Y position (an alias for y)&gt;,  width: &lt;Element's width&gt;,  height: &lt;Element's height&gt;,  bottom: &lt;Element's lower bound&gt;,  right: &lt;Element's rightmost bound&gt; }  The returned object may also be addressed as an Array where index 0 contains the X position and index 1 contains the Y position. The result may also be used for setXY
     */
    static getBox(contentBox?: boolean, local?: boolean): any;

    /**
     * [Method] Implements an upward event bubbling policy
     */
    static getBubbleTarget(): void;

    /**
     * [Method] Return the immediate child Component in which the passed element is located
     * @param el Ext.Element/HTMLElement/String The element to test (or ID of element).
     * @param deep Boolean If true, returns the deepest descendant Component which contains the passed element.
     * @returns Ext.Component The child item which contains the passed element.
     */
    static getChildByElement(el?: any, deep?: boolean): Ext$flash$IComponent;

    /**
     * [Method] Returns the current collapsed state of the panel
     * @returns Boolean/String False when not collapsed, otherwise the value of collapseDirection.
     */
    static getCollapsed(): any;

    /**
     * [Method] Attempts a default component lookup see Ext container Container getComponent
     * @param comp String/Number The component id, itemId or position to find
     * @returns Ext.Component The component (if found)
     */
    static getComponent(comp?: any): Ext$flash$IComponent;

    /**
     * [Method] Returns the X Y vector by which this Positionable s element must be translated to make a best attempt to constrain
     * @param constrainTo Ext.util.Positionable/HTMLElement/String/Ext.util.Region The Positionable, HTMLElement, element id, or Region into which the element is to be constrained.
     * @param proposedPosition Number[] A proposed [X, Y] position to test for validity and to produce a vector for instead of using the element's current position
     * @param proposedSize Number[] A proposed [width, height] size to constrain instead of using the element's current size
     * @returns Number[]/Boolean If the element needs to be translated, an [X, Y] vector by which this element must be translated. Otherwise, false.
     */
    static getConstrainVector(
      constrainTo?: any,
      proposedPosition?: number[],
      proposedSize?: number[]
    ): any;

    /**
     * [Method] Gets the configured default focus item
     */
    static getDefaultFocus(): void;

    /**
     * [Method] Finds a docked component by id itemId or position
     * @param comp String/Number The id, itemId or position of the docked component (see getComponent for details)
     * @returns Ext.Component The docked component (if found)
     */
    static getDockedComponent(comp?: any): Ext$flash$IComponent;

    /**
     * [Method] Retrieves an array of all currently docked Components
     * @param selector String A ComponentQuery selector string to filter the returned items.
     * @param beforeBody Boolean An optional flag to limit the set of items to only those before the body (true) or after the body (false). All components are returned by default.
     * @returns Ext.Component[] The array of docked components meeting the specified criteria.
     */
    static getDockedItems(
      selector?: string,
      beforeBody?: boolean
    ): Ext$flash$IComponent[];

    /**
     * [Method] Retrieves the top level element representing this component
     * @returns Ext.dom.Element
     */
    static getEl(): Ext$Ext$dom.Ext$IElement;

    /**
     * [Method] Gets the Header for this panel
     */
    static getHeader(): void;

    /**
     * [Method] Gets the current height of the component s underlying element
     * @returns Number
     */
    static getHeight(): number;

    /**
     * [Method] Retrieves the id of this component
     * @returns String
     */
    static getId(): string;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(Ext$name?: string): any;

    /**
     * [Method] This function takes the position argument passed to onRender and returns a DOM element that you can use in the insert
     * @param position String/Number/Ext.dom.Element/HTMLElement Index, element id or element you want to put this component before.
     * @returns HTMLElement DOM element that you can use in the insertBefore
     */
    static getInsertPosition(position?: any): HTMLElement;

    /**
     * [Method] Returns the value of itemId assigned to this component or when that is not set returns the value of id
     * @returns String
     */
    static getItemId(): string;

    /**
     * [Method] Returns the layout instance currently associated with this Container
     * @returns Ext.layout.container.Container The layout
     */
    static getLayout(): Ext$Ext$layout.Ext$container.Ext$IContainer;

    /**
     * [Method] Gets the Ext ComponentLoader for this Component
     * @returns Ext.ComponentLoader The loader instance, null if it doesn't exist.
     */
    static getLoader(): Ext$Ext$IComponentLoader;

    /**
     * [Method] Overridden in Ext rtl AbstractComponent
     * @returns Number The local x coordinate
     */
    static getLocalX(): number;

    /**
     * [Method] Overridden in Ext rtl AbstractComponent
     * @returns Number[] The local XY position of the element
     */
    static getLocalXY(): number[];

    /**
     * [Method] Returns the y coordinate of this element reletive to its offsetParent
     * @returns Number The local y coordinate
     */
    static getLocalY(): number;

    /**
     * [Method] Returns the offsets of this element from the passed element
     * @param offsetsTo Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or element id to get get the offsets from.
     * @returns Number[] The XY page offsets (e.g. [100, -200])
     */
    static getOffsetsTo(offsetsTo?: any): number[];

    /**
     * [Method] Retrieves a plugin from this component s collection by its pluginId
     * @param pluginId String
     * @returns Ext.AbstractPlugin plugin instance.
     */
    static getPlugin(pluginId?: string): Ext$Ext$IAbstractPlugin;

    /**
     * [Method] Gets the current XY position of the component s underlying element
     * @param local Boolean If true the element's left and top are returned instead of page XY.
     * @returns Number[] The XY position of the element (e.g., [100, 200])
     */
    static getPosition(local?: boolean): number[];

    /**
     * [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th
     * @param deep Object
     */
    static getRefItems(deep?: any): void;

    /**
     * [Method] Returns a region object that defines the area of this element
     * @returns Ext.util.Region A Region containing "top, left, bottom, right" properties.
     */
    static getRegion(): Ext$Ext$util.util$IRegion;

    /**
     * [Method] Gets the current size of the component s underlying element
     * @returns Object An object containing the element's size {width: (element width), height: (element height)}
     */
    static getSize(): any;

    /**
     * [Method] Returns an object that describes how this component s width and height are managed
     * @param ownerCtSizeModel Object
     * @returns Object The size model for this component.
     */
    static getSizeModel(ownerCtSizeModel?: any): any;

    /**
     * [Method] Returns the content region of this element
     * @returns Ext.util.Region A Region containing "top, left, bottom, right" member data.
     */
    static getViewRegion(): Ext$Ext$util.util$IRegion;

    /**
     * [Method] Gets the current width of the component s underlying element
     * @returns Number
     */
    static getWidth(): number;

    /**
     * [Method] Gets the current X position of the DOM element based on page coordinates
     * @returns Number The X position of the element
     */
    static getX(): number;

    /**
     * [Method] Gets the xtype for this component as registered with Ext ComponentManager
     * @returns String The xtype
     */
    static getXType(): string;

    /**
     * [Method] Returns this Component s xtype hierarchy as a slash delimited string
     * @returns String The xtype hierarchy string
     */
    static getXTypes(): string;

    /**
     * [Method] Gets the current position of the DOM element based on page coordinates
     * @returns Number[] The XY position of the element
     */
    static getXY(): number[];

    /**
     * [Method] Gets the current Y position of the DOM element based on page coordinates
     * @returns Number The Y position of the element
     */
    static getY(): number;

    /**
     * [Method] Returns the current animation if this object has any effects actively running or queued else returns false
     * @returns Ext.fx.Anim/Boolean Anim if element has active effects, else false
     */
    static hasActiveFx(): any;

    /**
     * [Method] Checks if the specified CSS class exists on this element s DOM node
     * @param className String The CSS class to check for.
     * @returns Boolean true if the class exists, else false.
     */
    static hasCls(className?: string): boolean;

    /**
     * [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles
     * @param eventName String The name of the event to check for
     * @returns Boolean true if the event is being listened for or bubbles, else false
     */
    static hasListener(eventName?: string): boolean;

    /**
     * [Method] Checks if there is currently a specified uiCls
     * @param cls String The cls to check.
     */
    static hasUICls(cls?: string): void;

    /**
     * [Method] Hides this Component setting it to invisible using the configured hideMode
     * @returns Ext.Component this
     */
    static hide(): Ext$flash$IComponent;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Initialize any events on this component
     */
    static initEvents(): void;

    /**
     * [Method] Inserts a Component into this Container at a specified index
     * @param index Number The index at which the Component will be inserted into the Container's items collection
     * @param component Ext.Component/Object The child Component to insert. Ext uses lazy rendering, and will only render the inserted Component should it become necessary. A Component config object may be passed in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the inserted Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted. For a list of all available xtypes, see Ext.enums.Widget.
     * @returns Ext.Component component The Component (or config object) that was inserted with the Container's default config values applied.
     */
    static insert(index?: number, component?: any): Ext$flash$IComponent;

    /**
     * [Method] Inserts docked item s to the panel at the indicated position
     * @param pos Number The index at which the Component will be inserted
     * @param component Object/Object[] The Component or array of components to add. The components must include a 'dock' paramater on each component to indicate where it should be docked ('top', 'right', 'bottom', 'left').
     */
    static insertDocked(pos?: number, component?: any): void;

    /**
     * [Method] Tests whether this Component matches the selector string
     * @param selector String The selector string to test against.
     * @returns Boolean true if this Component matches the selector.
     */
    static is(selector?: string): boolean;

    /**
     * [Method] Determines whether this Container is an ancestor of the passed Component
     * @param possibleDescendant Ext.Component The Component to test for presence within this Container's subtree.
     */
    static isAncestor(possibleDescendant?: Ext$flash$IComponent): void;

    /**
     * [Method] Determines whether this component is the descendant of a particular container
     * @param container Ext.Container
     * @returns Boolean true if the component is the descendant of a particular container, otherwise false.
     */
    static isDescendantOf(Ext$container?: Ext$Ext$IContainer): boolean;

    /**
     * [Method] Method to determine whether this Component is currently disabled
     * @returns Boolean the disabled state of this Component.
     */
    static isDisabled(): boolean;

    /**
     * [Method] Method to determine whether this Component is draggable
     * @returns Boolean the draggable state of this component.
     */
    static isDraggable(): boolean;

    /**
     * [Method] Method to determine whether this Component is droppable
     * @returns Boolean the droppable state of this component.
     */
    static isDroppable(): boolean;

    /**
     * [Method] Method to determine whether this Component is floating
     * @returns Boolean the floating state of this component.
     */
    static isFloating(): boolean;

    /**
     * [Method] Method to determine whether this Component is currently set to hidden
     * @returns Boolean the hidden state of this Component.
     */
    static isHidden(): boolean;

    /**
     * [Method] Determines whether this Component is the root of a layout
     */
    static isLayoutRoot(): void;

    /**
     * [Method] Returns true if layout is suspended for this component
     * @returns Boolean true layout of this component is suspended.
     */
    static isLayoutSuspended(): boolean;

    /**
     * [Method] Returns true if this component is visible
     * @param deep Object
     * @returns Boolean true if this component is visible, false otherwise.
     */
    static isVisible(deep?: any): boolean;

    /**
     * [Method] Tests whether or not this Component is of a specific xtype
     * @param xtype String The xtype to check for this Component
     * @param shallow Boolean true to check whether this Component is directly of the specified xtype, false to check whether this Component is descended from the xtype.
     * @returns Boolean true if this component descends from the specified xtype, false otherwise.
     */
    static isXType(xtype?: string, shallow?: boolean): boolean;

    /**
     * [Method] Fits the window within its current container and automatically replaces the maximize tool button with the restore
     * @param animate Boolean true to animate this Window to full size.
     * @returns Ext.window.Window this
     */
    static maximize(animate?: boolean): Ext$Ext$window.Ext$IWindow;

    /**
     * [Method] Placeholder method for minimizing the window
     * @returns Ext.window.Window this
     */
    static minimize(): Ext$Ext$window.Ext$IWindow;

    /**
     * [Method] Shorthand for addManagedListener
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static mon(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Moves a Component within the Container
     * @param fromIdx Number/Ext.Component The index/component to move.
     * @param toIdx Number The new index for the Component.
     * @returns Ext.Component component The Component that was moved.
     */
    static move(fromIdx?: any, toIdx?: number): Ext$flash$IComponent;

    /**
     * [Method] Shorthand for removeManagedListener
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static mun(item?: any, ename?: any, fn?: any, scope?: any): void;

    /**
     * [Method] Returns the next node in the Component tree in tree traversal order
     * @param selector String A ComponentQuery selector to filter the following nodes.
     * @returns Ext.Component The next node (or the next node which matches the selector). Returns null if there is no matching node.
     */
    static nextNode(selector?: string): Ext$flash$IComponent;

    /**
     * [Method] Returns the next sibling of this Component
     * @param selector String A ComponentQuery selector to filter the following items.
     * @returns Ext.Component The next sibling (or the next sibling which matches the selector). Returns null if there is no matching sibling.
     */
    static nextSibling(selector?: string): Ext$flash$IComponent;

    /**
     * [Method] Shorthand for addListener
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static on(eventName?: any, fn?: any, scope?: any, options?: any): any;

    /**
     * [Method] This method is invoked after a new Component has been added
     * @param component Ext.Component
     * @param position Number
     */
    static onAdd(component?: Ext$flash$IComponent, position?: number): void;

    /**
     * [Method] Method to manage awareness of when components are added to their respective Container firing an added event
     */
    static onAdded(): void;

    /**
     * [Method] This method is invoked before adding a new child Component
     * @param item Ext.Component
     */
    static onBeforeAdd(item?: Ext$flash$IComponent): void;

    /**
     * [Method] Allows addition of behavior to the destroy operation
     */
    static onDestroy(): void;

    /**
     * [Method] Allows addition of behavior to the disable operation
     */
    static onDisable(): void;

    /**
     * [Method] Invoked after a docked item is added to the Panel
     * @param component Ext.Component
     */
    static onDockedAdd(component?: Ext$flash$IComponent): void;

    /**
     * [Method] Invoked after a docked item is removed from the Panel
     * @param component Ext.Component
     */
    static onDockedRemove(component?: Ext$flash$IComponent): void;

    /**
     * [Method] Allows addition of behavior to the enable operation
     */
    static onEnable(): void;

    /**
     * [Method] Possibly animates down to a target element
     */
    static onHide(): void;

    /**
     * [Method] Called after the component is moved this method is empty by default but can be implemented by any subclass that need
     */
    static onPosition(): void;

    /**
     * [Method] This method is invoked after a new Component has been removed
     * @param component Ext.Component
     * @param autoDestroy Boolean
     */
    static onRemove(
      component?: Ext$flash$IComponent,
      autoDestroy?: boolean
    ): void;

    /**
     * [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event
     * @param destroying Object
     */
    static onRemoved(destroying?: any): void;

    /**
     * [Method] Allows addition of behavior to the resize operation
     */
    static onResize(): void;

    /**
     * [Method] Allows addition of behavior to the show operation
     */
    static onShow(): void;

    /**
     * [Method] Invoked after the afterShow method is complete
     * @param callback Function
     * @param scope Object
     */
    static onShowComplete(Ext$callback?: any, scope?: any): void;

    /**
     * [Method] Template method to do any post blur processing
     * @param e Ext.EventObject The event object
     */
    static postBlur(e?: Ext$Ext$IEventObject): void;

    /**
     * [Method] Returns the previous node in the Component tree in tree traversal order
     * @param selector String A ComponentQuery selector to filter the preceding nodes.
     * @returns Ext.Component The previous node (or the previous node which matches the selector). Returns null if there is no matching node.
     */
    static previousNode(selector?: string): Ext$flash$IComponent;

    /**
     * [Method] Returns the previous sibling of this Component
     * @param selector String A ComponentQuery selector to filter the preceding items.
     * @returns Ext.Component The previous sibling (or the previous sibling which matches the selector). Returns null if there is no matching sibling.
     */
    static previousSibling(selector?: string): Ext$flash$IComponent;

    /**
     * [Method] Displays a message box with a progress bar
     * @param title String The title bar text
     * @param msg String The message box body text
     * @param progressText String The text to display inside the progress bar
     * @returns Ext.window.MessageBox this
     */
    static progress(
      title?: string,
      msg?: string,
      progressText?: string
    ): Ext$Ext$window.Ext$IMessageBox;

    /**
     * [Method] Displays a message box with OK and Cancel buttons prompting the user to enter some text comparable to JavaScript s p
     * @param title String The title bar text
     * @param msg String The message box body text
     * @param fn Function The callback function invoked after the message box is closed. See show method for details.
     * @param scope Object The scope (this reference) in which the callback is executed.
     * @param multiline Boolean/Number True to create a multiline textbox using the defaultTextHeight property, or the height in pixels to create the textbox/
     * @param value String Default value of the text input element
     * @returns Ext.window.MessageBox this
     */
    static prompt(
      title?: string,
      msg?: string,
      fn?: any,
      scope?: any,
      multiline?: any,
      Ext$value?: string
    ): Ext$Ext$window.Ext$IMessageBox;

    /**
     * [Method] Retrieves all descendant components which match the passed selector
     * @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned.
     * @returns Ext.Component[] Components which matched the selector
     */
    static query(selector?: string): Ext$flash$IComponent[];

    /**
     * [Method] Retrieves all descendant components which match the passed function
     * @param fn Function The matcher function. It will be called with a single argument, the component being tested.
     * @param scope Object The scope in which to run the function. If not specified, it will default to the active component.
     * @returns Ext.Component[] Components matched by the passed function
     */
    static queryBy(fn?: any, scope?: any): Ext$flash$IComponent[];

    /**
     * [Method] Finds a component at any level under this container matching the id itemId
     * @param id String The id to find
     * @returns Ext.Component The matching id, null if not found
     */
    static queryById(Ext$id?: string): Ext$flash$IComponent;

    /**
     * [Method] Called by Component doAutoRender Register a Container configured floating true with this Component s ZIndexManager
     * @param cmp Object
     */
    static registerFloatingItem(cmp?: any): void;

    /**
     * [Method] Relays selected events from the specified Observable as if the events were fired by this
     * @param origin Object The Observable whose events this object is to relay.
     * @param events String[] Array of event names to relay.
     * @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
     * @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or this.store.relayers.destroy();
     */
    static relayEvents(origin?: any, events?: string[], prefix?: string): any;

    /**
     * [Method] Removes a component from this container
     * @param component Ext.Component/String The component reference or id to remove.
     * @param autoDestroy Boolean True to automatically invoke the removed Component's Ext.Component.destroy function. Defaults to the value of this Container's autoDestroy config.
     * @returns Ext.Component component The Component that was removed.
     */
    static remove(component?: any, autoDestroy?: boolean): Ext$flash$IComponent;

    /**
     * [Method] Removes all components from this container
     * @param autoDestroy Boolean True to automatically invoke the removed Component's Ext.Component.destroy function. Defaults to the value of this Container's autoDestroy config.
     * @returns Ext.Component[] Array of the removed components
     */
    static removeAll(autoDestroy?: boolean): Ext$flash$IComponent[];

    /**
     * [Method] Remove any anchor to this element
     * @returns Ext.util.Positionable this
     */
    static removeAnchor(): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Removes a CSS class from the body element
     * @param cls String The class to remove
     * @returns Ext.panel.Panel this
     */
    static removeBodyCls(cls?: string): Ext$Ext$panel.tree$IPanel;

    /**
     * [Method] Removes items in the childEls array based on the return value of a supplied test function
     * @param testFn Function The test function.
     */
    static removeChildEls(testFn?: any): void;

    /**
     * [Method] Removes a CSS class from the top level element representing this component
     * @param cls String/String[] The CSS class name to remove.
     * @returns Ext.Component Returns the Component to allow method chaining.
     */
    static removeCls(cls?: any): Ext$flash$IComponent;

    /**
     * [Method] Removes a cls to the uiCls array which will also call removeUIClsFromElement and removes it from all elements of thi
     * @param cls String/String[] A string or an array of strings to remove to the uiCls.
     */
    static removeClsWithUI(cls?: any): void;

    /**
     * [Method] Removes the docked item from the panel
     * @param item Ext.Component The Component to remove.
     * @param autoDestroy Boolean Destroy the component after removal.
     */
    static removeDocked(
      item?: Ext$flash$IComponent,
      autoDestroy?: boolean
    ): void;

    /**
     * [Method] Removes an event handler
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static removeListener(eventName?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Removes listeners that were added by the mon method
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static removeManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any
    ): void;

    /**
     * [Method] inherit docs
     * @param cls Object
     */
    static removeUIClsFromElement(cls?: any): void;

    /**
     * [Method] Renders the Component into the passed HTML element
     * @param container Ext.Element/HTMLElement/String The element this Component should be rendered into. If it is being created from existing markup, this should be omitted.
     * @param position String/Number The element ID or DOM node index within the container before which this component will be inserted (defaults to appending to the end of the container)
     */
    static render(Ext$container?: any, position?: any): void;

    /**
     * [Method] Restores a maximized window back to its original size and position prior to being maximized and also replaces the re
     * @param animate Object
     * @returns Ext.window.Window this
     */
    static restore(animate?: any): Ext$Ext$window.Ext$IWindow;

    /**
     * [Method] Resumes firing of the named event s
     * @param eventName String... Multiple event names to resume.
     */
    static resumeEvent(...eventName: any[]): void;

    /**
     * [Method] Resumes firing events see suspendEvents
     */
    static resumeEvents(): void;

    /**
     * [Method] Conditionally saves a single property from this object to the given state object
     * @param propName String The name of the property to save.
     * @param state Object The state object in to which to save the property.
     * @param stateName String The name to use for the property in state.
     * @returns Boolean True if the property was saved, false if not.
     */
    static savePropToState(
      propName?: string,
      Ext$state?: any,
      stateName?: string
    ): boolean;

    /**
     * [Method] Gathers additional named properties of the instance and adds their current values to the passed state object
     * @param propNames String/String[] The name (or array of names) of the property to save.
     * @param state Object The state object in to which to save the property values.
     * @returns Object state
     */
    static savePropsToState(propNames?: any, Ext$state?: any): any;

    /**
     * [Method] Saves the state of the object to the persistence store
     */
    static saveState(): void;

    /**
     * [Method] Scrolls this Component s target element by the passed delta values optionally animating
     * @param deltaX Number/Number[]/Object Either the x delta, an Array specifying x and y deltas or an object with "x" and "y" properties.
     * @param deltaY Number/Boolean/Object Either the y delta, or an animate flag or config object.
     * @param animate Boolean/Object Animate flag/config object if the delta values were passed separately.
     */
    static scrollBy(deltaX?: any, deltaY?: any, animate?: any): void;

    /**
     * [Method] Ensures that all effects queued after sequenceFx is called on this object are run in sequence
     * @returns Object this
     */
    static sequenceFx(): any;

    /**
     * [Method] This method is called internally by Ext ZIndexManager to signal that a floating Component has either been moved to th
     * @param active Boolean True to activate the Component, false to deactivate it.
     * @param newActive Ext.Component The newly active Component which is taking over topmost zIndex position.
     */
    static setActive(active?: boolean, newActive?: Ext$flash$IComponent): void;

    /**
     * [Method] Sets the overflow on the content element of the component
     * @param scroll Boolean True to allow the Component to auto scroll.
     * @returns Ext.Component this
     */
    static setAutoScroll(scroll?: boolean): Ext$flash$IComponent;

    /**
     * [Method] Sets the body style according to the passed parameters
     * @param style Mixed A full style specification string, or object, or the name of a style property to set.
     * @param value String If the first param was a style property name, the style property value.
     * @returns Ext.panel.Panel this
     */
    static setBodyStyle(
      style?: any,
      Ext$value?: string
    ): Ext$Ext$panel.tree$IPanel;

    /**
     * [Method]
     * @param border Object
     * @param targetEl Object
     */
    static setBorder(border?: any, targetEl?: any): void;

    /**
     * [Method] This method changes the region config property for this border region
     * @param region String The new region value ("north", "south", "east" or "west").
     * @returns String The previous value of the region property.
     */
    static setBorderRegion(region?: string): string;

    /**
     * [Method] Sets the element s box
     * @param box Object The box to fill {x, y, width, height}
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.util.Positionable this
     */
    static setBox(box?: any, animate?: any): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Enable or disable the component
     * @param disabled Boolean true to disable.
     */
    static setDisabled(disabled?: boolean): void;

    /**
     * [Method] Sets the dock position of this component in its parent panel
     * @param dock Object The dock position.
     * @param layoutParent Boolean true to re-layout parent.
     * @returns Ext.Component this
     */
    static setDocked(dock?: any, layoutParent?: boolean): Ext$flash$IComponent;

    /**
     * [Method] Set the glyph for the panel s header
     * @param newGlyph Number/String The new glyph This parameter expects a format consistent with that of glyph
     */
    static setGlyph(newGlyph?: any): void;

    /**
     * [Method] Sets the height of the component
     * @param height Number The new height to set. This may be one of:  A Number specifying the new height in the Element's Ext.Element.defaultUnits (by default, pixels). A String used to set the CSS height style. undefined to leave the height unchanged.
     * @returns Ext.Component this
     */
    static setHeight(height?: number): Ext$flash$IComponent;

    /**
     * [Method] Adds the specified icon to the dialog
     * @param icon String A CSS classname specifying the icon's background image url, or empty string to clear the icon
     * @param width Number The width of the icon. If not specified, the default is used
     * @param height Number The height of the icon. If not specified, the default is used
     * @returns Ext.window.MessageBox this
     */
    static setIcon(
      icon?: string,
      width?: number,
      height?: number
    ): Ext$Ext$window.Ext$IMessageBox;

    /**
     * [Method] Set the iconCls for the panel s header
     * @param newIconCls String The new CSS class name
     */
    static setIconCls(newIconCls?: string): void;

    /**
     * [Method] This method allows you to show or hide a LoadMask on top of this component
     * @param load Boolean/Object/String True to show the default LoadMask, a config object that will be passed to the LoadMask constructor, or a message String to show. False to hide the current LoadMask.
     * @param targetEl Boolean True to mask the targetEl of this Component instead of the this.el. For example, setting this to true on a Panel will cause only the body to be masked.
     * @returns Ext.LoadMask The LoadMask instance that has just been shown.
     */
    static setLoading(load?: any, targetEl?: boolean): Ext$Ext$ILoadMask;

    /**
     * [Method] Overridden in Ext rtl AbstractComponent
     * @param x Object
     * @returns Ext.util.Positionable this
     */
    static setLocalX(x?: any): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Overridden in Ext rtl AbstractComponent
     * @param x Object
     * @param y Object
     * @returns Ext.util.Positionable this
     */
    static setLocalXY(x?: any, y?: any): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Sets the local y coordinate of this element using CSS style
     * @param y Object
     * @returns Ext.util.Positionable this
     */
    static setLocalY(y?: any): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Sets the margin on the target element
     * @param margin Number/String The margin to set. See the margin config.
     */
    static setMargin(margin?: any): void;

    /**
     * [Method] Sets the overflow x y on the content element of the component
     * @param overflowX String The overflow-x value.
     * @param overflowY String The overflow-y value.
     * @returns Ext.Component this
     */
    static setOverflowXY(
      overflowX?: string,
      overflowY?: string
    ): Ext$flash$IComponent;

    /**
     * [Method] Sets the page XY position of the component
     * @param x Number/Number[] The new x position or an array of [x,y].
     * @param y Number The new y position.
     * @param animate Boolean/Object True to animate the Component into its new position. You may also pass an animation configuration.
     * @returns Ext.Component this
     */
    static setPagePosition(
      x?: any,
      y?: number,
      animate?: any
    ): Ext$flash$IComponent;

    /**
     * [Method] Sets the left and top of the component
     * @param x Number/Number[]/Object The new left, an array of [x,y], or animation config object containing x and y properties.
     * @param y Number The new top.
     * @param animate Boolean/Object If true, the Component is animated into its new position. You may also pass an animation configuration.
     * @returns Ext.Component this
     */
    static setPosition(
      x?: any,
      y?: number,
      animate?: any
    ): Ext$flash$IComponent;

    /**
     * [Method] Sets the element s position and size to the specified region
     * @param region Ext.util.Region The region to fill
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.util.Positionable this
     */
    static setRegion(
      region?: Ext$Ext$util.util$IRegion,
      animate?: any
    ): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Sets the weight config property for this component
     * @param weight Number The new weight value.
     * @returns Number The previous value of the weight property.
     */
    static setRegionWeight(weight?: number): number;

    /**
     * [Method] Sets the width and height of this Component
     * @param width Number/String/Object The new width to set. This may be one of:  A Number specifying the new width in the Element's Ext.Element.defaultUnits (by default, pixels). A String used to set the CSS width style. A size object in the format {width: widthValue, height: heightValue}. undefined to leave the width unchanged.
     * @param height Number/String The new height to set (not required if a size object is passed as the first arg). This may be one of:  A Number specifying the new height in the Element's Ext.Element.defaultUnits (by default, pixels). A String used to set the CSS height style. Animation may not be used. undefined to leave the height unchanged.
     * @returns Ext.Component this
     */
    static setSize(width?: any, height?: any): Ext$flash$IComponent;

    /**
     * [Method] Set a title for the panel s header
     * @param newTitle String
     */
    static setTitle(newTitle?: string): void;

    /**
     * [Method] Sets the UI for the component
     * @param ui Object
     */
    static setUI(ui?: any): void;

    /**
     * [Method] Convenience function to hide or show this component by Boolean
     * @param visible Boolean true to show, false to hide.
     * @returns Ext.Component this
     */
    static setVisible(visible?: boolean): Ext$flash$IComponent;

    /**
     * [Method] Sets the width of the component
     * @param width Number The new width to setThis may be one of:  A Number specifying the new width in the Element's Ext.Element.defaultUnits (by default, pixels). A String used to set the CSS width style.
     * @returns Ext.Component this
     */
    static setWidth(width?: number): Ext$flash$IComponent;

    /**
     * [Method] Sets the X position of the DOM element based on page coordinates
     * @param x Object
     * @param animate Object
     * @returns Ext.util.Positionable this
     */
    static setX(x?: any, animate?: any): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Sets the position of the DOM element in page coordinates
     * @param xy Object
     * @param animate Object
     * @returns Ext.util.Positionable this
     */
    static setXY(xy?: any, animate?: any): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Sets the Y position of the DOM element based on page coordinates
     * @param y Object
     * @param animate Object
     * @returns Ext.util.Positionable this
     */
    static setY(y?: any, animate?: any): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Displays a new message box or reinitializes an existing message box based on the config options passed in
     * @param config Object The following config options are supported:
     * @returns Ext.window.MessageBox this
     */
    static show(config?: any): Ext$Ext$window.Ext$IMessageBox;

    /**
     * [Method] Displays component at specific xy position
     * @param x Number/Number[] The new x position or array of [x,y].
     * @param y Number The new y position
     * @param animate Boolean/Object True to animate the Component into its new position. You may also pass an animation configuration.
     * @returns Ext.Component this
     */
    static showAt(x?: any, y?: number, animate?: any): Ext$flash$IComponent;

    /**
     * [Method] Shows this component by the specified Component or Element
     * @param component Ext.Component/Ext.dom.Element The Ext.Component or Ext.Element to show the component by.
     * @param position String Alignment position as used by Ext.util.Positionable.getAlignToXY. Defaults to defaultAlign.
     * @param offsets Number[] Alignment offsets as used by Ext.util.Positionable.getAlignToXY.
     * @returns Ext.Component this
     */
    static showBy(
      component?: any,
      position?: string,
      offsets?: number[]
    ): Ext$flash$IComponent;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Stops any running effects and clears this object s internal effects queue if it contains any additional effects that
     * @returns Ext.Element The Element
     */
    static stopAnimation(): Ext$Ext$IElement;

    /**
     * [Method] Stops any running effects and clears this object s internal effects queue if it contains any additional effects that
     * @returns Ext.Element The Element
     */
    static stopFx(): Ext$Ext$IElement;

    /**
     * [Method] Suspends firing of the named event s
     * @param eventName String... Multiple event names to suspend.
     */
    static suspendEvent(...eventName: any[]): void;

    /**
     * [Method] Suspends the firing of all events
     * @param queueSuspended Boolean Pass as true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events.
     */
    static suspendEvents(queueSuspended?: boolean): void;

    /**
     * [Method] Ensures that all effects queued after syncFx is called on this object are run concurrently
     * @returns Object this
     */
    static syncFx(): any;

    /**
     * [Method] Sends this Component to the back of lower z index than any other visible windows
     * @returns Ext.Component this
     */
    static toBack(): Ext$flash$IComponent;

    /**
     * [Method] Brings this floating Component to the front of any other visible floating Components managed by the same ZIndexManag
     * @param preventFocus Boolean Specify true to prevent the Component from being focused.
     * @returns Ext.Component this
     */
    static toFront(preventFocus?: boolean): Ext$flash$IComponent;

    /**
     * [Method] Shortcut for performing an expand or collapse based on the current state of the panel
     * @returns Ext.panel.Panel this
     */
    static toggleCollapse(): Ext$Ext$panel.tree$IPanel;

    /**
     * [Method] A shortcut method for toggling between maximize and restore based on the current maximized state of the window
     * @returns Ext.window.Window this
     */
    static toggleMaximize(): Ext$Ext$window.Ext$IWindow;

    /**
     * [Method] Translates the passed page coordinates into left top css values for the element
     * @param x Number/Array The page x or an array containing [x, y]
     * @param y Number The page y, required if x is not an array
     * @returns Object An object with left and top properties. e.g. {left: (value), top: (value)}
     */
    static translatePoints(x?: any, y?: number): any;

    /**
     * [Method] Shorthand for removeListener
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static un(eventName?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Navigates up the ownership hierarchy searching for an ancestor Container which matches any passed simple selector or
     * @param selector String/Ext.Component The simple selector component or actual component to test. If not passed the immediate owner/activater is returned.
     * @param limit String/Number/Ext.Component This may be a selector upon which to stop the upward scan, or a limit of teh number of steps, or Component reference to stop on.
     * @returns Ext.container.Container The matching ancestor Container (or undefined if no match was found).
     */
    static up(selector?: any, limit?: any): Ext$Ext$container.Ext$IContainer;

    /**
     * [Method] Update the content area of a component
     * @param htmlOrData String/Object If this component has been configured with a template via the tpl config then it will use this argument as data to populate the template. If this component was not configured with a template, the components content area will be updated via Ext.Element update.
     * @param loadScripts Boolean Only legitimate when using the html configuration.
     * @param callback Function Only legitimate when using the html configuration. Callback to execute when scripts have finished loading.
     */
    static update(
      htmlOrData?: any,
      loadScripts?: boolean,
      Ext$callback?: any
    ): void;

    /**
     * [Method] Sets the current box measurements of the component s underlying element
     * @param box Object An object in the format {x, y, width, height}
     * @returns Ext.Component this
     */
    static updateBox(box?: any): Ext$flash$IComponent;

    /**
     * [Method] Updates this component s layout
     * @param options Object An object with layout options.
     */
    static updateLayout(options?: any): void;

    /**
     * [Method] Updates a progress style message box s text and progress bar
     * @param value Number Any number between 0 and 1 (e.g., .5)
     * @param progressText String The progress text to display inside the progress bar.
     * @param msg String The message box's body text is replaced with the specified string (defaults to undefined so that any existing body text will not get overwritten by default unless a new value is passed in)
     * @returns Ext.window.MessageBox this
     */
    static updateProgress(
      Ext$value?: number,
      progressText?: string,
      msg?: string
    ): Ext$Ext$window.Ext$IMessageBox;

    /**
     * [Method] Displays a message box with an infinitely auto updating progress bar
     * @param msg String The message box body text
     * @param title String The title bar text
     * @param config Object A Ext.ProgressBar.wait config object
     * @returns Ext.window.MessageBox this
     */
    static wait(
      msg?: string,
      title?: string,
      config?: any
    ): Ext$Ext$window.Ext$IMessageBox;
  }

  declare export type Ext$IMsg = {} & undefined.Ext$IMessageBox;

  declare export class Ext$Msg {
    /**
     * [Property] (Number)
     */
    static CANCEL: number;

    /**
     * [Property] (String)
     */
    static ERROR: string;

    /**
     * [Property] (String)
     */
    static INFO: string;

    /**
     * [Property] (Number)
     */
    static NO: number;

    /**
     * [Property] (Number)
     */
    static OK: number;

    /**
     * [Property] (Number)
     */
    static OKCANCEL: number;

    /**
     * [Property] (String)
     */
    static QUESTION: string;

    /**
     * [Property] (String)
     */
    static WARNING: string;

    /**
     * [Property] (Number)
     */
    static YES: number;

    /**
     * [Property] (Number)
     */
    static YESNO: number;

    /**
     * [Property] (Number)
     */
    static YESNOCANCEL: number;

    /**
     * [Property] (Boolean)
     */
    static _isLayoutRoot: boolean;

    /**
     * [Property] (Ext.dom.Element)
     */
    static body: Ext$Ext$dom.Ext$IElement;

    /**
     * [Property] (Object)
     */
    static buttonText: any;

    /**
     * [Property] (String)
     */
    static contentPaddingProperty: string;

    /**
     * [Property] (Ext.util.ComponentDragger)
     */
    static Ext$dd: Ext$Ext$util.util$IComponentDragger;

    /**
     * [Property] (Number)
     */
    static defaultTextHeight: number;

    /**
     * [Property] (Boolean)
     */
    static draggable: boolean;

    /**
     * [Property] (Ext.Container)
     */
    static floatParent: Ext$Ext$IContainer;

    /**
     * [Property] (Object)
     */
    static frameSize: any;

    /**
     * [Property] (Object)
     */
    static hasListeners: any;

    /**
     * [Property] (Boolean)
     */
    static isComponent: boolean;

    /**
     * [Property] (Boolean)
     */
    static isObservable: boolean;

    /**
     * [Property] (Boolean)
     */
    static isPanel: boolean;

    /**
     * [Property] (Boolean)
     */
    static isWindow: boolean;

    /**
     * [Property] (Ext.util.AbstractMixedCollection)
     */
    static items: Ext$Ext$util.util$IAbstractMixedCollection;

    /**
     * [Property] (Boolean)
     */
    static maskOnDisable: boolean;

    /**
     * [Property] (Number)
     */
    static minProgressWidth: number;

    /**
     * [Property] (Number)
     */
    static minPromptWidth: number;

    /**
     * [Property] (Ext.Container)
     */
    static ownerCt: Ext$Ext$IContainer;

    /**
     * [Property] (Boolean)
     */
    static rendered: boolean;

    /**
     * [Property] (Object)
     */
    static scrollFlags: any;

    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Property] (Ext.ZIndexManager)
     */
    static zIndexManager: Ext$Ext$IZIndexManager;

    /**
     * [Property] (Ext.Container)
     */
    static zIndexParent: Ext$Ext$IContainer;

    /**
     * [Method] Adds Component s to this Container
     * @param component Ext.Component[]|Object[]/Ext.Component.../Object... Either one or more Components to add or an Array of Components to add. See items for additional information.
     * @returns Ext.Component[]/Ext.Component The Components that were added.
     */
    static add(component?: any): any;

    /**
     * [Method] Adds a CSS class to the body element
     * @param cls String The class to add
     * @returns Ext.panel.Panel this
     */
    static addBodyCls(cls?: string): Ext$Ext$panel.tree$IPanel;

    /**
     * [Method] Adds each argument passed to this method to the childEls array
     */
    static addChildEls(): void;

    /**
     * [Method] Adds a CSS class to the top level element representing this component
     * @param cls String/String[] The CSS class name to add.
     * @returns Ext.Component Returns the Component to allow method chaining.
     */
    static addClass(cls?: any): Ext$flash$IComponent;

    /**
     * [Method] Adds a CSS class to the top level element representing this component
     * @param cls String/String[] The CSS class name to add.
     * @returns Ext.Component Returns the Component to allow method chaining.
     */
    static addCls(cls?: any): Ext$flash$IComponent;

    /**
     * [Method] Adds a cls to the uiCls array which will also call addUIClsToElement and adds to all elements of this component
     * @param classes String/String[] A string or an array of strings to add to the uiCls.
     * @param skip Object (Boolean) skip true to skip adding it to the class and do it later (via the return).
     */
    static addClsWithUI(classes?: any, skip?: any): void;

    /**
     * [Method] Adds docked item s to the container
     * @param component Object/Object[] The Component or array of components to add. The components must include a 'dock' parameter on each component to indicate where it should be docked ('top', 'right', 'bottom', 'left').
     * @param pos Number The index at which the Component will be added
     * @returns Ext.Component[] The added components.
     */
    static addDocked(component?: any, pos?: number): Ext$flash$IComponent[];

    /**
     * [Method] Adds the specified events to the list of events which this Observable may fire
     * @param eventNames Object/String... Either an object with event names as properties with a value of true. For example: this.addEvents({  storeloaded: true,  storecleared: true });  Or any number of event names as separate parameters. For example: this.addEvents('storeloaded', 'storecleared');
     */
    static addEvents(eventNames?: any): void;

    /**
     * [Method] Appends an event handler to this object
     * @param element Object
     * @param listeners Object
     * @param scope Object
     * @param options Object
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addListener(
      element?: any,
      listeners?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Adds listeners to any Observable object or Ext Element which are automatically removed when this Component is destr
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Save a property to the given state object if it is not its default or configured value
     * @param state Object The state object.
     * @param propName String The name of the property on this object to save.
     * @param value String The value of the state property (defaults to this[propName]).
     * @returns Boolean The state object or a new object if state was null and the property was saved.
     */
    static addPropertyToState(
      Ext$state?: any,
      propName?: string,
      Ext$value?: string
    ): boolean;

    /**
     * [Method] Add events that will trigger the state to be saved
     * @param events String/String[] The event name or an array of event names.
     */
    static addStateEvents(events?: any): void;

    /**
     * [Method] Add tools to this panel
     * @param tools Object[]/Ext.panel.Tool[] The tools to add
     */
    static addTool(tools?: any): void;

    /**
     * [Method] inherit docs
     * @param cls Object
     */
    static addUIClsToElement(cls?: any): void;

    /**
     * [Method] Invoked after the Panel is Collapsed
     */
    static afterCollapse(): void;

    /**
     * [Method] Called by the layout system after the Component has been laid out
     */
    static afterComponentLayout(): void;

    /**
     * [Method] Invoked after the Panel is Expanded
     */
    static afterExpand(): void;

    /**
     * [Method] Invoked after the Container has laid out and rendered if necessary its child Components
     * @param layout Ext.layout.container.Container
     */
    static afterLayout(
      Ext$layout?: Ext$Ext$layout.Ext$container.Ext$IContainer
    ): void;

    /**
     * [Method] Template method called after a Component has been positioned
     * @param ax Object
     * @param ay Object
     */
    static afterSetPosition(ax?: any, ay?: any): void;

    /**
     * [Method] Invoked after the Component is shown after onShow is called
     * @param animateTarget String/Ext.Element
     * @param callback Function
     * @param scope Object
     */
    static afterShow(
      animateTarget?: any,
      Ext$callback?: any,
      scope?: any
    ): void;

    /**
     * [Method] Displays a standard read only message box with an OK button comparable to the basic JavaScript alert prompt
     * @param title String The title bar text
     * @param msg String The message box body text
     * @param fn Function The callback function invoked after the message box is closed. See show method for details.
     * @param scope Object The scope (this reference) in which the callback is executed.
     * @returns Ext.window.MessageBox this
     */
    static alert(
      title?: string,
      msg?: string,
      fn?: any,
      scope?: any
    ): Ext$Ext$window.Ext$IMessageBox;

    /**
     * [Method] Aligns the element with another element relative to the specified anchor points
     * @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to.
     * @param position String The position to align to
     * @param offsets Number[] Offset the positioning by [x, y]
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.util.Positionable this
     */
    static alignTo(
      element?: any,
      position?: string,
      offsets?: number[],
      animate?: any
    ): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Anchors an element to another element and realigns it when the window is resized
     * @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to.
     * @param position String The position to align to
     * @param offsets Number[] Offset the positioning by [x, y]
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @param monitorScroll Boolean/Number True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay in milliseconds.
     * @param callback Function The function to call after the animation finishes
     * @returns Ext.util.Positionable this
     */
    static anchorTo(
      element?: any,
      position?: string,
      offsets?: number[],
      animate?: any,
      monitorScroll?: any,
      Ext$callback?: any
    ): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Performs custom animation on this object
     * @param animObj Object
     * @returns Object this
     */
    static animate(animObj?: any): any;

    /**
     * [Method] Applies the state to the object
     * @param state Object
     */
    static applyState(Ext$state?: any): void;

    /**
     * [Method] Template method to do any pre blur processing
     * @param e Ext.EventObject The event object
     */
    static beforeBlur(e?: Ext$Ext$IEventObject): void;

    /**
     * [Method] Occurs before componentLayout is run
     * @param adjWidth Number The box-adjusted width that was set.
     * @param adjHeight Number The box-adjusted height that was set.
     */
    static beforeComponentLayout(adjWidth?: number, adjHeight?: number): void;

    /**
     * [Method] Template method to do any pre focus processing
     * @param e Ext.EventObject The event object
     */
    static beforeFocus(e?: Ext$Ext$IEventObject): void;

    /**
     * [Method] Occurs before componentLayout is run
     */
    static beforeLayout(): void;

    /**
     * [Method] Invoked before the Component is shown
     */
    static beforeShow(): void;

    /**
     * [Method] Bubbles up the component container heirarchy calling the specified function with each component
     * @param fn Function The function to call
     * @param scope Object The scope of the function. Defaults to current node.
     * @param args Array The args to call the function with. Defaults to passing the current component.
     * @returns Ext.Component this
     */
    static bubble(fn?: any, scope?: any, args?: any[]): Ext$flash$IComponent;

    /**
     * [Method] Calculates the new x y position to move this Positionable into a constrain region
     * @param constrainTo String/HTMLElement/Ext.Element/Ext.util.Region The Element or Region into which this Component is to be constrained. Defaults to the element into which this Positionable was rendered, or this Component's {@link Ext.Component.constrainTo.
     * @param proposedPosition Number[] A proposed [X, Y] position to test for validity and to coerce into constraints instead of using this Positionable's current position.
     * @param local Boolean The proposedPosition is local (relative to floatParent if a floating Component)
     * @param proposedSize Number[] A proposed [width, height] size to use when calculating constraints instead of using this Positionable's current size.
     * @returns Number[] If the element needs to be translated, the new [X, Y] position within constraints if possible, giving priority to keeping the top and left edge in the constrain region. Otherwise, false.
     */
    static calculateConstrainedPosition(
      constrainTo?: any,
      proposedPosition?: number[],
      local?: boolean,
      proposedSize?: number[]
    ): number[];

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Cancel any deferred focus on this component
     */
    static cancelFocus(): void;

    /**
     * [Method] Cascades down the component container heirarchy from this component passed in the first call  calling the specified
     * @param fn Function The function to call
     * @param scope Object The scope of the function (defaults to current component)
     * @param args Array The args to call the function with. The current component always passed as the last argument.
     * @returns Ext.Container this
     */
    static cascade(fn?: any, scope?: any, args?: any[]): Ext$Ext$IContainer;

    /**
     * [Method] Center this Component in its container
     * @returns Ext.Component this
     */
    static center(): Ext$flash$IComponent;

    /**
     * [Method] Retrieves the first direct child of this container which matches the passed selector or component
     * @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned.
     * @returns Object Ext.Component The matching child Ext.Component (or null if no match was found).
     */
    static child(selector?: any): any;

    /**
     * [Method] Removes all listeners for this object including the managed listeners
     */
    static clearListeners(): void;

    /**
     * [Method] Removes all managed listeners for this object
     */
    static clearManagedListeners(): void;

    /**
     * [Method] Clone the current component using the original config values passed into this instance by default
     * @param overrides Object A new config containing any properties to override in the cloned version. An id property can be passed on this object, otherwise one will be generated to avoid duplicates.
     * @returns Ext.Component clone The cloned copy of this component
     */
    static cloneConfig(overrides?: any): Ext$flash$IComponent;

    /**
     * [Method] Closes the Panel
     */
    static close(): void;

    /**
     * [Method] Collapses the panel body so that the body becomes hidden
     * @param direction String The direction to collapse towards. Must be one of  Ext.Component.DIRECTION_TOP Ext.Component.DIRECTION_RIGHT Ext.Component.DIRECTION_BOTTOM Ext.Component.DIRECTION_LEFT Defaults to collapseDirection.
     * @param animate Boolean True to animate the transition, else false (defaults to the value of the animCollapse panel config). May also be specified as the animation duration in milliseconds.
     * @returns Ext.panel.Panel this
     */
    static collapse(
      direction?: string,
      animate?: boolean
    ): Ext$Ext$panel.tree$IPanel;

    /**
     * [Method] Displays a confirmation message box with Yes and No buttons comparable to JavaScript s confirm
     * @param title String The title bar text
     * @param msg String The message box body text
     * @param fn Function The callback function invoked after the message box is closed. See show method for details.
     * @param scope Object The scope (this reference) in which the callback is executed.
     * @returns Ext.window.MessageBox this
     */
    static confirm(
      title?: string,
      msg?: string,
      fn?: any,
      scope?: any
    ): Ext$Ext$window.Ext$IMessageBox;

    /**
     * [Method] Determines whether the passed Component is either an immediate child of this Container or whether it is a descendant
     * @param comp Ext.Component The Component to test.
     * @param deep Boolean Pass true to test for the Component being a descendant at any level.
     * @returns Boolean true if the passed Component is contained at the specified level.
     */
    static contains(comp?: Ext$flash$IComponent, deep?: boolean): boolean;

    /**
     * [Method] converts a collapsdDir into an anchor argument for Element slideIn overridden in rtl mode to switch l and r
     * @param collapseDir Object
     */
    static convertCollapseDir(collapseDir?: any): void;

    /**
     * [Method] Inherit docs Disable all immediate children that was previously disabled Override disable because onDisable only gets
     * @returns Ext.container.AbstractContainer this
     */
    static disable(): Ext$Ext$container.container$IAbstractContainer;

    /**
     * [Method] Handles autoRender
     */
    static doAutoRender(): void;

    /**
     * [Method] This method needs to be called whenever you change something on this component that requires the Component s layout t
     * @returns Ext.container.Container this
     */
    static doComponentLayout(): Ext$Ext$container.Ext$IContainer;

    /**
     * [Method] Moves this floating Component into a constrain region
     * @param constrainTo String/HTMLElement/Ext.Element/Ext.util.Region The Element or Region into which this Component is to be constrained. Defaults to the element into which this floating Component was rendered.
     */
    static doConstrain(constrainTo?: any): void;

    /**
     * [Method] Manually force this container s layout to be recalculated
     * @returns Ext.container.Container this
     */
    static doLayout(): Ext$Ext$container.Ext$IContainer;

    /**
     * [Method] Retrieves the first descendant of this container which matches the passed selector
     * @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned.
     * @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found).
     */
    static down(selector?: any): any;

    /**
     * [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
     * @param eventNames String/String[] The event name to bubble, or an Array of event names.
     */
    static enableBubble(eventNames?: any): void;

    /**
     * [Method] Ensures that this component is attached to document body
     * @param runLayout Boolean True to run the component's layout.
     */
    static ensureAttachedToBody(runLayout?: boolean): void;

    /**
     * [Method] Expands the panel body so that it becomes visible
     * @param animate Boolean True to animate the transition, else false (defaults to the value of the animCollapse panel config). May also be specified as the animation duration in milliseconds.
     * @returns Ext.panel.Panel this
     */
    static expand(animate?: boolean): Ext$Ext$panel.tree$IPanel;

    /**
     * [Method] Find a container above this component at any level by a custom function
     * @param fn Function The custom function to call with the arguments (container, this component).
     * @returns Ext.container.Container The first Container for which the custom function returns true
     */
    static findParentBy(fn?: any): Ext$Ext$container.Ext$IContainer;

    /**
     * [Method] Find a container above this component at any level by xtype or class See also the up method
     * @param xtype String/Ext.Class The xtype string for a component, or the class of the component directly
     * @returns Ext.container.Container The first Container which matches the given xtype or class
     */
    static findParentByType(xtype?: any): Ext$Ext$container.Ext$IContainer;

    /**
     * [Method] Retrieves plugin from this component s collection by its ptype
     * @param ptype String The Plugin's ptype as specified by the class's alias configuration.
     * @returns Ext.AbstractPlugin plugin instance.
     */
    static findPlugin(ptype?: string): Ext$Ext$IAbstractPlugin;

    /**
     * [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
     * @param eventName String The name of the event to fire.
     * @param args Object... Variable number of parameters are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEvent(eventName: string, ...args: any[]): boolean;

    /**
     * [Method] Fires the specified event with the passed parameter list
     * @param eventName String The name of the event to fire.
     * @param args Object[] An array of parameters which are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEventArgs(eventName?: string, args?: any[]): boolean;

    /**
     * [Method] Try to focus this component
     * @param selectText Boolean If applicable, true to also select the text in this component
     * @param delay Boolean/Number Delay the focus this number of milliseconds (true for 10 milliseconds).
     * @param callback Function Only needed if the delay parameter is used. A function to call upon focus.
     * @param scope Function Only needed if the delay parameter is used. The scope (this reference) in which to execute the callback.
     * @returns Ext.Component The focused Component. Usually this Component. Some Containers may delegate focus to a descendant Component (Windows can do this through their defaultFocus config option.
     */
    static focus(
      selectText?: boolean,
      delay?: any,
      Ext$callback?: any,
      scope?: any
    ): Ext$flash$IComponent;

    /**
     * [Method] Forces this component to redo its componentLayout
     */
    static forceComponentLayout(): void;

    /**
     * [Method] Returns the current animation if this object has any effects actively running or queued else returns false
     * @returns Ext.fx.Anim/Boolean Anim if element has active effects, else false
     */
    static getActiveAnimation(): any;

    /**
     * [Method] Gets the x y coordinates to align this element with another element
     * @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to.
     * @param position String The position to align to
     * @param offsets Number[] Offset the positioning by [x, y]
     * @returns Number[] [x, y]
     */
    static getAlignToXY(
      element?: any,
      position?: string,
      offsets?: number[]
    ): number[];

    /**
     * [Method] Gets the x y coordinates specified by the anchor position on the element
     * @param anchor String The specified anchor position. See alignTo for details on supported anchor positions.
     * @param local Boolean True to get the local (element top/left-relative) anchor position instead of page coordinates
     * @param size Object An object containing the size to use for calculating anchor position {width: (target width), height: (target height)} (defaults to the element's current size)
     * @returns Number[] [x, y] An array containing the element's x and y coordinates
     */
    static getAnchorXY(anchor?: string, local?: boolean, size?: any): number[];

    /**
     * [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati
     * @param contentBox Boolean If true a box for the content of the element is returned.
     * @param local Boolean If true the element's left and top relative to its offsetParent are returned instead of page x/y.
     * @returns Object box An object in the format: {  x: &lt;Element's X position&gt;,  y: &lt;Element's Y position&gt;,  left: &lt;Element's X position (an alias for x)&gt;,  top: &lt;Element's Y position (an alias for y)&gt;,  width: &lt;Element's width&gt;,  height: &lt;Element's height&gt;,  bottom: &lt;Element's lower bound&gt;,  right: &lt;Element's rightmost bound&gt; }  The returned object may also be addressed as an Array where index 0 contains the X position and index 1 contains the Y position. The result may also be used for setXY
     */
    static getBox(contentBox?: boolean, local?: boolean): any;

    /**
     * [Method] Implements an upward event bubbling policy
     */
    static getBubbleTarget(): void;

    /**
     * [Method] Return the immediate child Component in which the passed element is located
     * @param el Ext.Element/HTMLElement/String The element to test (or ID of element).
     * @param deep Boolean If true, returns the deepest descendant Component which contains the passed element.
     * @returns Ext.Component The child item which contains the passed element.
     */
    static getChildByElement(el?: any, deep?: boolean): Ext$flash$IComponent;

    /**
     * [Method] Returns the current collapsed state of the panel
     * @returns Boolean/String False when not collapsed, otherwise the value of collapseDirection.
     */
    static getCollapsed(): any;

    /**
     * [Method] Attempts a default component lookup see Ext container Container getComponent
     * @param comp String/Number The component id, itemId or position to find
     * @returns Ext.Component The component (if found)
     */
    static getComponent(comp?: any): Ext$flash$IComponent;

    /**
     * [Method] Returns the X Y vector by which this Positionable s element must be translated to make a best attempt to constrain
     * @param constrainTo Ext.util.Positionable/HTMLElement/String/Ext.util.Region The Positionable, HTMLElement, element id, or Region into which the element is to be constrained.
     * @param proposedPosition Number[] A proposed [X, Y] position to test for validity and to produce a vector for instead of using the element's current position
     * @param proposedSize Number[] A proposed [width, height] size to constrain instead of using the element's current size
     * @returns Number[]/Boolean If the element needs to be translated, an [X, Y] vector by which this element must be translated. Otherwise, false.
     */
    static getConstrainVector(
      constrainTo?: any,
      proposedPosition?: number[],
      proposedSize?: number[]
    ): any;

    /**
     * [Method] Gets the configured default focus item
     */
    static getDefaultFocus(): void;

    /**
     * [Method] Finds a docked component by id itemId or position
     * @param comp String/Number The id, itemId or position of the docked component (see getComponent for details)
     * @returns Ext.Component The docked component (if found)
     */
    static getDockedComponent(comp?: any): Ext$flash$IComponent;

    /**
     * [Method] Retrieves an array of all currently docked Components
     * @param selector String A ComponentQuery selector string to filter the returned items.
     * @param beforeBody Boolean An optional flag to limit the set of items to only those before the body (true) or after the body (false). All components are returned by default.
     * @returns Ext.Component[] The array of docked components meeting the specified criteria.
     */
    static getDockedItems(
      selector?: string,
      beforeBody?: boolean
    ): Ext$flash$IComponent[];

    /**
     * [Method] Retrieves the top level element representing this component
     * @returns Ext.dom.Element
     */
    static getEl(): Ext$Ext$dom.Ext$IElement;

    /**
     * [Method] Gets the Header for this panel
     */
    static getHeader(): void;

    /**
     * [Method] Gets the current height of the component s underlying element
     * @returns Number
     */
    static getHeight(): number;

    /**
     * [Method] Retrieves the id of this component
     * @returns String
     */
    static getId(): string;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(Ext$name?: string): any;

    /**
     * [Method] This function takes the position argument passed to onRender and returns a DOM element that you can use in the insert
     * @param position String/Number/Ext.dom.Element/HTMLElement Index, element id or element you want to put this component before.
     * @returns HTMLElement DOM element that you can use in the insertBefore
     */
    static getInsertPosition(position?: any): HTMLElement;

    /**
     * [Method] Returns the value of itemId assigned to this component or when that is not set returns the value of id
     * @returns String
     */
    static getItemId(): string;

    /**
     * [Method] Returns the layout instance currently associated with this Container
     * @returns Ext.layout.container.Container The layout
     */
    static getLayout(): Ext$Ext$layout.Ext$container.Ext$IContainer;

    /**
     * [Method] Gets the Ext ComponentLoader for this Component
     * @returns Ext.ComponentLoader The loader instance, null if it doesn't exist.
     */
    static getLoader(): Ext$Ext$IComponentLoader;

    /**
     * [Method] Overridden in Ext rtl AbstractComponent
     * @returns Number The local x coordinate
     */
    static getLocalX(): number;

    /**
     * [Method] Overridden in Ext rtl AbstractComponent
     * @returns Number[] The local XY position of the element
     */
    static getLocalXY(): number[];

    /**
     * [Method] Returns the y coordinate of this element reletive to its offsetParent
     * @returns Number The local y coordinate
     */
    static getLocalY(): number;

    /**
     * [Method] Returns the offsets of this element from the passed element
     * @param offsetsTo Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or element id to get get the offsets from.
     * @returns Number[] The XY page offsets (e.g. [100, -200])
     */
    static getOffsetsTo(offsetsTo?: any): number[];

    /**
     * [Method] Retrieves a plugin from this component s collection by its pluginId
     * @param pluginId String
     * @returns Ext.AbstractPlugin plugin instance.
     */
    static getPlugin(pluginId?: string): Ext$Ext$IAbstractPlugin;

    /**
     * [Method] Gets the current XY position of the component s underlying element
     * @param local Boolean If true the element's left and top are returned instead of page XY.
     * @returns Number[] The XY position of the element (e.g., [100, 200])
     */
    static getPosition(local?: boolean): number[];

    /**
     * [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th
     * @param deep Object
     */
    static getRefItems(deep?: any): void;

    /**
     * [Method] Returns a region object that defines the area of this element
     * @returns Ext.util.Region A Region containing "top, left, bottom, right" properties.
     */
    static getRegion(): Ext$Ext$util.util$IRegion;

    /**
     * [Method] Gets the current size of the component s underlying element
     * @returns Object An object containing the element's size {width: (element width), height: (element height)}
     */
    static getSize(): any;

    /**
     * [Method] Returns an object that describes how this component s width and height are managed
     * @param ownerCtSizeModel Object
     * @returns Object The size model for this component.
     */
    static getSizeModel(ownerCtSizeModel?: any): any;

    /**
     * [Method] Returns the content region of this element
     * @returns Ext.util.Region A Region containing "top, left, bottom, right" member data.
     */
    static getViewRegion(): Ext$Ext$util.util$IRegion;

    /**
     * [Method] Gets the current width of the component s underlying element
     * @returns Number
     */
    static getWidth(): number;

    /**
     * [Method] Gets the current X position of the DOM element based on page coordinates
     * @returns Number The X position of the element
     */
    static getX(): number;

    /**
     * [Method] Gets the xtype for this component as registered with Ext ComponentManager
     * @returns String The xtype
     */
    static getXType(): string;

    /**
     * [Method] Returns this Component s xtype hierarchy as a slash delimited string
     * @returns String The xtype hierarchy string
     */
    static getXTypes(): string;

    /**
     * [Method] Gets the current position of the DOM element based on page coordinates
     * @returns Number[] The XY position of the element
     */
    static getXY(): number[];

    /**
     * [Method] Gets the current Y position of the DOM element based on page coordinates
     * @returns Number The Y position of the element
     */
    static getY(): number;

    /**
     * [Method] Returns the current animation if this object has any effects actively running or queued else returns false
     * @returns Ext.fx.Anim/Boolean Anim if element has active effects, else false
     */
    static hasActiveFx(): any;

    /**
     * [Method] Checks if the specified CSS class exists on this element s DOM node
     * @param className String The CSS class to check for.
     * @returns Boolean true if the class exists, else false.
     */
    static hasCls(className?: string): boolean;

    /**
     * [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles
     * @param eventName String The name of the event to check for
     * @returns Boolean true if the event is being listened for or bubbles, else false
     */
    static hasListener(eventName?: string): boolean;

    /**
     * [Method] Checks if there is currently a specified uiCls
     * @param cls String The cls to check.
     */
    static hasUICls(cls?: string): void;

    /**
     * [Method] Hides this Component setting it to invisible using the configured hideMode
     * @returns Ext.Component this
     */
    static hide(): Ext$flash$IComponent;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Initialize any events on this component
     */
    static initEvents(): void;

    /**
     * [Method] Inserts a Component into this Container at a specified index
     * @param index Number The index at which the Component will be inserted into the Container's items collection
     * @param component Ext.Component/Object The child Component to insert. Ext uses lazy rendering, and will only render the inserted Component should it become necessary. A Component config object may be passed in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the inserted Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted. For a list of all available xtypes, see Ext.enums.Widget.
     * @returns Ext.Component component The Component (or config object) that was inserted with the Container's default config values applied.
     */
    static insert(index?: number, component?: any): Ext$flash$IComponent;

    /**
     * [Method] Inserts docked item s to the panel at the indicated position
     * @param pos Number The index at which the Component will be inserted
     * @param component Object/Object[] The Component or array of components to add. The components must include a 'dock' paramater on each component to indicate where it should be docked ('top', 'right', 'bottom', 'left').
     */
    static insertDocked(pos?: number, component?: any): void;

    /**
     * [Method] Tests whether this Component matches the selector string
     * @param selector String The selector string to test against.
     * @returns Boolean true if this Component matches the selector.
     */
    static is(selector?: string): boolean;

    /**
     * [Method] Determines whether this Container is an ancestor of the passed Component
     * @param possibleDescendant Ext.Component The Component to test for presence within this Container's subtree.
     */
    static isAncestor(possibleDescendant?: Ext$flash$IComponent): void;

    /**
     * [Method] Determines whether this component is the descendant of a particular container
     * @param container Ext.Container
     * @returns Boolean true if the component is the descendant of a particular container, otherwise false.
     */
    static isDescendantOf(Ext$container?: Ext$Ext$IContainer): boolean;

    /**
     * [Method] Method to determine whether this Component is currently disabled
     * @returns Boolean the disabled state of this Component.
     */
    static isDisabled(): boolean;

    /**
     * [Method] Method to determine whether this Component is draggable
     * @returns Boolean the draggable state of this component.
     */
    static isDraggable(): boolean;

    /**
     * [Method] Method to determine whether this Component is droppable
     * @returns Boolean the droppable state of this component.
     */
    static isDroppable(): boolean;

    /**
     * [Method] Method to determine whether this Component is floating
     * @returns Boolean the floating state of this component.
     */
    static isFloating(): boolean;

    /**
     * [Method] Method to determine whether this Component is currently set to hidden
     * @returns Boolean the hidden state of this Component.
     */
    static isHidden(): boolean;

    /**
     * [Method] Determines whether this Component is the root of a layout
     */
    static isLayoutRoot(): void;

    /**
     * [Method] Returns true if layout is suspended for this component
     * @returns Boolean true layout of this component is suspended.
     */
    static isLayoutSuspended(): boolean;

    /**
     * [Method] Returns true if this component is visible
     * @param deep Object
     * @returns Boolean true if this component is visible, false otherwise.
     */
    static isVisible(deep?: any): boolean;

    /**
     * [Method] Tests whether or not this Component is of a specific xtype
     * @param xtype String The xtype to check for this Component
     * @param shallow Boolean true to check whether this Component is directly of the specified xtype, false to check whether this Component is descended from the xtype.
     * @returns Boolean true if this component descends from the specified xtype, false otherwise.
     */
    static isXType(xtype?: string, shallow?: boolean): boolean;

    /**
     * [Method] Fits the window within its current container and automatically replaces the maximize tool button with the restore
     * @param animate Boolean true to animate this Window to full size.
     * @returns Ext.window.Window this
     */
    static maximize(animate?: boolean): Ext$Ext$window.Ext$IWindow;

    /**
     * [Method] Placeholder method for minimizing the window
     * @returns Ext.window.Window this
     */
    static minimize(): Ext$Ext$window.Ext$IWindow;

    /**
     * [Method] Shorthand for addManagedListener
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static mon(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Moves a Component within the Container
     * @param fromIdx Number/Ext.Component The index/component to move.
     * @param toIdx Number The new index for the Component.
     * @returns Ext.Component component The Component that was moved.
     */
    static move(fromIdx?: any, toIdx?: number): Ext$flash$IComponent;

    /**
     * [Method] Shorthand for removeManagedListener
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static mun(item?: any, ename?: any, fn?: any, scope?: any): void;

    /**
     * [Method] Returns the next node in the Component tree in tree traversal order
     * @param selector String A ComponentQuery selector to filter the following nodes.
     * @returns Ext.Component The next node (or the next node which matches the selector). Returns null if there is no matching node.
     */
    static nextNode(selector?: string): Ext$flash$IComponent;

    /**
     * [Method] Returns the next sibling of this Component
     * @param selector String A ComponentQuery selector to filter the following items.
     * @returns Ext.Component The next sibling (or the next sibling which matches the selector). Returns null if there is no matching sibling.
     */
    static nextSibling(selector?: string): Ext$flash$IComponent;

    /**
     * [Method] Shorthand for addListener
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static on(eventName?: any, fn?: any, scope?: any, options?: any): any;

    /**
     * [Method] This method is invoked after a new Component has been added
     * @param component Ext.Component
     * @param position Number
     */
    static onAdd(component?: Ext$flash$IComponent, position?: number): void;

    /**
     * [Method] Method to manage awareness of when components are added to their respective Container firing an added event
     */
    static onAdded(): void;

    /**
     * [Method] This method is invoked before adding a new child Component
     * @param item Ext.Component
     */
    static onBeforeAdd(item?: Ext$flash$IComponent): void;

    /**
     * [Method] Allows addition of behavior to the destroy operation
     */
    static onDestroy(): void;

    /**
     * [Method] Allows addition of behavior to the disable operation
     */
    static onDisable(): void;

    /**
     * [Method] Invoked after a docked item is added to the Panel
     * @param component Ext.Component
     */
    static onDockedAdd(component?: Ext$flash$IComponent): void;

    /**
     * [Method] Invoked after a docked item is removed from the Panel
     * @param component Ext.Component
     */
    static onDockedRemove(component?: Ext$flash$IComponent): void;

    /**
     * [Method] Allows addition of behavior to the enable operation
     */
    static onEnable(): void;

    /**
     * [Method] Possibly animates down to a target element
     */
    static onHide(): void;

    /**
     * [Method] Called after the component is moved this method is empty by default but can be implemented by any subclass that need
     */
    static onPosition(): void;

    /**
     * [Method] This method is invoked after a new Component has been removed
     * @param component Ext.Component
     * @param autoDestroy Boolean
     */
    static onRemove(
      component?: Ext$flash$IComponent,
      autoDestroy?: boolean
    ): void;

    /**
     * [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event
     * @param destroying Object
     */
    static onRemoved(destroying?: any): void;

    /**
     * [Method] Allows addition of behavior to the resize operation
     */
    static onResize(): void;

    /**
     * [Method] Allows addition of behavior to the show operation
     */
    static onShow(): void;

    /**
     * [Method] Invoked after the afterShow method is complete
     * @param callback Function
     * @param scope Object
     */
    static onShowComplete(Ext$callback?: any, scope?: any): void;

    /**
     * [Method] Template method to do any post blur processing
     * @param e Ext.EventObject The event object
     */
    static postBlur(e?: Ext$Ext$IEventObject): void;

    /**
     * [Method] Returns the previous node in the Component tree in tree traversal order
     * @param selector String A ComponentQuery selector to filter the preceding nodes.
     * @returns Ext.Component The previous node (or the previous node which matches the selector). Returns null if there is no matching node.
     */
    static previousNode(selector?: string): Ext$flash$IComponent;

    /**
     * [Method] Returns the previous sibling of this Component
     * @param selector String A ComponentQuery selector to filter the preceding items.
     * @returns Ext.Component The previous sibling (or the previous sibling which matches the selector). Returns null if there is no matching sibling.
     */
    static previousSibling(selector?: string): Ext$flash$IComponent;

    /**
     * [Method] Displays a message box with a progress bar
     * @param title String The title bar text
     * @param msg String The message box body text
     * @param progressText String The text to display inside the progress bar
     * @returns Ext.window.MessageBox this
     */
    static progress(
      title?: string,
      msg?: string,
      progressText?: string
    ): Ext$Ext$window.Ext$IMessageBox;

    /**
     * [Method] Displays a message box with OK and Cancel buttons prompting the user to enter some text comparable to JavaScript s p
     * @param title String The title bar text
     * @param msg String The message box body text
     * @param fn Function The callback function invoked after the message box is closed. See show method for details.
     * @param scope Object The scope (this reference) in which the callback is executed.
     * @param multiline Boolean/Number True to create a multiline textbox using the defaultTextHeight property, or the height in pixels to create the textbox/
     * @param value String Default value of the text input element
     * @returns Ext.window.MessageBox this
     */
    static prompt(
      title?: string,
      msg?: string,
      fn?: any,
      scope?: any,
      multiline?: any,
      Ext$value?: string
    ): Ext$Ext$window.Ext$IMessageBox;

    /**
     * [Method] Retrieves all descendant components which match the passed selector
     * @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned.
     * @returns Ext.Component[] Components which matched the selector
     */
    static query(selector?: string): Ext$flash$IComponent[];

    /**
     * [Method] Retrieves all descendant components which match the passed function
     * @param fn Function The matcher function. It will be called with a single argument, the component being tested.
     * @param scope Object The scope in which to run the function. If not specified, it will default to the active component.
     * @returns Ext.Component[] Components matched by the passed function
     */
    static queryBy(fn?: any, scope?: any): Ext$flash$IComponent[];

    /**
     * [Method] Finds a component at any level under this container matching the id itemId
     * @param id String The id to find
     * @returns Ext.Component The matching id, null if not found
     */
    static queryById(Ext$id?: string): Ext$flash$IComponent;

    /**
     * [Method] Called by Component doAutoRender Register a Container configured floating true with this Component s ZIndexManager
     * @param cmp Object
     */
    static registerFloatingItem(cmp?: any): void;

    /**
     * [Method] Relays selected events from the specified Observable as if the events were fired by this
     * @param origin Object The Observable whose events this object is to relay.
     * @param events String[] Array of event names to relay.
     * @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
     * @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or this.store.relayers.destroy();
     */
    static relayEvents(origin?: any, events?: string[], prefix?: string): any;

    /**
     * [Method] Removes a component from this container
     * @param component Ext.Component/String The component reference or id to remove.
     * @param autoDestroy Boolean True to automatically invoke the removed Component's Ext.Component.destroy function. Defaults to the value of this Container's autoDestroy config.
     * @returns Ext.Component component The Component that was removed.
     */
    static remove(component?: any, autoDestroy?: boolean): Ext$flash$IComponent;

    /**
     * [Method] Removes all components from this container
     * @param autoDestroy Boolean True to automatically invoke the removed Component's Ext.Component.destroy function. Defaults to the value of this Container's autoDestroy config.
     * @returns Ext.Component[] Array of the removed components
     */
    static removeAll(autoDestroy?: boolean): Ext$flash$IComponent[];

    /**
     * [Method] Remove any anchor to this element
     * @returns Ext.util.Positionable this
     */
    static removeAnchor(): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Removes a CSS class from the body element
     * @param cls String The class to remove
     * @returns Ext.panel.Panel this
     */
    static removeBodyCls(cls?: string): Ext$Ext$panel.tree$IPanel;

    /**
     * [Method] Removes items in the childEls array based on the return value of a supplied test function
     * @param testFn Function The test function.
     */
    static removeChildEls(testFn?: any): void;

    /**
     * [Method] Removes a CSS class from the top level element representing this component
     * @param cls String/String[] The CSS class name to remove.
     * @returns Ext.Component Returns the Component to allow method chaining.
     */
    static removeCls(cls?: any): Ext$flash$IComponent;

    /**
     * [Method] Removes a cls to the uiCls array which will also call removeUIClsFromElement and removes it from all elements of thi
     * @param cls String/String[] A string or an array of strings to remove to the uiCls.
     */
    static removeClsWithUI(cls?: any): void;

    /**
     * [Method] Removes the docked item from the panel
     * @param item Ext.Component The Component to remove.
     * @param autoDestroy Boolean Destroy the component after removal.
     */
    static removeDocked(
      item?: Ext$flash$IComponent,
      autoDestroy?: boolean
    ): void;

    /**
     * [Method] Removes an event handler
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static removeListener(eventName?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Removes listeners that were added by the mon method
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static removeManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any
    ): void;

    /**
     * [Method] inherit docs
     * @param cls Object
     */
    static removeUIClsFromElement(cls?: any): void;

    /**
     * [Method] Renders the Component into the passed HTML element
     * @param container Ext.Element/HTMLElement/String The element this Component should be rendered into. If it is being created from existing markup, this should be omitted.
     * @param position String/Number The element ID or DOM node index within the container before which this component will be inserted (defaults to appending to the end of the container)
     */
    static render(Ext$container?: any, position?: any): void;

    /**
     * [Method] Restores a maximized window back to its original size and position prior to being maximized and also replaces the re
     * @param animate Object
     * @returns Ext.window.Window this
     */
    static restore(animate?: any): Ext$Ext$window.Ext$IWindow;

    /**
     * [Method] Resumes firing of the named event s
     * @param eventName String... Multiple event names to resume.
     */
    static resumeEvent(...eventName: any[]): void;

    /**
     * [Method] Resumes firing events see suspendEvents
     */
    static resumeEvents(): void;

    /**
     * [Method] Conditionally saves a single property from this object to the given state object
     * @param propName String The name of the property to save.
     * @param state Object The state object in to which to save the property.
     * @param stateName String The name to use for the property in state.
     * @returns Boolean True if the property was saved, false if not.
     */
    static savePropToState(
      propName?: string,
      Ext$state?: any,
      stateName?: string
    ): boolean;

    /**
     * [Method] Gathers additional named properties of the instance and adds their current values to the passed state object
     * @param propNames String/String[] The name (or array of names) of the property to save.
     * @param state Object The state object in to which to save the property values.
     * @returns Object state
     */
    static savePropsToState(propNames?: any, Ext$state?: any): any;

    /**
     * [Method] Saves the state of the object to the persistence store
     */
    static saveState(): void;

    /**
     * [Method] Scrolls this Component s target element by the passed delta values optionally animating
     * @param deltaX Number/Number[]/Object Either the x delta, an Array specifying x and y deltas or an object with "x" and "y" properties.
     * @param deltaY Number/Boolean/Object Either the y delta, or an animate flag or config object.
     * @param animate Boolean/Object Animate flag/config object if the delta values were passed separately.
     */
    static scrollBy(deltaX?: any, deltaY?: any, animate?: any): void;

    /**
     * [Method] Ensures that all effects queued after sequenceFx is called on this object are run in sequence
     * @returns Object this
     */
    static sequenceFx(): any;

    /**
     * [Method] This method is called internally by Ext ZIndexManager to signal that a floating Component has either been moved to th
     * @param active Boolean True to activate the Component, false to deactivate it.
     * @param newActive Ext.Component The newly active Component which is taking over topmost zIndex position.
     */
    static setActive(active?: boolean, newActive?: Ext$flash$IComponent): void;

    /**
     * [Method] Sets the overflow on the content element of the component
     * @param scroll Boolean True to allow the Component to auto scroll.
     * @returns Ext.Component this
     */
    static setAutoScroll(scroll?: boolean): Ext$flash$IComponent;

    /**
     * [Method] Sets the body style according to the passed parameters
     * @param style Mixed A full style specification string, or object, or the name of a style property to set.
     * @param value String If the first param was a style property name, the style property value.
     * @returns Ext.panel.Panel this
     */
    static setBodyStyle(
      style?: any,
      Ext$value?: string
    ): Ext$Ext$panel.tree$IPanel;

    /**
     * [Method]
     * @param border Object
     * @param targetEl Object
     */
    static setBorder(border?: any, targetEl?: any): void;

    /**
     * [Method] This method changes the region config property for this border region
     * @param region String The new region value ("north", "south", "east" or "west").
     * @returns String The previous value of the region property.
     */
    static setBorderRegion(region?: string): string;

    /**
     * [Method] Sets the element s box
     * @param box Object The box to fill {x, y, width, height}
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.util.Positionable this
     */
    static setBox(box?: any, animate?: any): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Enable or disable the component
     * @param disabled Boolean true to disable.
     */
    static setDisabled(disabled?: boolean): void;

    /**
     * [Method] Sets the dock position of this component in its parent panel
     * @param dock Object The dock position.
     * @param layoutParent Boolean true to re-layout parent.
     * @returns Ext.Component this
     */
    static setDocked(dock?: any, layoutParent?: boolean): Ext$flash$IComponent;

    /**
     * [Method] Set the glyph for the panel s header
     * @param newGlyph Number/String The new glyph This parameter expects a format consistent with that of glyph
     */
    static setGlyph(newGlyph?: any): void;

    /**
     * [Method] Sets the height of the component
     * @param height Number The new height to set. This may be one of:  A Number specifying the new height in the Element's Ext.Element.defaultUnits (by default, pixels). A String used to set the CSS height style. undefined to leave the height unchanged.
     * @returns Ext.Component this
     */
    static setHeight(height?: number): Ext$flash$IComponent;

    /**
     * [Method] Adds the specified icon to the dialog
     * @param icon String A CSS classname specifying the icon's background image url, or empty string to clear the icon
     * @param width Number The width of the icon. If not specified, the default is used
     * @param height Number The height of the icon. If not specified, the default is used
     * @returns Ext.window.MessageBox this
     */
    static setIcon(
      icon?: string,
      width?: number,
      height?: number
    ): Ext$Ext$window.Ext$IMessageBox;

    /**
     * [Method] Set the iconCls for the panel s header
     * @param newIconCls String The new CSS class name
     */
    static setIconCls(newIconCls?: string): void;

    /**
     * [Method] This method allows you to show or hide a LoadMask on top of this component
     * @param load Boolean/Object/String True to show the default LoadMask, a config object that will be passed to the LoadMask constructor, or a message String to show. False to hide the current LoadMask.
     * @param targetEl Boolean True to mask the targetEl of this Component instead of the this.el. For example, setting this to true on a Panel will cause only the body to be masked.
     * @returns Ext.LoadMask The LoadMask instance that has just been shown.
     */
    static setLoading(load?: any, targetEl?: boolean): Ext$Ext$ILoadMask;

    /**
     * [Method] Overridden in Ext rtl AbstractComponent
     * @param x Object
     * @returns Ext.util.Positionable this
     */
    static setLocalX(x?: any): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Overridden in Ext rtl AbstractComponent
     * @param x Object
     * @param y Object
     * @returns Ext.util.Positionable this
     */
    static setLocalXY(x?: any, y?: any): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Sets the local y coordinate of this element using CSS style
     * @param y Object
     * @returns Ext.util.Positionable this
     */
    static setLocalY(y?: any): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Sets the margin on the target element
     * @param margin Number/String The margin to set. See the margin config.
     */
    static setMargin(margin?: any): void;

    /**
     * [Method] Sets the overflow x y on the content element of the component
     * @param overflowX String The overflow-x value.
     * @param overflowY String The overflow-y value.
     * @returns Ext.Component this
     */
    static setOverflowXY(
      overflowX?: string,
      overflowY?: string
    ): Ext$flash$IComponent;

    /**
     * [Method] Sets the page XY position of the component
     * @param x Number/Number[] The new x position or an array of [x,y].
     * @param y Number The new y position.
     * @param animate Boolean/Object True to animate the Component into its new position. You may also pass an animation configuration.
     * @returns Ext.Component this
     */
    static setPagePosition(
      x?: any,
      y?: number,
      animate?: any
    ): Ext$flash$IComponent;

    /**
     * [Method] Sets the left and top of the component
     * @param x Number/Number[]/Object The new left, an array of [x,y], or animation config object containing x and y properties.
     * @param y Number The new top.
     * @param animate Boolean/Object If true, the Component is animated into its new position. You may also pass an animation configuration.
     * @returns Ext.Component this
     */
    static setPosition(
      x?: any,
      y?: number,
      animate?: any
    ): Ext$flash$IComponent;

    /**
     * [Method] Sets the element s position and size to the specified region
     * @param region Ext.util.Region The region to fill
     * @param animate Boolean/Object true for the default animation or a standard Element animation config object
     * @returns Ext.util.Positionable this
     */
    static setRegion(
      region?: Ext$Ext$util.util$IRegion,
      animate?: any
    ): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Sets the weight config property for this component
     * @param weight Number The new weight value.
     * @returns Number The previous value of the weight property.
     */
    static setRegionWeight(weight?: number): number;

    /**
     * [Method] Sets the width and height of this Component
     * @param width Number/String/Object The new width to set. This may be one of:  A Number specifying the new width in the Element's Ext.Element.defaultUnits (by default, pixels). A String used to set the CSS width style. A size object in the format {width: widthValue, height: heightValue}. undefined to leave the width unchanged.
     * @param height Number/String The new height to set (not required if a size object is passed as the first arg). This may be one of:  A Number specifying the new height in the Element's Ext.Element.defaultUnits (by default, pixels). A String used to set the CSS height style. Animation may not be used. undefined to leave the height unchanged.
     * @returns Ext.Component this
     */
    static setSize(width?: any, height?: any): Ext$flash$IComponent;

    /**
     * [Method] Set a title for the panel s header
     * @param newTitle String
     */
    static setTitle(newTitle?: string): void;

    /**
     * [Method] Sets the UI for the component
     * @param ui Object
     */
    static setUI(ui?: any): void;

    /**
     * [Method] Convenience function to hide or show this component by Boolean
     * @param visible Boolean true to show, false to hide.
     * @returns Ext.Component this
     */
    static setVisible(visible?: boolean): Ext$flash$IComponent;

    /**
     * [Method] Sets the width of the component
     * @param width Number The new width to setThis may be one of:  A Number specifying the new width in the Element's Ext.Element.defaultUnits (by default, pixels). A String used to set the CSS width style.
     * @returns Ext.Component this
     */
    static setWidth(width?: number): Ext$flash$IComponent;

    /**
     * [Method] Sets the X position of the DOM element based on page coordinates
     * @param x Object
     * @param animate Object
     * @returns Ext.util.Positionable this
     */
    static setX(x?: any, animate?: any): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Sets the position of the DOM element in page coordinates
     * @param xy Object
     * @param animate Object
     * @returns Ext.util.Positionable this
     */
    static setXY(xy?: any, animate?: any): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Sets the Y position of the DOM element based on page coordinates
     * @param y Object
     * @param animate Object
     * @returns Ext.util.Positionable this
     */
    static setY(y?: any, animate?: any): Ext$Ext$util.util$IPositionable;

    /**
     * [Method] Displays a new message box or reinitializes an existing message box based on the config options passed in
     * @param config Object The following config options are supported:
     * @returns Ext.window.MessageBox this
     */
    static show(config?: any): Ext$Ext$window.Ext$IMessageBox;

    /**
     * [Method] Displays component at specific xy position
     * @param x Number/Number[] The new x position or array of [x,y].
     * @param y Number The new y position
     * @param animate Boolean/Object True to animate the Component into its new position. You may also pass an animation configuration.
     * @returns Ext.Component this
     */
    static showAt(x?: any, y?: number, animate?: any): Ext$flash$IComponent;

    /**
     * [Method] Shows this component by the specified Component or Element
     * @param component Ext.Component/Ext.dom.Element The Ext.Component or Ext.Element to show the component by.
     * @param position String Alignment position as used by Ext.util.Positionable.getAlignToXY. Defaults to defaultAlign.
     * @param offsets Number[] Alignment offsets as used by Ext.util.Positionable.getAlignToXY.
     * @returns Ext.Component this
     */
    static showBy(
      component?: any,
      position?: string,
      offsets?: number[]
    ): Ext$flash$IComponent;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Stops any running effects and clears this object s internal effects queue if it contains any additional effects that
     * @returns Ext.Element The Element
     */
    static stopAnimation(): Ext$Ext$IElement;

    /**
     * [Method] Stops any running effects and clears this object s internal effects queue if it contains any additional effects that
     * @returns Ext.Element The Element
     */
    static stopFx(): Ext$Ext$IElement;

    /**
     * [Method] Suspends firing of the named event s
     * @param eventName String... Multiple event names to suspend.
     */
    static suspendEvent(...eventName: any[]): void;

    /**
     * [Method] Suspends the firing of all events
     * @param queueSuspended Boolean Pass as true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events.
     */
    static suspendEvents(queueSuspended?: boolean): void;

    /**
     * [Method] Ensures that all effects queued after syncFx is called on this object are run concurrently
     * @returns Object this
     */
    static syncFx(): any;

    /**
     * [Method] Sends this Component to the back of lower z index than any other visible windows
     * @returns Ext.Component this
     */
    static toBack(): Ext$flash$IComponent;

    /**
     * [Method] Brings this floating Component to the front of any other visible floating Components managed by the same ZIndexManag
     * @param preventFocus Boolean Specify true to prevent the Component from being focused.
     * @returns Ext.Component this
     */
    static toFront(preventFocus?: boolean): Ext$flash$IComponent;

    /**
     * [Method] Shortcut for performing an expand or collapse based on the current state of the panel
     * @returns Ext.panel.Panel this
     */
    static toggleCollapse(): Ext$Ext$panel.tree$IPanel;

    /**
     * [Method] A shortcut method for toggling between maximize and restore based on the current maximized state of the window
     * @returns Ext.window.Window this
     */
    static toggleMaximize(): Ext$Ext$window.Ext$IWindow;

    /**
     * [Method] Translates the passed page coordinates into left top css values for the element
     * @param x Number/Array The page x or an array containing [x, y]
     * @param y Number The page y, required if x is not an array
     * @returns Object An object with left and top properties. e.g. {left: (value), top: (value)}
     */
    static translatePoints(x?: any, y?: number): any;

    /**
     * [Method] Shorthand for removeListener
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static un(eventName?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Navigates up the ownership hierarchy searching for an ancestor Container which matches any passed simple selector or
     * @param selector String/Ext.Component The simple selector component or actual component to test. If not passed the immediate owner/activater is returned.
     * @param limit String/Number/Ext.Component This may be a selector upon which to stop the upward scan, or a limit of teh number of steps, or Component reference to stop on.
     * @returns Ext.container.Container The matching ancestor Container (or undefined if no match was found).
     */
    static up(selector?: any, limit?: any): Ext$Ext$container.Ext$IContainer;

    /**
     * [Method] Update the content area of a component
     * @param htmlOrData String/Object If this component has been configured with a template via the tpl config then it will use this argument as data to populate the template. If this component was not configured with a template, the components content area will be updated via Ext.Element update.
     * @param loadScripts Boolean Only legitimate when using the html configuration.
     * @param callback Function Only legitimate when using the html configuration. Callback to execute when scripts have finished loading.
     */
    static update(
      htmlOrData?: any,
      loadScripts?: boolean,
      Ext$callback?: any
    ): void;

    /**
     * [Method] Sets the current box measurements of the component s underlying element
     * @param box Object An object in the format {x, y, width, height}
     * @returns Ext.Component this
     */
    static updateBox(box?: any): Ext$flash$IComponent;

    /**
     * [Method] Updates this component s layout
     * @param options Object An object with layout options.
     */
    static updateLayout(options?: any): void;

    /**
     * [Method] Updates a progress style message box s text and progress bar
     * @param value Number Any number between 0 and 1 (e.g., .5)
     * @param progressText String The progress text to display inside the progress bar.
     * @param msg String The message box's body text is replaced with the specified string (defaults to undefined so that any existing body text will not get overwritten by default unless a new value is passed in)
     * @returns Ext.window.MessageBox this
     */
    static updateProgress(
      Ext$value?: number,
      progressText?: string,
      msg?: string
    ): Ext$Ext$window.Ext$IMessageBox;

    /**
     * [Method] Displays a message box with an infinitely auto updating progress bar
     * @param msg String The message box body text
     * @param title String The title bar text
     * @param config Object A Ext.ProgressBar.wait config object
     * @returns Ext.window.MessageBox this
     */
    static wait(
      msg?: string,
      title?: string,
      config?: any
    ): Ext$Ext$window.Ext$IMessageBox;
  }

  declare export type Ext$IModelManager = {} & Ext$Ext$IAbstractManager;

  declare export class Ext$ModelManager {
    /**
     * [Property] (Ext.util.HashMap)
     */
    static all: Ext$Ext$util.util$IHashMap;

    /**
     * [Property] (Ext.data.association.Association[])
     */
    static associationStack: Ext$Ext$data.association.data$IAssociation[];

    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Creates a new instance of a Model using the given data
     * @param data Object Data to initialize the Model's fields with
     * @param name String The name of the model to create
     * @param id Number unique id of the Model instance (see Ext.data.Model)
     */
    static create(Ext$data?: any, Ext$name?: string, Ext$id?: number): void;

    /**
     * [Method] Executes the specified function once for each item in the collection
     * @param fn Function The function to execute.
     * @param scope Object The scope to execute in. Defaults to this.
     */
    static each(fn?: any, scope?: any): void;

    /**
     * [Method] Returns an item by id
     * @param id String The id of the item
     * @returns Object The item, undefined if not found.
     */
    static get(Ext$id?: string): any;

    /**
     * [Method] Gets the number of items in the collection
     * @returns Number The number of items in the collection.
     */
    static getCount(): number;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(Ext$name?: string): any;

    /**
     * [Method] Returns the Ext data Model class for a given model name
     * @param id String/Object The classname of the model or the model class itself.
     * @returns Ext.data.Model a model class.
     */
    static getModel(Ext$id?: any): Ext$Ext$data.selection$IModel;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Checks if an item type is registered
     * @param type String The mnemonic string by which the class may be looked up
     * @returns Boolean Whether the type is registered.
     */
    static isRegistered(Ext$type?: string): boolean;

    /**
     * [Method] Registers a function that will be called when an item with the specified id is added to the manager
     * @param id String The item id
     * @param fn Function The callback function. Called with a single parameter, the item.
     * @param scope Object The scope (this reference) in which the callback is executed. Defaults to the item.
     */
    static onAvailable(Ext$id?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Registers an item to be managed
     * @param item Object The item to register
     */
    static register(item?: any): void;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Unregisters an item by removing it from this manager
     * @param item Object The item to unregister
     */
    static unregister(item?: any): void;
  }

  declare export type Ext$IModelMgr = {} & Ext$Ext$IAbstractManager;

  declare export class Ext$ModelMgr {
    /**
     * [Property] (Ext.util.HashMap)
     */
    static all: Ext$Ext$util.util$IHashMap;

    /**
     * [Property] (Ext.data.association.Association[])
     */
    static associationStack: Ext$Ext$data.association.data$IAssociation[];

    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Creates a new instance of a Model using the given data
     * @param data Object Data to initialize the Model's fields with
     * @param name String The name of the model to create
     * @param id Number unique id of the Model instance (see Ext.data.Model)
     */
    static create(Ext$data?: any, Ext$name?: string, Ext$id?: number): void;

    /**
     * [Method] Executes the specified function once for each item in the collection
     * @param fn Function The function to execute.
     * @param scope Object The scope to execute in. Defaults to this.
     */
    static each(fn?: any, scope?: any): void;

    /**
     * [Method] Returns an item by id
     * @param id String The id of the item
     * @returns Object The item, undefined if not found.
     */
    static get(Ext$id?: string): any;

    /**
     * [Method] Gets the number of items in the collection
     * @returns Number The number of items in the collection.
     */
    static getCount(): number;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(Ext$name?: string): any;

    /**
     * [Method] Returns the Ext data Model class for a given model name
     * @param id String/Object The classname of the model or the model class itself.
     * @returns Ext.data.Model a model class.
     */
    static getModel(Ext$id?: any): Ext$Ext$data.selection$IModel;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Checks if an item type is registered
     * @param type String The mnemonic string by which the class may be looked up
     * @returns Boolean Whether the type is registered.
     */
    static isRegistered(Ext$type?: string): boolean;

    /**
     * [Method] Registers a function that will be called when an item with the specified id is added to the manager
     * @param id String The item id
     * @param fn Function The callback function. Called with a single parameter, the item.
     * @param scope Object The scope (this reference) in which the callback is executed. Defaults to the item.
     */
    static onAvailable(Ext$id?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Registers an item to be managed
     * @param item Object The item to register
     */
    static register(item?: any): void;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Unregisters an item by removing it from this manager
     * @param item Object The item to unregister
     */
    static unregister(item?: any): void;
  }

  declare export type Ext$INumber = {
    /**
     * [Config Option] (Boolean)
     */
    allowDecimals?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    allowExponential?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    autoStripChars?: boolean,

    /**
     * [Config Option] (String)
     */
    baseChars?: string,

    /**
     * [Config Option] (Number)
     */
    decimalPrecision?: number,

    /**
     * [Config Option] (String)
     */
    decimalSeparator?: string,

    /**
     * [Config Option] (String)
     */
    maxText?: string,

    /**
     * [Config Option] (Number)
     */
    maxValue?: number,

    /**
     * [Config Option] (String)
     */
    minText?: string,

    /**
     * [Config Option] (Number)
     */
    minValue?: number,

    /**
     * [Config Option] (String)
     */
    nanText?: string,

    /**
     * [Config Option] (String)
     */
    negativeText?: string,

    /**
     * [Config Option] (Number)
     */
    step?: number,

    /**
     * [Config Option] (Boolean)
     */
    submitLocaleSeparator?: boolean,

    /**
     * [Method] Template method to do any pre blur processing
     */
    beforeBlur?: () => void,

    /**
     * [Method] Runs all of Number s validations and returns an array of any errors
     * @param value Object The value to get errors for (defaults to the current field value)
     * @returns String[] All validation errors for this field
     */
    getErrors?: (Ext$value?: any) => string[],

    /**
     * [Method] Returns the value that would be included in a standard form submit for this field
     * @returns String The value to be submitted, or null.
     */
    getSubmitValue?: () => string,

    /**
     * [Method] private
     */
    initComponent?: () => void,

    /**
     * [Method] This method is called when the spinner down button is clicked or when the down arrow key is pressed if keyNavEnabled
     */
    onSpinDown?: () => void,

    /**
     * [Method] This method is called when the spinner up button is clicked or when the up arrow key is pressed if keyNavEnabled is
     */
    onSpinUp?: () => void,

    /**
     * [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type
     * @param rawValue Object
     * @returns Object The converted value.
     */
    rawToValue?: (rawValue?: any) => any,

    /**
     * [Method] Replaces any existing maxValue with the new value
     * @param value Number The maximum value
     */
    setMaxValue?: (Ext$value?: number) => void,

    /**
     * [Method] Replaces any existing minValue with the new value
     * @param value Number The minimum value
     */
    setMinValue?: (Ext$value?: number) => void,

    /**
     * [Method] Sets whether the spinner down button is enabled
     * @param enabled Object
     * @param internal Object
     */
    setSpinDownEnabled?: (enabled?: any, internal?: any) => void,

    /**
     * [Method] Sets whether the spinner up button is enabled
     * @param enabled Object
     * @param internal Object
     */
    setSpinUpEnabled?: (enabled?: any, internal?: any) => void,

    /**
     * [Method] Converts a mixed type value to a raw representation suitable for displaying in the field
     * @param value Object
     * @returns Object The converted raw value.
     */
    valueToRaw?: (Ext$value?: any) => any,

    /**
     * [Config Option] (Boolean)
     */
    allowDecimals?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    allowExponential?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    autoStripChars?: boolean,

    /**
     * [Config Option] (String)
     */
    baseChars?: string,

    /**
     * [Config Option] (Number)
     */
    decimalPrecision?: number,

    /**
     * [Config Option] (String)
     */
    decimalSeparator?: string,

    /**
     * [Config Option] (String)
     */
    maxText?: string,

    /**
     * [Config Option] (Number)
     */
    maxValue?: number,

    /**
     * [Config Option] (String)
     */
    minText?: string,

    /**
     * [Config Option] (Number)
     */
    minValue?: number,

    /**
     * [Config Option] (String)
     */
    nanText?: string,

    /**
     * [Config Option] (String)
     */
    negativeText?: string,

    /**
     * [Config Option] (Number)
     */
    step?: number,

    /**
     * [Config Option] (Boolean)
     */
    submitLocaleSeparator?: boolean,

    /**
     * [Method] Template method to do any pre blur processing
     */
    beforeBlur?: () => void,

    /**
     * [Method] Runs all of Number s validations and returns an array of any errors
     * @param value Object The value to get errors for (defaults to the current field value)
     * @returns String[] All validation errors for this field
     */
    getErrors?: (Ext$value?: any) => string[],

    /**
     * [Method] Returns the value that would be included in a standard form submit for this field
     * @returns String The value to be submitted, or null.
     */
    getSubmitValue?: () => string,

    /**
     * [Method] private
     */
    initComponent?: () => void,

    /**
     * [Method] This method is called when the spinner down button is clicked or when the down arrow key is pressed if keyNavEnabled
     */
    onSpinDown?: () => void,

    /**
     * [Method] This method is called when the spinner up button is clicked or when the up arrow key is pressed if keyNavEnabled is
     */
    onSpinUp?: () => void,

    /**
     * [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type
     * @param rawValue Object
     * @returns Object The converted value.
     */
    rawToValue?: (rawValue?: any) => any,

    /**
     * [Method] Replaces any existing maxValue with the new value
     * @param value Number The maximum value
     */
    setMaxValue?: (Ext$value?: number) => void,

    /**
     * [Method] Replaces any existing minValue with the new value
     * @param value Number The minimum value
     */
    setMinValue?: (Ext$value?: number) => void,

    /**
     * [Method] Sets whether the spinner down button is enabled
     * @param enabled Object
     * @param internal Object
     */
    setSpinDownEnabled?: (enabled?: any, internal?: any) => void,

    /**
     * [Method] Sets whether the spinner up button is enabled
     * @param enabled Object
     * @param internal Object
     */
    setSpinUpEnabled?: (enabled?: any, internal?: any) => void,

    /**
     * [Method] Converts a mixed type value to a raw representation suitable for displaying in the field
     * @param value Object
     * @returns Object The converted raw value.
     */
    valueToRaw?: (Ext$value?: any) => any,

    /**
     * [Config Option] (String)
     */
    format?: string
  } & undefined.form$ISpinner;

  declare export class Ext$Number {
    /**
     * [Method] Checks whether or not the passed number is within a desired range
     * @param number Number The number to check
     * @param min Number The minimum number in the range
     * @param max Number The maximum number in the range
     * @returns Number The constrained value if outside the range, otherwise the current value
     */
    static constrain(
      number?: number,
      Ext$min?: number,
      Ext$max?: number
    ): number;

    /**
     * [Method] Corrects floating point numbers that overflow to a non precise value because of their floating nature for example 0
     * @param The Number number
     * @returns Number The correctly rounded number
     */
    static correctFloat(The?: number): number;

    /**
     * [Method] Validate that a value is numeric and convert it to a number if necessary
     * @param value Object
     * @param defaultValue Number The value to return if the original value is non-numeric
     * @returns Number value, if numeric, defaultValue otherwise
     */
    static from(Ext$value?: any, defaultValue?: number): number;

    /**
     * [Method] Returns a random integer between the specified range inclusive
     * @param from Number Lowest value to return.
     * @param to Number Highst value to return.
     * @returns Number A random integer within the specified range.
     */
    static randomInt(from?: number, to?: number): number;

    /**
     * [Method] Snaps the passed number between stopping points based upon a passed increment value
     * @param value Number The unsnapped value.
     * @param increment Number The increment by which the value must move.
     * @param minValue Number The minimum value to which the returned value must be constrained. Overrides the increment.
     * @param maxValue Number The maximum value to which the returned value must be constrained. Overrides the increment.
     * @returns Number The value of the nearest snap target.
     */
    static snap(
      Ext$value?: number,
      increment?: number,
      minValue?: number,
      maxValue?: number
    ): number;

    /**
     * [Method] Snaps the passed number between stopping points based upon a passed increment value
     * @param value Number The unsnapped value.
     * @param increment Number The increment by which the value must move.
     * @param minValue Number The minimum value to which the returned value must be constrained.
     * @param maxValue Number The maximum value to which the returned value must be constrained.
     * @returns Number The value of the nearest snap target.
     */
    static snapInRange(
      Ext$value?: number,
      increment?: number,
      minValue?: number,
      maxValue?: number
    ): number;

    /**
     * [Method] Formats a number using fixed point notation
     * @param value Number The number to format
     * @param precision Number The number of digits to show after the decimal point
     */
    static toFixed(Ext$value?: number, precision?: number): void;
  }

  declare export interface Ext$IObject {}

  declare export class Ext$Object {
    /**
     * [Method] Returns a new object with the given object as the prototype chain
     * @param object Object The prototype chain for the new object.
     */
    static chain(object?: any): void;

    /**
     * [Method] Iterates through an object and invokes the given callback function for each iteration
     * @param object Object The object to iterate
     * @param fn Function The callback function.
     * @param scope Object The execution scope (this) of the callback function
     */
    static each(object?: any, fn?: any, scope?: any): void;

    /**
     * [Method] Shallow compares the contents of 2 objects using strict equality
     * @param object1 Object
     * @param object2 Object
     * @returns Boolean true if the objects are equal.
     */
    static equals(object1?: any, object2?: any): boolean;

    /**
     * [Method] Converts a query string back into an object
     * @param queryString String The query string to decode
     * @param recursive Boolean Whether or not to recursively decode the string. This format is supported by PHP / Ruby on Rails servers and similar.
     * @returns Object
     */
    static fromQueryString(queryString?: string, recursive?: boolean): any;

    /**
     * [Method] Returns the first matching key corresponding to the given value
     * @param object Object
     * @param value Object The value to find
     */
    static getKey(object?: any, Ext$value?: any): void;

    /**
     * [Method] Gets all keys of the given object as an array
     * @param object Object
     * @returns String[] An array of keys from the object
     */
    static getKeys(object?: any): string[];

    /**
     * [Method] Gets the total number of this object s own properties var size  Ext Object getSize  name  Jacky  loves
     * @param object Object
     * @returns Number size
     */
    static getSize(object?: any): number;

    /**
     * [Method] Gets all values of the given object as an array
     * @param object Object
     * @returns Array An array of values from the object
     */
    static getValues(object?: any): any[];

    /**
     * [Method] Checks if there are any properties on this object
     * @param object Object
     * @returns Boolean true if there no properties on the object.
     */
    static isEmpty(object?: any): boolean;

    /**
     * [Method] Merges any number of objects recursively without referencing them or their children
     * @param destination Object The object into which all subsequent objects are merged.
     * @param object Object... Any number of objects to merge into the destination.
     * @returns Object merged The destination object with all passed objects merged in.
     */
    static merge(destination: any, ...object: any[]): any;

    /**
     * [Method] Converts a name  value pair to an array of objects with support for nested structures
     * @param name String
     * @param value Object/Array
     * @param recursive Boolean True to traverse object recursively
     * @returns Array
     */
    static toQueryObjects(
      Ext$name?: string,
      Ext$value?: any,
      recursive?: boolean
    ): any[];

    /**
     * [Method] Takes an object and converts it to an encoded query string
     * @param object Object The object to encode
     * @param recursive Boolean Whether or not to interpret the object in recursive format. (PHP / Ruby on Rails servers and similar).
     * @returns String queryString
     */
    static toQueryString(object?: any, recursive?: boolean): string;
  }

  declare export type panel$ITool = {
    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Function)
     */
    Ext$callback?: any,

    /**
     * [Config Option] (String)
     */
    disabledCls?: string,

    /**
     * [Config Option] (Function)
     */
    handler?: any,

    /**
     * [Config Option] (Number)
     */
    height?: number,

    /**
     * [Config Option] (Ext.XTemplate/String/String[])
     */
    renderTpl?: any,

    /**
     * [Config Option] (Object)
     */
    scope?: any,

    /**
     * [Config Option] (Boolean)
     */
    stopEvent?: boolean,

    /**
     * [Config Option] (Ext.Component)
     */
    toolOwner?: Ext$flash$IComponent,

    /**
     * [Config Option] (String/Object)
     */
    tooltip?: any,

    /**
     * [Config Option] (String)
     */
    tooltipType?: string,

    /**
     * [Config Option] (String)
     */
    Ext$type?: string,

    /**
     * [Config Option] (Number)
     */
    width?: number,

    /**
     * [Property] (Boolean)
     */
    isTool?: boolean,

    /**
     * [Method] inherit docs
     */
    afterRender?: () => void,

    /**
     * [Method]
     */
    initComponent?: () => void,

    /**
     * [Method] inherit docs
     */
    onDestroy?: () => void,

    /**
     * [Method] Sets the type of the tool
     * @param type String The new type. See the type config.
     * @returns Ext.panel.Tool this
     */
    setType?: (Ext$type?: string) => Ext$Ext$panel.panel$ITool
  } & Ext$flash$IComponent;

  declare export type Ext$IPanel = {
    /**
     * [Config Option] (Ext.enums.Layout/Object)
     */
    Ext$layout?: any,

    /**
     * [Config Option] (Boolean)
     */
    pollForChanges?: boolean,

    /**
     * [Config Option] (Number)
     */
    pollInterval?: number,

    /**
     * [Method] Forces each field within the form panel to check if its value has changed
     */
    checkChange?: () => void,

    /**
     * [Method] Provides access to the Form which this Panel contains
     * @returns Ext.form.Basic The Form which this Panel contains.
     */
    getForm?: () => Ext$Ext$form.form$IBasic,

    /**
     * [Method] Returns the currently loaded Ext data Model instance if one was loaded via loadRecord
     * @returns Ext.data.Model The loaded instance
     */
    getRecord?: () => Ext$Ext$data.selection$IModel,

    /**
     * [Method] Convenience function for fetching the current value of each field in the form
     * @param asString Boolean If true, will return the key/value collection as a single URL-encoded param string.
     * @param dirtyOnly Boolean If true, only fields that are dirty will be included in the result.
     * @param includeEmptyText Boolean If true, the configured emptyText of empty fields will be used.
     * @param useDataValues Boolean If true, the getModelData method is used to retrieve values from fields, otherwise the getSubmitData method is used.
     * @returns String/Object
     */
    getValues?: (
      asString?: boolean,
      dirtyOnly?: boolean,
      includeEmptyText?: boolean,
      useDataValues?: boolean
    ) => any,

    /**
     * [Method] Convenience function to check if the form has any invalid fields
     */
    hasInvalidField?: () => void,

    /**
     * [Method] Initializes the FieldAncestor s state this must be called from the initComponent method of any components importing
     */
    initFieldAncestor?: () => void,

    /**
     * [Method] Convenience function to check if the form has any dirty fields
     * @returns Boolean
     */
    isDirty?: () => boolean,

    /**
     * [Method] Convenience function to check if the form has all valid fields
     * @returns Boolean
     */
    isValid?: () => boolean,

    /**
     * [Method] This is a proxy for the underlying BasicForm s Ext form Basic load call
     * @param options Object The options to pass to the action (see Ext.form.Basic.load and Ext.form.Basic.doAction for details)
     */
    load?: (options?: any) => void,

    /**
     * [Method] Loads an Ext data Model into this form internally just calls Ext form Basic loadRecord See also trackResetOnLoad
     * @param record Ext.data.Model The record to load
     * @returns Ext.form.Basic The Ext.form.Basic attached to this FormPanel
     */
    loadRecord?: (
      record?: Ext$Ext$data.selection$IModel
    ) => Ext$Ext$form.form$IBasic,

    /**
     * [Method] Fired when the error message of any field within the container changes
     * @param field Ext.form.Labelable The sub-field whose active error changed
     * @param error String The new active error message
     */
    onFieldErrorChange?: (
      field?: Ext$Ext$form.form$ILabelable,
      error?: string
    ) => void,

    /**
     * [Method] Fired when the validity of any field within the container changes
     * @param field Ext.form.field.Field The sub-field whose validity changed
     * @param valid Boolean The new validity state
     */
    onFieldValidityChange?: (
      field?: Ext$Ext$form.field.field$IField,
      valid?: boolean
    ) => void,

    /**
     * [Method] Start an interval task to continuously poll all the fields in the form for changes in their values
     * @param interval Number The interval in milliseconds at which the check should run.
     */
    startPolling?: (interval?: number) => void,

    /**
     * [Method] Stop a running interval task that was started by startPolling
     */
    stopPolling?: () => void,

    /**
     * [Method] This is a proxy for the underlying BasicForm s Ext form Basic submit call
     * @param options Object The options to pass to the action (see Ext.form.Basic.submit and Ext.form.Basic.doAction for details)
     */
    submit?: (options?: any) => void,

    /**
     * [Method] Persists the values in this form into the passed Ext data Model object in a beginEdit endEdit block
     * @param record Ext.data.Model The record to edit
     * @returns Ext.form.Basic The Ext.form.Basic attached to this FormPanel
     */
    updateRecord?: (
      record?: Ext$Ext$data.selection$IModel
    ) => Ext$Ext$form.form$IBasic,

    /**
     * [Config Option] (Ext.grid.column.Column[]/Object)
     */
    columns?: any,

    /**
     * [Config Option] (Boolean)
     */
    rowLines?: boolean,

    /**
     * [Config Option] (String)
     */
    viewType?: string,

    /**
     * [Method] Reconfigures the grid with a new store columns
     * @param store Ext.data.Store The new store.
     * @param columns Object[] An array of column configs
     */
    reconfigure?: (
      store?: Ext$Ext$data.property$IStore,
      columns?: any[]
    ) => void,

    /**
     * [Config Option] (Boolean)
     */
    animCollapse?: boolean,

    /**
     * [Config Option] (Object/Object[])
     */
    bbar?: any,

    /**
     * [Config Option] (String)
     */
    buttonAlign?: string,

    /**
     * [Config Option] (Object/Object[])
     */
    buttons?: any,

    /**
     * [Config Option] (Boolean)
     */
    closable?: boolean,

    /**
     * [Config Option] (String)
     */
    closeAction?: string,

    /**
     * [Config Option] (String)
     */
    collapseDirection?: string,

    /**
     * [Config Option] (Boolean)
     */
    collapseFirst?: boolean,

    /**
     * [Config Option] (String)
     */
    collapseMode?: string,

    /**
     * [Config Option] (Boolean)
     */
    collapsed?: boolean,

    /**
     * [Config Option] (String)
     */
    collapsedCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    collapsible?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    constrain?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    constrainHeader?: boolean,

    /**
     * [Config Option] (Object/Object[])
     */
    dockedItems?: any,

    /**
     * [Config Option] (Object/Object[])
     */
    fbar?: any,

    /**
     * [Config Option] (Boolean)
     */
    floatable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    frame?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    frameHeader?: boolean,

    /**
     * [Config Option] (Number/String)
     */
    glyph?: any,

    /**
     * [Config Option] (Boolean/Object)
     */
    header?: any,

    /**
     * [Config Option] (String)
     */
    headerOverCls?: string,

    /**
     * [Config Option] (String)
     */
    headerPosition?: string,

    /**
     * [Config Option] (Boolean)
     */
    hideCollapseTool?: boolean,

    /**
     * [Config Option] (String)
     */
    icon?: string,

    /**
     * [Config Option] (String)
     */
    iconCls?: string,

    /**
     * [Config Option] (Object/Object[])
     */
    lbar?: any,

    /**
     * [Config Option] (Boolean)
     */
    manageHeight?: boolean,

    /**
     * [Config Option] (Number)
     */
    minButtonWidth?: number,

    /**
     * [Config Option] (Boolean)
     */
    overlapHeader?: boolean,

    /**
     * [Config Option] (Ext.Component/Object)
     */
    placeholder?: any,

    /**
     * [Config Option] (Number)
     */
    placeholderCollapseHideMode?: number,

    /**
     * [Config Option] (Boolean)
     */
    preventHeader?: boolean,

    /**
     * [Config Option] (Object/Object[])
     */
    rbar?: any,

    /**
     * [Config Option] (Boolean)
     */
    simpleDrag?: boolean,

    /**
     * [Config Option] (Object/Object[])
     */
    tbar?: any,

    /**
     * [Config Option] (String)
     */
    title?: string,

    /**
     * [Config Option] (String)
     */
    titleAlign?: string,

    /**
     * [Config Option] (Boolean)
     */
    titleCollapse?: boolean,

    /**
     * [Config Option] (Object[]/Ext.panel.Tool[])
     */
    tools?: any,

    /**
     * [Property] (Ext.dd.DragSource/Ext.util.ComponentDragger)
     */
    Ext$dd?: any,

    /**
     * [Method] Add tools to this panel
     * @param tools Object[]/Ext.panel.Tool[] The tools to add
     */
    addTool?: (tools?: any) => void,

    /**
     * [Method] Invoked after the Panel is Collapsed
     * @param animated Boolean
     */
    afterCollapse?: (animated?: boolean) => void,

    /**
     * [Method] Invoked after the Panel is Expanded
     * @param animated Boolean
     */
    afterExpand?: (animated?: boolean) => void,

    /**
     * [Method] Closes the Panel
     */
    close?: () => void,

    /**
     * [Method] Collapses the panel body so that the body becomes hidden
     * @param direction String The direction to collapse towards. Must be one of  Ext.Component.DIRECTION_TOP Ext.Component.DIRECTION_RIGHT Ext.Component.DIRECTION_BOTTOM Ext.Component.DIRECTION_LEFT Defaults to collapseDirection.
     * @param animate Boolean True to animate the transition, else false (defaults to the value of the animCollapse panel config). May also be specified as the animation duration in milliseconds.
     * @returns Ext.panel.Panel this
     */
    collapse?: (
      direction?: string,
      animate?: boolean
    ) => Ext$Ext$panel.Ext$IPanel,

    /**
     * [Method] converts a collapsdDir into an anchor argument for Element slideIn overridden in rtl mode to switch l and r
     * @param collapseDir Object
     */
    convertCollapseDir?: (collapseDir?: any) => void,

    /**
     * [Method] Expands the panel body so that it becomes visible
     * @param animate Boolean True to animate the transition, else false (defaults to the value of the animCollapse panel config). May also be specified as the animation duration in milliseconds.
     * @returns Ext.panel.Panel this
     */
    expand?: (animate?: boolean) => Ext$Ext$panel.Ext$IPanel,

    /**
     * [Method] Returns the current collapsed state of the panel
     * @returns Boolean/String False when not collapsed, otherwise the value of collapseDirection.
     */
    getCollapsed?: () => any,

    /**
     * [Method] Gets the Header for this panel
     */
    getHeader?: () => void,

    /**
     * [Method] The supplied default state gathering method for the AbstractComponent class
     * @returns Object
     */
    getState?: () => any,

    /**
     * [Method] Determines whether this Component is the root of a layout
     */
    isLayoutRoot?: () => void,

    /**
     * [Method] Returns true if this component is visible
     * @param deep Object
     * @returns Boolean true if this component is visible, false otherwise.
     */
    isVisible?: (deep?: any) => boolean,

    /**
     * [Method] Possibly animates down to a target element
     */
    onHide?: () => void,

    /**
     * [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event
     * @param destroying Object
     */
    onRemoved?: (destroying?: any) => void,

    /**
     * [Method] Allows addition of behavior to the show operation
     */
    onShow?: () => void,

    /**
     * [Method]
     * @param border Object
     * @param targetEl Object
     */
    setBorder?: (border?: any, targetEl?: any) => void,

    /**
     * [Method] Set the glyph for the panel s header
     * @param newGlyph Number/String The new glyph This parameter expects a format consistent with that of glyph
     */
    setGlyph?: (newGlyph?: any) => void,

    /**
     * [Method] Set the icon for the panel s header
     * @param newIcon String The new icon path
     */
    setIcon?: (newIcon?: string) => void,

    /**
     * [Method] Set the iconCls for the panel s header
     * @param newIconCls String The new CSS class name
     */
    setIconCls?: (newIconCls?: string) => void,

    /**
     * [Method] Set a title for the panel s header
     * @param newTitle String
     */
    setTitle?: (newTitle?: string) => void,

    /**
     * [Method] Sets the UI for the component
     * @param ui Object
     */
    setUI?: (ui?: any) => void,

    /**
     * [Method] Shortcut for performing an expand or collapse based on the current state of the panel
     * @returns Ext.panel.Panel this
     */
    toggleCollapse?: () => Ext$Ext$panel.Ext$IPanel,

    /**
     * [Config Option] (Boolean)
     */
    animCollapse?: boolean,

    /**
     * [Config Option] (Object/Object[])
     */
    bbar?: any,

    /**
     * [Config Option] (String)
     */
    buttonAlign?: string,

    /**
     * [Config Option] (Object/Object[])
     */
    buttons?: any,

    /**
     * [Config Option] (Boolean)
     */
    closable?: boolean,

    /**
     * [Config Option] (String)
     */
    closeAction?: string,

    /**
     * [Config Option] (String)
     */
    collapseDirection?: string,

    /**
     * [Config Option] (Boolean)
     */
    collapseFirst?: boolean,

    /**
     * [Config Option] (String)
     */
    collapseMode?: string,

    /**
     * [Config Option] (Boolean)
     */
    collapsed?: boolean,

    /**
     * [Config Option] (String)
     */
    collapsedCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    collapsible?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    constrain?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    constrainHeader?: boolean,

    /**
     * [Config Option] (Object/Object[])
     */
    dockedItems?: any,

    /**
     * [Config Option] (Object/Object[])
     */
    fbar?: any,

    /**
     * [Config Option] (Boolean)
     */
    floatable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    frame?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    frameHeader?: boolean,

    /**
     * [Config Option] (Number/String)
     */
    glyph?: any,

    /**
     * [Config Option] (Boolean/Object)
     */
    header?: any,

    /**
     * [Config Option] (String)
     */
    headerOverCls?: string,

    /**
     * [Config Option] (String)
     */
    headerPosition?: string,

    /**
     * [Config Option] (Boolean)
     */
    hideCollapseTool?: boolean,

    /**
     * [Config Option] (String)
     */
    icon?: string,

    /**
     * [Config Option] (String)
     */
    iconCls?: string,

    /**
     * [Config Option] (Object/Object[])
     */
    lbar?: any,

    /**
     * [Config Option] (Boolean)
     */
    manageHeight?: boolean,

    /**
     * [Config Option] (Number)
     */
    minButtonWidth?: number,

    /**
     * [Config Option] (Boolean)
     */
    overlapHeader?: boolean,

    /**
     * [Config Option] (Ext.Component/Object)
     */
    placeholder?: any,

    /**
     * [Config Option] (Number)
     */
    placeholderCollapseHideMode?: number,

    /**
     * [Config Option] (Boolean)
     */
    preventHeader?: boolean,

    /**
     * [Config Option] (Object/Object[])
     */
    rbar?: any,

    /**
     * [Config Option] (Boolean)
     */
    simpleDrag?: boolean,

    /**
     * [Config Option] (Object/Object[])
     */
    tbar?: any,

    /**
     * [Config Option] (String)
     */
    title?: string,

    /**
     * [Config Option] (String)
     */
    titleAlign?: string,

    /**
     * [Config Option] (Boolean)
     */
    titleCollapse?: boolean,

    /**
     * [Config Option] (Object[]/Ext.panel.Tool[])
     */
    tools?: any,

    /**
     * [Property] (Ext.dd.DragSource/Ext.util.ComponentDragger)
     */
    Ext$dd?: any,

    /**
     * [Method] Add tools to this panel
     * @param tools Object[]/Ext.panel.Tool[] The tools to add
     */
    addTool?: (tools?: any) => void,

    /**
     * [Method] Invoked after the Panel is Collapsed
     * @param animated Boolean
     */
    afterCollapse?: (animated?: boolean) => void,

    /**
     * [Method] Invoked after the Panel is Expanded
     * @param animated Boolean
     */
    afterExpand?: (animated?: boolean) => void,

    /**
     * [Method] Closes the Panel
     */
    close?: () => void,

    /**
     * [Method] Collapses the panel body so that the body becomes hidden
     * @param direction String The direction to collapse towards. Must be one of  Ext.Component.DIRECTION_TOP Ext.Component.DIRECTION_RIGHT Ext.Component.DIRECTION_BOTTOM Ext.Component.DIRECTION_LEFT Defaults to collapseDirection.
     * @param animate Boolean True to animate the transition, else false (defaults to the value of the animCollapse panel config). May also be specified as the animation duration in milliseconds.
     * @returns Ext.panel.Panel this
     */
    collapse?: (
      direction?: string,
      animate?: boolean
    ) => Ext$Ext$panel.Ext$IPanel,

    /**
     * [Method] converts a collapsdDir into an anchor argument for Element slideIn overridden in rtl mode to switch l and r
     * @param collapseDir Object
     */
    convertCollapseDir?: (collapseDir?: any) => void,

    /**
     * [Method] Expands the panel body so that it becomes visible
     * @param animate Boolean True to animate the transition, else false (defaults to the value of the animCollapse panel config). May also be specified as the animation duration in milliseconds.
     * @returns Ext.panel.Panel this
     */
    expand?: (animate?: boolean) => Ext$Ext$panel.Ext$IPanel,

    /**
     * [Method] Returns the current collapsed state of the panel
     * @returns Boolean/String False when not collapsed, otherwise the value of collapseDirection.
     */
    getCollapsed?: () => any,

    /**
     * [Method] Gets the Header for this panel
     */
    getHeader?: () => void,

    /**
     * [Method] The supplied default state gathering method for the AbstractComponent class
     * @returns Object
     */
    getState?: () => any,

    /**
     * [Method] Determines whether this Component is the root of a layout
     */
    isLayoutRoot?: () => void,

    /**
     * [Method] Returns true if this component is visible
     * @param deep Object
     * @returns Boolean true if this component is visible, false otherwise.
     */
    isVisible?: (deep?: any) => boolean,

    /**
     * [Method] Possibly animates down to a target element
     */
    onHide?: () => void,

    /**
     * [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event
     * @param destroying Object
     */
    onRemoved?: (destroying?: any) => void,

    /**
     * [Method] Allows addition of behavior to the show operation
     */
    onShow?: () => void,

    /**
     * [Method]
     * @param border Object
     * @param targetEl Object
     */
    setBorder?: (border?: any, targetEl?: any) => void,

    /**
     * [Method] Set the glyph for the panel s header
     * @param newGlyph Number/String The new glyph This parameter expects a format consistent with that of glyph
     */
    setGlyph?: (newGlyph?: any) => void,

    /**
     * [Method] Set the icon for the panel s header
     * @param newIcon String The new icon path
     */
    setIcon?: (newIcon?: string) => void,

    /**
     * [Method] Set the iconCls for the panel s header
     * @param newIconCls String The new CSS class name
     */
    setIconCls?: (newIconCls?: string) => void,

    /**
     * [Method] Set a title for the panel s header
     * @param newTitle String
     */
    setTitle?: (newTitle?: string) => void,

    /**
     * [Method] Sets the UI for the component
     * @param ui Object
     */
    setUI?: (ui?: any) => void,

    /**
     * [Method] Shortcut for performing an expand or collapse based on the current state of the panel
     * @returns Ext.panel.Panel this
     */
    toggleCollapse?: () => Ext$Ext$panel.Ext$IPanel,

    /**
     * [Config Option] (String/Number)
     */
    activeItem?: any,

    /**
     * [Config Option] (String/Number/Ext.Component)
     */
    activeTab?: any,

    /**
     * [Config Option] (Boolean)
     */
    deferredRender?: boolean,

    /**
     * [Config Option] (String)
     */
    itemCls?: string,

    /**
     * [Config Option] (Ext.enums.Layout/Object)
     */
    Ext$layout?: any,

    /**
     * [Config Option] (Number)
     */
    maxTabWidth?: number,

    /**
     * [Config Option] (Number)
     */
    minTabWidth?: number,

    /**
     * [Config Option] (Boolean)
     */
    plain?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    removePanelHeader?: boolean,

    /**
     * [Config Option] (Object)
     */
    tabBar?: any,

    /**
     * [Config Option] ("top"/"bottom"/"left"/"right")
     */
    tabPosition?: any,

    /**
     * [Method] Returns the item that is currently active inside this TabPanel
     * @returns Ext.Component The currently active item.
     */
    getActiveTab?: () => Ext$flash$IComponent,

    /**
     * [Method] Returns the Ext tab Bar currently used in this TabPanel
     * @returns Ext.tab.Bar The TabBar
     */
    getTabBar?: () => Ext$Ext$tab.tab$IBar,

    /**
     * [Method] Makes sure we have a Tab for each item added to the TabPanel
     * @param item Object
     * @param index Object
     */
    onAdd?: (item?: any, index?: any) => void,

    /**
     * [Method] Makes the given card active
     * @param card String/Number/Ext.Component The card to make active. Either an ID, index or the component itself.
     * @returns Ext.Component The resulting active child Component. The call may have been vetoed, or otherwise modified by an event listener.
     */
    setActiveTab?: (card?: any) => Ext$flash$IComponent,

    /**
     * [Config Option] (Boolean)
     */
    animate?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    deferRowRender?: boolean,

    /**
     * [Config Option] (String)
     */
    displayField?: string,

    /**
     * [Config Option] (Boolean)
     */
    folderSort?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    hideHeaders?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    lines?: boolean,

    /**
     * [Config Option] (Ext.data.Model/Ext.data.NodeInterface/Object)
     */
    root?: any,

    /**
     * [Config Option] (Boolean)
     */
    rootVisible?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    rowLines?: boolean,

    /**
     * [Config Option] (String)
     */
    selType?: string,

    /**
     * [Config Option] (Boolean)
     */
    singleExpand?: boolean,

    /**
     * [Config Option] (Ext.data.TreeStore)
     */
    store?: Ext$Ext$data.data$ITreeStore,

    /**
     * [Config Option] (Boolean)
     */
    useArrows?: boolean,

    /**
     * [Config Option] (String)
     */
    viewType?: string,

    /**
     * [Method] Collapse all nodes
     * @param callback Function A function to execute when the collapse finishes.
     * @param scope Object The scope of the callback function
     */
    collapseAll?: (Ext$callback?: any, scope?: any) => void,

    /**
     * [Method] Collapses a record that is loaded in the tree
     * @param record Ext.data.Model The record to collapse
     * @param deep Boolean True to collapse nodes all the way up the tree hierarchy.
     * @param callback Function The function to run after the collapse is completed
     * @param scope Object The scope of the callback function.
     */
    collapseNode?: (
      record?: Ext$Ext$data.selection$IModel,
      deep?: boolean,
      Ext$callback?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Expand all nodes
     * @param callback Function A function to execute when the expand finishes.
     * @param scope Object The scope of the callback function
     */
    expandAll?: (Ext$callback?: any, scope?: any) => void,

    /**
     * [Method] Expands a record that is loaded in the tree
     * @param record Ext.data.Model The record to expand
     * @param deep Boolean True to expand nodes all the way down the tree hierarchy.
     * @param callback Function The function to run after the expand is completed
     * @param scope Object The scope of the callback function.
     */
    expandNode?: (
      record?: Ext$Ext$data.selection$IModel,
      deep?: boolean,
      Ext$callback?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Expand the tree to the path of a particular node
     * @param path String The path to expand. The path should include a leading separator.
     * @param field String The field to get the data from. Defaults to the model idProperty.
     * @param separator String A separator to use.
     * @param callback Function A function to execute when the expand finishes. The callback will be called with (success, lastNode) where success is if the expand was successful and lastNode is the last node that was expanded.
     * @param scope Object The scope of the callback function
     */
    expandPath?: (
      path?: string,
      field?: string,
      separator?: string,
      Ext$callback?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Retrieve an array of checked records
     * @returns Ext.data.NodeInterface[] An array containing the checked records
     */
    getChecked?: () => Ext$Ext$data.data$INodeInterface[],

    /**
     * [Method] Returns the root node for this tree
     * @returns Ext.data.NodeInterface
     */
    getRootNode?: () => Ext$Ext$data.data$INodeInterface,

    /**
     * [Method] Expand the tree to the path of a particular node then select it
     * @param path String The path to select. The path should include a leading separator.
     * @param field String The field to get the data from. Defaults to the model idProperty.
     * @param separator String A separator to use.
     * @param callback Function A function to execute when the select finishes. The callback will be called with (bSuccess, oLastNode) where bSuccess is if the select was successful and oLastNode is the last node that was expanded.
     * @param scope Object The scope of the callback function
     */
    selectPath?: (
      path?: string,
      field?: string,
      separator?: string,
      Ext$callback?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Sets root node of this tree
     * @param root Ext.data.Model/Ext.data.NodeInterface/Object
     * @returns Ext.data.NodeInterface The new root
     */
    setRootNode?: (root?: any) => Ext$Ext$data.data$INodeInterface
  } & undefined.Ext$IPanel &
    undefined.form$IFieldAncestor;

  declare export type perf$IMonitor = {} & Ext$Ext$IBase;

  declare export class perf$Monitor {
    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(Ext$name?: string): any;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;
  }

  declare export type Ext$IPerf = {} & Ext$Ext$IBase;

  declare export class Ext$Perf {
    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(Ext$name?: string): any;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;
  }

  declare export type picker$ITime = {
    /**
     * [Config Option] (Boolean)
     */
    constrain?: boolean,

    /**
     * [Config Option] (String/Boolean)
     */
    dateFormat?: any,

    /**
     * [Config Option] (Date)
     */
    fromDate?: any,

    /**
     * [Config Option] (Array)
     */
    step?: any[],

    /**
     * [Config Option] (Date)
     */
    toDate?: any,

    /**
     * [Config Option] (String)
     */
    altFormats?: string,

    /**
     * [Config Option] (String)
     */
    displayField?: string,

    /**
     * [Config Option] (String)
     */
    format?: string,

    /**
     * [Config Option] (Number)
     */
    increment?: number,

    /**
     * [Config Option] (String)
     */
    invalidText?: string,

    /**
     * [Config Option] (String)
     */
    maxText?: string,

    /**
     * [Config Option] (Date/String)
     */
    maxValue?: any,

    /**
     * [Config Option] (String)
     */
    minText?: string,

    /**
     * [Config Option] (Date/String)
     */
    minValue?: any,

    /**
     * [Config Option] (Number)
     */
    pickerMaxHeight?: number,

    /**
     * [Config Option] (String)
     */
    queryMode?: string,

    /**
     * [Config Option] (Boolean)
     */
    selectOnTab?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    snapToIncrement?: boolean,

    /**
     * [Config Option] (String)
     */
    submitFormat?: string,

    /**
     * [Config Option] (String)
     */
    triggerCls?: string,

    /**
     * [Config Option] (String)
     */
    valueField?: string,

    /**
     * [Method] Runs all of Time s validations and returns an array of any errors
     * @param value Object The value to get errors for (defaults to the current field value)
     * @returns String[] All validation errors for this field
     */
    getErrors?: (Ext$value?: any) => string[],

    /**
     * [Method] Returns the current data value of the field
     * @returns Object value The field value
     */
    getValue?: () => any,

    /**
     * [Method] private
     */
    initComponent?: () => void,

    /**
     * [Method] private
     */
    postBlur?: () => void,

    /**
     * [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type
     * @param rawValue Object
     * @returns Object The converted value.
     */
    rawToValue?: (rawValue?: any) => any,

    /**
     * [Method] Replaces any existing maxValue with the new time and refreshes the picker s range
     * @param value Date/String The maximum time that can be selected
     */
    setMaxValue?: (Ext$value?: any) => void,

    /**
     * [Method] Replaces any existing minValue with the new time and refreshes the picker s range
     * @param value Date/String The minimum time that can be selected
     */
    setMinValue?: (Ext$value?: any) => void,

    /**
     * [Method] Sets the specified value s into the field
     * @returns any this
     */
    setValue?: () => any,

    /**
     * [Method] Converts a mixed type value to a raw representation suitable for displaying in the field
     * @param value Object
     * @returns Object The converted raw value.
     */
    valueToRaw?: (Ext$value?: any) => any,

    /**
     * [Config Option] (String)
     */
    altFormats?: string,

    /**
     * [Config Option] (String)
     */
    displayField?: string,

    /**
     * [Config Option] (String)
     */
    format?: string,

    /**
     * [Config Option] (Number)
     */
    increment?: number,

    /**
     * [Config Option] (String)
     */
    invalidText?: string,

    /**
     * [Config Option] (String)
     */
    maxText?: string,

    /**
     * [Config Option] (Date/String)
     */
    maxValue?: any,

    /**
     * [Config Option] (String)
     */
    minText?: string,

    /**
     * [Config Option] (Date/String)
     */
    minValue?: any,

    /**
     * [Config Option] (Number)
     */
    pickerMaxHeight?: number,

    /**
     * [Config Option] (String)
     */
    queryMode?: string,

    /**
     * [Config Option] (Boolean)
     */
    selectOnTab?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    snapToIncrement?: boolean,

    /**
     * [Config Option] (String)
     */
    submitFormat?: string,

    /**
     * [Config Option] (String)
     */
    triggerCls?: string,

    /**
     * [Config Option] (String)
     */
    valueField?: string,

    /**
     * [Method] Runs all of Time s validations and returns an array of any errors
     * @param value Object The value to get errors for (defaults to the current field value)
     * @returns String[] All validation errors for this field
     */
    getErrors?: (Ext$value?: any) => string[],

    /**
     * [Method] Returns the current data value of the field
     * @returns Object value The field value
     */
    getValue?: () => any,

    /**
     * [Method] private
     */
    initComponent?: () => void,

    /**
     * [Method] private
     */
    postBlur?: () => void,

    /**
     * [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type
     * @param rawValue Object
     * @returns Object The converted value.
     */
    rawToValue?: (rawValue?: any) => any,

    /**
     * [Method] Replaces any existing maxValue with the new time and refreshes the picker s range
     * @param value Date/String The maximum time that can be selected
     */
    setMaxValue?: (Ext$value?: any) => void,

    /**
     * [Method] Replaces any existing minValue with the new time and refreshes the picker s range
     * @param value Date/String The minimum time that can be selected
     */
    setMinValue?: (Ext$value?: any) => void,

    /**
     * [Method] Sets the specified value s into the field
     * @returns any this
     */
    setValue?: () => any,

    /**
     * [Method] Converts a mixed type value to a raw representation suitable for displaying in the field
     * @param value Object
     * @returns Object The converted raw value.
     */
    valueToRaw?: (Ext$value?: any) => any,

    /**
     * [Config Option] (String)
     */
    componentCls?: string,

    /**
     * [Config Option] (String)
     */
    format?: string,

    /**
     * [Config Option] (Number)
     */
    increment?: number,

    /**
     * [Config Option] (Date)
     */
    maxValue?: any,

    /**
     * [Config Option] (Date)
     */
    minValue?: any,

    /**
     * [Method] Focuses a node in the view
     * @param rec Object
     */
    focusNode?: (rec?: any) => void,

    /**
     * [Method] private
     */
    initComponent?: () => void,

    /**
     * [Method] Set the maxValue and update the list of available times
     * @param value Date
     */
    setMaxValue?: (Ext$value?: any) => void,

    /**
     * [Method] Set the minValue and update the list of available times
     * @param value Date
     */
    setMinValue?: (Ext$value?: any) => void,

    /**
     * [Method] Update the list of available times in the list to be constrained within the minValue and maxValue
     */
    updateList?: () => void
  } & undefined.axis$INumeric;

  declare export type Ext$IColorPalette = {
    /**
     * [Config Option] (Boolean)
     */
    allowReselect?: boolean,

    /**
     * [Config Option] (String)
     */
    clickEvent?: string,

    /**
     * [Config Option] (String)
     */
    componentCls?: string,

    /**
     * [Config Option] (Function)
     */
    handler?: any,

    /**
     * [Config Option] (String)
     */
    itemCls?: string,

    /**
     * [Config Option] (Ext.XTemplate/String/String[])
     */
    renderTpl?: any,

    /**
     * [Config Option] (Object)
     */
    scope?: any,

    /**
     * [Config Option] (String)
     */
    selectedCls?: string,

    /**
     * [Config Option] (String)
     */
    Ext$value?: string,

    /**
     * [Property] (String[])
     */
    colors?: string[],

    /**
     * [Method] Clears any selection and sets the value to null
     */
    clear?: () => void,

    /**
     * [Method] Get the currently selected color value
     * @returns String value The selected value. Null if nothing is selected.
     */
    getValue?: () => string,

    /**
     * [Method] Template method called when this Component s DOM structure is created
     */
    onRender?: () => void,

    /**
     * [Method] Selects the specified color in the picker fires the select event
     * @param color String A valid 6-digit color hex code (# will be stripped if included)
     * @param suppressEvent Boolean True to stop the select event from firing.
     */
    Ext$select?: (color?: string, suppressEvent?: boolean) => void
  } & Ext$flash$IComponent;

  declare export type Ext$IDatePicker = {
    /**
     * [Config Option] (Boolean)
     */
    hideOnClick?: boolean,

    /**
     * [Config Option] (String)
     */
    pickerId?: string,

    /**
     * [Property] (Ext.picker.Date)
     */
    Ext$picker?: Ext$Ext$picker.Ext$IDate,

    /**
     * [Config Option] (String)
     */
    ariaTitle?: string,

    /**
     * [Config Option] (String)
     */
    ariaTitleDateFormat?: string,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Number/String/Boolean)
     */
    border?: any,

    /**
     * [Config Option] (String[])
     */
    dayNames?: string[],

    /**
     * [Config Option] (Boolean)
     */
    disableAnim?: boolean,

    /**
     * [Config Option] (String)
     */
    disabledCellCls?: string,

    /**
     * [Config Option] (String[])
     */
    disabledDates?: string[],

    /**
     * [Config Option] (RegExp)
     */
    disabledDatesRE?: RegExp,

    /**
     * [Config Option] (String)
     */
    disabledDatesText?: string,

    /**
     * [Config Option] (Number[])
     */
    disabledDays?: number[],

    /**
     * [Config Option] (String)
     */
    disabledDaysText?: string,

    /**
     * [Config Option] (Boolean)
     */
    focusOnShow?: boolean,

    /**
     * [Config Option] (String)
     */
    format?: string,

    /**
     * [Config Option] (Function)
     */
    handler?: any,

    /**
     * [Config Option] (Object)
     */
    keyNavConfig?: any,

    /**
     * [Config Option] (String)
     */
    longDayFormat?: string,

    /**
     * [Config Option] (Date)
     */
    maxDate?: any,

    /**
     * [Config Option] (String)
     */
    maxText?: string,

    /**
     * [Config Option] (Date)
     */
    minDate?: any,

    /**
     * [Config Option] (String)
     */
    minText?: string,

    /**
     * [Config Option] (String[])
     */
    monthNames?: string[],

    /**
     * [Config Option] (String)
     */
    monthYearFormat?: string,

    /**
     * [Config Option] (String)
     */
    monthYearText?: string,

    /**
     * [Config Option] (String)
     */
    nextText?: string,

    /**
     * [Config Option] (String)
     */
    prevText?: string,

    /**
     * [Config Option] (Ext.XTemplate/String/String[])
     */
    renderTpl?: any,

    /**
     * [Config Option] (Object)
     */
    scope?: any,

    /**
     * [Config Option] (String)
     */
    selectedCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    showToday?: boolean,

    /**
     * [Config Option] (Number)
     */
    startDay?: number,

    /**
     * [Config Option] (String)
     */
    todayText?: string,

    /**
     * [Config Option] (String)
     */
    todayTip?: string,

    /**
     * [Method] Gets a single character to represent the day of the week
     * @param value Object
     * @returns String The character
     */
    getDayInitial?: (Ext$value?: any) => string,

    /**
     * [Method] Gets the current selected value of the date field
     * @returns Date The selected date
     */
    getValue?: () => any,

    /**
     * [Method] Hides the month picker if it s visible
     * @param animate Boolean Indicates whether to animate this action. If the animate parameter is not specified, the behavior will use disableAnim to determine whether to animate or not.
     * @returns Ext.picker.Date this
     */
    hideMonthPicker?: (animate?: boolean) => Ext$Ext$picker.Ext$IDate,

    /**
     * [Method] private inherit docs
     */
    initComponent?: () => void,

    /**
     * [Method] Sets the current value to today
     * @returns Ext.picker.Date this
     */
    selectToday?: () => Ext$Ext$picker.Ext$IDate,

    /**
     * [Method] Replaces any existing disabled dates with new values and refreshes the DatePicker
     * @param disabledDates String[]/RegExp An array of date strings (see the disabledDates config for details on supported values), or a JavaScript regular expression used to disable a pattern of dates.
     * @returns Ext.picker.Date this
     */
    setDisabledDates?: (disabledDates?: any) => Ext$Ext$picker.Ext$IDate,

    /**
     * [Method] Replaces any existing disabled days by index 0 6 with new values and refreshes the DatePicker
     * @param disabledDays Number[] An array of disabled day indexes. See the disabledDays config for details on supported values.
     * @returns Ext.picker.Date this
     */
    setDisabledDays?: (disabledDays?: number[]) => Ext$Ext$picker.Ext$IDate,

    /**
     * [Method] Replaces any existing maxDate with the new value and refreshes the DatePicker
     * @param value Date The maximum date that can be selected
     * @returns Ext.picker.Date this
     */
    setMaxDate?: (Ext$value?: any) => Ext$Ext$picker.Ext$IDate,

    /**
     * [Method] Replaces any existing minDate with the new value and refreshes the DatePicker
     * @param value Date The minimum date that can be selected
     * @returns Ext.picker.Date this
     */
    setMinDate?: (Ext$value?: any) => Ext$Ext$picker.Ext$IDate,

    /**
     * [Method] Sets the value of the date field
     * @param value Date The date to set
     * @returns Ext.picker.Date this
     */
    setValue?: (Ext$value?: any) => Ext$Ext$picker.Ext$IDate,

    /**
     * [Method] Show the month picker
     * @param animate Boolean Indicates whether to animate this action. If the animate parameter is not specified, the behavior will use disableAnim to determine whether to animate or not.
     * @returns Ext.picker.Date this
     */
    showMonthPicker?: (animate?: boolean) => Ext$Ext$picker.Ext$IDate,

    /**
     * [Method] Show the next month
     * @param e Object
     * @returns Ext.picker.Date this
     */
    showNextMonth?: (e?: any) => Ext$Ext$picker.Ext$IDate,

    /**
     * [Method] Show the next year
     * @returns Ext.picker.Date this
     */
    showNextYear?: () => Ext$Ext$picker.Ext$IDate,

    /**
     * [Method] Show the previous month
     * @param e Object
     * @returns Ext.picker.Date this
     */
    showPrevMonth?: (e?: any) => Ext$Ext$picker.Ext$IDate,

    /**
     * [Method] Show the previous year
     * @returns Ext.picker.Date this
     */
    showPrevYear?: () => Ext$Ext$picker.Ext$IDate
  } & undefined.menu$IMenu;

  declare export type Ext$IMonthPicker = {
    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (String)
     */
    cancelText?: string,

    /**
     * [Config Option] (String)
     */
    okText?: string,

    /**
     * [Config Option] (Ext.XTemplate/String/String[])
     */
    renderTpl?: any,

    /**
     * [Config Option] (String)
     */
    selectedCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    showButtons?: boolean,

    /**
     * [Config Option] (Date/Number[])
     */
    Ext$value?: any,

    /**
     * [Method] Modify the year display by passing an offset
     * @param offset Number The offset to move by.
     */
    adjustYear?: (offset?: number) => void,

    /**
     * [Method] Gets the selected value
     * @returns Number[] The selected value
     */
    getValue?: () => number[],

    /**
     * [Method] Checks whether the picker has a selection
     * @returns Boolean Returns true if both a month and year have been selected
     */
    hasSelection?: () => boolean,

    /**
     * [Method] Allows addition of behavior to the destroy operation
     */
    onDestroy?: () => void,

    /**
     * [Method] Set the value for the picker
     * @param value Date/Number[] The value to set. It can be a Date object, where the month/year will be extracted, or it can be an array, with the month as the first index and the year as the second.
     * @returns Ext.picker.Month this
     */
    setValue?: (Ext$value?: any) => Ext$Ext$picker.picker$IMonth
  } & Ext$flash$IComponent;

  declare export type Ext$IPluginManager = {} & Ext$Ext$IAbstractManager;

  declare export class Ext$PluginManager {
    /**
     * [Property] (Ext.util.HashMap)
     */
    static all: Ext$Ext$util.util$IHashMap;

    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Creates a new Plugin from the specified config object using the config object s ptype to determine the class to insta
     * @param config Object A configuration object for the Plugin you wish to create.
     * @param defaultType Function The constructor to provide the default Plugin type if the config object does not contain a ptype. (Optional if the config contains a ptype).
     * @returns Ext.Component The newly instantiated Plugin.
     */
    static create(config?: any, defaultType?: any): Ext$flash$IComponent;

    /**
     * [Method] Executes the specified function once for each item in the collection
     * @param fn Function The function to execute.
     * @param scope Object The scope to execute in. Defaults to this.
     */
    static each(fn?: any, scope?: any): void;

    /**
     * [Method] Returns all plugins registered with the given type
     * @param type String The type to search for
     * @param defaultsOnly Boolean True to only return plugins of this type where the plugin's isDefault property is truthy
     * @returns Ext.AbstractPlugin[] All matching plugins
     */
    static findByType(
      Ext$type?: string,
      defaultsOnly?: boolean
    ): Ext$Ext$IAbstractPlugin[];

    /**
     * [Method] Returns an item by id
     * @param id String The id of the item
     * @returns Object The item, undefined if not found.
     */
    static get(Ext$id?: string): any;

    /**
     * [Method] Gets the number of items in the collection
     * @returns Number The number of items in the collection.
     */
    static getCount(): number;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(Ext$name?: string): any;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Checks if an item type is registered
     * @param type String The mnemonic string by which the class may be looked up
     * @returns Boolean Whether the type is registered.
     */
    static isRegistered(Ext$type?: string): boolean;

    /**
     * [Method] Registers a function that will be called when an item with the specified id is added to the manager
     * @param id String The item id
     * @param fn Function The callback function. Called with a single parameter, the item.
     * @param scope Object The scope (this reference) in which the callback is executed. Defaults to the item.
     */
    static onAvailable(Ext$id?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Registers an item to be managed
     * @param item Object The item to register
     */
    static register(item?: any): void;

    /**
     * [Method] Registers a new item constructor keyed by a type key
     * @param type String The mnemonic string by which the class may be looked up.
     * @param cls Function The new instance class.
     */
    static registerType(Ext$type?: string, cls?: any): void;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Unregisters an item by removing it from this manager
     * @param item Object The item to unregister
     */
    static unregister(item?: any): void;
  }

  declare export type Ext$IPluginMgr = {} & Ext$Ext$IAbstractManager;

  declare export class Ext$PluginMgr {
    /**
     * [Property] (Ext.util.HashMap)
     */
    static all: Ext$Ext$util.util$IHashMap;

    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Creates a new Plugin from the specified config object using the config object s ptype to determine the class to insta
     * @param config Object A configuration object for the Plugin you wish to create.
     * @param defaultType Function The constructor to provide the default Plugin type if the config object does not contain a ptype. (Optional if the config contains a ptype).
     * @returns Ext.Component The newly instantiated Plugin.
     */
    static create(config?: any, defaultType?: any): Ext$flash$IComponent;

    /**
     * [Method] Executes the specified function once for each item in the collection
     * @param fn Function The function to execute.
     * @param scope Object The scope to execute in. Defaults to this.
     */
    static each(fn?: any, scope?: any): void;

    /**
     * [Method] Returns all plugins registered with the given type
     * @param type String The type to search for
     * @param defaultsOnly Boolean True to only return plugins of this type where the plugin's isDefault property is truthy
     * @returns Ext.AbstractPlugin[] All matching plugins
     */
    static findByType(
      Ext$type?: string,
      defaultsOnly?: boolean
    ): Ext$Ext$IAbstractPlugin[];

    /**
     * [Method] Returns an item by id
     * @param id String The id of the item
     * @returns Object The item, undefined if not found.
     */
    static get(Ext$id?: string): any;

    /**
     * [Method] Gets the number of items in the collection
     * @returns Number The number of items in the collection.
     */
    static getCount(): number;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(Ext$name?: string): any;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Checks if an item type is registered
     * @param type String The mnemonic string by which the class may be looked up
     * @returns Boolean Whether the type is registered.
     */
    static isRegistered(Ext$type?: string): boolean;

    /**
     * [Method] Registers a function that will be called when an item with the specified id is added to the manager
     * @param id String The item id
     * @param fn Function The callback function. Called with a single parameter, the item.
     * @param scope Object The scope (this reference) in which the callback is executed. Defaults to the item.
     */
    static onAvailable(Ext$id?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Registers an item to be managed
     * @param item Object The item to register
     */
    static register(item?: any): void;

    /**
     * [Method] Registers a new item constructor keyed by a type key
     * @param type String The mnemonic string by which the class may be looked up.
     * @param cls Function The new instance class.
     */
    static registerType(Ext$type?: string, cls?: any): void;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Unregisters an item by removing it from this manager
     * @param item Object The item to unregister
     */
    static unregister(item?: any): void;
  }

  declare export type Ext$IProgressBar = {
    /**
     * [Method] Called before any calculation cycles to prepare for layout
     * @param ownerContext Object
     */
    beginLayout?: (ownerContext?: any) => void,

    /**
     * [Method] Called to perform the calculations for this layout
     * @param ownerContext Object
     */
    calculate?: (ownerContext?: any) => void,

    /**
     * [Config Option] (Boolean/Object)
     */
    animate?: any,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (String/Object)
     */
    componentLayout?: any,

    /**
     * [Config Option] (String)
     */
    Ext$id?: string,

    /**
     * [Config Option] (Ext.XTemplate/String/String[])
     */
    renderTpl?: any,

    /**
     * [Config Option] (String)
     */
    text?: string,

    /**
     * [Config Option] (String/HTMLElement/Ext.Element)
     */
    textEl?: any,

    /**
     * [Config Option] (Number)
     */
    Ext$value?: number,

    /**
     * [Method] private
     */
    initComponent?: () => void,

    /**
     * [Method] Initialized the renderData to be used when rendering the renderTpl
     * @returns Object Object with keys and values that are going to be applied to the renderTpl
     */
    initRenderData?: () => any,

    /**
     * [Method] Returns true if the progress bar is currently in a wait operation
     * @returns Boolean True if waiting, else false
     */
    isWaiting?: () => boolean,

    /**
     * [Method] Allows addition of behavior to the destroy operation
     */
    onDestroy?: () => void,

    /**
     * [Method] Template method called when this Component s DOM structure is created
     */
    onRender?: () => void,

    /**
     * [Method] Resets the progress bar value to 0 and text to empty string
     * @param hide Boolean True to hide the progress bar.
     * @returns Ext.ProgressBar this
     */
    reset?: (hide?: boolean) => Ext$Ext$IProgressBar,

    /**
     * [Method] Updates the progress bar value and optionally its text
     * @param value Number A floating point value between 0 and 1 (e.g., .5)
     * @param text String The string to display in the progress text element
     * @param animate Boolean Whether to animate the transition of the progress bar. If this value is not specified, the default for the class is used
     * @returns Ext.ProgressBar this
     */
    updateProgress?: (
      Ext$value?: number,
      text?: string,
      animate?: boolean
    ) => Ext$Ext$IProgressBar,

    /**
     * [Method] Updates the progress bar text
     * @param text String The string to display in the progress text element
     * @returns Ext.ProgressBar this
     */
    updateText?: (text?: string) => Ext$Ext$IProgressBar,

    /**
     * [Method] Initiates an auto updating progress bar
     * @param config Object Configuration options
     * @returns Ext.ProgressBar this
     */
    wait?: (config?: any) => Ext$Ext$IProgressBar
  } & undefined.container$IAuto;

  declare export type Ext$IQueryable = {
    /**
     * [Method] Retrieves the first direct child of this container which matches the passed selector or component
     * @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned.
     * @returns Object Ext.Component The matching child Ext.Component (or null if no match was found).
     */
    child?: (selector?: any) => any,

    /**
     * [Method] Retrieves the first descendant of this container which matches the passed selector
     * @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned.
     * @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found).
     */
    down?: (selector?: any) => any,

    /**
     * [Method] Retrieves all descendant components which match the passed selector
     * @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned.
     * @returns Ext.Component[] Components which matched the selector
     */
    Ext$query?: (selector?: string) => Ext$flash$IComponent[],

    /**
     * [Method] Retrieves all descendant components which match the passed function
     * @param fn Function The matcher function. It will be called with a single argument, the component being tested.
     * @param scope Object The scope in which to run the function. If not specified, it will default to the active component.
     * @returns Ext.Component[] Components matched by the passed function
     */
    queryBy?: (fn?: any, scope?: any) => Ext$flash$IComponent[],

    /**
     * [Method] Finds a component at any level under this container matching the id itemId
     * @param id String The id to find
     * @returns Ext.Component The matching id, null if not found
     */
    queryById?: (Ext$id?: string) => Ext$flash$IComponent
  } & Ext$Ext$IBase;

  declare export type resizer$ISplitterTracker = {
    /**
     * [Method] ensure the tracker is enabled store boxes of previous and next components and calculate the constrain region
     * @param e Object
     */
    onBeforeStart?: (e?: any) => void,

    /**
     * [Method] Track the proxy and set the proper XY coordinates while constraining the drag
     * @param e Object
     */
    onDrag?: (e?: any) => void,

    /**
     * [Method] perform the resize and remove the proxy class from the splitter el
     * @param e Object
     */
    onEnd?: (e?: any) => void,

    /**
     * [Method] We move the splitter el
     * @param e Object
     */
    onStart?: (e?: any) => void
  } & undefined.dd$IDragTracker;

  declare export type Ext$IResizable = {
    /**
     * [Config Option] (Ext.Element/Ext.util.Region)
     */
    constrainTo?: any,

    /**
     * [Config Option] (Boolean)
     */
    dynamic?: boolean,

    /**
     * [Config Option] (String)
     */
    handles?: string,

    /**
     * [Config Option] (Number)
     */
    height?: number,

    /**
     * [Config Option] (Number)
     */
    heightIncrement?: number,

    /**
     * [Config Option] (Number)
     */
    maxHeight?: number,

    /**
     * [Config Option] (Number)
     */
    maxWidth?: number,

    /**
     * [Config Option] (Number)
     */
    minHeight?: number,

    /**
     * [Config Option] (Number)
     */
    minWidth?: number,

    /**
     * [Config Option] (Boolean)
     */
    pinned?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    preserveRatio?: boolean,

    /**
     * [Config Option] (Ext.Element/Ext.Component)
     */
    target?: any,

    /**
     * [Config Option] (Boolean)
     */
    transparent?: boolean,

    /**
     * [Config Option] (Number)
     */
    width?: number,

    /**
     * [Config Option] (Number)
     */
    widthIncrement?: number,

    /**
     * [Property] (Ext.Element)
     */
    el?: Ext$Ext$IElement,

    /**
     * [Property] (Ext.Element/Ext.Component)
     */
    originalTarget?: any,

    /**
     * [Property] (Ext.resizer.ResizeTracker)
     */
    resizeTracker?: Ext$Ext$resizer.resizer$IResizeTracker,

    /**
     * [Method] Adds the specified events to the list of events which this Observable may fire
     * @param eventNames Object/String... Either an object with event names as properties with a value of true. For example: this.addEvents({  storeloaded: true,  storecleared: true });  Or any number of event names as separate parameters. For example: this.addEvents('storeloaded', 'storecleared');
     */
    addEvents?: (eventNames?: any) => void,

    /**
     * [Method] Appends an event handler to this object
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    addListener?: (
      eventName?: any,
      fn?: any,
      scope?: any,
      options?: any
    ) => any,

    /**
     * [Method] Adds listeners to any Observable object or Ext Element which are automatically removed when this Component is destr
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    addManagedListener?: (
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ) => any,

    /**
     * [Method] Removes all listeners for this object including the managed listeners
     */
    clearListeners?: () => void,

    /**
     * [Method] Removes all managed listeners for this object
     */
    clearManagedListeners?: () => void,

    /**
     * [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
     * @param eventNames String/String[] The event name to bubble, or an Array of event names.
     */
    enableBubble?: (eventNames?: any) => void,

    /**
     * [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
     * @param eventName String The name of the event to fire.
     * @param args Object... Variable number of parameters are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    fireEvent?: (eventName: string, ...args: any[]) => boolean,

    /**
     * [Method] Fires the specified event with the passed parameter list
     * @param eventName String The name of the event to fire.
     * @param args Object[] An array of parameters which are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    fireEventArgs?: (eventName?: string, args?: any[]) => boolean,

    /**
     * [Method] Returns the element that was configured with the el or target config property
     * @returns Ext.Element element
     */
    getEl?: () => Ext$Ext$IElement,

    /**
     * [Method] Returns the element or component that was configured with the target config property
     * @returns Ext.Element/Ext.Component
     */
    getTarget?: () => any,

    /**
     * [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles
     * @param eventName String The name of the event to check for
     * @returns Boolean true if the event is being listened for or bubbles, else false
     */
    hasListener?: (eventName?: string) => boolean,

    /**
     * [Method] Shorthand for addManagedListener
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    mon?: (
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ) => any,

    /**
     * [Method] Shorthand for removeManagedListener
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    mun?: (item?: any, ename?: any, fn?: any, scope?: any) => void,

    /**
     * [Method] Shorthand for addListener
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    Ext$on?: (eventName?: any, fn?: any, scope?: any, options?: any) => any,

    /**
     * [Method] Relays selected events from the specified Observable as if the events were fired by this
     * @param origin Object The Observable whose events this object is to relay.
     * @param events String[] Array of event names to relay.
     * @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
     * @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or this.store.relayers.destroy();
     */
    relayEvents?: (origin?: any, events?: string[], prefix?: string) => any,

    /**
     * [Method] Removes an event handler
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    removeListener?: (eventName?: string, fn?: any, scope?: any) => void,

    /**
     * [Method] Removes listeners that were added by the mon method
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    removeManagedListener?: (
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Perform a manual resize and fires the resize event
     * @param width Number
     * @param height Number
     */
    resizeTo?: (width?: number, height?: number) => void,

    /**
     * [Method] Resumes firing of the named event s
     * @param eventName String... Multiple event names to resume.
     */
    resumeEvent?: (...eventName: any[]) => void,

    /**
     * [Method] Resumes firing events see suspendEvents
     */
    resumeEvents?: () => void,

    /**
     * [Method] Suspends firing of the named event s
     * @param eventName String... Multiple event names to suspend.
     */
    suspendEvent?: (...eventName: any[]) => void,

    /**
     * [Method] Suspends the firing of all events
     * @param queueSuspended Boolean Pass as true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events.
     */
    suspendEvents?: (queueSuspended?: boolean) => void,

    /**
     * [Method] Shorthand for removeListener
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    Ext$un?: (eventName?: string, fn?: any, scope?: any) => void
  } & Ext$Ext$IBase &
    undefined.util$IObservable;

  declare export type selection$ITreeModel = {
    /**
     * [Method] binds the store to the selModel
     * @param store Object
     * @param initial Object
     */
    bindStore?: (store?: any, initial?: any) => void
  } & undefined.selection$IModel;

  declare export type Ext$IAbstractSelectionModel = {
    /**
     * [Config Option] (Boolean)
     */
    allowDeselect?: boolean,

    /**
     * [Config Option] ("SINGLE"/"SIMPLE"/"MULTI")
     */
    mode?: any,

    /**
     * [Config Option] (Boolean)
     */
    pruneRemoved?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    toggleOnClick?: boolean,

    /**
     * [Property] (Ext.util.MixedCollection)
     */
    selected?: Ext$Ext$util.util$IMixedCollection,

    /**
     * [Method] binds the store to the selModel
     * @param store Object
     * @param initial Object
     */
    bindStore?: (store?: any, initial?: any) => void,

    /**
     * [Method] Binds listeners for this component to the store
     * @param store Ext.data.AbstractStore The store to bind to
     */
    bindStoreListeners?: (store?: Ext$Ext$data.data$IAbstractStore) => void,

    /**
     * [Method] Deselects a record instance by record instance or index
     * @param records Ext.data.Model[]/Number An array of records or an index
     * @param suppressEvent Boolean True to not fire a deselect event
     */
    deselect?: (records?: any, suppressEvent?: boolean) => void,

    /**
     * [Method] Deselects all records in the view
     * @param suppressEvent Boolean True to suppress any deselect events
     */
    deselectAll?: (suppressEvent?: boolean) => void,

    /**
     * [Method] Deselects a range of rows if the selection model is not locked
     * @param startRow Ext.data.Model/Number The record or index of the first row in the range
     * @param endRow Ext.data.Model/Number The record or index of the last row in the range
     */
    deselectRange?: (startRow?: any, endRow?: any) => void,

    /**
     * [Method] Returns the count of selected records
     * @returns Number The number of selected records
     */
    getCount?: () => number,

    /**
     * [Method]
     * @returns Ext.data.Model Returns the last selected record.
     */
    getLastSelected?: () => Ext$Ext$data.selection$IModel,

    /**
     * [Method] Returns an array of the currently selected records
     * @returns Ext.data.Model[] The selected records
     */
    getSelection?: () => Ext$Ext$data.selection$IModel[],

    /**
     * [Method] Returns the current selectionMode
     * @returns String The selectionMode: 'SINGLE', 'MULTI' or 'SIMPLE'.
     */
    getSelectionMode?: () => string,

    /**
     * [Method] Gets the current store instance
     * @returns Ext.data.AbstractStore The store, null if one does not exist.
     */
    Ext$getStore?: () => Ext$Ext$data.data$IAbstractStore,

    /**
     * [Method] Gets the listeners to bind to a new store
     * @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance.
     */
    getStoreListeners?: () => any,

    /**
     * [Method] Returns true if there are any a selected records
     * @returns Boolean
     */
    hasSelection?: () => boolean,

    /**
     * [Method] Determines if this record is currently focused
     * @param record Ext.data.Model
     */
    isFocused?: (record?: Ext$Ext$data.selection$IModel) => void,

    /**
     * [Method] Returns true if the selections are locked
     * @returns Boolean
     */
    isLocked?: () => boolean,

    /**
     * [Method] Returns true if the specified row is selected
     * @param from Ext.data.Model/Number The start of the range to check.
     * @param to Ext.data.Model/Number The end of the range to check.
     * @returns Boolean
     */
    isRangeSelected?: (from?: any, to?: any) => boolean,

    /**
     * [Method] Returns true if the specified row is selected
     * @param record Ext.data.Model/Number The record or index of the record to check
     * @returns Boolean
     */
    isSelected?: (record?: any) => boolean,

    /**
     * [Method] Template method it is called when a new store is bound to the current instance
     * @param store Ext.data.AbstractStore The store being bound
     * @param initial Boolean True if this store is being bound as initialization of the instance.
     */
    onBindStore?: (
      store?: Ext$Ext$data.data$IAbstractStore,
      initial?: boolean
    ) => void,

    /**
     * [Method] Template method it is called when an existing store is unbound from the current instance
     * @param store Ext.data.AbstractStore The store being unbound
     * @param initial Boolean True if this store is being bound as initialization of the instance.
     */
    onUnbindStore?: (
      store?: Ext$Ext$data.data$IAbstractStore,
      initial?: boolean
    ) => void,

    /**
     * [Method] Selects a record instance by record instance or index
     * @param records Ext.data.Model[]/Number An array of records or an index
     * @param keepExisting Boolean True to retain existing selections
     * @param suppressEvent Boolean True to not fire a select event
     */
    Ext$select?: (
      records?: any,
      keepExisting?: boolean,
      suppressEvent?: boolean
    ) => void,

    /**
     * [Method] Selects all records in the view
     * @param suppressEvent Boolean True to suppress any select events
     */
    selectAll?: (suppressEvent?: boolean) => void,

    /**
     * [Method] Selects a range of rows if the selection model is not locked
     * @param startRow Ext.data.Model/Number The record or index of the first row in the range
     * @param endRow Ext.data.Model/Number The record or index of the last row in the range
     * @param keepExisting Boolean True to retain existing selections
     */
    selectRange?: (
      startRow?: any,
      endRow?: any,
      keepExisting?: boolean
    ) => void,

    /**
     * [Method] Sets a record as the last focused record
     * @param record Ext.data.Model
     */
    setLastFocused?: (record?: Ext$Ext$data.selection$IModel) => void,

    /**
     * [Method] Locks the current selection and disables any changes from happening to the selection
     * @param locked Boolean True to lock, false to unlock.
     */
    setLocked?: (locked?: boolean) => void,

    /**
     * [Method] Sets the current selectionMode
     * @param selMode String 'SINGLE', 'MULTI' or 'SIMPLE'.
     */
    setSelectionMode?: (selMode?: string) => void,

    /**
     * [Method] Unbinds listeners from this component to the store
     * @param store Ext.data.AbstractStore The store to unbind from
     */
    unbindStoreListeners?: (store?: Ext$Ext$data.data$IAbstractStore) => void
  } & undefined.util$IObservable &
    undefined.util$IBindable;

  declare export type Ext$IShadow = {
    /**
     * [Config Option] (String)
     */
    mode?: string,

    /**
     * [Config Option] (Number)
     */
    offset?: number,

    /**
     * [Method] Hides this shadow
     */
    hide?: () => void,

    /**
     * [Method] Returns true if the shadow is visible else false
     */
    isVisible?: () => void,

    /**
     * [Method] Direct alignment when values are already available
     * @param left Number The target element left position
     * @param top Number The target element top position
     * @param width Number The target element width
     * @param height Number The target element height
     */
    realign?: (
      left?: number,
      top?: number,
      width?: number,
      height?: number
    ) => void,

    /**
     * [Method] Sets the opacity of the shadow
     * @param opacity Number The opacity
     */
    setOpacity?: (opacity?: number) => void,

    /**
     * [Method] Adjust the z index of this shadow
     * @param zindex Number The new z-index
     */
    setZIndex?: (zindex?: number) => void,

    /**
     * [Method] Displays the shadow under the target element
     * @param targetEl String/HTMLElement/Ext.Element The id or element under which the shadow should display
     */
    show?: (targetEl?: any) => void
  } & Ext$Ext$IBase;

  declare export type Ext$IShadowPool = {} & Ext$Ext$IBase;

  declare export class Ext$ShadowPool {
    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(Ext$name?: string): any;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;
  }

  declare export type slider$ITip = {
    /**
     * [Config Option] (String)
     */
    align?: string,

    /**
     * [Config Option] (Number)
     */
    minWidth?: number,

    /**
     * [Config Option] (Array)
     */
    offsets?: any[],

    /**
     * [Config Option] (String)
     */
    position?: string,

    /**
     * [Method] Used to create the text that appears in the Tip s body
     * @param thumb Ext.slider.Thumb The Thumb that the Tip is attached to
     * @returns String The text to display in the tip
     */
    getText?: (thumb?: Ext$Ext$slider.slider$IThumb) => string,

    /**
     * [Config Option] (Boolean/String/HTMLElement/Ext.Element)
     */
    autoRender?: any,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    closable?: boolean,

    /**
     * [Config Option] (String)
     */
    closeAction?: string,

    /**
     * [Config Option] (Boolean)
     */
    constrainPosition?: boolean,

    /**
     * [Config Option] (String)
     */
    defaultAlign?: string,

    /**
     * [Config Option] (Boolean)
     */
    floating?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    focusOnToFront?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    frameHeader?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    hidden?: boolean,

    /**
     * [Config Option] (Number)
     */
    maxWidth?: number,

    /**
     * [Config Option] (Number)
     */
    minWidth?: number,

    /**
     * [Config Option] (Boolean/String)
     */
    shadow?: any,

    /**
     * [Config Option] (Number)
     */
    width?: number,

    /**
     * [Config Option] (Boolean/String/HTMLElement/Ext.Element)
     */
    autoRender?: any,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    closable?: boolean,

    /**
     * [Config Option] (String)
     */
    closeAction?: string,

    /**
     * [Config Option] (Boolean)
     */
    constrainPosition?: boolean,

    /**
     * [Config Option] (String)
     */
    defaultAlign?: string,

    /**
     * [Config Option] (Boolean)
     */
    floating?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    focusOnToFront?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    frameHeader?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    hidden?: boolean,

    /**
     * [Config Option] (Number)
     */
    maxWidth?: number,

    /**
     * [Config Option] (Number)
     */
    minWidth?: number,

    /**
     * [Config Option] (Boolean/String)
     */
    shadow?: any,

    /**
     * [Config Option] (Number)
     */
    width?: number
  } & Ext$Ext$IBase;

  declare export type Ext$ISlider = {
    /**
     * [Method] Called before any calculation cycles to prepare for layout
     * @param ownerContext Object
     */
    beginLayout?: (ownerContext?: any) => void,

    /**
     * [Method] Returns the current value of the slider
     * @returns any The current value of the slider
     */
    getValue?: () => any,

    /**
     * [Method] Programmatically sets the value of the Slider
     * @param value Number The value to set the slider to. (This will be constrained within minValue and maxValue)
     * @param animate Boolean Turn on or off animation
     */
    setValue?: (Ext$value?: number, animate?: boolean) => void,

    /**
     * [Method] Returns the current value of the slider
     * @returns any The current value of the slider
     */
    getValue?: () => any,

    /**
     * [Method] Programmatically sets the value of the Slider
     * @param value Number The value to set the slider to. (This will be constrained within minValue and maxValue)
     * @param animate Boolean Turn on or off animation
     */
    setValue?: (Ext$value?: number, animate?: boolean) => void
  } & undefined.field$IField;

  declare export type state$IStateful = {
    /**
     * [Config Option] (Number)
     */
    saveDelay?: number,

    /**
     * [Config Option] (String[])
     */
    stateEvents?: string[],

    /**
     * [Config Option] (String)
     */
    stateId?: string,

    /**
     * [Config Option] (Boolean)
     */
    stateful?: boolean,

    /**
     * [Method] Adds the specified events to the list of events which this Observable may fire
     * @param eventNames Object/String... Either an object with event names as properties with a value of true. For example: this.addEvents({  storeloaded: true,  storecleared: true });  Or any number of event names as separate parameters. For example: this.addEvents('storeloaded', 'storecleared');
     */
    addEvents?: (eventNames?: any) => void,

    /**
     * [Method] Appends an event handler to this object
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    addListener?: (
      eventName?: any,
      fn?: any,
      scope?: any,
      options?: any
    ) => any,

    /**
     * [Method] Adds listeners to any Observable object or Ext Element which are automatically removed when this Component is destr
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    addManagedListener?: (
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ) => any,

    /**
     * [Method] Add events that will trigger the state to be saved
     * @param events String/String[] The event name or an array of event names.
     */
    addStateEvents?: (events?: any) => void,

    /**
     * [Method] Applies the state to the object
     * @param state Object The state
     */
    applyState?: (Ext$state?: any) => void,

    /**
     * [Method] Removes all listeners for this object including the managed listeners
     */
    clearListeners?: () => void,

    /**
     * [Method] Removes all managed listeners for this object
     */
    clearManagedListeners?: () => void,

    /**
     * [Method] Destroys this stateful object
     */
    Ext$destroy?: () => void,

    /**
     * [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
     * @param eventNames String/String[] The event name to bubble, or an Array of event names.
     */
    enableBubble?: (eventNames?: any) => void,

    /**
     * [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
     * @param eventName String The name of the event to fire.
     * @param args Object... Variable number of parameters are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    fireEvent?: (eventName: string, ...args: any[]) => boolean,

    /**
     * [Method] Fires the specified event with the passed parameter list
     * @param eventName String The name of the event to fire.
     * @param args Object[] An array of parameters which are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    fireEventArgs?: (eventName?: string, args?: any[]) => boolean,

    /**
     * [Method] Gets the current state of the object
     * @returns Object The current state
     */
    getState?: () => any,

    /**
     * [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles
     * @param eventName String The name of the event to check for
     * @returns Boolean true if the event is being listened for or bubbles, else false
     */
    hasListener?: (eventName?: string) => boolean,

    /**
     * [Method] Shorthand for addManagedListener
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    mon?: (
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ) => any,

    /**
     * [Method] Shorthand for removeManagedListener
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    mun?: (item?: any, ename?: any, fn?: any, scope?: any) => void,

    /**
     * [Method] Shorthand for addListener
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    Ext$on?: (eventName?: any, fn?: any, scope?: any, options?: any) => any,

    /**
     * [Method] Relays selected events from the specified Observable as if the events were fired by this
     * @param origin Object The Observable whose events this object is to relay.
     * @param events String[] Array of event names to relay.
     * @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
     * @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or this.store.relayers.destroy();
     */
    relayEvents?: (origin?: any, events?: string[], prefix?: string) => any,

    /**
     * [Method] Removes an event handler
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    removeListener?: (eventName?: string, fn?: any, scope?: any) => void,

    /**
     * [Method] Removes listeners that were added by the mon method
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    removeManagedListener?: (
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Resumes firing of the named event s
     * @param eventName String... Multiple event names to resume.
     */
    resumeEvent?: (...eventName: any[]) => void,

    /**
     * [Method] Resumes firing events see suspendEvents
     */
    resumeEvents?: () => void,

    /**
     * [Method] Conditionally saves a single property from this object to the given state object
     * @param propName String The name of the property to save.
     * @param state Object The state object in to which to save the property.
     * @param stateName String The name to use for the property in state.
     * @returns Boolean True if the property was saved, false if not.
     */
    savePropToState?: (
      propName?: string,
      Ext$state?: any,
      stateName?: string
    ) => boolean,

    /**
     * [Method] Gathers additional named properties of the instance and adds their current values to the passed state object
     * @param propNames String/String[] The name (or array of names) of the property to save.
     * @param state Object The state object in to which to save the property values.
     * @returns Object state
     */
    savePropsToState?: (propNames?: any, Ext$state?: any) => any,

    /**
     * [Method] Saves the state of the object to the persistence store
     */
    saveState?: () => void,

    /**
     * [Method] Suspends firing of the named event s
     * @param eventName String... Multiple event names to suspend.
     */
    suspendEvent?: (...eventName: any[]) => void,

    /**
     * [Method] Suspends the firing of all events
     * @param queueSuspended Boolean Pass as true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events.
     */
    suspendEvents?: (queueSuspended?: boolean) => void,

    /**
     * [Method] Shorthand for removeListener
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    Ext$un?: (eventName?: string, fn?: any, scope?: any) => void
  } & Ext$Ext$IBase &
    undefined.util$IObservable;

  declare export interface Ext$IString {}

  declare export class Ext$String {
    /**
     * [Method] Adds a set of character entity definitions to the set used by htmlEncode and htmlDecode
     * @param entities Object The set of character entities to add to the current definitions.
     */
    static addCharacterEntities(entities?: any): void;

    /**
     * [Method] Capitalize the given string
     * @param string String
     * @returns String
     */
    static capitalize(string?: string): string;

    /**
     * [Method] Converts a string of characters into a legal parse able JavaScript var name as long as the passed string contains at
     * @param s String A string to be converted into a var name.
     * @returns String A legal JavaScript var name.
     */
    static createVarName(s?: string): string;

    /**
     * [Method] Truncate a string and add an ellipsis  to the end if it exceeds the specified length
     * @param value String The string to truncate.
     * @param length Number The maximum length to allow before truncating.
     * @param word Boolean true to try to find a common word break.
     * @returns String The converted text.
     */
    static ellipsis(
      Ext$value?: string,
      length?: number,
      word?: boolean
    ): string;

    /**
     * [Method] Checks if a string ends with a substring
     * @param s String The original string
     * @param start String The substring to check
     * @param ignoreCase Boolean True to ignore the case in the comparison
     */
    static endsWith(s?: string, start?: string, ignoreCase?: boolean): void;

    /**
     * [Method] Escapes the passed string for  and
     * @param string String The string to escape
     * @returns String The escaped string
     */
    static escape(string?: string): string;

    /**
     * [Method] Escapes the passed string for use in a regular expression
     * @param string String
     * @returns String
     */
    static escapeRegex(string?: string): string;

    /**
     * [Method] Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens
     * @param string String The tokenized string to be formatted.
     * @param values Mixed... The values to replace tokens {0}, {1}, etc in order.
     * @returns String The formatted string.
     */
    static format(string: string, ...values: any[]): string;

    /**
     * [Method] Convert certain characters  amp lt  and from their HTML character equivalents
     * @param value String The string to decode.
     * @returns String The decoded text.
     */
    static htmlDecode(Ext$value?: string): string;

    /**
     * [Method] Convert certain characters  amp lt  and to their HTML character equivalents for literal display in web
     * @param value String The string to encode.
     * @returns String The encoded text.
     */
    static htmlEncode(Ext$value?: string): string;

    /**
     * [Method] Inserts a substring into a string
     * @param s String The original string.
     * @param value String The substring to insert.
     * @param index Number The index to insert the substring. Negative indexes will insert from the end of the string. Example: Ext.String.insert("abcdefg", "h", -1); // abcdefhg
     * @returns String The value with the inserted substring
     */
    static insert(s?: string, Ext$value?: string, index?: number): string;

    /**
     * [Method] Pads the left side of a string with a specified character
     * @param string String The original string.
     * @param size Number The total length of the output string.
     * @param character String The character with which to pad the original string.
     * @returns String The padded string.
     */
    static leftPad(string?: string, size?: number, character?: string): string;

    /**
     * [Method] Returns a string with a specified number of repetitions a given string pattern
     * @param pattern String The pattern to repeat.
     * @param count Number The number of times to repeat the pattern (may be 0).
     * @param sep String An option string to separate each pattern.
     */
    static repeat(pattern?: string, count?: number, sep?: string): void;

    /**
     * [Method] Resets the set of character entity definitions used by htmlEncode and htmlDecode back to the default state
     */
    static resetCharacterEntities(): void;

    /**
     * [Method] Splits a string of space separated words into an array trimming as needed
     * @param words String/Array
     */
    static splitWords(words?: any): void;

    /**
     * [Method] Checks if a string starts with a substring
     * @param s String The original string
     * @param start String The substring to check
     * @param ignoreCase Boolean True to ignore the case in the comparison
     */
    static startsWith(s?: string, start?: string, ignoreCase?: boolean): void;

    /**
     * [Method] Utility function that allows you to easily switch a string between two alternating values
     * @param string String The current string.
     * @param value String The value to compare to the current string.
     * @param other String The new value to use if the string already equals the first value passed in.
     * @returns String The new value.
     */
    static toggle(string?: string, Ext$value?: string, other?: string): string;

    /**
     * [Method] Trims whitespace from either end of a string leaving spaces within the string intact
     * @param string String The string to trim.
     * @returns String The trimmed string.
     */
    static trim(string?: string): string;

    /**
     * [Method] Uncapitalize the given string
     * @param string String
     * @returns String
     */
    static uncapitalize(string?: string): string;

    /**
     * [Method] Appends content to the query string of a URL handling logic for whether to place a question mark or ampersand
     * @param url String The URL to append to.
     * @param string String The content to append to the URL.
     * @returns String The resulting URL
     */
    static urlAppend(url?: string, string?: string): string;
  }

  declare export interface Ext$ISupports {}

  declare export class Ext$Supports {
    /**
     * [Property] (Boolean)
     */
    static ArraySort: boolean;

    /**
     * [Property] (Boolean)
     */
    static AudioTag: boolean;

    /**
     * [Property] (Boolean)
     */
    static BoundingClientRect: boolean;

    /**
     * [Property] (Boolean)
     */
    static CSS3BorderRadius: boolean;

    /**
     * [Property] (Boolean)
     */
    static CSS3BoxShadow: boolean;

    /**
     * [Property] (Boolean)
     */
    static CSS3DTransform: boolean;

    /**
     * [Property] (Boolean)
     */
    static CSS3LinearGradient: boolean;

    /**
     * [Property] (Boolean)
     */
    static Canvas: boolean;

    /**
     * [Property] (Boolean)
     */
    static ClassList: boolean;

    /**
     * [Property] (Boolean)
     */
    static ComputedStyle: boolean;

    /**
     * [Property] (Boolean)
     */
    static CreateContextualFragment: boolean;

    /**
     * [Property] (Boolean)
     */
    static DeviceMotion: boolean;

    /**
     * [Property] (Boolean)
     */
    static Direct2DBug: boolean;

    /**
     * [Property] (Object)
     */
    static DisplayChangeInputSelectionBug: any;

    /**
     * [Property] (Object)
     */
    static DisplayChangeTextAreaSelectionBug: any;

    /**
     * [Property] (Boolean)
     */
    static Float: boolean;

    /**
     * [Property] (Boolean)
     */
    static GeoLocation: boolean;

    /**
     * [Property] (Boolean)
     */
    static GetPositionPercentage: boolean;

    /**
     * [Property] (Boolean)
     */
    static Ext$History: boolean;

    /**
     * [Property] (Object)
     */
    static LocalStorage: any;

    /**
     * [Property] (Boolean)
     */
    static MouseEnterLeave: boolean;

    /**
     * [Property] (Boolean)
     */
    static MouseWheel: boolean;

    /**
     * [Property] (Boolean)
     */
    static Opacity: boolean;

    /**
     * [Property] (Boolean)
     */
    static OrientationChange: boolean;

    /**
     * [Property] (Boolean)
     */
    static Placeholder: boolean;

    /**
     * [Property] (Boolean)
     */
    static PointerEvents: boolean;

    /**
     * [Property] (Boolean)
     */
    static Range: boolean;

    /**
     * [Property] (Boolean)
     */
    static RightMargin: boolean;

    /**
     * [Property] (Boolean)
     */
    static RotatedBoundingClientRect: boolean;

    /**
     * [Property] (Boolean)
     */
    static ScrollWidthInlinePaddingBug: boolean;

    /**
     * [Property] (Boolean)
     */
    static Svg: boolean;

    /**
     * [Property] (Boolean)
     */
    static TextAreaMaxLength: boolean;

    /**
     * [Property] (Boolean)
     */
    static TimeoutActualLateness: boolean;

    /**
     * [Property] (Boolean)
     */
    static Touch: boolean;

    /**
     * [Property] (Boolean)
     */
    static Transitions: boolean;

    /**
     * [Property] (Boolean)
     */
    static TransparentColor: boolean;

    /**
     * [Property] (Boolean)
     */
    static Vml: boolean;

    /**
     * [Property] (Boolean)
     */
    static WindowOnError: boolean;
  }

  declare export type tab$ITab = {
    /**
     * [Config Option] (String)
     */
    activeCls?: string,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    closable?: boolean,

    /**
     * [Config Option] (String)
     */
    closableCls?: string,

    /**
     * [Config Option] (String)
     */
    closeText?: string,

    /**
     * [Config Option] (String)
     */
    disabledCls?: string,

    /**
     * [Config Option] ("small"/"medium"/"large")
     */
    scale?: any,

    /**
     * [Property] (Boolean)
     */
    active?: boolean,

    /**
     * [Property] (Boolean)
     */
    isTab?: boolean,

    /**
     * [Method] inherit docs
     * @param silent Object
     */
    disable?: (silent?: any) => void,

    /**
     * [Method] inherit docs
     * @param silent Object
     */
    enable?: (silent?: any) => void,

    /**
     * [Method] This method returns an object which provides substitution parameters for the XTemplate used to create this Button s D
     * @returns Object Substitution data for a Template. The default implementation which provides data for the default template returns an Object containing the following properties:
     */
    getTemplateArgs?: () => any,

    /**
     * [Method] inherit docs
     */
    initComponent?: () => void,

    /**
     * [Method] Sets this tab s attached card
     * @param card Ext.Component The card to set
     */
    setCard?: (card?: Ext$flash$IComponent) => void,

    /**
     * [Method] Sets the tab as either closable or not
     * @param closable Boolean Pass false to make the tab not closable. Otherwise the tab will be made closable (eg a close button will appear on the tab)
     */
    setClosable?: (closable?: boolean) => void
  } & undefined.Ext$IButton;

  declare export type Ext$ITabPanel = {
    /**
     * [Config Option] (String/Number)
     */
    activeItem?: any,

    /**
     * [Config Option] (String/Number/Ext.Component)
     */
    activeTab?: any,

    /**
     * [Config Option] (Boolean)
     */
    deferredRender?: boolean,

    /**
     * [Config Option] (String)
     */
    itemCls?: string,

    /**
     * [Config Option] (Ext.enums.Layout/Object)
     */
    Ext$layout?: any,

    /**
     * [Config Option] (Number)
     */
    maxTabWidth?: number,

    /**
     * [Config Option] (Number)
     */
    minTabWidth?: number,

    /**
     * [Config Option] (Boolean)
     */
    plain?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    removePanelHeader?: boolean,

    /**
     * [Config Option] (Object)
     */
    tabBar?: any,

    /**
     * [Config Option] ("top"/"bottom"/"left"/"right")
     */
    tabPosition?: any,

    /**
     * [Method] Returns the item that is currently active inside this TabPanel
     * @returns Ext.Component The currently active item.
     */
    getActiveTab?: () => Ext$flash$IComponent,

    /**
     * [Method] Returns the Ext tab Bar currently used in this TabPanel
     * @returns Ext.tab.Bar The TabBar
     */
    getTabBar?: () => Ext$Ext$tab.tab$IBar,

    /**
     * [Method] Makes sure we have a Tab for each item added to the TabPanel
     * @param item Object
     * @param index Object
     */
    onAdd?: (item?: any, index?: any) => void,

    /**
     * [Method] Makes the given card active
     * @param card String/Number/Ext.Component The card to make active. Either an ID, index or the component itself.
     * @returns Ext.Component The resulting active child Component. The call may have been vetoed, or otherwise modified by an event listener.
     */
    setActiveTab?: (card?: any) => Ext$flash$IComponent
  } & undefined.Ext$IPanel;

  declare export type Ext$ITemplate = {
    /**
     * [Config Option] (String/Ext.XTemplate)
     */
    tpl?: any,

    /**
     * [Method] When defined this will take precedence over the renderer config
     * @param value Object
     * @param meta Object
     * @param record Object
     */
    defaultRenderer?: (Ext$value?: any, meta?: any, record?: any) => void,

    /**
     * [Config Option] (Boolean)
     */
    compiled?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    disableFormats?: boolean,

    /**
     * [Property] (Boolean)
     */
    isTemplate?: boolean,

    /**
     * [Method] Applies the supplied values to the template and appends the new node s to the specified el
     * @param el String/HTMLElement/Ext.Element The context element
     * @param values Object/Array The template values. See applyTemplate for details.
     * @param returnElement Boolean true to return an Ext.Element.
     * @returns HTMLElement/Ext.Element The new node or Element
     */
    append?: (el?: any, values?: any, returnElement?: boolean) => any,

    /**
     * [Method] Returns an HTML fragment of this template with the specified values applied
     * @param values Object/Array The template values. Can be an array if your params are numeric:  var tpl = new Ext.Template('Name: {0}, Age: {1}'); tpl.apply(['John', 25]); or an object:  var tpl = new Ext.Template('Name: {name}, Age: {age}'); tpl.apply({name: 'John', age: 25});
     * @returns String The HTML fragment
     */
    Ext$apply?: (values?: any) => string,

    /**
     * [Method] Appends the result of this template to the provided output array
     * @param values Object/Array The template values. See apply.
     * @param out Array The array to which output is pushed.
     * @returns Array The given out array.
     */
    applyOut?: (values?: any, out?: any[]) => any[],

    /**
     * [Method] Alias for apply
     * @param values Object/Array The template values. Can be an array if your params are numeric:  var tpl = new Ext.Template('Name: {0}, Age: {1}'); tpl.apply(['John', 25]); or an object:  var tpl = new Ext.Template('Name: {name}, Age: {age}'); tpl.apply({name: 'John', age: 25});
     * @returns String The HTML fragment
     */
    applyTemplate?: (values?: any) => string,

    /**
     * [Method] Compiles the template into an internal function eliminating the RegEx overhead
     * @returns Ext.Template this
     */
    compile?: () => Ext$Ext$ITemplate,

    /**
     * [Method] Applies the supplied values to the template and inserts the new node s after el
     * @param el String/HTMLElement/Ext.Element The context element
     * @param values Object/Array The template values. See applyTemplate for details.
     * @param returnElement Boolean true to return a Ext.Element.
     * @returns HTMLElement/Ext.Element The new node or Element
     */
    insertAfter?: (el?: any, values?: any, returnElement?: boolean) => any,

    /**
     * [Method] Applies the supplied values to the template and inserts the new node s before el
     * @param el String/HTMLElement/Ext.Element The context element
     * @param values Object/Array The template values. See applyTemplate for details.
     * @param returnElement Boolean true to return a Ext.Element.
     * @returns HTMLElement/Ext.Element The new node or Element
     */
    insertBefore?: (el?: any, values?: any, returnElement?: boolean) => any,

    /**
     * [Method] Applies the supplied values to the template and inserts the new node s as the first child of el
     * @param el String/HTMLElement/Ext.Element The context element
     * @param values Object/Array The template values. See applyTemplate for details.
     * @param returnElement Boolean true to return a Ext.Element.
     * @returns HTMLElement/Ext.Element The new node or Element
     */
    insertFirst?: (el?: any, values?: any, returnElement?: boolean) => any,

    /**
     * [Method] Applies the supplied values to the template and overwrites the content of el with the new node s
     * @param el String/HTMLElement/Ext.Element The context element
     * @param values Object/Array The template values. See applyTemplate for details.
     * @param returnElement Boolean true to return a Ext.Element.
     * @returns HTMLElement/Ext.Element The new node or Element
     */
    overwrite?: (el?: any, values?: any, returnElement?: boolean) => any,

    /**
     * [Method] Sets the HTML used as the template and optionally compiles it
     * @param html String
     * @param compile Boolean True to compile the template.
     * @returns Ext.Template this
     */
    set?: (html?: string, compile?: boolean) => Ext$Ext$ITemplate
  } & undefined.tree$IColumn;

  declare export class Ext$Template {
    /**
     * [Method] Add methods  properties to the prototype of this class
     * @param members Object
     */
    static addMembers(members?: any): void;

    /**
     * [Method] Add  override static properties of this class
     * @param members Object
     * @returns Ext.Base this
     */
    static addStatics(members?: any): Ext$Ext$IBase;

    /**
     * [Method] Create a new instance of this Class
     * @returns Object the created instance.
     */
    static create(): any;

    /**
     * [Method] Create aliases for existing prototype methods
     * @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
     * @param origin String/Object The original method name
     */
    static createAlias(alias?: any, origin?: any): void;

    /**
     * [Method] Creates a template from the passed element s value display none textarea preferred or innerHTML
     * @param el String/HTMLElement A DOM element or its id
     * @param config Object Config object
     * @returns Ext.Template The created template
     */
    static from(el?: any, config?: any): Ext$Ext$ITemplate;

    /**
     * [Method] Get the current class name in string format
     * @returns String className
     */
    static getName(): string;

    /**
     * [Method] Adds members to class
     */
    static implement(): void;

    /**
     * [Method] Override members of this class
     * @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
     * @returns Ext.Base this class
     */
    static override(members?: any): Ext$Ext$IBase;
  }

  declare export type tip$IToolTip = {
    /**
     * [Config Option] (String)
     */
    anchor?: string,

    /**
     * [Config Option] (Number)
     */
    anchorOffset?: number,

    /**
     * [Config Option] (Boolean)
     */
    anchorToTarget?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    autoHide?: boolean,

    /**
     * [Config Option] (String)
     */
    delegate?: string,

    /**
     * [Config Option] (Number)
     */
    dismissDelay?: number,

    /**
     * [Config Option] (Number)
     */
    hideDelay?: number,

    /**
     * [Config Option] (Number[])
     */
    mouseOffset?: number[],

    /**
     * [Config Option] (Number)
     */
    showDelay?: number,

    /**
     * [Config Option] (HTMLElement/Ext.Element/String)
     */
    target?: any,

    /**
     * [Config Option] (Boolean)
     */
    trackMouse?: boolean,

    /**
     * [Property] (HTMLElement)
     */
    triggerElement?: HTMLElement,

    /**
     * [Method] Binds this ToolTip to the specified element
     * @param t String/HTMLElement/Ext.Element The Element, HtmlElement, or ID of an element to bind to
     */
    setTarget?: (t?: any) => void,

    /**
     * [Config Option] (String)
     */
    anchor?: string,

    /**
     * [Config Option] (Number)
     */
    anchorOffset?: number,

    /**
     * [Config Option] (Boolean)
     */
    anchorToTarget?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    autoHide?: boolean,

    /**
     * [Config Option] (String)
     */
    delegate?: string,

    /**
     * [Config Option] (Number)
     */
    dismissDelay?: number,

    /**
     * [Config Option] (Number)
     */
    hideDelay?: number,

    /**
     * [Config Option] (Number[])
     */
    mouseOffset?: number[],

    /**
     * [Config Option] (Number)
     */
    showDelay?: number,

    /**
     * [Config Option] (HTMLElement/Ext.Element/String)
     */
    target?: any,

    /**
     * [Config Option] (Boolean)
     */
    trackMouse?: boolean,

    /**
     * [Property] (HTMLElement)
     */
    triggerElement?: HTMLElement,

    /**
     * [Method] Binds this ToolTip to the specified element
     * @param t String/HTMLElement/Ext.Element The Element, HtmlElement, or ID of an element to bind to
     */
    setTarget?: (t?: any) => void
  } & undefined.slider$ITip;

  declare export type Ext$IQuickTip = {
    /**
     * [Config Option] (Boolean)
     */
    interceptTitles?: boolean,

    /**
     * [Config Option] (String/HTMLElement/Ext.Element)
     */
    target?: any,

    /**
     * [Config Option] (String)
     */
    title?: string,

    /**
     * [Method] Hides a visible tip or cancels an impending show for a particular element
     * @param el String/HTMLElement/Ext.Element The element that is the target of the tip or ID of the element.
     */
    cancelShow?: (el?: any) => void,

    /**
     * [Method] Configures a new quick tip instance and assigns it to a target element
     * @param config Object The config object with the following properties:
     */
    register?: (config?: any) => void,

    /**
     * [Method] Removes this quick tip from its element and destroys it
     * @param el String/HTMLElement/Ext.Element The element from which the quick tip is to be removed or ID of the element.
     */
    unregister?: (el?: any) => void,

    /**
     * [Config Option] (Boolean)
     */
    interceptTitles?: boolean,

    /**
     * [Config Option] (String/HTMLElement/Ext.Element)
     */
    target?: any,

    /**
     * [Config Option] (String)
     */
    title?: string,

    /**
     * [Method] Hides a visible tip or cancels an impending show for a particular element
     * @param el String/HTMLElement/Ext.Element The element that is the target of the tip or ID of the element.
     */
    cancelShow?: (el?: any) => void,

    /**
     * [Method] Configures a new quick tip instance and assigns it to a target element
     * @param config Object The config object with the following properties:
     */
    register?: (config?: any) => void,

    /**
     * [Method] Removes this quick tip from its element and destroys it
     * @param el String/HTMLElement/Ext.Element The element from which the quick tip is to be removed or ID of the element.
     */
    unregister?: (el?: any) => void
  } & undefined.tip$IToolTip;

  declare export type Ext$IQuickTips = {} & Ext$Ext$IBase;

  declare export class Ext$QuickTips {
    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Destroys the QuickTips instance
     */
    static destroy(): void;

    /**
     * [Method] Disables quick tips globally
     */
    static disable(): void;

    /**
     * [Method] Enables quick tips globally
     */
    static enable(): void;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(Ext$name?: string): any;

    /**
     * [Method] Gets the single QuickTip instance used to show tips from all registered elements
     * @returns Ext.tip.QuickTip
     */
    static getQuickTip(): Ext$Ext$tip.Ext$IQuickTip;

    /**
     * [Method] Initializes the global QuickTips instance and prepare any quick tips
     * @param autoRender Boolean True to render the QuickTips container immediately to preload images.
     * @param config Object config object for the created QuickTip. By default, the QuickTip class is instantiated, but this can be changed by supplying an xtype property or a className property in this object. All other properties on this object are configuration for the created component.
     */
    static init(autoRender?: boolean, config?: any): void;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Returns true if quick tips are enabled else false
     * @returns Boolean
     */
    static isEnabled(): boolean;

    /**
     * [Method] Configures a new quick tip instance and assigns it to a target element
     * @param config Object The config object
     */
    static register(config?: any): void;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Alias of register
     * @param config Object The config object
     */
    static tips(config?: any): void;

    /**
     * [Method] Removes any registered quick tip from the target element and destroys it
     * @param el String/HTMLElement/Ext.Element The element from which the quick tip is to be removed or ID of the element.
     */
    static unregister(el?: any): void;
  }

  declare export type Ext$ITip = {
    /**
     * [Config Option] (String)
     */
    align?: string,

    /**
     * [Config Option] (Number)
     */
    minWidth?: number,

    /**
     * [Config Option] (Array)
     */
    offsets?: any[],

    /**
     * [Config Option] (String)
     */
    position?: string,

    /**
     * [Method] Used to create the text that appears in the Tip s body
     * @param thumb Ext.slider.Thumb The Thumb that the Tip is attached to
     * @returns String The text to display in the tip
     */
    getText?: (thumb?: Ext$Ext$slider.slider$IThumb) => string,

    /**
     * [Config Option] (Boolean/String/HTMLElement/Ext.Element)
     */
    autoRender?: any,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    closable?: boolean,

    /**
     * [Config Option] (String)
     */
    closeAction?: string,

    /**
     * [Config Option] (Boolean)
     */
    constrainPosition?: boolean,

    /**
     * [Config Option] (String)
     */
    defaultAlign?: string,

    /**
     * [Config Option] (Boolean)
     */
    floating?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    focusOnToFront?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    frameHeader?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    hidden?: boolean,

    /**
     * [Config Option] (Number)
     */
    maxWidth?: number,

    /**
     * [Config Option] (Number)
     */
    minWidth?: number,

    /**
     * [Config Option] (Boolean/String)
     */
    shadow?: any,

    /**
     * [Config Option] (Number)
     */
    width?: number,

    /**
     * [Config Option] (Boolean/String/HTMLElement/Ext.Element)
     */
    autoRender?: any,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    closable?: boolean,

    /**
     * [Config Option] (String)
     */
    closeAction?: string,

    /**
     * [Config Option] (Boolean)
     */
    constrainPosition?: boolean,

    /**
     * [Config Option] (String)
     */
    defaultAlign?: string,

    /**
     * [Config Option] (Boolean)
     */
    floating?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    focusOnToFront?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    frameHeader?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    hidden?: boolean,

    /**
     * [Config Option] (Number)
     */
    maxWidth?: number,

    /**
     * [Config Option] (Number)
     */
    minWidth?: number,

    /**
     * [Config Option] (Boolean/String)
     */
    shadow?: any,

    /**
     * [Config Option] (Number)
     */
    width?: number
  } & Ext$Ext$IBase;

  declare export type Ext$IToolTip = {
    /**
     * [Config Option] (String)
     */
    anchor?: string,

    /**
     * [Config Option] (Number)
     */
    anchorOffset?: number,

    /**
     * [Config Option] (Boolean)
     */
    anchorToTarget?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    autoHide?: boolean,

    /**
     * [Config Option] (String)
     */
    delegate?: string,

    /**
     * [Config Option] (Number)
     */
    dismissDelay?: number,

    /**
     * [Config Option] (Number)
     */
    hideDelay?: number,

    /**
     * [Config Option] (Number[])
     */
    mouseOffset?: number[],

    /**
     * [Config Option] (Number)
     */
    showDelay?: number,

    /**
     * [Config Option] (HTMLElement/Ext.Element/String)
     */
    target?: any,

    /**
     * [Config Option] (Boolean)
     */
    trackMouse?: boolean,

    /**
     * [Property] (HTMLElement)
     */
    triggerElement?: HTMLElement,

    /**
     * [Method] Binds this ToolTip to the specified element
     * @param t String/HTMLElement/Ext.Element The Element, HtmlElement, or ID of an element to bind to
     */
    setTarget?: (t?: any) => void,

    /**
     * [Config Option] (String)
     */
    anchor?: string,

    /**
     * [Config Option] (Number)
     */
    anchorOffset?: number,

    /**
     * [Config Option] (Boolean)
     */
    anchorToTarget?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    autoHide?: boolean,

    /**
     * [Config Option] (String)
     */
    delegate?: string,

    /**
     * [Config Option] (Number)
     */
    dismissDelay?: number,

    /**
     * [Config Option] (Number)
     */
    hideDelay?: number,

    /**
     * [Config Option] (Number[])
     */
    mouseOffset?: number[],

    /**
     * [Config Option] (Number)
     */
    showDelay?: number,

    /**
     * [Config Option] (HTMLElement/Ext.Element/String)
     */
    target?: any,

    /**
     * [Config Option] (Boolean)
     */
    trackMouse?: boolean,

    /**
     * [Property] (HTMLElement)
     */
    triggerElement?: HTMLElement,

    /**
     * [Method] Binds this ToolTip to the specified element
     * @param t String/HTMLElement/Ext.Element The Element, HtmlElement, or ID of an element to bind to
     */
    setTarget?: (t?: any) => void
  } & undefined.Ext$ITip;

  declare export type toolbar$IToolbar = {
    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (String)
     */
    defaultButtonUI?: string,

    /**
     * [Config Option] (String)
     */
    defaultType?: string,

    /**
     * [Config Option] (Boolean)
     */
    enableOverflow?: boolean,

    /**
     * [Config Option] (Ext.enums.Layout/Object)
     */
    Ext$layout?: any,

    /**
     * [Config Option] (String)
     */
    menuTriggerCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    vertical?: boolean,

    /**
     * [Property] (Boolean)
     */
    isToolbar?: boolean,

    /**
     * [Method] Adds element s to the toolbar this function takes a variable number of arguments of mixed type and adds them to t
     * @param args Ext.Component.../Object.../String.../HTMLElement... The following types of arguments are all valid:  config: A valid button config object HtmlElement: Any standard HTML element Field: Any form field Item: Any subclass of Ext.toolbar.Item String: Any generic string (gets wrapped in a Ext.toolbar.TextItem). Note that there are a few special strings that are treated differently as explained next:  '-': Creates a separator element ' ': Creates a spacer element '-&gt;': Creates a fill element
     * @returns Ext.Component[]/Ext.Component The Components that were added.
     */
    add?: (args?: any) => any,

    /**
     * [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th
     * @param deep Object
     */
    getRefItems?: (deep?: any) => void,

    /**
     * [Method] Inserts a Component into this Container at a specified index
     * @param index Number The index at which the Component will be inserted.
     * @param component Ext.Component/Object/String/HTMLElement See add method for overview of possible values.
     * @returns Ext.Component The component that was inserted.
     */
    insert?: (index?: number, component?: any) => Ext$flash$IComponent,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (String)
     */
    defaultButtonUI?: string,

    /**
     * [Config Option] (String)
     */
    defaultType?: string,

    /**
     * [Config Option] (Boolean)
     */
    enableOverflow?: boolean,

    /**
     * [Config Option] (Ext.enums.Layout/Object)
     */
    Ext$layout?: any,

    /**
     * [Config Option] (String)
     */
    menuTriggerCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    vertical?: boolean,

    /**
     * [Property] (Boolean)
     */
    isToolbar?: boolean,

    /**
     * [Method] Adds element s to the toolbar this function takes a variable number of arguments of mixed type and adds them to t
     * @param args Ext.Component.../Object.../String.../HTMLElement... The following types of arguments are all valid:  config: A valid button config object HtmlElement: Any standard HTML element Field: Any form field Item: Any subclass of Ext.toolbar.Item String: Any generic string (gets wrapped in a Ext.toolbar.TextItem). Note that there are a few special strings that are treated differently as explained next:  '-': Creates a separator element ' ': Creates a spacer element '-&gt;': Creates a fill element
     * @returns Ext.Component[]/Ext.Component The Components that were added.
     */
    add?: (args?: any) => any,

    /**
     * [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th
     * @param deep Object
     */
    getRefItems?: (deep?: any) => void,

    /**
     * [Method] Inserts a Component into this Container at a specified index
     * @param index Number The index at which the Component will be inserted.
     * @param component Ext.Component/Object/String/HTMLElement See add method for overview of possible values.
     * @returns Ext.Component The component that was inserted.
     */
    insert?: (index?: number, component?: any) => Ext$flash$IComponent
  } & undefined.Ext$IContainer;

  declare export type Ext$IPagingToolbar = {
    /**
     * [Config Option] (String)
     */
    afterPageText?: string,

    /**
     * [Config Option] (String)
     */
    beforePageText?: string,

    /**
     * [Config Option] (Boolean)
     */
    displayInfo?: boolean,

    /**
     * [Config Option] (String)
     */
    displayMsg?: string,

    /**
     * [Config Option] (String)
     */
    emptyMsg?: string,

    /**
     * [Config Option] (String)
     */
    firstText?: string,

    /**
     * [Config Option] (Number)
     */
    inputItemWidth?: number,

    /**
     * [Config Option] (String)
     */
    lastText?: string,

    /**
     * [Config Option] (String)
     */
    nextText?: string,

    /**
     * [Config Option] (Boolean)
     */
    prependButtons?: boolean,

    /**
     * [Config Option] (String)
     */
    prevText?: string,

    /**
     * [Config Option] (String)
     */
    refreshText?: string,

    /**
     * [Config Option] (Ext.data.Store)
     */
    store?: Ext$Ext$data.property$IStore,

    /**
     * [Method] Binds the paging toolbar to the specified Ext data Store deprecated
     * @param store Ext.data.Store The data store to bind
     */
    Ext$bind?: (store?: Ext$Ext$data.property$IStore) => void,

    /**
     * [Method] Binds a store to this instance
     * @param store Ext.data.AbstractStore/String The store to bind or ID of the store. When no store given (or when null or undefined passed), unbinds the existing store.
     */
    bindStore?: (store?: any) => void,

    /**
     * [Method] Binds listeners for this component to the store
     * @param store Ext.data.AbstractStore The store to bind to
     */
    bindStoreListeners?: (store?: Ext$Ext$data.data$IAbstractStore) => void,

    /**
     * [Method] Refresh the current page has the same effect as clicking the refresh button
     */
    doRefresh?: () => void,

    /**
     * [Method] Gets the current store instance
     * @returns Ext.data.AbstractStore The store, null if one does not exist.
     */
    Ext$getStore?: () => Ext$Ext$data.data$IAbstractStore,

    /**
     * [Method] Gets the listeners to bind to a new store
     * @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance.
     */
    getStoreListeners?: () => any,

    /**
     * [Method] Move to the first page has the same effect as clicking the first button
     */
    moveFirst?: () => void,

    /**
     * [Method] Move to the last page has the same effect as clicking the last button
     */
    moveLast?: () => void,

    /**
     * [Method] Move to the next page has the same effect as clicking the next button
     */
    moveNext?: () => void,

    /**
     * [Method] Move to the previous page has the same effect as clicking the previous button
     */
    movePrevious?: () => void,

    /**
     * [Method] Template method it is called when a new store is bound to the current instance
     * @param store Ext.data.AbstractStore The store being bound
     * @param initial Boolean True if this store is being bound as initialization of the instance.
     */
    onBindStore?: (
      store?: Ext$Ext$data.data$IAbstractStore,
      initial?: boolean
    ) => void,

    /**
     * [Method] Template method it is called when an existing store is unbound from the current instance
     * @param store Ext.data.AbstractStore The store being unbound
     * @param initial Boolean True if this store is being bound as initialization of the instance.
     */
    onUnbindStore?: (
      store?: Ext$Ext$data.data$IAbstractStore,
      initial?: boolean
    ) => void,

    /**
     * [Method] Unbinds the paging toolbar from the specified Ext data Store deprecated
     * @param store Ext.data.Store The data store to unbind
     */
    unbind?: (store?: Ext$Ext$data.property$IStore) => void,

    /**
     * [Method] Unbinds listeners from this component to the store
     * @param store Ext.data.AbstractStore The store to unbind from
     */
    unbindStoreListeners?: (store?: Ext$Ext$data.data$IAbstractStore) => void
  } & undefined.toolbar$IToolbar &
    undefined.util$IBindable;

  declare export type Ext$IToolbar = {
    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (String)
     */
    defaultButtonUI?: string,

    /**
     * [Config Option] (String)
     */
    defaultType?: string,

    /**
     * [Config Option] (Boolean)
     */
    enableOverflow?: boolean,

    /**
     * [Config Option] (Ext.enums.Layout/Object)
     */
    Ext$layout?: any,

    /**
     * [Config Option] (String)
     */
    menuTriggerCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    vertical?: boolean,

    /**
     * [Property] (Boolean)
     */
    isToolbar?: boolean,

    /**
     * [Method] Adds element s to the toolbar this function takes a variable number of arguments of mixed type and adds them to t
     * @param args Ext.Component.../Object.../String.../HTMLElement... The following types of arguments are all valid:  config: A valid button config object HtmlElement: Any standard HTML element Field: Any form field Item: Any subclass of Ext.toolbar.Item String: Any generic string (gets wrapped in a Ext.toolbar.TextItem). Note that there are a few special strings that are treated differently as explained next:  '-': Creates a separator element ' ': Creates a spacer element '-&gt;': Creates a fill element
     * @returns Ext.Component[]/Ext.Component The Components that were added.
     */
    add?: (args?: any) => any,

    /**
     * [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th
     * @param deep Object
     */
    getRefItems?: (deep?: any) => void,

    /**
     * [Method] Inserts a Component into this Container at a specified index
     * @param index Number The index at which the Component will be inserted.
     * @param component Ext.Component/Object/String/HTMLElement See add method for overview of possible values.
     * @returns Ext.Component The component that was inserted.
     */
    insert?: (index?: number, component?: any) => Ext$flash$IComponent,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (String)
     */
    defaultButtonUI?: string,

    /**
     * [Config Option] (String)
     */
    defaultType?: string,

    /**
     * [Config Option] (Boolean)
     */
    enableOverflow?: boolean,

    /**
     * [Config Option] (Ext.enums.Layout/Object)
     */
    Ext$layout?: any,

    /**
     * [Config Option] (String)
     */
    menuTriggerCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    vertical?: boolean,

    /**
     * [Property] (Boolean)
     */
    isToolbar?: boolean,

    /**
     * [Method] Adds element s to the toolbar this function takes a variable number of arguments of mixed type and adds them to t
     * @param args Ext.Component.../Object.../String.../HTMLElement... The following types of arguments are all valid:  config: A valid button config object HtmlElement: Any standard HTML element Field: Any form field Item: Any subclass of Ext.toolbar.Item String: Any generic string (gets wrapped in a Ext.toolbar.TextItem). Note that there are a few special strings that are treated differently as explained next:  '-': Creates a separator element ' ': Creates a spacer element '-&gt;': Creates a fill element
     * @returns Ext.Component[]/Ext.Component The Components that were added.
     */
    add?: (args?: any) => any,

    /**
     * [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th
     * @param deep Object
     */
    getRefItems?: (deep?: any) => void,

    /**
     * [Method] Inserts a Component into this Container at a specified index
     * @param index Number The index at which the Component will be inserted.
     * @param component Ext.Component/Object/String/HTMLElement See add method for overview of possible values.
     * @returns Ext.Component The component that was inserted.
     */
    insert?: (index?: number, component?: any) => Ext$flash$IComponent
  } & undefined.Ext$IContainer;

  declare export type tree$IViewDropZone = {
    /**
     * [Config Option] (Boolean)
     */
    allowContainerDrop?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    allowParentInserts?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    appendOnly?: boolean,

    /**
     * [Config Option] (Number)
     */
    expandDelay?: number,

    /**
     * [Method] Moved out of the DropZone without dropping
     */
    notifyOut?: () => void,

    /**
     * [Method] The mouse is past the end of all nodes or there are no nodes
     * @param dd Object
     * @param e Object
     * @param data Object
     * @returns String status The CSS class that communicates the drop status back to the source so that the underlying Ext.dd.StatusProxy can be updated
     */
    onContainerOver?: (Ext$dd?: any, e?: any, Ext$data?: any) => string,

    /**
     * [Method] The mouse is no longer over a tree node so dropping is not valid
     * @param n Object
     * @param dd Object
     * @param e Object
     * @param data Object
     */
    onNodeOut?: (n?: any, Ext$dd?: any, e?: any, Ext$data?: any) => void,

    /**
     * [Method] The mouse is over a View node
     * @param node Object
     * @param dragZone Object
     * @param e Object
     * @param data Object
     * @returns String status The CSS class that communicates the drop status back to the source so that the underlying Ext.dd.StatusProxy can be updated
     */
    onNodeOver?: (node?: any, dragZone?: any, e?: any, Ext$data?: any) => string
  } & undefined.view$IDropZone;

  declare export type Ext$ITreePanel = {
    /**
     * [Config Option] (Boolean)
     */
    animate?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    deferRowRender?: boolean,

    /**
     * [Config Option] (String)
     */
    displayField?: string,

    /**
     * [Config Option] (Boolean)
     */
    folderSort?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    hideHeaders?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    lines?: boolean,

    /**
     * [Config Option] (Ext.data.Model/Ext.data.NodeInterface/Object)
     */
    root?: any,

    /**
     * [Config Option] (Boolean)
     */
    rootVisible?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    rowLines?: boolean,

    /**
     * [Config Option] (String)
     */
    selType?: string,

    /**
     * [Config Option] (Boolean)
     */
    singleExpand?: boolean,

    /**
     * [Config Option] (Ext.data.TreeStore)
     */
    store?: Ext$Ext$data.data$ITreeStore,

    /**
     * [Config Option] (Boolean)
     */
    useArrows?: boolean,

    /**
     * [Config Option] (String)
     */
    viewType?: string,

    /**
     * [Method] Collapse all nodes
     * @param callback Function A function to execute when the collapse finishes.
     * @param scope Object The scope of the callback function
     */
    collapseAll?: (Ext$callback?: any, scope?: any) => void,

    /**
     * [Method] Collapses a record that is loaded in the tree
     * @param record Ext.data.Model The record to collapse
     * @param deep Boolean True to collapse nodes all the way up the tree hierarchy.
     * @param callback Function The function to run after the collapse is completed
     * @param scope Object The scope of the callback function.
     */
    collapseNode?: (
      record?: Ext$Ext$data.selection$IModel,
      deep?: boolean,
      Ext$callback?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Expand all nodes
     * @param callback Function A function to execute when the expand finishes.
     * @param scope Object The scope of the callback function
     */
    expandAll?: (Ext$callback?: any, scope?: any) => void,

    /**
     * [Method] Expands a record that is loaded in the tree
     * @param record Ext.data.Model The record to expand
     * @param deep Boolean True to expand nodes all the way down the tree hierarchy.
     * @param callback Function The function to run after the expand is completed
     * @param scope Object The scope of the callback function.
     */
    expandNode?: (
      record?: Ext$Ext$data.selection$IModel,
      deep?: boolean,
      Ext$callback?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Expand the tree to the path of a particular node
     * @param path String The path to expand. The path should include a leading separator.
     * @param field String The field to get the data from. Defaults to the model idProperty.
     * @param separator String A separator to use.
     * @param callback Function A function to execute when the expand finishes. The callback will be called with (success, lastNode) where success is if the expand was successful and lastNode is the last node that was expanded.
     * @param scope Object The scope of the callback function
     */
    expandPath?: (
      path?: string,
      field?: string,
      separator?: string,
      Ext$callback?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Retrieve an array of checked records
     * @returns Ext.data.NodeInterface[] An array containing the checked records
     */
    getChecked?: () => Ext$Ext$data.data$INodeInterface[],

    /**
     * [Method] Returns the root node for this tree
     * @returns Ext.data.NodeInterface
     */
    getRootNode?: () => Ext$Ext$data.data$INodeInterface,

    /**
     * [Method] Expand the tree to the path of a particular node then select it
     * @param path String The path to select. The path should include a leading separator.
     * @param field String The field to get the data from. Defaults to the model idProperty.
     * @param separator String A separator to use.
     * @param callback Function A function to execute when the select finishes. The callback will be called with (bSuccess, oLastNode) where bSuccess is if the select was successful and oLastNode is the last node that was expanded.
     * @param scope Object The scope of the callback function
     */
    selectPath?: (
      path?: string,
      field?: string,
      separator?: string,
      Ext$callback?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Sets root node of this tree
     * @param root Ext.data.Model/Ext.data.NodeInterface/Object
     * @returns Ext.data.NodeInterface The new root
     */
    setRootNode?: (root?: any) => Ext$Ext$data.data$INodeInterface,

    /**
     * [Config Option] (Boolean)
     */
    animate?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    deferRowRender?: boolean,

    /**
     * [Config Option] (String)
     */
    displayField?: string,

    /**
     * [Config Option] (Boolean)
     */
    folderSort?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    hideHeaders?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    lines?: boolean,

    /**
     * [Config Option] (Ext.data.Model/Ext.data.NodeInterface/Object)
     */
    root?: any,

    /**
     * [Config Option] (Boolean)
     */
    rootVisible?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    rowLines?: boolean,

    /**
     * [Config Option] (String)
     */
    selType?: string,

    /**
     * [Config Option] (Boolean)
     */
    singleExpand?: boolean,

    /**
     * [Config Option] (Ext.data.TreeStore)
     */
    store?: Ext$Ext$data.data$ITreeStore,

    /**
     * [Config Option] (Boolean)
     */
    useArrows?: boolean,

    /**
     * [Config Option] (String)
     */
    viewType?: string,

    /**
     * [Method] Collapse all nodes
     * @param callback Function A function to execute when the collapse finishes.
     * @param scope Object The scope of the callback function
     */
    collapseAll?: (Ext$callback?: any, scope?: any) => void,

    /**
     * [Method] Collapses a record that is loaded in the tree
     * @param record Ext.data.Model The record to collapse
     * @param deep Boolean True to collapse nodes all the way up the tree hierarchy.
     * @param callback Function The function to run after the collapse is completed
     * @param scope Object The scope of the callback function.
     */
    collapseNode?: (
      record?: Ext$Ext$data.selection$IModel,
      deep?: boolean,
      Ext$callback?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Expand all nodes
     * @param callback Function A function to execute when the expand finishes.
     * @param scope Object The scope of the callback function
     */
    expandAll?: (Ext$callback?: any, scope?: any) => void,

    /**
     * [Method] Expands a record that is loaded in the tree
     * @param record Ext.data.Model The record to expand
     * @param deep Boolean True to expand nodes all the way down the tree hierarchy.
     * @param callback Function The function to run after the expand is completed
     * @param scope Object The scope of the callback function.
     */
    expandNode?: (
      record?: Ext$Ext$data.selection$IModel,
      deep?: boolean,
      Ext$callback?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Expand the tree to the path of a particular node
     * @param path String The path to expand. The path should include a leading separator.
     * @param field String The field to get the data from. Defaults to the model idProperty.
     * @param separator String A separator to use.
     * @param callback Function A function to execute when the expand finishes. The callback will be called with (success, lastNode) where success is if the expand was successful and lastNode is the last node that was expanded.
     * @param scope Object The scope of the callback function
     */
    expandPath?: (
      path?: string,
      field?: string,
      separator?: string,
      Ext$callback?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Retrieve an array of checked records
     * @returns Ext.data.NodeInterface[] An array containing the checked records
     */
    getChecked?: () => Ext$Ext$data.data$INodeInterface[],

    /**
     * [Method] Returns the root node for this tree
     * @returns Ext.data.NodeInterface
     */
    getRootNode?: () => Ext$Ext$data.data$INodeInterface,

    /**
     * [Method] Expand the tree to the path of a particular node then select it
     * @param path String The path to select. The path should include a leading separator.
     * @param field String The field to get the data from. Defaults to the model idProperty.
     * @param separator String A separator to use.
     * @param callback Function A function to execute when the select finishes. The callback will be called with (bSuccess, oLastNode) where bSuccess is if the select was successful and oLastNode is the last node that was expanded.
     * @param scope Object The scope of the callback function
     */
    selectPath?: (
      path?: string,
      field?: string,
      separator?: string,
      Ext$callback?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Sets root node of this tree
     * @param root Ext.data.Model/Ext.data.NodeInterface/Object
     * @returns Ext.data.NodeInterface The new root
     */
    setRootNode?: (root?: any) => Ext$Ext$data.data$INodeInterface
  } & undefined.view$ITable;

  declare export type Ext$IHistory = {} & Ext$Ext$IBase &
    undefined.util$IObservable;

  declare export class Ext$History {
    /**
     * [Property] (String)
     */
    static fieldId: string;

    /**
     * [Property] (Object)
     */
    static hasListeners: any;

    /**
     * [Property] (String)
     */
    static iframeId: string;

    /**
     * [Property] (Boolean)
     */
    static isObservable: boolean;

    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Property] (Boolean)
     */
    static useTopWindow: boolean;

    /**
     * [Method] Add a new token to the history stack
     * @param token String The value that defines a particular application-specific history state
     * @param preventDuplicates Boolean When true, if the passed token matches the current token it will not save a new history step. Set to false if the same state can be saved more than once at the same history stack location.
     */
    static add(token?: string, preventDuplicates?: boolean): void;

    /**
     * [Method] Adds the specified events to the list of events which this Observable may fire
     * @param eventNames Object/String... Either an object with event names as properties with a value of true. For example: this.addEvents({  storeloaded: true,  storecleared: true });  Or any number of event names as separate parameters. For example: this.addEvents('storeloaded', 'storecleared');
     */
    static addEvents(eventNames?: any): void;

    /**
     * [Method] Appends an event handler to this object
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addListener(
      eventName?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Adds listeners to any Observable object or Ext Element which are automatically removed when this Component is destr
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static addManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Programmatically steps back one step in browser history equivalent to the user pressing the Back button
     */
    static back(): void;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Removes all listeners for this object including the managed listeners
     */
    static clearListeners(): void;

    /**
     * [Method] Removes all managed listeners for this object
     */
    static clearManagedListeners(): void;

    /**
     * [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
     * @param eventNames String/String[] The event name to bubble, or an Array of event names.
     */
    static enableBubble(eventNames?: any): void;

    /**
     * [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
     * @param eventName String The name of the event to fire.
     * @param args Object... Variable number of parameters are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEvent(eventName: string, ...args: any[]): boolean;

    /**
     * [Method] Fires the specified event with the passed parameter list
     * @param eventName String The name of the event to fire.
     * @param args Object[] An array of parameters which are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    static fireEventArgs(eventName?: string, args?: any[]): boolean;

    /**
     * [Method] Programmatically steps forward one step in browser history equivalent to the user pressing the Forward button
     */
    static forward(): void;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(Ext$name?: string): any;

    /**
     * [Method] Retrieves the currently active history token
     * @returns String The token
     */
    static getToken(): string;

    /**
     * [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles
     * @param eventName String The name of the event to check for
     * @returns Boolean true if the event is being listened for or bubbles, else false
     */
    static hasListener(eventName?: string): boolean;

    /**
     * [Method] Initializes the global History instance
     * @param onReady Function A callback function that will be called once the history component is fully initialized.
     * @param scope Object The scope (this reference) in which the callback is executed. Defaults to the browser window.
     */
    static init(Ext$onReady?: any, scope?: any): void;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Shorthand for addManagedListener
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static mon(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ): any;

    /**
     * [Method] Shorthand for removeManagedListener
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static mun(item?: any, ename?: any, fn?: any, scope?: any): void;

    /**
     * [Method] Shorthand for addListener
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    static on(eventName?: any, fn?: any, scope?: any, options?: any): any;

    /**
     * [Method] Relays selected events from the specified Observable as if the events were fired by this
     * @param origin Object The Observable whose events this object is to relay.
     * @param events String[] Array of event names to relay.
     * @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
     * @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or this.store.relayers.destroy();
     */
    static relayEvents(origin?: any, events?: string[], prefix?: string): any;

    /**
     * [Method] Removes an event handler
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static removeListener(eventName?: string, fn?: any, scope?: any): void;

    /**
     * [Method] Removes listeners that were added by the mon method
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    static removeManagedListener(
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any
    ): void;

    /**
     * [Method] Resumes firing of the named event s
     * @param eventName String... Multiple event names to resume.
     */
    static resumeEvent(...eventName: any[]): void;

    /**
     * [Method] Resumes firing events see suspendEvents
     */
    static resumeEvents(): void;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Suspends firing of the named event s
     * @param eventName String... Multiple event names to suspend.
     */
    static suspendEvent(...eventName: any[]): void;

    /**
     * [Method] Suspends the firing of all events
     * @param queueSuspended Boolean Pass as true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events.
     */
    static suspendEvents(queueSuspended?: boolean): void;

    /**
     * [Method] Shorthand for removeListener
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    static un(eventName?: string, fn?: any, scope?: any): void;
  }

  declare export type Ext$IKeyMap = {
    /**
     * [Config Option] (Object/Object[][])
     */
    binding?: any,

    /**
     * [Config Option] (String)
     */
    eventName?: string,

    /**
     * [Config Option] (Boolean)
     */
    ignoreInputFields?: boolean,

    /**
     * [Config Option] (Function)
     */
    processEvent?: any,

    /**
     * [Config Option] (Object)
     */
    processEventScope?: any,

    /**
     * [Config Option] (Ext.Component/Ext.Element/HTMLElement/String)
     */
    target?: any,

    /**
     * [Method] Add a new binding to this KeyMap
     * @param binding Object/Object[] A single KeyMap config or an array of configs. The following config object properties are supported:
     */
    addBinding?: (binding?: any) => void,

    /**
     * [Method] Destroys the KeyMap instance and removes all handlers
     * @param removeTarget Boolean True to also remove the target
     */
    Ext$destroy?: (removeTarget?: boolean) => void,

    /**
     * [Method] Disable this KeyMap
     */
    disable?: () => void,

    /**
     * [Method] Enables this KeyMap
     */
    enable?: () => void,

    /**
     * [Method] Returns true if this KeyMap is enabled
     * @returns Boolean
     */
    isEnabled?: () => boolean,

    /**
     * [Method] Shorthand for adding a single key listener
     * @param key Number/Number[]/Object Either the numeric key code, array of key codes or an object with the following options: {key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}
     * @param fn Function The function to call
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
     */
    Ext$on?: (key?: any, fn?: any, scope?: any) => void,

    /**
     * [Method] Remove a binding from this KeyMap
     * @param binding Object See for options
     */
    removeBinding?: (binding?: any) => void,

    /**
     * [Method] Convenience function for setting disabled enabled by boolean
     * @param disabled Boolean
     */
    setDisabled?: (disabled?: boolean) => void,

    /**
     * [Method] Shorthand for removing a single key listener
     * @param key Number/Number[]/Object Either the numeric key code, array of key codes or an object with the following options: {key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}
     * @param fn Function The function to call
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
     */
    Ext$un?: (key?: any, fn?: any, scope?: any) => void,

    /**
     * [Config Option] (Object/Object[][])
     */
    binding?: any,

    /**
     * [Config Option] (String)
     */
    eventName?: string,

    /**
     * [Config Option] (Boolean)
     */
    ignoreInputFields?: boolean,

    /**
     * [Config Option] (Function)
     */
    processEvent?: any,

    /**
     * [Config Option] (Object)
     */
    processEventScope?: any,

    /**
     * [Config Option] (Ext.Component/Ext.Element/HTMLElement/String)
     */
    target?: any,

    /**
     * [Method] Add a new binding to this KeyMap
     * @param binding Object/Object[] A single KeyMap config or an array of configs. The following config object properties are supported:
     */
    addBinding?: (binding?: any) => void,

    /**
     * [Method] Destroys the KeyMap instance and removes all handlers
     * @param removeTarget Boolean True to also remove the target
     */
    Ext$destroy?: (removeTarget?: boolean) => void,

    /**
     * [Method] Disable this KeyMap
     */
    disable?: () => void,

    /**
     * [Method] Enables this KeyMap
     */
    enable?: () => void,

    /**
     * [Method] Returns true if this KeyMap is enabled
     * @returns Boolean
     */
    isEnabled?: () => boolean,

    /**
     * [Method] Shorthand for adding a single key listener
     * @param key Number/Number[]/Object Either the numeric key code, array of key codes or an object with the following options: {key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}
     * @param fn Function The function to call
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
     */
    Ext$on?: (key?: any, fn?: any, scope?: any) => void,

    /**
     * [Method] Remove a binding from this KeyMap
     * @param binding Object See for options
     */
    removeBinding?: (binding?: any) => void,

    /**
     * [Method] Convenience function for setting disabled enabled by boolean
     * @param disabled Boolean
     */
    setDisabled?: (disabled?: boolean) => void,

    /**
     * [Method] Shorthand for removing a single key listener
     * @param key Number/Number[]/Object Either the numeric key code, array of key codes or an object with the following options: {key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}
     * @param fn Function The function to call
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window.
     */
    Ext$un?: (key?: any, fn?: any, scope?: any) => void
  } & Ext$Ext$IBase;

  declare export type Ext$IKeyNav = {
    /**
     * [Config Option] (String)
     */
    defaultEventAction?: string,

    /**
     * [Config Option] (Boolean)
     */
    disabled?: boolean,

    /**
     * [Config Option] (String)
     */
    eventName?: string,

    /**
     * [Config Option] (Boolean)
     */
    forceKeyDown?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    ignoreInputFields?: boolean,

    /**
     * [Config Option] (Ext.util.KeyMap)
     */
    keyMap?: Ext$Ext$util.Ext$IKeyMap,

    /**
     * [Config Option] (Function)
     */
    processEvent?: any,

    /**
     * [Config Option] (Object)
     */
    processEventScope?: any,

    /**
     * [Config Option] (Ext.Component/Ext.Element/HTMLElement/String)
     */
    target?: any,

    /**
     * [Method] Destroy this KeyNav
     * @param removeEl Boolean Pass true to remove the element associated with this KeyNav.
     */
    Ext$destroy?: (removeEl?: boolean) => void,

    /**
     * [Method] Disables this KeyNav
     */
    disable?: () => void,

    /**
     * [Method] Enables this KeyNav
     */
    enable?: () => void,

    /**
     * [Method] Convenience function for setting disabled enabled by boolean
     * @param disabled Boolean
     */
    setDisabled?: (disabled?: boolean) => void,

    /**
     * [Config Option] (String)
     */
    defaultEventAction?: string,

    /**
     * [Config Option] (Boolean)
     */
    disabled?: boolean,

    /**
     * [Config Option] (String)
     */
    eventName?: string,

    /**
     * [Config Option] (Boolean)
     */
    forceKeyDown?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    ignoreInputFields?: boolean,

    /**
     * [Config Option] (Ext.util.KeyMap)
     */
    keyMap?: Ext$Ext$util.Ext$IKeyMap,

    /**
     * [Config Option] (Function)
     */
    processEvent?: any,

    /**
     * [Config Option] (Object)
     */
    processEventScope?: any,

    /**
     * [Config Option] (Ext.Component/Ext.Element/HTMLElement/String)
     */
    target?: any,

    /**
     * [Method] Destroy this KeyNav
     * @param removeEl Boolean Pass true to remove the element associated with this KeyNav.
     */
    Ext$destroy?: (removeEl?: boolean) => void,

    /**
     * [Method] Disables this KeyNav
     */
    disable?: () => void,

    /**
     * [Method] Enables this KeyNav
     */
    enable?: () => void,

    /**
     * [Method] Convenience function for setting disabled enabled by boolean
     * @param disabled Boolean
     */
    setDisabled?: (disabled?: boolean) => void
  } & undefined.Ext$IKeyNav;

  declare export type Ext$ITaskManager = {} & undefined.util$ITaskRunner;

  declare export class Ext$TaskManager {
    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Destroys this instance stopping all tasks that are currently running
     */
    static destroy(): void;

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(Ext$name?: string): any;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Creates a new Task instance
     * @param config Object The config object. For details on the supported properties, see start.
     */
    static newTask(config?: any): void;

    /**
     * [Method] Starts a new task
     * @param task Object A config object that supports the following properties:
     * @returns Object The task
     */
    static start(task?: any): any;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Stops an existing running task
     * @param task Object The task to stop
     * @returns Object The task
     */
    static stop(task?: any): any;

    /**
     * [Method] Stops all tasks that are currently running
     */
    static stopAll(): void;
  }

  declare export interface Ext$IVersion {
    /**
     * [Method] Returns whether this version equals to the supplied argument
     * @param target String/Number The version to compare with
     * @returns Boolean True if this version equals to the target, false otherwise
     */
    equals?: (target?: any) => boolean;

    /**
     * [Method] Returns the build component value
     * @returns Number build
     */
    getBuild?: () => number;

    /**
     * [Method] Returns the major component value
     * @returns Number major
     */
    getMajor?: () => number;

    /**
     * [Method] Returns the minor component value
     * @returns Number minor
     */
    getMinor?: () => number;

    /**
     * [Method] Returns the patch component value
     * @returns Number patch
     */
    getPatch?: () => number;

    /**
     * [Method] Returns the release component value
     * @returns Number release
     */
    getRelease?: () => number;

    /**
     * [Method] Returns shortVersion version without dots and release
     * @returns String
     */
    getShortVersion?: () => string;

    /**
     * [Method] Convenient alias to isGreaterThan
     * @param target String/Number
     * @returns Boolean
     */
    gt?: (target?: any) => boolean;

    /**
     * [Method] Convenient alias to isGreaterThanOrEqual
     * @param target String/Number
     * @returns Boolean
     */
    gtEq?: (target?: any) => boolean;

    /**
     * [Method] Returns whether this version if greater than the supplied argument
     * @param target String/Number The version to compare with
     * @returns Boolean True if this version if greater than the target, false otherwise
     */
    isGreaterThan?: (target?: any) => boolean;

    /**
     * [Method] Returns whether this version if greater than or equal to the supplied argument
     * @param target String/Number The version to compare with
     * @returns Boolean True if this version if greater than or equal to the target, false otherwise
     */
    isGreaterThanOrEqual?: (target?: any) => boolean;

    /**
     * [Method] Returns whether this version if smaller than the supplied argument
     * @param target String/Number The version to compare with
     * @returns Boolean True if this version if smaller than the target, false otherwise
     */
    isLessThan?: (target?: any) => boolean;

    /**
     * [Method] Returns whether this version if less than or equal to the supplied argument
     * @param target String/Number The version to compare with
     * @returns Boolean True if this version if less than or equal to the target, false otherwise
     */
    isLessThanOrEqual?: (target?: any) => boolean;

    /**
     * [Method] Convenient alias to isLessThan
     * @param target String/Number
     * @returns Boolean
     */
    lt?: (target?: any) => boolean;

    /**
     * [Method] Convenient alias to isLessThanOrEqual
     * @param target String/Number
     * @returns Boolean
     */
    ltEq?: (target?: any) => boolean;

    /**
     * [Method] Returns whether this version matches the supplied argument
     * @param target String/Number The version to compare with
     * @returns Boolean True if this version matches the target, false otherwise
     */
    match?: (target?: any) => boolean;

    /**
     * [Method] Returns this format  major minor patch build release
     * @returns Number[]
     */
    Ext$toArray?: () => number[];
  }

  declare export class Ext$Version {
    /**
     * [Method] Compare 2 specified versions starting from left to right
     * @param current String The current version to compare to
     * @param target String The target version to compare to
     * @returns Number Returns -1 if the current version is smaller than the target version, 1 if greater, and 0 if they're equivalent
     */
    static compare(current?: string, target?: string): number;

    /**
     * [Method] Converts a version component to a comparable value
     * @param value Object The value to convert
     * @returns Object
     */
    static getComponentValue(Ext$value?: any): any;
  }

  declare export type view$IView = {
    /**
     * [Property] (Boolean)
     */
    isLockingView?: boolean,

    /**
     * [Method] Adds the specified events to the list of events which this Observable may fire
     * @param eventNames Object/String... Either an object with event names as properties with a value of true. For example: this.addEvents({  storeloaded: true,  storecleared: true });  Or any number of event names as separate parameters. For example: this.addEvents('storeloaded', 'storecleared');
     */
    addEvents?: (eventNames?: any) => void,

    /**
     * [Method] Appends an event handler to this object
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    addListener?: (
      eventName?: any,
      fn?: any,
      scope?: any,
      options?: any
    ) => any,

    /**
     * [Method] Adds listeners to any Observable object or Ext Element which are automatically removed when this Component is destr
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    addManagedListener?: (
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ) => any,

    /**
     * [Method] Removes all listeners for this object including the managed listeners
     */
    clearListeners?: () => void,

    /**
     * [Method] Removes all managed listeners for this object
     */
    clearManagedListeners?: () => void,

    /**
     * [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present
     * @param eventNames String/String[] The event name to bubble, or an Array of event names.
     */
    enableBubble?: (eventNames?: any) => void,

    /**
     * [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList
     * @param eventName String The name of the event to fire.
     * @param args Object... Variable number of parameters are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    fireEvent?: (eventName: string, ...args: any[]) => boolean,

    /**
     * [Method] Fires the specified event with the passed parameter list
     * @param eventName String The name of the event to fire.
     * @param args Object[] An array of parameters which are passed to handlers.
     * @returns Boolean returns false if any of the handlers return false otherwise it returns true.
     */
    fireEventArgs?: (eventName?: string, args?: any[]) => boolean,

    /**
     * [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles
     * @param eventName String The name of the event to check for
     * @returns Boolean true if the event is being listened for or bubbles, else false
     */
    hasListener?: (eventName?: string) => boolean,

    /**
     * [Method] Shorthand for addManagedListener
     * @param item Ext.util.Observable/Ext.Element The item to which to add a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     * @param options Object If the ename parameter was an event name, this is the addListener options.
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    mon?: (
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any,
      options?: any
    ) => any,

    /**
     * [Method] Shorthand for removeManagedListener
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    mun?: (item?: any, ename?: any, fn?: any, scope?: any) => void,

    /**
     * [Method] Shorthand for addListener
     * @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names.
     * @param fn Function The method the event invokes, or if scope is specified, the name* of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below.
     * @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event.
     * @param options Object An object containing handler configuration.  Note: Unlike in ExtJS 3.x, the options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties:
     * @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();
     */
    Ext$on?: (eventName?: any, fn?: any, scope?: any, options?: any) => any,

    /**
     * [Method] Relays selected events from the specified Observable as if the events were fired by this
     * @param origin Object The Observable whose events this object is to relay.
     * @param events String[] Array of event names to relay.
     * @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'.
     * @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or this.store.relayers.destroy();
     */
    relayEvents?: (origin?: any, events?: string[], prefix?: string) => any,

    /**
     * [Method] Removes an event handler
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    removeListener?: (eventName?: string, fn?: any, scope?: any) => void,

    /**
     * [Method] Removes listeners that were added by the mon method
     * @param item Ext.util.Observable/Ext.Element The item from which to remove a listener/listeners.
     * @param ename Object/String The event name, or an object containing event name properties.
     * @param fn Function If the ename parameter was an event name, this is the handler function.
     * @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed.
     */
    removeManagedListener?: (
      item?: any,
      ename?: any,
      fn?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Resumes firing of the named event s
     * @param eventName String... Multiple event names to resume.
     */
    resumeEvent?: (...eventName: any[]) => void,

    /**
     * [Method] Resumes firing events see suspendEvents
     */
    resumeEvents?: () => void,

    /**
     * [Method] Suspends firing of the named event s
     * @param eventName String... Multiple event names to suspend.
     */
    suspendEvent?: (...eventName: any[]) => void,

    /**
     * [Method] Suspends the firing of all events
     * @param queueSuspended Boolean Pass as true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events.
     */
    suspendEvents?: (queueSuspended?: boolean) => void,

    /**
     * [Method] Shorthand for removeListener
     * @param eventName String The type of event the handler was associated with.
     * @param fn Function The handler to remove. This must be a reference to the function passed into the Ext.util.Observable.addListener call.
     * @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.
     */
    Ext$un?: (eventName?: string, fn?: any, scope?: any) => void,

    /**
     * [Config Option] (Boolean)
     */
    autoScroll?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    stripeRows?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    animate?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    blockRefresh?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    deferInitialRefresh?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    loadMask?: boolean,

    /**
     * [Config Option] (String)
     */
    loadingCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    rootVisible?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    stripeRows?: boolean,

    /**
     * [Property] (Boolean)
     */
    isTreeView?: boolean,

    /**
     * [Method] Called by the layout system after the Component has been laid out
     */
    afterComponentLayout?: () => void,

    /**
     * [Method] Collapses a record that is loaded in the view
     * @param record Ext.data.Model The record to collapse
     * @param deep Boolean True to collapse nodes all the way up the tree hierarchy.
     * @param callback Function The function to run after the collapse is completed
     * @param scope Object The scope of the callback function.
     */
    collapse?: (
      record?: Ext$Ext$data.selection$IModel,
      deep?: boolean,
      Ext$callback?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Expands a record that is loaded in the view
     * @param record Ext.data.Model The record to expand
     * @param deep Boolean True to expand nodes all the way down the tree hierarchy.
     * @param callback Function The function to run after the expand is completed
     * @param scope Object The scope of the callback function.
     */
    expand?: (
      record?: Ext$Ext$data.selection$IModel,
      deep?: boolean,
      Ext$callback?: any,
      scope?: any
    ) => void,

    /**
     * [Method] Gets the listeners to bind to a new store
     * @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance.
     */
    getStoreListeners?: () => any,

    /**
     * [Method] Gets the base TreeStore from the bound TreePanel
     */
    getTreeStore?: () => void,

    /**
     * [Method] private
     */
    initComponent?: () => void,

    /**
     * [Method] Template method it is called when a new store is bound to the current instance
     */
    onBindStore?: () => void,

    /**
     * [Method] Template method it is called when an existing store is unbound from the current instance
     */
    onUnbindStore?: () => void,

    /**
     * [Method] Toggles a record between expanded and collapsed
     * @param record Ext.data.Model
     * @param deep Boolean True to collapse nodes all the way up the tree hierarchy.
     * @param callback Function The function to run after the expand/collapse is completed
     * @param scope Object The scope of the callback function.
     */
    toggle?: (
      record?: Ext$Ext$data.selection$IModel,
      deep?: boolean,
      Ext$callback?: any,
      scope?: any
    ) => void,

    /**
     * [Config Option] (Number)
     */
    mouseOverOutBuffer?: number,

    /**
     * [Method] Un highlights the currently highlighted item if any
     */
    clearHighlight?: () => void,

    /**
     * [Method] Focuses a node in the view
     * @param rec Ext.data.Model The record associated to the node that is to be focused.
     */
    focusNode?: (rec?: Ext$Ext$data.selection$IModel) => void,

    /**
     * [Method] Highlights a given item in the View
     * @param item HTMLElement The item to highlight
     */
    highlightItem?: (item?: HTMLElement) => void,

    /**
     * [Method] private
     */
    initComponent?: () => void,

    /**
     * [Method] Refreshes the view by reloading the data from the store and re rendering the template
     */
    refresh?: () => void
  } & Ext$Ext$IBase &
    undefined.util$IObservable;

  declare export type Ext$IBoundList = {
    /**
     * [Method] Called before any calculation cycles to prepare for layout
     * @param ownerContext Object
     */
    beginLayout?: (ownerContext?: any) => void,

    /**
     * [Method] Called before any calculation cycles to reset DOM values and prepare for calculation
     * @param ownerContext Object
     */
    beginLayoutCycle?: (ownerContext?: any) => void,

    /**
     * [Method] This method is called after all layouts are complete and their calculations flushed to the DOM
     * @param ownerContext Object
     */
    finishedLayout?: (ownerContext?: any) => void,

    /**
     * [Method] Returns the set of items to layout empty by default
     */
    getLayoutItems?: () => void,

    /**
     * [Method] Validates item is in the proper place in the dom
     */
    isValidParent?: () => void,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (String/Object)
     */
    componentLayout?: any,

    /**
     * [Config Option] (Boolean)
     */
    deferInitialRefresh?: boolean,

    /**
     * [Config Option] (String)
     */
    displayField?: string,

    /**
     * [Config Option] (String)
     */
    itemCls?: string,

    /**
     * [Config Option] (Number)
     */
    pageSize?: number,

    /**
     * [Config Option] (Ext.XTemplate/String/String[])
     */
    renderTpl?: any,

    /**
     * [Config Option] (String/Boolean)
     */
    shadow?: any,

    /**
     * [Config Option] (String/Ext.XTemplate)
     */
    tpl?: any,

    /**
     * [Config Option] (Boolean)
     */
    trackOver?: boolean,

    /**
     * [Property] (Ext.toolbar.Paging)
     */
    pagingToolbar?: Ext$Ext$toolbar.toolbar$IPaging,

    /**
     * [Method] Changes the data store bound to this view and refreshes it
     * @param store Object
     * @param initial Object
     */
    bindStore?: (store?: any, initial?: any) => void,

    /**
     * [Method] Retrieves the first direct child of this container which matches the passed selector or component
     * @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned.
     * @returns Object Ext.Component The matching child Ext.Component (or null if no match was found).
     */
    child?: (selector?: any) => any,

    /**
     * [Method] Retrieves the first descendant of this container which matches the passed selector
     * @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned.
     * @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found).
     */
    down?: (selector?: any) => any,

    /**
     * [Method] A method that returns the inner template for displaying items in the list
     * @param displayField String The displayField for the BoundList.
     * @returns String The inner template
     */
    getInnerTpl?: (displayField?: string) => string,

    /**
     * [Method] Allows addition of behavior to the destroy operation
     */
    onDestroy?: () => void,

    /**
     * [Method] Retrieves all descendant components which match the passed selector
     * @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned.
     * @returns Ext.Component[] Components which matched the selector
     */
    Ext$query?: (selector?: string) => Ext$flash$IComponent[],

    /**
     * [Method] Retrieves all descendant components which match the passed function
     * @param fn Function The matcher function. It will be called with a single argument, the component being tested.
     * @param scope Object The scope in which to run the function. If not specified, it will default to the active component.
     * @returns Ext.Component[] Components matched by the passed function
     */
    queryBy?: (fn?: any, scope?: any) => Ext$flash$IComponent[],

    /**
     * [Method] Finds a component at any level under this container matching the id itemId
     * @param id String The id to find
     * @returns Ext.Component The matching id, null if not found
     */
    queryById?: (Ext$id?: string) => Ext$flash$IComponent,

    /**
     * [Method] Refreshes the view by reloading the data from the store and re rendering the template
     */
    refresh?: () => void,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (String/Object)
     */
    componentLayout?: any,

    /**
     * [Config Option] (Boolean)
     */
    deferInitialRefresh?: boolean,

    /**
     * [Config Option] (String)
     */
    displayField?: string,

    /**
     * [Config Option] (String)
     */
    itemCls?: string,

    /**
     * [Config Option] (Number)
     */
    pageSize?: number,

    /**
     * [Config Option] (Ext.XTemplate/String/String[])
     */
    renderTpl?: any,

    /**
     * [Config Option] (String/Boolean)
     */
    shadow?: any,

    /**
     * [Config Option] (String/Ext.XTemplate)
     */
    tpl?: any,

    /**
     * [Config Option] (Boolean)
     */
    trackOver?: boolean,

    /**
     * [Property] (Ext.toolbar.Paging)
     */
    pagingToolbar?: Ext$Ext$toolbar.toolbar$IPaging,

    /**
     * [Method] Changes the data store bound to this view and refreshes it
     * @param store Object
     * @param initial Object
     */
    bindStore?: (store?: any, initial?: any) => void,

    /**
     * [Method] Retrieves the first direct child of this container which matches the passed selector or component
     * @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned.
     * @returns Object Ext.Component The matching child Ext.Component (or null if no match was found).
     */
    child?: (selector?: any) => any,

    /**
     * [Method] Retrieves the first descendant of this container which matches the passed selector
     * @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned.
     * @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found).
     */
    down?: (selector?: any) => any,

    /**
     * [Method] A method that returns the inner template for displaying items in the list
     * @param displayField String The displayField for the BoundList.
     * @returns String The inner template
     */
    getInnerTpl?: (displayField?: string) => string,

    /**
     * [Method] Allows addition of behavior to the destroy operation
     */
    onDestroy?: () => void,

    /**
     * [Method] Retrieves all descendant components which match the passed selector
     * @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned.
     * @returns Ext.Component[] Components which matched the selector
     */
    Ext$query?: (selector?: string) => Ext$flash$IComponent[],

    /**
     * [Method] Retrieves all descendant components which match the passed function
     * @param fn Function The matcher function. It will be called with a single argument, the component being tested.
     * @param scope Object The scope in which to run the function. If not specified, it will default to the active component.
     * @returns Ext.Component[] Components matched by the passed function
     */
    queryBy?: (fn?: any, scope?: any) => Ext$flash$IComponent[],

    /**
     * [Method] Finds a component at any level under this container matching the id itemId
     * @param id String The id to find
     * @returns Ext.Component The matching id, null if not found
     */
    queryById?: (Ext$id?: string) => Ext$flash$IComponent,

    /**
     * [Method] Refreshes the view by reloading the data from the store and re rendering the template
     */
    refresh?: () => void
  } & undefined.container$IAuto;

  declare export type Ext$IDataView = {
    /**
     * [Config Option] (Number)
     */
    mouseOverOutBuffer?: number,

    /**
     * [Method] Un highlights the currently highlighted item if any
     */
    clearHighlight?: () => void,

    /**
     * [Method] Focuses a node in the view
     * @param rec Ext.data.Model The record associated to the node that is to be focused.
     */
    focusNode?: (rec?: Ext$Ext$data.selection$IModel) => void,

    /**
     * [Method] Highlights a given item in the View
     * @param item HTMLElement The item to highlight
     */
    highlightItem?: (item?: HTMLElement) => void,

    /**
     * [Method] private
     */
    initComponent?: () => void,

    /**
     * [Method] Refreshes the view by reloading the data from the store and re rendering the template
     */
    refresh?: () => void
  } & undefined.view$IAbstractView;

  declare export type window$IWindow = {
    /**
     * [Config Option] (String/Ext.Element)
     */
    animateTarget?: any,

    /**
     * [Config Option] (Boolean)
     */
    autoRender?: boolean,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    closable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    collapsed?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    collapsible?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    constrain?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    constrainHeader?: boolean,

    /**
     * [Config Option] (String/Number/Ext.Component)
     */
    defaultFocus?: any,

    /**
     * [Config Option] (Boolean)
     */
    draggable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    expandOnShow?: boolean,

    /**
     * [Config Option] (Boolean/Function)
     */
    ghost?: any,

    /**
     * [Config Option] (Boolean)
     */
    hidden?: boolean,

    /**
     * [Config Option] (String)
     */
    hideMode?: string,

    /**
     * [Config Option] (Boolean)
     */
    hideShadowOnDeactivate?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    maximizable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    maximized?: boolean,

    /**
     * [Config Option] (Number)
     */
    minHeight?: number,

    /**
     * [Config Option] (Number)
     */
    minWidth?: number,

    /**
     * [Config Option] (Boolean)
     */
    minimizable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    modal?: boolean,

    /**
     * [Config Option] (Function)
     */
    onEsc?: any,

    /**
     * [Config Option] (Boolean)
     */
    overlapHeader?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    plain?: boolean,

    /**
     * [Config Option] (Boolean/Object)
     */
    resizable?: any,

    /**
     * [Config Option] (Number)
     */
    x?: number,

    /**
     * [Config Option] (Number)
     */
    y?: number,

    /**
     * [Property] (Ext.util.ComponentDragger)
     */
    Ext$dd?: Ext$Ext$util.util$IComponentDragger,

    /**
     * [Property] (Boolean)
     */
    isWindow?: boolean,

    /**
     * [Method] Invoked after the Panel is Collapsed
     */
    afterCollapse?: () => void,

    /**
     * [Method] Invoked after the Panel is Expanded
     */
    afterExpand?: () => void,

    /**
     * [Method] Applies the state to the object
     * @param state Object
     */
    applyState?: (Ext$state?: any) => void,

    /**
     * [Method] Gets the configured default focus item
     */
    getDefaultFocus?: () => void,

    /**
     * [Method] Fits the window within its current container and automatically replaces the maximize tool button with the restore
     * @param animate Boolean true to animate this Window to full size.
     * @returns Ext.window.Window this
     */
    maximize?: (animate?: boolean) => Ext$Ext$window.window$IWindow,

    /**
     * [Method] Placeholder method for minimizing the window
     * @returns Ext.window.Window this
     */
    minimize?: () => Ext$Ext$window.window$IWindow,

    /**
     * [Method] Allows addition of behavior to the show operation
     */
    onShow?: () => void,

    /**
     * [Method] Restores a maximized window back to its original size and position prior to being maximized and also replaces the re
     * @param animate Object
     * @returns Ext.window.Window this
     */
    restore?: (animate?: any) => Ext$Ext$window.window$IWindow,

    /**
     * [Method] A shortcut method for toggling between maximize and restore based on the current maximized state of the window
     * @returns Ext.window.Window this
     */
    toggleMaximize?: () => Ext$Ext$window.window$IWindow,

    /**
     * [Config Option] (String/Ext.Element)
     */
    animateTarget?: any,

    /**
     * [Config Option] (Boolean)
     */
    autoRender?: boolean,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    closable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    collapsed?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    collapsible?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    constrain?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    constrainHeader?: boolean,

    /**
     * [Config Option] (String/Number/Ext.Component)
     */
    defaultFocus?: any,

    /**
     * [Config Option] (Boolean)
     */
    draggable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    expandOnShow?: boolean,

    /**
     * [Config Option] (Boolean/Function)
     */
    ghost?: any,

    /**
     * [Config Option] (Boolean)
     */
    hidden?: boolean,

    /**
     * [Config Option] (String)
     */
    hideMode?: string,

    /**
     * [Config Option] (Boolean)
     */
    hideShadowOnDeactivate?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    maximizable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    maximized?: boolean,

    /**
     * [Config Option] (Number)
     */
    minHeight?: number,

    /**
     * [Config Option] (Number)
     */
    minWidth?: number,

    /**
     * [Config Option] (Boolean)
     */
    minimizable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    modal?: boolean,

    /**
     * [Config Option] (Function)
     */
    onEsc?: any,

    /**
     * [Config Option] (Boolean)
     */
    overlapHeader?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    plain?: boolean,

    /**
     * [Config Option] (Boolean/Object)
     */
    resizable?: any,

    /**
     * [Config Option] (Number)
     */
    x?: number,

    /**
     * [Config Option] (Number)
     */
    y?: number,

    /**
     * [Property] (Ext.util.ComponentDragger)
     */
    Ext$dd?: Ext$Ext$util.util$IComponentDragger,

    /**
     * [Property] (Boolean)
     */
    isWindow?: boolean,

    /**
     * [Method] Invoked after the Panel is Collapsed
     */
    afterCollapse?: () => void,

    /**
     * [Method] Invoked after the Panel is Expanded
     */
    afterExpand?: () => void,

    /**
     * [Method] Applies the state to the object
     * @param state Object
     */
    applyState?: (Ext$state?: any) => void,

    /**
     * [Method] Gets the configured default focus item
     */
    getDefaultFocus?: () => void,

    /**
     * [Method] Fits the window within its current container and automatically replaces the maximize tool button with the restore
     * @param animate Boolean true to animate this Window to full size.
     * @returns Ext.window.Window this
     */
    maximize?: (animate?: boolean) => Ext$Ext$window.window$IWindow,

    /**
     * [Method] Placeholder method for minimizing the window
     * @returns Ext.window.Window this
     */
    minimize?: () => Ext$Ext$window.window$IWindow,

    /**
     * [Method] Allows addition of behavior to the show operation
     */
    onShow?: () => void,

    /**
     * [Method] Restores a maximized window back to its original size and position prior to being maximized and also replaces the re
     * @param animate Object
     * @returns Ext.window.Window this
     */
    restore?: (animate?: any) => Ext$Ext$window.window$IWindow,

    /**
     * [Method] A shortcut method for toggling between maximize and restore based on the current maximized state of the window
     * @returns Ext.window.Window this
     */
    toggleMaximize?: () => Ext$Ext$window.window$IWindow
  } & undefined.Ext$IPanel;

  declare export type Ext$IWindow = {
    /**
     * [Config Option] (String/Ext.Element)
     */
    animateTarget?: any,

    /**
     * [Config Option] (Boolean)
     */
    autoRender?: boolean,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    closable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    collapsed?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    collapsible?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    constrain?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    constrainHeader?: boolean,

    /**
     * [Config Option] (String/Number/Ext.Component)
     */
    defaultFocus?: any,

    /**
     * [Config Option] (Boolean)
     */
    draggable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    expandOnShow?: boolean,

    /**
     * [Config Option] (Boolean/Function)
     */
    ghost?: any,

    /**
     * [Config Option] (Boolean)
     */
    hidden?: boolean,

    /**
     * [Config Option] (String)
     */
    hideMode?: string,

    /**
     * [Config Option] (Boolean)
     */
    hideShadowOnDeactivate?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    maximizable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    maximized?: boolean,

    /**
     * [Config Option] (Number)
     */
    minHeight?: number,

    /**
     * [Config Option] (Number)
     */
    minWidth?: number,

    /**
     * [Config Option] (Boolean)
     */
    minimizable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    modal?: boolean,

    /**
     * [Config Option] (Function)
     */
    onEsc?: any,

    /**
     * [Config Option] (Boolean)
     */
    overlapHeader?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    plain?: boolean,

    /**
     * [Config Option] (Boolean/Object)
     */
    resizable?: any,

    /**
     * [Config Option] (Number)
     */
    x?: number,

    /**
     * [Config Option] (Number)
     */
    y?: number,

    /**
     * [Property] (Ext.util.ComponentDragger)
     */
    Ext$dd?: Ext$Ext$util.util$IComponentDragger,

    /**
     * [Property] (Boolean)
     */
    isWindow?: boolean,

    /**
     * [Method] Invoked after the Panel is Collapsed
     */
    afterCollapse?: () => void,

    /**
     * [Method] Invoked after the Panel is Expanded
     */
    afterExpand?: () => void,

    /**
     * [Method] Applies the state to the object
     * @param state Object
     */
    applyState?: (Ext$state?: any) => void,

    /**
     * [Method] Gets the configured default focus item
     */
    getDefaultFocus?: () => void,

    /**
     * [Method] Fits the window within its current container and automatically replaces the maximize tool button with the restore
     * @param animate Boolean true to animate this Window to full size.
     * @returns Ext.window.Window this
     */
    maximize?: (animate?: boolean) => Ext$Ext$window.Ext$IWindow,

    /**
     * [Method] Placeholder method for minimizing the window
     * @returns Ext.window.Window this
     */
    minimize?: () => Ext$Ext$window.Ext$IWindow,

    /**
     * [Method] Allows addition of behavior to the show operation
     */
    onShow?: () => void,

    /**
     * [Method] Restores a maximized window back to its original size and position prior to being maximized and also replaces the re
     * @param animate Object
     * @returns Ext.window.Window this
     */
    restore?: (animate?: any) => Ext$Ext$window.Ext$IWindow,

    /**
     * [Method] A shortcut method for toggling between maximize and restore based on the current maximized state of the window
     * @returns Ext.window.Window this
     */
    toggleMaximize?: () => Ext$Ext$window.Ext$IWindow,

    /**
     * [Config Option] (String/Ext.Element)
     */
    animateTarget?: any,

    /**
     * [Config Option] (Boolean)
     */
    autoRender?: boolean,

    /**
     * [Config Option] (String)
     */
    baseCls?: string,

    /**
     * [Config Option] (Boolean)
     */
    closable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    collapsed?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    collapsible?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    constrain?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    constrainHeader?: boolean,

    /**
     * [Config Option] (String/Number/Ext.Component)
     */
    defaultFocus?: any,

    /**
     * [Config Option] (Boolean)
     */
    draggable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    expandOnShow?: boolean,

    /**
     * [Config Option] (Boolean/Function)
     */
    ghost?: any,

    /**
     * [Config Option] (Boolean)
     */
    hidden?: boolean,

    /**
     * [Config Option] (String)
     */
    hideMode?: string,

    /**
     * [Config Option] (Boolean)
     */
    hideShadowOnDeactivate?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    maximizable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    maximized?: boolean,

    /**
     * [Config Option] (Number)
     */
    minHeight?: number,

    /**
     * [Config Option] (Number)
     */
    minWidth?: number,

    /**
     * [Config Option] (Boolean)
     */
    minimizable?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    modal?: boolean,

    /**
     * [Config Option] (Function)
     */
    onEsc?: any,

    /**
     * [Config Option] (Boolean)
     */
    overlapHeader?: boolean,

    /**
     * [Config Option] (Boolean)
     */
    plain?: boolean,

    /**
     * [Config Option] (Boolean/Object)
     */
    resizable?: any,

    /**
     * [Config Option] (Number)
     */
    x?: number,

    /**
     * [Config Option] (Number)
     */
    y?: number,

    /**
     * [Property] (Ext.util.ComponentDragger)
     */
    Ext$dd?: Ext$Ext$util.util$IComponentDragger,

    /**
     * [Property] (Boolean)
     */
    isWindow?: boolean,

    /**
     * [Method] Invoked after the Panel is Collapsed
     */
    afterCollapse?: () => void,

    /**
     * [Method] Invoked after the Panel is Expanded
     */
    afterExpand?: () => void,

    /**
     * [Method] Applies the state to the object
     * @param state Object
     */
    applyState?: (Ext$state?: any) => void,

    /**
     * [Method] Gets the configured default focus item
     */
    getDefaultFocus?: () => void,

    /**
     * [Method] Fits the window within its current container and automatically replaces the maximize tool button with the restore
     * @param animate Boolean true to animate this Window to full size.
     * @returns Ext.window.Window this
     */
    maximize?: (animate?: boolean) => Ext$Ext$window.Ext$IWindow,

    /**
     * [Method] Placeholder method for minimizing the window
     * @returns Ext.window.Window this
     */
    minimize?: () => Ext$Ext$window.Ext$IWindow,

    /**
     * [Method] Allows addition of behavior to the show operation
     */
    onShow?: () => void,

    /**
     * [Method] Restores a maximized window back to its original size and position prior to being maximized and also replaces the re
     * @param animate Object
     * @returns Ext.window.Window this
     */
    restore?: (animate?: any) => Ext$Ext$window.Ext$IWindow,

    /**
     * [Method] A shortcut method for toggling between maximize and restore based on the current maximized state of the window
     * @returns Ext.window.Window this
     */
    toggleMaximize?: () => Ext$Ext$window.Ext$IWindow
  } & undefined.Ext$IPanel;

  declare export type Ext$IWindowManager = {} & Ext$Ext$IZIndexManager;

  declare export class Ext$WindowManager {
    /**
     * [Property] (Ext.Class)
     */
    static self: Ext$Ext$IClass;

    /**
     * [Method] Brings the specified Component to the front of any other active Components in this ZIndexManager
     * @param comp String/Object The id of the Component or a Ext.Component instance
     * @returns Boolean True if the dialog was brought to the front, else false if it was already in front
     */
    static bringToFront(comp?: any): boolean;

    /**
     * [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments)
     * @returns Object Returns the result of calling the overridden method
     */
    static callOverridden(args?: any): any;

    /**
     * [Method] Call the parent method of the current method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments)
     * @returns Object Returns the result of calling the parent method
     */
    static callParent(args?: any): any;

    /**
     * [Method] This method is used by an override to call the superclass method but bypass any overridden method
     * @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments)
     * @returns Object Returns the result of calling the superclass method
     */
    static callSuper(args?: any): any;

    /**
     * [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa
     * @param fn Function The function to execute for each item
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration.
     */
    static each(fn?: any, scope?: any): void;

    /**
     * [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa
     * @param fn Function The function to execute for each item
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration.
     */
    static eachBottomUp(fn?: any, scope?: any): void;

    /**
     * [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa
     * @param fn Function The function to execute for each item
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration.
     */
    static eachTopDown(fn?: any, scope?: any): void;

    /**
     * [Method] Gets a registered Component by id
     * @param id String/Object The id of the Component or a Ext.Component instance
     * @returns Ext.Component
     */
    static get(Ext$id?: any): Ext$flash$IComponent;

    /**
     * [Method] Gets the currently active Component in this ZIndexManager
     * @returns Ext.Component The active Component
     */
    static getActive(): Ext$flash$IComponent;

    /**
     * [Method] Returns zero or more Components in this ZIndexManager using the custom search function passed to this method
     * @param fn Function The search function
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the Component being tested. That gets passed to the function if not specified.
     * @returns Array An array of zero or more matching windows
     */
    static getBy(fn?: any, scope?: any): any[];

    /**
     * [Method] Returns the initial configuration passed to constructor when instantiating this class
     * @param name String Name of the config option to return.
     * @returns Object/Mixed The full config object or a single config value when name parameter specified.
     */
    static getInitialConfig(Ext$name?: string): any;

    /**
     * [Method] Hides all Components managed by this ZIndexManager
     */
    static hideAll(): void;

    /**
     * [Method] Initialize configuration for this class
     * @param config Object
     * @returns Ext.Base this
     */
    static initConfig(config?: any): Ext$Ext$IBase;

    /**
     * [Method] Registers a floating Ext Component with this ZIndexManager
     * @param comp Ext.Component The Component to register.
     */
    static register(comp?: Ext$flash$IComponent): void;

    /**
     * [Method] Sends the specified Component to the back of other active Components in this ZIndexManager
     * @param comp String/Object The id of the Component or a Ext.Component instance
     * @returns Ext.Component The Component
     */
    static sendToBack(comp?: any): Ext$flash$IComponent;

    /**
     * [Method] Get the reference to the class from which this object was instantiated
     * @returns Ext.Class
     */
    static statics(): Ext$Ext$IClass;

    /**
     * [Method] Unregisters a Ext Component from this ZIndexManager
     * @param comp Ext.Component The Component to unregister.
     */
    static unregister(comp?: Ext$flash$IComponent): void;
  }

  declare export type Ext$IXTemplate = {
    /**
     * [Config Option] (String/Array)
     */
    definitions?: any,

    /**
     * [Method] Appends the result of this template to the provided output array
     * @param values Object
     * @param out Object
     * @param parent Object
     * @returns Array The given out array.
     */
    applyOut?: (values?: any, out?: any, parent?: any) => any[]
  } & Ext$Ext$ITemplate;

  declare export class Ext$XTemplate {
    /**
     * [Method] Add methods  properties to the prototype of this class
     * @param members Object
     */
    static addMembers(members?: any): void;

    /**
     * [Method] Add  override static properties of this class
     * @param members Object
     * @returns Ext.Base this
     */
    static addStatics(members?: any): Ext$Ext$IBase;

    /**
     * [Method] Create a new instance of this Class
     * @returns Object the created instance.
     */
    static create(): any;

    /**
     * [Method] Create aliases for existing prototype methods
     * @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter
     * @param origin String/Object The original method name
     */
    static createAlias(alias?: any, origin?: any): void;

    /**
     * [Method] Creates a template from the passed element s value display none textarea preferred or innerHTML
     * @param el String/HTMLElement A DOM element or its id
     * @param config Object Config object
     * @returns Ext.Template The created template
     */
    static from(el?: any, config?: any): Ext$Ext$ITemplate;

    /**
     * [Method] Get the current class name in string format
     * @returns String className
     */
    static getName(): string;

    /**
     * [Method] Gets an XTemplate from an object an instance of an Ext define d class
     * @param instance Object The object from which to get the XTemplate (must be an instance of an Ext.define'd class).
     * @param name String The name of the property by which to get the XTemplate.
     * @returns Ext.XTemplate The XTemplate instance or null if not found.
     */
    static getTpl(instance?: any, Ext$name?: string): Ext$Ext$IXTemplate;

    /**
     * [Method] Adds members to class
     */
    static implement(): void;

    /**
     * [Method] Override members of this class
     * @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties.
     * @returns Ext.Base this class
     */
    static override(members?: any): Ext$Ext$IBase;
  }

  declare export type Ext$IXTemplateCompiler = {
    /**
     * [Method] This method is called to process lt tpl case action gt
     * @param action Object
     */
    doCase?: (action?: any) => void,

    /**
     * [Method] This method is called to process lt tpl default gt
     */
    doDefault?: () => void,

    /**
     * [Method] This method is called to process lt tpl else gt
     */
    doElse?: () => void,

    /**
     * [Method] This method is called to process lt tpl elseif action gt
     * @param action Object
     * @param actions Object
     */
    doElseIf?: (action?: any, actions?: any) => void,

    /**
     * [Method] This method is called to process lt tpl gt
     * @param type Object
     * @param actions Object
     */
    doEnd?: (Ext$type?: any, actions?: any) => void,

    /**
     * [Method] This method is called to process text
     * @param text Object
     */
    doEval?: (text?: any) => void,

    /**
     * [Method] This method is called to process lt tpl exec action gt
     * @param action Object
     * @param actions Object
     */
    doExec?: (action?: any, actions?: any) => void,

    /**
     * [Method] This method is called to process expressions like  expr
     * @param expr Object
     */
    doExpr?: (expr?: any) => void,

    /**
     * [Method] This method is called to process lt tpl for action gt
     * @param action Object
     * @param actions Object
     */
    doFor?: (action?: any, actions?: any) => void,

    /**
     * [Method] This method is called to process lt tpl foreach action gt
     * @param action Object
     * @param actions Object
     */
    doForEach?: (action?: any, actions?: any) => void,

    /**
     * [Method] This method is called to process lt tpl if action gt
     * @param action Object
     * @param actions Object
     */
    doIf?: (action?: any, actions?: any) => void,

    /**
     * [Method] This method is called to process lt tpl switch action gt
     * @param action Object
     */
    doSwitch?: (action?: any) => void,

    /**
     * [Method] This method is called to process simple tags like tag
     * @param tag Object
     */
    doTag?: (tag?: any) => void,

    /**
     * [Method] XTemplateParser callouts
     * @param text Object
     */
    doText?: (text?: any) => void
  } & Ext$Ext$IXTemplateParser;

  declare export type Ext$IXTemplateParser = {
    /**
     * [Property] (Number)
     */
    level?: number,

    /**
     * [Method] This method is called to process lt tpl case action gt
     * @param action String
     * @param actions Object Other actions keyed by the attribute name (such as 'exec').
     */
    doCase?: (action?: string, actions?: any) => void,

    /**
     * [Method] This method is called to process lt tpl default gt
     */
    doDefault?: () => void,

    /**
     * [Method] This method is called to process lt tpl else gt
     */
    doElse?: () => void,

    /**
     * [Method] This method is called to process lt tpl elseif action gt
     * @param action String
     * @param actions Object Other actions keyed by the attribute name (such as 'exec').
     */
    doElseIf?: (action?: string, actions?: any) => void,

    /**
     * [Method] This method is called to process lt tpl gt
     * @param type String The type of action that is being ended.
     * @param actions Object The other actions keyed by the attribute name (such as 'exec').
     */
    doEnd?: (Ext$type?: string, actions?: any) => void,

    /**
     * [Method] This method is called to process text
     * @param text String
     */
    doEval?: (text?: string) => void,

    /**
     * [Method] This method is called to process lt tpl exec action gt
     * @param action String
     * @param actions Object Other actions keyed by the attribute name.
     */
    doExec?: (action?: string, actions?: any) => void,

    /**
     * [Method] This method is called to process expressions like  expr
     * @param expr String The body of the expression (inside "{[" and "]}").
     */
    doExpr?: (expr?: string) => void,

    /**
     * [Method] This method is called to process lt tpl for action gt
     * @param action String
     * @param actions Object Other actions keyed by the attribute name (such as 'exec').
     */
    doFor?: (action?: string, actions?: any) => void,

    /**
     * [Method] This method is called to process lt tpl foreach action gt
     * @param action String
     * @param actions Object Other actions keyed by the attribute name (such as 'exec').
     */
    doForEach?: (action?: string, actions?: any) => void,

    /**
     * [Method] This method is called to process lt tpl if action gt
     * @param action String
     * @param actions Object Other actions keyed by the attribute name (such as 'exec').
     */
    doIf?: (action?: string, actions?: any) => void,

    /**
     * [Method] This method is called to process lt tpl switch action gt
     * @param action String
     * @param actions Object Other actions keyed by the attribute name (such as 'exec').
     */
    doSwitch?: (action?: string, actions?: any) => void,

    /**
     * [Method] This method is called to process simple tags like tag
     */
    doTag?: () => void,

    /**
     * [Method] This method is called to process a piece of raw text from the tpl
     * @param text String
     */
    doText?: (text?: string) => void,

    /**
     * [Method] This method is called to process an empty lt tpl gt
     */
    doTpl?: () => void
  } & Ext$Ext$IBase;

  declare export type Ext$IZIndexManager = {
    /**
     * [Method] Brings the specified Component to the front of any other active Components in this ZIndexManager
     * @param comp String/Object The id of the Component or a Ext.Component instance
     * @returns Boolean True if the dialog was brought to the front, else false if it was already in front
     */
    bringToFront?: (comp?: any) => boolean,

    /**
     * [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa
     * @param fn Function The function to execute for each item
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration.
     */
    Ext$each?: (fn?: any, scope?: any) => void,

    /**
     * [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa
     * @param fn Function The function to execute for each item
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration.
     */
    eachBottomUp?: (fn?: any, scope?: any) => void,

    /**
     * [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa
     * @param fn Function The function to execute for each item
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration.
     */
    eachTopDown?: (fn?: any, scope?: any) => void,

    /**
     * [Method] Gets a registered Component by id
     * @param id String/Object The id of the Component or a Ext.Component instance
     * @returns Ext.Component
     */
    Ext$get?: (Ext$id?: any) => Ext$flash$IComponent,

    /**
     * [Method] Gets the currently active Component in this ZIndexManager
     * @returns Ext.Component The active Component
     */
    getActive?: () => Ext$flash$IComponent,

    /**
     * [Method] Returns zero or more Components in this ZIndexManager using the custom search function passed to this method
     * @param fn Function The search function
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the Component being tested. That gets passed to the function if not specified.
     * @returns Array An array of zero or more matching windows
     */
    getBy?: (fn?: any, scope?: any) => any[],

    /**
     * [Method] Hides all Components managed by this ZIndexManager
     */
    hideAll?: () => void,

    /**
     * [Method] Registers a floating Ext Component with this ZIndexManager
     * @param comp Ext.Component The Component to register.
     */
    register?: (comp?: Ext$flash$IComponent) => void,

    /**
     * [Method] Sends the specified Component to the back of other active Components in this ZIndexManager
     * @param comp String/Object The id of the Component or a Ext.Component instance
     * @returns Ext.Component The Component
     */
    sendToBack?: (comp?: any) => Ext$flash$IComponent,

    /**
     * [Method] Unregisters a Ext Component from this ZIndexManager
     * @param comp Ext.Component The Component to unregister.
     */
    unregister?: (comp?: Ext$flash$IComponent) => void
  } & Ext$Ext$IBase;

  declare export type Ext$IWindowGroup = {
    /**
     * [Method] Brings the specified Component to the front of any other active Components in this ZIndexManager
     * @param comp String/Object The id of the Component or a Ext.Component instance
     * @returns Boolean True if the dialog was brought to the front, else false if it was already in front
     */
    bringToFront?: (comp?: any) => boolean,

    /**
     * [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa
     * @param fn Function The function to execute for each item
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration.
     */
    Ext$each?: (fn?: any, scope?: any) => void,

    /**
     * [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa
     * @param fn Function The function to execute for each item
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration.
     */
    eachBottomUp?: (fn?: any, scope?: any) => void,

    /**
     * [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa
     * @param fn Function The function to execute for each item
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration.
     */
    eachTopDown?: (fn?: any, scope?: any) => void,

    /**
     * [Method] Gets a registered Component by id
     * @param id String/Object The id of the Component or a Ext.Component instance
     * @returns Ext.Component
     */
    Ext$get?: (Ext$id?: any) => Ext$flash$IComponent,

    /**
     * [Method] Gets the currently active Component in this ZIndexManager
     * @returns Ext.Component The active Component
     */
    getActive?: () => Ext$flash$IComponent,

    /**
     * [Method] Returns zero or more Components in this ZIndexManager using the custom search function passed to this method
     * @param fn Function The search function
     * @param scope Object The scope (this reference) in which the function is executed. Defaults to the Component being tested. That gets passed to the function if not specified.
     * @returns Array An array of zero or more matching windows
     */
    getBy?: (fn?: any, scope?: any) => any[],

    /**
     * [Method] Hides all Components managed by this ZIndexManager
     */
    hideAll?: () => void,

    /**
     * [Method] Registers a floating Ext Component with this ZIndexManager
     * @param comp Ext.Component The Component to register.
     */
    register?: (comp?: Ext$flash$IComponent) => void,

    /**
     * [Method] Sends the specified Component to the back of other active Components in this ZIndexManager
     * @param comp String/Object The id of the Component or a Ext.Component instance
     * @returns Ext.Component The Component
     */
    sendToBack?: (comp?: any) => Ext$flash$IComponent,

    /**
     * [Method] Unregisters a Ext Component from this ZIndexManager
     * @param comp Ext.Component The Component to unregister.
     */
    unregister?: (comp?: Ext$flash$IComponent) => void
  } & Ext$Ext$IBase;
}
