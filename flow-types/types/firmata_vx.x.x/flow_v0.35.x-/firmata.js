declare module 'firmata' {
        import typeof * as SerialPort from 'serialport';

	declare module.exports: typeof Board

	
/**
 * Most of these are generated by observing https://github.com/firmata/firmata.js/blob/v0.15.0/lib/firmata.js.
 * 
 * This is a starting point that appeared to work fine for months within a project of my company, but I give no
 * guarantee that it cannot be improved.
 */
declare class Board mixins NodeJS.EventEmitter {
constructor(serialPort: any, optionsOrCallback?: Board$Board$Options | ((error: any) => void), callback?: (error: any) => void): this;
MODES: Board$Board$PinModes;
STEPPER: Board$Board$StepperConstants;
I2C_MODES: Board$Board$I2cModes;
SERIAL_MODES: Board$Board$SerialModes;
SERIAL_PORT_IDs: Board$Board$SerialPortIds;
SERIAL_PIN_TYPES: Board$Board$SerialPinTypes;
HIGH: Board$Board$PIN_STATE;
LOW: Board$Board$PIN_STATE;
pins: Board$Board$Pins[];
ports: number[];
analogPins: number[];
version: Board$Board$Version;
firmware: Board$Board$Firmware;
settings: Board$Board$Settings;
transport: SerialPort;
reportVersion(callback: () => void): void;
queryFirmware(callback: () => void): void;
analogRead(pin: number, callback: (value: number) => void): void;
analogWrite(pin: number, value: number): void;
pwmWrite(pin: number, value: number): void;
servoConfig(pin: number, min: number, max: number): void;
servoWrite(pin: number, value: number): void;
pinMode(pin: number, mode: Board$Board$PIN_MODE): void;
digitalWrite(pin: number, val: Board$Board$PIN_STATE): void;
digitalRead(pin: number, callback: (val: Board$Board$PIN_STATE) => void): void;
queryCapabilities(callback: () => void): void;
queryAnalogMapping(callback: () => void): void;
queryPinState(pin: number, callback: () => void): void;
sendString(str: string): void;
sendI2CConfig(delay: number): void;
i2cConfig(options: number | {
delay: number
}): void;
sendI2CWriteRequest(slaveAddress: number, bytes: number[]): void;
i2cWrite(address: number, register: number, inBytes: number[]): void;
i2cWrite(address: number, data: number[]): void;
i2cWriteReg(address: number, register: number, byte: number): void;
sendI2CReadRequest(address: number, numBytes: number, callback: () => void): void;
i2cRead(
address: number,
register: number,
bytesToRead: number,
callback: (data: number[]) => void): void;
i2cRead(address: number, bytesToRead: number, callback: (data: number[]) => void): void;
i2cStop(options: number | {
bus: number,
address: number
}): void;
i2cReadOnce(
address: number,
register: number,
bytesToRead: number,
callback: (data: number[]) => void): void;
i2cReadOnce(address: number, bytesToRead: number, callback: (data: number[]) => void): void;
sendOneWireConfig(pin: number, enableParasiticPower: boolean): void;
sendOneWireSearch(pin: number, callback: () => void): void;
sendOneWireAlarmsSearch(pin: number, callback: () => void): void;
sendOneWireRead(
pin: number,
device: number,
numBytesToRead: number,
callback: () => void): void;
sendOneWireReset(pin: number): void;
sendOneWireWrite(pin: number, device: number, data: number | number[]): void;
sendOneWireDelay(pin: number, delay: number): void;
sendOneWireWriteAndRead(
pin: number,
device: number,
data: number | number[],
numBytesToRead: number,
callback: (error?: Error, data?: number) => void): void;
setSamplingInterval(interval: number): void;
getSamplingInterval(): number;
reportAnalogPin(pin: number, value: Board$Board$REPORTING): void;
reportDigitalPin(pin: number, value: Board$Board$REPORTING): void;
pingRead(opts: any, callback: () => void): void;
stepperConfig(
deviceNum: number,
type: number,
stepsPerRev: number,
dirOrMotor1Pin: number,
stepOrMotor2Pin: number,
motor3Pin?: number,
motor4Pin?: number): void;
stepperStep(
deviceNum: number,
direction: Board$Board$STEPPER_DIRECTION,
steps: number,
speed: number,
accel: number | ((bool?: boolean) => void),
decel?: number,
callback?: (bool?: boolean) => void): void;
serialConfig(
options: {
portId: Board$Board$SERIAL_PORT_ID,
baud: number,
rxPin?: number,
txPin?: number
}): void;
serialWrite(portId: Board$Board$SERIAL_PORT_ID, inBytes: number[]): void;
serialRead(
portId: Board$Board$SERIAL_PORT_ID,
maxBytesToRead: number,
callback: () => void): void;
serialStop(portId: Board$Board$SERIAL_PORT_ID): void;
serialClose(portId: Board$Board$SERIAL_PORT_ID): void;
serialFlush(portId: Board$Board$SERIAL_PORT_ID): void;
serialListen(portId: Board$Board$SERIAL_PORT_ID): void;
sysexResponse(commandByte: number, handler: (data: number[]) => void): void;
sysexCommand(message: number[]): void;
reset(): void;
static isAcceptablePort(port: Board$Board$Port): boolean;
static requestPort(callback: (error: any, port: Board$Board$Port) => any): void;
static encode(data: number[]): number[];
static decode(data: number[]): number[];
_sendOneWireSearch(type: any, event: any, pin: number, callback: () => void): void;
_sendOneWireRequest(
pin: number,
subcommand: any,
device: any,
numBytesToRead: any,
correlationId: any,
delay: number,
dataToWrite: any,
event: any,
callback: () => void): void
}
	declare interface Board$Options {
skipCapabilities?: boolean,
reportVersionTimeout?: number,
samplingInterval?: number,
serialport?: SerialPort.Board$Options,
pins?: Board$Pins[],
analogPins?: number[]
} 

declare interface Board$PinModes {
INPUT: Board$PIN_MODE,
OUTPUT: Board$PIN_MODE,
ANALOG: Board$PIN_MODE,
PWM: Board$PIN_MODE,
SERVO: Board$PIN_MODE,
SHIFT: Board$PIN_MODE,
I2C: Board$PIN_MODE,
ONEWIRE: Board$PIN_MODE,
STEPPER: Board$PIN_MODE,
SERIAL: Board$PIN_MODE,
PULLUP: Board$PIN_MODE,
IGNORE: Board$PIN_MODE,
PING_READ: Board$PIN_MODE,
UNKOWN: Board$PIN_MODE
} 

declare interface Board$StepperConstants {
TYPE: {
DRIVER: Board$STEPPER_TYPE,
TWO_WIRE: Board$STEPPER_TYPE,
FOUR_WIRE: Board$STEPPER_TYPE
},
RUNSTATE: {
STOP: Board$STEPPER_RUN_STATE,
ACCEL: Board$STEPPER_RUN_STATE,
DECEL: Board$STEPPER_RUN_STATE,
RUN: Board$STEPPER_RUN_STATE
},
DIRECTION: {
CCW: Board$STEPPER_DIRECTION,
CW: Board$STEPPER_DIRECTION
}
} 

declare interface Board$I2cModes {
WRITE: Board$I2C_MODE,
READ: Board$I2C_MODE,
CONTINUOUS_READ: Board$I2C_MODE,
STOP_READING: Board$I2C_MODE
} 

declare interface Board$SerialModes {
CONTINUOUS_READ: Board$SERIAL_MODE,
STOP_READING: Board$SERIAL_MODE
} 

declare interface Board$SerialPortIds {
HW_SERIAL0: Board$SERIAL_PORT_ID,
HW_SERIAL1: Board$SERIAL_PORT_ID,
HW_SERIAL2: Board$SERIAL_PORT_ID,
HW_SERIAL3: Board$SERIAL_PORT_ID,
SW_SERIAL0: Board$SERIAL_PORT_ID,
SW_SERIAL1: Board$SERIAL_PORT_ID,
SW_SERIAL2: Board$SERIAL_PORT_ID,
SW_SERIAL3: Board$SERIAL_PORT_ID,
DEFAULT: Board$SERIAL_PORT_ID
} 

declare interface Board$SerialPinTypes {
RES_RX0: Board$SERIAL_PIN_TYPE,
RES_TX0: Board$SERIAL_PIN_TYPE,
RES_RX1: Board$SERIAL_PIN_TYPE,
RES_TX1: Board$SERIAL_PIN_TYPE,
RES_RX2: Board$SERIAL_PIN_TYPE,
RES_TX2: Board$SERIAL_PIN_TYPE,
RES_RX3: Board$SERIAL_PIN_TYPE,
RES_TX3: Board$SERIAL_PIN_TYPE
} 

declare interface Board$Pins {
mode: Board$PIN_MODE,
value: Board$PIN_STATE | number,
supportedModes: Board$PIN_MODE[],
analogChannel: number,
report: Board$REPORTING,
state: Board$PIN_STATE | Board$PULLUP_STATE
} 

declare interface Board$Firmware {
name: string,
version: Board$Version
} 

declare interface Board$Settings {
reportVersionTimeout: number,
samplingInterval: number,
serialport: {
baudRate: number,
bufferSize: number
}
} 

declare interface Board$Port {
comName: string
} 

declare interface Board$Version {
major: number,
minor: number
} 

declare  class Board$PIN_MODE {
  constructor(...args: empty): mixed;
static +INPUT: Class<Board$PIN_MODE__INPUT> & Board$PIN_MODE__INPUT & 0;// 0
static +OUTPUT: Class<Board$PIN_MODE__OUTPUT> & Board$PIN_MODE__OUTPUT & 1;// 1
static +ANALOG: Class<Board$PIN_MODE__ANALOG> & Board$PIN_MODE__ANALOG & 2;// 2
static +PWM: Class<Board$PIN_MODE__PWM> & Board$PIN_MODE__PWM & 3;// 3
static +SERVO: Class<Board$PIN_MODE__SERVO> & Board$PIN_MODE__SERVO & 4;// 4
static +SHIFT: Class<Board$PIN_MODE__SHIFT> & Board$PIN_MODE__SHIFT & 5;// 5
static +I2C: Class<Board$PIN_MODE__I2C> & Board$PIN_MODE__I2C & 6;// 6
static +ONEWIRE: Class<Board$PIN_MODE__ONEWIRE> & Board$PIN_MODE__ONEWIRE & 7;// 7
static +STEPPER: Class<Board$PIN_MODE__STEPPER> & Board$PIN_MODE__STEPPER & 8;// 8
static +SERIAL: Class<Board$PIN_MODE__SERIAL> & Board$PIN_MODE__SERIAL & 10;// 10
static +PULLUP: Class<Board$PIN_MODE__PULLUP> & Board$PIN_MODE__PULLUP & 11;// 11
static +IGNORE: Class<Board$PIN_MODE__IGNORE> & Board$PIN_MODE__IGNORE & 127;// 127
static +PING_READ: Class<Board$PIN_MODE__PING_READ> & Board$PIN_MODE__PING_READ & 117;// 117
static +UNKNOWN: Class<Board$PIN_MODE__UNKNOWN> & Board$PIN_MODE__UNKNOWN & 16;// 16

}

declare class Board$PIN_MODE__INPUT mixins Board$PIN_MODE {}
declare class Board$PIN_MODE__OUTPUT mixins Board$PIN_MODE {}
declare class Board$PIN_MODE__ANALOG mixins Board$PIN_MODE {}
declare class Board$PIN_MODE__PWM mixins Board$PIN_MODE {}
declare class Board$PIN_MODE__SERVO mixins Board$PIN_MODE {}
declare class Board$PIN_MODE__SHIFT mixins Board$PIN_MODE {}
declare class Board$PIN_MODE__I2C mixins Board$PIN_MODE {}
declare class Board$PIN_MODE__ONEWIRE mixins Board$PIN_MODE {}
declare class Board$PIN_MODE__STEPPER mixins Board$PIN_MODE {}
declare class Board$PIN_MODE__SERIAL mixins Board$PIN_MODE {}
declare class Board$PIN_MODE__PULLUP mixins Board$PIN_MODE {}
declare class Board$PIN_MODE__IGNORE mixins Board$PIN_MODE {}
declare class Board$PIN_MODE__PING_READ mixins Board$PIN_MODE {}
declare class Board$PIN_MODE__UNKNOWN mixins Board$PIN_MODE {}


declare  class Board$PIN_STATE {
  constructor(...args: empty): mixed;
static +LOW: Class<Board$PIN_STATE__LOW> & Board$PIN_STATE__LOW & 0;// 0
static +HIGH: Class<Board$PIN_STATE__HIGH> & Board$PIN_STATE__HIGH & 1;// 1

}

declare class Board$PIN_STATE__LOW mixins Board$PIN_STATE {}
declare class Board$PIN_STATE__HIGH mixins Board$PIN_STATE {}


declare  class Board$REPORTING {
  constructor(...args: empty): mixed;
static +ON: Class<Board$REPORTING__ON> & Board$REPORTING__ON & 1;// 1
static +OFF: Class<Board$REPORTING__OFF> & Board$REPORTING__OFF & 0;// 0

}

declare class Board$REPORTING__ON mixins Board$REPORTING {}
declare class Board$REPORTING__OFF mixins Board$REPORTING {}


declare  class Board$PULLUP_STATE {
  constructor(...args: empty): mixed;
static +ENABLED: Class<Board$PULLUP_STATE__ENABLED> & Board$PULLUP_STATE__ENABLED & 1;// 1
static +DISABLED: Class<Board$PULLUP_STATE__DISABLED> & Board$PULLUP_STATE__DISABLED & 0;// 0

}

declare class Board$PULLUP_STATE__ENABLED mixins Board$PULLUP_STATE {}
declare class Board$PULLUP_STATE__DISABLED mixins Board$PULLUP_STATE {}


declare  class Board$STEPPER_TYPE {
  constructor(...args: empty): mixed;
static +DRIVER: Class<Board$STEPPER_TYPE__DRIVER> & Board$STEPPER_TYPE__DRIVER & 1;// 1
static +TWO_WIRE: Class<Board$STEPPER_TYPE__TWO_WIRE> & Board$STEPPER_TYPE__TWO_WIRE & 2;// 2
static +FOUR_WIRE: Class<Board$STEPPER_TYPE__FOUR_WIRE> & Board$STEPPER_TYPE__FOUR_WIRE & 4;// 4

}

declare class Board$STEPPER_TYPE__DRIVER mixins Board$STEPPER_TYPE {}
declare class Board$STEPPER_TYPE__TWO_WIRE mixins Board$STEPPER_TYPE {}
declare class Board$STEPPER_TYPE__FOUR_WIRE mixins Board$STEPPER_TYPE {}


declare  class Board$STEPPER_RUN_STATE {
  constructor(...args: empty): mixed;
static +STOP: Class<Board$STEPPER_RUN_STATE__STOP> & Board$STEPPER_RUN_STATE__STOP & 0;// 0
static +ACCEL: Class<Board$STEPPER_RUN_STATE__ACCEL> & Board$STEPPER_RUN_STATE__ACCEL & 1;// 1
static +DECEL: Class<Board$STEPPER_RUN_STATE__DECEL> & Board$STEPPER_RUN_STATE__DECEL & 2;// 2
static +RUN: Class<Board$STEPPER_RUN_STATE__RUN> & Board$STEPPER_RUN_STATE__RUN & 3;// 3

}

declare class Board$STEPPER_RUN_STATE__STOP mixins Board$STEPPER_RUN_STATE {}
declare class Board$STEPPER_RUN_STATE__ACCEL mixins Board$STEPPER_RUN_STATE {}
declare class Board$STEPPER_RUN_STATE__DECEL mixins Board$STEPPER_RUN_STATE {}
declare class Board$STEPPER_RUN_STATE__RUN mixins Board$STEPPER_RUN_STATE {}


declare  class Board$STEPPER_DIRECTION {
  constructor(...args: empty): mixed;
static +CCW: Class<Board$STEPPER_DIRECTION__CCW> & Board$STEPPER_DIRECTION__CCW & 0;// 0
static +CW: Class<Board$STEPPER_DIRECTION__CW> & Board$STEPPER_DIRECTION__CW & 1;// 1

}

declare class Board$STEPPER_DIRECTION__CCW mixins Board$STEPPER_DIRECTION {}
declare class Board$STEPPER_DIRECTION__CW mixins Board$STEPPER_DIRECTION {}


declare  class Board$I2C_MODE {
  constructor(...args: empty): mixed;
static +WRITE: Class<Board$I2C_MODE__WRITE> & Board$I2C_MODE__WRITE & 0;// 0
static +READ: Class<Board$I2C_MODE__READ> & Board$I2C_MODE__READ & 1;// 1
static +CONTINUOUS_READ: Class<Board$I2C_MODE__CONTINUOUS_READ> & Board$I2C_MODE__CONTINUOUS_READ & 2;// 2
static +STOP_READING: Class<Board$I2C_MODE__STOP_READING> & Board$I2C_MODE__STOP_READING & 3;// 3

}

declare class Board$I2C_MODE__WRITE mixins Board$I2C_MODE {}
declare class Board$I2C_MODE__READ mixins Board$I2C_MODE {}
declare class Board$I2C_MODE__CONTINUOUS_READ mixins Board$I2C_MODE {}
declare class Board$I2C_MODE__STOP_READING mixins Board$I2C_MODE {}


declare  class Board$SERIAL_MODE {
  constructor(...args: empty): mixed;
static +CONTINUOUS_READ: Class<Board$SERIAL_MODE__CONTINUOUS_READ> & Board$SERIAL_MODE__CONTINUOUS_READ & 0;// 0
static +STOP_READING: Class<Board$SERIAL_MODE__STOP_READING> & Board$SERIAL_MODE__STOP_READING & 1;// 1

}

declare class Board$SERIAL_MODE__CONTINUOUS_READ mixins Board$SERIAL_MODE {}
declare class Board$SERIAL_MODE__STOP_READING mixins Board$SERIAL_MODE {}


declare  class Board$SERIAL_PORT_ID {
  constructor(...args: empty): mixed;
static +HW_SERIAL0: Class<Board$SERIAL_PORT_ID__HW_SERIAL0> & Board$SERIAL_PORT_ID__HW_SERIAL0 & 0;// 0
static +HW_SERIAL1: Class<Board$SERIAL_PORT_ID__HW_SERIAL1> & Board$SERIAL_PORT_ID__HW_SERIAL1 & 1;// 1
static +HW_SERIAL2: Class<Board$SERIAL_PORT_ID__HW_SERIAL2> & Board$SERIAL_PORT_ID__HW_SERIAL2 & 2;// 2
static +HW_SERIAL3: Class<Board$SERIAL_PORT_ID__HW_SERIAL3> & Board$SERIAL_PORT_ID__HW_SERIAL3 & 3;// 3
static +SW_SERIAL0: Class<Board$SERIAL_PORT_ID__SW_SERIAL0> & Board$SERIAL_PORT_ID__SW_SERIAL0 & 8;// 8
static +SW_SERIAL1: Class<Board$SERIAL_PORT_ID__SW_SERIAL1> & Board$SERIAL_PORT_ID__SW_SERIAL1 & 9;// 9
static +SW_SERIAL2: Class<Board$SERIAL_PORT_ID__SW_SERIAL2> & Board$SERIAL_PORT_ID__SW_SERIAL2 & 16;// 16
static +SW_SERIAL3: Class<Board$SERIAL_PORT_ID__SW_SERIAL3> & Board$SERIAL_PORT_ID__SW_SERIAL3 & 17;// 17
static +DEFAULT: Class<Board$SERIAL_PORT_ID__DEFAULT> & Board$SERIAL_PORT_ID__DEFAULT & 8;// 8

}

declare class Board$SERIAL_PORT_ID__HW_SERIAL0 mixins Board$SERIAL_PORT_ID {}
declare class Board$SERIAL_PORT_ID__HW_SERIAL1 mixins Board$SERIAL_PORT_ID {}
declare class Board$SERIAL_PORT_ID__HW_SERIAL2 mixins Board$SERIAL_PORT_ID {}
declare class Board$SERIAL_PORT_ID__HW_SERIAL3 mixins Board$SERIAL_PORT_ID {}
declare class Board$SERIAL_PORT_ID__SW_SERIAL0 mixins Board$SERIAL_PORT_ID {}
declare class Board$SERIAL_PORT_ID__SW_SERIAL1 mixins Board$SERIAL_PORT_ID {}
declare class Board$SERIAL_PORT_ID__SW_SERIAL2 mixins Board$SERIAL_PORT_ID {}
declare class Board$SERIAL_PORT_ID__SW_SERIAL3 mixins Board$SERIAL_PORT_ID {}
declare class Board$SERIAL_PORT_ID__DEFAULT mixins Board$SERIAL_PORT_ID {}


declare  class Board$SERIAL_PIN_TYPE {
  constructor(...args: empty): mixed;
static +RES_RX0: Class<Board$SERIAL_PIN_TYPE__RES_RX0> & Board$SERIAL_PIN_TYPE__RES_RX0 & 0;// 0
static +RES_TX0: Class<Board$SERIAL_PIN_TYPE__RES_TX0> & Board$SERIAL_PIN_TYPE__RES_TX0 & 1;// 1
static +RES_RX1: Class<Board$SERIAL_PIN_TYPE__RES_RX1> & Board$SERIAL_PIN_TYPE__RES_RX1 & 2;// 2
static +RES_TX1: Class<Board$SERIAL_PIN_TYPE__RES_TX1> & Board$SERIAL_PIN_TYPE__RES_TX1 & 3;// 3
static +RES_RX2: Class<Board$SERIAL_PIN_TYPE__RES_RX2> & Board$SERIAL_PIN_TYPE__RES_RX2 & 4;// 4
static +RES_TX2: Class<Board$SERIAL_PIN_TYPE__RES_TX2> & Board$SERIAL_PIN_TYPE__RES_TX2 & 5;// 5
static +RES_RX3: Class<Board$SERIAL_PIN_TYPE__RES_RX3> & Board$SERIAL_PIN_TYPE__RES_RX3 & 6;// 6
static +RES_TX3: Class<Board$SERIAL_PIN_TYPE__RES_TX3> & Board$SERIAL_PIN_TYPE__RES_TX3 & 7;// 7

}

declare class Board$SERIAL_PIN_TYPE__RES_RX0 mixins Board$SERIAL_PIN_TYPE {}
declare class Board$SERIAL_PIN_TYPE__RES_TX0 mixins Board$SERIAL_PIN_TYPE {}
declare class Board$SERIAL_PIN_TYPE__RES_RX1 mixins Board$SERIAL_PIN_TYPE {}
declare class Board$SERIAL_PIN_TYPE__RES_TX1 mixins Board$SERIAL_PIN_TYPE {}
declare class Board$SERIAL_PIN_TYPE__RES_RX2 mixins Board$SERIAL_PIN_TYPE {}
declare class Board$SERIAL_PIN_TYPE__RES_TX2 mixins Board$SERIAL_PIN_TYPE {}
declare class Board$SERIAL_PIN_TYPE__RES_RX3 mixins Board$SERIAL_PIN_TYPE {}
declare class Board$SERIAL_PIN_TYPE__RES_TX3 mixins Board$SERIAL_PIN_TYPE {}

    }
