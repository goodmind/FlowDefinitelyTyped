declare module 'titanium' {
        declare var Ti: typeof Titanium;
	declare var Titanium: typeof npm$namespace$Titanium;

      declare var npm$namespace$Titanium: {
        addEventListener: typeof Titanium$addEventListener,
removeEventListener: typeof Titanium$removeEventListener,
fireEvent: typeof Titanium$fireEvent,
applyProperties: typeof Titanium$applyProperties,
createBuffer: typeof Titanium$createBuffer,
createProxy: typeof Titanium$createProxy,
getBubbleParent: typeof Titanium$getBubbleParent,
setBubbleParent: typeof Titanium$setBubbleParent,
getApiName: typeof Titanium$getApiName,
getLifecycleContainer: typeof Titanium$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$setLifecycleContainer,
getUserAgent: typeof Titanium$getUserAgent,
setUserAgent: typeof Titanium$setUserAgent,
getVersion: typeof Titanium$getVersion,
getBuildDate: typeof Titanium$getBuildDate,
getBuildHash: typeof Titanium$getBuildHash,
        bubbleParent: typeof Titanium$bubbleParent,
apiName: typeof Titanium$apiName,
lifecycleContainer: typeof Titanium$lifecycleContainer,
userAgent: typeof Titanium$userAgent,
version: typeof Titanium$version,
buildDate: typeof Titanium$buildDate,
buildHash: typeof Titanium$buildHash,
        
        
        UI: typeof npm$namespace$Titanium$UI,
Module: typeof npm$namespace$Titanium$Module,
API: typeof npm$namespace$Titanium$API,
Accelerometer: typeof npm$namespace$Titanium$Accelerometer,
Analytics: typeof npm$namespace$Titanium$Analytics,
Android: typeof npm$namespace$Titanium$Android,
App: typeof npm$namespace$Titanium$App,
Calendar: typeof npm$namespace$Titanium$Calendar,
Codec: typeof npm$namespace$Titanium$Codec,
Contacts: typeof npm$namespace$Titanium$Contacts,
Database: typeof npm$namespace$Titanium$Database,
Filesystem: typeof npm$namespace$Titanium$Filesystem,
Geolocation: typeof npm$namespace$Titanium$Geolocation,
Gesture: typeof npm$namespace$Titanium$Gesture,
Locale: typeof npm$namespace$Titanium$Locale,
Media: typeof npm$namespace$Titanium$Media,
Network: typeof npm$namespace$Titanium$Network,
Platform: typeof npm$namespace$Titanium$Platform,
Stream: typeof npm$namespace$Titanium$Stream,
Utils: typeof npm$namespace$Titanium$Utils,
WatchSession: typeof npm$namespace$Titanium$WatchSession,
XML: typeof npm$namespace$Titanium$XML,
Yahoo: typeof npm$namespace$Titanium$Yahoo,
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * User-agent string used by Titanium.
 */
declare var Titanium$userAgent: string;


/**
 * Version of Titanium that is executing.
 */
declare var Titanium$version: string;


/**
 * Date of the Titanium build.
 */
declare var Titanium$buildDate: string;


/**
 * Git hash of the Titanium build.
 */
declare var Titanium$buildHash: string;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$applyProperties(props: any): void



/**
 * Creates a new buffer based on the params.
 */
declare function Titanium$createBuffer(params: CreateBufferArgs): Titanium$Buffer



/**
 * Creates and returns an instance of <Titanium.Proxy>.
 */
declare function Titanium$createProxy(parameters?: any): Titanium$Proxy



/**
 * Gets the value of the <Titanium.bubbleParent> property.
 */
declare function Titanium$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.bubbleParent> property.
 */
declare function Titanium$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.apiName> property.
 */
declare function Titanium$getApiName(): string



/**
 * Gets the value of the <Titanium.lifecycleContainer> property.
 */
declare function Titanium$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.lifecycleContainer> property.
 */
declare function Titanium$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.lifecycleContainer> property.
 */
declare function Titanium$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.userAgent> property.
 */
declare function Titanium$getUserAgent(): string



/**
 * Sets the value of the <Titanium.userAgent> property.
 */
declare function Titanium$setUserAgent(userAgent: string): void



/**
 * Gets the value of the <Titanium.version> property.
 */
declare function Titanium$getVersion(): string



/**
 * Gets the value of the <Titanium.buildDate> property.
 */
declare function Titanium$getBuildDate(): string



/**
 * Gets the value of the <Titanium.buildHash> property.
 */
declare function Titanium$getBuildHash(): string



/**
 * The base for all Titanium objects.
 */
declare interface Titanium$Proxy {

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
bubbleParent: boolean,

/**
 * The name of the API that this proxy corresponds to.
 */
+apiName: string,

/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
lifecycleContainer?: Titanium$UI$Window | Titanium$UI$TabGroup,

/**
 * Adds the specified callback as an event listener for the named event.
 */
addEventListener(name: string, callback: (param0: any) => any): void,

/**
 * Removes the specified callback as an event listener for the named event.
 */
removeEventListener(name: string, callback: (param0: any) => any): void,

/**
 * Fires a synthesized event to any registered listeners.
 */
fireEvent(name: string, event: any): void,

/**
 * Applies the properties to the proxy.
 */
applyProperties(props: any): void,

/**
 * Gets the value of the <Titanium.Proxy.bubbleParent> property.
 */
getBubbleParent(): boolean,

/**
 * Sets the value of the <Titanium.Proxy.bubbleParent> property.
 */
setBubbleParent(bubbleParent: boolean): void,

/**
 * Gets the value of the <Titanium.Proxy.apiName> property.
 */
getApiName(): string,

/**
 * Gets the value of the <Titanium.Proxy.lifecycleContainer> property.
 */
getLifecycleContainer?: () => Titanium$UI$Window | Titanium$UI$TabGroup,

/**
 * Sets the value of the <Titanium.Proxy.lifecycleContainer> property.
 */
setLifecycleContainer?: (lifecycleContainer: Titanium$UI$Window) => void,

/**
 * Sets the value of the <Titanium.Proxy.lifecycleContainer> property.
 */
setLifecycleContainer?: (lifecycleContainer: Titanium$UI$TabGroup) => void
} 


/**
 * A container for binary data.
 */
declare type Titanium$Blob = {

/**
 * File object represented by this blob, or `null` if this blob is not
 * associated with a file.
 */
+file: Titanium$Filesystem$File,

/**
 * Length of this blob in bytes.
 */
+length: number,

/**
 * UTF-8 string representation of the data in this blob.
 */
+text: string,

/**
 * Mime type of the data in this blob.
 */
+mimeType: string,

/**
 * If this blob represents an image, this is the height of the image in pixels.
 */
+height: number,

/**
 * If this blob represents an image, this is the width of the image in pixels.
 */
+width: number,

/**
 * If this blob represents a [File](Titanium.Filesystem.File), this is the file URL
 * that represents it.
 */
+nativePath: string,

/**
 * Size of the blob in pixels (for image blobs) or bytes (for all other blobs).
 */
+size: number,

/**
 * Returns a string representation of this blob.
 */
toString(): string,

/**
 * Appends the data from another blob to this blob.
 */
append(blob: Titanium$Blob): void,

/**
 * Creates a new blob by cropping the underlying image to the specified dimensions.
 */
imageAsCropped(options: any): Titanium$Blob,

/**
 * Creates a new blob by resizing and scaling the underlying image to the specified dimensions.
 */
imageAsResized(width: number, height: number): Titanium$Blob,

/**
 * Creates a new blob by compressing the underlying image to the specified quality.
 */
imageAsCompressed(quality: number): Titanium$Blob,

/**
 * Returns a thumbnail version of the underlying image, optionally with a border and rounded corners.
 */
imageAsThumbnail(size: number, borderSize?: number, cornerRadius?: number): Titanium$Blob,

/**
 * Returns a copy of the underlying image with an added alpha channel.
 */
imageWithAlpha(): Titanium$Blob,

/**
 * Returns a copy of the underlying image with rounded corners added.
 */
imageWithRoundedCorner(cornerSize: number, borderSize?: number): Titanium$Blob,

/**
 * Returns a copy of the underlying image with an added transparent border.
 */
imageWithTransparentBorder(size: number): Titanium$Blob,

/**
 * Gets the value of the <Titanium.Blob.file> property.
 */
getFile(): Titanium$Filesystem$File,

/**
 * Gets the value of the <Titanium.Blob.length> property.
 */
getLength(): number,

/**
 * Gets the value of the <Titanium.Blob.text> property.
 */
getText(): string,

/**
 * Gets the value of the <Titanium.Blob.mimeType> property.
 */
getMimeType(): string,

/**
 * Gets the value of the <Titanium.Blob.height> property.
 */
getHeight(): number,

/**
 * Gets the value of the <Titanium.Blob.width> property.
 */
getWidth(): number,

/**
 * Gets the value of the <Titanium.Blob.nativePath> property.
 */
getNativePath(): string,

/**
 * Gets the value of the <Titanium.Blob.size> property.
 */
getSize(): number
} & Titanium$Proxy



/**
 * Wrapper around <Titanium.Blob> that implements the <Titanium.IOStream> interface.
 */
declare type Titanium$BlobStream = {

/**
 * Reads data from this stream into a buffer.
 */
read(
buffer: Titanium$Buffer,
offset?: number,
length?: number,
resultsCallback?: (param0: ReadCallbackArgs) => any): number,

/**
 * Writes data from a buffer to this stream.
 */
write(
buffer: Titanium$Buffer,
offset?: number,
length?: number,
resultsCallback?: (param0: WriteCallbackArgs) => any): number,

/**
 * Indicates whether this stream is writable.
 */
isWritable(): boolean,

/**
 * Indicates whether this stream is readable.
 */
isReadable(): boolean,

/**
 * Closes this stream.
 */
close(): void
} & Titanium$Proxy



/**
 * Buffer is a mutable, resizable container for raw data.
 */
declare type Titanium$Buffer = {

/**
 * Length of the buffer in bytes.
 */
length: number,

/**
 * Data to be encoded.
 */
value: number | string,

/**
 * The type of data encoding to use with `value`.
 */
type: string,

/**
 * Byte order of this buffer.
 */
byteOrder: number,

/**
 * Appends `sourceBuffer` to the this buffer.
 */
append(
sourceBuffer: Titanium$Buffer,
sourceOffset?: number,
sourceLength?: number): number,

/**
 * Inserts data from `sourceBuffer` into this buffer at `offset`.
 */
insert(
sourceBuffer: Titanium$Buffer,
offset: number,
sourceOffset?: number,
sourceLength?: number): number,

/**
 * Copies data from `sourceBuffer` into the current buffer at `offset`.
 */
copy(
sourceBuffer: Titanium$Buffer,
offset: number,
sourceOffset?: number,
sourceLength?: number): number,

/**
 * Creates a complete or partial copy of this buffer.
 */
clone(offset?: number, length?: number): Titanium$Buffer,

/**
 * Fills this buffer with the specified byte value.
 */
fill(fillByte: number, offset?: number, length?: number): void,

/**
 * Clears this buffer's contents but does not change the size of the buffer.
 */
clear(): void,

/**
 * Releases the space allocated to the buffer, and sets its length to 0.
 */
release(): void,

/**
 * Converts this buffer to a String.
 */
toString(): string,

/**
 * Converts this buffer to a <Titanium.Blob>.
 */
toBlob(): Titanium$Blob,

/**
 * Gets the value of the <Titanium.Buffer.length> property.
 */
getLength(): number,

/**
 * Sets the value of the <Titanium.Buffer.length> property.
 */
setLength(length: number): void,

/**
 * Gets the value of the <Titanium.Buffer.value> property.
 */
getValue(): number | string,

/**
 * Sets the value of the <Titanium.Buffer.value> property.
 */
setValue(value: number): void,

/**
 * Sets the value of the <Titanium.Buffer.value> property.
 */
setValue(value: string): void,

/**
 * Gets the value of the <Titanium.Buffer.type> property.
 */
getType(): string,

/**
 * Sets the value of the <Titanium.Buffer.type> property.
 */
setType(type: string): void,

/**
 * Gets the value of the <Titanium.Buffer.byteOrder> property.
 */
getByteOrder(): number,

/**
 * Sets the value of the <Titanium.Buffer.byteOrder> property.
 */
setByteOrder(byteOrder: number): void
} & Titanium$Proxy



/**
 * Wrapper around <Titanium.Buffer> that implements the <Titanium.IOStream> interface.
 */
declare type Titanium$BufferStream = {

/**
 * Reads data from this stream into a buffer.
 */
read(
buffer: Titanium$Buffer,
offset?: number,
length?: number,
resultsCallback?: (param0: ReadCallbackArgs) => any): number,

/**
 * Writes data from a buffer to this stream.
 */
write(
buffer: Titanium$Buffer,
offset?: number,
length?: number,
resultsCallback?: (param0: WriteCallbackArgs) => any): number,

/**
 * Indicates whether this stream is writable.
 */
isWritable(): boolean,

/**
 * Indicates whether this stream is readable.
 */
isReadable(): boolean,

/**
 * Closes this stream.
 */
close(): void
} & Titanium$Proxy



/**
 * The base type for all Titanium events.
 */
declare interface Titanium$Event {

/**
 * Source object that fired the event.
 */
+source: any,

/**
 * Name of the event fired.
 */
+type: string,

/**
 * True if the event will try to bubble up if possible.
 */
+bubbles: boolean,

/**
 * Set to true to stop the event from bubbling.
 */
cancelBubble: boolean
} 


/**
 * IOStream is the interface that all stream types implement.
 */
declare type Titanium$IOStream = {

/**
 * Reads data from this stream into a buffer.
 */
read(
buffer: Titanium$Buffer,
offset?: number,
length?: number,
resultsCallback?: (param0: ReadCallbackArgs) => any): number,

/**
 * Writes data from a buffer to this stream.
 */
write(
buffer: Titanium$Buffer,
offset?: number,
length?: number,
resultsCallback?: (param0: WriteCallbackArgs) => any): number,

/**
 * Indicates whether this stream is writable.
 */
isWritable(): boolean,

/**
 * Indicates whether this stream is readable.
 */
isReadable(): boolean,

/**
 * Closes this stream.
 */
close(): void
} & Titanium$Proxy



      declare var npm$namespace$Titanium$UI: {
        addEventListener: typeof Titanium$UI$addEventListener,
removeEventListener: typeof Titanium$UI$removeEventListener,
fireEvent: typeof Titanium$UI$fireEvent,
applyProperties: typeof Titanium$UI$applyProperties,
create2DMatrix: typeof Titanium$UI$create2DMatrix,
createMatrix2D: typeof Titanium$UI$createMatrix2D,
convertUnits: typeof Titanium$UI$convertUnits,
createView: typeof Titanium$UI$createView,
create3DMatrix: typeof Titanium$UI$create3DMatrix,
createActivityIndicator: typeof Titanium$UI$createActivityIndicator,
createAlertDialog: typeof Titanium$UI$createAlertDialog,
createAnimation: typeof Titanium$UI$createAnimation,
createAttributedString: typeof Titanium$UI$createAttributedString,
createButton: typeof Titanium$UI$createButton,
createButtonBar: typeof Titanium$UI$createButtonBar,
createCoverFlowView: typeof Titanium$UI$createCoverFlowView,
createDashboardItem: typeof Titanium$UI$createDashboardItem,
createDashboardView: typeof Titanium$UI$createDashboardView,
createEmailDialog: typeof Titanium$UI$createEmailDialog,
createImageView: typeof Titanium$UI$createImageView,
createLabel: typeof Titanium$UI$createLabel,
createListSection: typeof Titanium$UI$createListSection,
createListView: typeof Titanium$UI$createListView,
createMaskedImage: typeof Titanium$UI$createMaskedImage,
createMatrix3D: typeof Titanium$UI$createMatrix3D,
createNavigationWindow: typeof Titanium$UI$createNavigationWindow,
createNotification: typeof Titanium$UI$createNotification,
createOptionDialog: typeof Titanium$UI$createOptionDialog,
createPicker: typeof Titanium$UI$createPicker,
createPickerColumn: typeof Titanium$UI$createPickerColumn,
createPickerRow: typeof Titanium$UI$createPickerRow,
createProgressBar: typeof Titanium$UI$createProgressBar,
createRefreshControl: typeof Titanium$UI$createRefreshControl,
createScrollView: typeof Titanium$UI$createScrollView,
createScrollableView: typeof Titanium$UI$createScrollableView,
createSearchBar: typeof Titanium$UI$createSearchBar,
createShortcutItem: typeof Titanium$UI$createShortcutItem,
createSlider: typeof Titanium$UI$createSlider,
createSwitch: typeof Titanium$UI$createSwitch,
createTab: typeof Titanium$UI$createTab,
createTabGroup: typeof Titanium$UI$createTabGroup,
createTabbedBar: typeof Titanium$UI$createTabbedBar,
createTableView: typeof Titanium$UI$createTableView,
createTableViewRow: typeof Titanium$UI$createTableViewRow,
createTableViewSection: typeof Titanium$UI$createTableViewSection,
createTextArea: typeof Titanium$UI$createTextArea,
createTextField: typeof Titanium$UI$createTextField,
createToolbar: typeof Titanium$UI$createToolbar,
getBubbleParent: typeof Titanium$UI$getBubbleParent,
setBubbleParent: typeof Titanium$UI$setBubbleParent,
getApiName: typeof Titanium$UI$getApiName,
getLifecycleContainer: typeof Titanium$UI$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$UI$setLifecycleContainer,
getBackgroundColor: typeof Titanium$UI$getBackgroundColor,
setBackgroundColor: typeof Titanium$UI$setBackgroundColor,
getBackgroundImage: typeof Titanium$UI$getBackgroundImage,
setBackgroundImage: typeof Titanium$UI$setBackgroundImage,
getCurrentTab: typeof Titanium$UI$getCurrentTab,
setCurrentTab: typeof Titanium$UI$setCurrentTab,
getCurrentWindow: typeof Titanium$UI$getCurrentWindow,
getOrientation: typeof Titanium$UI$getOrientation,
setOrientation: typeof Titanium$UI$setOrientation,
getTintColor: typeof Titanium$UI$getTintColor,
setTintColor: typeof Titanium$UI$setTintColor,
createWebView: typeof Titanium$UI$createWebView,
createWindow: typeof Titanium$UI$createWindow,
        bubbleParent: typeof Titanium$UI$bubbleParent,
apiName: typeof Titanium$UI$apiName,
lifecycleContainer: typeof Titanium$UI$lifecycleContainer,
ANIMATION_CURVE_EASE_IN: typeof Titanium$UI$ANIMATION_CURVE_EASE_IN,
ANIMATION_CURVE_EASE_IN_OUT: typeof Titanium$UI$ANIMATION_CURVE_EASE_IN_OUT,
ANIMATION_CURVE_EASE_OUT: typeof Titanium$UI$ANIMATION_CURVE_EASE_OUT,
ANIMATION_CURVE_LINEAR: typeof Titanium$UI$ANIMATION_CURVE_LINEAR,
ATTRIBUTE_FONT: typeof Titanium$UI$ATTRIBUTE_FONT,
ATTRIBUTE_FOREGROUND_COLOR: typeof Titanium$UI$ATTRIBUTE_FOREGROUND_COLOR,
ATTRIBUTE_BACKGROUND_COLOR: typeof Titanium$UI$ATTRIBUTE_BACKGROUND_COLOR,
ATTRIBUTE_LIGATURE: typeof Titanium$UI$ATTRIBUTE_LIGATURE,
ATTRIBUTE_LETTERPRESS_STYLE: typeof Titanium$UI$ATTRIBUTE_LETTERPRESS_STYLE,
ATTRIBUTE_KERN: typeof Titanium$UI$ATTRIBUTE_KERN,
ATTRIBUTE_STRIKETHROUGH_STYLE: typeof Titanium$UI$ATTRIBUTE_STRIKETHROUGH_STYLE,
ATTRIBUTE_UNDERLINES_STYLE: typeof Titanium$UI$ATTRIBUTE_UNDERLINES_STYLE,
ATTRIBUTE_SUPERSCRIPT_STYLE: typeof Titanium$UI$ATTRIBUTE_SUPERSCRIPT_STYLE,
ATTRIBUTE_SUBSCRIPT_STYLE: typeof Titanium$UI$ATTRIBUTE_SUBSCRIPT_STYLE,
ATTRIBUTE_STROKE_COLOR: typeof Titanium$UI$ATTRIBUTE_STROKE_COLOR,
ATTRIBUTE_PARAGRAPH_STYLE: typeof Titanium$UI$ATTRIBUTE_PARAGRAPH_STYLE,
ATTRIBUTE_STROKE_WIDTH: typeof Titanium$UI$ATTRIBUTE_STROKE_WIDTH,
ATTRIBUTE_SHADOW: typeof Titanium$UI$ATTRIBUTE_SHADOW,
ATTRIBUTE_WRITING_DIRECTION: typeof Titanium$UI$ATTRIBUTE_WRITING_DIRECTION,
ATTRIBUTE_TEXT_EFFECT: typeof Titanium$UI$ATTRIBUTE_TEXT_EFFECT,
ATTRIBUTE_LINK: typeof Titanium$UI$ATTRIBUTE_LINK,
ATTRIBUTE_BASELINE_OFFSET: typeof Titanium$UI$ATTRIBUTE_BASELINE_OFFSET,
ATTRIBUTE_UNDERLINE_COLOR: typeof Titanium$UI$ATTRIBUTE_UNDERLINE_COLOR,
ATTRIBUTE_STRIKETHROUGH_COLOR: typeof Titanium$UI$ATTRIBUTE_STRIKETHROUGH_COLOR,
ATTRIBUTE_OBLIQUENESS: typeof Titanium$UI$ATTRIBUTE_OBLIQUENESS,
ATTRIBUTE_EXPANSION: typeof Titanium$UI$ATTRIBUTE_EXPANSION,
ATTRIBUTE_LINE_BREAK: typeof Titanium$UI$ATTRIBUTE_LINE_BREAK,
ATTRIBUTE_UNDERLINE_STYLE_NONE: typeof Titanium$UI$ATTRIBUTE_UNDERLINE_STYLE_NONE,
ATTRIBUTE_UNDERLINE_STYLE_SINGLE: typeof Titanium$UI$ATTRIBUTE_UNDERLINE_STYLE_SINGLE,
ATTRIBUTE_UNDERLINE_STYLE_THICK: typeof Titanium$UI$ATTRIBUTE_UNDERLINE_STYLE_THICK,
ATTRIBUTE_UNDERLINE_STYLE_DOUBLE: typeof Titanium$UI$ATTRIBUTE_UNDERLINE_STYLE_DOUBLE,
ATTRIBUTE_UNDERLINE_PATTERN_SOLID: typeof Titanium$UI$ATTRIBUTE_UNDERLINE_PATTERN_SOLID,
ATTRIBUTE_UNDERLINE_PATTERN_DOT: typeof Titanium$UI$ATTRIBUTE_UNDERLINE_PATTERN_DOT,
ATTRIBUTE_UNDERLINE_PATTERN_DASH: typeof Titanium$UI$ATTRIBUTE_UNDERLINE_PATTERN_DASH,
ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT: typeof Titanium$UI$ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT,
ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT_DOT: typeof Titanium$UI$ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT_DOT,
ATTRIBUTE_UNDERLINE_BY_WORD: typeof Titanium$UI$ATTRIBUTE_UNDERLINE_BY_WORD,
ATTRIBUTE_WRITING_DIRECTION_EMBEDDING: typeof Titanium$UI$ATTRIBUTE_WRITING_DIRECTION_EMBEDDING,
ATTRIBUTE_WRITING_DIRECTION_OVERRIDE: typeof Titanium$UI$ATTRIBUTE_WRITING_DIRECTION_OVERRIDE,
ATTRIBUTE_WRITING_DIRECTION_NATURAL: typeof Titanium$UI$ATTRIBUTE_WRITING_DIRECTION_NATURAL,
ATTRIBUTE_WRITING_DIRECTION_LEFT_TO_RIGHT: typeof Titanium$UI$ATTRIBUTE_WRITING_DIRECTION_LEFT_TO_RIGHT,
ATTRIBUTE_WRITING_DIRECTION_RIGHT_TO_LEFT: typeof Titanium$UI$ATTRIBUTE_WRITING_DIRECTION_RIGHT_TO_LEFT,
ATTRIBUTE_LINE_BREAK_BY_WORD_WRAPPING: typeof Titanium$UI$ATTRIBUTE_LINE_BREAK_BY_WORD_WRAPPING,
ATTRIBUTE_LINE_BREAK_BY_CHAR_WRAPPING: typeof Titanium$UI$ATTRIBUTE_LINE_BREAK_BY_CHAR_WRAPPING,
ATTRIBUTE_LINE_BREAK_BY_CLIPPING: typeof Titanium$UI$ATTRIBUTE_LINE_BREAK_BY_CLIPPING,
ATTRIBUTE_LINE_BREAK_BY_TRUNCATING_HEAD: typeof Titanium$UI$ATTRIBUTE_LINE_BREAK_BY_TRUNCATING_HEAD,
ATTRIBUTE_LINE_BREAK_BY_TRUNCATING_MIDDLE: typeof Titanium$UI$ATTRIBUTE_LINE_BREAK_BY_TRUNCATING_MIDDLE,
ATTRIBUTE_LINE_BREAK_BY_TRUNCATING_TAIL: typeof Titanium$UI$ATTRIBUTE_LINE_BREAK_BY_TRUNCATING_TAIL,
AUTODETECT_ADDRESS: typeof Titanium$UI$AUTODETECT_ADDRESS,
AUTODETECT_ALL: typeof Titanium$UI$AUTODETECT_ALL,
AUTODETECT_CALENDAR: typeof Titanium$UI$AUTODETECT_CALENDAR,
AUTODETECT_LINK: typeof Titanium$UI$AUTODETECT_LINK,
AUTODETECT_NONE: typeof Titanium$UI$AUTODETECT_NONE,
AUTODETECT_PHONE: typeof Titanium$UI$AUTODETECT_PHONE,
AUTOFILL_TYPE_USERNAME: typeof Titanium$UI$AUTOFILL_TYPE_USERNAME,
AUTOFILL_TYPE_PASSWORD: typeof Titanium$UI$AUTOFILL_TYPE_PASSWORD,
AUTOFILL_TYPE_NAME: typeof Titanium$UI$AUTOFILL_TYPE_NAME,
AUTOFILL_TYPE_NAME_PREFIX: typeof Titanium$UI$AUTOFILL_TYPE_NAME_PREFIX,
AUTOFILL_TYPE_GIVEN_NAME: typeof Titanium$UI$AUTOFILL_TYPE_GIVEN_NAME,
AUTOFILL_TYPE_MIDDLE_NAME: typeof Titanium$UI$AUTOFILL_TYPE_MIDDLE_NAME,
AUTOFILL_TYPE_FAMILY_NAME: typeof Titanium$UI$AUTOFILL_TYPE_FAMILY_NAME,
AUTOFILL_TYPE_NAME_SUFFIX: typeof Titanium$UI$AUTOFILL_TYPE_NAME_SUFFIX,
AUTOFILL_TYPE_NICKNAME: typeof Titanium$UI$AUTOFILL_TYPE_NICKNAME,
AUTOFILL_TYPE_JOB_TITLE: typeof Titanium$UI$AUTOFILL_TYPE_JOB_TITLE,
AUTOFILL_TYPE_ORGANIZATION_NAME: typeof Titanium$UI$AUTOFILL_TYPE_ORGANIZATION_NAME,
AUTOFILL_TYPE_LOCATION: typeof Titanium$UI$AUTOFILL_TYPE_LOCATION,
AUTOFILL_TYPE_ADDRESS: typeof Titanium$UI$AUTOFILL_TYPE_ADDRESS,
AUTOFILL_TYPE_ADDRESS_LINE1: typeof Titanium$UI$AUTOFILL_TYPE_ADDRESS_LINE1,
AUTOFILL_TYPE_ADDRESS_LINE2: typeof Titanium$UI$AUTOFILL_TYPE_ADDRESS_LINE2,
AUTOFILL_TYPE_ADDRESS_CITY: typeof Titanium$UI$AUTOFILL_TYPE_ADDRESS_CITY,
AUTOFILL_TYPE_ADDRESS_STATE: typeof Titanium$UI$AUTOFILL_TYPE_ADDRESS_STATE,
AUTOFILL_TYPE_ADDRESS_CITY_STATE: typeof Titanium$UI$AUTOFILL_TYPE_ADDRESS_CITY_STATE,
AUTOFILL_TYPE_SUBLOCALITY: typeof Titanium$UI$AUTOFILL_TYPE_SUBLOCALITY,
AUTOFILL_TYPE_COUNTRY_NAME: typeof Titanium$UI$AUTOFILL_TYPE_COUNTRY_NAME,
AUTOFILL_TYPE_POSTAL_CODE: typeof Titanium$UI$AUTOFILL_TYPE_POSTAL_CODE,
AUTOFILL_TYPE_PHONE: typeof Titanium$UI$AUTOFILL_TYPE_PHONE,
AUTOFILL_TYPE_EMAIL: typeof Titanium$UI$AUTOFILL_TYPE_EMAIL,
AUTOFILL_TYPE_URL: typeof Titanium$UI$AUTOFILL_TYPE_URL,
AUTOFILL_TYPE_CARD_NUMBER: typeof Titanium$UI$AUTOFILL_TYPE_CARD_NUMBER,
AUTOFILL_TYPE_CARD_SECURITY_CODE: typeof Titanium$UI$AUTOFILL_TYPE_CARD_SECURITY_CODE,
AUTOFILL_TYPE_CARD_EXPIRATION_DATE: typeof Titanium$UI$AUTOFILL_TYPE_CARD_EXPIRATION_DATE,
AUTOFILL_TYPE_CARD_EXPIRATION_DAY: typeof Titanium$UI$AUTOFILL_TYPE_CARD_EXPIRATION_DAY,
AUTOFILL_TYPE_CARD_EXPIRATION_MONTH: typeof Titanium$UI$AUTOFILL_TYPE_CARD_EXPIRATION_MONTH,
AUTOFILL_TYPE_CARD_EXPIRATION_YEAR: typeof Titanium$UI$AUTOFILL_TYPE_CARD_EXPIRATION_YEAR,
AUTOFILL_TYPE_NEW_PASSWORD: typeof Titanium$UI$AUTOFILL_TYPE_NEW_PASSWORD,
AUTOFILL_TYPE_ONE_TIME_CODE: typeof Titanium$UI$AUTOFILL_TYPE_ONE_TIME_CODE,
AUTOLINK_MAP_ADDRESSES: typeof Titanium$UI$AUTOLINK_MAP_ADDRESSES,
AUTOLINK_ALL: typeof Titanium$UI$AUTOLINK_ALL,
AUTOLINK_CALENDAR: typeof Titanium$UI$AUTOLINK_CALENDAR,
AUTOLINK_URLS: typeof Titanium$UI$AUTOLINK_URLS,
AUTOLINK_NONE: typeof Titanium$UI$AUTOLINK_NONE,
AUTOLINK_PHONE_NUMBERS: typeof Titanium$UI$AUTOLINK_PHONE_NUMBERS,
AUTOLINK_EMAIL_ADDRESSES: typeof Titanium$UI$AUTOLINK_EMAIL_ADDRESSES,
BLEND_MODE_CLEAR: typeof Titanium$UI$BLEND_MODE_CLEAR,
BLEND_MODE_COLOR: typeof Titanium$UI$BLEND_MODE_COLOR,
BLEND_MODE_COLOR_BURN: typeof Titanium$UI$BLEND_MODE_COLOR_BURN,
BLEND_MODE_COLOR_DODGE: typeof Titanium$UI$BLEND_MODE_COLOR_DODGE,
BLEND_MODE_COPY: typeof Titanium$UI$BLEND_MODE_COPY,
BLEND_MODE_DARKEN: typeof Titanium$UI$BLEND_MODE_DARKEN,
BLEND_MODE_DESTINATION_ATOP: typeof Titanium$UI$BLEND_MODE_DESTINATION_ATOP,
BLEND_MODE_DESTINATION_IN: typeof Titanium$UI$BLEND_MODE_DESTINATION_IN,
BLEND_MODE_DESTINATION_OUT: typeof Titanium$UI$BLEND_MODE_DESTINATION_OUT,
BLEND_MODE_DESTINATION_OVER: typeof Titanium$UI$BLEND_MODE_DESTINATION_OVER,
BLEND_MODE_DIFFERENCE: typeof Titanium$UI$BLEND_MODE_DIFFERENCE,
BLEND_MODE_EXCLUSION: typeof Titanium$UI$BLEND_MODE_EXCLUSION,
BLEND_MODE_HARD_LIGHT: typeof Titanium$UI$BLEND_MODE_HARD_LIGHT,
BLEND_MODE_HUE: typeof Titanium$UI$BLEND_MODE_HUE,
BLEND_MODE_LIGHTEN: typeof Titanium$UI$BLEND_MODE_LIGHTEN,
BLEND_MODE_LUMINOSITY: typeof Titanium$UI$BLEND_MODE_LUMINOSITY,
BLEND_MODE_MULTIPLY: typeof Titanium$UI$BLEND_MODE_MULTIPLY,
BLEND_MODE_NORMAL: typeof Titanium$UI$BLEND_MODE_NORMAL,
BLEND_MODE_OVERLAY: typeof Titanium$UI$BLEND_MODE_OVERLAY,
BLEND_MODE_PLUS_DARKER: typeof Titanium$UI$BLEND_MODE_PLUS_DARKER,
BLEND_MODE_PLUS_LIGHTER: typeof Titanium$UI$BLEND_MODE_PLUS_LIGHTER,
BLEND_MODE_SATURATION: typeof Titanium$UI$BLEND_MODE_SATURATION,
BLEND_MODE_SCREEN: typeof Titanium$UI$BLEND_MODE_SCREEN,
BLEND_MODE_SOFT_LIGHT: typeof Titanium$UI$BLEND_MODE_SOFT_LIGHT,
BLEND_MODE_SOURCE_ATOP: typeof Titanium$UI$BLEND_MODE_SOURCE_ATOP,
BLEND_MODE_SOURCE_IN: typeof Titanium$UI$BLEND_MODE_SOURCE_IN,
BLEND_MODE_SOURCE_OUT: typeof Titanium$UI$BLEND_MODE_SOURCE_OUT,
BLEND_MODE_XOR: typeof Titanium$UI$BLEND_MODE_XOR,
HINT_TYPE_STATIC: typeof Titanium$UI$HINT_TYPE_STATIC,
HINT_TYPE_ANIMATED: typeof Titanium$UI$HINT_TYPE_ANIMATED,
TEXT_ELLIPSIZE_TRUNCATE_WORD_WRAP: typeof Titanium$UI$TEXT_ELLIPSIZE_TRUNCATE_WORD_WRAP,
TEXT_ELLIPSIZE_TRUNCATE_CHAR_WRAP: typeof Titanium$UI$TEXT_ELLIPSIZE_TRUNCATE_CHAR_WRAP,
TEXT_ELLIPSIZE_TRUNCATE_CLIP: typeof Titanium$UI$TEXT_ELLIPSIZE_TRUNCATE_CLIP,
TEXT_ELLIPSIZE_TRUNCATE_START: typeof Titanium$UI$TEXT_ELLIPSIZE_TRUNCATE_START,
TEXT_ELLIPSIZE_TRUNCATE_MIDDLE: typeof Titanium$UI$TEXT_ELLIPSIZE_TRUNCATE_MIDDLE,
TEXT_ELLIPSIZE_TRUNCATE_END: typeof Titanium$UI$TEXT_ELLIPSIZE_TRUNCATE_END,
TEXT_ELLIPSIZE_TRUNCATE_MARQUEE: typeof Titanium$UI$TEXT_ELLIPSIZE_TRUNCATE_MARQUEE,
TEXT_ELLIPSIZE_TRUNCATE_NONE: typeof Titanium$UI$TEXT_ELLIPSIZE_TRUNCATE_NONE,
EXTEND_EDGE_TOP: typeof Titanium$UI$EXTEND_EDGE_TOP,
EXTEND_EDGE_BOTTOM: typeof Titanium$UI$EXTEND_EDGE_BOTTOM,
EXTEND_EDGE_LEFT: typeof Titanium$UI$EXTEND_EDGE_LEFT,
EXTEND_EDGE_RIGHT: typeof Titanium$UI$EXTEND_EDGE_RIGHT,
EXTEND_EDGE_NONE: typeof Titanium$UI$EXTEND_EDGE_NONE,
EXTEND_EDGE_ALL: typeof Titanium$UI$EXTEND_EDGE_ALL,
FACE_DOWN: typeof Titanium$UI$FACE_DOWN,
FACE_UP: typeof Titanium$UI$FACE_UP,
FILL: typeof Titanium$UI$FILL,
HIDDEN_BEHAVIOR_GONE: typeof Titanium$UI$HIDDEN_BEHAVIOR_GONE,
HIDDEN_BEHAVIOR_INVISIBLE: typeof Titanium$UI$HIDDEN_BEHAVIOR_INVISIBLE,
INPUT_BORDERSTYLE_BEZEL: typeof Titanium$UI$INPUT_BORDERSTYLE_BEZEL,
INPUT_BORDERSTYLE_LINE: typeof Titanium$UI$INPUT_BORDERSTYLE_LINE,
INPUT_BORDERSTYLE_NONE: typeof Titanium$UI$INPUT_BORDERSTYLE_NONE,
INPUT_BORDERSTYLE_ROUNDED: typeof Titanium$UI$INPUT_BORDERSTYLE_ROUNDED,
INPUT_BUTTONMODE_ALWAYS: typeof Titanium$UI$INPUT_BUTTONMODE_ALWAYS,
INPUT_BUTTONMODE_NEVER: typeof Titanium$UI$INPUT_BUTTONMODE_NEVER,
INPUT_BUTTONMODE_ONBLUR: typeof Titanium$UI$INPUT_BUTTONMODE_ONBLUR,
INPUT_BUTTONMODE_ONFOCUS: typeof Titanium$UI$INPUT_BUTTONMODE_ONFOCUS,
INPUT_TYPE_CLASS_NUMBER: typeof Titanium$UI$INPUT_TYPE_CLASS_NUMBER,
INPUT_TYPE_CLASS_TEXT: typeof Titanium$UI$INPUT_TYPE_CLASS_TEXT,
KEYBOARD_APPEARANCE_ALERT: typeof Titanium$UI$KEYBOARD_APPEARANCE_ALERT,
KEYBOARD_APPEARANCE_DEFAULT: typeof Titanium$UI$KEYBOARD_APPEARANCE_DEFAULT,
KEYBOARD_APPEARANCE_DARK: typeof Titanium$UI$KEYBOARD_APPEARANCE_DARK,
KEYBOARD_APPEARANCE_LIGHT: typeof Titanium$UI$KEYBOARD_APPEARANCE_LIGHT,
KEYBOARD_ASCII: typeof Titanium$UI$KEYBOARD_ASCII,
KEYBOARD_DECIMAL_PAD: typeof Titanium$UI$KEYBOARD_DECIMAL_PAD,
KEYBOARD_DEFAULT: typeof Titanium$UI$KEYBOARD_DEFAULT,
KEYBOARD_EMAIL: typeof Titanium$UI$KEYBOARD_EMAIL,
KEYBOARD_NAMEPHONE_PAD: typeof Titanium$UI$KEYBOARD_NAMEPHONE_PAD,
KEYBOARD_NUMBERS_PUNCTUATION: typeof Titanium$UI$KEYBOARD_NUMBERS_PUNCTUATION,
KEYBOARD_NUMBER_PAD: typeof Titanium$UI$KEYBOARD_NUMBER_PAD,
KEYBOARD_PHONE_PAD: typeof Titanium$UI$KEYBOARD_PHONE_PAD,
KEYBOARD_URL: typeof Titanium$UI$KEYBOARD_URL,
KEYBOARD_TYPE_DECIMAL_PAD: typeof Titanium$UI$KEYBOARD_TYPE_DECIMAL_PAD,
KEYBOARD_TYPE_ASCII: typeof Titanium$UI$KEYBOARD_TYPE_ASCII,
KEYBOARD_TYPE_DEFAULT: typeof Titanium$UI$KEYBOARD_TYPE_DEFAULT,
KEYBOARD_TYPE_EMAIL: typeof Titanium$UI$KEYBOARD_TYPE_EMAIL,
KEYBOARD_TYPE_NAMEPHONE_PAD: typeof Titanium$UI$KEYBOARD_TYPE_NAMEPHONE_PAD,
KEYBOARD_TYPE_NUMBERS_PUNCTUATION: typeof Titanium$UI$KEYBOARD_TYPE_NUMBERS_PUNCTUATION,
KEYBOARD_TYPE_NUMBER_PAD: typeof Titanium$UI$KEYBOARD_TYPE_NUMBER_PAD,
KEYBOARD_TYPE_PHONE_PAD: typeof Titanium$UI$KEYBOARD_TYPE_PHONE_PAD,
KEYBOARD_TYPE_WEBSEARCH: typeof Titanium$UI$KEYBOARD_TYPE_WEBSEARCH,
KEYBOARD_TYPE_TWITTER: typeof Titanium$UI$KEYBOARD_TYPE_TWITTER,
KEYBOARD_TYPE_URL: typeof Titanium$UI$KEYBOARD_TYPE_URL,
LANDSCAPE_LEFT: typeof Titanium$UI$LANDSCAPE_LEFT,
LANDSCAPE_RIGHT: typeof Titanium$UI$LANDSCAPE_RIGHT,
LIST_ACCESSORY_TYPE_NONE: typeof Titanium$UI$LIST_ACCESSORY_TYPE_NONE,
LIST_ACCESSORY_TYPE_CHECKMARK: typeof Titanium$UI$LIST_ACCESSORY_TYPE_CHECKMARK,
LIST_ACCESSORY_TYPE_DETAIL: typeof Titanium$UI$LIST_ACCESSORY_TYPE_DETAIL,
LIST_ACCESSORY_TYPE_DISCLOSURE: typeof Titanium$UI$LIST_ACCESSORY_TYPE_DISCLOSURE,
LIST_ITEM_TEMPLATE_DEFAULT: typeof Titanium$UI$LIST_ITEM_TEMPLATE_DEFAULT,
LIST_ITEM_TEMPLATE_SETTINGS: typeof Titanium$UI$LIST_ITEM_TEMPLATE_SETTINGS,
LIST_ITEM_TEMPLATE_CONTACTS: typeof Titanium$UI$LIST_ITEM_TEMPLATE_CONTACTS,
LIST_ITEM_TEMPLATE_SUBTITLE: typeof Titanium$UI$LIST_ITEM_TEMPLATE_SUBTITLE,
NOTIFICATION_DURATION_LONG: typeof Titanium$UI$NOTIFICATION_DURATION_LONG,
NOTIFICATION_DURATION_SHORT: typeof Titanium$UI$NOTIFICATION_DURATION_SHORT,
CLIPBOARD_OPTION_LOCAL_ONLY: typeof Titanium$UI$CLIPBOARD_OPTION_LOCAL_ONLY,
CLIPBOARD_OPTION_EXPIRATION_DATE: typeof Titanium$UI$CLIPBOARD_OPTION_EXPIRATION_DATE,
PICKER_TYPE_COUNT_DOWN_TIMER: typeof Titanium$UI$PICKER_TYPE_COUNT_DOWN_TIMER,
PICKER_TYPE_DATE: typeof Titanium$UI$PICKER_TYPE_DATE,
PICKER_TYPE_DATE_AND_TIME: typeof Titanium$UI$PICKER_TYPE_DATE_AND_TIME,
PICKER_TYPE_PLAIN: typeof Titanium$UI$PICKER_TYPE_PLAIN,
PICKER_TYPE_TIME: typeof Titanium$UI$PICKER_TYPE_TIME,
PORTRAIT: typeof Titanium$UI$PORTRAIT,
RETURNKEY_CONTINUE: typeof Titanium$UI$RETURNKEY_CONTINUE,
RETURNKEY_DEFAULT: typeof Titanium$UI$RETURNKEY_DEFAULT,
RETURNKEY_DONE: typeof Titanium$UI$RETURNKEY_DONE,
RETURNKEY_EMERGENCY_CALL: typeof Titanium$UI$RETURNKEY_EMERGENCY_CALL,
RETURNKEY_GO: typeof Titanium$UI$RETURNKEY_GO,
RETURNKEY_GOOGLE: typeof Titanium$UI$RETURNKEY_GOOGLE,
RETURNKEY_JOIN: typeof Titanium$UI$RETURNKEY_JOIN,
RETURNKEY_NEXT: typeof Titanium$UI$RETURNKEY_NEXT,
RETURNKEY_ROUTE: typeof Titanium$UI$RETURNKEY_ROUTE,
RETURNKEY_SEARCH: typeof Titanium$UI$RETURNKEY_SEARCH,
RETURNKEY_SEND: typeof Titanium$UI$RETURNKEY_SEND,
RETURNKEY_YAHOO: typeof Titanium$UI$RETURNKEY_YAHOO,
SIZE: typeof Titanium$UI$SIZE,
TABLE_VIEW_SEPARATOR_STYLE_NONE: typeof Titanium$UI$TABLE_VIEW_SEPARATOR_STYLE_NONE,
TABLE_VIEW_SEPARATOR_STYLE_SINGLE_LINE: typeof Titanium$UI$TABLE_VIEW_SEPARATOR_STYLE_SINGLE_LINE,
TEXT_ALIGNMENT_CENTER: typeof Titanium$UI$TEXT_ALIGNMENT_CENTER,
TEXT_ALIGNMENT_JUSTIFY: typeof Titanium$UI$TEXT_ALIGNMENT_JUSTIFY,
TEXT_ALIGNMENT_LEFT: typeof Titanium$UI$TEXT_ALIGNMENT_LEFT,
TEXT_ALIGNMENT_RIGHT: typeof Titanium$UI$TEXT_ALIGNMENT_RIGHT,
TEXT_AUTOCAPITALIZATION_ALL: typeof Titanium$UI$TEXT_AUTOCAPITALIZATION_ALL,
TEXT_AUTOCAPITALIZATION_NONE: typeof Titanium$UI$TEXT_AUTOCAPITALIZATION_NONE,
TEXT_AUTOCAPITALIZATION_SENTENCES: typeof Titanium$UI$TEXT_AUTOCAPITALIZATION_SENTENCES,
TEXT_AUTOCAPITALIZATION_WORDS: typeof Titanium$UI$TEXT_AUTOCAPITALIZATION_WORDS,
TEXT_STYLE_HEADLINE: typeof Titanium$UI$TEXT_STYLE_HEADLINE,
TEXT_STYLE_SUBHEADLINE: typeof Titanium$UI$TEXT_STYLE_SUBHEADLINE,
TEXT_STYLE_BODY: typeof Titanium$UI$TEXT_STYLE_BODY,
TEXT_STYLE_FOOTNOTE: typeof Titanium$UI$TEXT_STYLE_FOOTNOTE,
TEXT_STYLE_CAPTION1: typeof Titanium$UI$TEXT_STYLE_CAPTION1,
TEXT_STYLE_CAPTION2: typeof Titanium$UI$TEXT_STYLE_CAPTION2,
TEXT_STYLE_CALLOUT: typeof Titanium$UI$TEXT_STYLE_CALLOUT,
TEXT_STYLE_TITLE1: typeof Titanium$UI$TEXT_STYLE_TITLE1,
TEXT_STYLE_TITLE2: typeof Titanium$UI$TEXT_STYLE_TITLE2,
TEXT_STYLE_TITLE3: typeof Titanium$UI$TEXT_STYLE_TITLE3,
TEXT_VERTICAL_ALIGNMENT_BOTTOM: typeof Titanium$UI$TEXT_VERTICAL_ALIGNMENT_BOTTOM,
TEXT_VERTICAL_ALIGNMENT_CENTER: typeof Titanium$UI$TEXT_VERTICAL_ALIGNMENT_CENTER,
TEXT_VERTICAL_ALIGNMENT_TOP: typeof Titanium$UI$TEXT_VERTICAL_ALIGNMENT_TOP,
UNIT_CM: typeof Titanium$UI$UNIT_CM,
UNIT_DIP: typeof Titanium$UI$UNIT_DIP,
UNIT_IN: typeof Titanium$UI$UNIT_IN,
UNIT_MM: typeof Titanium$UI$UNIT_MM,
UNIT_PX: typeof Titanium$UI$UNIT_PX,
UNKNOWN: typeof Titanium$UI$UNKNOWN,
UPSIDE_PORTRAIT: typeof Titanium$UI$UPSIDE_PORTRAIT,
URL_ERROR_AUTHENTICATION: typeof Titanium$UI$URL_ERROR_AUTHENTICATION,
URL_ERROR_BAD_URL: typeof Titanium$UI$URL_ERROR_BAD_URL,
URL_ERROR_CONNECT: typeof Titanium$UI$URL_ERROR_CONNECT,
URL_ERROR_SSL_FAILED: typeof Titanium$UI$URL_ERROR_SSL_FAILED,
URL_ERROR_FILE: typeof Titanium$UI$URL_ERROR_FILE,
URL_ERROR_FILE_NOT_FOUND: typeof Titanium$UI$URL_ERROR_FILE_NOT_FOUND,
URL_ERROR_HOST_LOOKUP: typeof Titanium$UI$URL_ERROR_HOST_LOOKUP,
URL_ERROR_REDIRECT_LOOP: typeof Titanium$UI$URL_ERROR_REDIRECT_LOOP,
URL_ERROR_TIMEOUT: typeof Titanium$UI$URL_ERROR_TIMEOUT,
URL_ERROR_UNKNOWN: typeof Titanium$UI$URL_ERROR_UNKNOWN,
URL_ERROR_UNSUPPORTED_SCHEME: typeof Titanium$UI$URL_ERROR_UNSUPPORTED_SCHEME,
backgroundColor: typeof Titanium$UI$backgroundColor,
backgroundImage: typeof Titanium$UI$backgroundImage,
currentTab: typeof Titanium$UI$currentTab,
currentWindow: typeof Titanium$UI$currentWindow,
orientation: typeof Titanium$UI$orientation,
tintColor: typeof Titanium$UI$tintColor,
        
        
        ActivityIndicatorStyle: typeof npm$namespace$Titanium$UI$ActivityIndicatorStyle,
Android: typeof npm$namespace$Titanium$UI$Android,
Clipboard: typeof npm$namespace$Titanium$UI$Clipboard,
iOS: typeof npm$namespace$Titanium$UI$iOS,
iPad: typeof npm$namespace$Titanium$UI$iPad,
iPhone: typeof npm$namespace$Titanium$UI$iPhone,
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$UI$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that starts
 * slowly and speeds up.
 */
declare var Titanium$UI$ANIMATION_CURVE_EASE_IN: number;


/**
 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that starts
 * slowly, and speeds up, then slows down at the end of the animation.
 */
declare var Titanium$UI$ANIMATION_CURVE_EASE_IN_OUT: number;


/**
 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that starts
 * quickly, then slows down at the end of the animation.
 */
declare var Titanium$UI$ANIMATION_CURVE_EASE_OUT: number;


/**
 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that proceeds
 * at a constant rate.
 */
declare var Titanium$UI$ANIMATION_CURVE_LINEAR: number;


/**
 * Use with <Attribute.type> to specify a font.
 */
declare var Titanium$UI$ATTRIBUTE_FONT: number;


/**
 * Use with <Attribute.type> to specify a font color.
 */
declare var Titanium$UI$ATTRIBUTE_FOREGROUND_COLOR: number;


/**
 * Use with <Attribute.type> to specify a background color.
 */
declare var Titanium$UI$ATTRIBUTE_BACKGROUND_COLOR: number;


/**
 * Use with <Attribute.type> to enable or disable ligatures.
 */
declare var Titanium$UI$ATTRIBUTE_LIGATURE: number;


/**
 * Use with <Attribute.value> to use a letterpress text effect.
 */
declare var Titanium$UI$ATTRIBUTE_LETTERPRESS_STYLE: number;


/**
 * Use with <Attribute.type> to specify kerning (space between characters).
 */
declare var Titanium$UI$ATTRIBUTE_KERN: number;


/**
 * Use with <Attribute.type> to place a horizontal line through the text.
 */
declare var Titanium$UI$ATTRIBUTE_STRIKETHROUGH_STYLE: number;


/**
 * Use with <Attribute.type> to place a horizontal line under the text.
 */
declare var Titanium$UI$ATTRIBUTE_UNDERLINES_STYLE: number;


/**
 * Use with <Attribute.type> to place the text in an upper position.
 */
declare var Titanium$UI$ATTRIBUTE_SUPERSCRIPT_STYLE: number;


/**
 * Use with <Attribute.type> to place the text in a lower position.
 */
declare var Titanium$UI$ATTRIBUTE_SUBSCRIPT_STYLE: number;


/**
 * Use with <Attribute.type> to specify a color for the stroke text.
 */
declare var Titanium$UI$ATTRIBUTE_STROKE_COLOR: number;


/**
 * Use with <Attribute.type> to manages the behaviour of string set.
 */
declare var Titanium$UI$ATTRIBUTE_PARAGRAPH_STYLE: number;


/**
 * Use with <Attribute.type> to specify the width of the stroke text.
 */
declare var Titanium$UI$ATTRIBUTE_STROKE_WIDTH: number;


/**
 * Use with <Attribute.type> to display a shadow behind the text.
 */
declare var Titanium$UI$ATTRIBUTE_SHADOW: number;


/**
 * Use with <Attribute.type> to control the direction of the text.
 */
declare var Titanium$UI$ATTRIBUTE_WRITING_DIRECTION: number;


/**
 * Use with <Attribute.type> to apply a text effect.
 */
declare var Titanium$UI$ATTRIBUTE_TEXT_EFFECT: number;


/**
 * Use with <Attribute.type> to create a link.
 */
declare var Titanium$UI$ATTRIBUTE_LINK: number;


/**
 * Use with <Attribute.type> to apply a different baseline to the text.
 */
declare var Titanium$UI$ATTRIBUTE_BASELINE_OFFSET: number;


/**
 * Use with <Attribute.type> to change the color of the horizontal line.
 */
declare var Titanium$UI$ATTRIBUTE_UNDERLINE_COLOR: number;


/**
 * Use with <Attribute.type> to change the color of the horizontal line.
 */
declare var Titanium$UI$ATTRIBUTE_STRIKETHROUGH_COLOR: number;


/**
 * Use with <Attribute.type> to skew the text.
 */
declare var Titanium$UI$ATTRIBUTE_OBLIQUENESS: number;


/**
 * Use with <Attribute.type> to stretch the text horizontally.
 */
declare var Titanium$UI$ATTRIBUTE_EXPANSION: number;


/**
 * Use with <Attribute.type> to wrap and truncate the text.
 */
declare var Titanium$UI$ATTRIBUTE_LINE_BREAK: number;


/**
 * Use with <Attribute.value> to not draw a line.
 */
declare var Titanium$UI$ATTRIBUTE_UNDERLINE_STYLE_NONE: number;


/**
 * Use with <Attribute.value> to draw a single line.
 */
declare var Titanium$UI$ATTRIBUTE_UNDERLINE_STYLE_SINGLE: number;


/**
 * Use with <Attribute.value> to draw a thick line.
 */
declare var Titanium$UI$ATTRIBUTE_UNDERLINE_STYLE_THICK: number;


/**
 * Use with <Attribute.value> to draw a double line.
 */
declare var Titanium$UI$ATTRIBUTE_UNDERLINE_STYLE_DOUBLE: number;


/**
 * Use with <Attribute.value> to draw a solid line.
 */
declare var Titanium$UI$ATTRIBUTE_UNDERLINE_PATTERN_SOLID: number;


/**
 * Use with <Attribute.value> to draw a dotted line.
 */
declare var Titanium$UI$ATTRIBUTE_UNDERLINE_PATTERN_DOT: number;


/**
 * Use with <Attribute.value> to draw a dashed line.
 */
declare var Titanium$UI$ATTRIBUTE_UNDERLINE_PATTERN_DASH: number;


/**
 * Use with <Attribute.value> to draw an alternating line of dashes and dots.
 */
declare var Titanium$UI$ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT: number;


/**
 * Use with <Attribute.value> to draw an alternating line of dashes and two dots.
 */
declare var Titanium$UI$ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT_DOT: number;


/**
 * Use with <Attribute.value> to draw a line only underneath or through words.
 */
declare var Titanium$UI$ATTRIBUTE_UNDERLINE_BY_WORD: number;


/**
 * Use with <Attribute.value> to use the embedded text direction.
 */
declare var Titanium$UI$ATTRIBUTE_WRITING_DIRECTION_EMBEDDING: number;


/**
 * Use with <Attribute.value> to override the text direction.
 */
declare var Titanium$UI$ATTRIBUTE_WRITING_DIRECTION_OVERRIDE: number;


/**
 * Use with <Attribute.value> to use the
 * [Unicode Bidirection Algorithm rules P2 and P3](http://www.unicode.org/reports/tr9/#The_Paragraph_Level)
 * to determine which direction to use.
 */
declare var Titanium$UI$ATTRIBUTE_WRITING_DIRECTION_NATURAL: number;


/**
 * Use with <Attribute.value> to write text left to right.
 */
declare var Titanium$UI$ATTRIBUTE_WRITING_DIRECTION_LEFT_TO_RIGHT: number;


/**
 * Use with <Attribute.value> to write text right to left.
 */
declare var Titanium$UI$ATTRIBUTE_WRITING_DIRECTION_RIGHT_TO_LEFT: number;


/**
 * Use with <Attribute.value> to wrap words at word boundaries.
 */
declare var Titanium$UI$ATTRIBUTE_LINE_BREAK_BY_WORD_WRAPPING: number;


/**
 * Use with <Attribute.value> to wrap words at word boundaries.
 */
declare var Titanium$UI$ATTRIBUTE_LINE_BREAK_BY_CHAR_WRAPPING: number;


/**
 * Use with <Attribute.value> to set lines to not draw past the edge of the text container.
 */
declare var Titanium$UI$ATTRIBUTE_LINE_BREAK_BY_CLIPPING: number;


/**
 * Use with <Attribute.value> to use ellipsis glyph at the beginning of the line for missing text.
 */
declare var Titanium$UI$ATTRIBUTE_LINE_BREAK_BY_TRUNCATING_HEAD: number;


/**
 * Use with <Attribute.value> to use ellipsis glyph at the middle of the line for missing text.
 */
declare var Titanium$UI$ATTRIBUTE_LINE_BREAK_BY_TRUNCATING_MIDDLE: number;


/**
 * Use with <Attribute.value> to use ellipsis glyph at the end of the line for missing text.
 */
declare var Titanium$UI$ATTRIBUTE_LINE_BREAK_BY_TRUNCATING_TAIL: number;


/**
 * Converts strings formatted as addresses into clickable links.
 */
declare var Titanium$UI$AUTODETECT_ADDRESS: number;


/**
 * Converts all detectable types of data into clickable links.
 */
declare var Titanium$UI$AUTODETECT_ALL: number;


/**
 * Converts strings formatted as calendar events into clickable links.
 */
declare var Titanium$UI$AUTODETECT_CALENDAR: number;


/**
 * Converts strings formatted as URLs into clickable links.
 */
declare var Titanium$UI$AUTODETECT_LINK: number;


/**
 * Disables converting strings into clickable links.
 */
declare var Titanium$UI$AUTODETECT_NONE: number;


/**
 * Converts strings formatted as phone numbers into clickable links.
 */
declare var Titanium$UI$AUTODETECT_PHONE: number;


/**
 * Specifies the expectation of an account or login name.
 */
declare var Titanium$UI$AUTOFILL_TYPE_USERNAME: string;


/**
 * Specifies the expectation of a password.
 */
declare var Titanium$UI$AUTOFILL_TYPE_PASSWORD: string;


/**
 * Specifies the expectation of a name.
 */
declare var Titanium$UI$AUTOFILL_TYPE_NAME: string;


/**
 * Specifies the expectation of a prefix or title, such as 'Dr.'
 */
declare var Titanium$UI$AUTOFILL_TYPE_NAME_PREFIX: string;


/**
 * Specifies the expectation of a given name.
 */
declare var Titanium$UI$AUTOFILL_TYPE_GIVEN_NAME: string;


/**
 * Specifies the expectation of a middle name.
 */
declare var Titanium$UI$AUTOFILL_TYPE_MIDDLE_NAME: string;


/**
 * Specifies the expectation of a family name.
 */
declare var Titanium$UI$AUTOFILL_TYPE_FAMILY_NAME: string;


/**
 * Specifies the expectation of a suffix, such as 'Jr.'
 */
declare var Titanium$UI$AUTOFILL_TYPE_NAME_SUFFIX: string;


/**
 * Specifies the expectation of a nickname.
 */
declare var Titanium$UI$AUTOFILL_TYPE_NICKNAME: string;


/**
 * Specifies the expectation of a job title.
 */
declare var Titanium$UI$AUTOFILL_TYPE_JOB_TITLE: string;


/**
 * Specifies the expectation of an organization name.
 */
declare var Titanium$UI$AUTOFILL_TYPE_ORGANIZATION_NAME: string;


/**
 * Specifies the expectation of a location, such as a point of interest, an address, or another way to identify a location.
 */
declare var Titanium$UI$AUTOFILL_TYPE_LOCATION: string;


/**
 * Specifies the expectation of an address.
 */
declare var Titanium$UI$AUTOFILL_TYPE_ADDRESS: string;


/**
 * Specifies the expectation of the first line of a street address.
 */
declare var Titanium$UI$AUTOFILL_TYPE_ADDRESS_LINE1: string;


/**
 * Specifies the expectation of the second line of a street address.
 */
declare var Titanium$UI$AUTOFILL_TYPE_ADDRESS_LINE2: string;


/**
 * Specifies the expectation of a city name.
 */
declare var Titanium$UI$AUTOFILL_TYPE_ADDRESS_CITY: string;


/**
 * Specifies the expectation of a state name.
 */
declare var Titanium$UI$AUTOFILL_TYPE_ADDRESS_STATE: string;


/**
 * Specifies the expectation of a city name combined with a state name.
 */
declare var Titanium$UI$AUTOFILL_TYPE_ADDRESS_CITY_STATE: string;


/**
 * Specifies the expectation of a sublocality.
 */
declare var Titanium$UI$AUTOFILL_TYPE_SUBLOCALITY: string;


/**
 * Specifies the expectation of a country name.
 */
declare var Titanium$UI$AUTOFILL_TYPE_COUNTRY_NAME: string;


/**
 * Specifies the expectation of a postal code.
 */
declare var Titanium$UI$AUTOFILL_TYPE_POSTAL_CODE: string;


/**
 * Specifies the expectation of a telephone number.
 */
declare var Titanium$UI$AUTOFILL_TYPE_PHONE: string;


/**
 * Specifies the expectation of an email address.
 */
declare var Titanium$UI$AUTOFILL_TYPE_EMAIL: string;


/**
 * Specifies the expectation of a URL.
 */
declare var Titanium$UI$AUTOFILL_TYPE_URL: string;


/**
 * Specifies the expectation of a card number.
 */
declare var Titanium$UI$AUTOFILL_TYPE_CARD_NUMBER: string;


/**
 * Specifies the expectation of a card security code.
 */
declare var Titanium$UI$AUTOFILL_TYPE_CARD_SECURITY_CODE: string;


/**
 * Specifies the expectation of a card expiration date.
 */
declare var Titanium$UI$AUTOFILL_TYPE_CARD_EXPIRATION_DATE: string;


/**
 * Specifies the expectation of a card expiration day.
 */
declare var Titanium$UI$AUTOFILL_TYPE_CARD_EXPIRATION_DAY: string;


/**
 * Specifies the expectation of a card expiration month.
 */
declare var Titanium$UI$AUTOFILL_TYPE_CARD_EXPIRATION_MONTH: string;


/**
 * Specifies the expectation of a card expiration year.
 */
declare var Titanium$UI$AUTOFILL_TYPE_CARD_EXPIRATION_YEAR: string;


/**
 * Specifies the expectation of a new password.
 */
declare var Titanium$UI$AUTOFILL_TYPE_NEW_PASSWORD: string;


/**
 * Specifies the expectation of a single-factor SMS login code.
 */
declare var Titanium$UI$AUTOFILL_TYPE_ONE_TIME_CODE: string;


/**
 * Converts strings formatted as addresses into clickable links.
 */
declare var Titanium$UI$AUTOLINK_MAP_ADDRESSES: number;


/**
 * Converts all detectable types of data into clickable links.
 */
declare var Titanium$UI$AUTOLINK_ALL: number;


/**
 * Converts strings formatted as calendar events into clickable links.
 */
declare var Titanium$UI$AUTOLINK_CALENDAR: number;


/**
 * Converts strings formatted as URLs into clickable links.
 */
declare var Titanium$UI$AUTOLINK_URLS: number;


/**
 * Disables converting strings into clickable links.
 */
declare var Titanium$UI$AUTOLINK_NONE: number;


/**
 * Converts strings formatted as phone numbers into clickable links.
 */
declare var Titanium$UI$AUTOLINK_PHONE_NUMBERS: number;


/**
 * Converts strings formatted as email addresses into clickable links.
 */
declare var Titanium$UI$AUTOLINK_EMAIL_ADDRESSES: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_CLEAR: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_COLOR: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_COLOR_BURN: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_COLOR_DODGE: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_COPY: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_DARKEN: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_DESTINATION_ATOP: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_DESTINATION_IN: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_DESTINATION_OUT: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_DESTINATION_OVER: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_DIFFERENCE: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_EXCLUSION: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_HARD_LIGHT: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_HUE: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_LIGHTEN: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_LUMINOSITY: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_MULTIPLY: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_NORMAL: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_OVERLAY: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_PLUS_DARKER: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_PLUS_LIGHTER: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_SATURATION: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_SCREEN: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_SOFT_LIGHT: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_SOURCE_ATOP: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_SOURCE_IN: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_SOURCE_OUT: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$BLEND_MODE_XOR: number;


/**
 * Use when creating a TextField to specify the hintType as static.
 */
declare var Titanium$UI$HINT_TYPE_STATIC: number;


/**
 * Use when creating a TextField to specify the hintType as animated.
 */
declare var Titanium$UI$HINT_TYPE_ANIMATED: number;


/**
 * Add ellipses at word boundaries, unless the word itself doesn't fit on a single line.
 */
declare var Titanium$UI$TEXT_ELLIPSIZE_TRUNCATE_WORD_WRAP: number;


/**
 * Add ellipses before the first character that doesnt fit.
 */
declare var Titanium$UI$TEXT_ELLIPSIZE_TRUNCATE_CHAR_WRAP: number;


/**
 * Lines are simply not drawn past the edge of the text container.
 */
declare var Titanium$UI$TEXT_ELLIPSIZE_TRUNCATE_CLIP: number;


/**
 * Add ellipses at the beginning of the label if the text is too large to fit.
 */
declare var Titanium$UI$TEXT_ELLIPSIZE_TRUNCATE_START: number;


/**
 * Add ellipses in the middle of the label if the text is too large to fit.
 */
declare var Titanium$UI$TEXT_ELLIPSIZE_TRUNCATE_MIDDLE: number;


/**
 * Add ellipses at the end of the label if the text is too large to fit.
 */
declare var Titanium$UI$TEXT_ELLIPSIZE_TRUNCATE_END: number;


/**
 * Turns on a marquee effect of the label if the text is too large to fit. (This requires <Titanium.UI.Label.focusable> to be true)
 */
declare var Titanium$UI$TEXT_ELLIPSIZE_TRUNCATE_MARQUEE: number;


/**
 * Disables ellipsizing of the label. The text will be cut off if it is too long.
 */
declare var Titanium$UI$TEXT_ELLIPSIZE_TRUNCATE_NONE: number;


/**
 * Specifies that the top edge of the window can extend.
 */
declare var Titanium$UI$EXTEND_EDGE_TOP: number;


/**
 * Specifies that the bottom edge of the window can extend.
 */
declare var Titanium$UI$EXTEND_EDGE_BOTTOM: number;


/**
 * Specifies that the left edge of the window can extend.
 */
declare var Titanium$UI$EXTEND_EDGE_LEFT: number;


/**
 * Specifies that the right edge of the window can extend.
 */
declare var Titanium$UI$EXTEND_EDGE_RIGHT: number;


/**
 * Specifies that none of the edges of the window can extend.
 */
declare var Titanium$UI$EXTEND_EDGE_NONE: number;


/**
 * Specifies that all the edges of the window can extend.
 */
declare var Titanium$UI$EXTEND_EDGE_ALL: number;


/**
 * Constant value for face-down orientation.
 */
declare var Titanium$UI$FACE_DOWN: number;


/**
 * Constant value for face-up orientation.
 */
declare var Titanium$UI$FACE_UP: number;


/**
 * FILL behavior for UI layout.
 */
declare var Titanium$UI$FILL: string;


/**
 * Release free space when hiding an object.
 */
declare var Titanium$UI$HIDDEN_BEHAVIOR_GONE: number;


/**
 * Keeps free space when hiding an object.
 */
declare var Titanium$UI$HIDDEN_BEHAVIOR_INVISIBLE: number;


/**
 * Use a bezel-style border on the input field.
 */
declare var Titanium$UI$INPUT_BORDERSTYLE_BEZEL: number;


/**
 * Use a simple line border on the input field.
 */
declare var Titanium$UI$INPUT_BORDERSTYLE_LINE: number;


/**
 * Use no border on the input field.
 */
declare var Titanium$UI$INPUT_BORDERSTYLE_NONE: number;


/**
 * Use a rounded-rectangle border on the input field.
 */
declare var Titanium$UI$INPUT_BORDERSTYLE_ROUNDED: number;


/**
 * Always show buttons on the input field.
 */
declare var Titanium$UI$INPUT_BUTTONMODE_ALWAYS: number;


/**
 * Never show buttons on the input field.
 */
declare var Titanium$UI$INPUT_BUTTONMODE_NEVER: number;


/**
 * Show buttons on the input field when it loses focus.
 */
declare var Titanium$UI$INPUT_BUTTONMODE_ONBLUR: number;


/**
 * Show buttons on the input field when it gains focus.
 */
declare var Titanium$UI$INPUT_BUTTONMODE_ONFOCUS: number;


/**
 * Use a keyboard with a number pad only, with the pad keyboard layout. Accepts only numbers.
 */
declare var Titanium$UI$INPUT_TYPE_CLASS_NUMBER: number;


/**
 * Use an ASCII keyboard, with the standard keyboard layout.
 */
declare var Titanium$UI$INPUT_TYPE_CLASS_TEXT: number;


/**
 * Use a keyboard appearance suitable for entering text on an alert.
 */
declare var Titanium$UI$KEYBOARD_APPEARANCE_ALERT: number;


/**
 * Use the platform-specific default keyboard appearance.
 */
declare var Titanium$UI$KEYBOARD_APPEARANCE_DEFAULT: number;


/**
 * Use the platform-specific dark keyboard appearance.
 */
declare var Titanium$UI$KEYBOARD_APPEARANCE_DARK: number;


/**
 * Use the platform-specific light keyboard appearance.
 */
declare var Titanium$UI$KEYBOARD_APPEARANCE_LIGHT: number;


/**
 * Use an ASCII keyboard, with the standard keyboard layout.
 */
declare var Titanium$UI$KEYBOARD_ASCII: number;


/**
 * Use a keyboard with decimal numbers only, with the pad keyboard layout.
 */
declare var Titanium$UI$KEYBOARD_DECIMAL_PAD: number;


/**
 * Use the default keyboard, depending on the platform.
 */
declare var Titanium$UI$KEYBOARD_DEFAULT: number;


/**
 * Use a keyboard suitable for composing email, with the standard keyboard layout.
 */
declare var Titanium$UI$KEYBOARD_EMAIL: number;


/**
 * Use a keyboard suitable for entering names and phone numbers, with the pad keyboard layout.
 */
declare var Titanium$UI$KEYBOARD_NAMEPHONE_PAD: number;


/**
 * Use a keyboard with numbers and punctuation only, with the standard keyboard layout.
 */
declare var Titanium$UI$KEYBOARD_NUMBERS_PUNCTUATION: number;


/**
 * Use a keyboard with a number pad only, with the pad keyboard layout.
 */
declare var Titanium$UI$KEYBOARD_NUMBER_PAD: number;


/**
 * Use a keyboard with a phone-style number pad, with the pad keyboard layout.
 */
declare var Titanium$UI$KEYBOARD_PHONE_PAD: number;


/**
 * Use a keyboard optimized for entering URLs, with the standard keyboard layout.
 */
declare var Titanium$UI$KEYBOARD_URL: number;


/**
 * Use a keyboard with decimal numbers only, with the pad keyboard layout.
 */
declare var Titanium$UI$KEYBOARD_TYPE_DECIMAL_PAD: number;


/**
 * Use an ASCII keyboard, with the standard keyboard layout.
 */
declare var Titanium$UI$KEYBOARD_TYPE_ASCII: number;


/**
 * Use the default keyboard, depending on the platform.
 */
declare var Titanium$UI$KEYBOARD_TYPE_DEFAULT: number;


/**
 * Use a keyboard suitable for composing email, with the standard keyboard layout.
 */
declare var Titanium$UI$KEYBOARD_TYPE_EMAIL: number;


/**
 * Use a keyboard suitable for entering names and phone numbers, with the pad keyboard layout.
 */
declare var Titanium$UI$KEYBOARD_TYPE_NAMEPHONE_PAD: number;


/**
 * Use a keyboard with numbers and punctuation only, with the standard keyboard layout.
 */
declare var Titanium$UI$KEYBOARD_TYPE_NUMBERS_PUNCTUATION: number;


/**
 * Use a keyboard with a number pad only, with the pad keyboard layout.
 */
declare var Titanium$UI$KEYBOARD_TYPE_NUMBER_PAD: number;


/**
 * Use a keyboard with a phone-style number pad, with the pad keyboard layout.
 */
declare var Titanium$UI$KEYBOARD_TYPE_PHONE_PAD: number;


/**
 * Use a keyboard optimized for web search terms and URL entry.
 */
declare var Titanium$UI$KEYBOARD_TYPE_WEBSEARCH: number;


/**
 * Use a keyboard optimized for twitter text entry, with easy access to the @ and
 */
declare var Titanium$UI$KEYBOARD_TYPE_TWITTER: number;


/**
 * Use a keyboard optimized for entering URLs, with the standard keyboard layout.
 */
declare var Titanium$UI$KEYBOARD_TYPE_URL: number;


/**
 * Standard landscape orientation (home button on left).
 */
declare var Titanium$UI$LANDSCAPE_LEFT: number;


/**
 * Reverse landscape orientation (home button on right).
 */
declare var Titanium$UI$LANDSCAPE_RIGHT: number;


/**
 * Do not display anything on the right side of an item in a list view.
 */
declare var Titanium$UI$LIST_ACCESSORY_TYPE_NONE: number;


/**
 * Displays a checkmark on the right side of an item in a list view.
 */
declare var Titanium$UI$LIST_ACCESSORY_TYPE_CHECKMARK: number;


/**
 * Displays a detail disclosure button on the right side of an item in a list view.
 */
declare var Titanium$UI$LIST_ACCESSORY_TYPE_DETAIL: number;


/**
 * Displays a disclosure indicator on the right side of an item in a list view.
 */
declare var Titanium$UI$LIST_ACCESSORY_TYPE_DISCLOSURE: number;


/**
 * A built-in style for an item with an image view and left-aligned title label.
 */
declare var Titanium$UI$LIST_ITEM_TEMPLATE_DEFAULT: number;


/**
 * A built-in style for a item with an image view; a left-aligned title label; and a
 * right-aligned subtitle label.
 */
declare var Titanium$UI$LIST_ITEM_TEMPLATE_SETTINGS: number;


/**
 * A built-in style for an item with a right-aligned title label on the left side of the cell,
 * which is next to a left-aligned subtitle label.
 */
declare var Titanium$UI$LIST_ITEM_TEMPLATE_CONTACTS: number;


/**
 * A built-in style for an item with an image view; a black, left-aligned title label across the
 * top of the cell and a subtitle label below it.
 */
declare var Titanium$UI$LIST_ITEM_TEMPLATE_SUBTITLE: number;


/**
 * Specifies a long duration for an Android Toast notification (<Titanium.UI.Notification>).
 */
declare var Titanium$UI$NOTIFICATION_DURATION_LONG: number;


/**
 * Specifies a short duration for an Android Toast notification (<Titanium.UI.Notification>).
 */
declare var Titanium$UI$NOTIFICATION_DURATION_SHORT: number;


/**
 * Specifies that the clipboard items should not be available to other devices through Handoff.
 */
declare var Titanium$UI$CLIPBOARD_OPTION_LOCAL_ONLY: string;


/**
 * Specifies the time and date that you want the system to remove the clipboard items from the clipboard.
 */
declare var Titanium$UI$CLIPBOARD_OPTION_EXPIRATION_DATE: string;


/**
 * Use a picker with a countdown timer appearance, showing hours and minutes.
 */
declare var Titanium$UI$PICKER_TYPE_COUNT_DOWN_TIMER: number;


/**
 * Use a date picker.
 */
declare var Titanium$UI$PICKER_TYPE_DATE: number;


/**
 * Use a date and time picker.
 */
declare var Titanium$UI$PICKER_TYPE_DATE_AND_TIME: number;


/**
 * Use a plain picker (for values other than date or time).
 */
declare var Titanium$UI$PICKER_TYPE_PLAIN: number;


/**
 * Use a time picker.
 */
declare var Titanium$UI$PICKER_TYPE_TIME: number;


/**
 * Orientation constant for portrait mode orientation.
 */
declare var Titanium$UI$PORTRAIT: number;


/**
 * Set the return key text to "Continue".
 */
declare var Titanium$UI$RETURNKEY_CONTINUE: number;


/**
 * Use the default return key on the virtual keyboard.
 */
declare var Titanium$UI$RETURNKEY_DEFAULT: number;


/**
 * Set the return key text to "Done".
 */
declare var Titanium$UI$RETURNKEY_DONE: number;


/**
 * Set the return key text to "Emergency Call".
 */
declare var Titanium$UI$RETURNKEY_EMERGENCY_CALL: number;


/**
 * Set the return key text to "Go".
 */
declare var Titanium$UI$RETURNKEY_GO: number;


/**
 * Set the return key text to "Google".
 */
declare var Titanium$UI$RETURNKEY_GOOGLE: number;


/**
 * Set the return key text to "Join".
 */
declare var Titanium$UI$RETURNKEY_JOIN: number;


/**
 * Set the return key text to "Next".
 */
declare var Titanium$UI$RETURNKEY_NEXT: number;


/**
 * Set the return key text to "Route".
 */
declare var Titanium$UI$RETURNKEY_ROUTE: number;


/**
 * Set the return key text to "Search".
 */
declare var Titanium$UI$RETURNKEY_SEARCH: number;


/**
 * Set the return key text to "Send".
 */
declare var Titanium$UI$RETURNKEY_SEND: number;


/**
 * Set the return key text to "Yahoo".
 */
declare var Titanium$UI$RETURNKEY_YAHOO: number;


/**
 * SIZE behavior for UI layout.
 */
declare var Titanium$UI$SIZE: string;


/**
 * The row divider is hidden.
 */
declare var Titanium$UI$TABLE_VIEW_SEPARATOR_STYLE_NONE: number;


/**
 * The row divider is shown as a single line.
 */
declare var Titanium$UI$TABLE_VIEW_SEPARATOR_STYLE_SINGLE_LINE: number;


/**
 * Center align text.
 */
declare var Titanium$UI$TEXT_ALIGNMENT_CENTER: number | string;


/**
 * Justify align text.
 */
declare var Titanium$UI$TEXT_ALIGNMENT_JUSTIFY: number | string;


/**
 * Left align text.
 */
declare var Titanium$UI$TEXT_ALIGNMENT_LEFT: number | string;


/**
 * Right align text.
 */
declare var Titanium$UI$TEXT_ALIGNMENT_RIGHT: number | string;


/**
 * Auto-capitalize all text in the input field.
 */
declare var Titanium$UI$TEXT_AUTOCAPITALIZATION_ALL: number;


/**
 * Do not auto-capitalize.
 */
declare var Titanium$UI$TEXT_AUTOCAPITALIZATION_NONE: number;


/**
 * Use sentence-style auto-capitalization in the input field.
 */
declare var Titanium$UI$TEXT_AUTOCAPITALIZATION_SENTENCES: number;


/**
 * Auto-capitalize the first letter of each word in the input field.
 */
declare var Titanium$UI$TEXT_AUTOCAPITALIZATION_WORDS: number;


/**
 * Specifies the text style for the <Font> Object.
 */
declare var Titanium$UI$TEXT_STYLE_HEADLINE: string;


/**
 * Specifies the text style for the <Font> Object.
 */
declare var Titanium$UI$TEXT_STYLE_SUBHEADLINE: string;


/**
 * Specifies the text style for the <Font> Object.
 */
declare var Titanium$UI$TEXT_STYLE_BODY: string;


/**
 * Specifies the text style for the <Font> Object.
 */
declare var Titanium$UI$TEXT_STYLE_FOOTNOTE: string;


/**
 * Specifies the text style for the <Font> Object.
 */
declare var Titanium$UI$TEXT_STYLE_CAPTION1: string;


/**
 * Specifies the text style for the <Font> Object.
 */
declare var Titanium$UI$TEXT_STYLE_CAPTION2: string;


/**
 * Specifies the text style for the <Font> Object.
 */
declare var Titanium$UI$TEXT_STYLE_CALLOUT: string;


/**
 * Specifies the text style for the <Font> Object.
 */
declare var Titanium$UI$TEXT_STYLE_TITLE1: string;


/**
 * Specifies the text style for the <Font> Object.
 */
declare var Titanium$UI$TEXT_STYLE_TITLE2: string;


/**
 * Specifies the text style for the <Font> Object.
 */
declare var Titanium$UI$TEXT_STYLE_TITLE3: string;


/**
 * Align text to the bottom of the view.
 */
declare var Titanium$UI$TEXT_VERTICAL_ALIGNMENT_BOTTOM: number | string;


/**
 * Vertically align text to the center of the view.
 */
declare var Titanium$UI$TEXT_VERTICAL_ALIGNMENT_CENTER: number | string;


/**
 * Align text to the top of the view.
 */
declare var Titanium$UI$TEXT_VERTICAL_ALIGNMENT_TOP: number | string;


/**
 * Unit constant representing units in centimeters.
 */
declare var Titanium$UI$UNIT_CM: string;


/**
 * Unit constant representing units in density-independent pixels.
 */
declare var Titanium$UI$UNIT_DIP: string;


/**
 * Unit constant representing units in inches.
 */
declare var Titanium$UI$UNIT_IN: string;


/**
 * Unit constant representing units in millimeters.
 */
declare var Titanium$UI$UNIT_MM: string;


/**
 * Unit constant representing units in pixels.
 */
declare var Titanium$UI$UNIT_PX: string;


/**
 * Orientation constant representing an unknown orientation.
 */
declare var Titanium$UI$UNKNOWN: number;


/**
 * Orientation constant for inverted portait orientation.
 */
declare var Titanium$UI$UPSIDE_PORTRAIT: number;


/**
 * Authentication error code reported via <Titanium.UI.WebView.error>.
 */
declare var Titanium$UI$URL_ERROR_AUTHENTICATION: number;


/**
 * Bad url error code reported via <Titanium.UI.WebView.error>.
 */
declare var Titanium$UI$URL_ERROR_BAD_URL: number;


/**
 * Error code reported via <Titanium.UI.WebView.error> for a failure to connect to host.
 */
declare var Titanium$UI$URL_ERROR_CONNECT: number;


/**
 * Error code reported via <Titanium.UI.WebView.error> for an SSL failure.
 */
declare var Titanium$UI$URL_ERROR_SSL_FAILED: number;


/**
 * Error code reported via <Titanium.UI.WebView.error> for a failure to access a file resource on a host, except "file not found", which has its own constant.
 */
declare var Titanium$UI$URL_ERROR_FILE: number;


/**
 * Error code reported via <Titanium.UI.WebView.error> when a requested file does not exist on the host.
 */
declare var Titanium$UI$URL_ERROR_FILE_NOT_FOUND: number;


/**
 * Error code reported via <Titanium.UI.WebView.error> when a host name cannot be resolved, such as via a DNS lookup error.
 */
declare var Titanium$UI$URL_ERROR_HOST_LOOKUP: number;


/**
 * Error code reported via <Titanium.UI.WebView.error> when a redirect loop is detected.
 */
declare var Titanium$UI$URL_ERROR_REDIRECT_LOOP: number;


/**
 * Error code reported via <Titanium.UI.WebView.error> when a timeout occurs.
 */
declare var Titanium$UI$URL_ERROR_TIMEOUT: number;


/**
 * Error code reported via <Titanium.UI.WebView.error> when an unknown error occurs.
 */
declare var Titanium$UI$URL_ERROR_UNKNOWN: number;


/**
 * Error code reported via <Titanium.UI.WebView.error> when a url contains an unsupported scheme.
 */
declare var Titanium$UI$URL_ERROR_UNSUPPORTED_SCHEME: number;


/**
 * Sets the background color of the master view (when there are no windows or other top-level
 * controls displayed).
 */
declare var Titanium$UI$backgroundColor: string;


/**
 * Local path or URL to an image file for setting a background for the master view (when there
 * are no windows or other top-level controls displayed).
 */
declare var Titanium$UI$backgroundImage: string;


/**
 * The currently active tab, if a tab group is open.
 */
declare var Titanium$UI$currentTab: Titanium$UI$Tab;


/**
 * The active window associated with the executing JavaScript context.
 */
declare var Titanium$UI$currentWindow: Titanium$UI$Window;


/**
 * Updates the orientation of the current window to the specified orientation value.
 */
declare var Titanium$UI$orientation: number;


/**
 * Sets the global tint color of the application. It is inherited by the child views and can be
 * overwritten by them using the `tintColor` property.
 */
declare var Titanium$UI$tintColor: string;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$applyProperties(props: any): void



/**
 * Creates and returns an instance of <Titanium.UI.2DMatrix>.
 */
declare function Titanium$UI$create2DMatrix(parameters?: Matrix2DCreationDict): Titanium$UI$Matrix2D



/**
 * Creates and returns an instance of <Titanium.UI.Matrix2D>.
 */
declare function Titanium$UI$createMatrix2D(parameters?: Matrix2DCreationDict): Titanium$UI$Matrix2D



/**
 * Converts one type of unit to another using the metrics of the main display.
 */
declare function Titanium$UI$convertUnits(convertFromValue: string, convertToUnits: number): number



/**
 * Creates and returns an instance of <Titanium.UI.View>.
 */
declare function Titanium$UI$createView(parameters?: any): Titanium$UI$View



/**
 * Creates and returns an instance of <Titanium.UI.3DMatrix>.
 */
declare function Titanium$UI$create3DMatrix(parameters?: any): Titanium$UI$Matrix3D



/**
 * Creates and returns an instance of <Titanium.UI.ActivityIndicator>.
 */
declare function Titanium$UI$createActivityIndicator(parameters?: any): Titanium$UI$ActivityIndicator



/**
 * Creates and returns an instance of <Titanium.UI.AlertDialog>.
 */
declare function Titanium$UI$createAlertDialog(parameters?: any): Titanium$UI$AlertDialog



/**
 * Creates and returns an instance of <Titanium.UI.Animation>.
 */
declare function Titanium$UI$createAnimation(parameters?: any): Titanium$UI$Animation



/**
 * Creates and returns an instance of <Titanium.UI.AttributedString>.
 */
declare function Titanium$UI$createAttributedString(parameters?: any): Titanium$UI$AttributedString



/**
 * Creates and returns an instance of <Titanium.UI.Button>.
 */
declare function Titanium$UI$createButton(parameters?: any): Titanium$UI$Button



/**
 * Creates and returns an instance of <Titanium.UI.ButtonBar>.
 */
declare function Titanium$UI$createButtonBar(parameters?: any): Titanium$UI$ButtonBar



/**
 * Creates and returns an instance of <Titanium.UI.CoverFlowView>.
 */
declare function Titanium$UI$createCoverFlowView(parameters?: any): Titanium$UI$CoverFlowView



/**
 * Creates and returns an instance of <Titanium.UI.DashboardItem>.
 */
declare function Titanium$UI$createDashboardItem(parameters?: any): Titanium$UI$DashboardItem



/**
 * Creates and returns an instance of <Titanium.UI.DashboardView>.
 */
declare function Titanium$UI$createDashboardView(parameters?: any): Titanium$UI$DashboardView



/**
 * Creates and returns an instance of <Titanium.UI.EmailDialog>.
 */
declare function Titanium$UI$createEmailDialog(parameters?: any): Titanium$UI$EmailDialog



/**
 * Creates and returns an instance of <Titanium.UI.ImageView>.
 */
declare function Titanium$UI$createImageView(parameters?: any): Titanium$UI$ImageView



/**
 * Creates and returns an instance of <Titanium.UI.Label>.
 */
declare function Titanium$UI$createLabel(parameters?: any): Titanium$UI$Label



/**
 * Creates and returns an instance of <Titanium.UI.ListSection>.
 */
declare function Titanium$UI$createListSection(parameters?: any): Titanium$UI$ListSection



/**
 * Creates and returns an instance of <Titanium.UI.ListView>.
 */
declare function Titanium$UI$createListView(parameters?: any): Titanium$UI$ListView



/**
 * Creates and returns an instance of <Titanium.UI.MaskedImage>.
 */
declare function Titanium$UI$createMaskedImage(parameters?: any): Titanium$UI$MaskedImage



/**
 * Creates and returns an instance of <Titanium.UI.Matrix3D>.
 */
declare function Titanium$UI$createMatrix3D(parameters?: any): Titanium$UI$Matrix3D



/**
 * Creates and returns an instance of <Titanium.UI.NavigationWindow>.
 */
declare function Titanium$UI$createNavigationWindow(parameters?: any): Titanium$UI$NavigationWindow



/**
 * Creates and returns an instance of <Titanium.UI.Notification>.
 */
declare function Titanium$UI$createNotification(parameters?: any): Titanium$UI$Notification



/**
 * Creates and returns an instance of <Titanium.UI.OptionDialog>.
 */
declare function Titanium$UI$createOptionDialog(parameters?: any): Titanium$UI$OptionDialog



/**
 * Creates and returns an instance of <Titanium.UI.Picker>.
 */
declare function Titanium$UI$createPicker(parameters?: any): Titanium$UI$Picker



/**
 * Creates and returns an instance of <Titanium.UI.PickerColumn>.
 */
declare function Titanium$UI$createPickerColumn(parameters?: any): Titanium$UI$PickerColumn



/**
 * Creates and returns an instance of <Titanium.UI.PickerRow>.
 */
declare function Titanium$UI$createPickerRow(parameters?: any): Titanium$UI$PickerRow



/**
 * Creates and returns an instance of <Titanium.UI.ProgressBar>.
 */
declare function Titanium$UI$createProgressBar(parameters?: any): Titanium$UI$ProgressBar



/**
 * Creates and returns an instance of <Titanium.UI.RefreshControl>.
 */
declare function Titanium$UI$createRefreshControl(parameters?: any): Titanium$UI$RefreshControl



/**
 * Creates and returns an instance of <Titanium.UI.ScrollView>.
 */
declare function Titanium$UI$createScrollView(parameters?: any): Titanium$UI$ScrollView



/**
 * Creates and returns an instance of <Titanium.UI.ScrollableView>.
 */
declare function Titanium$UI$createScrollableView(parameters?: any): Titanium$UI$ScrollableView



/**
 * Creates and returns an instance of <Titanium.UI.SearchBar>.
 */
declare function Titanium$UI$createSearchBar(parameters?: any): Titanium$UI$SearchBar



/**
 * Creates and returns an instance of <Titanium.UI.ShortcutItem>.
 */
declare function Titanium$UI$createShortcutItem(parameters?: any): Titanium$UI$ShortcutItem



/**
 * Creates and returns an instance of <Titanium.UI.Slider>.
 */
declare function Titanium$UI$createSlider(parameters?: any): Titanium$UI$Slider



/**
 * Creates and returns an instance of <Titanium.UI.Switch>.
 */
declare function Titanium$UI$createSwitch(parameters?: any): Titanium$UI$Switch



/**
 * Creates and returns an instance of <Titanium.UI.Tab>.
 */
declare function Titanium$UI$createTab(parameters?: any): Titanium$UI$Tab



/**
 * Creates and returns an instance of <Titanium.UI.TabGroup>.
 */
declare function Titanium$UI$createTabGroup(parameters?: any): Titanium$UI$TabGroup



/**
 * Creates and returns an instance of <Titanium.UI.TabbedBar>.
 */
declare function Titanium$UI$createTabbedBar(parameters?: any): Titanium$UI$TabbedBar



/**
 * Creates and returns an instance of <Titanium.UI.TableView>.
 */
declare function Titanium$UI$createTableView(parameters?: any): Titanium$UI$TableView



/**
 * Creates and returns an instance of <Titanium.UI.TableViewRow>.
 */
declare function Titanium$UI$createTableViewRow(parameters?: any): Titanium$UI$TableViewRow



/**
 * Creates and returns an instance of <Titanium.UI.TableViewSection>.
 */
declare function Titanium$UI$createTableViewSection(parameters?: any): Titanium$UI$TableViewSection



/**
 * Creates and returns an instance of <Titanium.UI.TextArea>.
 */
declare function Titanium$UI$createTextArea(parameters?: any): Titanium$UI$TextArea



/**
 * Creates and returns an instance of <Titanium.UI.TextField>.
 */
declare function Titanium$UI$createTextField(parameters?: any): Titanium$UI$TextField



/**
 * Creates and returns an instance of <Titanium.UI.Toolbar>.
 */
declare function Titanium$UI$createToolbar(parameters?: any): Titanium$UI$Toolbar



/**
 * Gets the value of the <Titanium.UI.bubbleParent> property.
 */
declare function Titanium$UI$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.bubbleParent> property.
 */
declare function Titanium$UI$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.apiName> property.
 */
declare function Titanium$UI$getApiName(): string



/**
 * Gets the value of the <Titanium.UI.lifecycleContainer> property.
 */
declare function Titanium$UI$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.UI.lifecycleContainer> property.
 */
declare function Titanium$UI$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.UI.lifecycleContainer> property.
 */
declare function Titanium$UI$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.UI.backgroundColor> property.
 */
declare function Titanium$UI$getBackgroundColor(): string



/**
 * Sets the value of the <Titanium.UI.backgroundColor> property.
 */
declare function Titanium$UI$setBackgroundColor(backgroundColor: string): void



/**
 * Gets the value of the <Titanium.UI.backgroundImage> property.
 */
declare function Titanium$UI$getBackgroundImage(): string



/**
 * Sets the value of the <Titanium.UI.backgroundImage> property.
 */
declare function Titanium$UI$setBackgroundImage(backgroundImage: string): void



/**
 * Gets the value of the <Titanium.UI.currentTab> property.
 */
declare function Titanium$UI$getCurrentTab(): Titanium$UI$Tab



/**
 * Sets the value of the <Titanium.UI.currentTab> property.
 */
declare function Titanium$UI$setCurrentTab(currentTab: Titanium$UI$Tab): void



/**
 * Gets the value of the <Titanium.UI.currentWindow> property.
 */
declare function Titanium$UI$getCurrentWindow(): Titanium$UI$Window



/**
 * Gets the value of the <Titanium.UI.orientation> property.
 */
declare function Titanium$UI$getOrientation(): number



/**
 * Sets the value of the <Titanium.UI.orientation> property.
 */
declare function Titanium$UI$setOrientation(orientation: number): void



/**
 * Gets the value of the <Titanium.UI.tintColor> property.
 */
declare function Titanium$UI$getTintColor(): string



/**
 * Sets the value of the <Titanium.UI.tintColor> property.
 */
declare function Titanium$UI$setTintColor(tintColor: string): void



/**
 * Creates and returns an instance of <Titanium.UI.WebView>.
 */
declare function Titanium$UI$createWebView(parameters?: any): Titanium$UI$WebView



/**
 * Creates and returns an instance of <Titanium.UI.Window>.
 */
declare function Titanium$UI$createWindow(parameters?: any): Titanium$UI$Window



/**
 * An empty drawing surface or container
 */
declare type Titanium$UI$View = {

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Current position of the view during an animation.
 */
+animatedCenter: Point,

/**
 * Background color of the view, as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * Disabled background color of the view, as a color name or hex triplet.
 */
backgroundDisabledColor: string,

/**
 * Disabled background image for the view, specified as a local file path or URL.
 */
backgroundDisabledImage: string,

/**
 * Focused background color of the view, as a color name or hex triplet.
 */
backgroundFocusedColor: string,

/**
 * Focused background image for the view, specified as a local file path or URL.
 */
backgroundFocusedImage: string,

/**
 * A background gradient for the view.
 */
backgroundGradient: Gradient,

/**
 * Background image for the view, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Determines whether to tile a background across a view.
 */
backgroundRepeat: boolean,

/**
 * Size of the left end cap.
 */
backgroundLeftCap: number,

/**
 * Selected background color of the view, as a color name or hex triplet.
 */
backgroundSelectedColor: string,

/**
 * Selected background image url for the view, specified as a local file path or URL.
 */
backgroundSelectedImage: string,

/**
 * Size of the top end cap.
 */
backgroundTopCap: number,

/**
 * Border color of the view, as a color name or hex triplet.
 */
borderColor: string,

/**
 * Radius for the rounded corners of the view's border.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * View's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * Array of this view's child views.
 */
+children: Titanium$UI$View[],

/**
 * View's clipping behavior.
 */
clipMode: number,

/**
 * Base elevation of the view relative to its parent in pixels.
 */
elevation: number,

/**
 * Whether view should be focusable while navigating with the trackball.
 */
focusable: boolean,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Sets the behavior when hiding an object to release or keep the free space
 */
hiddenBehavior: number,

/**
 * Adds a horizontal parallax effect to the view
 */
horizontalMotionEffect: any,

/**
 * View's left position, in platform-specific units.
 */
left: number | string,

/**
 * Specifies how the view positions its children.
 * One of: 'composite', 'vertical', or 'horizontal'.
 */
layout: string,

/**
 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
 */
opacity: number,

/**
 * When on, animate call overrides current animation if applicable.
 */
overrideCurrentAnimation: boolean,

/**
 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
 */
pullBackgroundColor: string,

/**
 * The preview context used in the 3D-Touch feature "Peek and Pop".
 */
previewContext: Titanium$UI$iOS$PreviewContext,

/**
 * View's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * Clockwise 2D rotation of the view in degrees.
 */
rotation: number,

/**
 * Clockwise rotation of the view in degrees (x-axis).
 */
rotationX: number,

/**
 * Clockwise rotation of the view in degrees (y-axis).
 */
rotationY: number,

/**
 * Scaling of the view in x-axis in pixels.
 */
scaleX: number,

/**
 * Scaling of the view in y-axis in pixels.
 */
scaleY: number,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
 */
softKeyboardOnFocus: number,

/**
 * The view's tintColor
 */
tintColor: string,

/**
 * The view's top position.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * A material design visual construct that provides an instantaneous visual confirmation of touch point.
 */
touchFeedback: boolean,

/**
 * Optional touch feedback ripple color. This has no effect unless `touchFeedback` is true.
 */
touchFeedbackColor: string,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Horizontal location of the view relative to its left position in pixels.
 */
translationX: number,

/**
 * Vertical location of the view relative to its top position in pixels.
 */
translationY: number,

/**
 * Depth of the view relative to its elevation in pixels.
 */
translationZ: number,

/**
 * A name to identify this view in activity transition.
 */
transitionName: string,

/**
 * Adds a vertical parallax effect to the view
 */
verticalMotionEffect: any,

/**
 * Determines the blur radius used to create the shadow.
 */
viewShadowRadius: number,

/**
 * Determines the color of the shadow.
 */
viewShadowColor: string,

/**
 * Determines the offset for the shadow of the view.
 */
viewShadowOffset: Point,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * Determines whether to keep the device screen on.
 */
keepScreenOn: boolean,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any): void,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any[]): void,

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Removes a child view from this view's hierarchy.
 */
remove(view: any): void,

/**
 * Removes all child views from this view's hierarchy.
 */
removeAllChildren(): void,

/**
 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
replaceAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Gets the value of the <Titanium.UI.View.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.View.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.View.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.View.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.View.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.View.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.View.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.View.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.View.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.View.animatedCenter> property.
 */
getAnimatedCenter(): Point,

/**
 * Gets the value of the <Titanium.UI.View.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundDisabledColor> property.
 */
getBackgroundDisabledColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.backgroundDisabledColor> property.
 */
setBackgroundDisabledColor(backgroundDisabledColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundDisabledImage> property.
 */
getBackgroundDisabledImage(): string,

/**
 * Sets the value of the <Titanium.UI.View.backgroundDisabledImage> property.
 */
setBackgroundDisabledImage(backgroundDisabledImage: string): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundFocusedColor> property.
 */
getBackgroundFocusedColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.backgroundFocusedColor> property.
 */
setBackgroundFocusedColor(backgroundFocusedColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundFocusedImage> property.
 */
getBackgroundFocusedImage(): string,

/**
 * Sets the value of the <Titanium.UI.View.backgroundFocusedImage> property.
 */
setBackgroundFocusedImage(backgroundFocusedImage: string): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundGradient> property.
 */
getBackgroundGradient(): Gradient,

/**
 * Sets the value of the <Titanium.UI.View.backgroundGradient> property.
 */
setBackgroundGradient(backgroundGradient: Gradient): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundImage> property.
 */
getBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.View.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundRepeat> property.
 */
getBackgroundRepeat(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.backgroundRepeat> property.
 */
setBackgroundRepeat(backgroundRepeat: boolean): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundLeftCap> property.
 */
getBackgroundLeftCap(): number,

/**
 * Sets the value of the <Titanium.UI.View.backgroundLeftCap> property.
 */
setBackgroundLeftCap(backgroundLeftCap: number): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundSelectedColor> property.
 */
getBackgroundSelectedColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.backgroundSelectedColor> property.
 */
setBackgroundSelectedColor(backgroundSelectedColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundSelectedImage> property.
 */
getBackgroundSelectedImage(): string,

/**
 * Sets the value of the <Titanium.UI.View.backgroundSelectedImage> property.
 */
setBackgroundSelectedImage(backgroundSelectedImage: string): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundTopCap> property.
 */
getBackgroundTopCap(): number,

/**
 * Sets the value of the <Titanium.UI.View.backgroundTopCap> property.
 */
setBackgroundTopCap(backgroundTopCap: number): void,

/**
 * Gets the value of the <Titanium.UI.View.borderColor> property.
 */
getBorderColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.borderColor> property.
 */
setBorderColor(borderColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.View.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.View.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.View.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.View.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.View.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.View.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.View.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.View.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.View.children> property.
 */
getChildren(): Titanium$UI$View[],

/**
 * Gets the value of the <Titanium.UI.View.clipMode> property.
 */
getClipMode(): number,

/**
 * Sets the value of the <Titanium.UI.View.clipMode> property.
 */
setClipMode(clipMode: number): void,

/**
 * Gets the value of the <Titanium.UI.View.elevation> property.
 */
getElevation(): number,

/**
 * Sets the value of the <Titanium.UI.View.elevation> property.
 */
setElevation(elevation: number): void,

/**
 * Gets the value of the <Titanium.UI.View.focusable> property.
 */
getFocusable(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.focusable> property.
 */
setFocusable(focusable: boolean): void,

/**
 * Gets the value of the <Titanium.UI.View.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.View.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.View.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.View.hiddenBehavior> property.
 */
getHiddenBehavior(): number,

/**
 * Sets the value of the <Titanium.UI.View.hiddenBehavior> property.
 */
setHiddenBehavior(hiddenBehavior: number): void,

/**
 * Gets the value of the <Titanium.UI.View.horizontalMotionEffect> property.
 */
getHorizontalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.View.horizontalMotionEffect> property.
 */
setHorizontalMotionEffect(horizontalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.View.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.View.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.View.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.View.layout> property.
 */
getLayout(): string,

/**
 * Sets the value of the <Titanium.UI.View.layout> property.
 */
setLayout(layout: string): void,

/**
 * Gets the value of the <Titanium.UI.View.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.View.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.View.overrideCurrentAnimation> property.
 */
getOverrideCurrentAnimation(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.overrideCurrentAnimation> property.
 */
setOverrideCurrentAnimation(overrideCurrentAnimation: boolean): void,

/**
 * Gets the value of the <Titanium.UI.View.pullBackgroundColor> property.
 */
getPullBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.pullBackgroundColor> property.
 */
setPullBackgroundColor(pullBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.previewContext> property.
 */
getPreviewContext(): Titanium$UI$iOS$PreviewContext,

/**
 * Sets the value of the <Titanium.UI.View.previewContext> property.
 */
setPreviewContext(previewContext: Titanium$UI$iOS$PreviewContext): void,

/**
 * Gets the value of the <Titanium.UI.View.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.View.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.View.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.View.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.View.rotation> property.
 */
getRotation(): number,

/**
 * Sets the value of the <Titanium.UI.View.rotation> property.
 */
setRotation(rotation: number): void,

/**
 * Gets the value of the <Titanium.UI.View.rotationX> property.
 */
getRotationX(): number,

/**
 * Sets the value of the <Titanium.UI.View.rotationX> property.
 */
setRotationX(rotationX: number): void,

/**
 * Gets the value of the <Titanium.UI.View.rotationY> property.
 */
getRotationY(): number,

/**
 * Sets the value of the <Titanium.UI.View.rotationY> property.
 */
setRotationY(rotationY: number): void,

/**
 * Gets the value of the <Titanium.UI.View.scaleX> property.
 */
getScaleX(): number,

/**
 * Sets the value of the <Titanium.UI.View.scaleX> property.
 */
setScaleX(scaleX: number): void,

/**
 * Gets the value of the <Titanium.UI.View.scaleY> property.
 */
getScaleY(): number,

/**
 * Sets the value of the <Titanium.UI.View.scaleY> property.
 */
setScaleY(scaleY: number): void,

/**
 * Gets the value of the <Titanium.UI.View.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.View.softKeyboardOnFocus> property.
 */
getSoftKeyboardOnFocus(): number,

/**
 * Sets the value of the <Titanium.UI.View.softKeyboardOnFocus> property.
 */
setSoftKeyboardOnFocus(softKeyboardOnFocus: number): void,

/**
 * Gets the value of the <Titanium.UI.View.tintColor> property.
 */
getTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.tintColor> property.
 */
setTintColor(tintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.View.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.View.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.View.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.View.touchFeedback> property.
 */
getTouchFeedback(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.touchFeedback> property.
 */
setTouchFeedback(touchFeedback: boolean): void,

/**
 * Gets the value of the <Titanium.UI.View.touchFeedbackColor> property.
 */
getTouchFeedbackColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.touchFeedbackColor> property.
 */
setTouchFeedbackColor(touchFeedbackColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.View.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.View.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.View.translationX> property.
 */
getTranslationX(): number,

/**
 * Sets the value of the <Titanium.UI.View.translationX> property.
 */
setTranslationX(translationX: number): void,

/**
 * Gets the value of the <Titanium.UI.View.translationY> property.
 */
getTranslationY(): number,

/**
 * Sets the value of the <Titanium.UI.View.translationY> property.
 */
setTranslationY(translationY: number): void,

/**
 * Gets the value of the <Titanium.UI.View.translationZ> property.
 */
getTranslationZ(): number,

/**
 * Sets the value of the <Titanium.UI.View.translationZ> property.
 */
setTranslationZ(translationZ: number): void,

/**
 * Gets the value of the <Titanium.UI.View.transitionName> property.
 */
getTransitionName(): string,

/**
 * Sets the value of the <Titanium.UI.View.transitionName> property.
 */
setTransitionName(transitionName: string): void,

/**
 * Gets the value of the <Titanium.UI.View.verticalMotionEffect> property.
 */
getVerticalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.View.verticalMotionEffect> property.
 */
setVerticalMotionEffect(verticalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.View.viewShadowRadius> property.
 */
getViewShadowRadius(): number,

/**
 * Sets the value of the <Titanium.UI.View.viewShadowRadius> property.
 */
setViewShadowRadius(viewShadowRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.View.viewShadowColor> property.
 */
getViewShadowColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.viewShadowColor> property.
 */
setViewShadowColor(viewShadowColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.viewShadowOffset> property.
 */
getViewShadowOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.View.viewShadowOffset> property.
 */
setViewShadowOffset(viewShadowOffset: Point): void,

/**
 * Gets the value of the <Titanium.UI.View.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.View.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.View.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.View.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.View.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.View.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.View.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.View.keepScreenOn> property.
 */
getKeepScreenOn(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.keepScreenOn> property.
 */
setKeepScreenOn(keepScreenOn: boolean): void,

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Current position of the view during an animation.
 */
+animatedCenter: Point,

/**
 * Background color of the view, as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * Disabled background color of the view, as a color name or hex triplet.
 */
backgroundDisabledColor: string,

/**
 * Disabled background image for the view, specified as a local file path or URL.
 */
backgroundDisabledImage: string,

/**
 * Focused background color of the view, as a color name or hex triplet.
 */
backgroundFocusedColor: string,

/**
 * Focused background image for the view, specified as a local file path or URL.
 */
backgroundFocusedImage: string,

/**
 * A background gradient for the view.
 */
backgroundGradient: Gradient,

/**
 * Background image for the view, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Determines whether to tile a background across a view.
 */
backgroundRepeat: boolean,

/**
 * Size of the left end cap.
 */
backgroundLeftCap: number,

/**
 * Selected background color of the view, as a color name or hex triplet.
 */
backgroundSelectedColor: string,

/**
 * Selected background image url for the view, specified as a local file path or URL.
 */
backgroundSelectedImage: string,

/**
 * Size of the top end cap.
 */
backgroundTopCap: number,

/**
 * Border color of the view, as a color name or hex triplet.
 */
borderColor: string,

/**
 * Radius for the rounded corners of the view's border.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * View's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * Array of this view's child views.
 */
+children: Titanium$UI$View[],

/**
 * View's clipping behavior.
 */
clipMode: number,

/**
 * Base elevation of the view relative to its parent in pixels.
 */
elevation: number,

/**
 * Whether view should be focusable while navigating with the trackball.
 */
focusable: boolean,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Sets the behavior when hiding an object to release or keep the free space
 */
hiddenBehavior: number,

/**
 * Adds a horizontal parallax effect to the view
 */
horizontalMotionEffect: any,

/**
 * View's left position, in platform-specific units.
 */
left: number | string,

/**
 * Specifies how the view positions its children.
 * One of: 'composite', 'vertical', or 'horizontal'.
 */
layout: string,

/**
 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
 */
opacity: number,

/**
 * When on, animate call overrides current animation if applicable.
 */
overrideCurrentAnimation: boolean,

/**
 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
 */
pullBackgroundColor: string,

/**
 * The preview context used in the 3D-Touch feature "Peek and Pop".
 */
previewContext: Titanium$UI$iOS$PreviewContext,

/**
 * View's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * Clockwise 2D rotation of the view in degrees.
 */
rotation: number,

/**
 * Clockwise rotation of the view in degrees (x-axis).
 */
rotationX: number,

/**
 * Clockwise rotation of the view in degrees (y-axis).
 */
rotationY: number,

/**
 * Scaling of the view in x-axis in pixels.
 */
scaleX: number,

/**
 * Scaling of the view in y-axis in pixels.
 */
scaleY: number,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
 */
softKeyboardOnFocus: number,

/**
 * The view's tintColor
 */
tintColor: string,

/**
 * The view's top position.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * A material design visual construct that provides an instantaneous visual confirmation of touch point.
 */
touchFeedback: boolean,

/**
 * Optional touch feedback ripple color. This has no effect unless `touchFeedback` is true.
 */
touchFeedbackColor: string,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Horizontal location of the view relative to its left position in pixels.
 */
translationX: number,

/**
 * Vertical location of the view relative to its top position in pixels.
 */
translationY: number,

/**
 * Depth of the view relative to its elevation in pixels.
 */
translationZ: number,

/**
 * A name to identify this view in activity transition.
 */
transitionName: string,

/**
 * Adds a vertical parallax effect to the view
 */
verticalMotionEffect: any,

/**
 * Determines the blur radius used to create the shadow.
 */
viewShadowRadius: number,

/**
 * Determines the color of the shadow.
 */
viewShadowColor: string,

/**
 * Determines the offset for the shadow of the view.
 */
viewShadowOffset: Point,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * Determines whether to keep the device screen on.
 */
keepScreenOn: boolean,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any): void,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any[]): void,

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Removes a child view from this view's hierarchy.
 */
remove(view: any): void,

/**
 * Removes all child views from this view's hierarchy.
 */
removeAllChildren(): void,

/**
 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
replaceAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Gets the value of the <Titanium.UI.View.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.View.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.View.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.View.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.View.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.View.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.View.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.View.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.View.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.View.animatedCenter> property.
 */
getAnimatedCenter(): Point,

/**
 * Gets the value of the <Titanium.UI.View.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundDisabledColor> property.
 */
getBackgroundDisabledColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.backgroundDisabledColor> property.
 */
setBackgroundDisabledColor(backgroundDisabledColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundDisabledImage> property.
 */
getBackgroundDisabledImage(): string,

/**
 * Sets the value of the <Titanium.UI.View.backgroundDisabledImage> property.
 */
setBackgroundDisabledImage(backgroundDisabledImage: string): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundFocusedColor> property.
 */
getBackgroundFocusedColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.backgroundFocusedColor> property.
 */
setBackgroundFocusedColor(backgroundFocusedColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundFocusedImage> property.
 */
getBackgroundFocusedImage(): string,

/**
 * Sets the value of the <Titanium.UI.View.backgroundFocusedImage> property.
 */
setBackgroundFocusedImage(backgroundFocusedImage: string): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundGradient> property.
 */
getBackgroundGradient(): Gradient,

/**
 * Sets the value of the <Titanium.UI.View.backgroundGradient> property.
 */
setBackgroundGradient(backgroundGradient: Gradient): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundImage> property.
 */
getBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.View.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundRepeat> property.
 */
getBackgroundRepeat(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.backgroundRepeat> property.
 */
setBackgroundRepeat(backgroundRepeat: boolean): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundLeftCap> property.
 */
getBackgroundLeftCap(): number,

/**
 * Sets the value of the <Titanium.UI.View.backgroundLeftCap> property.
 */
setBackgroundLeftCap(backgroundLeftCap: number): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundSelectedColor> property.
 */
getBackgroundSelectedColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.backgroundSelectedColor> property.
 */
setBackgroundSelectedColor(backgroundSelectedColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundSelectedImage> property.
 */
getBackgroundSelectedImage(): string,

/**
 * Sets the value of the <Titanium.UI.View.backgroundSelectedImage> property.
 */
setBackgroundSelectedImage(backgroundSelectedImage: string): void,

/**
 * Gets the value of the <Titanium.UI.View.backgroundTopCap> property.
 */
getBackgroundTopCap(): number,

/**
 * Sets the value of the <Titanium.UI.View.backgroundTopCap> property.
 */
setBackgroundTopCap(backgroundTopCap: number): void,

/**
 * Gets the value of the <Titanium.UI.View.borderColor> property.
 */
getBorderColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.borderColor> property.
 */
setBorderColor(borderColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.View.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.View.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.View.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.View.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.View.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.View.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.View.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.View.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.View.children> property.
 */
getChildren(): Titanium$UI$View[],

/**
 * Gets the value of the <Titanium.UI.View.clipMode> property.
 */
getClipMode(): number,

/**
 * Sets the value of the <Titanium.UI.View.clipMode> property.
 */
setClipMode(clipMode: number): void,

/**
 * Gets the value of the <Titanium.UI.View.elevation> property.
 */
getElevation(): number,

/**
 * Sets the value of the <Titanium.UI.View.elevation> property.
 */
setElevation(elevation: number): void,

/**
 * Gets the value of the <Titanium.UI.View.focusable> property.
 */
getFocusable(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.focusable> property.
 */
setFocusable(focusable: boolean): void,

/**
 * Gets the value of the <Titanium.UI.View.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.View.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.View.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.View.hiddenBehavior> property.
 */
getHiddenBehavior(): number,

/**
 * Sets the value of the <Titanium.UI.View.hiddenBehavior> property.
 */
setHiddenBehavior(hiddenBehavior: number): void,

/**
 * Gets the value of the <Titanium.UI.View.horizontalMotionEffect> property.
 */
getHorizontalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.View.horizontalMotionEffect> property.
 */
setHorizontalMotionEffect(horizontalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.View.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.View.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.View.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.View.layout> property.
 */
getLayout(): string,

/**
 * Sets the value of the <Titanium.UI.View.layout> property.
 */
setLayout(layout: string): void,

/**
 * Gets the value of the <Titanium.UI.View.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.View.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.View.overrideCurrentAnimation> property.
 */
getOverrideCurrentAnimation(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.overrideCurrentAnimation> property.
 */
setOverrideCurrentAnimation(overrideCurrentAnimation: boolean): void,

/**
 * Gets the value of the <Titanium.UI.View.pullBackgroundColor> property.
 */
getPullBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.pullBackgroundColor> property.
 */
setPullBackgroundColor(pullBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.previewContext> property.
 */
getPreviewContext(): Titanium$UI$iOS$PreviewContext,

/**
 * Sets the value of the <Titanium.UI.View.previewContext> property.
 */
setPreviewContext(previewContext: Titanium$UI$iOS$PreviewContext): void,

/**
 * Gets the value of the <Titanium.UI.View.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.View.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.View.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.View.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.View.rotation> property.
 */
getRotation(): number,

/**
 * Sets the value of the <Titanium.UI.View.rotation> property.
 */
setRotation(rotation: number): void,

/**
 * Gets the value of the <Titanium.UI.View.rotationX> property.
 */
getRotationX(): number,

/**
 * Sets the value of the <Titanium.UI.View.rotationX> property.
 */
setRotationX(rotationX: number): void,

/**
 * Gets the value of the <Titanium.UI.View.rotationY> property.
 */
getRotationY(): number,

/**
 * Sets the value of the <Titanium.UI.View.rotationY> property.
 */
setRotationY(rotationY: number): void,

/**
 * Gets the value of the <Titanium.UI.View.scaleX> property.
 */
getScaleX(): number,

/**
 * Sets the value of the <Titanium.UI.View.scaleX> property.
 */
setScaleX(scaleX: number): void,

/**
 * Gets the value of the <Titanium.UI.View.scaleY> property.
 */
getScaleY(): number,

/**
 * Sets the value of the <Titanium.UI.View.scaleY> property.
 */
setScaleY(scaleY: number): void,

/**
 * Gets the value of the <Titanium.UI.View.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.View.softKeyboardOnFocus> property.
 */
getSoftKeyboardOnFocus(): number,

/**
 * Sets the value of the <Titanium.UI.View.softKeyboardOnFocus> property.
 */
setSoftKeyboardOnFocus(softKeyboardOnFocus: number): void,

/**
 * Gets the value of the <Titanium.UI.View.tintColor> property.
 */
getTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.tintColor> property.
 */
setTintColor(tintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.View.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.View.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.View.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.View.touchFeedback> property.
 */
getTouchFeedback(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.touchFeedback> property.
 */
setTouchFeedback(touchFeedback: boolean): void,

/**
 * Gets the value of the <Titanium.UI.View.touchFeedbackColor> property.
 */
getTouchFeedbackColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.touchFeedbackColor> property.
 */
setTouchFeedbackColor(touchFeedbackColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.View.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.View.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.View.translationX> property.
 */
getTranslationX(): number,

/**
 * Sets the value of the <Titanium.UI.View.translationX> property.
 */
setTranslationX(translationX: number): void,

/**
 * Gets the value of the <Titanium.UI.View.translationY> property.
 */
getTranslationY(): number,

/**
 * Sets the value of the <Titanium.UI.View.translationY> property.
 */
setTranslationY(translationY: number): void,

/**
 * Gets the value of the <Titanium.UI.View.translationZ> property.
 */
getTranslationZ(): number,

/**
 * Sets the value of the <Titanium.UI.View.translationZ> property.
 */
setTranslationZ(translationZ: number): void,

/**
 * Gets the value of the <Titanium.UI.View.transitionName> property.
 */
getTransitionName(): string,

/**
 * Sets the value of the <Titanium.UI.View.transitionName> property.
 */
setTransitionName(transitionName: string): void,

/**
 * Gets the value of the <Titanium.UI.View.verticalMotionEffect> property.
 */
getVerticalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.View.verticalMotionEffect> property.
 */
setVerticalMotionEffect(verticalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.View.viewShadowRadius> property.
 */
getViewShadowRadius(): number,

/**
 * Sets the value of the <Titanium.UI.View.viewShadowRadius> property.
 */
setViewShadowRadius(viewShadowRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.View.viewShadowColor> property.
 */
getViewShadowColor(): string,

/**
 * Sets the value of the <Titanium.UI.View.viewShadowColor> property.
 */
setViewShadowColor(viewShadowColor: string): void,

/**
 * Gets the value of the <Titanium.UI.View.viewShadowOffset> property.
 */
getViewShadowOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.View.viewShadowOffset> property.
 */
setViewShadowOffset(viewShadowOffset: Point): void,

/**
 * Gets the value of the <Titanium.UI.View.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.View.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.View.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.View.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.View.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.View.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.View.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.View.keepScreenOn> property.
 */
getKeepScreenOn(): boolean,

/**
 * Sets the value of the <Titanium.UI.View.keepScreenOn> property.
 */
setKeepScreenOn(keepScreenOn: boolean): void
} & Titanium$Proxy



/**
 * The 2D Matrix is an object for holding values for an affine transformation matrix.
 */
declare type Titanium$UI$Matrix2D = {

/**
 * The entry at position [1,1] in the matrix.
 */
a: number,

/**
 * The entry at position [1,2] in the matrix.
 */
b: number,

/**
 * The entry at position [2,1] in the matrix.
 */
c: number,

/**
 * The entry at position [2,2] in the matrix.
 */
d: number,

/**
 * The entry at position [3,1] in the matrix.
 */
tx: number,

/**
 * The entry at position [3,2] in the matrix.
 */
ty: number,

/**
 * Returns a matrix constructed by inverting this matrix.
 */
invert(): Titanium$UI$Matrix2D,

/**
 * Returns a matrix constructed by combining two existing matrices.
 */
multiply(t2: Titanium$UI$Matrix2D): Titanium$UI$Matrix2D,

/**
 * Returns a matrix constructed by rotating this matrix.
 */
rotate(angle: number, toAngle?: number): Titanium$UI$Matrix2D,

/**
 * Returns a `2DMatrix` object that specifies a scaling animation from one scale to another.
 */
scale(sx: number, sy: number, toSx?: number, toSy?: number): Titanium$UI$Matrix2D,

/**
 * Returns a matrix constructed by applying a translation transform to this matrix.
 */
translate(tx: number, ty: number): Titanium$UI$Matrix2D,

/**
 * Gets the value of the <Titanium.UI.2DMatrix.a> property.
 */
getA(): number,

/**
 * Sets the value of the <Titanium.UI.2DMatrix.a> property.
 */
setA(a: number): void,

/**
 * Gets the value of the <Titanium.UI.2DMatrix.b> property.
 */
getB(): number,

/**
 * Sets the value of the <Titanium.UI.2DMatrix.b> property.
 */
setB(b: number): void,

/**
 * Gets the value of the <Titanium.UI.2DMatrix.c> property.
 */
getC(): number,

/**
 * Sets the value of the <Titanium.UI.2DMatrix.c> property.
 */
setC(c: number): void,

/**
 * Gets the value of the <Titanium.UI.2DMatrix.d> property.
 */
getD(): number,

/**
 * Sets the value of the <Titanium.UI.2DMatrix.d> property.
 */
setD(d: number): void,

/**
 * Gets the value of the <Titanium.UI.2DMatrix.tx> property.
 */
getTx(): number,

/**
 * Sets the value of the <Titanium.UI.2DMatrix.tx> property.
 */
setTx(tx: number): void,

/**
 * Gets the value of the <Titanium.UI.2DMatrix.ty> property.
 */
getTy(): number,

/**
 * Sets the value of the <Titanium.UI.2DMatrix.ty> property.
 */
setTy(ty: number): void,

/**
 * The entry at position [1,1] in the matrix.
 */
a: number,

/**
 * The entry at position [1,2] in the matrix.
 */
b: number,

/**
 * The entry at position [2,1] in the matrix.
 */
c: number,

/**
 * The entry at position [2,2] in the matrix.
 */
d: number,

/**
 * The entry at position [3,1] in the matrix.
 */
tx: number,

/**
 * The entry at position [3,2] in the matrix.
 */
ty: number,

/**
 * Returns a matrix constructed by inverting this matrix.
 */
invert(): Titanium$UI$Matrix2D,

/**
 * Returns a matrix constructed by combining two existing matrices.
 */
multiply(t2: Titanium$UI$Matrix2D): Titanium$UI$Matrix2D,

/**
 * Returns a matrix constructed by rotating this matrix.
 */
rotate(angle: number, toAngle?: number): Titanium$UI$Matrix2D,

/**
 * Returns a `Matrix2D` object that specifies a scaling animation from one scale to another.
 */
scale(sx: number, sy: number, toSx?: number, toSy?: number): Titanium$UI$Matrix2D,

/**
 * Returns a matrix constructed by applying a translation transform to this matrix.
 */
translate(tx: number, ty: number): Titanium$UI$Matrix2D,

/**
 * Gets the value of the <Titanium.UI.Matrix2D.a> property.
 */
getA(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix2D.a> property.
 */
setA(a: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix2D.b> property.
 */
getB(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix2D.b> property.
 */
setB(b: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix2D.c> property.
 */
getC(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix2D.c> property.
 */
setC(c: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix2D.d> property.
 */
getD(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix2D.d> property.
 */
setD(d: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix2D.tx> property.
 */
getTx(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix2D.tx> property.
 */
setTx(tx: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix2D.ty> property.
 */
getTy(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix2D.ty> property.
 */
setTy(ty: number): void
} & Titanium$Proxy



/**
 * The 3D Matrix is an object for holding values for a 3D affine transform.
 */
declare type Titanium$UI$Matrix3D = {

/**
 * The entry at position [1,1] in the matrix.
 */
m11: number,

/**
 * The entry at position [1,2] in the matrix.
 */
m12: number,

/**
 * The entry at position [1,3] in the matrix.
 */
m13: number,

/**
 * The entry at position [1,4] in the matrix.
 */
m14: number,

/**
 * The entry at position [2,1] in the matrix.
 */
m21: number,

/**
 * The entry at position [2,2] in the matrix.
 */
m22: number,

/**
 * The entry at position [2,3] in the matrix.
 */
m23: number,

/**
 * The entry at position [2,4] in the matrix.
 */
m24: number,

/**
 * The entry at position [3,1] in the matrix.
 */
m31: number,

/**
 * The entry at position [3,2] in the matrix.
 */
m32: number,

/**
 * The entry at position [3,3] in the matrix.
 */
m33: number,

/**
 * The entry at position [3,4] in the matrix.
 */
m34: number,

/**
 * The entry at position [4,1] in the matrix.
 */
m41: number,

/**
 * The entry at position [4,2] in the matrix.
 */
m42: number,

/**
 * The entry at position [4,3] in the matrix.
 */
m43: number,

/**
 * The entry at position [4,4] in the matrix.
 */
m44: number,

/**
 * Returns a matrix constructed by inverting this matrix.
 */
invert(): Titanium$UI$Matrix3D,

/**
 * Returns a matrix constructed by combining two existing matrix.
 */
multiply(t2: Titanium$UI$Matrix3D): Titanium$UI$Matrix3D,

/**
 * Returns a matrix constructed by rotating this matrix.
 */
rotate(angle: number, x: number, y: number, z: number): Titanium$UI$Matrix3D,

/**
 * Returns a matrix constructed by scaling this matrix.
 */
scale(sx: number, sy: number, sz: number): Titanium$UI$Matrix3D,

/**
 * Returns a matrix constructed by translating an existing matrix.
 */
translate(tx: number, ty: number, tz: number): Titanium$UI$Matrix3D,

/**
 * Gets the value of the <Titanium.UI.3DMatrix.m11> property.
 */
getM11(): number,

/**
 * Sets the value of the <Titanium.UI.3DMatrix.m11> property.
 */
setM11(m11: number): void,

/**
 * Gets the value of the <Titanium.UI.3DMatrix.m12> property.
 */
getM12(): number,

/**
 * Sets the value of the <Titanium.UI.3DMatrix.m12> property.
 */
setM12(m12: number): void,

/**
 * Gets the value of the <Titanium.UI.3DMatrix.m13> property.
 */
getM13(): number,

/**
 * Sets the value of the <Titanium.UI.3DMatrix.m13> property.
 */
setM13(m13: number): void,

/**
 * Gets the value of the <Titanium.UI.3DMatrix.m14> property.
 */
getM14(): number,

/**
 * Sets the value of the <Titanium.UI.3DMatrix.m14> property.
 */
setM14(m14: number): void,

/**
 * Gets the value of the <Titanium.UI.3DMatrix.m21> property.
 */
getM21(): number,

/**
 * Sets the value of the <Titanium.UI.3DMatrix.m21> property.
 */
setM21(m21: number): void,

/**
 * Gets the value of the <Titanium.UI.3DMatrix.m22> property.
 */
getM22(): number,

/**
 * Sets the value of the <Titanium.UI.3DMatrix.m22> property.
 */
setM22(m22: number): void,

/**
 * Gets the value of the <Titanium.UI.3DMatrix.m23> property.
 */
getM23(): number,

/**
 * Sets the value of the <Titanium.UI.3DMatrix.m23> property.
 */
setM23(m23: number): void,

/**
 * Gets the value of the <Titanium.UI.3DMatrix.m24> property.
 */
getM24(): number,

/**
 * Sets the value of the <Titanium.UI.3DMatrix.m24> property.
 */
setM24(m24: number): void,

/**
 * Gets the value of the <Titanium.UI.3DMatrix.m31> property.
 */
getM31(): number,

/**
 * Sets the value of the <Titanium.UI.3DMatrix.m31> property.
 */
setM31(m31: number): void,

/**
 * Gets the value of the <Titanium.UI.3DMatrix.m32> property.
 */
getM32(): number,

/**
 * Sets the value of the <Titanium.UI.3DMatrix.m32> property.
 */
setM32(m32: number): void,

/**
 * Gets the value of the <Titanium.UI.3DMatrix.m33> property.
 */
getM33(): number,

/**
 * Sets the value of the <Titanium.UI.3DMatrix.m33> property.
 */
setM33(m33: number): void,

/**
 * Gets the value of the <Titanium.UI.3DMatrix.m34> property.
 */
getM34(): number,

/**
 * Sets the value of the <Titanium.UI.3DMatrix.m34> property.
 */
setM34(m34: number): void,

/**
 * Gets the value of the <Titanium.UI.3DMatrix.m41> property.
 */
getM41(): number,

/**
 * Sets the value of the <Titanium.UI.3DMatrix.m41> property.
 */
setM41(m41: number): void,

/**
 * Gets the value of the <Titanium.UI.3DMatrix.m42> property.
 */
getM42(): number,

/**
 * Sets the value of the <Titanium.UI.3DMatrix.m42> property.
 */
setM42(m42: number): void,

/**
 * Gets the value of the <Titanium.UI.3DMatrix.m43> property.
 */
getM43(): number,

/**
 * Sets the value of the <Titanium.UI.3DMatrix.m43> property.
 */
setM43(m43: number): void,

/**
 * Gets the value of the <Titanium.UI.3DMatrix.m44> property.
 */
getM44(): number,

/**
 * Sets the value of the <Titanium.UI.3DMatrix.m44> property.
 */
setM44(m44: number): void,

/**
 * The entry at position [1,1] in the matrix.
 */
m11: number,

/**
 * The entry at position [1,2] in the matrix.
 */
m12: number,

/**
 * The entry at position [1,3] in the matrix.
 */
m13: number,

/**
 * The entry at position [1,4] in the matrix.
 */
m14: number,

/**
 * The entry at position [2,1] in the matrix.
 */
m21: number,

/**
 * The entry at position [2,2] in the matrix.
 */
m22: number,

/**
 * The entry at position [2,3] in the matrix.
 */
m23: number,

/**
 * The entry at position [2,4] in the matrix.
 */
m24: number,

/**
 * The entry at position [3,1] in the matrix.
 */
m31: number,

/**
 * The entry at position [3,2] in the matrix.
 */
m32: number,

/**
 * The entry at position [3,3] in the matrix.
 */
m33: number,

/**
 * The entry at position [3,4] in the matrix.
 */
m34: number,

/**
 * The entry at position [4,1] in the matrix.
 */
m41: number,

/**
 * The entry at position [4,2] in the matrix.
 */
m42: number,

/**
 * The entry at position [4,3] in the matrix.
 */
m43: number,

/**
 * The entry at position [4,4] in the matrix.
 */
m44: number,

/**
 * Returns a matrix constructed by inverting this matrix.
 */
invert(): Titanium$UI$Matrix3D,

/**
 * Returns a matrix constructed by combining two existing matrix.
 */
multiply(t2: Titanium$UI$Matrix3D): Titanium$UI$Matrix3D,

/**
 * Returns a matrix constructed by rotating this matrix.
 */
rotate(angle: number, x: number, y: number, z: number): Titanium$UI$Matrix3D,

/**
 * Returns a matrix constructed by scaling this matrix.
 */
scale(sx: number, sy: number, sz: number): Titanium$UI$Matrix3D,

/**
 * Returns a matrix constructed by translating an existing matrix.
 */
translate(tx: number, ty: number, tz: number): Titanium$UI$Matrix3D,

/**
 * Gets the value of the <Titanium.UI.Matrix3D.m11> property.
 */
getM11(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix3D.m11> property.
 */
setM11(m11: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix3D.m12> property.
 */
getM12(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix3D.m12> property.
 */
setM12(m12: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix3D.m13> property.
 */
getM13(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix3D.m13> property.
 */
setM13(m13: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix3D.m14> property.
 */
getM14(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix3D.m14> property.
 */
setM14(m14: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix3D.m21> property.
 */
getM21(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix3D.m21> property.
 */
setM21(m21: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix3D.m22> property.
 */
getM22(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix3D.m22> property.
 */
setM22(m22: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix3D.m23> property.
 */
getM23(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix3D.m23> property.
 */
setM23(m23: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix3D.m24> property.
 */
getM24(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix3D.m24> property.
 */
setM24(m24: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix3D.m31> property.
 */
getM31(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix3D.m31> property.
 */
setM31(m31: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix3D.m32> property.
 */
getM32(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix3D.m32> property.
 */
setM32(m32: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix3D.m33> property.
 */
getM33(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix3D.m33> property.
 */
setM33(m33: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix3D.m34> property.
 */
getM34(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix3D.m34> property.
 */
setM34(m34: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix3D.m41> property.
 */
getM41(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix3D.m41> property.
 */
setM41(m41: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix3D.m42> property.
 */
getM42(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix3D.m42> property.
 */
setM42(m42: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix3D.m43> property.
 */
getM43(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix3D.m43> property.
 */
setM43(m43: number): void,

/**
 * Gets the value of the <Titanium.UI.Matrix3D.m44> property.
 */
getM44(): number,

/**
 * Sets the value of the <Titanium.UI.Matrix3D.m44> property.
 */
setM44(m44: number): void
} & Titanium$Proxy



/**
 * An activity indicator that lets the user know an action is taking place.
 */
declare type Titanium$UI$ActivityIndicator = {

/**
 * Color of the message text, as a color name or hex triplet.
 */
color: string,

/**
 * Font used for the message text.
 */
font: Font,

/**
 * Message text.
 */
message: string,

/**
 * Key identifying a string in the locale file to use for the message text.
 */
messageid: string,

/**
 * The style for the activity indicator.
 */
style: number,

/**
 * Color of the animated indicator.
 */
indicatorColor: string,

/**
 * Gets the value of the <Titanium.UI.ActivityIndicator.color> property.
 */
getColor(): string,

/**
 * Sets the value of the <Titanium.UI.ActivityIndicator.color> property.
 */
setColor(color: string): void,

/**
 * Gets the value of the <Titanium.UI.ActivityIndicator.font> property.
 */
getFont(): Font,

/**
 * Sets the value of the <Titanium.UI.ActivityIndicator.font> property.
 */
setFont(font: Font): void,

/**
 * Gets the value of the <Titanium.UI.ActivityIndicator.message> property.
 */
getMessage(): string,

/**
 * Sets the value of the <Titanium.UI.ActivityIndicator.message> property.
 */
setMessage(message: string): void,

/**
 * Gets the value of the <Titanium.UI.ActivityIndicator.messageid> property.
 */
getMessageid(): string,

/**
 * Sets the value of the <Titanium.UI.ActivityIndicator.messageid> property.
 */
setMessageid(messageid: string): void,

/**
 * Gets the value of the <Titanium.UI.ActivityIndicator.style> property.
 */
getStyle(): number,

/**
 * Sets the value of the <Titanium.UI.ActivityIndicator.style> property.
 */
setStyle(style: number): void,

/**
 * Gets the value of the <Titanium.UI.ActivityIndicator.indicatorColor> property.
 */
getIndicatorColor(): string,

/**
 * Sets the value of the <Titanium.UI.ActivityIndicator.indicatorColor> property.
 */
setIndicatorColor(indicatorColor: string): void
} & Titanium$UI$View



/**
 * An alert dialog is a modal view that includes an optional title, a message and buttons,
 * positioned in the middle of the display.
 */
declare type Titanium$UI$AlertDialog = {

/**
 * View to load inside the message area, to create a custom layout.
 */
androidView: Titanium$UI$View,

/**
 * Name of each button to create.
 */
buttonNames: string[],

/**
 * Index to define the cancel button.
 */
cancel: number,

/**
 * Setting this to true requires the end-user to click a dialog button to close the dialog.
 */
buttonClickRequired: boolean,

/**
 * When this is set to `true`, the dialog is canceled when touched outside the window's bounds.
 */
canceledOnTouchOutside: boolean,

/**
 * Index to define the destructive button.
 */
destructive: number,

/**
 * Hint text of the text field inside the dialog.
 */
hintText: string,

/**
 * Key identifying a string from the locale file to use for the
 * [hintText](Titanium.UI.AlertDialog.hintText) property.
 */
hinttextid: string,

/**
 * Keyboard type to display when this text field inside the dialog is focused.
 */
keyboardType: number,

/**
 * Keyboard appearance to be displayed when the text field inside the dialog is focused.
 */
keyboardAppearance: number,

/**
 * Placeholder of the login text field inside the dialog.
 */
loginPlaceholder: string,

/**
 * Hint text of the login text field inside the dialog.
 */
loginHintText: string,

/**
 * Key identifying a string from the locale file to use for the
 * [loginHintText](Titanium.UI.AlertDialog.loginHintText) property.
 */
loginhinttextid: string,

/**
 * Specifies the text to display on the keyboard `Return` key when this field is focused.
 */
loginReturnKeyType: number,

/**
 * Value of the login text field inside the dialog.
 */
loginValue: string,

/**
 * Keyboard type to display when this text field inside the dialog is focused.
 */
loginKeyboardType: number,

/**
 * Dialog message.
 */
message: string,

/**
 * Key identifying a string in the locale file to use for the message text.
 */
messageid: string,

/**
 * Text for the `OK` button.
 */
ok: string,

/**
 * Key identifying a string in the locale file to use for the `ok` text.
 */
okid: string,

/**
 * Placeholder of the password text field inside the dialog.
 */
passwordPlaceholder: string,

/**
 * Hint text of the password text field inside the dialog.
 */
passwordHintText: string,

/**
 * Key identifying a string from the locale file to use for the
 * [passwordHintText](Titanium.UI.AlertDialog.passwordHintText) property.
 */
passwordhinttextid: string,

/**
 * Specifies the text to display on the keyboard `Return` key when this field is focused.
 */
passwordReturnKeyType: number,

/**
 * Value of the password text field inside the dialog.
 */
passwordValue: string,

/**
 * Keyboard type to display when this text field inside the dialog is focused.
 */
passwordKeyboardType: number,

/**
 * Placeholder of the text field inside the dialog.
 */
placeholder: string,

/**
 * Boolean value indicating if the alert dialog should only be cancelled by user gesture or by hide method.
 */
persistent: boolean,

/**
 * Index to define the preferred button.
 */
preferred: number,

/**
 * Specifies the text to display on the keyboard `Return` key when this field is focused.
 */
returnKeyType: number,

/**
 * The style for the alert dialog.
 */
style: number,

/**
 * Title of the dialog.
 */
title: string,

/**
 * Key identifying a string in the locale file to use for the title text.
 */
titleid: string,

/**
 * Value of the text field inside the dialog.
 */
value: string,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.buttonNames> property.
 */
getButtonNames(): string[],

/**
 * Sets the value of the <Titanium.UI.AlertDialog.buttonNames> property.
 */
setButtonNames(buttonNames: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.cancel> property.
 */
getCancel(): number,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.cancel> property.
 */
setCancel(cancel: number): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.buttonClickRequired> property.
 */
getButtonClickRequired(): boolean,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.buttonClickRequired> property.
 */
setButtonClickRequired(buttonClickRequired: boolean): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.canceledOnTouchOutside> property.
 */
getCanceledOnTouchOutside(): boolean,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.canceledOnTouchOutside> property.
 */
setCanceledOnTouchOutside(canceledOnTouchOutside: boolean): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.destructive> property.
 */
getDestructive(): number,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.destructive> property.
 */
setDestructive(destructive: number): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.hintText> property.
 */
getHintText(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.hintText> property.
 */
setHintText(hintText: string): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.hinttextid> property.
 */
getHinttextid(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.hinttextid> property.
 */
setHinttextid(hinttextid: string): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.keyboardType> property.
 */
getKeyboardType(): number,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.keyboardType> property.
 */
setKeyboardType(keyboardType: number): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.keyboardAppearance> property.
 */
getKeyboardAppearance(): number,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.keyboardAppearance> property.
 */
setKeyboardAppearance(keyboardAppearance: number): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.loginPlaceholder> property.
 */
getLoginPlaceholder(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.loginPlaceholder> property.
 */
setLoginPlaceholder(loginPlaceholder: string): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.loginHintText> property.
 */
getLoginHintText(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.loginHintText> property.
 */
setLoginHintText(loginHintText: string): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.loginhinttextid> property.
 */
getLoginhinttextid(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.loginhinttextid> property.
 */
setLoginhinttextid(loginhinttextid: string): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.loginReturnKeyType> property.
 */
getLoginReturnKeyType(): number,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.loginReturnKeyType> property.
 */
setLoginReturnKeyType(loginReturnKeyType: number): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.loginValue> property.
 */
getLoginValue(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.loginValue> property.
 */
setLoginValue(loginValue: string): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.loginKeyboardType> property.
 */
getLoginKeyboardType(): number,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.loginKeyboardType> property.
 */
setLoginKeyboardType(loginKeyboardType: number): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.message> property.
 */
getMessage(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.message> property.
 */
setMessage(message: string): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.messageid> property.
 */
getMessageid(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.messageid> property.
 */
setMessageid(messageid: string): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.ok> property.
 */
getOk(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.ok> property.
 */
setOk(ok: string): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.okid> property.
 */
getOkid(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.okid> property.
 */
setOkid(okid: string): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.passwordPlaceholder> property.
 */
getPasswordPlaceholder(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.passwordPlaceholder> property.
 */
setPasswordPlaceholder(passwordPlaceholder: string): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.passwordHintText> property.
 */
getPasswordHintText(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.passwordHintText> property.
 */
setPasswordHintText(passwordHintText: string): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.passwordhinttextid> property.
 */
getPasswordhinttextid(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.passwordhinttextid> property.
 */
setPasswordhinttextid(passwordhinttextid: string): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.passwordReturnKeyType> property.
 */
getPasswordReturnKeyType(): number,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.passwordReturnKeyType> property.
 */
setPasswordReturnKeyType(passwordReturnKeyType: number): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.passwordValue> property.
 */
getPasswordValue(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.passwordValue> property.
 */
setPasswordValue(passwordValue: string): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.passwordKeyboardType> property.
 */
getPasswordKeyboardType(): number,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.passwordKeyboardType> property.
 */
setPasswordKeyboardType(passwordKeyboardType: number): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.placeholder> property.
 */
getPlaceholder(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.placeholder> property.
 */
setPlaceholder(placeholder: string): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.persistent> property.
 */
getPersistent(): boolean,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.persistent> property.
 */
setPersistent(persistent: boolean): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.preferred> property.
 */
getPreferred(): number,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.preferred> property.
 */
setPreferred(preferred: number): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.returnKeyType> property.
 */
getReturnKeyType(): number,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.returnKeyType> property.
 */
setReturnKeyType(returnKeyType: number): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.style> property.
 */
getStyle(): number,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.style> property.
 */
setStyle(style: number): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.titleid> property.
 */
getTitleid(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.titleid> property.
 */
setTitleid(titleid: string): void,

/**
 * Gets the value of the <Titanium.UI.AlertDialog.value> property.
 */
getValue(): string,

/**
 * Sets the value of the <Titanium.UI.AlertDialog.value> property.
 */
setValue(value: string): void
} & Titanium$UI$View



/**
 * The `Animation` object defines an animation that can be applied to a view.
 */
declare type Titanium$UI$Animation = {

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Specifies if the animation should be replayed in reverse upon completion.
 */
autoreverse: boolean,

/**
 * Value of the `backgroundColor` property at the end of the animation, as a color name
 * or hex triplet.
 */
backgroundColor: string,

/**
 * Value of the `bottom` property at the end of the animation.
 */
bottom: number,

/**
 * Value of the `center` property at the end of the animation.
 */
center: any,

/**
 * Value of the `color` property at the end of the animation, as a color name or hex triplet.
 */
color: string,

/**
 * Animation curve or easing function to apply to the animation.
 */
curve: number,

/**
 * Delay, in milliseconds before starting the animation.
 */
delay: number,

/**
 * Duration of the animation, in milliseconds.
 */
duration: number,

/**
 * Value of the `height` property at the end of the animation.
 */
height: number,

/**
 * Value of the `left` property at the end of the animation.
 */
left: number,

/**
 * Value of the `opacity` property at the end of the animation.
 */
opacity: number,

/**
 * Value of the `opaque` property at the end of the animation.
 */
opaque: boolean,

/**
 * Number of times the animation should be performed.
 */
repeat: number,

/**
 * Value of the `right` property at the end of the animation.
 */
right: number,

/**
 * Value of the `top` property at the end of the animation.
 */
top: number,

/**
 * Animate the view from its current tranform to the specified transform.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Transition type to use during a transition animation.
 */
transition: number,

/**
 * New view to transition to.
 */
view: Titanium$UI$View,

/**
 * Value of the `visible` property at the end of the animation.
 */
visible: boolean,

/**
 * Value of the `width` property at the end of the animation.
 */
width: number,

/**
 * Value of the `zIndex` property at the end of the animation.
 */
zIndex: number,

/**
 * Gets the value of the <Titanium.UI.Animation.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.Animation.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.Animation.autoreverse> property.
 */
getAutoreverse(): boolean,

/**
 * Sets the value of the <Titanium.UI.Animation.autoreverse> property.
 */
setAutoreverse(autoreverse: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Animation.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.Animation.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Animation.bottom> property.
 */
getBottom(): number,

/**
 * Sets the value of the <Titanium.UI.Animation.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Gets the value of the <Titanium.UI.Animation.center> property.
 */
getCenter(): any,

/**
 * Sets the value of the <Titanium.UI.Animation.center> property.
 */
setCenter(center: any): void,

/**
 * Gets the value of the <Titanium.UI.Animation.color> property.
 */
getColor(): string,

/**
 * Sets the value of the <Titanium.UI.Animation.color> property.
 */
setColor(color: string): void,

/**
 * Gets the value of the <Titanium.UI.Animation.curve> property.
 */
getCurve(): number,

/**
 * Sets the value of the <Titanium.UI.Animation.curve> property.
 */
setCurve(curve: number): void,

/**
 * Gets the value of the <Titanium.UI.Animation.delay> property.
 */
getDelay(): number,

/**
 * Sets the value of the <Titanium.UI.Animation.delay> property.
 */
setDelay(delay: number): void,

/**
 * Gets the value of the <Titanium.UI.Animation.duration> property.
 */
getDuration(): number,

/**
 * Sets the value of the <Titanium.UI.Animation.duration> property.
 */
setDuration(duration: number): void,

/**
 * Gets the value of the <Titanium.UI.Animation.height> property.
 */
getHeight(): number,

/**
 * Sets the value of the <Titanium.UI.Animation.height> property.
 */
setHeight(height: number): void,

/**
 * Gets the value of the <Titanium.UI.Animation.left> property.
 */
getLeft(): number,

/**
 * Sets the value of the <Titanium.UI.Animation.left> property.
 */
setLeft(left: number): void,

/**
 * Gets the value of the <Titanium.UI.Animation.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.Animation.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.Animation.opaque> property.
 */
getOpaque(): boolean,

/**
 * Sets the value of the <Titanium.UI.Animation.opaque> property.
 */
setOpaque(opaque: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Animation.repeat> property.
 */
getRepeat(): number,

/**
 * Sets the value of the <Titanium.UI.Animation.repeat> property.
 */
setRepeat(repeat: number): void,

/**
 * Gets the value of the <Titanium.UI.Animation.right> property.
 */
getRight(): number,

/**
 * Sets the value of the <Titanium.UI.Animation.right> property.
 */
setRight(right: number): void,

/**
 * Gets the value of the <Titanium.UI.Animation.top> property.
 */
getTop(): number,

/**
 * Sets the value of the <Titanium.UI.Animation.top> property.
 */
setTop(top: number): void,

/**
 * Gets the value of the <Titanium.UI.Animation.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.Animation.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.Animation.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.Animation.transition> property.
 */
getTransition(): number,

/**
 * Sets the value of the <Titanium.UI.Animation.transition> property.
 */
setTransition(transition: number): void,

/**
 * Gets the value of the <Titanium.UI.Animation.view> property.
 */
getView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.Animation.view> property.
 */
setView(view: any): void,

/**
 * Gets the value of the <Titanium.UI.Animation.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.Animation.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Animation.width> property.
 */
getWidth(): number,

/**
 * Sets the value of the <Titanium.UI.Animation.width> property.
 */
setWidth(width: number): void,

/**
 * Gets the value of the <Titanium.UI.Animation.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.Animation.zIndex> property.
 */
setZIndex(zIndex: number): void
} & Titanium$Proxy



/**
 * An attributed string proxy manages character strings and associated sets of attributes (for example,
 * font and foregroundcolor) that apply to individual characters or ranges of characters in the string.
 */
declare type Titanium$UI$AttributedString = {

/**
 * The text applied to the attributed string.
 */
text: string,

/**
 * An array of attributes to add.
 */
attributes: iOS$Attribute[],

/**
 * Adds an [attribute](Attribute) with the given name and value to the characters in the specified range.
 */
addAttribute(attribute: iOS$Attribute): void,

/**
 * Gets the value of the <Titanium.UI.AttributedString.text> property.
 */
getText(): string,

/**
 * Sets the value of the <Titanium.UI.AttributedString.text> property.
 */
setText(text: string): void,

/**
 * Gets the value of the <Titanium.UI.AttributedString.attributes> property.
 */
getAttributes(): iOS$Attribute[],

/**
 * Sets the value of the <Titanium.UI.AttributedString.attributes> property.
 */
setAttributes(attributes: $ReadOnlyArray<iOS$Attribute>): void
} & Titanium$Proxy



/**
 * A button widget that has four states: normal, disabled, focused and selected.
 */
declare type Titanium$UI$Button = {

/**
 * Specify an attributed string for the label.
 */
attributedString: Titanium$UI$AttributedString,

/**
 * Default button text color, as a color name or hex triplet.
 */
color: string,

/**
 * Text color of the button in its disabled state, as a color name or hex triplet.
 */
disabledColor: string,

/**
 * Set to `true` to enable the button, `false` to disable the button.
 */
enabled: boolean,

/**
 * Font to use for the button text.
 */
font: Font,

/**
 * Image to display on the button, specified as a local path, URL or a `Blob`.
 */
image: string | Titanium$Blob,

/**
 * Button text color used to indicate the selected state, as a color name or hex triplet.
 */
selectedColor: string,

/**
 * Shadow color of the [title](Titanium.UI.Button.title), as a color name or hex triplet.
 */
shadowColor: string,

/**
 * Shadow offset of the [title](Titanium.UI.Button.title), as a dictionary with the properties `x` and `y`.
 */
shadowOffset: any,

/**
 * Shadow radius of the [title](Titanium.UI.Button.title).
 */
shadowRadius: number,

/**
 * Style constant for the button, as defined in <Titanium.UI.iOS.SystemButtonStyle>.
 */
style: number,

/**
 * Specifies an iOS system button appearance, as defined in <Titanium.UI.iOS.SystemButton>.
 */
systemButton: number,

/**
 * Text alignment, specified using one of the <Titanium.UI> text alignment constants.
 */
textAlign: string | number,

/**
 * Button title.
 */
title: string,

/**
 * Key identifying a string from the locale file to use for the button title.
 */
titleid: string,

/**
 * Vertical alignment for the text field, specified using one of the
 * vertical alignment constants from <Titanium.UI>.
 */
verticalAlign: number | string,

/**
 * Gets the value of the <Titanium.UI.Button.attributedString> property.
 */
getAttributedString(): Titanium$UI$AttributedString,

/**
 * Sets the value of the <Titanium.UI.Button.attributedString> property.
 */
setAttributedString(attributedString: Titanium$UI$AttributedString): void,

/**
 * Gets the value of the <Titanium.UI.Button.color> property.
 */
getColor(): string,

/**
 * Sets the value of the <Titanium.UI.Button.color> property.
 */
setColor(color: string): void,

/**
 * Gets the value of the <Titanium.UI.Button.disabledColor> property.
 */
getDisabledColor(): string,

/**
 * Sets the value of the <Titanium.UI.Button.disabledColor> property.
 */
setDisabledColor(disabledColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Button.enabled> property.
 */
getEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.Button.enabled> property.
 */
setEnabled(enabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Button.font> property.
 */
getFont(): Font,

/**
 * Sets the value of the <Titanium.UI.Button.font> property.
 */
setFont(font: Font): void,

/**
 * Gets the value of the <Titanium.UI.Button.image> property.
 */
getImage(): string | Titanium$Blob,

/**
 * Sets the value of the <Titanium.UI.Button.image> property.
 */
setImage(image: string): void,

/**
 * Sets the value of the <Titanium.UI.Button.image> property.
 */
setImage(image: Titanium$Blob): void,

/**
 * Gets the value of the <Titanium.UI.Button.selectedColor> property.
 */
getSelectedColor(): string,

/**
 * Sets the value of the <Titanium.UI.Button.selectedColor> property.
 */
setSelectedColor(selectedColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Button.shadowColor> property.
 */
getShadowColor(): string,

/**
 * Sets the value of the <Titanium.UI.Button.shadowColor> property.
 */
setShadowColor(shadowColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Button.shadowOffset> property.
 */
getShadowOffset(): any,

/**
 * Sets the value of the <Titanium.UI.Button.shadowOffset> property.
 */
setShadowOffset(shadowOffset: any): void,

/**
 * Gets the value of the <Titanium.UI.Button.shadowRadius> property.
 */
getShadowRadius(): number,

/**
 * Sets the value of the <Titanium.UI.Button.shadowRadius> property.
 */
setShadowRadius(shadowRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.Button.style> property.
 */
getStyle(): number,

/**
 * Sets the value of the <Titanium.UI.Button.style> property.
 */
setStyle(style: number): void,

/**
 * Gets the value of the <Titanium.UI.Button.systemButton> property.
 */
getSystemButton(): number,

/**
 * Sets the value of the <Titanium.UI.Button.systemButton> property.
 */
setSystemButton(systemButton: number): void,

/**
 * Gets the value of the <Titanium.UI.Button.textAlign> property.
 */
getTextAlign(): string | number,

/**
 * Sets the value of the <Titanium.UI.Button.textAlign> property.
 */
setTextAlign(textAlign: string): void,

/**
 * Sets the value of the <Titanium.UI.Button.textAlign> property.
 */
setTextAlign(textAlign: number): void,

/**
 * Gets the value of the <Titanium.UI.Button.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.UI.Button.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.UI.Button.titleid> property.
 */
getTitleid(): string,

/**
 * Sets the value of the <Titanium.UI.Button.titleid> property.
 */
setTitleid(titleid: string): void,

/**
 * Gets the value of the <Titanium.UI.Button.verticalAlign> property.
 */
getVerticalAlign(): number | string,

/**
 * Sets the value of the <Titanium.UI.Button.verticalAlign> property.
 */
setVerticalAlign(verticalAlign: number): void,

/**
 * Sets the value of the <Titanium.UI.Button.verticalAlign> property.
 */
setVerticalAlign(verticalAlign: string): void
} & Titanium$UI$View



/**
 * An iOS button bar component.
 */
declare type Titanium$UI$ButtonBar = {

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Current position of the view during an animation.
 */
+animatedCenter: Point,

/**
 * Background color of the view, as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * A background gradient for the view.
 */
backgroundGradient: Gradient,

/**
 * Background image for the view, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Determines whether to tile a background across a view.
 */
backgroundRepeat: boolean,

/**
 * Size of the left end cap.
 */
backgroundLeftCap: number,

/**
 * Size of the top end cap.
 */
backgroundTopCap: number,

/**
 * Border color of the view, as a color name or hex triplet.
 */
borderColor: string,

/**
 * Radius for the rounded corners of the view's border.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * View's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * View's clipping behavior.
 */
clipMode: number,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Adds a horizontal parallax effect to the view
 */
horizontalMotionEffect: any,

/**
 * View's left position, in platform-specific units.
 */
left: number | string,

/**
 * Specifies how the view positions its children.
 * One of: 'composite', 'vertical', or 'horizontal'.
 */
layout: string,

/**
 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
 */
opacity: number,

/**
 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
 */
pullBackgroundColor: string,

/**
 * The preview context used in the 3D-Touch feature "Peek and Pop".
 */
previewContext: Titanium$UI$iOS$PreviewContext,

/**
 * View's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * The view's tintColor
 */
tintColor: string,

/**
 * The view's top position.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Adds a vertical parallax effect to the view
 */
verticalMotionEffect: any,

/**
 * Determines the blur radius used to create the shadow.
 */
viewShadowRadius: number,

/**
 * Determines the color of the shadow.
 */
viewShadowColor: string,

/**
 * Determines the offset for the shadow of the view.
 */
viewShadowOffset: Point,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * Index of the currently selected button.
 */
index: number,

/**
 * Array of labels for the button bar.
 */
labels: string[] | BarItemType[],

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.animatedCenter> property.
 */
getAnimatedCenter(): Point,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.backgroundGradient> property.
 */
getBackgroundGradient(): Gradient,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.backgroundGradient> property.
 */
setBackgroundGradient(backgroundGradient: Gradient): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.backgroundImage> property.
 */
getBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.backgroundRepeat> property.
 */
getBackgroundRepeat(): boolean,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.backgroundRepeat> property.
 */
setBackgroundRepeat(backgroundRepeat: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.backgroundLeftCap> property.
 */
getBackgroundLeftCap(): number,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.backgroundLeftCap> property.
 */
setBackgroundLeftCap(backgroundLeftCap: number): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.backgroundTopCap> property.
 */
getBackgroundTopCap(): number,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.backgroundTopCap> property.
 */
setBackgroundTopCap(backgroundTopCap: number): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.borderColor> property.
 */
getBorderColor(): string,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.borderColor> property.
 */
setBorderColor(borderColor: string): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.clipMode> property.
 */
getClipMode(): number,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.clipMode> property.
 */
setClipMode(clipMode: number): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.horizontalMotionEffect> property.
 */
getHorizontalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.horizontalMotionEffect> property.
 */
setHorizontalMotionEffect(horizontalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.layout> property.
 */
getLayout(): string,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.layout> property.
 */
setLayout(layout: string): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.pullBackgroundColor> property.
 */
getPullBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.pullBackgroundColor> property.
 */
setPullBackgroundColor(pullBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.previewContext> property.
 */
getPreviewContext(): Titanium$UI$iOS$PreviewContext,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.previewContext> property.
 */
setPreviewContext(previewContext: Titanium$UI$iOS$PreviewContext): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.tintColor> property.
 */
getTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.tintColor> property.
 */
setTintColor(tintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.verticalMotionEffect> property.
 */
getVerticalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.verticalMotionEffect> property.
 */
setVerticalMotionEffect(verticalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.viewShadowRadius> property.
 */
getViewShadowRadius(): number,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.viewShadowRadius> property.
 */
setViewShadowRadius(viewShadowRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.viewShadowColor> property.
 */
getViewShadowColor(): string,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.viewShadowColor> property.
 */
setViewShadowColor(viewShadowColor: string): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.viewShadowOffset> property.
 */
getViewShadowOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.viewShadowOffset> property.
 */
setViewShadowOffset(viewShadowOffset: Point): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.index> property.
 */
getIndex(): number,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.index> property.
 */
setIndex(index: number): void,

/**
 * Gets the value of the <Titanium.UI.ButtonBar.labels> property.
 */
getLabels(): string[] | BarItemType[],

/**
 * Sets the value of the <Titanium.UI.ButtonBar.labels> property.
 */
setLabels(labels: $ReadOnlyArray<string>): void,

/**
 * Sets the value of the <Titanium.UI.ButtonBar.labels> property.
 */
setLabels(labels: $ReadOnlyArray<BarItemType>): void
} & Titanium$Proxy



/**
 * The cover flow view is a container showing animated three-dimensional images in a style
 * consistent with the cover flow presentation used for iPod, iTunes, and file browsing.
 */
declare type Titanium$UI$CoverFlowView = {

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Current position of the view during an animation.
 */
+animatedCenter: Point,

/**
 * Background color of the view, as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * A background gradient for the view.
 */
backgroundGradient: Gradient,

/**
 * Background image for the view, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Determines whether to tile a background across a view.
 */
backgroundRepeat: boolean,

/**
 * Size of the left end cap.
 */
backgroundLeftCap: number,

/**
 * Size of the top end cap.
 */
backgroundTopCap: number,

/**
 * Border color of the view, as a color name or hex triplet.
 */
borderColor: string,

/**
 * Radius for the rounded corners of the view's border.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * View's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * View's clipping behavior.
 */
clipMode: number,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Adds a horizontal parallax effect to the view
 */
horizontalMotionEffect: any,

/**
 * View's left position, in platform-specific units.
 */
left: number | string,

/**
 * Specifies how the view positions its children.
 * One of: 'composite', 'vertical', or 'horizontal'.
 */
layout: string,

/**
 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
 */
opacity: number,

/**
 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
 */
pullBackgroundColor: string,

/**
 * The preview context used in the 3D-Touch feature "Peek and Pop".
 */
previewContext: Titanium$UI$iOS$PreviewContext,

/**
 * View's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * The view's tintColor
 */
tintColor: string,

/**
 * The view's top position.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Adds a vertical parallax effect to the view
 */
verticalMotionEffect: any,

/**
 * Determines the blur radius used to create the shadow.
 */
viewShadowRadius: number,

/**
 * Determines the color of the shadow.
 */
viewShadowColor: string,

/**
 * Determines the offset for the shadow of the view.
 */
viewShadowOffset: Point,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * Array of images to display in the view.
 */
images: string[] | Titanium$Blob[] | Titanium$Filesystem$File[] | CoverFlowImageType[],

/**
 * Index to make selected.
 */
selected: number,

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Changes the image for a specified index.
 */
setImage(index: number, image: string): void,

/**
 * Changes the image for a specified index.
 */
setImage(index: number, image: Titanium$Blob): void,

/**
 * Changes the image for a specified index.
 */
setImage(index: number, image: Titanium$Filesystem$File): void,

/**
 * Changes the image for a specified index.
 */
setImage(index: number, image: CoverFlowImageType): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.animatedCenter> property.
 */
getAnimatedCenter(): Point,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.backgroundGradient> property.
 */
getBackgroundGradient(): Gradient,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.backgroundGradient> property.
 */
setBackgroundGradient(backgroundGradient: Gradient): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.backgroundImage> property.
 */
getBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.backgroundRepeat> property.
 */
getBackgroundRepeat(): boolean,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.backgroundRepeat> property.
 */
setBackgroundRepeat(backgroundRepeat: boolean): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.backgroundLeftCap> property.
 */
getBackgroundLeftCap(): number,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.backgroundLeftCap> property.
 */
setBackgroundLeftCap(backgroundLeftCap: number): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.backgroundTopCap> property.
 */
getBackgroundTopCap(): number,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.backgroundTopCap> property.
 */
setBackgroundTopCap(backgroundTopCap: number): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.borderColor> property.
 */
getBorderColor(): string,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.borderColor> property.
 */
setBorderColor(borderColor: string): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.clipMode> property.
 */
getClipMode(): number,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.clipMode> property.
 */
setClipMode(clipMode: number): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.horizontalMotionEffect> property.
 */
getHorizontalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.horizontalMotionEffect> property.
 */
setHorizontalMotionEffect(horizontalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.layout> property.
 */
getLayout(): string,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.layout> property.
 */
setLayout(layout: string): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.pullBackgroundColor> property.
 */
getPullBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.pullBackgroundColor> property.
 */
setPullBackgroundColor(pullBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.previewContext> property.
 */
getPreviewContext(): Titanium$UI$iOS$PreviewContext,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.previewContext> property.
 */
setPreviewContext(previewContext: Titanium$UI$iOS$PreviewContext): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.tintColor> property.
 */
getTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.tintColor> property.
 */
setTintColor(tintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.verticalMotionEffect> property.
 */
getVerticalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.verticalMotionEffect> property.
 */
setVerticalMotionEffect(verticalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.viewShadowRadius> property.
 */
getViewShadowRadius(): number,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.viewShadowRadius> property.
 */
setViewShadowRadius(viewShadowRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.viewShadowColor> property.
 */
getViewShadowColor(): string,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.viewShadowColor> property.
 */
setViewShadowColor(viewShadowColor: string): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.viewShadowOffset> property.
 */
getViewShadowOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.viewShadowOffset> property.
 */
setViewShadowOffset(viewShadowOffset: Point): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.images> property.
 */
getImages(
): string[] | Titanium$Blob[] | Titanium$Filesystem$File[] | CoverFlowImageType[],

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.images> property.
 */
setImages(images: $ReadOnlyArray<string>): void,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.images> property.
 */
setImages(images: $ReadOnlyArray<Titanium$Blob>): void,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.images> property.
 */
setImages(images: $ReadOnlyArray<Titanium$Filesystem$File>): void,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.images> property.
 */
setImages(images: $ReadOnlyArray<CoverFlowImageType>): void,

/**
 * Gets the value of the <Titanium.UI.CoverFlowView.selected> property.
 */
getSelected(): number,

/**
 * Sets the value of the <Titanium.UI.CoverFlowView.selected> property.
 */
setSelected(selected: number): void
} & Titanium$Proxy



/**
 * A dashboard item is a view that is displayed as an icon in a <Titanium.UI.DashboardView>.
 */
declare type Titanium$UI$DashboardItem = {

/**
 * Integer value displayed in a badge.
 */
badge: number,

/**
 * Determines whether this item can be deleted when it edit mode.
 */
canDelete: boolean,

/**
 * Image or path to image to display in the item by default.
 */
image: string | Titanium$Blob,

/**
 * Image or path to image to display in the item as it is selected.
 */
selectedImage: string | Titanium$Blob,

/**
 * Gets the value of the <Titanium.UI.DashboardItem.badge> property.
 */
getBadge(): number,

/**
 * Sets the value of the <Titanium.UI.DashboardItem.badge> property.
 */
setBadge(badge: number): void,

/**
 * Gets the value of the <Titanium.UI.DashboardItem.canDelete> property.
 */
getCanDelete(): boolean,

/**
 * Sets the value of the <Titanium.UI.DashboardItem.canDelete> property.
 */
setCanDelete(canDelete: boolean): void,

/**
 * Gets the value of the <Titanium.UI.DashboardItem.image> property.
 */
getImage(): string | Titanium$Blob,

/**
 * Sets the value of the <Titanium.UI.DashboardItem.image> property.
 */
setImage(image: string): void,

/**
 * Sets the value of the <Titanium.UI.DashboardItem.image> property.
 */
setImage(image: Titanium$Blob): void,

/**
 * Gets the value of the <Titanium.UI.DashboardItem.selectedImage> property.
 */
getSelectedImage(): string | Titanium$Blob,

/**
 * Sets the value of the <Titanium.UI.DashboardItem.selectedImage> property.
 */
setSelectedImage(selectedImage: string): void,

/**
 * Sets the value of the <Titanium.UI.DashboardItem.selectedImage> property.
 */
setSelectedImage(selectedImage: Titanium$Blob): void
} & Titanium$Proxy



/**
 * A dashboard view is an iOS Springboard-like view of <Titanium.UI.DashboardItem> items that may
 * be deleted and reordered by the user using its built-in edit mode.
 */
declare type Titanium$UI$DashboardView = {

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Current position of the view during an animation.
 */
+animatedCenter: Point,

/**
 * Background color of the view, as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * A background gradient for the view.
 */
backgroundGradient: Gradient,

/**
 * Background image for the view, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Determines whether to tile a background across a view.
 */
backgroundRepeat: boolean,

/**
 * Size of the left end cap.
 */
backgroundLeftCap: number,

/**
 * Size of the top end cap.
 */
backgroundTopCap: number,

/**
 * Border color of the view, as a color name or hex triplet.
 */
borderColor: string,

/**
 * Radius for the rounded corners of the view's border.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * View's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * Array of this view's child views.
 */
+children: Titanium$UI$View[],

/**
 * View's clipping behavior.
 */
clipMode: number,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Adds a horizontal parallax effect to the view
 */
horizontalMotionEffect: any,

/**
 * View's left position, in platform-specific units.
 */
left: number | string,

/**
 * Specifies how the view positions its children.
 * One of: 'composite', 'vertical', or 'horizontal'.
 */
layout: string,

/**
 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
 */
opacity: number,

/**
 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
 */
pullBackgroundColor: string,

/**
 * The preview context used in the 3D-Touch feature "Peek and Pop".
 */
previewContext: Titanium$UI$iOS$PreviewContext,

/**
 * View's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * The view's tintColor
 */
tintColor: string,

/**
 * The view's top position.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Adds a vertical parallax effect to the view
 */
verticalMotionEffect: any,

/**
 * Determines the blur radius used to create the shadow.
 */
viewShadowRadius: number,

/**
 * Determines the color of the shadow.
 */
viewShadowColor: string,

/**
 * Determines the offset for the shadow of the view.
 */
viewShadowOffset: Point,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * The number of columns of items in the view.
 */
columnCount: number,

/**
 * The number of rows of items in the view.
 */
rowCount: number,

/**
 * Items to display in this view.
 */
data: Titanium$UI$DashboardItem[],

/**
 * Determines whether edit mode is activated by a longpress of an item.
 */
editable: boolean,

/**
 * Determines whether the wobble visual editing cue is enabled in edit mode.
 */
wobble: boolean,

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Enable edit mode.
 */
startEditing(): void,

/**
 * Disable edit mode.
 */
stopEditing(): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.DashboardView.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.DashboardView.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.DashboardView.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.DashboardView.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.DashboardView.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.animatedCenter> property.
 */
getAnimatedCenter(): Point,

/**
 * Gets the value of the <Titanium.UI.DashboardView.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.DashboardView.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.backgroundGradient> property.
 */
getBackgroundGradient(): Gradient,

/**
 * Sets the value of the <Titanium.UI.DashboardView.backgroundGradient> property.
 */
setBackgroundGradient(backgroundGradient: Gradient): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.backgroundImage> property.
 */
getBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.DashboardView.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.backgroundRepeat> property.
 */
getBackgroundRepeat(): boolean,

/**
 * Sets the value of the <Titanium.UI.DashboardView.backgroundRepeat> property.
 */
setBackgroundRepeat(backgroundRepeat: boolean): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.backgroundLeftCap> property.
 */
getBackgroundLeftCap(): number,

/**
 * Sets the value of the <Titanium.UI.DashboardView.backgroundLeftCap> property.
 */
setBackgroundLeftCap(backgroundLeftCap: number): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.backgroundTopCap> property.
 */
getBackgroundTopCap(): number,

/**
 * Sets the value of the <Titanium.UI.DashboardView.backgroundTopCap> property.
 */
setBackgroundTopCap(backgroundTopCap: number): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.borderColor> property.
 */
getBorderColor(): string,

/**
 * Sets the value of the <Titanium.UI.DashboardView.borderColor> property.
 */
setBorderColor(borderColor: string): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.DashboardView.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.DashboardView.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.DashboardView.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.DashboardView.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.DashboardView.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.children> property.
 */
getChildren(): Titanium$UI$View[],

/**
 * Gets the value of the <Titanium.UI.DashboardView.clipMode> property.
 */
getClipMode(): number,

/**
 * Sets the value of the <Titanium.UI.DashboardView.clipMode> property.
 */
setClipMode(clipMode: number): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.DashboardView.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.DashboardView.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.horizontalMotionEffect> property.
 */
getHorizontalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.DashboardView.horizontalMotionEffect> property.
 */
setHorizontalMotionEffect(horizontalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.DashboardView.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.DashboardView.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.layout> property.
 */
getLayout(): string,

/**
 * Sets the value of the <Titanium.UI.DashboardView.layout> property.
 */
setLayout(layout: string): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.DashboardView.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.pullBackgroundColor> property.
 */
getPullBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.DashboardView.pullBackgroundColor> property.
 */
setPullBackgroundColor(pullBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.previewContext> property.
 */
getPreviewContext(): Titanium$UI$iOS$PreviewContext,

/**
 * Sets the value of the <Titanium.UI.DashboardView.previewContext> property.
 */
setPreviewContext(previewContext: Titanium$UI$iOS$PreviewContext): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.DashboardView.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.DashboardView.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.DashboardView.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.DashboardView.tintColor> property.
 */
getTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.DashboardView.tintColor> property.
 */
setTintColor(tintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.DashboardView.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.DashboardView.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.DashboardView.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.DashboardView.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.DashboardView.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.verticalMotionEffect> property.
 */
getVerticalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.DashboardView.verticalMotionEffect> property.
 */
setVerticalMotionEffect(verticalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.viewShadowRadius> property.
 */
getViewShadowRadius(): number,

/**
 * Sets the value of the <Titanium.UI.DashboardView.viewShadowRadius> property.
 */
setViewShadowRadius(viewShadowRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.viewShadowColor> property.
 */
getViewShadowColor(): string,

/**
 * Sets the value of the <Titanium.UI.DashboardView.viewShadowColor> property.
 */
setViewShadowColor(viewShadowColor: string): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.viewShadowOffset> property.
 */
getViewShadowOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.DashboardView.viewShadowOffset> property.
 */
setViewShadowOffset(viewShadowOffset: Point): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.DashboardView.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.DashboardView.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.DashboardView.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.DashboardView.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.DashboardView.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.columnCount> property.
 */
getColumnCount(): number,

/**
 * Sets the value of the <Titanium.UI.DashboardView.columnCount> property.
 */
setColumnCount(columnCount: number): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.rowCount> property.
 */
getRowCount(): number,

/**
 * Sets the value of the <Titanium.UI.DashboardView.rowCount> property.
 */
setRowCount(rowCount: number): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.data> property.
 */
getData(): Titanium$UI$DashboardItem[],

/**
 * Sets the value of the <Titanium.UI.DashboardView.data> property.
 */
setData(data: $ReadOnlyArray<Titanium$UI$DashboardItem>): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.editable> property.
 */
getEditable(): boolean,

/**
 * Sets the value of the <Titanium.UI.DashboardView.editable> property.
 */
setEditable(editable: boolean): void,

/**
 * Gets the value of the <Titanium.UI.DashboardView.wobble> property.
 */
getWobble(): boolean,

/**
 * Sets the value of the <Titanium.UI.DashboardView.wobble> property.
 */
setWobble(wobble: boolean): void
} & Titanium$Proxy



/**
 * An email dialog is a modal window that allows users to compose and send an email.
 */
declare type Titanium$UI$EmailDialog = {

/**
 * Constant for the `CANCELLED` status result. On Android, this property exists but is not used.
 */
+CANCELLED: number,

/**
 * Constant for the `FAILED` status result.
 */
+FAILED: number,

/**
 * Constant for the `SAVED` status result. On Android, this property exists but is not used.
 */
+SAVED: number,

/**
 * Constant for the `SENT` status result.
 */
+SENT: number,

/**
 * Bar color of the email dialog window, as a color name or hex triplet.
 */
barColor: string,

/**
 * Recipients of the email included via the `BCC` (Blind Carbon Copy) field.
 */
bccRecipients: string[],

/**
 * Recipients of the email included via the `CC` (Carbon Copy) field.
 */
ccRecipients: string[],

/**
 * Determines whether the email message, specifically the contents of
 * [messageBody](Titanium.UI.EmailDialog.messageBody), should be sent as HTML content type
 * rather than plain text.
 */
html: boolean,

/**
 * Email message body.
 */
messageBody: string,

/**
 * Subject line for the email.
 */
subject: string,

/**
 * Recipients of the email included via the main `TO` field.
 */
toRecipients: string[],

/**
 * Adds an attachment.
 */
addAttachment(attachment: Titanium$Blob): void,

/**
 * Adds an attachment.
 */
addAttachment(attachment: Titanium$Filesystem$File): void,

/**
 * Indicates whether sending email is supported by the system.
 */
isSupported(): boolean,

/**
 * Opens this email dialog.
 */
open(properties: any): void,

/**
 * Gets the value of the <Titanium.UI.EmailDialog.barColor> property.
 */
getBarColor(): string,

/**
 * Sets the value of the <Titanium.UI.EmailDialog.barColor> property.
 */
setBarColor(barColor: string): void,

/**
 * Gets the value of the <Titanium.UI.EmailDialog.bccRecipients> property.
 */
getBccRecipients(): string[],

/**
 * Sets the value of the <Titanium.UI.EmailDialog.bccRecipients> property.
 */
setBccRecipients(bccRecipients: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.UI.EmailDialog.ccRecipients> property.
 */
getCcRecipients(): string[],

/**
 * Sets the value of the <Titanium.UI.EmailDialog.ccRecipients> property.
 */
setCcRecipients(ccRecipients: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.UI.EmailDialog.html> property.
 */
getHtml(): boolean,

/**
 * Sets the value of the <Titanium.UI.EmailDialog.html> property.
 */
setHtml(html: boolean): void,

/**
 * Gets the value of the <Titanium.UI.EmailDialog.messageBody> property.
 */
getMessageBody(): string,

/**
 * Sets the value of the <Titanium.UI.EmailDialog.messageBody> property.
 */
setMessageBody(messageBody: string): void,

/**
 * Gets the value of the <Titanium.UI.EmailDialog.subject> property.
 */
getSubject(): string,

/**
 * Sets the value of the <Titanium.UI.EmailDialog.subject> property.
 */
setSubject(subject: string): void,

/**
 * Gets the value of the <Titanium.UI.EmailDialog.toRecipients> property.
 */
getToRecipients(): string[],

/**
 * Sets the value of the <Titanium.UI.EmailDialog.toRecipients> property.
 */
setToRecipients(toRecipients: $ReadOnlyArray<string>): void
} & Titanium$UI$View



/**
 * A view to display a single image or series of animated images.
 */
declare type Titanium$UI$ImageView = {

/**
 * Indicates whether animation is running.
 */
+animating: boolean,

/**
 * Indicates whether the image should be rotated based on exif orientation data.
 * By default, this is false on android and true on iOS.
 */
autorotate: boolean,

/**
 * Number of times to retry decoding the bitmap at a URL.
 */
decodeRetries: number,

/**
 * Local path to the default image to display while loading a remote image.
 */
defaultImage: string,

/**
 * Amount of time in milliseconds to animate one cycle.
 */
duration: number,

/**
 * Show zoom controls when the user touches the image view.
 */
enableZoomControls: boolean,

/**
 * Set to `true` to prevent scaling of 2x/3x-resolution remote images for retina
 * displays.
 */
hires: boolean,

/**
 * Image to display.
 */
image: string | Titanium$Blob | Titanium$Filesystem$File,

/**
 * Array of images to animate, defined using local filesystem paths, `File` objects,
 * remote URLs (Android only), or `Blob` objects containing image data.
 * When using this property, an initial `start()` needs to be called upon the ImageView before any image will show in this imageview.
 * Related properties/methods to look at: `start`, `stop`, `pause`, `reverse`, `resume` and `repeatCount`
 */
images: string[] | Titanium$Blob[] | Titanium$Filesystem$File[],

/**
 * Indicates whether the animation is paused.
 */
+paused: boolean,

/**
 * Prevent the default image from being displayed while loading a remote image. This property
 * is ignored when the `defaultImage` property is set.
 */
preventDefaultImage: boolean,

/**
 * Number of times to repeat the image animation.
 */
repeatCount: number,

/**
 * Run the animation in reverse.
 */
reverse: boolean,

/**
 * URL to the image to display.
 */
url: string,

/**
 * Pauses a running animation. Use `resume` method to continue.
 */
pause(): void,

/**
 * Resumes an animation from a `pause` state.
 */
resume(): void,

/**
 * Starts the image animation. On Android, also resets `index` to the first image.
 */
start(): void,

/**
 * Stops a running animation. On iOS, also resets `index` to the first image.
 */
stop(): void,

/**
 * Returns the image as a Blob object.
 */
toBlob(): Titanium$Blob,

/**
 * Gets the value of the <Titanium.UI.ImageView.animating> property.
 */
getAnimating(): boolean,

/**
 * Gets the value of the <Titanium.UI.ImageView.autorotate> property.
 */
getAutorotate(): boolean,

/**
 * Sets the value of the <Titanium.UI.ImageView.autorotate> property.
 */
setAutorotate(autorotate: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ImageView.decodeRetries> property.
 */
getDecodeRetries(): number,

/**
 * Sets the value of the <Titanium.UI.ImageView.decodeRetries> property.
 */
setDecodeRetries(decodeRetries: number): void,

/**
 * Gets the value of the <Titanium.UI.ImageView.defaultImage> property.
 */
getDefaultImage(): string,

/**
 * Sets the value of the <Titanium.UI.ImageView.defaultImage> property.
 */
setDefaultImage(defaultImage: string): void,

/**
 * Gets the value of the <Titanium.UI.ImageView.duration> property.
 */
getDuration(): number,

/**
 * Sets the value of the <Titanium.UI.ImageView.duration> property.
 */
setDuration(duration: number): void,

/**
 * Gets the value of the <Titanium.UI.ImageView.enableZoomControls> property.
 */
getEnableZoomControls(): boolean,

/**
 * Sets the value of the <Titanium.UI.ImageView.enableZoomControls> property.
 */
setEnableZoomControls(enableZoomControls: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ImageView.hires> property.
 */
getHires(): boolean,

/**
 * Sets the value of the <Titanium.UI.ImageView.hires> property.
 */
setHires(hires: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ImageView.image> property.
 */
getImage(): string | Titanium$Blob | Titanium$Filesystem$File,

/**
 * Sets the value of the <Titanium.UI.ImageView.image> property.
 */
setImage(image: string): void,

/**
 * Sets the value of the <Titanium.UI.ImageView.image> property.
 */
setImage(image: Titanium$Blob): void,

/**
 * Sets the value of the <Titanium.UI.ImageView.image> property.
 */
setImage(image: Titanium$Filesystem$File): void,

/**
 * Gets the value of the <Titanium.UI.ImageView.images> property.
 */
getImages(): string[] | Titanium$Blob[] | Titanium$Filesystem$File[],

/**
 * Sets the value of the <Titanium.UI.ImageView.images> property.
 */
setImages(images: $ReadOnlyArray<string>): void,

/**
 * Sets the value of the <Titanium.UI.ImageView.images> property.
 */
setImages(images: $ReadOnlyArray<Titanium$Blob>): void,

/**
 * Sets the value of the <Titanium.UI.ImageView.images> property.
 */
setImages(images: $ReadOnlyArray<Titanium$Filesystem$File>): void,

/**
 * Gets the value of the <Titanium.UI.ImageView.paused> property.
 */
getPaused(): boolean,

/**
 * Gets the value of the <Titanium.UI.ImageView.preventDefaultImage> property.
 */
getPreventDefaultImage(): boolean,

/**
 * Sets the value of the <Titanium.UI.ImageView.preventDefaultImage> property.
 */
setPreventDefaultImage(preventDefaultImage: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ImageView.repeatCount> property.
 */
getRepeatCount(): number,

/**
 * Sets the value of the <Titanium.UI.ImageView.repeatCount> property.
 */
setRepeatCount(repeatCount: number): void,

/**
 * Gets the value of the <Titanium.UI.ImageView.reverse> property.
 */
getReverse(): boolean,

/**
 * Sets the value of the <Titanium.UI.ImageView.reverse> property.
 */
setReverse(reverse: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ImageView.url> property.
 */
getUrl(): string,

/**
 * Sets the value of the <Titanium.UI.ImageView.url> property.
 */
setUrl(url: string): void
} & Titanium$UI$View



/**
 * A text label, with an optional background image.
 */
declare type Titanium$UI$Label = {

/**
 * Specify an attributed string for the label.
 */
attributedString: Titanium$UI$AttributedString,

/**
 * Automatically convert certain text items in the label to clickable links.
 */
autoLink: number,

/**
 * Number of pixels to extend the background image past the label on the bottom.
 */
backgroundPaddingBottom: number,

/**
 * Number of pixels to extend the background image past the label on the left.
 */
backgroundPaddingLeft: number,

/**
 * Number of pixels to extend the background image past the label on the right.
 */
backgroundPaddingRight: number,

/**
 * Number of pixels to extend the background image past the label on the top.
 */
backgroundPaddingTop: number,

/**
 * Color of the label text, as a color name or hex triplet.
 */
color: string,

/**
 * Causes words in the text that are longer than the view is wide to be ellipsized instead of broken in the middle.
 */
ellipsize: number,

/**
 * Font to use for the label text.
 */
font: Font,

/**
 * Color of the label when in the highlighted state, as a color name or hex triplet.
 */
highlightedColor: string,

/**
 * Simple HTML formatting.
 */
html: string,

/**
 * Includes extra top and bottom padding to make room for accents that go above normal ascent and descent.
 */
includeFontPadding: boolean,

/**
 * Makes the label be exactly this many lines tall.
 */
lines: number,

/**
 * Line spacing of the [text](Titanium.UI.Label.text), as a dictionary with the properties `add` and `multiply`.
 */
lineSpacing: any,

/**
 * Makes the label at most this many lines tall.
 */
maxLines: number,

/**
 * Minimum font size when the font is sized based on the contents.
 */
minimumFontSize: number,

/**
 * Shadow color of the [text](Titanium.UI.Label.text), as a color name or hex triplet.
 */
shadowColor: string,

/**
 * Shadow offset of the [text](Titanium.UI.Label.text), as a dictionary with the properties `x` and `y`.
 */
shadowOffset: any,

/**
 * Shadow radius of the [text](Titanium.UI.Label.text).
 */
shadowRadius: number,

/**
 * Label text.
 */
text: string,

/**
 * Text alignment.
 */
textAlign: string | number,

/**
 * Key identifying a string from the locale file to use for the label text.
 */
textid: string,

/**
 * Enable or disable word wrapping in the label.
 */
wordWrap: boolean,

/**
 * Vertical text alignment, specified using one of the  vertical alignment constants
 * from <Titanium.UI>.
 */
verticalAlign: number | string,

/**
 * Gets the value of the <Titanium.UI.Label.attributedString> property.
 */
getAttributedString(): Titanium$UI$AttributedString,

/**
 * Sets the value of the <Titanium.UI.Label.attributedString> property.
 */
setAttributedString(attributedString: Titanium$UI$AttributedString): void,

/**
 * Gets the value of the <Titanium.UI.Label.autoLink> property.
 */
getAutoLink(): number,

/**
 * Sets the value of the <Titanium.UI.Label.autoLink> property.
 */
setAutoLink(autoLink: number): void,

/**
 * Gets the value of the <Titanium.UI.Label.backgroundPaddingBottom> property.
 */
getBackgroundPaddingBottom(): number,

/**
 * Sets the value of the <Titanium.UI.Label.backgroundPaddingBottom> property.
 */
setBackgroundPaddingBottom(backgroundPaddingBottom: number): void,

/**
 * Gets the value of the <Titanium.UI.Label.backgroundPaddingLeft> property.
 */
getBackgroundPaddingLeft(): number,

/**
 * Sets the value of the <Titanium.UI.Label.backgroundPaddingLeft> property.
 */
setBackgroundPaddingLeft(backgroundPaddingLeft: number): void,

/**
 * Gets the value of the <Titanium.UI.Label.backgroundPaddingRight> property.
 */
getBackgroundPaddingRight(): number,

/**
 * Sets the value of the <Titanium.UI.Label.backgroundPaddingRight> property.
 */
setBackgroundPaddingRight(backgroundPaddingRight: number): void,

/**
 * Gets the value of the <Titanium.UI.Label.backgroundPaddingTop> property.
 */
getBackgroundPaddingTop(): number,

/**
 * Sets the value of the <Titanium.UI.Label.backgroundPaddingTop> property.
 */
setBackgroundPaddingTop(backgroundPaddingTop: number): void,

/**
 * Gets the value of the <Titanium.UI.Label.color> property.
 */
getColor(): string,

/**
 * Sets the value of the <Titanium.UI.Label.color> property.
 */
setColor(color: string): void,

/**
 * Gets the value of the <Titanium.UI.Label.ellipsize> property.
 */
getEllipsize(): number,

/**
 * Sets the value of the <Titanium.UI.Label.ellipsize> property.
 */
setEllipsize(ellipsize: number): void,

/**
 * Gets the value of the <Titanium.UI.Label.font> property.
 */
getFont(): Font,

/**
 * Sets the value of the <Titanium.UI.Label.font> property.
 */
setFont(font: Font): void,

/**
 * Gets the value of the <Titanium.UI.Label.highlightedColor> property.
 */
getHighlightedColor(): string,

/**
 * Sets the value of the <Titanium.UI.Label.highlightedColor> property.
 */
setHighlightedColor(highlightedColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Label.html> property.
 */
getHtml(): string,

/**
 * Sets the value of the <Titanium.UI.Label.html> property.
 */
setHtml(html: string): void,

/**
 * Gets the value of the <Titanium.UI.Label.includeFontPadding> property.
 */
getIncludeFontPadding(): boolean,

/**
 * Sets the value of the <Titanium.UI.Label.includeFontPadding> property.
 */
setIncludeFontPadding(includeFontPadding: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Label.lines> property.
 */
getLines(): number,

/**
 * Sets the value of the <Titanium.UI.Label.lines> property.
 */
setLines(lines: number): void,

/**
 * Gets the value of the <Titanium.UI.Label.lineSpacing> property.
 */
getLineSpacing(): any,

/**
 * Sets the value of the <Titanium.UI.Label.lineSpacing> property.
 */
setLineSpacing(lineSpacing: any): void,

/**
 * Gets the value of the <Titanium.UI.Label.maxLines> property.
 */
getMaxLines(): number,

/**
 * Sets the value of the <Titanium.UI.Label.maxLines> property.
 */
setMaxLines(maxLines: number): void,

/**
 * Gets the value of the <Titanium.UI.Label.minimumFontSize> property.
 */
getMinimumFontSize(): number,

/**
 * Sets the value of the <Titanium.UI.Label.minimumFontSize> property.
 */
setMinimumFontSize(minimumFontSize: number): void,

/**
 * Gets the value of the <Titanium.UI.Label.shadowColor> property.
 */
getShadowColor(): string,

/**
 * Sets the value of the <Titanium.UI.Label.shadowColor> property.
 */
setShadowColor(shadowColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Label.shadowOffset> property.
 */
getShadowOffset(): any,

/**
 * Sets the value of the <Titanium.UI.Label.shadowOffset> property.
 */
setShadowOffset(shadowOffset: any): void,

/**
 * Gets the value of the <Titanium.UI.Label.shadowRadius> property.
 */
getShadowRadius(): number,

/**
 * Sets the value of the <Titanium.UI.Label.shadowRadius> property.
 */
setShadowRadius(shadowRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.Label.text> property.
 */
getText(): string,

/**
 * Sets the value of the <Titanium.UI.Label.text> property.
 */
setText(text: string): void,

/**
 * Gets the value of the <Titanium.UI.Label.textAlign> property.
 */
getTextAlign(): string | number,

/**
 * Sets the value of the <Titanium.UI.Label.textAlign> property.
 */
setTextAlign(textAlign: string): void,

/**
 * Sets the value of the <Titanium.UI.Label.textAlign> property.
 */
setTextAlign(textAlign: number): void,

/**
 * Gets the value of the <Titanium.UI.Label.textid> property.
 */
getTextid(): string,

/**
 * Sets the value of the <Titanium.UI.Label.textid> property.
 */
setTextid(textid: string): void,

/**
 * Gets the value of the <Titanium.UI.Label.wordWrap> property.
 */
getWordWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.Label.wordWrap> property.
 */
setWordWrap(wordWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Label.verticalAlign> property.
 */
getVerticalAlign(): number | string,

/**
 * Sets the value of the <Titanium.UI.Label.verticalAlign> property.
 */
setVerticalAlign(verticalAlign: number): void,

/**
 * Sets the value of the <Titanium.UI.Label.verticalAlign> property.
 */
setVerticalAlign(verticalAlign: string): void
} & Titanium$UI$View



/**
 * A list item is an individual item in a list section.
 */
declare type Titanium$UI$ListItem = {

/**
 * A user defined string that gets passed to events.
 */
itemId: string,

/**
 * Sets an accessory on the right side of an item.
 */
accessoryType: number,

/**
 * Background color of the view, as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * Background image to render when the item is not selected.
 */
backgroundImage: string,

/**
 * Background gradient to render when the item is not selected.
 */
backgroundGradient: Gradient,

/**
 * Background color of the view, as a color name or hex triplet when item is selected.
 */
selectedBackgroundColor: string,

/**
 * Background image to render when the item is selected.
 */
selectedBackgroundImage: string,

/**
 * Background gradient to render when the item is selected.
 */
selectedBackgroundGradient: Gradient,

/**
 * Specifies if the item can be deleted by a user initiated action.
 */
canEdit: boolean,

/**
 * Specifies if the item can be inserted by a user initiated action.
 */
canInsert: boolean,

/**
 * Specifies if the item can be reordered within the list view by a user initiated action.
 */
canMove: boolean,

/**
 * Specifies custom action items to be shown when when a list item is edited.
 */
editActions: RowActionType[],

/**
 * The text to match against when the [ListView](Titanium.UI.ListView) is performing a search.
 */
searchableText: string,

/**
 * Default text color of the item when not selected, as a color name or hex triplet.
 */
color: string,

/**
 * Default text color of the subtitle, as a color name or hex triplet.
 */
subtitleColor: string,

/**
 * Color to use for the item title when the item is selected, as a color name or hex triplet.
 */
selectedColor: string,

/**
 * Color to use for the item subtitle when the item is selected, as a color name or hex triplet.
 */
selectedSubtitleColor: string,

/**
 * Font to use for the item title.
 */
font: Font,

/**
 * Row height in platform-specific units.
 */
height: number | string,

/**
 * Image to render in the image area of the item, specified as a local path or URL.
 */
image: string,

/**
 * Title to set in the text area of the item.
 */
title: string,

/**
 * Selection style constant to control the selection color.
 */
selectionStyle: number,

/**
 * Subtitle to set in the text area of the item.
 */
subtitle: string,

/**
 * Gets the value of the <Titanium.UI.ListItem.editActions> property.
 */
getEditActions(): RowActionType[],

/**
 * Sets the value of the <Titanium.UI.ListItem.editActions> property.
 */
setEditActions(editActions: $ReadOnlyArray<RowActionType>): void,

/**
 * Gets the value of the <Titanium.UI.ListItem.selectedColor> property.
 */
getSelectedColor(): string,

/**
 * Sets the value of the <Titanium.UI.ListItem.selectedColor> property.
 */
setSelectedColor(selectedColor: string): void,

/**
 * Gets the value of the <Titanium.UI.ListItem.selectedSubtitleColor> property.
 */
getSelectedSubtitleColor(): string,

/**
 * Sets the value of the <Titanium.UI.ListItem.selectedSubtitleColor> property.
 */
setSelectedSubtitleColor(selectedSubtitleColor: string): void
} & Titanium$Proxy



/**
 * A list section is a container within a list view used to organize list items.
 */
declare type Titanium$UI$ListSection = {

/**
 * Title of this section footer.
 */
footerTitle: string,

/**
 * View to use for this section footer.
 */
footerView: Titanium$UI$View,

/**
 * Title of this section header.
 */
headerTitle: string,

/**
 * View to use for this section header.
 */
headerView: Titanium$UI$View,

/**
 * Items of this list section.
 */
items: ListDataItem[],

/**
 * Sets the data entries in the list section.
 */
setItems(
dataItems: $ReadOnlyArray<ListDataItem>,
animation?: ListViewAnimationProperties): void,

/**
 * Appends the data entries to the end of the list section.
 */
appendItems(
dataItems: $ReadOnlyArray<ListDataItem>,
animation?: ListViewAnimationProperties): void,

/**
 * Inserts data entries to the list section at the specified index.
 */
insertItemsAt(
itemIndex: number,
dataItems: $ReadOnlyArray<ListDataItem>,
animation?: ListViewAnimationProperties): void,

/**
 * Removes count entries from the list section at the specified index,
 * then inserts data entries to the list section at the same index.
 */
replaceItemsAt(
index: number,
count: number,
dataItems: $ReadOnlyArray<ListDataItem>,
animation?: ListViewAnimationProperties): void,

/**
 * Removes count entries from the list section at the specified index.
 */
deleteItemsAt(
itemIndex: number,
count: number,
animation?: ListViewAnimationProperties): void,

/**
 * Returns the item entry from the list view at the specified index.
 */
getItemAt(itemIndex: number): ListDataItem,

/**
 * Updates an item at the specified index.
 */
updateItemAt(
index: number,
dataItem: ListDataItem,
animation?: ListViewAnimationProperties): void,

/**
 * Gets the value of the <Titanium.UI.ListSection.footerTitle> property.
 */
getFooterTitle(): string,

/**
 * Sets the value of the <Titanium.UI.ListSection.footerTitle> property.
 */
setFooterTitle(footerTitle: string): void,

/**
 * Gets the value of the <Titanium.UI.ListSection.footerView> property.
 */
getFooterView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.ListSection.footerView> property.
 */
setFooterView(footerView: any): void,

/**
 * Gets the value of the <Titanium.UI.ListSection.headerTitle> property.
 */
getHeaderTitle(): string,

/**
 * Sets the value of the <Titanium.UI.ListSection.headerTitle> property.
 */
setHeaderTitle(headerTitle: string): void,

/**
 * Gets the value of the <Titanium.UI.ListSection.headerView> property.
 */
getHeaderView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.ListSection.headerView> property.
 */
setHeaderView(headerView: any): void,

/**
 * Gets the value of the <Titanium.UI.ListSection.items> property.
 */
getItems(): ListDataItem[]
} & Titanium$Proxy



/**
 * A list view is used to present information, organized in to sections and items,
 * in a vertically-scrolling view.
 */
declare type Titanium$UI$ListView = {

/**
 * Determines whether this item can be selected.
 */
allowsSelection: boolean,

/**
 * Determines if the list view can scroll in response to user actions.
 */
canScroll: boolean,

/**
 * Determines whether the scroll-bounce of the list view should be disabled.
 */
disableBounce: boolean,

/**
 * Determines if the list view is currently in editing mode.
 */
editing: boolean,

/**
 * Sets the fastScroll mode on Android ListViews.
 */
fastScroll: boolean,

/**
 * Determines whether this list view items can be selected while editing the table.
 */
allowsSelectionDuringEditing: boolean,

/**
 * Determines whether multiple items of this list view can be selected at the same time while editing the table.
 */
allowsMultipleSelectionDuringEditing: boolean,

/**
 * Determines if the list view should use lazy loading to load remote images.
 */
lazyLoadingEnabled: boolean,

/**
 * Determines if empty sections are retained when the user completes editing the list view.
 */
pruneSectionsOnEdit: boolean,

/**
 * Contain key-value pairs mapping a style name (key) to an <ItemTemplate> (value).
 */
templates: any,

/**
 * Sections of this list.
 */
sections: Titanium$UI$ListSection[],

/**
 * Sets the default template for list data items that do not specify the `template` property.
 */
defaultItemTemplate: string | number,

/**
 * height of the ListView separator.
 */
separatorHeight: string | number,

/**
 * When set to false, the ListView will not draw the divider before the footer view.
 */
footerDividersEnabled: boolean,

/**
 * List view footer title.
 */
footerTitle: string,

/**
 * List view footer as a view that will be rendered instead of a label.
 */
footerView: Titanium$UI$View,

/**
 * When set to false, the ListView will not draw the divider after the header view.
 */
headerDividersEnabled: boolean,

/**
 * List view header title.
 */
headerTitle: string,

/**
 * List view header as a view that will be rendered instead of a label.
 */
headerView: Titanium$UI$View,

/**
 * View positioned above the first row that is only revealed when the user drags the list view contents down.
 */
pullView: Titanium$UI$View,

/**
 * View positioned above the first row that is only revealed when the user drags the list view contents down.
 */
refreshControl: Titanium$UI$RefreshControl,

/**
 * Search field to use for the list view.
 */
searchView: Titanium$UI$SearchBar | Titanium$UI$Android$SearchView,

/**
 * The string to use as the search parameter.
 */
searchText: string,

/**
 * Determines if the search performed is case insensitive.
 */
caseInsensitiveSearch: boolean,

/**
 * Determines if the section information is displayed in the search results when using the `searchText` property.
 */
keepSectionsInSearch: boolean,

/**
 * The manner in which the keyboard is dismissed when a drag begins in the list view.
 */
keyboardDismissMode: number,

/**
 * Array of objects (with `title` and `index` properties) to control the list view index.
 */
sectionIndexTitles: ListViewIndexEntry[],

/**
 * Style of the scrollbar.
 */
scrollIndicatorStyle: number,

/**
 * Controls the scroll-to-top gesture.
 */
willScrollOnStatusTap: boolean,

/**
 * Number of sections in this list view.
 */
+sectionCount: number,

/**
 * Determines whether this list view displays a vertical scroll indicator.
 */
showVerticalScrollIndicator: boolean,

/**
 * Separator line color between items, as a color name or hex triplet.
 */
separatorColor: string,

/**
 * The insets for list view separators (applies to all cells).
 */
separatorInsets: any,

/**
 * Separator style constant.
 */
separatorStyle: number,

/**
 * Style of the list view.
 */
style: number,

/**
 * The insets for the table view header and footer.
 */
tableSeparatorInsets: any,

/**
 * The insets for the list view header and footer.
 */
listSeparatorInsets: any,

/**
 * The insets for list view cells (applies to all cells).
 */
rowSeparatorInsets: any,

/**
 * A Boolean indicating whether the underlying content is dimmed during a search.
 */
dimBackgroundForSearch: boolean,

/**
 * The background color of the search results (iOS-only).
 */
resultsBackgroundColor: string,

/**
 * Separator line color between rows inside search results,
 * as a color name or hex triplet (iOS-only).
 */
resultsSeparatorColor: string,

/**
 * The separator style of the search results (iOS-only).
 */
resultsSeparatorStyle: number,

/**
 * The insets for search results separators (applies to all cells & iOS-only).
 */
resultsSeparatorInsets: any,

/**
 * Returns the selected list view items.
 */
selectedItems: ListItemEventType[],

/**
 * Scrolls to a specific item.
 */
scrollToItem(
sectionIndex: number,
itemIndex: number,
animation?: ListViewAnimationProperties): void,

/**
 * Deselects a specific item.
 */
deselectItem(sectionIndex: number, itemIndex: number): void,

/**
 * Appends a single section or an array of sections to the end of the list.
 */
appendSection(
section: Titanium$UI$ListSection,
animation?: ListViewAnimationProperties): void,

/**
 * Appends a single section or an array of sections to the end of the list.
 */
appendSection(
section: $ReadOnlyArray<Titanium$UI$ListSection>,
animation?: ListViewAnimationProperties): void,

/**
 * Deletes an existing section.
 */
deleteSectionAt(sectionIndex: number, animation?: ListViewAnimationProperties): void,

/**
 * Inserts a section or an array of sections at a specific index.
 */
insertSectionAt(
sectionIndex: number,
section: Titanium$UI$ListSection,
animation?: ListViewAnimationProperties): void,

/**
 * Inserts a section or an array of sections at a specific index.
 */
insertSectionAt(
sectionIndex: number,
section: $ReadOnlyArray<Titanium$UI$ListSection>,
animation?: ListViewAnimationProperties): void,

/**
 * Replaces an existing section.
 */
replaceSectionAt(
sectionIndex: number,
section: Titanium$UI$ListSection,
animation: ListViewAnimationProperties): void,

/**
 * Selects an item in the list using the specified item and section indices.
 */
selectItem(sectionIndex: number, itemIndex: number): void,

/**
 * Sets this list view's content insets.
 */
setContentInsets(edgeInsets: ListViewEdgeInsets, animated?: ListViewContentInsetOption): void,

/**
 * Sets the value of the content offset of the list view without animation by default.
 */
setContentOffset(contentOffset: any): void,

/**
 * Sets a reference item in the list view.
 */
setMarker(markerProps: ListViewMarkerProps): void,

/**
 * Adds a reference item in the list view.
 */
addMarker(markerProps: ListViewMarkerProps): void,

/**
 * Gets the value of the <Titanium.UI.ListView.allowsSelection> property.
 */
getAllowsSelection(): boolean,

/**
 * Sets the value of the <Titanium.UI.ListView.allowsSelection> property.
 */
setAllowsSelection(allowsSelection: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ListView.canScroll> property.
 */
getCanScroll(): boolean,

/**
 * Sets the value of the <Titanium.UI.ListView.canScroll> property.
 */
setCanScroll(canScroll: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ListView.disableBounce> property.
 */
getDisableBounce(): boolean,

/**
 * Sets the value of the <Titanium.UI.ListView.disableBounce> property.
 */
setDisableBounce(disableBounce: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ListView.editing> property.
 */
getEditing(): boolean,

/**
 * Sets the value of the <Titanium.UI.ListView.editing> property.
 */
setEditing(editing: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ListView.fastScroll> property.
 */
getFastScroll(): boolean,

/**
 * Sets the value of the <Titanium.UI.ListView.fastScroll> property.
 */
setFastScroll(fastScroll: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ListView.allowsSelectionDuringEditing> property.
 */
getAllowsSelectionDuringEditing(): boolean,

/**
 * Sets the value of the <Titanium.UI.ListView.allowsSelectionDuringEditing> property.
 */
setAllowsSelectionDuringEditing(allowsSelectionDuringEditing: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ListView.allowsMultipleSelectionDuringEditing> property.
 */
getAllowsMultipleSelectionDuringEditing(): boolean,

/**
 * Sets the value of the <Titanium.UI.ListView.allowsMultipleSelectionDuringEditing> property.
 */
setAllowsMultipleSelectionDuringEditing(allowsMultipleSelectionDuringEditing: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ListView.lazyLoadingEnabled> property.
 */
getLazyLoadingEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.ListView.lazyLoadingEnabled> property.
 */
setLazyLoadingEnabled(lazyLoadingEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ListView.pruneSectionsOnEdit> property.
 */
getPruneSectionsOnEdit(): boolean,

/**
 * Sets the value of the <Titanium.UI.ListView.pruneSectionsOnEdit> property.
 */
setPruneSectionsOnEdit(pruneSectionsOnEdit: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ListView.templates> property.
 */
getTemplates(): any,

/**
 * Sets the value of the <Titanium.UI.ListView.templates> property.
 */
setTemplates(templates: any): void,

/**
 * Gets the value of the <Titanium.UI.ListView.sections> property.
 */
getSections(): Titanium$UI$ListSection[],

/**
 * Sets the value of the <Titanium.UI.ListView.sections> property.
 */
setSections(sections: $ReadOnlyArray<Titanium$UI$ListSection>): void,

/**
 * Gets the value of the <Titanium.UI.ListView.defaultItemTemplate> property.
 */
getDefaultItemTemplate(): string | number,

/**
 * Sets the value of the <Titanium.UI.ListView.defaultItemTemplate> property.
 */
setDefaultItemTemplate(defaultItemTemplate: string): void,

/**
 * Sets the value of the <Titanium.UI.ListView.defaultItemTemplate> property.
 */
setDefaultItemTemplate(defaultItemTemplate: number): void,

/**
 * Gets the value of the <Titanium.UI.ListView.separatorHeight> property.
 */
getSeparatorHeight(): string | number,

/**
 * Sets the value of the <Titanium.UI.ListView.separatorHeight> property.
 */
setSeparatorHeight(separatorHeight: string): void,

/**
 * Sets the value of the <Titanium.UI.ListView.separatorHeight> property.
 */
setSeparatorHeight(separatorHeight: number): void,

/**
 * Gets the value of the <Titanium.UI.ListView.footerDividersEnabled> property.
 */
getFooterDividersEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.ListView.footerDividersEnabled> property.
 */
setFooterDividersEnabled(footerDividersEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ListView.footerTitle> property.
 */
getFooterTitle(): string,

/**
 * Sets the value of the <Titanium.UI.ListView.footerTitle> property.
 */
setFooterTitle(footerTitle: string): void,

/**
 * Gets the value of the <Titanium.UI.ListView.footerView> property.
 */
getFooterView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.ListView.footerView> property.
 */
setFooterView(footerView: any): void,

/**
 * Gets the value of the <Titanium.UI.ListView.headerDividersEnabled> property.
 */
getHeaderDividersEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.ListView.headerDividersEnabled> property.
 */
setHeaderDividersEnabled(headerDividersEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ListView.headerTitle> property.
 */
getHeaderTitle(): string,

/**
 * Sets the value of the <Titanium.UI.ListView.headerTitle> property.
 */
setHeaderTitle(headerTitle: string): void,

/**
 * Gets the value of the <Titanium.UI.ListView.headerView> property.
 */
getHeaderView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.ListView.headerView> property.
 */
setHeaderView(headerView: any): void,

/**
 * Gets the value of the <Titanium.UI.ListView.pullView> property.
 */
getPullView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.ListView.pullView> property.
 */
setPullView(pullView: any): void,

/**
 * Gets the value of the <Titanium.UI.ListView.refreshControl> property.
 */
getRefreshControl(): Titanium$UI$RefreshControl,

/**
 * Sets the value of the <Titanium.UI.ListView.refreshControl> property.
 */
setRefreshControl(refreshControl: Titanium$UI$RefreshControl): void,

/**
 * Gets the value of the <Titanium.UI.ListView.searchView> property.
 */
getSearchView(): Titanium$UI$SearchBar | Titanium$UI$Android$SearchView,

/**
 * Sets the value of the <Titanium.UI.ListView.searchView> property.
 */
setSearchView(searchView: Titanium$UI$SearchBar): void,

/**
 * Sets the value of the <Titanium.UI.ListView.searchView> property.
 */
setSearchView(searchView: Titanium$UI$Android$SearchView): void,

/**
 * Gets the value of the <Titanium.UI.ListView.searchText> property.
 */
getSearchText(): string,

/**
 * Sets the value of the <Titanium.UI.ListView.searchText> property.
 */
setSearchText(searchText: string): void,

/**
 * Gets the value of the <Titanium.UI.ListView.caseInsensitiveSearch> property.
 */
getCaseInsensitiveSearch(): boolean,

/**
 * Sets the value of the <Titanium.UI.ListView.caseInsensitiveSearch> property.
 */
setCaseInsensitiveSearch(caseInsensitiveSearch: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ListView.keepSectionsInSearch> property.
 */
getKeepSectionsInSearch(): boolean,

/**
 * Sets the value of the <Titanium.UI.ListView.keepSectionsInSearch> property.
 */
setKeepSectionsInSearch(keepSectionsInSearch: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ListView.keyboardDismissMode> property.
 */
getKeyboardDismissMode(): number,

/**
 * Sets the value of the <Titanium.UI.ListView.keyboardDismissMode> property.
 */
setKeyboardDismissMode(keyboardDismissMode: number): void,

/**
 * Gets the value of the <Titanium.UI.ListView.sectionIndexTitles> property.
 */
getSectionIndexTitles(): ListViewIndexEntry[],

/**
 * Sets the value of the <Titanium.UI.ListView.sectionIndexTitles> property.
 */
setSectionIndexTitles(sectionIndexTitles: $ReadOnlyArray<ListViewIndexEntry>): void,

/**
 * Gets the value of the <Titanium.UI.ListView.scrollIndicatorStyle> property.
 */
getScrollIndicatorStyle(): number,

/**
 * Sets the value of the <Titanium.UI.ListView.scrollIndicatorStyle> property.
 */
setScrollIndicatorStyle(scrollIndicatorStyle: number): void,

/**
 * Gets the value of the <Titanium.UI.ListView.willScrollOnStatusTap> property.
 */
getWillScrollOnStatusTap(): boolean,

/**
 * Sets the value of the <Titanium.UI.ListView.willScrollOnStatusTap> property.
 */
setWillScrollOnStatusTap(willScrollOnStatusTap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ListView.sectionCount> property.
 */
getSectionCount(): number,

/**
 * Gets the value of the <Titanium.UI.ListView.showVerticalScrollIndicator> property.
 */
getShowVerticalScrollIndicator(): boolean,

/**
 * Sets the value of the <Titanium.UI.ListView.showVerticalScrollIndicator> property.
 */
setShowVerticalScrollIndicator(showVerticalScrollIndicator: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ListView.separatorColor> property.
 */
getSeparatorColor(): string,

/**
 * Sets the value of the <Titanium.UI.ListView.separatorColor> property.
 */
setSeparatorColor(separatorColor: string): void,

/**
 * Gets the value of the <Titanium.UI.ListView.separatorInsets> property.
 */
getSeparatorInsets(): any,

/**
 * Sets the value of the <Titanium.UI.ListView.separatorInsets> property.
 */
setSeparatorInsets(separatorInsets: any): void,

/**
 * Gets the value of the <Titanium.UI.ListView.separatorStyle> property.
 */
getSeparatorStyle(): number,

/**
 * Sets the value of the <Titanium.UI.ListView.separatorStyle> property.
 */
setSeparatorStyle(separatorStyle: number): void,

/**
 * Gets the value of the <Titanium.UI.ListView.style> property.
 */
getStyle(): number,

/**
 * Sets the value of the <Titanium.UI.ListView.style> property.
 */
setStyle(style: number): void,

/**
 * Gets the value of the <Titanium.UI.ListView.tableSeparatorInsets> property.
 */
getTableSeparatorInsets(): any,

/**
 * Sets the value of the <Titanium.UI.ListView.tableSeparatorInsets> property.
 */
setTableSeparatorInsets(tableSeparatorInsets: any): void,

/**
 * Gets the value of the <Titanium.UI.ListView.listSeparatorInsets> property.
 */
getListSeparatorInsets(): any,

/**
 * Sets the value of the <Titanium.UI.ListView.listSeparatorInsets> property.
 */
setListSeparatorInsets(listSeparatorInsets: any): void,

/**
 * Gets the value of the <Titanium.UI.ListView.rowSeparatorInsets> property.
 */
getRowSeparatorInsets(): any,

/**
 * Sets the value of the <Titanium.UI.ListView.rowSeparatorInsets> property.
 */
setRowSeparatorInsets(rowSeparatorInsets: any): void,

/**
 * Gets the value of the <Titanium.UI.ListView.dimBackgroundForSearch> property.
 */
getDimBackgroundForSearch(): boolean,

/**
 * Sets the value of the <Titanium.UI.ListView.dimBackgroundForSearch> property.
 */
setDimBackgroundForSearch(dimBackgroundForSearch: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ListView.resultsBackgroundColor> property.
 */
getResultsBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.ListView.resultsBackgroundColor> property.
 */
setResultsBackgroundColor(resultsBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.ListView.resultsSeparatorColor> property.
 */
getResultsSeparatorColor(): string,

/**
 * Sets the value of the <Titanium.UI.ListView.resultsSeparatorColor> property.
 */
setResultsSeparatorColor(resultsSeparatorColor: string): void,

/**
 * Gets the value of the <Titanium.UI.ListView.resultsSeparatorStyle> property.
 */
getResultsSeparatorStyle(): number,

/**
 * Sets the value of the <Titanium.UI.ListView.resultsSeparatorStyle> property.
 */
setResultsSeparatorStyle(resultsSeparatorStyle: number): void,

/**
 * Gets the value of the <Titanium.UI.ListView.resultsSeparatorInsets> property.
 */
getResultsSeparatorInsets(): any,

/**
 * Sets the value of the <Titanium.UI.ListView.resultsSeparatorInsets> property.
 */
setResultsSeparatorInsets(resultsSeparatorInsets: any): void,

/**
 * Gets the value of the <Titanium.UI.ListView.selectedItems> property.
 */
getSelectedItems(): ListItemEventType[],

/**
 * Sets the value of the <Titanium.UI.ListView.selectedItems> property.
 */
setSelectedItems(selectedItems: $ReadOnlyArray<ListItemEventType>): void
} & Titanium$UI$View



/**
 * A control that displays an image composited with a background image or color.
 */
declare type Titanium$UI$MaskedImage = {

/**
 * Image drawn as the background image.
 */
mask: string,

/**
 * Image drawn as the Foreground image.
 */
image: string,

/**
 * Blend mode to use to combine layers.
 */
mode: number,

/**
 * Color to combine with the image, as a color name or hex triplet.
 */
tint: string,

/**
 * Gets the value of the <Titanium.UI.MaskedImage.mask> property.
 */
getMask(): string,

/**
 * Sets the value of the <Titanium.UI.MaskedImage.mask> property.
 */
setMask(mask: string): void,

/**
 * Gets the value of the <Titanium.UI.MaskedImage.image> property.
 */
getImage(): string,

/**
 * Sets the value of the <Titanium.UI.MaskedImage.image> property.
 */
setImage(image: string): void,

/**
 * Gets the value of the <Titanium.UI.MaskedImage.mode> property.
 */
getMode(): number,

/**
 * Sets the value of the <Titanium.UI.MaskedImage.mode> property.
 */
setMode(mode: number): void,

/**
 * Gets the value of the <Titanium.UI.MaskedImage.tint> property.
 */
getTint(): string,

/**
 * Sets the value of the <Titanium.UI.MaskedImage.tint> property.
 */
setTint(tint: string): void
} & Titanium$UI$View



/**
 * A `NavigationWindow` implements a specialized view that manages the navigation of hierarchical
 * content.
 */
declare type Titanium$UI$NavigationWindow = {

/**
 * For lightweight windows, this property returns undefined.
 * For heavyweight windows, this property contains a reference to the
 * Android Activity object associated with this window.
 */
+activity: Titanium$Android$Activity,

/**
 * Boolean value indicating if the application should exit when the Android
 * Back button is pressed while the window is being shown or when the window
 * is closed programmatically.
 */
exitOnClose: boolean,

/**
 * An array of supported values specified using the EXTEND_EDGE constants in <Titanium.UI>.
 */
extendEdges: number[],

/**
 * Treat the content of the window as secure, preventing it from appearing in screenshots or from being viewed on non-secure displays.
 */
flagSecure: boolean,

/**
 * Specifies if the edges should extend beyond opaque bars (navigation bar, tab bar, toolbar).
 */
includeOpaqueBars: boolean,

/**
 * Specifies whether or not the view controller should automatically adjust its scroll view insets.
 */
autoAdjustScrollViewInsets: boolean,

/**
 * Specifies whether the screen insets/notches are allowed to overlap the window's content or not.
 */
extendSafeArea: boolean,

/**
 * Boolean value indicating if the window is fullscreen.
 */
fullscreen: boolean,

/**
 * Boolean value indicating whether the system is allowed to hide the visual indicator for returning to the Home screen.
 */
homeIndicatorAutoHidden: boolean,

/**
 * Set this to true to hide the navigation bar on swipe.
 */
hidesBarsOnSwipe: boolean,

/**
 * Set this to true to hide the navigation bar on tap.
 */
hidesBarsOnTap: boolean,

/**
 * Set this to true to hide the navigation bar when the keyboard appears.
 */
hidesBarsWhenKeyboardAppears: boolean,

/**
 * Set this to true to hide the back button of navigation bar.
 */
hidesBackButton: boolean,

/**
 * A Boolean value indicating whether the title should be displayed in a large format.
 */
largeTitleEnabled: string,

/**
 * The mode to use when displaying the title of the navigation bar.
 */
largeTitleDisplayMode: number,

/**
 * An Array of views to show in the left nav bar area.
 */
leftNavButtons: Titanium$UI$View[],

/**
 * Indicates to open a modal window or not.
 */
modal: boolean,

/**
 * The <Titanium.UI.NavigationWindow> instance hosting this window.
 */
+navigationWindow: Titanium$UI$NavigationWindow,

/**
 * Callback function that overrides the default behavior when the user presses the **Back**
 * button.
 */
onBack: (param0: any) => any,

/**
 * Array of supported orientation modes, specified using the orientation
 * constants defined in <Titanium.UI>.
 */
orientationModes: number[],

/**
 * Current orientation of the window.
 */
+orientation: number,

/**
 * An Array of views to show in the right nav bar area.
 */
rightNavButtons: Titanium$UI$View[],

/**
 * The padding needed to safely display content without it being overlapped by the screen insets and notches.
 */
+safeAreaPadding: Dimension,

/**
 * Boolean value to enable split action bar.
 */
splitActionBar: boolean,

/**
 * The status bar style associated with this window.
 */
statusBarStyle: number,

/**
 * Maintain a sustainable level of performance.
 */
sustainedPerformanceMode: boolean,

/**
 * Name of the theme to apply to the window.
 */
theme: string,

/**
 * Title text attributes of the window.
 */
titleAttributes: titleAttributesParams,

/**
 * Additional flags to set on the Activity Window.
 */
windowFlags: number,

/**
 * Determines whether a heavyweight window's soft input area (ie software keyboard) is visible
 * as it receives focus and how the window behaves in order to accomodate it while keeping its
 * contents in view.
 */
windowSoftInputMode: number,

/**
 * Set the pixel format for the Activity's Window.
 */
windowPixelFormat: number,

/**
 * The type of transition used when activity is exiting.
 */
activityExitTransition: number,

/**
 * The type of transition used when activity is entering.
 */
activityEnterTransition: number,

/**
 * The type of transition used when returning from a previously started activity.
 */
activityReturnTransition: number,

/**
 * The type of transition used when reentering to a previously started activity.
 */
activityReenterTransition: number,

/**
 * The type of exit transition used when animating shared elements between two activities.
 */
activitySharedElementExitTransition: number,

/**
 * The type of enter transition used when animating shared elements between two activities.
 */
activitySharedElementEnterTransition: number,

/**
 * The type of return transition used when animating shared elements between two activities.
 */
activitySharedElementReturnTransition: number,

/**
 * The type of reenter transition used when animating shared elements between two activities.
 */
activitySharedElementReenterTransition: number,

/**
 * Window to add to this navigation window.
 */
window: Titanium$UI$Window,

/**
 * Adds a common UI element to participate in window transition animation.
 */
addSharedElement(view: any, transitionName: string): void,

/**
 * Closes the window.
 */
close(params?: any): void,

/**
 * Hides the navigation bar.
 */
hideNavBar(options?: any): void,

/**
 * Opens the window.
 */
open(params?: openWindowParams): void,

/**
 * Clears all added shared elements.
 */
removeAllSharedElements(): void,

/**
 * Makes the navigation bar visible.
 */
showNavBar(options?: any): void,

/**
 * Makes the bottom toolbar visible.
 */
showToolbar(options?: any): void,

/**
 * Makes the bottom toolbar invisible.
 */
hideToolbar(options?: any): void,

/**
 * Closes a window and removes it from the navigation window.
 */
closeWindow(window: Titanium$UI$Window, options: any): void,

/**
 * Opens a window within the navigation window.
 */
openWindow(window: Titanium$UI$Window, options: any): void,

/**
 * Closes all windows that are currently opened inside the navigation window.
 */
popToRootWindow(options: any): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.activity> property.
 */
getActivity(): Titanium$Android$Activity,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.exitOnClose> property.
 */
getExitOnClose(): boolean,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.exitOnClose> property.
 */
setExitOnClose(exitOnClose: boolean): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.extendEdges> property.
 */
getExtendEdges(): number[],

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.extendEdges> property.
 */
setExtendEdges(extendEdges: $ReadOnlyArray<number>): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.flagSecure> property.
 */
getFlagSecure(): boolean,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.flagSecure> property.
 */
setFlagSecure(flagSecure: boolean): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.includeOpaqueBars> property.
 */
getIncludeOpaqueBars(): boolean,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.includeOpaqueBars> property.
 */
setIncludeOpaqueBars(includeOpaqueBars: boolean): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.autoAdjustScrollViewInsets> property.
 */
getAutoAdjustScrollViewInsets(): boolean,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.autoAdjustScrollViewInsets> property.
 */
setAutoAdjustScrollViewInsets(autoAdjustScrollViewInsets: boolean): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.extendSafeArea> property.
 */
getExtendSafeArea(): boolean,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.extendSafeArea> property.
 */
setExtendSafeArea(extendSafeArea: boolean): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.fullscreen> property.
 */
getFullscreen(): boolean,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.fullscreen> property.
 */
setFullscreen(fullscreen: boolean): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.homeIndicatorAutoHidden> property.
 */
getHomeIndicatorAutoHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.homeIndicatorAutoHidden> property.
 */
setHomeIndicatorAutoHidden(homeIndicatorAutoHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.hidesBarsOnSwipe> property.
 */
getHidesBarsOnSwipe(): boolean,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.hidesBarsOnSwipe> property.
 */
setHidesBarsOnSwipe(hidesBarsOnSwipe: boolean): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.hidesBarsOnTap> property.
 */
getHidesBarsOnTap(): boolean,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.hidesBarsOnTap> property.
 */
setHidesBarsOnTap(hidesBarsOnTap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.hidesBarsWhenKeyboardAppears> property.
 */
getHidesBarsWhenKeyboardAppears(): boolean,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.hidesBarsWhenKeyboardAppears> property.
 */
setHidesBarsWhenKeyboardAppears(hidesBarsWhenKeyboardAppears: boolean): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.hidesBackButton> property.
 */
getHidesBackButton(): boolean,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.hidesBackButton> property.
 */
setHidesBackButton(hidesBackButton: boolean): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.largeTitleEnabled> property.
 */
getLargeTitleEnabled(): string,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.largeTitleEnabled> property.
 */
setLargeTitleEnabled(largeTitleEnabled: string): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.largeTitleDisplayMode> property.
 */
getLargeTitleDisplayMode(): number,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.largeTitleDisplayMode> property.
 */
setLargeTitleDisplayMode(largeTitleDisplayMode: number): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.leftNavButtons> property.
 */
getLeftNavButtons(): Titanium$UI$View[],

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.leftNavButtons> property.
 */
setLeftNavButtons(leftNavButtons: any[]): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.modal> property.
 */
getModal(): boolean,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.modal> property.
 */
setModal(modal: boolean): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.navigationWindow> property.
 */
getNavigationWindow(): Titanium$UI$NavigationWindow,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.onBack> property.
 */
getOnBack(): (param0: any) => any,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.onBack> property.
 */
setOnBack(onBack: (param0: any) => any): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.orientationModes> property.
 */
getOrientationModes(): number[],

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.orientationModes> property.
 */
setOrientationModes(orientationModes: $ReadOnlyArray<number>): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.orientation> property.
 */
getOrientation(): number,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.rightNavButtons> property.
 */
getRightNavButtons(): Titanium$UI$View[],

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.rightNavButtons> property.
 */
setRightNavButtons(rightNavButtons: any[]): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.safeAreaPadding> property.
 */
getSafeAreaPadding(): Dimension,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.splitActionBar> property.
 */
getSplitActionBar(): boolean,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.splitActionBar> property.
 */
setSplitActionBar(splitActionBar: boolean): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.statusBarStyle> property.
 */
getStatusBarStyle(): number,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.statusBarStyle> property.
 */
setStatusBarStyle(statusBarStyle: number): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.sustainedPerformanceMode> property.
 */
getSustainedPerformanceMode(): boolean,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.sustainedPerformanceMode> property.
 */
setSustainedPerformanceMode(sustainedPerformanceMode: boolean): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.theme> property.
 */
getTheme(): string,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.theme> property.
 */
setTheme(theme: string): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.titleAttributes> property.
 */
getTitleAttributes(): titleAttributesParams,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.titleAttributes> property.
 */
setTitleAttributes(titleAttributes: titleAttributesParams): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.windowFlags> property.
 */
getWindowFlags(): number,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.windowFlags> property.
 */
setWindowFlags(windowFlags: number): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.windowSoftInputMode> property.
 */
getWindowSoftInputMode(): number,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.windowSoftInputMode> property.
 */
setWindowSoftInputMode(windowSoftInputMode: number): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.windowPixelFormat> property.
 */
getWindowPixelFormat(): number,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.windowPixelFormat> property.
 */
setWindowPixelFormat(windowPixelFormat: number): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.activityExitTransition> property.
 */
getActivityExitTransition(): number,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.activityExitTransition> property.
 */
setActivityExitTransition(activityExitTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.activityEnterTransition> property.
 */
getActivityEnterTransition(): number,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.activityEnterTransition> property.
 */
setActivityEnterTransition(activityEnterTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.activityReturnTransition> property.
 */
getActivityReturnTransition(): number,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.activityReturnTransition> property.
 */
setActivityReturnTransition(activityReturnTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.activityReenterTransition> property.
 */
getActivityReenterTransition(): number,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.activityReenterTransition> property.
 */
setActivityReenterTransition(activityReenterTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.activitySharedElementExitTransition> property.
 */
getActivitySharedElementExitTransition(): number,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.activitySharedElementExitTransition> property.
 */
setActivitySharedElementExitTransition(activitySharedElementExitTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.activitySharedElementEnterTransition> property.
 */
getActivitySharedElementEnterTransition(): number,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.activitySharedElementEnterTransition> property.
 */
setActivitySharedElementEnterTransition(activitySharedElementEnterTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.activitySharedElementReturnTransition> property.
 */
getActivitySharedElementReturnTransition(): number,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.activitySharedElementReturnTransition> property.
 */
setActivitySharedElementReturnTransition(activitySharedElementReturnTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.activitySharedElementReenterTransition> property.
 */
getActivitySharedElementReenterTransition(): number,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.activitySharedElementReenterTransition> property.
 */
setActivitySharedElementReenterTransition(activitySharedElementReenterTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.NavigationWindow.window> property.
 */
getWindow(): Titanium$UI$Window,

/**
 * Sets the value of the <Titanium.UI.NavigationWindow.window> property.
 */
setWindow(window: Titanium$UI$Window): void
} & Titanium$UI$View



/**
 * A toast notification.
 */
declare type Titanium$UI$Notification = {

/**
 * Notification text to display.
 */
message: string,

/**
 * Determines how long the notification stays on screen.
 */
duration: number,

/**
 * Determines the location at which the notification should appear on the screen.
 */
gravity: number,

/**
 * X offset from the default position, in pixels.
 */
xOffset: number,

/**
 * Y offset from the default position, in pixels.
 */
yOffset: number,

/**
 * Horizontal placement of the notification, *as a fraction of the screen width*.
 */
horizontalMargin: number,

/**
 * Vertical placement of the notifcation, *as a fraction of the screen height*.
 */
verticalMargin: number,

/**
 * Show the notification.
 */
show(): void,

/**
 * Gets the value of the <Titanium.UI.Notification.message> property.
 */
getMessage(): string,

/**
 * Sets the value of the <Titanium.UI.Notification.message> property.
 */
setMessage(message: string): void,

/**
 * Gets the value of the <Titanium.UI.Notification.duration> property.
 */
getDuration(): number,

/**
 * Sets the value of the <Titanium.UI.Notification.duration> property.
 */
setDuration(duration: number): void,

/**
 * Gets the value of the <Titanium.UI.Notification.gravity> property.
 */
getGravity(): number,

/**
 * Sets the value of the <Titanium.UI.Notification.gravity> property.
 */
setGravity(gravity: number): void,

/**
 * Gets the value of the <Titanium.UI.Notification.xOffset> property.
 */
getXOffset(): number,

/**
 * Sets the value of the <Titanium.UI.Notification.xOffset> property.
 */
setXOffset(xOffset: number): void,

/**
 * Gets the value of the <Titanium.UI.Notification.yOffset> property.
 */
getYOffset(): number,

/**
 * Sets the value of the <Titanium.UI.Notification.yOffset> property.
 */
setYOffset(yOffset: number): void,

/**
 * Gets the value of the <Titanium.UI.Notification.horizontalMargin> property.
 */
getHorizontalMargin(): number,

/**
 * Sets the value of the <Titanium.UI.Notification.horizontalMargin> property.
 */
setHorizontalMargin(horizontalMargin: number): void,

/**
 * Gets the value of the <Titanium.UI.Notification.verticalMargin> property.
 */
getVerticalMargin(): number,

/**
 * Sets the value of the <Titanium.UI.Notification.verticalMargin> property.
 */
setVerticalMargin(verticalMargin: number): void
} & Titanium$Proxy



/**
 * An option dialog is a modal view that includes a message and one or more option items positioned
 * in the middle of the display on Android and at the bottom edge on iOS. On Android, buttons may
 * be added below the options.
 */
declare type Titanium$UI$OptionDialog = {

/**
 * View to load inside the message area, to create a custom layout.
 */
androidView: Titanium$UI$View,

/**
 * List of button names.
 */
buttonNames: string[],

/**
 * Index to define the cancel option.
 */
cancel: number,

/**
 * Index to define the destructive option, indicated by a visual cue when rendered.
 */
destructive: number,

/**
 * List of option names to display in the dialog.
 */
options: string[],

/**
 * Boolean value indicating if the option dialog should have an opaque background.
 */
opaquebackground: boolean,

/**
 * Boolean value indicating if the option dialog should only be cancelled by user gesture or by hide method.
 */
persistent: boolean,

/**
 * Defines the default selected option.
 */
selectedIndex: number,

/**
 * Title of the dialog.
 */
title: string,

/**
 * Key identifying a string in the locale file to use for the title text.
 */
titleid: string,

/**
 * Gets the value of the <Titanium.UI.OptionDialog.androidView> property.
 */
getAndroidView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.OptionDialog.androidView> property.
 */
setAndroidView(androidView: any): void,

/**
 * Gets the value of the <Titanium.UI.OptionDialog.buttonNames> property.
 */
getButtonNames(): string[],

/**
 * Sets the value of the <Titanium.UI.OptionDialog.buttonNames> property.
 */
setButtonNames(buttonNames: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.UI.OptionDialog.cancel> property.
 */
getCancel(): number,

/**
 * Sets the value of the <Titanium.UI.OptionDialog.cancel> property.
 */
setCancel(cancel: number): void,

/**
 * Gets the value of the <Titanium.UI.OptionDialog.destructive> property.
 */
getDestructive(): number,

/**
 * Sets the value of the <Titanium.UI.OptionDialog.destructive> property.
 */
setDestructive(destructive: number): void,

/**
 * Gets the value of the <Titanium.UI.OptionDialog.options> property.
 */
getOptions(): string[],

/**
 * Sets the value of the <Titanium.UI.OptionDialog.options> property.
 */
setOptions(options: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.UI.OptionDialog.opaquebackground> property.
 */
getOpaquebackground(): boolean,

/**
 * Sets the value of the <Titanium.UI.OptionDialog.opaquebackground> property.
 */
setOpaquebackground(opaquebackground: boolean): void,

/**
 * Gets the value of the <Titanium.UI.OptionDialog.persistent> property.
 */
getPersistent(): boolean,

/**
 * Sets the value of the <Titanium.UI.OptionDialog.persistent> property.
 */
setPersistent(persistent: boolean): void,

/**
 * Gets the value of the <Titanium.UI.OptionDialog.selectedIndex> property.
 */
getSelectedIndex(): number,

/**
 * Sets the value of the <Titanium.UI.OptionDialog.selectedIndex> property.
 */
setSelectedIndex(selectedIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.OptionDialog.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.UI.OptionDialog.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.UI.OptionDialog.titleid> property.
 */
getTitleid(): string,

/**
 * Sets the value of the <Titanium.UI.OptionDialog.titleid> property.
 */
setTitleid(titleid: string): void
} & Titanium$UI$View



/**
 * A control used to select one or more fixed values.
 */
declare type Titanium$UI$Picker = {

/**
 * Columns used for this picker, as an array of <Titanium.UI.PickerColumn> objects.
 */
columns: Titanium$UI$PickerColumn[],

/**
 * Duration in milliseconds used for a Countdown Timer picker.
 */
countDownDuration: number,

/**
 * Sets the text color of date- and time-pickers.
 */
dateTimeColor: string,

/**
 * Determines whether the Time pickers display in 24-hour or 12-hour clock format.
 */
format24: boolean,

/**
 * Locale used when displaying Date and Time picker values.
 */
locale: string,

/**
 * Maximum date displayed when a Date picker is in use.
 */
maxDate: Date,

/**
 * Minimum date displayed when a Date picker is in use.
 */
minDate: Date,

/**
 * Interval in minutes displayed when one of the Time types of pickers is in use.
 */
minuteInterval: number,

/**
 * Determines whether the visual selection indicator is shown.
 */
selectionIndicator: boolean,

/**
 * Determines whether calling the method `setSelectedRow` opens when called
 */
selectionOpens: boolean,

/**
 * Determines the type of picker displayed
 */
type: number,

/**
 * Determines whether the non-native Android control, with a spinning wheel that looks and
 * behaves like the iOS picker, is invoked rather than the default native "dropdown" style.
 */
useSpinner: boolean,

/**
 * Creates a native Android control for creating a Time Spinner with Type `Ti.UI.PICKER_TYPE_TIME`.
 * This is invoked rather than the default native "dropdown" style.
 */
nativeSpinner: boolean,

/**
 * Date and time value for Date and Time pickers.
 */
value: Date,

/**
 * Number of visible rows to display. This is only applicable to a plain picker and when the
 * `useSpinner` is `true`.
 */
visibleItems: number,

/**
 * Determines whether the calenderView is visible.
 */
calendarViewShown: boolean,

/**
 * Font to use for text.
 */
font: Font,

/**
 * Gets the selected row for a column, or `null` if none exists.
 */
getSelectedRow(index: number): Titanium$UI$PickerRow,

/**
 * Repopulates values for a column.
 */
reloadColumn(column: Titanium$UI$PickerColumn): void,

/**
 * Selects a column's row.
 */
setSelectedRow(column: number, row: number, animated?: boolean): void,

/**
 * Sets the date and time value property for Date pickers.
 */
setValue(date: any, suppressEvent: boolean): Titanium$UI$PickerRow,

/**
 * Shows Date picker as a modal dialog.
 */
showDatePickerDialog(dictObj: any): void,

/**
 * Shows Time picker as a modal dialog.
 */
showTimePickerDialog(dictObj: any): void,

/**
 * Gets the value of the <Titanium.UI.Picker.columns> property.
 */
getColumns(): Titanium$UI$PickerColumn[],

/**
 * Sets the value of the <Titanium.UI.Picker.columns> property.
 */
setColumns(columns: $ReadOnlyArray<Titanium$UI$PickerColumn>): void,

/**
 * Gets the value of the <Titanium.UI.Picker.countDownDuration> property.
 */
getCountDownDuration(): number,

/**
 * Sets the value of the <Titanium.UI.Picker.countDownDuration> property.
 */
setCountDownDuration(countDownDuration: number): void,

/**
 * Gets the value of the <Titanium.UI.Picker.dateTimeColor> property.
 */
getDateTimeColor(): string,

/**
 * Sets the value of the <Titanium.UI.Picker.dateTimeColor> property.
 */
setDateTimeColor(dateTimeColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Picker.format24> property.
 */
getFormat24(): boolean,

/**
 * Sets the value of the <Titanium.UI.Picker.format24> property.
 */
setFormat24(format24: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Picker.locale> property.
 */
getLocale(): string,

/**
 * Sets the value of the <Titanium.UI.Picker.locale> property.
 */
setLocale(locale: string): void,

/**
 * Gets the value of the <Titanium.UI.Picker.maxDate> property.
 */
getMaxDate(): Date,

/**
 * Sets the value of the <Titanium.UI.Picker.maxDate> property.
 */
setMaxDate(maxDate: Date): void,

/**
 * Gets the value of the <Titanium.UI.Picker.minDate> property.
 */
getMinDate(): Date,

/**
 * Sets the value of the <Titanium.UI.Picker.minDate> property.
 */
setMinDate(minDate: Date): void,

/**
 * Gets the value of the <Titanium.UI.Picker.minuteInterval> property.
 */
getMinuteInterval(): number,

/**
 * Sets the value of the <Titanium.UI.Picker.minuteInterval> property.
 */
setMinuteInterval(minuteInterval: number): void,

/**
 * Gets the value of the <Titanium.UI.Picker.selectionIndicator> property.
 */
getSelectionIndicator(): boolean,

/**
 * Sets the value of the <Titanium.UI.Picker.selectionIndicator> property.
 */
setSelectionIndicator(selectionIndicator: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Picker.selectionOpens> property.
 */
getSelectionOpens(): boolean,

/**
 * Sets the value of the <Titanium.UI.Picker.selectionOpens> property.
 */
setSelectionOpens(selectionOpens: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Picker.type> property.
 */
getType(): number,

/**
 * Sets the value of the <Titanium.UI.Picker.type> property.
 */
setType(type: number): void,

/**
 * Gets the value of the <Titanium.UI.Picker.useSpinner> property.
 */
getUseSpinner(): boolean,

/**
 * Sets the value of the <Titanium.UI.Picker.useSpinner> property.
 */
setUseSpinner(useSpinner: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Picker.nativeSpinner> property.
 */
getNativeSpinner(): boolean,

/**
 * Sets the value of the <Titanium.UI.Picker.nativeSpinner> property.
 */
setNativeSpinner(nativeSpinner: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Picker.value> property.
 */
getValue(): Date,

/**
 * Gets the value of the <Titanium.UI.Picker.visibleItems> property.
 */
getVisibleItems(): number,

/**
 * Sets the value of the <Titanium.UI.Picker.visibleItems> property.
 */
setVisibleItems(visibleItems: number): void,

/**
 * Gets the value of the <Titanium.UI.Picker.calendarViewShown> property.
 */
getCalendarViewShown(): boolean,

/**
 * Sets the value of the <Titanium.UI.Picker.calendarViewShown> property.
 */
setCalendarViewShown(calendarViewShown: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Picker.font> property.
 */
getFont(): Font,

/**
 * Sets the value of the <Titanium.UI.Picker.font> property.
 */
setFont(font: Font): void
} & Titanium$UI$View



/**
 * A picker column, representing a selectable group of items in a <Titanium.UI.Picker>.
 */
declare type Titanium$UI$PickerColumn = {

/**
 * Number of rows in this column.
 */
+rowCount: number,

/**
 * Rows of this column.
 */
+rows: Titanium$UI$PickerRow[],

/**
 * Font to use for text.
 */
font: Font,

/**
 * Adds a row to this column.
 */
addRow(row: Titanium$UI$PickerRow): void,

/**
 * Removes a row from this column.
 */
removeRow(row: Titanium$UI$PickerRow): void,

/**
 * Gets the value of the <Titanium.UI.PickerColumn.rowCount> property.
 */
getRowCount(): number,

/**
 * Gets the value of the <Titanium.UI.PickerColumn.rows> property.
 */
getRows(): Titanium$UI$PickerRow[],

/**
 * Gets the value of the <Titanium.UI.PickerColumn.font> property.
 */
getFont(): Font,

/**
 * Sets the value of the <Titanium.UI.PickerColumn.font> property.
 */
setFont(font: Font): void
} & Titanium$Proxy



/**
 * A picker row, representing a selectable item in a <Titanium.UI.Picker>.
 */
declare type Titanium$UI$PickerRow = {

/**
 * Color of the item text, as a color name or hex triplet.
 */
color: string,

/**
 * Font to use for the item text.
 */
font: Font,

/**
 * Item text.
 */
title: string,

/**
 * Gets the value of the <Titanium.UI.PickerRow.color> property.
 */
getColor(): string,

/**
 * Sets the value of the <Titanium.UI.PickerRow.color> property.
 */
setColor(color: string): void,

/**
 * Gets the value of the <Titanium.UI.PickerRow.font> property.
 */
getFont(): Font,

/**
 * Sets the value of the <Titanium.UI.PickerRow.font> property.
 */
setFont(font: Font): void,

/**
 * Gets the value of the <Titanium.UI.PickerRow.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.UI.PickerRow.title> property.
 */
setTitle(title: string): void
} & Titanium$UI$View



/**
 * A progress bar.
 */
declare type Titanium$UI$ProgressBar = {

/**
 * Color of the progress bar message, as a color name or hex triplet.
 */
color: string,

/**
 * Font for the progress bar text.
 */
font: Font,

/**
 * Maximum value of the progress bar.
 */
max: number,

/**
 * Progress bar text.
 */
message: string,

/**
 * The color shown for the portion of the progress bar that is not filled.
 */
trackTintColor: string,

/**
 * Minimum value of the progress bar.
 */
min: number,

/**
 * Style of the progress bar.
 */
style: number,

/**
 * Current value of the progress bar.
 */
value: number,

/**
 * Gets the value of the <Titanium.UI.ProgressBar.color> property.
 */
getColor(): string,

/**
 * Sets the value of the <Titanium.UI.ProgressBar.color> property.
 */
setColor(color: string): void,

/**
 * Gets the value of the <Titanium.UI.ProgressBar.font> property.
 */
getFont(): Font,

/**
 * Sets the value of the <Titanium.UI.ProgressBar.font> property.
 */
setFont(font: Font): void,

/**
 * Gets the value of the <Titanium.UI.ProgressBar.max> property.
 */
getMax(): number,

/**
 * Sets the value of the <Titanium.UI.ProgressBar.max> property.
 */
setMax(max: number): void,

/**
 * Gets the value of the <Titanium.UI.ProgressBar.message> property.
 */
getMessage(): string,

/**
 * Sets the value of the <Titanium.UI.ProgressBar.message> property.
 */
setMessage(message: string): void,

/**
 * Gets the value of the <Titanium.UI.ProgressBar.trackTintColor> property.
 */
getTrackTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.ProgressBar.trackTintColor> property.
 */
setTrackTintColor(trackTintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.ProgressBar.min> property.
 */
getMin(): number,

/**
 * Sets the value of the <Titanium.UI.ProgressBar.min> property.
 */
setMin(min: number): void,

/**
 * Gets the value of the <Titanium.UI.ProgressBar.style> property.
 */
getStyle(): number,

/**
 * Sets the value of the <Titanium.UI.ProgressBar.style> property.
 */
setStyle(style: number): void,

/**
 * Gets the value of the <Titanium.UI.ProgressBar.value> property.
 */
getValue(): number,

/**
 * Sets the value of the <Titanium.UI.ProgressBar.value> property.
 */
setValue(value: number): void
} & Titanium$UI$View



/**
 * The RefreshControl is a representation of the native iOS
 * [UIRefreshControl](https://developer.apple.com/documentation/uikit/uirefreshcontrol)
 * and Android [SwipeRefreshLayout](https://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.html).
 */
declare type Titanium$UI$RefreshControl = {

/**
 * The attributed title of the control.
 */
title: Titanium$UI$AttributedString,

/**
 * The tint color for the refresh control, as a color name or hex triplet.
 */
tintColor: string,

/**
 * Tells the control that a refresh operation was started programmatically.
 */
beginRefreshing(): void,

/**
 * Tells the control that a refresh operation has ended.
 */
endRefreshing(): void,

/**
 * Gets the value of the <Titanium.UI.RefreshControl.title> property.
 */
getTitle(): Titanium$UI$AttributedString,

/**
 * Sets the value of the <Titanium.UI.RefreshControl.title> property.
 */
setTitle(title: Titanium$UI$AttributedString): void,

/**
 * Gets the value of the <Titanium.UI.RefreshControl.tintColor> property.
 */
getTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.RefreshControl.tintColor> property.
 */
setTintColor(tintColor: string): void
} & Titanium$Proxy



/**
 * A view that contains a horizontally and/or vertically-scrollable region of content.
 */
declare type Titanium$UI$ScrollView = {

/**
 * Determines whether this scroll view can cancel subview touches in order to scroll instead.
 */
canCancelEvents: boolean,

/**
 * Height of the scrollable region.
 */
contentHeight: number | string,

/**
 * X and Y coordinates to which to reposition the top-left point of the scrollable region.
 */
contentOffset: any,

/**
 * Width of the scrollable region.
 */
contentWidth: number | string,

/**
 * The deceleration rate of the ScrollView.
 */
decelerationRate: number,

/**
 * Determines whether scroll bounce of the scrollable region is enabled.
 */
disableBounce: boolean,

/**
 * Determines whether horizontal scroll bounce of the scrollable region is enabled.
 */
horizontalBounce: boolean,

/**
 * The manner in which the keyboard is dismissed when a drag begins in the scroll view.
 */
keyboardDismissMode: number,

/**
 * Maximum scaling factor of the scrollable region and its content.
 */
maxZoomScale: number,

/**
 * Minimum scaling factor of the scrollable region and its content.
 */
minZoomScale: number,

/**
 * Determines the behavior when the user overscolls the view.
 */
overScrollMode: number,

/**
 * View positioned above the first row that is only revealed when the user drags the scroll view contents down.
 */
refreshControl: Titanium$UI$RefreshControl,

/**
 * Controls whether the scroll-to-top gesture is effective.
 */
scrollsToTop: boolean,

/**
 * Style of the scrollbar.
 */
scrollIndicatorStyle: number,

/**
 * Limits the direction of the scrollable region, overriding the deduced setting. Set to
 * `horizontal` or `vertical`.
 */
scrollType: string,

/**
 * Determines whether scrolling is enabled for the view.
 */
scrollingEnabled: boolean,

/**
 * Determines whether the horizontal scroll indicator is visible.
 */
showHorizontalScrollIndicator: boolean,

/**
 * Determines whether the vertical scroll indicator is visible.
 */
showVerticalScrollIndicator: boolean,

/**
 * Determines whether vertical scroll bounce of the scrollable region is enabled.
 */
verticalBounce: boolean,

/**
 * Scaling factor of the scroll view's content.
 */
zoomScale: number,

/**
 * Moves the specified coordinate of the scrollable region into the viewable area.
 */
scrollTo(x: number, y: number, animation?: ScrollViewAnimationProperties): void,

/**
 * Sets the value of the [contentOffset](Titanium.UI.ScrollView.contentOffset) property.
 */
setContentOffset(contentOffsetXY: any, animated?: contentOffsetOption): void,

/**
 * Sets the value of the [zoomScale](Titanium.UI.ScrollView.zoomScale) property.
 */
setZoomScale(zoomScale: number, animated?: zoomScaleOption): void,

/**
 * Moves the end of the scrollable region into the viewable area.
 */
scrollToBottom(): void,

/**
 * Moves the top of the scrollable region into the viewable area.
 */
scrollToTop(): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.canCancelEvents> property.
 */
getCanCancelEvents(): boolean,

/**
 * Sets the value of the <Titanium.UI.ScrollView.canCancelEvents> property.
 */
setCanCancelEvents(canCancelEvents: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.contentHeight> property.
 */
getContentHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.ScrollView.contentHeight> property.
 */
setContentHeight(contentHeight: number): void,

/**
 * Sets the value of the <Titanium.UI.ScrollView.contentHeight> property.
 */
setContentHeight(contentHeight: string): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.contentOffset> property.
 */
getContentOffset(): any,

/**
 * Gets the value of the <Titanium.UI.ScrollView.contentWidth> property.
 */
getContentWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.ScrollView.contentWidth> property.
 */
setContentWidth(contentWidth: number): void,

/**
 * Sets the value of the <Titanium.UI.ScrollView.contentWidth> property.
 */
setContentWidth(contentWidth: string): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.decelerationRate> property.
 */
getDecelerationRate(): number,

/**
 * Sets the value of the <Titanium.UI.ScrollView.decelerationRate> property.
 */
setDecelerationRate(decelerationRate: number): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.disableBounce> property.
 */
getDisableBounce(): boolean,

/**
 * Sets the value of the <Titanium.UI.ScrollView.disableBounce> property.
 */
setDisableBounce(disableBounce: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.horizontalBounce> property.
 */
getHorizontalBounce(): boolean,

/**
 * Sets the value of the <Titanium.UI.ScrollView.horizontalBounce> property.
 */
setHorizontalBounce(horizontalBounce: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.keyboardDismissMode> property.
 */
getKeyboardDismissMode(): number,

/**
 * Sets the value of the <Titanium.UI.ScrollView.keyboardDismissMode> property.
 */
setKeyboardDismissMode(keyboardDismissMode: number): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.maxZoomScale> property.
 */
getMaxZoomScale(): number,

/**
 * Sets the value of the <Titanium.UI.ScrollView.maxZoomScale> property.
 */
setMaxZoomScale(maxZoomScale: number): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.minZoomScale> property.
 */
getMinZoomScale(): number,

/**
 * Sets the value of the <Titanium.UI.ScrollView.minZoomScale> property.
 */
setMinZoomScale(minZoomScale: number): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.overScrollMode> property.
 */
getOverScrollMode(): number,

/**
 * Sets the value of the <Titanium.UI.ScrollView.overScrollMode> property.
 */
setOverScrollMode(overScrollMode: number): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.refreshControl> property.
 */
getRefreshControl(): Titanium$UI$RefreshControl,

/**
 * Sets the value of the <Titanium.UI.ScrollView.refreshControl> property.
 */
setRefreshControl(refreshControl: Titanium$UI$RefreshControl): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.scrollsToTop> property.
 */
getScrollsToTop(): boolean,

/**
 * Sets the value of the <Titanium.UI.ScrollView.scrollsToTop> property.
 */
setScrollsToTop(scrollsToTop: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.scrollIndicatorStyle> property.
 */
getScrollIndicatorStyle(): number,

/**
 * Sets the value of the <Titanium.UI.ScrollView.scrollIndicatorStyle> property.
 */
setScrollIndicatorStyle(scrollIndicatorStyle: number): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.scrollType> property.
 */
getScrollType(): string,

/**
 * Sets the value of the <Titanium.UI.ScrollView.scrollType> property.
 */
setScrollType(scrollType: string): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.scrollingEnabled> property.
 */
getScrollingEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.ScrollView.scrollingEnabled> property.
 */
setScrollingEnabled(scrollingEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.showHorizontalScrollIndicator> property.
 */
getShowHorizontalScrollIndicator(): boolean,

/**
 * Sets the value of the <Titanium.UI.ScrollView.showHorizontalScrollIndicator> property.
 */
setShowHorizontalScrollIndicator(showHorizontalScrollIndicator: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.showVerticalScrollIndicator> property.
 */
getShowVerticalScrollIndicator(): boolean,

/**
 * Sets the value of the <Titanium.UI.ScrollView.showVerticalScrollIndicator> property.
 */
setShowVerticalScrollIndicator(showVerticalScrollIndicator: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.verticalBounce> property.
 */
getVerticalBounce(): boolean,

/**
 * Sets the value of the <Titanium.UI.ScrollView.verticalBounce> property.
 */
setVerticalBounce(verticalBounce: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ScrollView.zoomScale> property.
 */
getZoomScale(): number
} & Titanium$UI$View



/**
 * A view that encapsulates a horizontally-scrolling set of child views, known as pages, navigable
 * using its built-in horizontal swipe gestures.
 */
declare type Titanium$UI$ScrollableView = {

/**
 * Number of pages to cache (pre-render).
 */
cacheSize: number,

/**
 * Index of the active page.
 */
currentPage: number,

/**
 * Color for the current page of the paging control, as a color name or hex triplet.
 */
currentPageIndicatorColor: string,

/**
 * Determines whether page bouncing effect is disabled.
 */
disableBounce: boolean,

/**
 * Determines the behavior when the user overscolls the view.
 */
overScrollMode: number,

/**
 * Color of the paging control, as a color name or hex triplet.
 */
pagingControlColor: string,

/**
 * Height of the paging control, in pixels.
 */
pagingControlHeight: number,

/**
 * Color of the paging control, as a color name or hex triplet.
 */
pageIndicatorColor: string,

/**
 * Determines whether the paging control is visible.
 */
showPagingControl: boolean,

/**
 * Number of milliseconds to wait before hiding the paging control.
 */
pagingControlTimeout: number,

/**
 * Alpha value of the paging control.
 */
pagingControlAlpha: number,

/**
 * Determines whether the paging control is displayed at the top or bottom of the view.
 */
pagingControlOnTop: boolean,

/**
 * Determines whether the paging control is added as an overlay to the view.
 */
overlayEnabled: boolean,

/**
 * Determines whether scrolling is enabled for the view.
 */
scrollingEnabled: boolean,

/**
 * Sets the pages within this Scrollable View.
 */
views: Titanium$UI$View[],

/**
 * Determines whether the previous and next pages are clipped, so that they are not visible
 * adjacent to the current page.
 */
clipViews: boolean,

/**
 * Sets the region where this view responds to gestures.
 */
hitRect: Dimension,

/**
 * The padding applied to the scrollable view.
 */
padding: ViewPadding,

/**
 * Inserts views at the specified position in the [views](Titanium.UI.ScrollableView.views) array.
 */
insertViewsAt(position: number, views: any[]): void,

/**
 * Adds a new page to this Scrollable View.
 */
addView(view: any): void,

/**
 * Sets the current page to the next consecutive page in <Titanium.UI.ScrollableView.views>.
 */
moveNext(): void,

/**
 * Sets the current page to the previous consecutive page in <Titanium.UI.ScrollableView.views>.
 */
movePrevious(): void,

/**
 * Removes an existing page from this Scrollable View.
 */
removeView(view: number): void,

/**
 * Removes an existing page from this Scrollable View.
 */
removeView(view: any): void,

/**
 * Scrolls to the specified page in <Titanium.UI.ScrollableView.views>.
 */
scrollToView(view: number): void,

/**
 * Scrolls to the specified page in <Titanium.UI.ScrollableView.views>.
 */
scrollToView(view: any): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.cacheSize> property.
 */
getCacheSize(): number,

/**
 * Sets the value of the <Titanium.UI.ScrollableView.cacheSize> property.
 */
setCacheSize(cacheSize: number): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.currentPage> property.
 */
getCurrentPage(): number,

/**
 * Sets the value of the <Titanium.UI.ScrollableView.currentPage> property.
 */
setCurrentPage(currentPage: number): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.currentPageIndicatorColor> property.
 */
getCurrentPageIndicatorColor(): string,

/**
 * Sets the value of the <Titanium.UI.ScrollableView.currentPageIndicatorColor> property.
 */
setCurrentPageIndicatorColor(currentPageIndicatorColor: string): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.disableBounce> property.
 */
getDisableBounce(): boolean,

/**
 * Sets the value of the <Titanium.UI.ScrollableView.disableBounce> property.
 */
setDisableBounce(disableBounce: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.overScrollMode> property.
 */
getOverScrollMode(): number,

/**
 * Sets the value of the <Titanium.UI.ScrollableView.overScrollMode> property.
 */
setOverScrollMode(overScrollMode: number): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.pagingControlColor> property.
 */
getPagingControlColor(): string,

/**
 * Sets the value of the <Titanium.UI.ScrollableView.pagingControlColor> property.
 */
setPagingControlColor(pagingControlColor: string): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.pagingControlHeight> property.
 */
getPagingControlHeight(): number,

/**
 * Sets the value of the <Titanium.UI.ScrollableView.pagingControlHeight> property.
 */
setPagingControlHeight(pagingControlHeight: number): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.pageIndicatorColor> property.
 */
getPageIndicatorColor(): string,

/**
 * Sets the value of the <Titanium.UI.ScrollableView.pageIndicatorColor> property.
 */
setPageIndicatorColor(pageIndicatorColor: string): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.showPagingControl> property.
 */
getShowPagingControl(): boolean,

/**
 * Sets the value of the <Titanium.UI.ScrollableView.showPagingControl> property.
 */
setShowPagingControl(showPagingControl: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.pagingControlTimeout> property.
 */
getPagingControlTimeout(): number,

/**
 * Sets the value of the <Titanium.UI.ScrollableView.pagingControlTimeout> property.
 */
setPagingControlTimeout(pagingControlTimeout: number): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.pagingControlAlpha> property.
 */
getPagingControlAlpha(): number,

/**
 * Sets the value of the <Titanium.UI.ScrollableView.pagingControlAlpha> property.
 */
setPagingControlAlpha(pagingControlAlpha: number): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.pagingControlOnTop> property.
 */
getPagingControlOnTop(): boolean,

/**
 * Sets the value of the <Titanium.UI.ScrollableView.pagingControlOnTop> property.
 */
setPagingControlOnTop(pagingControlOnTop: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.overlayEnabled> property.
 */
getOverlayEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.ScrollableView.overlayEnabled> property.
 */
setOverlayEnabled(overlayEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.scrollingEnabled> property.
 */
getScrollingEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.ScrollableView.scrollingEnabled> property.
 */
setScrollingEnabled(scrollingEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.views> property.
 */
getViews(): Titanium$UI$View[],

/**
 * Sets the value of the <Titanium.UI.ScrollableView.views> property.
 */
setViews(views: any[]): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.clipViews> property.
 */
getClipViews(): boolean,

/**
 * Sets the value of the <Titanium.UI.ScrollableView.clipViews> property.
 */
setClipViews(clipViews: boolean): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.hitRect> property.
 */
getHitRect(): Dimension,

/**
 * Sets the value of the <Titanium.UI.ScrollableView.hitRect> property.
 */
setHitRect(hitRect: Dimension): void,

/**
 * Gets the value of the <Titanium.UI.ScrollableView.padding> property.
 */
getPadding(): ViewPadding,

/**
 * Sets the value of the <Titanium.UI.ScrollableView.padding> property.
 */
setPadding(padding: ViewPadding): void
} & Titanium$UI$View



/**
 * A specialized text field for entering search text.
 */
declare type Titanium$UI$SearchBar = {

/**
 * Determines how text is capitalized during typing.
 */
autocapitalization: number,

/**
 * Determines whether the text in the search bar is autocorrected during typing.
 */
autocorrect: boolean,

/**
 * Bar color of the search bar view, as a color name or hex triplet.
 */
barColor: string,

/**
 * The title of the cancel button when the search bar field is focused.
 */
cancelButtonTitle: string,

/**
 * Color of the text in this text field, as a color name or hex triplet.
 */
color: string,

/**
 * Background image of the text field, specified as a local file path or URL.
 */
fieldBackgroundImage: string,

/**
 * Background image of the text field in disabled state, specified as a local file path or URL.
 */
fieldBackgroundDisabledImage: string,

/**
 * Text to show when the search bar field is not focused.
 */
hintText: string,

/**
 * Hint text color to display when the field is empty.
 */
hintTextColor: string,

/**
 * Key identifying a string from the locale file to use for the
 * [hintText](Titanium.UI.SearchBar.hintText) property.
 */
hinttextid: string,

/**
 * Keyboard type constant to use when the field is focused.
 */
keyboardType: number,

/**
 * Determines the appearance of the keyboard to be displayed the field is focused.
 */
keyboardAppearance: number,

/**
 * Single line of text displayed at the top of the search bar.
 */
prompt: string,

/**
 * Key identifying a string from the locale file to use for the
 * [prompt](Titanium.UI.SearchBar.prompt) property.
 */
promptid: string,

/**
 * Determines whether the bookmark button is displayed.
 */
showBookmark: boolean,

/**
 * Determines whether the cancel button is displayed.
 */
showCancel: boolean,

/**
 * Determines the style of the search bar.
 */
style: number,

/**
 * Value of the search bar.
 */
value: string,

/**
 * Causes the search bar to lose focus.
 */
blur(): void,

/**
 * Causes the search bar to gain focus.
 */
focus(): void,

/**
 * Shows or hides the cancel button.
 */
setShowCancel(showCancel: boolean, animated?: any): void,

/**
 * Gets the value of the <Titanium.UI.SearchBar.autocapitalization> property.
 */
getAutocapitalization(): number,

/**
 * Sets the value of the <Titanium.UI.SearchBar.autocapitalization> property.
 */
setAutocapitalization(autocapitalization: number): void,

/**
 * Gets the value of the <Titanium.UI.SearchBar.autocorrect> property.
 */
getAutocorrect(): boolean,

/**
 * Sets the value of the <Titanium.UI.SearchBar.autocorrect> property.
 */
setAutocorrect(autocorrect: boolean): void,

/**
 * Gets the value of the <Titanium.UI.SearchBar.barColor> property.
 */
getBarColor(): string,

/**
 * Sets the value of the <Titanium.UI.SearchBar.barColor> property.
 */
setBarColor(barColor: string): void,

/**
 * Gets the value of the <Titanium.UI.SearchBar.cancelButtonTitle> property.
 */
getCancelButtonTitle(): string,

/**
 * Sets the value of the <Titanium.UI.SearchBar.cancelButtonTitle> property.
 */
setCancelButtonTitle(cancelButtonTitle: string): void,

/**
 * Gets the value of the <Titanium.UI.SearchBar.color> property.
 */
getColor(): string,

/**
 * Sets the value of the <Titanium.UI.SearchBar.color> property.
 */
setColor(color: string): void,

/**
 * Gets the value of the <Titanium.UI.SearchBar.fieldBackgroundImage> property.
 */
getFieldBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.SearchBar.fieldBackgroundImage> property.
 */
setFieldBackgroundImage(fieldBackgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.SearchBar.fieldBackgroundDisabledImage> property.
 */
getFieldBackgroundDisabledImage(): string,

/**
 * Sets the value of the <Titanium.UI.SearchBar.fieldBackgroundDisabledImage> property.
 */
setFieldBackgroundDisabledImage(fieldBackgroundDisabledImage: string): void,

/**
 * Gets the value of the <Titanium.UI.SearchBar.hintText> property.
 */
getHintText(): string,

/**
 * Sets the value of the <Titanium.UI.SearchBar.hintText> property.
 */
setHintText(hintText: string): void,

/**
 * Gets the value of the <Titanium.UI.SearchBar.hintTextColor> property.
 */
getHintTextColor(): string,

/**
 * Sets the value of the <Titanium.UI.SearchBar.hintTextColor> property.
 */
setHintTextColor(hintTextColor: string): void,

/**
 * Gets the value of the <Titanium.UI.SearchBar.hinttextid> property.
 */
getHinttextid(): string,

/**
 * Sets the value of the <Titanium.UI.SearchBar.hinttextid> property.
 */
setHinttextid(hinttextid: string): void,

/**
 * Gets the value of the <Titanium.UI.SearchBar.keyboardType> property.
 */
getKeyboardType(): number,

/**
 * Sets the value of the <Titanium.UI.SearchBar.keyboardType> property.
 */
setKeyboardType(keyboardType: number): void,

/**
 * Gets the value of the <Titanium.UI.SearchBar.keyboardAppearance> property.
 */
getKeyboardAppearance(): number,

/**
 * Sets the value of the <Titanium.UI.SearchBar.keyboardAppearance> property.
 */
setKeyboardAppearance(keyboardAppearance: number): void,

/**
 * Gets the value of the <Titanium.UI.SearchBar.prompt> property.
 */
getPrompt(): string,

/**
 * Sets the value of the <Titanium.UI.SearchBar.prompt> property.
 */
setPrompt(prompt: string): void,

/**
 * Gets the value of the <Titanium.UI.SearchBar.promptid> property.
 */
getPromptid(): string,

/**
 * Sets the value of the <Titanium.UI.SearchBar.promptid> property.
 */
setPromptid(promptid: string): void,

/**
 * Gets the value of the <Titanium.UI.SearchBar.showBookmark> property.
 */
getShowBookmark(): boolean,

/**
 * Sets the value of the <Titanium.UI.SearchBar.showBookmark> property.
 */
setShowBookmark(showBookmark: boolean): void,

/**
 * Gets the value of the <Titanium.UI.SearchBar.showCancel> property.
 */
getShowCancel(): boolean,

/**
 * Gets the value of the <Titanium.UI.SearchBar.style> property.
 */
getStyle(): number,

/**
 * Sets the value of the <Titanium.UI.SearchBar.style> property.
 */
setStyle(style: number): void,

/**
 * Gets the value of the <Titanium.UI.SearchBar.value> property.
 */
getValue(): string,

/**
 * Sets the value of the <Titanium.UI.SearchBar.value> property.
 */
setValue(value: string): void
} & Titanium$UI$View



/**
 * An application shortcut.
 */
declare type Titanium$UI$ShortcutItem = {

/**
 * Determines shortcut id.
 */
id: string,

/**
 * Title of the shortcut.
 */
title: string,

/**
 * Description of the shortcut.
 */
description: string,

/**
 * Shortcut icon.
 */
icon: string | number,

/**
 * Allow the shortcut to show.
 */
show(): void,

/**
 * Hide the shortcut.
 */
hide(): void,

/**
 * Pin shortcut to launcher.
 */
pin(): void,

/**
 * Gets the value of the <Titanium.UI.ShortcutItem.id> property.
 */
getId(): string,

/**
 * Sets the value of the <Titanium.UI.ShortcutItem.id> property.
 */
setId(id: string): void,

/**
 * Gets the value of the <Titanium.UI.ShortcutItem.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.UI.ShortcutItem.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.UI.ShortcutItem.description> property.
 */
getDescription(): string,

/**
 * Sets the value of the <Titanium.UI.ShortcutItem.description> property.
 */
setDescription(description: string): void,

/**
 * Gets the value of the <Titanium.UI.ShortcutItem.icon> property.
 */
getIcon(): string | number,

/**
 * Sets the value of the <Titanium.UI.ShortcutItem.icon> property.
 */
setIcon(icon: string): void,

/**
 * Sets the value of the <Titanium.UI.ShortcutItem.icon> property.
 */
setIcon(icon: number): void
} & Titanium$Proxy



/**
 * A slider component with a draggable thumb.
 */
declare type Titanium$UI$Slider = {

/**
 * Image URL of the slider left track when in the disabled state.
 */
disabledLeftTrackImage: string,

/**
 * Image URL of the slider right track when in the disabled state.
 */
disabledRightTrackImage: string,

/**
 * Image URL of the slider thumb when in the disabled state.
 */
disabledThumbImage: string,

/**
 * Boolean to indicate the enabled state of the slider.
 */
enabled: boolean,

/**
 * Image URL of the slider left track when in the highlighted state.
 */
highlightedLeftTrackImage: string,

/**
 * Image URL of the slider right track when in the highlighted state.
 */
highlightedRightTrackImage: string,

/**
 * Image URL of the slider thumb when in the highlighted state.
 */
highlightedThumbImage: string,

/**
 * Image URL of the slider left track.
 */
leftTrackImage: string,

/**
 * Size of the left end cap for the leftTrackImage, disabledLeftTrackImage, highlightedLeftTrackImage and selectedLeftTrackImage properties.
 */
leftTrackLeftCap: number,

/**
 * Size of the top end cap for the leftTrackImage, disabledLeftTrackImage, highlightedLeftTrackImage and selectedLeftTrackImage properties.
 */
leftTrackTopCap: number,

/**
 * Maximum value of the slider.
 */
max: number,

/**
 * Upper limit on the slider value that can be selected.
 */
maxRange: number,

/**
 * Minimum value of the slider.
 */
min: number,

/**
 * Lower limit on the slider value that can be selected.
 */
minRange: number,

/**
 * Image URL of the slider right track.
 */
rightTrackImage: string,

/**
 * Size of the left end cap for the rightTrackImage, disabledRightTrackImage, highlightedRightTrackImage and selectedRightTrackImage properties.
 */
rightTrackLeftCap: number,

/**
 * Size of the top end cap for the rightTrackImage, disabledRightTrackImage, highlightedRightTrackImage and selectedRightTrackImage properties.
 */
rightTrackTopCap: number,

/**
 * Image URL of the slider left track when in the selected state.
 */
selectedLeftTrackImage: string,

/**
 * Image URL of the slider right track when in the selected state.
 */
selectedRightTrackImage: string,

/**
 * Image URL of the slider thumb when in the selected state.
 */
selectedThumbImage: string,

/**
 * Separates the thumbImage from the slider track.
 */
splitTrack: boolean,

/**
 * Image for the slider thumb.
 */
thumbImage: string | Titanium$Blob,

/**
 * Current value of the slider.
 */
value: string,

/**
 * Sets the [value](Titanium.UI.Slider.value) property.
 */
setValue(value: number, options?: any): void,

/**
 * Gets the value of the <Titanium.UI.Slider.disabledLeftTrackImage> property.
 */
getDisabledLeftTrackImage(): string,

/**
 * Sets the value of the <Titanium.UI.Slider.disabledLeftTrackImage> property.
 */
setDisabledLeftTrackImage(disabledLeftTrackImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Slider.disabledRightTrackImage> property.
 */
getDisabledRightTrackImage(): string,

/**
 * Sets the value of the <Titanium.UI.Slider.disabledRightTrackImage> property.
 */
setDisabledRightTrackImage(disabledRightTrackImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Slider.disabledThumbImage> property.
 */
getDisabledThumbImage(): string,

/**
 * Sets the value of the <Titanium.UI.Slider.disabledThumbImage> property.
 */
setDisabledThumbImage(disabledThumbImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Slider.enabled> property.
 */
getEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.Slider.enabled> property.
 */
setEnabled(enabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Slider.highlightedLeftTrackImage> property.
 */
getHighlightedLeftTrackImage(): string,

/**
 * Sets the value of the <Titanium.UI.Slider.highlightedLeftTrackImage> property.
 */
setHighlightedLeftTrackImage(highlightedLeftTrackImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Slider.highlightedRightTrackImage> property.
 */
getHighlightedRightTrackImage(): string,

/**
 * Sets the value of the <Titanium.UI.Slider.highlightedRightTrackImage> property.
 */
setHighlightedRightTrackImage(highlightedRightTrackImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Slider.highlightedThumbImage> property.
 */
getHighlightedThumbImage(): string,

/**
 * Sets the value of the <Titanium.UI.Slider.highlightedThumbImage> property.
 */
setHighlightedThumbImage(highlightedThumbImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Slider.leftTrackImage> property.
 */
getLeftTrackImage(): string,

/**
 * Sets the value of the <Titanium.UI.Slider.leftTrackImage> property.
 */
setLeftTrackImage(leftTrackImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Slider.leftTrackLeftCap> property.
 */
getLeftTrackLeftCap(): number,

/**
 * Sets the value of the <Titanium.UI.Slider.leftTrackLeftCap> property.
 */
setLeftTrackLeftCap(leftTrackLeftCap: number): void,

/**
 * Gets the value of the <Titanium.UI.Slider.leftTrackTopCap> property.
 */
getLeftTrackTopCap(): number,

/**
 * Sets the value of the <Titanium.UI.Slider.leftTrackTopCap> property.
 */
setLeftTrackTopCap(leftTrackTopCap: number): void,

/**
 * Gets the value of the <Titanium.UI.Slider.max> property.
 */
getMax(): number,

/**
 * Sets the value of the <Titanium.UI.Slider.max> property.
 */
setMax(max: number): void,

/**
 * Gets the value of the <Titanium.UI.Slider.maxRange> property.
 */
getMaxRange(): number,

/**
 * Sets the value of the <Titanium.UI.Slider.maxRange> property.
 */
setMaxRange(maxRange: number): void,

/**
 * Gets the value of the <Titanium.UI.Slider.min> property.
 */
getMin(): number,

/**
 * Sets the value of the <Titanium.UI.Slider.min> property.
 */
setMin(min: number): void,

/**
 * Gets the value of the <Titanium.UI.Slider.minRange> property.
 */
getMinRange(): number,

/**
 * Sets the value of the <Titanium.UI.Slider.minRange> property.
 */
setMinRange(minRange: number): void,

/**
 * Gets the value of the <Titanium.UI.Slider.rightTrackImage> property.
 */
getRightTrackImage(): string,

/**
 * Sets the value of the <Titanium.UI.Slider.rightTrackImage> property.
 */
setRightTrackImage(rightTrackImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Slider.rightTrackLeftCap> property.
 */
getRightTrackLeftCap(): number,

/**
 * Sets the value of the <Titanium.UI.Slider.rightTrackLeftCap> property.
 */
setRightTrackLeftCap(rightTrackLeftCap: number): void,

/**
 * Gets the value of the <Titanium.UI.Slider.rightTrackTopCap> property.
 */
getRightTrackTopCap(): number,

/**
 * Sets the value of the <Titanium.UI.Slider.rightTrackTopCap> property.
 */
setRightTrackTopCap(rightTrackTopCap: number): void,

/**
 * Gets the value of the <Titanium.UI.Slider.selectedLeftTrackImage> property.
 */
getSelectedLeftTrackImage(): string,

/**
 * Sets the value of the <Titanium.UI.Slider.selectedLeftTrackImage> property.
 */
setSelectedLeftTrackImage(selectedLeftTrackImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Slider.selectedRightTrackImage> property.
 */
getSelectedRightTrackImage(): string,

/**
 * Sets the value of the <Titanium.UI.Slider.selectedRightTrackImage> property.
 */
setSelectedRightTrackImage(selectedRightTrackImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Slider.selectedThumbImage> property.
 */
getSelectedThumbImage(): string,

/**
 * Sets the value of the <Titanium.UI.Slider.selectedThumbImage> property.
 */
setSelectedThumbImage(selectedThumbImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Slider.splitTrack> property.
 */
getSplitTrack(): boolean,

/**
 * Sets the value of the <Titanium.UI.Slider.splitTrack> property.
 */
setSplitTrack(splitTrack: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Slider.thumbImage> property.
 */
getThumbImage(): string | Titanium$Blob,

/**
 * Sets the value of the <Titanium.UI.Slider.thumbImage> property.
 */
setThumbImage(thumbImage: string): void,

/**
 * Sets the value of the <Titanium.UI.Slider.thumbImage> property.
 */
setThumbImage(thumbImage: Titanium$Blob): void,

/**
 * Gets the value of the <Titanium.UI.Slider.value> property.
 */
getValue(): string
} & Titanium$UI$View



/**
 * An on/off switch control.
 */
declare type Titanium$UI$Switch = {

/**
 * Determines if there is animation when the switch value changes.
 */
animated: boolean,

/**
 * Color to use for switch text, as a color name or hex triplet.
 */
color: string,

/**
 * Determines whether the switch is enabled.
 */
enabled: boolean,

/**
 * Font to use for the switch text.
 */
font: Font,

/**
 * Style of the switch.
 */
style: number,

/**
 * Horizontal text alignment of the switch title.
 */
textAlign: string | number,

/**
 * Text to display next to the switch, when the checkbox style is in use.
 */
title: string,

/**
 * Text to display on the switch in its "off" state, when the toggle button style is in use.
 */
titleOff: string,

/**
 * Text to display on the switch in its "on" state, when the toggle button style is in use.
 */
titleOn: string,

/**
 * The color used to tint the appearance of the switch when it is turned on.
 */
onTintColor: string,

/**
 * The color used to tint the appearance of the thumb.
 */
thumbTintColor: string,

/**
 * Indicates whether the switch has been turned on or off by the user. May also be set
 * programmatically.
 */
value: boolean,

/**
 * Vertical alignment for the text field.
 */
verticalAlign: number | string,

/**
 * Gets the value of the <Titanium.UI.Switch.animated> property.
 */
getAnimated(): boolean,

/**
 * Sets the value of the <Titanium.UI.Switch.animated> property.
 */
setAnimated(animated: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Switch.color> property.
 */
getColor(): string,

/**
 * Sets the value of the <Titanium.UI.Switch.color> property.
 */
setColor(color: string): void,

/**
 * Gets the value of the <Titanium.UI.Switch.enabled> property.
 */
getEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.Switch.enabled> property.
 */
setEnabled(enabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Switch.font> property.
 */
getFont(): Font,

/**
 * Sets the value of the <Titanium.UI.Switch.font> property.
 */
setFont(font: Font): void,

/**
 * Gets the value of the <Titanium.UI.Switch.style> property.
 */
getStyle(): number,

/**
 * Sets the value of the <Titanium.UI.Switch.style> property.
 */
setStyle(style: number): void,

/**
 * Gets the value of the <Titanium.UI.Switch.textAlign> property.
 */
getTextAlign(): string | number,

/**
 * Sets the value of the <Titanium.UI.Switch.textAlign> property.
 */
setTextAlign(textAlign: string): void,

/**
 * Sets the value of the <Titanium.UI.Switch.textAlign> property.
 */
setTextAlign(textAlign: number): void,

/**
 * Gets the value of the <Titanium.UI.Switch.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.UI.Switch.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.UI.Switch.titleOff> property.
 */
getTitleOff(): string,

/**
 * Sets the value of the <Titanium.UI.Switch.titleOff> property.
 */
setTitleOff(titleOff: string): void,

/**
 * Gets the value of the <Titanium.UI.Switch.titleOn> property.
 */
getTitleOn(): string,

/**
 * Sets the value of the <Titanium.UI.Switch.titleOn> property.
 */
setTitleOn(titleOn: string): void,

/**
 * Gets the value of the <Titanium.UI.Switch.onTintColor> property.
 */
getOnTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.Switch.onTintColor> property.
 */
setOnTintColor(onTintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Switch.thumbTintColor> property.
 */
getThumbTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.Switch.thumbTintColor> property.
 */
setThumbTintColor(thumbTintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Switch.value> property.
 */
getValue(): boolean,

/**
 * Sets the value of the <Titanium.UI.Switch.value> property.
 */
setValue(value: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Switch.verticalAlign> property.
 */
getVerticalAlign(): number | string,

/**
 * Sets the value of the <Titanium.UI.Switch.verticalAlign> property.
 */
setVerticalAlign(verticalAlign: number): void,

/**
 * Sets the value of the <Titanium.UI.Switch.verticalAlign> property.
 */
setVerticalAlign(verticalAlign: string): void
} & Titanium$UI$View



/**
 * A tab instance for a [TabGroup](Titanium.UI.TabGroup).
 */
declare type Titanium$UI$Tab = {

/**
 * `true` if this tab is active, `false` if it is not.
 */
active: boolean,

/**
 * Icon URL for this tab when active.
 */
activeIcon: string,

/**
 * Badge value for this tab. `null` indicates no badge.
 */
badge: string,

/**
 * If this item displays a badge, this color will be used for the badge's background.
 * If set to null, the default background color will be used instead.
 */
badgeColor: string,

/**
 * Icon URL for this tab.
 */
icon: string,

/**
 * The icon inset or outset for each edge.
 */
iconInsets: TabIconInsets,

/**
 * Defines if the icon property of the tab must be used as a mask.
 */
iconIsMask: boolean,

/**
 * Defines if the active icon property of the tab must be used as a mask.
 */
activeIconIsMask: boolean,

/**
 * Title for this tab.
 */
title: string,

/**
 * Key identifying a string from the locale file to use for the tab title. Only one of `title` or `titleid` should be specified.
 */
titleid: string,

/**
 * Defines the color of the title of tab when it's inactive.
 */
titleColor: string,

/**
 * Defines the color of the title of tab when it's active.
 */
activeTitleColor: string,

/**
 * Root-level tab window.  All tabs must have at least one root-level tab window.
 */
window: Titanium$UI$Window,

/**
 * Opens a new window.
 */
open(window: Titanium$UI$Window, options?: any): void,

/**
 * Closes the top-level window for this tab.
 */
close(window: Titanium$UI$Window, options?: any): void,

/**
 * Sets the root window that appears in the tab.
 */
setWindow(window: Titanium$UI$Window): void,

/**
 * Closes all windows that are currently opened inside the tab.
 */
popToRootWindow(options: any): void,

/**
 * Gets the value of the <Titanium.UI.Tab.active> property.
 */
getActive(): boolean,

/**
 * Sets the value of the <Titanium.UI.Tab.active> property.
 */
setActive(active: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Tab.activeIcon> property.
 */
getActiveIcon(): string,

/**
 * Sets the value of the <Titanium.UI.Tab.activeIcon> property.
 */
setActiveIcon(activeIcon: string): void,

/**
 * Gets the value of the <Titanium.UI.Tab.badge> property.
 */
getBadge(): string,

/**
 * Sets the value of the <Titanium.UI.Tab.badge> property.
 */
setBadge(badge: string): void,

/**
 * Gets the value of the <Titanium.UI.Tab.badgeColor> property.
 */
getBadgeColor(): string,

/**
 * Sets the value of the <Titanium.UI.Tab.badgeColor> property.
 */
setBadgeColor(badgeColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Tab.icon> property.
 */
getIcon(): string,

/**
 * Sets the value of the <Titanium.UI.Tab.icon> property.
 */
setIcon(icon: string): void,

/**
 * Gets the value of the <Titanium.UI.Tab.iconInsets> property.
 */
getIconInsets(): TabIconInsets,

/**
 * Sets the value of the <Titanium.UI.Tab.iconInsets> property.
 */
setIconInsets(iconInsets: TabIconInsets): void,

/**
 * Gets the value of the <Titanium.UI.Tab.iconIsMask> property.
 */
getIconIsMask(): boolean,

/**
 * Sets the value of the <Titanium.UI.Tab.iconIsMask> property.
 */
setIconIsMask(iconIsMask: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Tab.activeIconIsMask> property.
 */
getActiveIconIsMask(): boolean,

/**
 * Sets the value of the <Titanium.UI.Tab.activeIconIsMask> property.
 */
setActiveIconIsMask(activeIconIsMask: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Tab.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.UI.Tab.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.UI.Tab.titleid> property.
 */
getTitleid(): string,

/**
 * Sets the value of the <Titanium.UI.Tab.titleid> property.
 */
setTitleid(titleid: string): void,

/**
 * Gets the value of the <Titanium.UI.Tab.titleColor> property.
 */
getTitleColor(): string,

/**
 * Sets the value of the <Titanium.UI.Tab.titleColor> property.
 */
setTitleColor(titleColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Tab.activeTitleColor> property.
 */
getActiveTitleColor(): string,

/**
 * Sets the value of the <Titanium.UI.Tab.activeTitleColor> property.
 */
setActiveTitleColor(activeTitleColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Tab.window> property.
 */
getWindow(): Titanium$UI$Window
} & Titanium$UI$View



/**
 * A tabbed group of windows.
 */
declare type Titanium$UI$TabGroup = {

/**
 * Reference to the Android Activity object associated with this tab group.
 */
+activity: Titanium$Android$Activity,

/**
 * Title for the back button. This is only valid when the window is a child of a tab.
 */
backButtonTitle: string,

/**
 * The image to show as the back button. This is only valid when the window is a child of a tab.
 */
backButtonTitleImage: string | Titanium$Blob,

/**
 * Default navigation bar color (typically for the **More** tab), as a color name or hex triplet.
 */
barColor: string,

/**
 * Background image for the nav bar, specified as a URL to a local image.
 */
barImage: string,

/**
 * Boolean value indicating if the application should exit when closing the tab group, whether via Android
 * back button or the [close](Titanium.UI.TabGroup.close) method.
 */
exitOnClose: boolean,

/**
 * An array of supported values specified using the EXTEND_EDGE constants in <Titanium.UI>.
 */
extendEdges: number[],

/**
 * Treat the content of the window as secure, preventing it from appearing in screenshots or from being viewed on non-secure displays.
 */
flagSecure: boolean,

/**
 * Specifies if the edges should extend beyond opaque bars (navigation bar, tab bar, toolbar).
 */
includeOpaqueBars: boolean,

/**
 * Specifies whether or not the view controller should automatically adjust its scroll view insets.
 */
autoAdjustScrollViewInsets: boolean,

/**
 * Specifies whether the screen insets/notches are allowed to overlap the window's content or not.
 */
extendSafeArea: boolean,

/**
 * Boolean value indicating if the window is fullscreen.
 */
fullscreen: boolean,

/**
 * Boolean value indicating whether the system is allowed to hide the visual indicator for returning to the Home screen.
 */
homeIndicatorAutoHidden: boolean,

/**
 * Set this to true to hide the shadow image of the navigation bar.
 */
hideShadow: boolean,

/**
 * Set this to true to hide the navigation bar on swipe.
 */
hidesBarsOnSwipe: boolean,

/**
 * Set this to true to hide the navigation bar on tap.
 */
hidesBarsOnTap: boolean,

/**
 * Set this to true to hide the navigation bar when the keyboard appears.
 */
hidesBarsWhenKeyboardAppears: boolean,

/**
 * Set this to true to hide the back button of navigation bar.
 */
hidesBackButton: boolean,

/**
 * A Boolean value indicating whether the title should be displayed in a large format.
 */
largeTitleEnabled: string,

/**
 * The mode to use when displaying the title of the navigation bar.
 */
largeTitleDisplayMode: number,

/**
 * View to show in the left nav bar area.
 */
leftNavButton: Titanium$UI$View,

/**
 * An Array of views to show in the left nav bar area.
 */
leftNavButtons: Titanium$UI$View[],

/**
 * Indicates to open a modal window or not.
 */
modal: boolean,

/**
 * Hides the navigation bar (`true`) or shows the navigation bar (`false`).
 */
navBarHidden: boolean,

/**
 * The tintColor to apply to the navigation bar (typically for the **More** tab).
 */
navTintColor: string,

/**
 * The <Titanium.UI.NavigationWindow> instance hosting this window.
 */
+navigationWindow: Titanium$UI$NavigationWindow,

/**
 * Callback function that overrides the default behavior when the user presses the **Back**
 * button.
 */
onBack: (param0: any) => any,

/**
 * Array of supported orientation modes, specified using the orientation
 * constants defined in <Titanium.UI>.
 */
orientationModes: number[],

/**
 * Current orientation of the window.
 */
+orientation: number,

/**
 * View to show in the right nav bar area.
 */
rightNavButton: Titanium$UI$View,

/**
 * An Array of views to show in the right nav bar area.
 */
rightNavButtons: Titanium$UI$View[],

/**
 * The padding needed to safely display content without it being overlapped by the screen insets and notches.
 */
+safeAreaPadding: Dimension,

/**
 * Image of the shadow placed between the tab bar and the content area.
 */
shadowImage: string,

/**
 * Boolean value to enable split action bar.
 */
splitActionBar: boolean,

/**
 * The status bar style associated with this window.
 */
statusBarStyle: number,

/**
 * Maintain a sustainable level of performance.
 */
sustainedPerformanceMode: boolean,

/**
 * Boolean value indicating if the user should be able to close a window using a swipe gesture.
 */
swipeToClose: boolean,

/**
 * Boolean value indicating if the tab bar should be hidden.
 */
tabBarHidden: boolean,

/**
 * Name of the theme to apply to the window.
 */
theme: string,

/**
 * Title for this tabGroup.
 */
title: string,

/**
 * Title text attributes of the window to be applied on the **More** tab.
 */
titleAttributes: titleAttributesParams,

/**
 * View to show in the title area of the nav bar.
 */
titleControl: Titanium$UI$View,

/**
 * Image to show in the title area of the nav bar, specified as a local file path or URL.
 */
titleImage: string,

/**
 * Title prompt for the window.
 */
titlePrompt: string,

/**
 * Key identifying a string from the locale file to use for the window title.
 */
titleid: string,

/**
 * Key identifying a string from the locale file to use for the window title prompt.
 */
titlepromptid: string,

/**
 * Array of button objects to show in the window's toolbar.
 */
toolbar: any[],

/**
 * Use a transition animation when opening or closing windows in a
 * <Titanium.UI.NavigationWindow> or <Titanium.UI.Tab>.
 */
transitionAnimation: Titanium$Proxy,

/**
 * Boolean value indicating if the nav bar (typically for the **More** tab), is translucent.
 */
translucent: boolean,

/**
 * Loads a JavaScript file from a local URL.
 */
url: string,

/**
 * Additional flags to set on the Activity Window.
 */
windowFlags: number,

/**
 * Determines how the tab group is treated when a soft input method (such as a virtual keyboard)
 * is displayed.
 */
windowSoftInputMode: number,

/**
 * Set the pixel format for the Activity's Window.
 */
windowPixelFormat: number,

/**
 * The type of transition used when activity is exiting.
 */
activityExitTransition: number,

/**
 * The type of transition used when activity is entering.
 */
activityEnterTransition: number,

/**
 * The type of transition used when returning from a previously started activity.
 */
activityReturnTransition: number,

/**
 * The type of transition used when reentering to a previously started activity.
 */
activityReenterTransition: number,

/**
 * The type of exit transition used when animating shared elements between two activities.
 */
activitySharedElementExitTransition: number,

/**
 * The type of enter transition used when animating shared elements between two activities.
 */
activitySharedElementEnterTransition: number,

/**
 * The type of return transition used when animating shared elements between two activities.
 */
activitySharedElementReturnTransition: number,

/**
 * The type of reenter transition used when animating shared elements between two activities.
 */
activitySharedElementReenterTransition: number,

/**
 * Active tab.
 */
activeTab: number | Titanium$UI$Tab,

/**
 * Allow the user to reorder tabs in the tab group using the **Edit** button on the **More**
 * tab.
 */
allowUserCustomization: boolean,

/**
 * Title for the edit button on the **More** tab.
 */
editButtonTitle: string,

/**
 * Boolean value indicating if tab navigation can be done by swipes, in addition to tab clicks.
 */
swipeable: boolean,

/**
 * Boolean value indicating if changing pages by tab clicks is animated.
 */
smoothScrollOnTabClick: boolean,

/**
 * Tabs managed by the tab group.
 */
tabs: Titanium$UI$Tab[],

/**
 * Determines whether the BOTTOM_NAVIGATION_VIEW_STYLE uses shiftMode.
 */
shiftMode: boolean,

/**
 * Property defining which style for the TabGroup to be used.
 */
style: number,

/**
 * Default background color for inactive tabs, as a color name or hex triplet.
 */
tabsBackgroundColor: string,

/**
 * The tintColor to apply to the tabs.
 */
tabsTintColor: string,

/**
 * A Boolean value that indicates whether the tab bar is translucent.
 */
tabsTranslucent: boolean,

/**
 * Default background image for tabs.
 */
tabsBackgroundImage: string,

/**
 * Unselected items in this tab group will be tinted with this color. Setting this value to null
 * indicates that the tab group should use its default value instead.
 */
unselectedItemTintColor: string,

/**
 * Color applied to active tabs icons, as a color name or hex triplet, where the tab's activeIcon was not defined.
 */
activeTabIconTint: string,

/**
 * Default background selected color for tabs, as a color name or hex triplet.
 */
tabsBackgroundSelectedColor: string,

/**
 * Default background image for the active tab.
 */
activeTabBackgroundImage: string,

/**
 * Adds a common UI element to participate in window transition animation.
 */
addSharedElement(view: any, transitionName: string): void,

/**
 * Closes the tab group and removes it from the UI.
 */
close(params?: any): void,

/**
 * Hides the navigation bar.
 */
hideNavBar(options?: any): void,

/**
 * Hides the tab bar. Must be called before opening the window.
 */
hideTabBar(): void,

/**
 * Opens the tab group and makes it visible.
 */
open(params?: openWindowParams): void,

/**
 * Clears all added shared elements.
 */
removeAllSharedElements(): void,

/**
 * Sets the array of items to show in the window's toolbar.
 */
setToolbar(items: $ReadOnlyArray<any>, params?: windowToolbarParam): void,

/**
 * Makes the navigation bar visible.
 */
showNavBar(options?: any): void,

/**
 * Makes the bottom toolbar visible.
 */
showToolbar(options?: any): void,

/**
 * Makes the bottom toolbar invisible.
 */
hideToolbar(options?: any): void,

/**
 * Adds a tab to the tab group.
 */
addTab(tab: Titanium$UI$Tab): void,

/**
 * Disable (or re-enable) tab navigation. If tab navigation is disabled, the tabs are hidden and
 * the last selected tab window is shown.
 */
disableTabNavigation(disable: boolean): void,

/**
 * Gets the currently-active tab.
 */
getActiveTab(): Titanium$UI$Tab,

/**
 * Removes a tab from the tab group.
 */
removeTab(tab: Titanium$UI$Tab): void,

/**
 * Selects the currently active tab in a tab group.
 */
setActiveTab(indexOrObject: number): void,

/**
 * Selects the currently active tab in a tab group.
 */
setActiveTab(indexOrObject: Titanium$UI$Tab): void,

/**
 * Gets all tabs that are managed by the tab group.
 */
getTabs(): Titanium$UI$Tab[],

/**
 * Gets the value of the <Titanium.UI.TabGroup.activity> property.
 */
getActivity(): Titanium$Android$Activity,

/**
 * Gets the value of the <Titanium.UI.TabGroup.backButtonTitle> property.
 */
getBackButtonTitle(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.backButtonTitle> property.
 */
setBackButtonTitle(backButtonTitle: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.backButtonTitleImage> property.
 */
getBackButtonTitleImage(): string | Titanium$Blob,

/**
 * Sets the value of the <Titanium.UI.TabGroup.backButtonTitleImage> property.
 */
setBackButtonTitleImage(backButtonTitleImage: string): void,

/**
 * Sets the value of the <Titanium.UI.TabGroup.backButtonTitleImage> property.
 */
setBackButtonTitleImage(backButtonTitleImage: Titanium$Blob): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.barColor> property.
 */
getBarColor(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.barColor> property.
 */
setBarColor(barColor: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.barImage> property.
 */
getBarImage(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.barImage> property.
 */
setBarImage(barImage: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.exitOnClose> property.
 */
getExitOnClose(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.exitOnClose> property.
 */
setExitOnClose(exitOnClose: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.extendEdges> property.
 */
getExtendEdges(): number[],

/**
 * Sets the value of the <Titanium.UI.TabGroup.extendEdges> property.
 */
setExtendEdges(extendEdges: $ReadOnlyArray<number>): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.flagSecure> property.
 */
getFlagSecure(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.flagSecure> property.
 */
setFlagSecure(flagSecure: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.includeOpaqueBars> property.
 */
getIncludeOpaqueBars(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.includeOpaqueBars> property.
 */
setIncludeOpaqueBars(includeOpaqueBars: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.autoAdjustScrollViewInsets> property.
 */
getAutoAdjustScrollViewInsets(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.autoAdjustScrollViewInsets> property.
 */
setAutoAdjustScrollViewInsets(autoAdjustScrollViewInsets: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.extendSafeArea> property.
 */
getExtendSafeArea(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.extendSafeArea> property.
 */
setExtendSafeArea(extendSafeArea: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.fullscreen> property.
 */
getFullscreen(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.fullscreen> property.
 */
setFullscreen(fullscreen: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.homeIndicatorAutoHidden> property.
 */
getHomeIndicatorAutoHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.homeIndicatorAutoHidden> property.
 */
setHomeIndicatorAutoHidden(homeIndicatorAutoHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.hideShadow> property.
 */
getHideShadow(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.hideShadow> property.
 */
setHideShadow(hideShadow: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.hidesBarsOnSwipe> property.
 */
getHidesBarsOnSwipe(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.hidesBarsOnSwipe> property.
 */
setHidesBarsOnSwipe(hidesBarsOnSwipe: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.hidesBarsOnTap> property.
 */
getHidesBarsOnTap(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.hidesBarsOnTap> property.
 */
setHidesBarsOnTap(hidesBarsOnTap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.hidesBarsWhenKeyboardAppears> property.
 */
getHidesBarsWhenKeyboardAppears(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.hidesBarsWhenKeyboardAppears> property.
 */
setHidesBarsWhenKeyboardAppears(hidesBarsWhenKeyboardAppears: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.hidesBackButton> property.
 */
getHidesBackButton(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.hidesBackButton> property.
 */
setHidesBackButton(hidesBackButton: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.largeTitleEnabled> property.
 */
getLargeTitleEnabled(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.largeTitleEnabled> property.
 */
setLargeTitleEnabled(largeTitleEnabled: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.largeTitleDisplayMode> property.
 */
getLargeTitleDisplayMode(): number,

/**
 * Sets the value of the <Titanium.UI.TabGroup.largeTitleDisplayMode> property.
 */
setLargeTitleDisplayMode(largeTitleDisplayMode: number): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.leftNavButton> property.
 */
getLeftNavButton(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.TabGroup.leftNavButton> property.
 */
setLeftNavButton(leftNavButton: any): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.leftNavButtons> property.
 */
getLeftNavButtons(): Titanium$UI$View[],

/**
 * Sets the value of the <Titanium.UI.TabGroup.leftNavButtons> property.
 */
setLeftNavButtons(leftNavButtons: any[]): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.modal> property.
 */
getModal(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.modal> property.
 */
setModal(modal: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.navBarHidden> property.
 */
getNavBarHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.navBarHidden> property.
 */
setNavBarHidden(navBarHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.navTintColor> property.
 */
getNavTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.navTintColor> property.
 */
setNavTintColor(navTintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.navigationWindow> property.
 */
getNavigationWindow(): Titanium$UI$NavigationWindow,

/**
 * Gets the value of the <Titanium.UI.TabGroup.onBack> property.
 */
getOnBack(): (param0: any) => any,

/**
 * Sets the value of the <Titanium.UI.TabGroup.onBack> property.
 */
setOnBack(onBack: (param0: any) => any): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.orientationModes> property.
 */
getOrientationModes(): number[],

/**
 * Sets the value of the <Titanium.UI.TabGroup.orientationModes> property.
 */
setOrientationModes(orientationModes: $ReadOnlyArray<number>): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.orientation> property.
 */
getOrientation(): number,

/**
 * Gets the value of the <Titanium.UI.TabGroup.rightNavButton> property.
 */
getRightNavButton(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.TabGroup.rightNavButton> property.
 */
setRightNavButton(rightNavButton: any): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.rightNavButtons> property.
 */
getRightNavButtons(): Titanium$UI$View[],

/**
 * Sets the value of the <Titanium.UI.TabGroup.rightNavButtons> property.
 */
setRightNavButtons(rightNavButtons: any[]): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.safeAreaPadding> property.
 */
getSafeAreaPadding(): Dimension,

/**
 * Gets the value of the <Titanium.UI.TabGroup.shadowImage> property.
 */
getShadowImage(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.shadowImage> property.
 */
setShadowImage(shadowImage: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.splitActionBar> property.
 */
getSplitActionBar(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.splitActionBar> property.
 */
setSplitActionBar(splitActionBar: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.statusBarStyle> property.
 */
getStatusBarStyle(): number,

/**
 * Sets the value of the <Titanium.UI.TabGroup.statusBarStyle> property.
 */
setStatusBarStyle(statusBarStyle: number): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.sustainedPerformanceMode> property.
 */
getSustainedPerformanceMode(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.sustainedPerformanceMode> property.
 */
setSustainedPerformanceMode(sustainedPerformanceMode: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.swipeToClose> property.
 */
getSwipeToClose(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.swipeToClose> property.
 */
setSwipeToClose(swipeToClose: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.tabBarHidden> property.
 */
getTabBarHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.tabBarHidden> property.
 */
setTabBarHidden(tabBarHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.theme> property.
 */
getTheme(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.theme> property.
 */
setTheme(theme: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.titleAttributes> property.
 */
getTitleAttributes(): titleAttributesParams,

/**
 * Sets the value of the <Titanium.UI.TabGroup.titleAttributes> property.
 */
setTitleAttributes(titleAttributes: titleAttributesParams): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.titleControl> property.
 */
getTitleControl(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.TabGroup.titleControl> property.
 */
setTitleControl(titleControl: any): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.titleImage> property.
 */
getTitleImage(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.titleImage> property.
 */
setTitleImage(titleImage: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.titlePrompt> property.
 */
getTitlePrompt(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.titlePrompt> property.
 */
setTitlePrompt(titlePrompt: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.titleid> property.
 */
getTitleid(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.titleid> property.
 */
setTitleid(titleid: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.titlepromptid> property.
 */
getTitlepromptid(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.titlepromptid> property.
 */
setTitlepromptid(titlepromptid: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.toolbar> property.
 */
getToolbar(): any[],

/**
 * Gets the value of the <Titanium.UI.TabGroup.transitionAnimation> property.
 */
getTransitionAnimation(): Titanium$Proxy,

/**
 * Sets the value of the <Titanium.UI.TabGroup.transitionAnimation> property.
 */
setTransitionAnimation(transitionAnimation: Titanium$Proxy): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.translucent> property.
 */
getTranslucent(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.translucent> property.
 */
setTranslucent(translucent: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.url> property.
 */
getUrl(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.url> property.
 */
setUrl(url: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.windowFlags> property.
 */
getWindowFlags(): number,

/**
 * Sets the value of the <Titanium.UI.TabGroup.windowFlags> property.
 */
setWindowFlags(windowFlags: number): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.windowSoftInputMode> property.
 */
getWindowSoftInputMode(): number,

/**
 * Sets the value of the <Titanium.UI.TabGroup.windowSoftInputMode> property.
 */
setWindowSoftInputMode(windowSoftInputMode: number): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.windowPixelFormat> property.
 */
getWindowPixelFormat(): number,

/**
 * Sets the value of the <Titanium.UI.TabGroup.windowPixelFormat> property.
 */
setWindowPixelFormat(windowPixelFormat: number): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.activityExitTransition> property.
 */
getActivityExitTransition(): number,

/**
 * Sets the value of the <Titanium.UI.TabGroup.activityExitTransition> property.
 */
setActivityExitTransition(activityExitTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.activityEnterTransition> property.
 */
getActivityEnterTransition(): number,

/**
 * Sets the value of the <Titanium.UI.TabGroup.activityEnterTransition> property.
 */
setActivityEnterTransition(activityEnterTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.activityReturnTransition> property.
 */
getActivityReturnTransition(): number,

/**
 * Sets the value of the <Titanium.UI.TabGroup.activityReturnTransition> property.
 */
setActivityReturnTransition(activityReturnTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.activityReenterTransition> property.
 */
getActivityReenterTransition(): number,

/**
 * Sets the value of the <Titanium.UI.TabGroup.activityReenterTransition> property.
 */
setActivityReenterTransition(activityReenterTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.activitySharedElementExitTransition> property.
 */
getActivitySharedElementExitTransition(): number,

/**
 * Sets the value of the <Titanium.UI.TabGroup.activitySharedElementExitTransition> property.
 */
setActivitySharedElementExitTransition(activitySharedElementExitTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.activitySharedElementEnterTransition> property.
 */
getActivitySharedElementEnterTransition(): number,

/**
 * Sets the value of the <Titanium.UI.TabGroup.activitySharedElementEnterTransition> property.
 */
setActivitySharedElementEnterTransition(activitySharedElementEnterTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.activitySharedElementReturnTransition> property.
 */
getActivitySharedElementReturnTransition(): number,

/**
 * Sets the value of the <Titanium.UI.TabGroup.activitySharedElementReturnTransition> property.
 */
setActivitySharedElementReturnTransition(activitySharedElementReturnTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.activitySharedElementReenterTransition> property.
 */
getActivitySharedElementReenterTransition(): number,

/**
 * Sets the value of the <Titanium.UI.TabGroup.activitySharedElementReenterTransition> property.
 */
setActivitySharedElementReenterTransition(activitySharedElementReenterTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.allowUserCustomization> property.
 */
getAllowUserCustomization(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.allowUserCustomization> property.
 */
setAllowUserCustomization(allowUserCustomization: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.editButtonTitle> property.
 */
getEditButtonTitle(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.editButtonTitle> property.
 */
setEditButtonTitle(editButtonTitle: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.swipeable> property.
 */
getSwipeable(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.swipeable> property.
 */
setSwipeable(swipeable: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.smoothScrollOnTabClick> property.
 */
getSmoothScrollOnTabClick(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.smoothScrollOnTabClick> property.
 */
setSmoothScrollOnTabClick(smoothScrollOnTabClick: boolean): void,

/**
 * Sets the value of the <Titanium.UI.TabGroup.tabs> property.
 */
setTabs(tabs: $ReadOnlyArray<Titanium$UI$Tab>): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.shiftMode> property.
 */
getShiftMode(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.shiftMode> property.
 */
setShiftMode(shiftMode: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.style> property.
 */
getStyle(): number,

/**
 * Sets the value of the <Titanium.UI.TabGroup.style> property.
 */
setStyle(style: number): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.tabsBackgroundColor> property.
 */
getTabsBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.tabsBackgroundColor> property.
 */
setTabsBackgroundColor(tabsBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.tabsTintColor> property.
 */
getTabsTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.tabsTintColor> property.
 */
setTabsTintColor(tabsTintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.tabsTranslucent> property.
 */
getTabsTranslucent(): boolean,

/**
 * Sets the value of the <Titanium.UI.TabGroup.tabsTranslucent> property.
 */
setTabsTranslucent(tabsTranslucent: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.tabsBackgroundImage> property.
 */
getTabsBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.tabsBackgroundImage> property.
 */
setTabsBackgroundImage(tabsBackgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.unselectedItemTintColor> property.
 */
getUnselectedItemTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.unselectedItemTintColor> property.
 */
setUnselectedItemTintColor(unselectedItemTintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.activeTabIconTint> property.
 */
getActiveTabIconTint(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.activeTabIconTint> property.
 */
setActiveTabIconTint(activeTabIconTint: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.tabsBackgroundSelectedColor> property.
 */
getTabsBackgroundSelectedColor(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.tabsBackgroundSelectedColor> property.
 */
setTabsBackgroundSelectedColor(tabsBackgroundSelectedColor: string): void,

/**
 * Gets the value of the <Titanium.UI.TabGroup.activeTabBackgroundImage> property.
 */
getActiveTabBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.TabGroup.activeTabBackgroundImage> property.
 */
setActiveTabBackgroundImage(activeTabBackgroundImage: string): void
} & Titanium$UI$View



/**
 * A button bar that maintains a selected state.
 */
declare type Titanium$UI$TabbedBar = {

/**
 * Index of the currently selected button.
 */
index: number,

/**
 * Array of labels for the tabbed bar.
 */
labels: string[] | BarItemType[],

/**
 * Style of the tabbed bar.
 */
style: number,

/**
 * Gets the value of the <Titanium.UI.TabbedBar.index> property.
 */
getIndex(): number,

/**
 * Sets the value of the <Titanium.UI.TabbedBar.index> property.
 */
setIndex(index: number): void,

/**
 * Gets the value of the <Titanium.UI.TabbedBar.labels> property.
 */
getLabels(): string[] | BarItemType[],

/**
 * Sets the value of the <Titanium.UI.TabbedBar.labels> property.
 */
setLabels(labels: $ReadOnlyArray<string>): void,

/**
 * Sets the value of the <Titanium.UI.TabbedBar.labels> property.
 */
setLabels(labels: $ReadOnlyArray<BarItemType>): void,

/**
 * Gets the value of the <Titanium.UI.TabbedBar.style> property.
 */
getStyle(): number,

/**
 * Sets the value of the <Titanium.UI.TabbedBar.style> property.
 */
setStyle(style: number): void
} & Titanium$UI$View



/**
 * A table view is used to present information, organized in sections and rows, in a
 * vertically-scrolling view.
 */
declare type Titanium$UI$TableView = {

/**
 * Determines whether this table's rows can be selected.
 */
allowsSelection: boolean,

/**
 * Determines whether this table's rows can be selected while editing the table.
 */
allowsSelectionDuringEditing: boolean,

/**
 * Rows of the table view.
 */
data: Titanium$UI$TableViewRow[] | Titanium$UI$TableViewSection[],

/**
 * Determines the rows' default editable behavior, which allows them to be deleted by the user
 * when the table is in `editing` or `moving` mode.
 */
editable: boolean,

/**
 * Determines whether row editing mode is active.
 */
editing: boolean,

/**
 * Filter attribute to be used when searching.
 */
filterAttribute: string,

/**
 * Determines whether the search is limited to the start of the string
 */
filterAnchored: boolean,

/**
 * Determines whether the search is case insensitive.
 */
filterCaseInsensitive: boolean,

/**
 * When set to false, the ListView will not draw the divider before the footer view.
 */
footerDividersEnabled: boolean,

/**
 * Table view footer title.
 */
footerTitle: string,

/**
 * Max number of row class names.
 */
maxClassname: number,

/**
 * View positioned above the first row that is only revealed when the user drags the table
 * contents down.
 */
headerPullView: Titanium$UI$View,

/**
 * View positioned above the first row that is only revealed when the user drags the list view contents down.
 */
refreshControl: Titanium$UI$RefreshControl,

/**
 * Determines whether the search field should hide on completion.
 */
hideSearchOnSelection: boolean,

/**
 * Table view footer as a view that will be rendered instead of a label.
 */
footerView: Titanium$UI$View,

/**
 * When set to false, the ListView will not draw the divider after the header view.
 */
headerDividersEnabled: boolean,

/**
 * Table view header title.
 */
headerTitle: string,

/**
 * Table view header as a view that will be rendered instead of a label.
 */
headerView: Titanium$UI$View,

/**
 * Array of objects (with `title` and `index` properties) to control the table view index.
 */
index: TableViewIndexEntry[],

/**
 * Maximum row height for table view rows.
 */
maxRowHeight: number,

/**
 * Minimum row height for table view rows.
 */
minRowHeight: number,

/**
 * Determines the rows' default moveable behavior, which allows them to be re-ordered by the
 * user when the table is in `editing` or `moving` mode.
 */
moveable: boolean,

/**
 * Determines whether row moving mode is active.
 */
moving: boolean,

/**
 * Determines the behavior when the user overscrolls the view.
 */
overScrollMode: number,

/**
 * Default row height for table view rows.
 */
rowHeight: number,

/**
 * If `true`, the tableview can be scrolled.
 */
scrollable: boolean,

/**
 * Style of the scrollbar.
 */
scrollIndicatorStyle: number,

/**
 * Controls whether the scroll-to-top gesture is effective.
 */
scrollsToTop: boolean,

/**
 * Search field to use for the table view.
 */
search: Titanium$UI$SearchBar | Titanium$UI$Android$SearchView,

/**
 * A Boolean indicating whether the underlying content is dimmed during a search.
 */
dimBackgroundForSearch: boolean,

/**
 * Determines whether the [SearchBar](Titanium.UI.SearchBar) or [SearchView](Titanium.UI.Android.SearchView) appears as part of the TableView.
 */
searchAsChild: boolean,

/**
 * Determines whether the search field is visible.
 */
searchHidden: boolean,

/**
 * Number of sections in this table view.
 */
+sectionCount: number,

/**
 * Sections of this table.
 */
sections: Titanium$UI$TableViewSection[],

/**
 * Separator line color between rows, as a color name or hex triplet.
 */
separatorColor: string,

/**
 * The insets for table view separators (applies to all cells).
 */
separatorInsets: any,

/**
 * The insets for the table view header and footer.
 */
tableSeparatorInsets: any,

/**
 * The insets for table view cells (applies to all cells).
 */
rowSeparatorInsets: any,

/**
 * Separator style constant.
 */
separatorStyle: number,

/**
 * Determines whether this table view displays a vertical scroll indicator.
 */
showVerticalScrollIndicator: boolean,

/**
 * Style of the table view, specified using one of the constants from
 * <Titanium.UI.iOS.TableViewStyle>.
 */
style: number,

/**
 * The background color of the search results (iOS-only).
 */
resultsBackgroundColor: string,

/**
 * Separator line color between rows inside search results,
 * as a color name or hex triplet (iOS-only).
 */
resultsSeparatorColor: string,

/**
 * The separator style of the search results (iOS-only).
 */
resultsSeparatorStyle: number,

/**
 * The insets for search results separators (applies to all cells & iOS-only).
 */
resultsSeparatorInsets: any,

/**
 * Appends a single row or an array of rows to the end of the table.
 */
appendRow(row: any, animation?: TableViewAnimationProperties): void,

/**
 * Appends a single section or an array of sections to the end of the table.
 */
appendSection(section: any, animation?: TableViewAnimationProperties): void,

/**
 * Deletes an existing row.
 */
deleteRow(row: number, animation?: TableViewAnimationProperties): void,

/**
 * Deletes an existing row.
 */
deleteRow(row: Titanium$UI$TableViewRow, animation?: TableViewAnimationProperties): void,

/**
 * Deletes an existing section.
 */
deleteSection(section: number, animation?: TableViewAnimationProperties): void,

/**
 * Programmatically deselects a row.
 */
deselectRow(row: number): void,

/**
 * Inserts a row after another row.
 */
insertRowAfter(index: number, row: any, animation?: TableViewAnimationProperties): void,

/**
 * Inserts a section after another section.
 */
insertSectionAfter(index: number, section: any, animation?: TableViewAnimationProperties): void,

/**
 * Inserts a row before another row.
 */
insertRowBefore(index: number, row: any, animation?: TableViewAnimationProperties): void,

/**
 * Inserts a section before another section.
 */
insertSectionBefore(index: number, section: any, animation?: TableViewAnimationProperties): void,

/**
 * Scrolls the table view to ensure that the specified row is on screen.
 */
scrollToIndex(index: number, animation?: TableViewAnimationProperties): void,

/**
 * Scrolls the table to a specific top position where 0 is the topmost y position in the
 * table view.
 */
scrollToTop(top: number, animation?: TableViewAnimationProperties): void,

/**
 * Sets this tableview's content insets.
 */
setContentInsets(edgeInsets: TableViewEdgeInsets, animated?: TableViewContentInsetOption): void,

/**
 * Sets the value of the content offset of the table view without animation by default.
 */
setContentOffset(contentOffset: any): void,

/**
 * Programmatically selects a row. In Android, it sets the currently selected item. If in touch mode,
 * the item will not be selected but it will still be positioned appropriately. If the specified
 * selection position is less than 0, then the item at position 0 will be selected.
 */
selectRow(row: number): void,

/**
 * Sets the data in the table.
 */
setData(data: any, animation: TableViewAnimationProperties): void,

/**
 * Sets the value of the [Titanium.UI.TableView.headerPullView] property.
 */
setHeaderPullView(view: any): void,

/**
 * Updates an existing row, optionally with animation.
 */
updateRow(
index: number,
row: Titanium$UI$TableViewRow,
animation: TableViewAnimationProperties): void,

/**
 * Updates an existing section, optionally with animation.
 */
updateSection(
index: number,
section: Titanium$UI$TableViewSection,
animation: TableViewAnimationProperties): void,

/**
 * Gets the value of the <Titanium.UI.TableView.allowsSelection> property.
 */
getAllowsSelection(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableView.allowsSelection> property.
 */
setAllowsSelection(allowsSelection: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableView.allowsSelectionDuringEditing> property.
 */
getAllowsSelectionDuringEditing(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableView.allowsSelectionDuringEditing> property.
 */
setAllowsSelectionDuringEditing(allowsSelectionDuringEditing: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableView.data> property.
 */
getData(): Titanium$UI$TableViewRow[] | Titanium$UI$TableViewSection[],

/**
 * Gets the value of the <Titanium.UI.TableView.editable> property.
 */
getEditable(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableView.editable> property.
 */
setEditable(editable: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableView.editing> property.
 */
getEditing(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableView.editing> property.
 */
setEditing(editing: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableView.filterAttribute> property.
 */
getFilterAttribute(): string,

/**
 * Sets the value of the <Titanium.UI.TableView.filterAttribute> property.
 */
setFilterAttribute(filterAttribute: string): void,

/**
 * Gets the value of the <Titanium.UI.TableView.filterAnchored> property.
 */
getFilterAnchored(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableView.filterAnchored> property.
 */
setFilterAnchored(filterAnchored: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableView.filterCaseInsensitive> property.
 */
getFilterCaseInsensitive(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableView.filterCaseInsensitive> property.
 */
setFilterCaseInsensitive(filterCaseInsensitive: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableView.footerDividersEnabled> property.
 */
getFooterDividersEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableView.footerDividersEnabled> property.
 */
setFooterDividersEnabled(footerDividersEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableView.footerTitle> property.
 */
getFooterTitle(): string,

/**
 * Sets the value of the <Titanium.UI.TableView.footerTitle> property.
 */
setFooterTitle(footerTitle: string): void,

/**
 * Gets the value of the <Titanium.UI.TableView.maxClassname> property.
 */
getMaxClassname(): number,

/**
 * Sets the value of the <Titanium.UI.TableView.maxClassname> property.
 */
setMaxClassname(maxClassname: number): void,

/**
 * Gets the value of the <Titanium.UI.TableView.headerPullView> property.
 */
getHeaderPullView(): Titanium$UI$View,

/**
 * Gets the value of the <Titanium.UI.TableView.refreshControl> property.
 */
getRefreshControl(): Titanium$UI$RefreshControl,

/**
 * Sets the value of the <Titanium.UI.TableView.refreshControl> property.
 */
setRefreshControl(refreshControl: Titanium$UI$RefreshControl): void,

/**
 * Gets the value of the <Titanium.UI.TableView.hideSearchOnSelection> property.
 */
getHideSearchOnSelection(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableView.hideSearchOnSelection> property.
 */
setHideSearchOnSelection(hideSearchOnSelection: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableView.footerView> property.
 */
getFooterView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.TableView.footerView> property.
 */
setFooterView(footerView: any): void,

/**
 * Gets the value of the <Titanium.UI.TableView.headerDividersEnabled> property.
 */
getHeaderDividersEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableView.headerDividersEnabled> property.
 */
setHeaderDividersEnabled(headerDividersEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableView.headerTitle> property.
 */
getHeaderTitle(): string,

/**
 * Sets the value of the <Titanium.UI.TableView.headerTitle> property.
 */
setHeaderTitle(headerTitle: string): void,

/**
 * Gets the value of the <Titanium.UI.TableView.headerView> property.
 */
getHeaderView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.TableView.headerView> property.
 */
setHeaderView(headerView: any): void,

/**
 * Gets the value of the <Titanium.UI.TableView.index> property.
 */
getIndex(): TableViewIndexEntry[],

/**
 * Sets the value of the <Titanium.UI.TableView.index> property.
 */
setIndex(index: $ReadOnlyArray<TableViewIndexEntry>): void,

/**
 * Gets the value of the <Titanium.UI.TableView.maxRowHeight> property.
 */
getMaxRowHeight(): number,

/**
 * Sets the value of the <Titanium.UI.TableView.maxRowHeight> property.
 */
setMaxRowHeight(maxRowHeight: number): void,

/**
 * Gets the value of the <Titanium.UI.TableView.minRowHeight> property.
 */
getMinRowHeight(): number,

/**
 * Sets the value of the <Titanium.UI.TableView.minRowHeight> property.
 */
setMinRowHeight(minRowHeight: number): void,

/**
 * Gets the value of the <Titanium.UI.TableView.moveable> property.
 */
getMoveable(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableView.moveable> property.
 */
setMoveable(moveable: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableView.moving> property.
 */
getMoving(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableView.moving> property.
 */
setMoving(moving: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableView.overScrollMode> property.
 */
getOverScrollMode(): number,

/**
 * Sets the value of the <Titanium.UI.TableView.overScrollMode> property.
 */
setOverScrollMode(overScrollMode: number): void,

/**
 * Gets the value of the <Titanium.UI.TableView.rowHeight> property.
 */
getRowHeight(): number,

/**
 * Sets the value of the <Titanium.UI.TableView.rowHeight> property.
 */
setRowHeight(rowHeight: number): void,

/**
 * Gets the value of the <Titanium.UI.TableView.scrollable> property.
 */
getScrollable(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableView.scrollable> property.
 */
setScrollable(scrollable: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableView.scrollIndicatorStyle> property.
 */
getScrollIndicatorStyle(): number,

/**
 * Sets the value of the <Titanium.UI.TableView.scrollIndicatorStyle> property.
 */
setScrollIndicatorStyle(scrollIndicatorStyle: number): void,

/**
 * Gets the value of the <Titanium.UI.TableView.scrollsToTop> property.
 */
getScrollsToTop(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableView.scrollsToTop> property.
 */
setScrollsToTop(scrollsToTop: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableView.search> property.
 */
getSearch(): Titanium$UI$SearchBar | Titanium$UI$Android$SearchView,

/**
 * Sets the value of the <Titanium.UI.TableView.search> property.
 */
setSearch(search: Titanium$UI$SearchBar): void,

/**
 * Sets the value of the <Titanium.UI.TableView.search> property.
 */
setSearch(search: Titanium$UI$Android$SearchView): void,

/**
 * Gets the value of the <Titanium.UI.TableView.dimBackgroundForSearch> property.
 */
getDimBackgroundForSearch(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableView.dimBackgroundForSearch> property.
 */
setDimBackgroundForSearch(dimBackgroundForSearch: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableView.searchAsChild> property.
 */
getSearchAsChild(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableView.searchAsChild> property.
 */
setSearchAsChild(searchAsChild: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableView.searchHidden> property.
 */
getSearchHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableView.searchHidden> property.
 */
setSearchHidden(searchHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableView.sectionCount> property.
 */
getSectionCount(): number,

/**
 * Gets the value of the <Titanium.UI.TableView.sections> property.
 */
getSections(): Titanium$UI$TableViewSection[],

/**
 * Sets the value of the <Titanium.UI.TableView.sections> property.
 */
setSections(sections: $ReadOnlyArray<Titanium$UI$TableViewSection>): void,

/**
 * Gets the value of the <Titanium.UI.TableView.separatorColor> property.
 */
getSeparatorColor(): string,

/**
 * Sets the value of the <Titanium.UI.TableView.separatorColor> property.
 */
setSeparatorColor(separatorColor: string): void,

/**
 * Gets the value of the <Titanium.UI.TableView.separatorInsets> property.
 */
getSeparatorInsets(): any,

/**
 * Sets the value of the <Titanium.UI.TableView.separatorInsets> property.
 */
setSeparatorInsets(separatorInsets: any): void,

/**
 * Gets the value of the <Titanium.UI.TableView.tableSeparatorInsets> property.
 */
getTableSeparatorInsets(): any,

/**
 * Sets the value of the <Titanium.UI.TableView.tableSeparatorInsets> property.
 */
setTableSeparatorInsets(tableSeparatorInsets: any): void,

/**
 * Gets the value of the <Titanium.UI.TableView.rowSeparatorInsets> property.
 */
getRowSeparatorInsets(): any,

/**
 * Sets the value of the <Titanium.UI.TableView.rowSeparatorInsets> property.
 */
setRowSeparatorInsets(rowSeparatorInsets: any): void,

/**
 * Gets the value of the <Titanium.UI.TableView.separatorStyle> property.
 */
getSeparatorStyle(): number,

/**
 * Sets the value of the <Titanium.UI.TableView.separatorStyle> property.
 */
setSeparatorStyle(separatorStyle: number): void,

/**
 * Gets the value of the <Titanium.UI.TableView.showVerticalScrollIndicator> property.
 */
getShowVerticalScrollIndicator(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableView.showVerticalScrollIndicator> property.
 */
setShowVerticalScrollIndicator(showVerticalScrollIndicator: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableView.style> property.
 */
getStyle(): number,

/**
 * Sets the value of the <Titanium.UI.TableView.style> property.
 */
setStyle(style: number): void,

/**
 * Gets the value of the <Titanium.UI.TableView.resultsBackgroundColor> property.
 */
getResultsBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.TableView.resultsBackgroundColor> property.
 */
setResultsBackgroundColor(resultsBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.TableView.resultsSeparatorColor> property.
 */
getResultsSeparatorColor(): string,

/**
 * Sets the value of the <Titanium.UI.TableView.resultsSeparatorColor> property.
 */
setResultsSeparatorColor(resultsSeparatorColor: string): void,

/**
 * Gets the value of the <Titanium.UI.TableView.resultsSeparatorStyle> property.
 */
getResultsSeparatorStyle(): number,

/**
 * Sets the value of the <Titanium.UI.TableView.resultsSeparatorStyle> property.
 */
setResultsSeparatorStyle(resultsSeparatorStyle: number): void,

/**
 * Gets the value of the <Titanium.UI.TableView.resultsSeparatorInsets> property.
 */
getResultsSeparatorInsets(): any,

/**
 * Sets the value of the <Titanium.UI.TableView.resultsSeparatorInsets> property.
 */
setResultsSeparatorInsets(resultsSeparatorInsets: any): void
} & Titanium$UI$View



/**
 * A table view row is an individual item in a table, organized into table view sections.
 */
declare type Titanium$UI$TableViewRow = {

/**
 * Class name for the row.
 */
className: string,

/**
 * Default text color of the row when not selected, as a color name or hex triplet.
 */
color: string,

/**
 * Text to display on the delete button when editable is enabled
 */
deleteButtonTitle: string,

/**
 * Determines the rows' editable behavior, which allows them to be deleted by the user when the
 * table is in `editing` or `moving` mode.
 */
editable: boolean,

/**
 * Font to use for the row title.
 */
font: Font,

/**
 * The footer title of the row.
 */
footer: string,

/**
 * Determines whether a system-provided checkmark is displayed on the right-hand side of
 * the row.
 */
hasCheck: boolean,

/**
 * Determines whether a system-provided arrow is displayed on the right-hand side of the row.
 */
hasChild: boolean,

/**
 * Determines whether a system-provided detail disclosure button is displayed on the right-hand
 * side of the row.
 */
hasDetail: boolean,

/**
 * The header title of the row.
 */
header: string,

/**
 * Indention level for the row.
 */
indentionLevel: number,

/**
 * Image to render in the left image area of the row, specified as a local path or URL.
 */
leftImage: string,

/**
 * Determines the rows' moveable behavior, which allows them to be re-ordered by the user when
 * the table is in `editing` or `moving` mode.
 */
moveable: boolean,

/**
 * Image to render in the right image area of the row, specified as a local path or URL.
 */
rightImage: string,

/**
 * Background color to render when the row is selected, as a color name or hex triplet.
 */
selectedBackgroundColor: string,

/**
 * Background image to render when the row is selected.
 */
selectedBackgroundImage: string,

/**
 * Color of the row text when the row is selected, as a color name or hex triplet.
 */
selectedColor: string,

/**
 * Selection style constant to control the selection color.
 */
selectionStyle: number,

/**
 * Text to display on the row.
 */
title: string,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.className> property.
 */
getClassName(): string,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.className> property.
 */
setClassName(className: string): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.color> property.
 */
getColor(): string,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.color> property.
 */
setColor(color: string): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.deleteButtonTitle> property.
 */
getDeleteButtonTitle(): string,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.deleteButtonTitle> property.
 */
setDeleteButtonTitle(deleteButtonTitle: string): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.editable> property.
 */
getEditable(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.editable> property.
 */
setEditable(editable: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.font> property.
 */
getFont(): Font,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.font> property.
 */
setFont(font: Font): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.footer> property.
 */
getFooter(): string,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.footer> property.
 */
setFooter(footer: string): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.hasCheck> property.
 */
getHasCheck(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.hasCheck> property.
 */
setHasCheck(hasCheck: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.hasChild> property.
 */
getHasChild(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.hasChild> property.
 */
setHasChild(hasChild: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.hasDetail> property.
 */
getHasDetail(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.hasDetail> property.
 */
setHasDetail(hasDetail: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.header> property.
 */
getHeader(): string,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.header> property.
 */
setHeader(header: string): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.indentionLevel> property.
 */
getIndentionLevel(): number,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.indentionLevel> property.
 */
setIndentionLevel(indentionLevel: number): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.leftImage> property.
 */
getLeftImage(): string,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.leftImage> property.
 */
setLeftImage(leftImage: string): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.moveable> property.
 */
getMoveable(): boolean,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.moveable> property.
 */
setMoveable(moveable: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.rightImage> property.
 */
getRightImage(): string,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.rightImage> property.
 */
setRightImage(rightImage: string): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.selectedBackgroundColor> property.
 */
getSelectedBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.selectedBackgroundColor> property.
 */
setSelectedBackgroundColor(selectedBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.selectedBackgroundImage> property.
 */
getSelectedBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.selectedBackgroundImage> property.
 */
setSelectedBackgroundImage(selectedBackgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.selectedColor> property.
 */
getSelectedColor(): string,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.selectedColor> property.
 */
setSelectedColor(selectedColor: string): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.selectionStyle> property.
 */
getSelectionStyle(): number,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.selectionStyle> property.
 */
setSelectionStyle(selectionStyle: number): void,

/**
 * Gets the value of the <Titanium.UI.TableViewRow.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.UI.TableViewRow.title> property.
 */
setTitle(title: string): void
} & Titanium$UI$View



/**
 * A table view section is a container within a table used to organize table view rows.
 */
declare type Titanium$UI$TableViewSection = {

/**
 * Title of this section footer.
 */
footerTitle: string,

/**
 * View to use for this section footer.
 */
footerView: Titanium$UI$View,

/**
 * Title of this section header.
 */
headerTitle: string,

/**
 * View to use for this section header.
 */
headerView: Titanium$UI$View,

/**
 * Number of rows in this section.
 */
+rowCount: number,

/**
 * Rows in this section.
 */
+rows: Titanium$UI$TableViewRow[],

/**
 * Adds a table view row to this section.
 */
add(row: Titanium$UI$TableViewRow): void,

/**
 * Removes a table view row from this section.
 */
remove(row: Titanium$UI$TableViewRow): void,

/**
 * Returns a row in this section.
 */
rowAtIndex(index: number): Titanium$UI$TableViewRow,

/**
 * Gets the value of the <Titanium.UI.TableViewSection.footerTitle> property.
 */
getFooterTitle(): string,

/**
 * Sets the value of the <Titanium.UI.TableViewSection.footerTitle> property.
 */
setFooterTitle(footerTitle: string): void,

/**
 * Gets the value of the <Titanium.UI.TableViewSection.footerView> property.
 */
getFooterView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.TableViewSection.footerView> property.
 */
setFooterView(footerView: any): void,

/**
 * Gets the value of the <Titanium.UI.TableViewSection.headerTitle> property.
 */
getHeaderTitle(): string,

/**
 * Sets the value of the <Titanium.UI.TableViewSection.headerTitle> property.
 */
setHeaderTitle(headerTitle: string): void,

/**
 * Gets the value of the <Titanium.UI.TableViewSection.headerView> property.
 */
getHeaderView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.TableViewSection.headerView> property.
 */
setHeaderView(headerView: any): void,

/**
 * Gets the value of the <Titanium.UI.TableViewSection.rowCount> property.
 */
getRowCount(): number,

/**
 * Gets the value of the <Titanium.UI.TableViewSection.rows> property.
 */
getRows(): Titanium$UI$TableViewRow[]
} & Titanium$Proxy



/**
 * A multiline text field that supports editing and scrolling.
 */
declare type Titanium$UI$TextArea = {

/**
 * Determines the appearance of the keyboard displayed when this text area is focused.
 */
appearance: number,

/**
 * Determines the appearance of the keyboard displayed when this text area is focused.
 */
keyboardAppearance: number,

/**
 * Hint text attributed string.
 */
attributedHintText: Titanium$UI$AttributedString,

/**
 * TextArea attributed string.
 */
attributedString: Titanium$UI$AttributedString,

/**
 * Determines how text is capitalized during typing.
 */
autocapitalization: number,

/**
 * Determines whether to automatically correct text entered into this text area.
 */
autocorrect: boolean,

/**
 * Sets the autofill type for the text area.
 */
autofillType: string,

/**
 * Automatically convert text to clickable links.
 */
autoLink: number,

/**
 * Determines whether the value of this text area should be cleared when it is focused.
 */
clearOnEdit: boolean,

/**
 * Color of the text in this text area, as a color name or hex triplet.
 */
color: string,

/**
 * Determines whether this field can be edited.
 */
editable: boolean,

/**
 * Determines whether an ellipsis (`...`) should be used to indicate truncated text.
 */
ellipsize: boolean,

/**
 * Determines whether the return key is enabled automatically when there is text in this text
 * area.
 */
enableReturnKey: boolean,

/**
 * Font to use for text.
 */
font: Font,

/**
 * Leave some space above the keyboard in landscape mode or not.
 */
fullscreen: boolean,

/**
 * Hint text to display when the field is empty.
 */
hintText: string,

/**
 * Color of hint text that displays when field is empty.
 */
hintTextColor: string,

/**
 * Hint type to display on the text field.
 */
hintType: number,

/**
 * Specifies if the text area should allow user interaction with the given URL in the given range of text.
 */
handleLinks: boolean,

/**
 * Array of toolbar button objects or a [toolbar](Titanium.UI.iOS.Toolbar) to be used when the
 * keyboard is displayed.
 */
keyboardToolbar: Titanium$UI$View[] | Titanium$UI$iOS$Toolbar,

/**
 * Color of the keyboard toolbar if keyboardToolbar is an array, as a color name or hex triplet.
 */
keyboardToolbarColor: string,

/**
 * Height of the keyboard toolbar if keyboardToolbar is an array.
 */
keyboardToolbarHeight: number,

/**
 * Keyboard type to display when this text area is focused.
 */
keyboardType: number,

/**
 * Number of lines tall the text area height will be, if set.
 */
lines: number,

/**
 * Maximum length of text field input.
 */
maxLength: number,

/**
 * Maximum line count of text field input.
 */
maxLines: number,

/**
 * Sets the left and right padding of this TextArea. The text will always be vertically centered.
 */
padding: ViewPadding,

/**
 * Specifies the text to display on the keyboard `Return` key when this text area is focused.
 */
returnKeyType: number,

/**
 * Controls whether the scroll-to-top gesture is effective.
 */
scrollsToTop: boolean,

/**
 * Determinates if the undo and redo buttons on the left side of the keyboard should be displayed or not. Only valid on iOS9 and above. This property can only be set upon creation.
 */
showUndoRedoActions: boolean,

/**
 * Determines if the return key should be suppressed during text entry.
 */
suppressReturn: boolean,

/**
 * Text alignment within this text area.
 * This has no effect on `hintText` when `hintType` is Ti.UI.HINT_TYPE_ANIMATED.
 */
textAlign: string | number,

/**
 * Value of this text area, which may be set programmatically and modified by the user.
 */
value: string,

/**
 * Determines whether this text area can be scrolled.
 */
scrollable: boolean,

/**
 * Returns the currently selected text of the text area.
 */
+selection: textAreaSelectedParams,

/**
 * Vertical alignment within this text area.
 */
verticalAlign: number | string,

/**
 * Forces this text area to lose focus.
 */
blur(): void,

/**
 * Forces this text area to gain focus.
 */
focus(): void,

/**
 * Returns `true` if this text area contains text.
 */
hasText(): boolean,

/**
 * Selects the text in range (start, end).
 */
setSelection(start: number, end: number): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.appearance> property.
 */
getAppearance(): number,

/**
 * Sets the value of the <Titanium.UI.TextArea.appearance> property.
 */
setAppearance(appearance: number): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.keyboardAppearance> property.
 */
getKeyboardAppearance(): number,

/**
 * Sets the value of the <Titanium.UI.TextArea.keyboardAppearance> property.
 */
setKeyboardAppearance(keyboardAppearance: number): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.attributedHintText> property.
 */
getAttributedHintText(): Titanium$UI$AttributedString,

/**
 * Sets the value of the <Titanium.UI.TextArea.attributedHintText> property.
 */
setAttributedHintText(attributedHintText: Titanium$UI$AttributedString): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.attributedString> property.
 */
getAttributedString(): Titanium$UI$AttributedString,

/**
 * Sets the value of the <Titanium.UI.TextArea.attributedString> property.
 */
setAttributedString(attributedString: Titanium$UI$AttributedString): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.autocapitalization> property.
 */
getAutocapitalization(): number,

/**
 * Sets the value of the <Titanium.UI.TextArea.autocapitalization> property.
 */
setAutocapitalization(autocapitalization: number): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.autocorrect> property.
 */
getAutocorrect(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextArea.autocorrect> property.
 */
setAutocorrect(autocorrect: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.autofillType> property.
 */
getAutofillType(): string,

/**
 * Sets the value of the <Titanium.UI.TextArea.autofillType> property.
 */
setAutofillType(autofillType: string): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.autoLink> property.
 */
getAutoLink(): number,

/**
 * Sets the value of the <Titanium.UI.TextArea.autoLink> property.
 */
setAutoLink(autoLink: number): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.clearOnEdit> property.
 */
getClearOnEdit(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextArea.clearOnEdit> property.
 */
setClearOnEdit(clearOnEdit: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.color> property.
 */
getColor(): string,

/**
 * Sets the value of the <Titanium.UI.TextArea.color> property.
 */
setColor(color: string): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.editable> property.
 */
getEditable(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextArea.editable> property.
 */
setEditable(editable: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.ellipsize> property.
 */
getEllipsize(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextArea.ellipsize> property.
 */
setEllipsize(ellipsize: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.enableReturnKey> property.
 */
getEnableReturnKey(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextArea.enableReturnKey> property.
 */
setEnableReturnKey(enableReturnKey: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.font> property.
 */
getFont(): Font,

/**
 * Sets the value of the <Titanium.UI.TextArea.font> property.
 */
setFont(font: Font): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.fullscreen> property.
 */
getFullscreen(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextArea.fullscreen> property.
 */
setFullscreen(fullscreen: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.hintText> property.
 */
getHintText(): string,

/**
 * Sets the value of the <Titanium.UI.TextArea.hintText> property.
 */
setHintText(hintText: string): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.hintTextColor> property.
 */
getHintTextColor(): string,

/**
 * Sets the value of the <Titanium.UI.TextArea.hintTextColor> property.
 */
setHintTextColor(hintTextColor: string): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.hintType> property.
 */
getHintType(): number,

/**
 * Sets the value of the <Titanium.UI.TextArea.hintType> property.
 */
setHintType(hintType: number): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.handleLinks> property.
 */
getHandleLinks(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextArea.handleLinks> property.
 */
setHandleLinks(handleLinks: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.keyboardToolbar> property.
 */
getKeyboardToolbar(): Titanium$UI$View[] | Titanium$UI$iOS$Toolbar,

/**
 * Sets the value of the <Titanium.UI.TextArea.keyboardToolbar> property.
 */
setKeyboardToolbar(keyboardToolbar: any[]): void,

/**
 * Sets the value of the <Titanium.UI.TextArea.keyboardToolbar> property.
 */
setKeyboardToolbar(keyboardToolbar: Titanium$UI$iOS$Toolbar): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.keyboardToolbarColor> property.
 */
getKeyboardToolbarColor(): string,

/**
 * Sets the value of the <Titanium.UI.TextArea.keyboardToolbarColor> property.
 */
setKeyboardToolbarColor(keyboardToolbarColor: string): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.keyboardToolbarHeight> property.
 */
getKeyboardToolbarHeight(): number,

/**
 * Sets the value of the <Titanium.UI.TextArea.keyboardToolbarHeight> property.
 */
setKeyboardToolbarHeight(keyboardToolbarHeight: number): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.keyboardType> property.
 */
getKeyboardType(): number,

/**
 * Sets the value of the <Titanium.UI.TextArea.keyboardType> property.
 */
setKeyboardType(keyboardType: number): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.lines> property.
 */
getLines(): number,

/**
 * Sets the value of the <Titanium.UI.TextArea.lines> property.
 */
setLines(lines: number): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.maxLength> property.
 */
getMaxLength(): number,

/**
 * Sets the value of the <Titanium.UI.TextArea.maxLength> property.
 */
setMaxLength(maxLength: number): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.maxLines> property.
 */
getMaxLines(): number,

/**
 * Sets the value of the <Titanium.UI.TextArea.maxLines> property.
 */
setMaxLines(maxLines: number): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.padding> property.
 */
getPadding(): ViewPadding,

/**
 * Sets the value of the <Titanium.UI.TextArea.padding> property.
 */
setPadding(padding: ViewPadding): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.returnKeyType> property.
 */
getReturnKeyType(): number,

/**
 * Sets the value of the <Titanium.UI.TextArea.returnKeyType> property.
 */
setReturnKeyType(returnKeyType: number): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.scrollsToTop> property.
 */
getScrollsToTop(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextArea.scrollsToTop> property.
 */
setScrollsToTop(scrollsToTop: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.showUndoRedoActions> property.
 */
getShowUndoRedoActions(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextArea.showUndoRedoActions> property.
 */
setShowUndoRedoActions(showUndoRedoActions: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.suppressReturn> property.
 */
getSuppressReturn(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextArea.suppressReturn> property.
 */
setSuppressReturn(suppressReturn: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.textAlign> property.
 */
getTextAlign(): string | number,

/**
 * Sets the value of the <Titanium.UI.TextArea.textAlign> property.
 */
setTextAlign(textAlign: string): void,

/**
 * Sets the value of the <Titanium.UI.TextArea.textAlign> property.
 */
setTextAlign(textAlign: number): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.value> property.
 */
getValue(): string,

/**
 * Sets the value of the <Titanium.UI.TextArea.value> property.
 */
setValue(value: string): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.scrollable> property.
 */
getScrollable(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextArea.scrollable> property.
 */
setScrollable(scrollable: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextArea.selection> property.
 */
getSelection(): textAreaSelectedParams,

/**
 * Gets the value of the <Titanium.UI.TextArea.verticalAlign> property.
 */
getVerticalAlign(): number | string,

/**
 * Sets the value of the <Titanium.UI.TextArea.verticalAlign> property.
 */
setVerticalAlign(verticalAlign: number): void,

/**
 * Sets the value of the <Titanium.UI.TextArea.verticalAlign> property.
 */
setVerticalAlign(verticalAlign: string): void
} & Titanium$UI$View



/**
 * A single line text field.
 */
declare type Titanium$UI$TextField = {

/**
 * Determines the appearance of the keyboard displayed when this field is focused.
 */
appearance: number,

/**
 * Determines the appearance of the keyboard displayed when this field is focused.
 */
keyboardAppearance: number,

/**
 * TextField attributed string.
 */
attributedString: Titanium$UI$AttributedString,

/**
 * Hint text attributed string.
 */
attributedHintText: Titanium$UI$AttributedString,

/**
 * Determines how text is capitalized during typing.
 */
autocapitalization: number,

/**
 * Determines whether to automatically correct text entered into this text field.
 */
autocorrect: boolean,

/**
 * Sets the autofill type for the text field.
 */
autofillType: string,

/**
 * Automatically convert text to clickable links.
 */
autoLink: number,

/**
 * Border style for the field.
 */
borderStyle: number,

/**
 * Determines when the clear button is displayed.
 */
clearButtonMode: number,

/**
 * Determines whether the value of this text field should be cleared when it is focused.
 */
clearOnEdit: boolean,

/**
 * Color of the text in this text field, as a color name or hex triplet.
 */
color: string,

/**
 * Determines whether this field can be edited.
 */
editable: boolean,

/**
 * Determines whether an ellipsis (`...`) should be used to indicate truncated text.
 */
ellipsize: boolean,

/**
 * Determines whether the return key is enabled automatically when there is text in this text
 * field.
 */
enableReturnKey: boolean,

/**
 * Font to use for text.
 */
font: Font,

/**
 * Leave some space above the keyboard in landscape mode or not.
 */
fullscreen: boolean,

/**
 * Hint text to display when the field is empty.
 */
hintText: string,

/**
 * Hint text color to display when the field is empty.
 */
hintTextColor: string,

/**
 * Key identifying a string from the locale file to use for the
 * [hintText](Titanium.UI.TextField.hintText) property.
 */
hinttextid: string,

/**
 * Hint type to display on the text field.
 */
hintType: number,

/**
 * Input type to accept in the text field. Also influences the Keyboard type to display.
 */
inputType: number[],

/**
 * Array of toolbar button objects or a [toolbar](Titanium.UI.iOS.Toolbar) to be used when the
 * keyboard is displayed.
 */
keyboardToolbar: Titanium$UI$View[] | Titanium$UI$iOS$Toolbar,

/**
 * Color of the keyboard toolbar if keyboardToolbar is an array, as a color name or hex triplet.
 */
keyboardToolbarColor: string,

/**
 * Height of the keyboard toolbar if keyboardToolbar is an array.
 */
keyboardToolbarHeight: number,

/**
 * Keyboard type to display when this text field is focused.
 */
keyboardType: number,

/**
 * Left button view to display in the `TextField`.
 */
leftButton: any,

/**
 * Determines when to display the left button view.
 */
leftButtonMode: number,

/**
 * Padding between the left button and the edge of the field.
 */
leftButtonPadding: number,

/**
 * Minimum size of the font when the font is sized based on the contents.  Enables font
 * scaling to fit.
 */
minimumFontSize: number,

/**
 * Sets the padding of this text field.
 */
padding: ViewPadding,

/**
 * Left padding of this text field.
 */
paddingLeft: number,

/**
 * Right padding of this text field.
 */
paddingRight: number,

/**
 * Obscure the input text from the user.
 */
passwordMask: boolean,

/**
 * Set password rules that should be used for this text field.
 */
passwordRules: string,

/**
 * Specifies the text to display on the keyboard `Return` key when this field is focused.
 */
returnKeyType: number,

/**
 * Right button view.
 */
rightButton: any,

/**
 * Determines when to display the right button view.
 */
rightButtonMode: number,

/**
 * Padding between the right button and the edge of the field.
 */
rightButtonPadding: number,

/**
 * Determines whether the return key should be suppressed during entry.
 */
suppressReturn: boolean,

/**
 * Returns the currently selected text of the text field.
 */
+selection: textFieldSelectedParams,

/**
 * Determinates if the undo and redo buttons on the left side of the keyboard should be displayed or not. Only valid on iOS9 and above.
 */
showUndoRedoActions: boolean,

/**
 * Text alignment within this text field.
 * This has no effect on `hintText` when `hintType` is Ti.UI.HINT_TYPE_ANIMATED.
 */
textAlign: string | number,

/**
 * Value of this text field, which may be set programmatically and modified by the user.
 */
value: string,

/**
 * Vertical alignment within this text field.
 */
verticalAlign: number | string,

/**
 * Maximum length of text field input.
 */
maxLength: number,

/**
 * Forces the field to lose focus.
 */
blur(): void,

/**
 * Forces the field to gain focus.
 */
focus(): void,

/**
 * Returns `true` if this text field contains text.
 */
hasText(): boolean,

/**
 * Selects the text in range (start, end).
 */
setSelection(start: number, end: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.appearance> property.
 */
getAppearance(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.appearance> property.
 */
setAppearance(appearance: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.keyboardAppearance> property.
 */
getKeyboardAppearance(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.keyboardAppearance> property.
 */
setKeyboardAppearance(keyboardAppearance: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.attributedString> property.
 */
getAttributedString(): Titanium$UI$AttributedString,

/**
 * Sets the value of the <Titanium.UI.TextField.attributedString> property.
 */
setAttributedString(attributedString: Titanium$UI$AttributedString): void,

/**
 * Gets the value of the <Titanium.UI.TextField.attributedHintText> property.
 */
getAttributedHintText(): Titanium$UI$AttributedString,

/**
 * Sets the value of the <Titanium.UI.TextField.attributedHintText> property.
 */
setAttributedHintText(attributedHintText: Titanium$UI$AttributedString): void,

/**
 * Gets the value of the <Titanium.UI.TextField.autocapitalization> property.
 */
getAutocapitalization(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.autocapitalization> property.
 */
setAutocapitalization(autocapitalization: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.autocorrect> property.
 */
getAutocorrect(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextField.autocorrect> property.
 */
setAutocorrect(autocorrect: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextField.autofillType> property.
 */
getAutofillType(): string,

/**
 * Sets the value of the <Titanium.UI.TextField.autofillType> property.
 */
setAutofillType(autofillType: string): void,

/**
 * Gets the value of the <Titanium.UI.TextField.autoLink> property.
 */
getAutoLink(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.autoLink> property.
 */
setAutoLink(autoLink: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.borderStyle> property.
 */
getBorderStyle(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.borderStyle> property.
 */
setBorderStyle(borderStyle: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.clearButtonMode> property.
 */
getClearButtonMode(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.clearButtonMode> property.
 */
setClearButtonMode(clearButtonMode: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.clearOnEdit> property.
 */
getClearOnEdit(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextField.clearOnEdit> property.
 */
setClearOnEdit(clearOnEdit: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextField.color> property.
 */
getColor(): string,

/**
 * Sets the value of the <Titanium.UI.TextField.color> property.
 */
setColor(color: string): void,

/**
 * Gets the value of the <Titanium.UI.TextField.editable> property.
 */
getEditable(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextField.editable> property.
 */
setEditable(editable: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextField.ellipsize> property.
 */
getEllipsize(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextField.ellipsize> property.
 */
setEllipsize(ellipsize: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextField.enableReturnKey> property.
 */
getEnableReturnKey(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextField.enableReturnKey> property.
 */
setEnableReturnKey(enableReturnKey: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextField.font> property.
 */
getFont(): Font,

/**
 * Sets the value of the <Titanium.UI.TextField.font> property.
 */
setFont(font: Font): void,

/**
 * Gets the value of the <Titanium.UI.TextField.fullscreen> property.
 */
getFullscreen(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextField.fullscreen> property.
 */
setFullscreen(fullscreen: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextField.hintText> property.
 */
getHintText(): string,

/**
 * Sets the value of the <Titanium.UI.TextField.hintText> property.
 */
setHintText(hintText: string): void,

/**
 * Gets the value of the <Titanium.UI.TextField.hintTextColor> property.
 */
getHintTextColor(): string,

/**
 * Sets the value of the <Titanium.UI.TextField.hintTextColor> property.
 */
setHintTextColor(hintTextColor: string): void,

/**
 * Gets the value of the <Titanium.UI.TextField.hinttextid> property.
 */
getHinttextid(): string,

/**
 * Sets the value of the <Titanium.UI.TextField.hinttextid> property.
 */
setHinttextid(hinttextid: string): void,

/**
 * Gets the value of the <Titanium.UI.TextField.hintType> property.
 */
getHintType(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.hintType> property.
 */
setHintType(hintType: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.inputType> property.
 */
getInputType(): number[],

/**
 * Sets the value of the <Titanium.UI.TextField.inputType> property.
 */
setInputType(inputType: $ReadOnlyArray<number>): void,

/**
 * Gets the value of the <Titanium.UI.TextField.keyboardToolbar> property.
 */
getKeyboardToolbar(): Titanium$UI$View[] | Titanium$UI$iOS$Toolbar,

/**
 * Sets the value of the <Titanium.UI.TextField.keyboardToolbar> property.
 */
setKeyboardToolbar(keyboardToolbar: any[]): void,

/**
 * Sets the value of the <Titanium.UI.TextField.keyboardToolbar> property.
 */
setKeyboardToolbar(keyboardToolbar: Titanium$UI$iOS$Toolbar): void,

/**
 * Gets the value of the <Titanium.UI.TextField.keyboardToolbarColor> property.
 */
getKeyboardToolbarColor(): string,

/**
 * Sets the value of the <Titanium.UI.TextField.keyboardToolbarColor> property.
 */
setKeyboardToolbarColor(keyboardToolbarColor: string): void,

/**
 * Gets the value of the <Titanium.UI.TextField.keyboardToolbarHeight> property.
 */
getKeyboardToolbarHeight(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.keyboardToolbarHeight> property.
 */
setKeyboardToolbarHeight(keyboardToolbarHeight: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.keyboardType> property.
 */
getKeyboardType(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.keyboardType> property.
 */
setKeyboardType(keyboardType: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.leftButton> property.
 */
getLeftButton(): any,

/**
 * Sets the value of the <Titanium.UI.TextField.leftButton> property.
 */
setLeftButton(leftButton: any): void,

/**
 * Gets the value of the <Titanium.UI.TextField.leftButtonMode> property.
 */
getLeftButtonMode(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.leftButtonMode> property.
 */
setLeftButtonMode(leftButtonMode: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.leftButtonPadding> property.
 */
getLeftButtonPadding(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.leftButtonPadding> property.
 */
setLeftButtonPadding(leftButtonPadding: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.minimumFontSize> property.
 */
getMinimumFontSize(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.minimumFontSize> property.
 */
setMinimumFontSize(minimumFontSize: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.padding> property.
 */
getPadding(): ViewPadding,

/**
 * Sets the value of the <Titanium.UI.TextField.padding> property.
 */
setPadding(padding: ViewPadding): void,

/**
 * Gets the value of the <Titanium.UI.TextField.paddingLeft> property.
 */
getPaddingLeft(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.paddingLeft> property.
 */
setPaddingLeft(paddingLeft: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.paddingRight> property.
 */
getPaddingRight(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.paddingRight> property.
 */
setPaddingRight(paddingRight: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.passwordMask> property.
 */
getPasswordMask(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextField.passwordMask> property.
 */
setPasswordMask(passwordMask: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextField.passwordRules> property.
 */
getPasswordRules(): string,

/**
 * Sets the value of the <Titanium.UI.TextField.passwordRules> property.
 */
setPasswordRules(passwordRules: string): void,

/**
 * Gets the value of the <Titanium.UI.TextField.returnKeyType> property.
 */
getReturnKeyType(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.returnKeyType> property.
 */
setReturnKeyType(returnKeyType: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.rightButton> property.
 */
getRightButton(): any,

/**
 * Sets the value of the <Titanium.UI.TextField.rightButton> property.
 */
setRightButton(rightButton: any): void,

/**
 * Gets the value of the <Titanium.UI.TextField.rightButtonMode> property.
 */
getRightButtonMode(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.rightButtonMode> property.
 */
setRightButtonMode(rightButtonMode: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.rightButtonPadding> property.
 */
getRightButtonPadding(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.rightButtonPadding> property.
 */
setRightButtonPadding(rightButtonPadding: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.suppressReturn> property.
 */
getSuppressReturn(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextField.suppressReturn> property.
 */
setSuppressReturn(suppressReturn: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextField.selection> property.
 */
getSelection(): textFieldSelectedParams,

/**
 * Gets the value of the <Titanium.UI.TextField.showUndoRedoActions> property.
 */
getShowUndoRedoActions(): boolean,

/**
 * Sets the value of the <Titanium.UI.TextField.showUndoRedoActions> property.
 */
setShowUndoRedoActions(showUndoRedoActions: boolean): void,

/**
 * Gets the value of the <Titanium.UI.TextField.textAlign> property.
 */
getTextAlign(): string | number,

/**
 * Sets the value of the <Titanium.UI.TextField.textAlign> property.
 */
setTextAlign(textAlign: string): void,

/**
 * Sets the value of the <Titanium.UI.TextField.textAlign> property.
 */
setTextAlign(textAlign: number): void,

/**
 * Gets the value of the <Titanium.UI.TextField.value> property.
 */
getValue(): string,

/**
 * Sets the value of the <Titanium.UI.TextField.value> property.
 */
setValue(value: string): void,

/**
 * Gets the value of the <Titanium.UI.TextField.verticalAlign> property.
 */
getVerticalAlign(): number | string,

/**
 * Sets the value of the <Titanium.UI.TextField.verticalAlign> property.
 */
setVerticalAlign(verticalAlign: number): void,

/**
 * Sets the value of the <Titanium.UI.TextField.verticalAlign> property.
 */
setVerticalAlign(verticalAlign: string): void,

/**
 * Gets the value of the <Titanium.UI.TextField.maxLength> property.
 */
getMaxLength(): number,

/**
 * Sets the value of the <Titanium.UI.TextField.maxLength> property.
 */
setMaxLength(maxLength: number): void
} & Titanium$UI$View



/**
 * A toolbar, which can contain buttons and certain other controls.
 */
declare type Titanium$UI$Toolbar = {

/**
 * Background color for the toolbar, as a color name or hex triplet.
 */
barColor: string,

/**
 * An array of buttons (or other widgets) contained in the toolbar.
 */
items: Titanium$UI$View[],

/**
 * If `true`, the background of the toolbar extends upwards.
 */
extendBackground: boolean,

/**
 * If `true`, a translucent background color is used for the toolbar.
 */
translucent: boolean,

/**
 * Returns the margin after the toolbar's content when there are action buttons.
 */
contentInsetEndWithActions: number,

/**
 * Returns the margin at the toolbar's content start when there is a navigation button.
 */
contentInsetStartWithNavigation: number,

/**
 * Image to be used as a logo in the Toolbar.
 */
logo: string | Titanium$Blob | Titanium$Filesystem$File,

/**
 * Image to be used for a navigation icon.
 */
navigationIcon: string | Titanium$Blob | Titanium$Filesystem$File,

/**
 * Image to be used for the overflow menu.
 */
overflowIcon: string | Titanium$Blob | Titanium$Filesystem$File,

/**
 * Text of the subtitle.
 */
subtitle: string,

/**
 * Color for toolbar's subtitle
 */
subtitleTextColor: string,

/**
 * Text of the title.
 */
title: string,

/**
 * Color string with any Titanium supported format
 */
titleTextColor: string,

/**
 * Collapses expanded ActionViews if there is any
 */
collapseActionViews(): void,

/**
 * Collapses expandend ActionViews and hides overflow menu
 */
dismissPopupMenus(): void,

/**
 * Returns the margin at the toolbar's content end.
 */
getContentInsetEnd(): number,

/**
 * Returns the margin on the left of the toolbar's content.
 */
getContentInsetLeft(): number,

/**
 * Returns the margin on the right of the toolbar's content.
 */
getContentInsetRight(): number,

/**
 * Returns the margin at the toolbar's content start.
 */
getContentInsetStart(): number,

/**
 * Returns the margin at the toolbar's content end that will be used with the current configuration of the toolbar.
 */
getCurrentContentInsetEnd(): number,

/**
 * Returns the margin on the left of the toolbar's content that will be used with the current configuration of the toolbar.
 */
getCurrentContentInsetLeft(): number,

/**
 * Returns the margin on the right of the toolbar's content that will be used with the current configuration of the toolbar.
 */
getCurrentContentInsetRight(): number,

/**
 * Returns the margin at the toolbar's content start that will be used with the current configuration of the toolbar.
 */
getCurrentContentInsetStart(): number,

/**
 * Checks if the toolbar is currently hosting an expanded action view.
 */
hasExpandedActionView(): boolean,

/**
 * Hides the overflow menu if there is one.
 */
hideOverflowMenu(): void,

/**
 * Checks if the toolbar is currently hosting an expanded action view.
 */
isOverflowMenuShowing(): boolean,

/**
 * Sets the content margins of the toolbar
 */
setContentInsetsAbsolute(insetLeft: number, insetRight: number): void,

/**
 * Sets the content margins relative to the layout direction
 */
setContentInsetsRelative(insetStart: number, insetEnd: number): void,

/**
 * Shows the overflow menu if there is one
 */
showOverflowMenu(): void,

/**
 * Gets the value of the <Titanium.UI.Toolbar.barColor> property.
 */
getBarColor(): string,

/**
 * Sets the value of the <Titanium.UI.Toolbar.barColor> property.
 */
setBarColor(barColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Toolbar.items> property.
 */
getItems(): Titanium$UI$View[],

/**
 * Sets the value of the <Titanium.UI.Toolbar.items> property.
 */
setItems(items: any[]): void,

/**
 * Gets the value of the <Titanium.UI.Toolbar.translucent> property.
 */
getTranslucent(): boolean,

/**
 * Sets the value of the <Titanium.UI.Toolbar.translucent> property.
 */
setTranslucent(translucent: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Toolbar.contentInsetEndWithActions> property.
 */
getContentInsetEndWithActions(): number,

/**
 * Sets the value of the <Titanium.UI.Toolbar.contentInsetEndWithActions> property.
 */
setContentInsetEndWithActions(contentInsetEndWithActions: number): void,

/**
 * Gets the value of the <Titanium.UI.Toolbar.contentInsetStartWithNavigation> property.
 */
getContentInsetStartWithNavigation(): number,

/**
 * Sets the value of the <Titanium.UI.Toolbar.contentInsetStartWithNavigation> property.
 */
setContentInsetStartWithNavigation(contentInsetStartWithNavigation: number): void,

/**
 * Gets the value of the <Titanium.UI.Toolbar.logo> property.
 */
getLogo(): string | Titanium$Blob | Titanium$Filesystem$File,

/**
 * Sets the value of the <Titanium.UI.Toolbar.logo> property.
 */
setLogo(logo: string): void,

/**
 * Sets the value of the <Titanium.UI.Toolbar.logo> property.
 */
setLogo(logo: Titanium$Blob): void,

/**
 * Sets the value of the <Titanium.UI.Toolbar.logo> property.
 */
setLogo(logo: Titanium$Filesystem$File): void,

/**
 * Gets the value of the <Titanium.UI.Toolbar.navigationIcon> property.
 */
getNavigationIcon(): string | Titanium$Blob | Titanium$Filesystem$File,

/**
 * Sets the value of the <Titanium.UI.Toolbar.navigationIcon> property.
 */
setNavigationIcon(navigationIcon: string): void,

/**
 * Sets the value of the <Titanium.UI.Toolbar.navigationIcon> property.
 */
setNavigationIcon(navigationIcon: Titanium$Blob): void,

/**
 * Sets the value of the <Titanium.UI.Toolbar.navigationIcon> property.
 */
setNavigationIcon(navigationIcon: Titanium$Filesystem$File): void,

/**
 * Gets the value of the <Titanium.UI.Toolbar.overflowIcon> property.
 */
getOverflowIcon(): string | Titanium$Blob | Titanium$Filesystem$File,

/**
 * Sets the value of the <Titanium.UI.Toolbar.overflowIcon> property.
 */
setOverflowIcon(overflowIcon: string): void,

/**
 * Sets the value of the <Titanium.UI.Toolbar.overflowIcon> property.
 */
setOverflowIcon(overflowIcon: Titanium$Blob): void,

/**
 * Sets the value of the <Titanium.UI.Toolbar.overflowIcon> property.
 */
setOverflowIcon(overflowIcon: Titanium$Filesystem$File): void,

/**
 * Gets the value of the <Titanium.UI.Toolbar.subtitle> property.
 */
getSubtitle(): string,

/**
 * Sets the value of the <Titanium.UI.Toolbar.subtitle> property.
 */
setSubtitle(subtitle: string): void,

/**
 * Gets the value of the <Titanium.UI.Toolbar.subtitleTextColor> property.
 */
getSubtitleTextColor(): string,

/**
 * Sets the value of the <Titanium.UI.Toolbar.subtitleTextColor> property.
 */
setSubtitleTextColor(subtitleTextColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Toolbar.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.UI.Toolbar.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.UI.Toolbar.titleTextColor> property.
 */
getTitleTextColor(): string,

/**
 * Sets the value of the <Titanium.UI.Toolbar.titleTextColor> property.
 */
setTitleTextColor(titleTextColor: string): void
} & Titanium$UI$View



/**
 * The web view allows you to open an HTML5 based view which can load either local or remote content.
 */
declare type Titanium$UI$WebView = {

/**
 * A Boolean value that determines whether pressing on a link displays a preview of the
 * destination for the link.
 */
allowsLinkPreview: boolean,

/**
 * An array of url strings to blacklist.
 */
blacklistedURLs: string[],

/**
 * Web content to load.
 */
data: Titanium$Blob | Titanium$Filesystem$File,

/**
 * Determines whether the view will bounce when scrolling to the edge of the scrollable region.
 */
disableBounce: boolean,

/**
 * Determines whether or not the webview should not be able to display the context menu.
 */
disableContextMenu: boolean,

/**
 * Enable adding javascript interfaces internally to webview prior to JELLY_BEAN_MR1 (Android 4.2)
 */
enableJavascriptInterface: boolean,

/**
 * Lets the webview handle platform supported urls
 */
handlePlatformUrl: boolean,

/**
 * The configuration for the new web view.
 */
configuration: Titanium$UI$iOS$WebViewConfiguration,

/**
 * List of allowed URL schemes for the web view.
 */
allowedURLSchemes: string[],

/**
 * Hides activity indicator when loading remote URL.
 */
hideLoadIndicator: boolean,

/**
 * HTML content of this web view.
 */
html: string,

/**
 * A Boolean value indicating whether web content can programmatically display the keyboard.
 */
keyboardDisplayRequiresUserAction: boolean,

/**
 * Controls whether to ignore invalid SSL certificates or not.
 */
ignoreSslError: boolean,

/**
 * Indicates if the webview is loading content.
 */
loading: boolean,

/**
 * Callback function called when there is a request for the application to create a new window
 * to host new content.
 */
onCreateWindow: (param0: any) => any,

/**
 * Fired before navigating to a link.
 */
onlink: (param0: OnLinkURLResponse) => any,

/**
 * Determines the behavior when the user overscrolls the view.
 */
overScrollMode: number,

/**
 * Determines how a cache is used in this web view.
 */
cacheMode: number,

/**
 * Determines how to treat content that requires plugins in this web view.
 */
pluginState: number,

/**
 * Controls whether the scroll-to-top gesture is effective.
 */
scrollsToTop: boolean,

/**
 * If `true`, zoom controls are enabled.
 */
enableZoomControls: boolean,

/**
 * If `true`, allows the loading of insecure resources from a secure origin.
 */
mixedContentMode: boolean,

/**
 * If `true`, scale contents to fit the web view.
 */
scalesPageToFit: boolean,

/**
 * URL to the web document.
 */
url: string,

/**
 * The User-Agent header used by the web view when requesting content.
 */
userAgent: string,

/**
 * Explicitly specifies if this web view handles touches.
 */
willHandleTouches: boolean,

/**
 * Enables using light touches to make a selection and activate mouseovers.
 */
lightTouchEnabled: boolean,

/**
 * Sets extra request headers for this web view to use on subsequent URL requests.
 */
requestHeaders: any,

/**
 * Manage the zoom-level of the current page.
 */
zoomLevel: number,

/**
 * A Boolean value indicating whether horizontal swipe gestures will trigger back-forward list navigations.
 */
allowsBackForwardNavigationGestures: boolean,

/**
 * Returns page title of webpage.
 */
+title: string,

/**
 * An estimate of what fraction of the current navigation has been loaded.
 */
+progress: number,

/**
 * The cache policy for the request.
 */
cachePolicy: number,

/**
 * The timeout interval for the request, in seconds.
 */
timeout: number,

/**
 * The level of granularity with which the user can interactively select content in the web view.
 */
+selectionGranularity: number,

/**
 * A Boolean value indicating whether all resources on the page have been loaded through
 * securely encrypted connections.
 */
+secure: boolean,

/**
 * Sets the value of [html](Titanium.UI.WebView.html) property.
 */
setHtml(html: any, options?: any): void,

/**
 * Returns `true` if the web view can go back in its history list.
 */
canGoBack(): boolean,

/**
 * Returns `true` if the web view can go forward in its history list.
 */
canGoForward(): boolean,

/**
 * Evaluates a JavaScript expression inside the context of the web view and
 * optionally, returns a result. If a callback function is passed in as second argument,
 * the evaluation will take place asynchronously and the the callback function will be called with the result.
 */
evalJS(code: string, callback?: (param0: string) => any): string,

/**
 * Goes back one entry in the web view's history list, to the previous page.
 */
goBack(): void,

/**
 * Goes forward one entry in this web view's history list, if possible.
 */
goForward(): void,

/**
 * Pauses native webview plugins.
 */
pause(): void,

/**
 * Reloads the current webpage.
 */
reload(): void,

/**
 * Forces the web view to repaint its contents.
 */
repaint(): void,

/**
 * Releases memory when the web view is no longer needed.
 */
release(): void,

/**
 * Resume native webview plugins.
 */
resume(): void,

/**
 * Sets the basic authentication for this web view to use on subsequent URL requests.
 */
setBasicAuthentication(username: string, password: string, persistence: number): void,

/**
 * Stops loading a currently loading page.
 */
stopLoading(): void,

/**
 * Add native properties for observing for change.
 */
startListeningToProperties(propertyList: $ReadOnlyArray<string>): void,

/**
 * Remove native properties from observing.
 */
stopListeningToProperties(propertyList: $ReadOnlyArray<string>): void,

/**
 * Takes a snapshot of the view's visible viewport.
 */
takeSnapshot(callback: (param0: SnapshotResult) => any): void,

/**
 * Adds a user script.
 */
addUserScript(source: string, injectionTime: number, mainFrameOnly: boolean): void,

/**
 * Removes all associated user scripts.
 */
removeAllUserScripts(): void,

/**
 * Adds a script message handler.
 */
addScriptMessageHandler(handlerName: string): void,

/**
 * Removes a script message handler.
 */
removeScriptMessageHandler(name: string): void,

/**
 * An object which maintains a list of visited pages used to go back and forward to the most recent page.
 */
backForwardList(): BackForwardList,

/**
 * Gets the value of the <Titanium.UI.WebView.allowsLinkPreview> property.
 */
getAllowsLinkPreview(): boolean,

/**
 * Sets the value of the <Titanium.UI.WebView.allowsLinkPreview> property.
 */
setAllowsLinkPreview(allowsLinkPreview: boolean): void,

/**
 * Gets the value of the <Titanium.UI.WebView.blacklistedURLs> property.
 */
getBlacklistedURLs(): string[],

/**
 * Sets the value of the <Titanium.UI.WebView.blacklistedURLs> property.
 */
setBlacklistedURLs(blacklistedURLs: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.UI.WebView.data> property.
 */
getData(): Titanium$Blob | Titanium$Filesystem$File,

/**
 * Sets the value of the <Titanium.UI.WebView.data> property.
 */
setData(data: Titanium$Blob): void,

/**
 * Sets the value of the <Titanium.UI.WebView.data> property.
 */
setData(data: Titanium$Filesystem$File): void,

/**
 * Gets the value of the <Titanium.UI.WebView.disableBounce> property.
 */
getDisableBounce(): boolean,

/**
 * Sets the value of the <Titanium.UI.WebView.disableBounce> property.
 */
setDisableBounce(disableBounce: boolean): void,

/**
 * Gets the value of the <Titanium.UI.WebView.disableContextMenu> property.
 */
getDisableContextMenu(): boolean,

/**
 * Sets the value of the <Titanium.UI.WebView.disableContextMenu> property.
 */
setDisableContextMenu(disableContextMenu: boolean): void,

/**
 * Gets the value of the <Titanium.UI.WebView.enableJavascriptInterface> property.
 */
getEnableJavascriptInterface(): boolean,

/**
 * Sets the value of the <Titanium.UI.WebView.enableJavascriptInterface> property.
 */
setEnableJavascriptInterface(enableJavascriptInterface: boolean): void,

/**
 * Gets the value of the <Titanium.UI.WebView.handlePlatformUrl> property.
 */
getHandlePlatformUrl(): boolean,

/**
 * Sets the value of the <Titanium.UI.WebView.handlePlatformUrl> property.
 */
setHandlePlatformUrl(handlePlatformUrl: boolean): void,

/**
 * Gets the value of the <Titanium.UI.WebView.configuration> property.
 */
getConfiguration(): Titanium$UI$iOS$WebViewConfiguration,

/**
 * Sets the value of the <Titanium.UI.WebView.configuration> property.
 */
setConfiguration(configuration: Titanium$UI$iOS$WebViewConfiguration): void,

/**
 * Gets the value of the <Titanium.UI.WebView.allowedURLSchemes> property.
 */
getAllowedURLSchemes(): string[],

/**
 * Sets the value of the <Titanium.UI.WebView.allowedURLSchemes> property.
 */
setAllowedURLSchemes(allowedURLSchemes: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.UI.WebView.hideLoadIndicator> property.
 */
getHideLoadIndicator(): boolean,

/**
 * Sets the value of the <Titanium.UI.WebView.hideLoadIndicator> property.
 */
setHideLoadIndicator(hideLoadIndicator: boolean): void,

/**
 * Gets the value of the <Titanium.UI.WebView.html> property.
 */
getHtml(): string,

/**
 * Gets the value of the <Titanium.UI.WebView.keyboardDisplayRequiresUserAction> property.
 */
getKeyboardDisplayRequiresUserAction(): boolean,

/**
 * Sets the value of the <Titanium.UI.WebView.keyboardDisplayRequiresUserAction> property.
 */
setKeyboardDisplayRequiresUserAction(keyboardDisplayRequiresUserAction: boolean): void,

/**
 * Gets the value of the <Titanium.UI.WebView.ignoreSslError> property.
 */
getIgnoreSslError(): boolean,

/**
 * Sets the value of the <Titanium.UI.WebView.ignoreSslError> property.
 */
setIgnoreSslError(ignoreSslError: boolean): void,

/**
 * Gets the value of the <Titanium.UI.WebView.loading> property.
 */
getLoading(): boolean,

/**
 * Sets the value of the <Titanium.UI.WebView.loading> property.
 */
setLoading(loading: boolean): void,

/**
 * Gets the value of the <Titanium.UI.WebView.onCreateWindow> property.
 */
getOnCreateWindow(): (param0: any) => any,

/**
 * Sets the value of the <Titanium.UI.WebView.onCreateWindow> property.
 */
setOnCreateWindow(onCreateWindow: (param0: any) => any): void,

/**
 * Gets the value of the <Titanium.UI.WebView.onlink> property.
 */
getOnlink(): (param0: OnLinkURLResponse) => any,

/**
 * Sets the value of the <Titanium.UI.WebView.onlink> property.
 */
setOnlink(onlink: (param0: OnLinkURLResponse) => any): void,

/**
 * Gets the value of the <Titanium.UI.WebView.overScrollMode> property.
 */
getOverScrollMode(): number,

/**
 * Sets the value of the <Titanium.UI.WebView.overScrollMode> property.
 */
setOverScrollMode(overScrollMode: number): void,

/**
 * Gets the value of the <Titanium.UI.WebView.cacheMode> property.
 */
getCacheMode(): number,

/**
 * Sets the value of the <Titanium.UI.WebView.cacheMode> property.
 */
setCacheMode(cacheMode: number): void,

/**
 * Gets the value of the <Titanium.UI.WebView.pluginState> property.
 */
getPluginState(): number,

/**
 * Sets the value of the <Titanium.UI.WebView.pluginState> property.
 */
setPluginState(pluginState: number): void,

/**
 * Gets the value of the <Titanium.UI.WebView.scrollsToTop> property.
 */
getScrollsToTop(): boolean,

/**
 * Sets the value of the <Titanium.UI.WebView.scrollsToTop> property.
 */
setScrollsToTop(scrollsToTop: boolean): void,

/**
 * Gets the value of the <Titanium.UI.WebView.enableZoomControls> property.
 */
getEnableZoomControls(): boolean,

/**
 * Sets the value of the <Titanium.UI.WebView.enableZoomControls> property.
 */
setEnableZoomControls(enableZoomControls: boolean): void,

/**
 * Gets the value of the <Titanium.UI.WebView.mixedContentMode> property.
 */
getMixedContentMode(): boolean,

/**
 * Sets the value of the <Titanium.UI.WebView.mixedContentMode> property.
 */
setMixedContentMode(mixedContentMode: boolean): void,

/**
 * Gets the value of the <Titanium.UI.WebView.scalesPageToFit> property.
 */
getScalesPageToFit(): boolean,

/**
 * Sets the value of the <Titanium.UI.WebView.scalesPageToFit> property.
 */
setScalesPageToFit(scalesPageToFit: boolean): void,

/**
 * Gets the value of the <Titanium.UI.WebView.url> property.
 */
getUrl(): string,

/**
 * Sets the value of the <Titanium.UI.WebView.url> property.
 */
setUrl(url: string): void,

/**
 * Gets the value of the <Titanium.UI.WebView.userAgent> property.
 */
getUserAgent(): string,

/**
 * Sets the value of the <Titanium.UI.WebView.userAgent> property.
 */
setUserAgent(userAgent: string): void,

/**
 * Gets the value of the <Titanium.UI.WebView.willHandleTouches> property.
 */
getWillHandleTouches(): boolean,

/**
 * Sets the value of the <Titanium.UI.WebView.willHandleTouches> property.
 */
setWillHandleTouches(willHandleTouches: boolean): void,

/**
 * Gets the value of the <Titanium.UI.WebView.lightTouchEnabled> property.
 */
getLightTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.WebView.lightTouchEnabled> property.
 */
setLightTouchEnabled(lightTouchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.WebView.requestHeaders> property.
 */
getRequestHeaders(): any,

/**
 * Sets the value of the <Titanium.UI.WebView.requestHeaders> property.
 */
setRequestHeaders(requestHeaders: any): void,

/**
 * Gets the value of the <Titanium.UI.WebView.zoomLevel> property.
 */
getZoomLevel(): number,

/**
 * Sets the value of the <Titanium.UI.WebView.zoomLevel> property.
 */
setZoomLevel(zoomLevel: number): void,

/**
 * Gets the value of the <Titanium.UI.WebView.allowsBackForwardNavigationGestures> property.
 */
getAllowsBackForwardNavigationGestures(): boolean,

/**
 * Sets the value of the <Titanium.UI.WebView.allowsBackForwardNavigationGestures> property.
 */
setAllowsBackForwardNavigationGestures(allowsBackForwardNavigationGestures: boolean): void,

/**
 * Gets the value of the <Titanium.UI.WebView.title> property.
 */
getTitle(): string,

/**
 * Gets the value of the <Titanium.UI.WebView.progress> property.
 */
getProgress(): number,

/**
 * Gets the value of the <Titanium.UI.WebView.cachePolicy> property.
 */
getCachePolicy(): number,

/**
 * Sets the value of the <Titanium.UI.WebView.cachePolicy> property.
 */
setCachePolicy(cachePolicy: number): void,

/**
 * Gets the value of the <Titanium.UI.WebView.timeout> property.
 */
getTimeout(): number,

/**
 * Sets the value of the <Titanium.UI.WebView.timeout> property.
 */
setTimeout(timeout: number): void,

/**
 * Gets the value of the <Titanium.UI.WebView.selectionGranularity> property.
 */
getSelectionGranularity(): number,

/**
 * Gets the value of the <Titanium.UI.WebView.secure> property.
 */
getSecure(): boolean
} & Titanium$UI$View



/**
 * The Window is an empty drawing surface or container.
 */
declare type Titanium$UI$Window = {

/**
 * For lightweight windows, this property returns undefined.
 * For heavyweight windows, this property contains a reference to the
 * Android Activity object associated with this window.
 */
+activity: Titanium$Android$Activity,

/**
 * Title for the back button. This is only valid when the window is a child of a tab.
 */
backButtonTitle: string,

/**
 * The image to show as the back button. This is only valid when the window is a child of a tab.
 */
backButtonTitleImage: string | Titanium$Blob,

/**
 * Background color for the nav bar, as a color name or hex triplet.
 */
barColor: string,

/**
 * Background image for the nav bar, specified as a URL to a local image.
 */
barImage: string,

/**
 * Boolean value indicating if the application should exit when the Android
 * Back button is pressed while the window is being shown or when the window
 * is closed programmatically.
 */
exitOnClose: boolean,

/**
 * An array of supported values specified using the EXTEND_EDGE constants in <Titanium.UI>.
 */
extendEdges: number[],

/**
 * Treat the content of the window as secure, preventing it from appearing in screenshots or from being viewed on non-secure displays.
 */
flagSecure: boolean,

/**
 * Specifies if the edges should extend beyond opaque bars (navigation bar, tab bar, toolbar).
 */
includeOpaqueBars: boolean,

/**
 * Specifies whether or not the view controller should automatically adjust its scroll view insets.
 */
autoAdjustScrollViewInsets: boolean,

/**
 * Specifies whether the screen insets/notches are allowed to overlap the window's content or not.
 */
extendSafeArea: boolean,

/**
 * Boolean value indicating if the window is fullscreen.
 */
fullscreen: boolean,

/**
 * Boolean value indicating whether the system is allowed to hide the visual indicator for returning to the Home screen.
 */
homeIndicatorAutoHidden: boolean,

/**
 * Set this to true to hide the shadow image of the navigation bar.
 */
hideShadow: boolean,

/**
 * Set this to true to hide the navigation bar on swipe.
 */
hidesBarsOnSwipe: boolean,

/**
 * Set this to true to hide the navigation bar on tap.
 */
hidesBarsOnTap: boolean,

/**
 * Set this to true to hide the navigation bar when the keyboard appears.
 */
hidesBarsWhenKeyboardAppears: boolean,

/**
 * Set this to true to hide the back button of navigation bar.
 */
hidesBackButton: boolean,

/**
 * A Boolean value indicating whether the title should be displayed in a large format.
 */
largeTitleEnabled: string,

/**
 * The mode to use when displaying the title of the navigation bar.
 */
largeTitleDisplayMode: number,

/**
 * View to show in the left nav bar area.
 */
leftNavButton: Titanium$UI$View,

/**
 * An Array of views to show in the left nav bar area.
 */
leftNavButtons: Titanium$UI$View[],

/**
 * Indicates to open a modal window or not.
 */
modal: boolean,

/**
 * Hides the navigation bar (`true`) or shows the navigation bar (`false`).
 */
navBarHidden: boolean,

/**
 * The tintColor to apply to the navigation bar.
 */
navTintColor: string,

/**
 * The <Titanium.UI.NavigationWindow> instance hosting this window.
 */
+navigationWindow: Titanium$UI$NavigationWindow,

/**
 * Callback function that overrides the default behavior when the user presses the **Back**
 * button.
 */
onBack: (param0: any) => any,

/**
 * Array of supported orientation modes, specified using the orientation
 * constants defined in <Titanium.UI>.
 */
orientationModes: number[],

/**
 * Current orientation of the window.
 */
+orientation: number,

/**
 * View to show in the right nav bar area.
 */
rightNavButton: Titanium$UI$View,

/**
 * An Array of views to show in the right nav bar area.
 */
rightNavButtons: Titanium$UI$View[],

/**
 * The padding needed to safely display content without it being overlapped by the screen insets and notches.
 */
+safeAreaPadding: Dimension,

/**
 * Shadow image for the navigation bar, specified as a URL to a local image..
 */
shadowImage: string,

/**
 * Boolean value to enable split action bar.
 */
splitActionBar: boolean,

/**
 * The status bar style associated with this window.
 */
statusBarStyle: number,

/**
 * Maintain a sustainable level of performance.
 */
sustainedPerformanceMode: boolean,

/**
 * Boolean value indicating if the user should be able to close a window using a swipe gesture.
 */
swipeToClose: boolean,

/**
 * Boolean value indicating if the tab bar should be hidden.
 */
tabBarHidden: boolean,

/**
 * Name of the theme to apply to the window.
 */
theme: string,

/**
 * Title of the window.
 */
title: string,

/**
 * Title text attributes of the window.
 */
titleAttributes: titleAttributesParams,

/**
 * View to show in the title area of the nav bar.
 */
titleControl: Titanium$UI$View,

/**
 * Image to show in the title area of the nav bar, specified as a local file path or URL.
 */
titleImage: string,

/**
 * Title prompt for the window.
 */
titlePrompt: string,

/**
 * Key identifying a string from the locale file to use for the window title.
 */
titleid: string,

/**
 * Key identifying a string from the locale file to use for the window title prompt.
 */
titlepromptid: string,

/**
 * Array of button objects to show in the window's toolbar.
 */
toolbar: any[],

/**
 * Use a transition animation when opening or closing windows in a
 * <Titanium.UI.NavigationWindow> or <Titanium.UI.Tab>.
 */
transitionAnimation: Titanium$Proxy,

/**
 * Boolean value indicating if the nav bar is translucent.
 */
translucent: boolean,

/**
 * Loads a JavaScript file from a local URL.
 */
url: string,

/**
 * Additional flags to set on the Activity Window.
 */
windowFlags: number,

/**
 * Determines whether a heavyweight window's soft input area (ie software keyboard) is visible
 * as it receives focus and how the window behaves in order to accomodate it while keeping its
 * contents in view.
 */
windowSoftInputMode: number,

/**
 * Set the pixel format for the Activity's Window.
 */
windowPixelFormat: number,

/**
 * The type of transition used when activity is exiting.
 */
activityExitTransition: number,

/**
 * The type of transition used when activity is entering.
 */
activityEnterTransition: number,

/**
 * The type of transition used when returning from a previously started activity.
 */
activityReturnTransition: number,

/**
 * The type of transition used when reentering to a previously started activity.
 */
activityReenterTransition: number,

/**
 * The type of exit transition used when animating shared elements between two activities.
 */
activitySharedElementExitTransition: number,

/**
 * The type of enter transition used when animating shared elements between two activities.
 */
activitySharedElementEnterTransition: number,

/**
 * The type of return transition used when animating shared elements between two activities.
 */
activitySharedElementReturnTransition: number,

/**
 * The type of reenter transition used when animating shared elements between two activities.
 */
activitySharedElementReenterTransition: number,

/**
 * Adds a common UI element to participate in window transition animation.
 */
addSharedElement(view: any, transitionName: string): void,

/**
 * Closes the window.
 */
close(params?: any): void,

/**
 * Hides the navigation bar.
 */
hideNavBar(options?: any): void,

/**
 * Hides the tab bar. Must be called before opening the window.
 */
hideTabBar(): void,

/**
 * Opens the window.
 */
open(params?: openWindowParams): void,

/**
 * Clears all added shared elements.
 */
removeAllSharedElements(): void,

/**
 * Sets the array of items to show in the window's toolbar.
 */
setToolbar(items: $ReadOnlyArray<any>, params?: windowToolbarParam): void,

/**
 * Makes the navigation bar visible.
 */
showNavBar(options?: any): void,

/**
 * Makes the bottom toolbar visible.
 */
showToolbar(options?: any): void,

/**
 * Makes the bottom toolbar invisible.
 */
hideToolbar(options?: any): void,

/**
 * Gets the value of the <Titanium.UI.Window.activity> property.
 */
getActivity(): Titanium$Android$Activity,

/**
 * Gets the value of the <Titanium.UI.Window.backButtonTitle> property.
 */
getBackButtonTitle(): string,

/**
 * Sets the value of the <Titanium.UI.Window.backButtonTitle> property.
 */
setBackButtonTitle(backButtonTitle: string): void,

/**
 * Gets the value of the <Titanium.UI.Window.backButtonTitleImage> property.
 */
getBackButtonTitleImage(): string | Titanium$Blob,

/**
 * Sets the value of the <Titanium.UI.Window.backButtonTitleImage> property.
 */
setBackButtonTitleImage(backButtonTitleImage: string): void,

/**
 * Sets the value of the <Titanium.UI.Window.backButtonTitleImage> property.
 */
setBackButtonTitleImage(backButtonTitleImage: Titanium$Blob): void,

/**
 * Gets the value of the <Titanium.UI.Window.barColor> property.
 */
getBarColor(): string,

/**
 * Sets the value of the <Titanium.UI.Window.barColor> property.
 */
setBarColor(barColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Window.barImage> property.
 */
getBarImage(): string,

/**
 * Sets the value of the <Titanium.UI.Window.barImage> property.
 */
setBarImage(barImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Window.exitOnClose> property.
 */
getExitOnClose(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.exitOnClose> property.
 */
setExitOnClose(exitOnClose: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.extendEdges> property.
 */
getExtendEdges(): number[],

/**
 * Sets the value of the <Titanium.UI.Window.extendEdges> property.
 */
setExtendEdges(extendEdges: $ReadOnlyArray<number>): void,

/**
 * Gets the value of the <Titanium.UI.Window.flagSecure> property.
 */
getFlagSecure(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.flagSecure> property.
 */
setFlagSecure(flagSecure: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.includeOpaqueBars> property.
 */
getIncludeOpaqueBars(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.includeOpaqueBars> property.
 */
setIncludeOpaqueBars(includeOpaqueBars: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.autoAdjustScrollViewInsets> property.
 */
getAutoAdjustScrollViewInsets(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.autoAdjustScrollViewInsets> property.
 */
setAutoAdjustScrollViewInsets(autoAdjustScrollViewInsets: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.extendSafeArea> property.
 */
getExtendSafeArea(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.extendSafeArea> property.
 */
setExtendSafeArea(extendSafeArea: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.fullscreen> property.
 */
getFullscreen(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.fullscreen> property.
 */
setFullscreen(fullscreen: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.homeIndicatorAutoHidden> property.
 */
getHomeIndicatorAutoHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.homeIndicatorAutoHidden> property.
 */
setHomeIndicatorAutoHidden(homeIndicatorAutoHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.hideShadow> property.
 */
getHideShadow(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.hideShadow> property.
 */
setHideShadow(hideShadow: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.hidesBarsOnSwipe> property.
 */
getHidesBarsOnSwipe(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.hidesBarsOnSwipe> property.
 */
setHidesBarsOnSwipe(hidesBarsOnSwipe: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.hidesBarsOnTap> property.
 */
getHidesBarsOnTap(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.hidesBarsOnTap> property.
 */
setHidesBarsOnTap(hidesBarsOnTap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.hidesBarsWhenKeyboardAppears> property.
 */
getHidesBarsWhenKeyboardAppears(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.hidesBarsWhenKeyboardAppears> property.
 */
setHidesBarsWhenKeyboardAppears(hidesBarsWhenKeyboardAppears: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.hidesBackButton> property.
 */
getHidesBackButton(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.hidesBackButton> property.
 */
setHidesBackButton(hidesBackButton: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.largeTitleEnabled> property.
 */
getLargeTitleEnabled(): string,

/**
 * Sets the value of the <Titanium.UI.Window.largeTitleEnabled> property.
 */
setLargeTitleEnabled(largeTitleEnabled: string): void,

/**
 * Gets the value of the <Titanium.UI.Window.largeTitleDisplayMode> property.
 */
getLargeTitleDisplayMode(): number,

/**
 * Sets the value of the <Titanium.UI.Window.largeTitleDisplayMode> property.
 */
setLargeTitleDisplayMode(largeTitleDisplayMode: number): void,

/**
 * Gets the value of the <Titanium.UI.Window.leftNavButton> property.
 */
getLeftNavButton(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.Window.leftNavButton> property.
 */
setLeftNavButton(leftNavButton: any): void,

/**
 * Gets the value of the <Titanium.UI.Window.leftNavButtons> property.
 */
getLeftNavButtons(): Titanium$UI$View[],

/**
 * Sets the value of the <Titanium.UI.Window.leftNavButtons> property.
 */
setLeftNavButtons(leftNavButtons: any[]): void,

/**
 * Gets the value of the <Titanium.UI.Window.modal> property.
 */
getModal(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.modal> property.
 */
setModal(modal: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.navBarHidden> property.
 */
getNavBarHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.navBarHidden> property.
 */
setNavBarHidden(navBarHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.navTintColor> property.
 */
getNavTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.Window.navTintColor> property.
 */
setNavTintColor(navTintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Window.navigationWindow> property.
 */
getNavigationWindow(): Titanium$UI$NavigationWindow,

/**
 * Gets the value of the <Titanium.UI.Window.onBack> property.
 */
getOnBack(): (param0: any) => any,

/**
 * Sets the value of the <Titanium.UI.Window.onBack> property.
 */
setOnBack(onBack: (param0: any) => any): void,

/**
 * Gets the value of the <Titanium.UI.Window.orientationModes> property.
 */
getOrientationModes(): number[],

/**
 * Sets the value of the <Titanium.UI.Window.orientationModes> property.
 */
setOrientationModes(orientationModes: $ReadOnlyArray<number>): void,

/**
 * Gets the value of the <Titanium.UI.Window.orientation> property.
 */
getOrientation(): number,

/**
 * Gets the value of the <Titanium.UI.Window.rightNavButton> property.
 */
getRightNavButton(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.Window.rightNavButton> property.
 */
setRightNavButton(rightNavButton: any): void,

/**
 * Gets the value of the <Titanium.UI.Window.rightNavButtons> property.
 */
getRightNavButtons(): Titanium$UI$View[],

/**
 * Sets the value of the <Titanium.UI.Window.rightNavButtons> property.
 */
setRightNavButtons(rightNavButtons: any[]): void,

/**
 * Gets the value of the <Titanium.UI.Window.safeAreaPadding> property.
 */
getSafeAreaPadding(): Dimension,

/**
 * Gets the value of the <Titanium.UI.Window.shadowImage> property.
 */
getShadowImage(): string,

/**
 * Sets the value of the <Titanium.UI.Window.shadowImage> property.
 */
setShadowImage(shadowImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Window.splitActionBar> property.
 */
getSplitActionBar(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.splitActionBar> property.
 */
setSplitActionBar(splitActionBar: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.statusBarStyle> property.
 */
getStatusBarStyle(): number,

/**
 * Sets the value of the <Titanium.UI.Window.statusBarStyle> property.
 */
setStatusBarStyle(statusBarStyle: number): void,

/**
 * Gets the value of the <Titanium.UI.Window.sustainedPerformanceMode> property.
 */
getSustainedPerformanceMode(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.sustainedPerformanceMode> property.
 */
setSustainedPerformanceMode(sustainedPerformanceMode: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.swipeToClose> property.
 */
getSwipeToClose(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.swipeToClose> property.
 */
setSwipeToClose(swipeToClose: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.tabBarHidden> property.
 */
getTabBarHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.tabBarHidden> property.
 */
setTabBarHidden(tabBarHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.theme> property.
 */
getTheme(): string,

/**
 * Sets the value of the <Titanium.UI.Window.theme> property.
 */
setTheme(theme: string): void,

/**
 * Gets the value of the <Titanium.UI.Window.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.UI.Window.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.UI.Window.titleAttributes> property.
 */
getTitleAttributes(): titleAttributesParams,

/**
 * Sets the value of the <Titanium.UI.Window.titleAttributes> property.
 */
setTitleAttributes(titleAttributes: titleAttributesParams): void,

/**
 * Gets the value of the <Titanium.UI.Window.titleControl> property.
 */
getTitleControl(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.Window.titleControl> property.
 */
setTitleControl(titleControl: any): void,

/**
 * Gets the value of the <Titanium.UI.Window.titleImage> property.
 */
getTitleImage(): string,

/**
 * Sets the value of the <Titanium.UI.Window.titleImage> property.
 */
setTitleImage(titleImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Window.titlePrompt> property.
 */
getTitlePrompt(): string,

/**
 * Sets the value of the <Titanium.UI.Window.titlePrompt> property.
 */
setTitlePrompt(titlePrompt: string): void,

/**
 * Gets the value of the <Titanium.UI.Window.titleid> property.
 */
getTitleid(): string,

/**
 * Sets the value of the <Titanium.UI.Window.titleid> property.
 */
setTitleid(titleid: string): void,

/**
 * Gets the value of the <Titanium.UI.Window.titlepromptid> property.
 */
getTitlepromptid(): string,

/**
 * Sets the value of the <Titanium.UI.Window.titlepromptid> property.
 */
setTitlepromptid(titlepromptid: string): void,

/**
 * Gets the value of the <Titanium.UI.Window.toolbar> property.
 */
getToolbar(): any[],

/**
 * Gets the value of the <Titanium.UI.Window.transitionAnimation> property.
 */
getTransitionAnimation(): Titanium$Proxy,

/**
 * Sets the value of the <Titanium.UI.Window.transitionAnimation> property.
 */
setTransitionAnimation(transitionAnimation: Titanium$Proxy): void,

/**
 * Gets the value of the <Titanium.UI.Window.translucent> property.
 */
getTranslucent(): boolean,

/**
 * Sets the value of the <Titanium.UI.Window.translucent> property.
 */
setTranslucent(translucent: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Window.url> property.
 */
getUrl(): string,

/**
 * Sets the value of the <Titanium.UI.Window.url> property.
 */
setUrl(url: string): void,

/**
 * Gets the value of the <Titanium.UI.Window.windowFlags> property.
 */
getWindowFlags(): number,

/**
 * Sets the value of the <Titanium.UI.Window.windowFlags> property.
 */
setWindowFlags(windowFlags: number): void,

/**
 * Gets the value of the <Titanium.UI.Window.windowSoftInputMode> property.
 */
getWindowSoftInputMode(): number,

/**
 * Sets the value of the <Titanium.UI.Window.windowSoftInputMode> property.
 */
setWindowSoftInputMode(windowSoftInputMode: number): void,

/**
 * Gets the value of the <Titanium.UI.Window.windowPixelFormat> property.
 */
getWindowPixelFormat(): number,

/**
 * Sets the value of the <Titanium.UI.Window.windowPixelFormat> property.
 */
setWindowPixelFormat(windowPixelFormat: number): void,

/**
 * Gets the value of the <Titanium.UI.Window.activityExitTransition> property.
 */
getActivityExitTransition(): number,

/**
 * Sets the value of the <Titanium.UI.Window.activityExitTransition> property.
 */
setActivityExitTransition(activityExitTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.Window.activityEnterTransition> property.
 */
getActivityEnterTransition(): number,

/**
 * Sets the value of the <Titanium.UI.Window.activityEnterTransition> property.
 */
setActivityEnterTransition(activityEnterTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.Window.activityReturnTransition> property.
 */
getActivityReturnTransition(): number,

/**
 * Sets the value of the <Titanium.UI.Window.activityReturnTransition> property.
 */
setActivityReturnTransition(activityReturnTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.Window.activityReenterTransition> property.
 */
getActivityReenterTransition(): number,

/**
 * Sets the value of the <Titanium.UI.Window.activityReenterTransition> property.
 */
setActivityReenterTransition(activityReenterTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.Window.activitySharedElementExitTransition> property.
 */
getActivitySharedElementExitTransition(): number,

/**
 * Sets the value of the <Titanium.UI.Window.activitySharedElementExitTransition> property.
 */
setActivitySharedElementExitTransition(activitySharedElementExitTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.Window.activitySharedElementEnterTransition> property.
 */
getActivitySharedElementEnterTransition(): number,

/**
 * Sets the value of the <Titanium.UI.Window.activitySharedElementEnterTransition> property.
 */
setActivitySharedElementEnterTransition(activitySharedElementEnterTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.Window.activitySharedElementReturnTransition> property.
 */
getActivitySharedElementReturnTransition(): number,

/**
 * Sets the value of the <Titanium.UI.Window.activitySharedElementReturnTransition> property.
 */
setActivitySharedElementReturnTransition(activitySharedElementReturnTransition: number): void,

/**
 * Gets the value of the <Titanium.UI.Window.activitySharedElementReenterTransition> property.
 */
getActivitySharedElementReenterTransition(): number,

/**
 * Sets the value of the <Titanium.UI.Window.activitySharedElementReenterTransition> property.
 */
setActivitySharedElementReenterTransition(activitySharedElementReenterTransition: number): void
} & Titanium$UI$View



      declare var npm$namespace$Titanium$UI$ActivityIndicatorStyle: {
        addEventListener: typeof Titanium$UI$ActivityIndicatorStyle$addEventListener,
removeEventListener: typeof Titanium$UI$ActivityIndicatorStyle$removeEventListener,
fireEvent: typeof Titanium$UI$ActivityIndicatorStyle$fireEvent,
applyProperties: typeof Titanium$UI$ActivityIndicatorStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$ActivityIndicatorStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$ActivityIndicatorStyle$setBubbleParent,
getApiName: typeof Titanium$UI$ActivityIndicatorStyle$getApiName,
getLifecycleContainer: typeof Titanium$UI$ActivityIndicatorStyle$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$UI$ActivityIndicatorStyle$setLifecycleContainer,
        bubbleParent: typeof Titanium$UI$ActivityIndicatorStyle$bubbleParent,
apiName: typeof Titanium$UI$ActivityIndicatorStyle$apiName,
lifecycleContainer: typeof Titanium$UI$ActivityIndicatorStyle$lifecycleContainer,
BIG: typeof Titanium$UI$ActivityIndicatorStyle$BIG,
DARK: typeof Titanium$UI$ActivityIndicatorStyle$DARK,
BIG_DARK: typeof Titanium$UI$ActivityIndicatorStyle$BIG_DARK,
PLAIN: typeof Titanium$UI$ActivityIndicatorStyle$PLAIN,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$ActivityIndicatorStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$ActivityIndicatorStyle$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$UI$ActivityIndicatorStyle$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Large white spinning indicator.
 */
declare var Titanium$UI$ActivityIndicatorStyle$BIG: number;


/**
 * Small gray spinning indicator.
 */
declare var Titanium$UI$ActivityIndicatorStyle$DARK: number;


/**
 * Large gray spinning indicator.
 */
declare var Titanium$UI$ActivityIndicatorStyle$BIG_DARK: number;


/**
 * Small white spinning indicator (default).
 */
declare var Titanium$UI$ActivityIndicatorStyle$PLAIN: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$ActivityIndicatorStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$ActivityIndicatorStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$ActivityIndicatorStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$ActivityIndicatorStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.ActivityIndicatorStyle.bubbleParent> property.
 */
declare function Titanium$UI$ActivityIndicatorStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.ActivityIndicatorStyle.bubbleParent> property.
 */
declare function Titanium$UI$ActivityIndicatorStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.ActivityIndicatorStyle.apiName> property.
 */
declare function Titanium$UI$ActivityIndicatorStyle$getApiName(): string



/**
 * Gets the value of the <Titanium.UI.ActivityIndicatorStyle.lifecycleContainer> property.
 */
declare function Titanium$UI$ActivityIndicatorStyle$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.UI.ActivityIndicatorStyle.lifecycleContainer> property.
 */
declare function Titanium$UI$ActivityIndicatorStyle$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.UI.ActivityIndicatorStyle.lifecycleContainer> property.
 */
declare function Titanium$UI$ActivityIndicatorStyle$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



      declare var npm$namespace$Titanium$UI$Android: {
        addEventListener: typeof Titanium$UI$Android$addEventListener,
removeEventListener: typeof Titanium$UI$Android$removeEventListener,
fireEvent: typeof Titanium$UI$Android$fireEvent,
applyProperties: typeof Titanium$UI$Android$applyProperties,
hideSoftKeyboard: typeof Titanium$UI$Android$hideSoftKeyboard,
openPreferences: typeof Titanium$UI$Android$openPreferences,
getBubbleParent: typeof Titanium$UI$Android$getBubbleParent,
setBubbleParent: typeof Titanium$UI$Android$setBubbleParent,
getApiName: typeof Titanium$UI$Android$getApiName,
getLifecycleContainer: typeof Titanium$UI$Android$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$UI$Android$setLifecycleContainer,
createCardView: typeof Titanium$UI$Android$createCardView,
createDrawerLayout: typeof Titanium$UI$Android$createDrawerLayout,
createProgressIndicator: typeof Titanium$UI$Android$createProgressIndicator,
createSearchView: typeof Titanium$UI$Android$createSearchView,
        bubbleParent: typeof Titanium$UI$Android$bubbleParent,
apiName: typeof Titanium$UI$Android$apiName,
lifecycleContainer: typeof Titanium$UI$Android$lifecycleContainer,
FLAG_TRANSLUCENT_NAVIGATION: typeof Titanium$UI$Android$FLAG_TRANSLUCENT_NAVIGATION,
FLAG_TRANSLUCENT_STATUS: typeof Titanium$UI$Android$FLAG_TRANSLUCENT_STATUS,
GRAVITY_AXIS_CLIP: typeof Titanium$UI$Android$GRAVITY_AXIS_CLIP,
GRAVITY_AXIS_PULL_AFTER: typeof Titanium$UI$Android$GRAVITY_AXIS_PULL_AFTER,
GRAVITY_AXIS_PULL_BEFORE: typeof Titanium$UI$Android$GRAVITY_AXIS_PULL_BEFORE,
GRAVITY_AXIS_SPECIFIED: typeof Titanium$UI$Android$GRAVITY_AXIS_SPECIFIED,
GRAVITY_AXIS_X_SHIFT: typeof Titanium$UI$Android$GRAVITY_AXIS_X_SHIFT,
GRAVITY_AXIS_Y_SHIFT: typeof Titanium$UI$Android$GRAVITY_AXIS_Y_SHIFT,
GRAVITY_BOTTOM: typeof Titanium$UI$Android$GRAVITY_BOTTOM,
GRAVITY_CENTER: typeof Titanium$UI$Android$GRAVITY_CENTER,
GRAVITY_CENTER_HORIZONTAL: typeof Titanium$UI$Android$GRAVITY_CENTER_HORIZONTAL,
GRAVITY_CENTER_VERTICAL: typeof Titanium$UI$Android$GRAVITY_CENTER_VERTICAL,
GRAVITY_CLIP_HORIZONTAL: typeof Titanium$UI$Android$GRAVITY_CLIP_HORIZONTAL,
GRAVITY_CLIP_VERTICAL: typeof Titanium$UI$Android$GRAVITY_CLIP_VERTICAL,
GRAVITY_DISPLAY_CLIP_HORIZONTAL: typeof Titanium$UI$Android$GRAVITY_DISPLAY_CLIP_HORIZONTAL,
GRAVITY_DISPLAY_CLIP_VERTICAL: typeof Titanium$UI$Android$GRAVITY_DISPLAY_CLIP_VERTICAL,
GRAVITY_END: typeof Titanium$UI$Android$GRAVITY_END,
GRAVITY_FILL: typeof Titanium$UI$Android$GRAVITY_FILL,
GRAVITY_FILL_HORIZONTAL: typeof Titanium$UI$Android$GRAVITY_FILL_HORIZONTAL,
GRAVITY_FILL_VERTICAL: typeof Titanium$UI$Android$GRAVITY_FILL_VERTICAL,
GRAVITY_HORIZONTAL_GRAVITY_MASK: typeof Titanium$UI$Android$GRAVITY_HORIZONTAL_GRAVITY_MASK,
GRAVITY_LEFT: typeof Titanium$UI$Android$GRAVITY_LEFT,
GRAVITY_NO_GRAVITY: typeof Titanium$UI$Android$GRAVITY_NO_GRAVITY,
GRAVITY_RELATIVE_HORIZONTAL_GRAVITY_MASK: typeof Titanium$UI$Android$GRAVITY_RELATIVE_HORIZONTAL_GRAVITY_MASK,
GRAVITY_RELATIVE_LAYOUT_DIRECTION: typeof Titanium$UI$Android$GRAVITY_RELATIVE_LAYOUT_DIRECTION,
GRAVITY_RIGHT: typeof Titanium$UI$Android$GRAVITY_RIGHT,
GRAVITY_START: typeof Titanium$UI$Android$GRAVITY_START,
GRAVITY_TOP: typeof Titanium$UI$Android$GRAVITY_TOP,
GRAVITY_VERTICAL_GRAVITY_MASK: typeof Titanium$UI$Android$GRAVITY_VERTICAL_GRAVITY_MASK,
LINKIFY_ALL: typeof Titanium$UI$Android$LINKIFY_ALL,
LINKIFY_EMAIL_ADDRESSES: typeof Titanium$UI$Android$LINKIFY_EMAIL_ADDRESSES,
LINKIFY_MAP_ADDRESSES: typeof Titanium$UI$Android$LINKIFY_MAP_ADDRESSES,
LINKIFY_PHONE_NUMBERS: typeof Titanium$UI$Android$LINKIFY_PHONE_NUMBERS,
LINKIFY_WEB_URLS: typeof Titanium$UI$Android$LINKIFY_WEB_URLS,
OVER_SCROLL_ALWAYS: typeof Titanium$UI$Android$OVER_SCROLL_ALWAYS,
OVER_SCROLL_IF_CONTENT_SCROLLS: typeof Titanium$UI$Android$OVER_SCROLL_IF_CONTENT_SCROLLS,
OVER_SCROLL_NEVER: typeof Titanium$UI$Android$OVER_SCROLL_NEVER,
PIXEL_FORMAT_A_8: typeof Titanium$UI$Android$PIXEL_FORMAT_A_8,
PIXEL_FORMAT_LA_88: typeof Titanium$UI$Android$PIXEL_FORMAT_LA_88,
PIXEL_FORMAT_L_8: typeof Titanium$UI$Android$PIXEL_FORMAT_L_8,
PIXEL_FORMAT_OPAQUE: typeof Titanium$UI$Android$PIXEL_FORMAT_OPAQUE,
PIXEL_FORMAT_RGBA_4444: typeof Titanium$UI$Android$PIXEL_FORMAT_RGBA_4444,
PIXEL_FORMAT_RGBA_5551: typeof Titanium$UI$Android$PIXEL_FORMAT_RGBA_5551,
PIXEL_FORMAT_RGBA_8888: typeof Titanium$UI$Android$PIXEL_FORMAT_RGBA_8888,
PIXEL_FORMAT_RGBX_8888: typeof Titanium$UI$Android$PIXEL_FORMAT_RGBX_8888,
PIXEL_FORMAT_RGB_332: typeof Titanium$UI$Android$PIXEL_FORMAT_RGB_332,
PIXEL_FORMAT_RGB_565: typeof Titanium$UI$Android$PIXEL_FORMAT_RGB_565,
PIXEL_FORMAT_RGB_888: typeof Titanium$UI$Android$PIXEL_FORMAT_RGB_888,
PIXEL_FORMAT_TRANSLUCENT: typeof Titanium$UI$Android$PIXEL_FORMAT_TRANSLUCENT,
PIXEL_FORMAT_TRANSPARENT: typeof Titanium$UI$Android$PIXEL_FORMAT_TRANSPARENT,
PIXEL_FORMAT_UNKNOWN: typeof Titanium$UI$Android$PIXEL_FORMAT_UNKNOWN,
PROGRESS_INDICATOR_DIALOG: typeof Titanium$UI$Android$PROGRESS_INDICATOR_DIALOG,
PROGRESS_INDICATOR_STATUS_BAR: typeof Titanium$UI$Android$PROGRESS_INDICATOR_STATUS_BAR,
PROGRESS_INDICATOR_INDETERMINANT: typeof Titanium$UI$Android$PROGRESS_INDICATOR_INDETERMINANT,
PROGRESS_INDICATOR_DETERMINANT: typeof Titanium$UI$Android$PROGRESS_INDICATOR_DETERMINANT,
SOFT_INPUT_ADJUST_PAN: typeof Titanium$UI$Android$SOFT_INPUT_ADJUST_PAN,
SOFT_INPUT_ADJUST_RESIZE: typeof Titanium$UI$Android$SOFT_INPUT_ADJUST_RESIZE,
SOFT_INPUT_ADJUST_UNSPECIFIED: typeof Titanium$UI$Android$SOFT_INPUT_ADJUST_UNSPECIFIED,
SOFT_INPUT_STATE_ALWAYS_HIDDEN: typeof Titanium$UI$Android$SOFT_INPUT_STATE_ALWAYS_HIDDEN,
SOFT_INPUT_STATE_ALWAYS_VISIBLE: typeof Titanium$UI$Android$SOFT_INPUT_STATE_ALWAYS_VISIBLE,
SOFT_INPUT_STATE_HIDDEN: typeof Titanium$UI$Android$SOFT_INPUT_STATE_HIDDEN,
SOFT_INPUT_STATE_UNSPECIFIED: typeof Titanium$UI$Android$SOFT_INPUT_STATE_UNSPECIFIED,
SOFT_INPUT_STATE_VISIBLE: typeof Titanium$UI$Android$SOFT_INPUT_STATE_VISIBLE,
SOFT_KEYBOARD_DEFAULT_ON_FOCUS: typeof Titanium$UI$Android$SOFT_KEYBOARD_DEFAULT_ON_FOCUS,
SOFT_KEYBOARD_HIDE_ON_FOCUS: typeof Titanium$UI$Android$SOFT_KEYBOARD_HIDE_ON_FOCUS,
SOFT_KEYBOARD_SHOW_ON_FOCUS: typeof Titanium$UI$Android$SOFT_KEYBOARD_SHOW_ON_FOCUS,
SWITCH_STYLE_CHECKBOX: typeof Titanium$UI$Android$SWITCH_STYLE_CHECKBOX,
SWITCH_STYLE_TOGGLEBUTTON: typeof Titanium$UI$Android$SWITCH_STYLE_TOGGLEBUTTON,
SWITCH_STYLE_SWITCH: typeof Titanium$UI$Android$SWITCH_STYLE_SWITCH,
WEBVIEW_PLUGINS_OFF: typeof Titanium$UI$Android$WEBVIEW_PLUGINS_OFF,
WEBVIEW_PLUGINS_ON: typeof Titanium$UI$Android$WEBVIEW_PLUGINS_ON,
WEBVIEW_PLUGINS_ON_DEMAND: typeof Titanium$UI$Android$WEBVIEW_PLUGINS_ON_DEMAND,
WEBVIEW_LOAD_DEFAULT: typeof Titanium$UI$Android$WEBVIEW_LOAD_DEFAULT,
WEBVIEW_LOAD_NO_CACHE: typeof Titanium$UI$Android$WEBVIEW_LOAD_NO_CACHE,
WEBVIEW_LOAD_CACHE_ONLY: typeof Titanium$UI$Android$WEBVIEW_LOAD_CACHE_ONLY,
WEBVIEW_LOAD_CACHE_ELSE_NETWORK: typeof Titanium$UI$Android$WEBVIEW_LOAD_CACHE_ELSE_NETWORK,
TRANSITION_EXPLODE: typeof Titanium$UI$Android$TRANSITION_EXPLODE,
TRANSITION_FADE_IN: typeof Titanium$UI$Android$TRANSITION_FADE_IN,
TRANSITION_FADE_OUT: typeof Titanium$UI$Android$TRANSITION_FADE_OUT,
TRANSITION_SLIDE_TOP: typeof Titanium$UI$Android$TRANSITION_SLIDE_TOP,
TRANSITION_SLIDE_RIGHT: typeof Titanium$UI$Android$TRANSITION_SLIDE_RIGHT,
TRANSITION_SLIDE_BOTTOM: typeof Titanium$UI$Android$TRANSITION_SLIDE_BOTTOM,
TRANSITION_SLIDE_LEFT: typeof Titanium$UI$Android$TRANSITION_SLIDE_LEFT,
TRANSITION_CHANGE_BOUNDS: typeof Titanium$UI$Android$TRANSITION_CHANGE_BOUNDS,
TRANSITION_CHANGE_CLIP_BOUNDS: typeof Titanium$UI$Android$TRANSITION_CHANGE_CLIP_BOUNDS,
TRANSITION_CHANGE_TRANSFORM: typeof Titanium$UI$Android$TRANSITION_CHANGE_TRANSFORM,
TRANSITION_CHANGE_IMAGE_TRANSFORM: typeof Titanium$UI$Android$TRANSITION_CHANGE_IMAGE_TRANSFORM,
TRANSITION_NONE: typeof Titanium$UI$Android$TRANSITION_NONE,
TABS_STYLE_DEFAULT: typeof Titanium$UI$Android$TABS_STYLE_DEFAULT,
TABS_STYLE_BOTTOM_NAVIGATION: typeof Titanium$UI$Android$TABS_STYLE_BOTTOM_NAVIGATION,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$Android$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$Android$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$UI$Android$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Window flag which makes the Android system's navigation bar semi-transparent.
 */
declare var Titanium$UI$Android$FLAG_TRANSLUCENT_NAVIGATION: number;


/**
 * Window flag which makes the Android system's top status bar semi-transparent.
 */
declare var Titanium$UI$Android$FLAG_TRANSLUCENT_STATUS: number;


/**
 * Raw bit controlling whether the right/bottom edge is clipped to its container, based on the gravity direction being applied.
 */
declare var Titanium$UI$Android$GRAVITY_AXIS_CLIP: number;


/**
 * Raw bit controlling how the right/bottom edge is placed.
 */
declare var Titanium$UI$Android$GRAVITY_AXIS_PULL_AFTER: number;


/**
 * Raw bit controlling how the left/top edge is placed.
 */
declare var Titanium$UI$Android$GRAVITY_AXIS_PULL_BEFORE: number;


/**
 * Raw bit indicating the gravity for an axis has been specified.
 */
declare var Titanium$UI$Android$GRAVITY_AXIS_SPECIFIED: number;


/**
 * Bits defining the horizontal axis.
 */
declare var Titanium$UI$Android$GRAVITY_AXIS_X_SHIFT: number;


/**
 * Bits defining the vertical axis.
 */
declare var Titanium$UI$Android$GRAVITY_AXIS_Y_SHIFT: number;


/**
 * Push object to the bottom of its container, not changing its size.
 */
declare var Titanium$UI$Android$GRAVITY_BOTTOM: number;


/**
 * Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.
 */
declare var Titanium$UI$Android$GRAVITY_CENTER: number;


/**
 * Place object in the horizontal center of its container, not changing its size.
 */
declare var Titanium$UI$Android$GRAVITY_CENTER_HORIZONTAL: number;


/**
 * Place object in the vertical center of its container, not changing its size.
 */
declare var Titanium$UI$Android$GRAVITY_CENTER_VERTICAL: number;


/**
 * Flag to clip the edges of the object to its container along the horizontal axis.
 */
declare var Titanium$UI$Android$GRAVITY_CLIP_HORIZONTAL: number;


/**
 * Flag to clip the edges of the object to its container along the vertical axis.
 */
declare var Titanium$UI$Android$GRAVITY_CLIP_VERTICAL: number;


/**
 * Special constant to enable clipping to an overall display along the horizontal dimension.
 */
declare var Titanium$UI$Android$GRAVITY_DISPLAY_CLIP_HORIZONTAL: number;


/**
 * Special constant to enable clipping to an overall display along the vertical dimension.
 */
declare var Titanium$UI$Android$GRAVITY_DISPLAY_CLIP_VERTICAL: number;


/**
 * Push object to x-axis position at the end of its container, not changing its size.
 */
declare var Titanium$UI$Android$GRAVITY_END: number;


/**
 * Grow the horizontal and vertical size of the object if needed so it completely fills its container.
 */
declare var Titanium$UI$Android$GRAVITY_FILL: number;


/**
 * Grow the horizontal size of the object if needed so it completely fills its container.
 */
declare var Titanium$UI$Android$GRAVITY_FILL_HORIZONTAL: number;


/**
 * Grow the vertical size of the object if needed so it completely fills its container.
 */
declare var Titanium$UI$Android$GRAVITY_FILL_VERTICAL: number;


/**
 * Binary mask to get the absolute horizontal gravity of a gravity.
 */
declare var Titanium$UI$Android$GRAVITY_HORIZONTAL_GRAVITY_MASK: number;


/**
 * Push object to the left of its container, not changing its size.
 */
declare var Titanium$UI$Android$GRAVITY_LEFT: number;


/**
 * Constant indicating that no gravity has been set
 */
declare var Titanium$UI$Android$GRAVITY_NO_GRAVITY: number;


/**
 * Binary mask for the horizontal gravity and script specific direction bit.
 */
declare var Titanium$UI$Android$GRAVITY_RELATIVE_HORIZONTAL_GRAVITY_MASK: number;


/**
 * Raw bit controlling whether the layout direction is relative or not (GRAVITY_START/GRAVITY_END instead of absolute GRAVITY_LEFT/GRAVITY_RIGHT).
 */
declare var Titanium$UI$Android$GRAVITY_RELATIVE_LAYOUT_DIRECTION: number;


/**
 * Push object to the right of its container, not changing its size.
 */
declare var Titanium$UI$Android$GRAVITY_RIGHT: number;


/**
 * Push object to x-axis position at the start of its container, not changing its size.
 */
declare var Titanium$UI$Android$GRAVITY_START: number;


/**
 * Push object to the top of its container, not changing its size.
 */
declare var Titanium$UI$Android$GRAVITY_TOP: number;


/**
 * Binary mask to get the vertical gravity of a gravity.
 */
declare var Titanium$UI$Android$GRAVITY_VERTICAL_GRAVITY_MASK: number;


/**
 * Converts all detectable types of data into clickable links.
 */
declare var Titanium$UI$Android$LINKIFY_ALL: number;


/**
 * Converts strings formatted as email addresses into clickable links.
 */
declare var Titanium$UI$Android$LINKIFY_EMAIL_ADDRESSES: number;


/**
 * Converts strings formatted as addresses into clickable links.
 */
declare var Titanium$UI$Android$LINKIFY_MAP_ADDRESSES: number;


/**
 * Converts strings formatted as phone numbers into clickable links.
 */
declare var Titanium$UI$Android$LINKIFY_PHONE_NUMBERS: number;


/**
 * Converts strings formatted as URLs into clickable links.
 */
declare var Titanium$UI$Android$LINKIFY_WEB_URLS: number;


/**
 * Always allow a user to over-scroll this view, provided it is a view that can scroll.
 */
declare var Titanium$UI$Android$OVER_SCROLL_ALWAYS: number;


/**
 * Allow a user to over-scroll this view only if the content is large enough to meaningfully scroll, provided it is a view that can scroll.
 */
declare var Titanium$UI$Android$OVER_SCROLL_IF_CONTENT_SCROLLS: number;


/**
 * Never allow a user to over-scroll this view.
 */
declare var Titanium$UI$Android$OVER_SCROLL_NEVER: number;


/**
 * Android A_8 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
 * can improve image clarity and performance.
 */
declare var Titanium$UI$Android$PIXEL_FORMAT_A_8: number;


/**
 * Android LA_88 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
 * can improve image clarity and performance.
 */
declare var Titanium$UI$Android$PIXEL_FORMAT_LA_88: number;


/**
 * Android L_8 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
 * can improve image clarity and performance.
 */
declare var Titanium$UI$Android$PIXEL_FORMAT_L_8: number;


/**
 * Android OPAQUE pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
 * can improve image clarity and performance.
 */
declare var Titanium$UI$Android$PIXEL_FORMAT_OPAQUE: number;


/**
 * Android RGBA_4444 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
 * can improve image clarity and performance.
 */
declare var Titanium$UI$Android$PIXEL_FORMAT_RGBA_4444: number;


/**
 * Android RGBA_5551 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
 * can improve image clarity and performance.
 */
declare var Titanium$UI$Android$PIXEL_FORMAT_RGBA_5551: number;


/**
 * Android RGBA_8888 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
 * can improve image clarity and performance.
 */
declare var Titanium$UI$Android$PIXEL_FORMAT_RGBA_8888: number;


/**
 * Android RGBX_8888 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
 * can improve image clarity and performance.
 */
declare var Titanium$UI$Android$PIXEL_FORMAT_RGBX_8888: number;


/**
 * Android RGB_332 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
 * can improve image clarity and performance.
 */
declare var Titanium$UI$Android$PIXEL_FORMAT_RGB_332: number;


/**
 * Android RGB_565 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
 * can improve image clarity and performance.
 */
declare var Titanium$UI$Android$PIXEL_FORMAT_RGB_565: number;


/**
 * Android RGB_888 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
 * can improve image clarity and performance.
 */
declare var Titanium$UI$Android$PIXEL_FORMAT_RGB_888: number;


/**
 * Android TRANSLUCENT pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
 * can improve image clarity and performance.
 */
declare var Titanium$UI$Android$PIXEL_FORMAT_TRANSLUCENT: number;


/**
 * Android A_8 pixel format for <Titanium.UI.Window>. Selecting the correct pixel format can
 * improve image clarity and performance.
 */
declare var Titanium$UI$Android$PIXEL_FORMAT_TRANSPARENT: number;


/**
 * Android UNKNOWN pixel format for <Titanium.UI.Window>. Selecting the correct pixel format
 * can improve image clarity and performance.
 */
declare var Titanium$UI$Android$PIXEL_FORMAT_UNKNOWN: number;


/**
 * Display <Titanium.UI.Android.ProgressIndicator> as a modal dialog. (default)
 */
declare var Titanium$UI$Android$PROGRESS_INDICATOR_DIALOG: number;


/**
 * Display <Titanium.UI.Android.ProgressIndicator> as a horizontal progress bar in the title of
 * the window.
 */
declare var Titanium$UI$Android$PROGRESS_INDICATOR_STATUS_BAR: number;


/**
 * Used with the <Titanium.UI.Android.ProgressIndicator.type> property to indicate an ongoing
 * activity of indeterminate length. (default)
 */
declare var Titanium$UI$Android$PROGRESS_INDICATOR_INDETERMINANT: number;


/**
 * Used with the <Titanium.UI.Android.ProgressIndicator.type> property to indicate an ongoing
 * activity of determinate length.
 */
declare var Titanium$UI$Android$PROGRESS_INDICATOR_DETERMINANT: number;


/**
 * Pan the current heavyweight window when the input method (ie software keyboard) is shown, to
 * ensure that its contents are not obscured.
 */
declare var Titanium$UI$Android$SOFT_INPUT_ADJUST_PAN: number;


/**
 * Resize the current heavyweight window when the input method (ie software keyboard) is shown,
 * to ensure that its contents are not obscured.
 */
declare var Titanium$UI$Android$SOFT_INPUT_ADJUST_RESIZE: number;


/**
 * Use the system-default behavior to determine how the soft input area (ie software keyboard)
 * is accomodated by the current heavyweight window when it receives focus (default.)
 */
declare var Titanium$UI$Android$SOFT_INPUT_ADJUST_UNSPECIFIED: number;


/**
 * Always hide the soft input area (ie software keyboard) when the current heavyweight window
 * receives focus.
 */
declare var Titanium$UI$Android$SOFT_INPUT_STATE_ALWAYS_HIDDEN: number;


/**
 * Always show the soft input area (ie software keyboard) when the current heavyweight window
 * receives focus.
 */
declare var Titanium$UI$Android$SOFT_INPUT_STATE_ALWAYS_VISIBLE: number;


/**
 * Attempt to hide the soft input area (ie software keyboard) when the current heavyweight
 * window receives focus.
 */
declare var Titanium$UI$Android$SOFT_INPUT_STATE_HIDDEN: number;


/**
 * Use the system-default behavior to determine whether to show the soft input area
 * (ie software keyboard) when the current heavyweight window receives focus.
 */
declare var Titanium$UI$Android$SOFT_INPUT_STATE_UNSPECIFIED: number;


/**
 * Attempt to show the soft input area (ie software keyboard) when the current heavyweight
 * window receives focus.
 */
declare var Titanium$UI$Android$SOFT_INPUT_STATE_VISIBLE: number;


/**
 * Use Android default behavior to handle keyboard visibility when a view receives focus.
 * (default)
 */
declare var Titanium$UI$Android$SOFT_KEYBOARD_DEFAULT_ON_FOCUS: number;


/**
 * Attempt to hide the soft keyboard when a view receives focus. Note: system can override
 * request.
 */
declare var Titanium$UI$Android$SOFT_KEYBOARD_HIDE_ON_FOCUS: number;


/**
 * Attempt to show the soft keyboard when a view receives focus. Note: system can override
 * request.
 */
declare var Titanium$UI$Android$SOFT_KEYBOARD_SHOW_ON_FOCUS: number;


/**
 * Display a checkbox.
 */
declare var Titanium$UI$Android$SWITCH_STYLE_CHECKBOX: number;


/**
 * Display a toggle button.
 */
declare var Titanium$UI$Android$SWITCH_STYLE_TOGGLEBUTTON: number;


/**
 * Display a switch.
 */
declare var Titanium$UI$Android$SWITCH_STYLE_SWITCH: number;


/**
 * Use with [WebView.pluginState](Titanium.UI.WebView.pluginState) to disable plugins in a web view.
 */
declare var Titanium$UI$Android$WEBVIEW_PLUGINS_OFF: number;


/**
 * Use with [WebView.pluginState](Titanium.UI.WebView.pluginState) to enable plugins in a web view.
 */
declare var Titanium$UI$Android$WEBVIEW_PLUGINS_ON: number;


/**
 * Display a placeholder and only load plugins when user selects it.
 */
declare var Titanium$UI$Android$WEBVIEW_PLUGINS_ON_DEMAND: number;


/**
 * Use with [WebView.cacheMode](Titanium.UI.WebView.cacheMode) to override how the cache is used in a web view.
 */
declare var Titanium$UI$Android$WEBVIEW_LOAD_DEFAULT: number;


/**
 * Use with [WebView.cacheMode](Titanium.UI.WebView.cacheMode) to override how the cache is used in a web view.
 */
declare var Titanium$UI$Android$WEBVIEW_LOAD_NO_CACHE: number;


/**
 * Use with [WebView.cacheMode](Titanium.UI.WebView.cacheMode) to override how the cache is used in a web view.
 */
declare var Titanium$UI$Android$WEBVIEW_LOAD_CACHE_ONLY: number;


/**
 * Use with [WebView.cacheMode](Titanium.UI.WebView.cacheMode) to override how the cache is used in a web view.
 */
declare var Titanium$UI$Android$WEBVIEW_LOAD_CACHE_ELSE_NETWORK: number;


/**
 * Moves views in or out from the edges of the scene.
 */
declare var Titanium$UI$Android$TRANSITION_EXPLODE: number;


/**
 * Fades in the views.
 */
declare var Titanium$UI$Android$TRANSITION_FADE_IN: number;


/**
 * Fades out the views.
 */
declare var Titanium$UI$Android$TRANSITION_FADE_OUT: number;


/**
 * Moves views to top.
 */
declare var Titanium$UI$Android$TRANSITION_SLIDE_TOP: number;


/**
 * Moves views to right.
 */
declare var Titanium$UI$Android$TRANSITION_SLIDE_RIGHT: number;


/**
 * Moves views to bottom.
 */
declare var Titanium$UI$Android$TRANSITION_SLIDE_BOTTOM: number;


/**
 * Moves views to left.
 */
declare var Titanium$UI$Android$TRANSITION_SLIDE_LEFT: number;


/**
 * Captures layout bounds of target views before and after the scene change and animates those changes during the transition.
 */
declare var Titanium$UI$Android$TRANSITION_CHANGE_BOUNDS: number;


/**
 * Captures the clip bounds before and after the scene change and animates those changes during the transition.
 */
declare var Titanium$UI$Android$TRANSITION_CHANGE_CLIP_BOUNDS: number;


/**
 * Captures scale and rotation for Views before and after the scene change and animates those changes during the transition.
 */
declare var Titanium$UI$Android$TRANSITION_CHANGE_TRANSFORM: number;


/**
 * Captures an ImageView's matrix before and after the scene change and animates it during the transition.
 */
declare var Titanium$UI$Android$TRANSITION_CHANGE_IMAGE_TRANSFORM: number;


/**
 * Resets transition to platform default.
 */
declare var Titanium$UI$Android$TRANSITION_NONE: number;


/**
 * The default TabGroup style that places the Tabs bellow the ActionBar and above the Window content.
 */
declare var Titanium$UI$Android$TABS_STYLE_DEFAULT: number;


/**
 * TabGroup style taking advantage of a bottom navigation controller for switching between tabs.
 */
declare var Titanium$UI$Android$TABS_STYLE_BOTTOM_NAVIGATION: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$Android$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$Android$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$Android$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$Android$applyProperties(props: any): void



/**
 * Hides the soft keyboard.
 */
declare function Titanium$UI$Android$hideSoftKeyboard(): void



/**
 * Opens an application preferences dialog, using the native Android system settings interface,
 * defined by the platform-specific `preferences.xml` and `array.xml` files.
 */
declare function Titanium$UI$Android$openPreferences(): void



/**
 * Gets the value of the <Titanium.UI.Android.bubbleParent> property.
 */
declare function Titanium$UI$Android$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.Android.bubbleParent> property.
 */
declare function Titanium$UI$Android$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.Android.apiName> property.
 */
declare function Titanium$UI$Android$getApiName(): string



/**
 * Gets the value of the <Titanium.UI.Android.lifecycleContainer> property.
 */
declare function Titanium$UI$Android$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.UI.Android.lifecycleContainer> property.
 */
declare function Titanium$UI$Android$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.UI.Android.lifecycleContainer> property.
 */
declare function Titanium$UI$Android$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Creates and returns an instance of <Titanium.UI.Android.CardView>.
 */
declare function Titanium$UI$Android$createCardView(parameters?: any): Titanium$UI$Android$CardView



/**
 * Creates and returns an instance of <Titanium.UI.Android.DrawerLayout>.
 */
declare function Titanium$UI$Android$createDrawerLayout(parameters?: any): Titanium$UI$Android$DrawerLayout



/**
 * Creates and returns an instance of <Titanium.UI.Android.ProgressIndicator>.
 */
declare function Titanium$UI$Android$createProgressIndicator(parameters?: any): Titanium$UI$Android$ProgressIndicator



/**
 * Creates and returns an instance of <Titanium.UI.Android.SearchView>.
 */
declare function Titanium$UI$Android$createSearchView(parameters?: any): Titanium$UI$Android$SearchView



/**
 * CardView provides a layout container with rounded corners and a shadow indicating the view is elevated.
 */
declare type Titanium$UI$Android$CardView = {

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Background color for CardView as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * Disabled background color of the view, as a color name or hex triplet.
 */
backgroundDisabledColor: string,

/**
 * Disabled background image for the view, specified as a local file path or URL.
 */
backgroundDisabledImage: string,

/**
 * Focused background color of the view, as a color name or hex triplet.
 */
backgroundFocusedColor: string,

/**
 * Focused background image for the view, specified as a local file path or URL.
 */
backgroundFocusedImage: string,

/**
 * Selected background color of the view, as a color name or hex triplet.
 */
backgroundSelectedColor: string,

/**
 * Selected background image url for the view, specified as a local file path or URL.
 */
backgroundSelectedImage: string,

/**
 * Corner radius for CardView.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * View's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * Array of this view's child views.
 */
+children: Titanium$UI$View[],

/**
 * Elevation for CardView.
 */
elevation: number,

/**
 * Whether view should be focusable while navigating with the trackball.
 */
focusable: boolean,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Sets the behavior when hiding an object to release or keep the free space
 */
hiddenBehavior: number,

/**
 * View's left position, in platform-specific units.
 */
left: number | string,

/**
 * Specifies how the view positions its children.
 * One of: 'composite', 'vertical', or 'horizontal'.
 */
layout: string,

/**
 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
 */
opacity: number,

/**
 * When on, animate call overrides current animation if applicable.
 */
overrideCurrentAnimation: boolean,

/**
 * View's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * Clockwise 2D rotation of the view in degrees.
 */
rotation: number,

/**
 * Clockwise rotation of the view in degrees (x-axis).
 */
rotationX: number,

/**
 * Clockwise rotation of the view in degrees (y-axis).
 */
rotationY: number,

/**
 * Scaling of the view in x-axis in pixels.
 */
scaleX: number,

/**
 * Scaling of the view in y-axis in pixels.
 */
scaleY: number,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
 */
softKeyboardOnFocus: number,

/**
 * The view's top position.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * A material design visual construct that provides an instantaneous visual confirmation of touch point.
 */
touchFeedback: boolean,

/**
 * Optional touch feedback ripple color. This has no effect unless `touchFeedback` is true.
 */
touchFeedbackColor: string,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Horizontal location of the view relative to its left position in pixels.
 */
translationX: number,

/**
 * Vertical location of the view relative to its top position in pixels.
 */
translationY: number,

/**
 * Depth of the view relative to its elevation in pixels.
 */
translationZ: number,

/**
 * A name to identify this view in activity transition.
 */
transitionName: string,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * Determines whether to keep the device screen on.
 */
keepScreenOn: boolean,

/**
 * Background color for CardView as a color name or hex triplet.
 */
cardBackgroundColor: string,

/**
 * Corner radius for CardView.
 */
cardCornerRadius: number,

/**
 * Elevation for CardView.
 */
cardElevation: number,

/**
 * Maximum Elevation for CardView.
 */
cardMaxElevation: number,

/**
 * Maximum Elevation for CardView.
 */
maxElevation: number,

/**
 * Add padding to CardView on API level 20 and before to prevent intersections between
 * the Card content and rounded corners.
 */
cardPreventCornerOverlap: boolean,

/**
 * Add padding to CardView on API level 20 and before to prevent intersections between
 * the Card content and rounded corners.
 */
preventCornerOverlap: boolean,

/**
 * Add padding on API level 21 and above to have the same measurements with previous versions.
 */
cardUseCompatPadding: boolean,

/**
 * Add padding on API level 21 and above to have the same measurements with previous versions.
 */
useCompatPadding: boolean,

/**
 * Inner padding between the edges of the Card and children of the CardView.
 */
contentPadding: number,

/**
 * Inner padding between the edges of the Card and children of the CardView.
 */
padding: number,

/**
 * Inner padding between the bottom edge of the Card and children of the CardView.
 */
contentPaddingBottom: number,

/**
 * Inner padding between the bottom edge of the Card and children of the CardView.
 */
paddingBottom: number,

/**
 * Inner padding between the left edge of the Card and children of the CardView.
 */
contentPaddingLeft: number,

/**
 * Inner padding between the left edge of the Card and children of the CardView.
 */
paddingLeft: number,

/**
 * Inner padding between the right edge of the Card and children of the CardView.
 */
contentPaddingRight: number,

/**
 * Inner padding between the right edge of the Card and children of the CardView.
 */
paddingRight: number,

/**
 * Inner padding between the top edge of the Card and children of the CardView.
 */
contentPaddingTop: number,

/**
 * Inner padding between the top edge of the Card and children of the CardView.
 */
paddingTop: number,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any): void,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any[]): void,

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Removes a child view from this view's hierarchy.
 */
remove(view: any): void,

/**
 * Removes all child views from this view's hierarchy.
 */
removeAllChildren(): void,

/**
 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
replaceAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.backgroundDisabledColor> property.
 */
getBackgroundDisabledColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.backgroundDisabledColor> property.
 */
setBackgroundDisabledColor(backgroundDisabledColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.backgroundDisabledImage> property.
 */
getBackgroundDisabledImage(): string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.backgroundDisabledImage> property.
 */
setBackgroundDisabledImage(backgroundDisabledImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.backgroundFocusedColor> property.
 */
getBackgroundFocusedColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.backgroundFocusedColor> property.
 */
setBackgroundFocusedColor(backgroundFocusedColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.backgroundFocusedImage> property.
 */
getBackgroundFocusedImage(): string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.backgroundFocusedImage> property.
 */
setBackgroundFocusedImage(backgroundFocusedImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.backgroundSelectedColor> property.
 */
getBackgroundSelectedColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.backgroundSelectedColor> property.
 */
setBackgroundSelectedColor(backgroundSelectedColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.backgroundSelectedImage> property.
 */
getBackgroundSelectedImage(): string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.backgroundSelectedImage> property.
 */
setBackgroundSelectedImage(backgroundSelectedImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.children> property.
 */
getChildren(): Titanium$UI$View[],

/**
 * Gets the value of the <Titanium.UI.Android.CardView.elevation> property.
 */
getElevation(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.elevation> property.
 */
setElevation(elevation: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.focusable> property.
 */
getFocusable(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.focusable> property.
 */
setFocusable(focusable: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.hiddenBehavior> property.
 */
getHiddenBehavior(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.hiddenBehavior> property.
 */
setHiddenBehavior(hiddenBehavior: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.layout> property.
 */
getLayout(): string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.layout> property.
 */
setLayout(layout: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.overrideCurrentAnimation> property.
 */
getOverrideCurrentAnimation(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.overrideCurrentAnimation> property.
 */
setOverrideCurrentAnimation(overrideCurrentAnimation: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.rotation> property.
 */
getRotation(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.rotation> property.
 */
setRotation(rotation: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.rotationX> property.
 */
getRotationX(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.rotationX> property.
 */
setRotationX(rotationX: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.rotationY> property.
 */
getRotationY(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.rotationY> property.
 */
setRotationY(rotationY: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.scaleX> property.
 */
getScaleX(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.scaleX> property.
 */
setScaleX(scaleX: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.scaleY> property.
 */
getScaleY(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.scaleY> property.
 */
setScaleY(scaleY: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.softKeyboardOnFocus> property.
 */
getSoftKeyboardOnFocus(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.softKeyboardOnFocus> property.
 */
setSoftKeyboardOnFocus(softKeyboardOnFocus: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.touchFeedback> property.
 */
getTouchFeedback(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.touchFeedback> property.
 */
setTouchFeedback(touchFeedback: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.touchFeedbackColor> property.
 */
getTouchFeedbackColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.touchFeedbackColor> property.
 */
setTouchFeedbackColor(touchFeedbackColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.translationX> property.
 */
getTranslationX(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.translationX> property.
 */
setTranslationX(translationX: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.translationY> property.
 */
getTranslationY(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.translationY> property.
 */
setTranslationY(translationY: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.translationZ> property.
 */
getTranslationZ(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.translationZ> property.
 */
setTranslationZ(translationZ: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.transitionName> property.
 */
getTransitionName(): string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.transitionName> property.
 */
setTransitionName(transitionName: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.keepScreenOn> property.
 */
getKeepScreenOn(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.keepScreenOn> property.
 */
setKeepScreenOn(keepScreenOn: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.cardBackgroundColor> property.
 */
getCardBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.cardBackgroundColor> property.
 */
setCardBackgroundColor(cardBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.cardCornerRadius> property.
 */
getCardCornerRadius(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.cardCornerRadius> property.
 */
setCardCornerRadius(cardCornerRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.cardElevation> property.
 */
getCardElevation(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.cardElevation> property.
 */
setCardElevation(cardElevation: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.cardMaxElevation> property.
 */
getCardMaxElevation(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.cardMaxElevation> property.
 */
setCardMaxElevation(cardMaxElevation: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.maxElevation> property.
 */
getMaxElevation(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.maxElevation> property.
 */
setMaxElevation(maxElevation: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.cardPreventCornerOverlap> property.
 */
getCardPreventCornerOverlap(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.cardPreventCornerOverlap> property.
 */
setCardPreventCornerOverlap(cardPreventCornerOverlap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.preventCornerOverlap> property.
 */
getPreventCornerOverlap(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.preventCornerOverlap> property.
 */
setPreventCornerOverlap(preventCornerOverlap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.cardUseCompatPadding> property.
 */
getCardUseCompatPadding(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.cardUseCompatPadding> property.
 */
setCardUseCompatPadding(cardUseCompatPadding: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.useCompatPadding> property.
 */
getUseCompatPadding(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.useCompatPadding> property.
 */
setUseCompatPadding(useCompatPadding: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.contentPadding> property.
 */
getContentPadding(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.contentPadding> property.
 */
setContentPadding(contentPadding: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.padding> property.
 */
getPadding(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.padding> property.
 */
setPadding(padding: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.contentPaddingBottom> property.
 */
getContentPaddingBottom(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.contentPaddingBottom> property.
 */
setContentPaddingBottom(contentPaddingBottom: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.paddingBottom> property.
 */
getPaddingBottom(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.paddingBottom> property.
 */
setPaddingBottom(paddingBottom: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.contentPaddingLeft> property.
 */
getContentPaddingLeft(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.contentPaddingLeft> property.
 */
setContentPaddingLeft(contentPaddingLeft: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.paddingLeft> property.
 */
getPaddingLeft(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.paddingLeft> property.
 */
setPaddingLeft(paddingLeft: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.contentPaddingRight> property.
 */
getContentPaddingRight(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.contentPaddingRight> property.
 */
setContentPaddingRight(contentPaddingRight: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.paddingRight> property.
 */
getPaddingRight(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.paddingRight> property.
 */
setPaddingRight(paddingRight: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.contentPaddingTop> property.
 */
getContentPaddingTop(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.contentPaddingTop> property.
 */
setContentPaddingTop(contentPaddingTop: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.CardView.paddingTop> property.
 */
getPaddingTop(): number,

/**
 * Sets the value of the <Titanium.UI.Android.CardView.paddingTop> property.
 */
setPaddingTop(paddingTop: number): void
} & Titanium$Proxy



/**
 * A panel that displays the app's main navigation options on the left edge of the screen.
 */
declare type Titanium$UI$Android$DrawerLayout = {

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Background color of the view, as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * Disabled background color of the view, as a color name or hex triplet.
 */
backgroundDisabledColor: string,

/**
 * Disabled background image for the view, specified as a local file path or URL.
 */
backgroundDisabledImage: string,

/**
 * Focused background color of the view, as a color name or hex triplet.
 */
backgroundFocusedColor: string,

/**
 * Focused background image for the view, specified as a local file path or URL.
 */
backgroundFocusedImage: string,

/**
 * A background gradient for the view.
 */
backgroundGradient: Gradient,

/**
 * Background image for the view, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Determines whether to tile a background across a view.
 */
backgroundRepeat: boolean,

/**
 * Selected background color of the view, as a color name or hex triplet.
 */
backgroundSelectedColor: string,

/**
 * Selected background image url for the view, specified as a local file path or URL.
 */
backgroundSelectedImage: string,

/**
 * Border color of the view, as a color name or hex triplet.
 */
borderColor: string,

/**
 * Radius for the rounded corners of the view's border.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * View's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * Array of this view's child views.
 */
+children: Titanium$UI$View[],

/**
 * Base elevation of the view relative to its parent in pixels.
 */
elevation: number,

/**
 * Whether view should be focusable while navigating with the trackball.
 */
focusable: boolean,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Sets the behavior when hiding an object to release or keep the free space
 */
hiddenBehavior: number,

/**
 * View's left position, in platform-specific units.
 */
left: number | string,

/**
 * Specifies how the view positions its children.
 * One of: 'composite', 'vertical', or 'horizontal'.
 */
layout: string,

/**
 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
 */
opacity: number,

/**
 * When on, animate call overrides current animation if applicable.
 */
overrideCurrentAnimation: boolean,

/**
 * View's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * Clockwise 2D rotation of the view in degrees.
 */
rotation: number,

/**
 * Clockwise rotation of the view in degrees (x-axis).
 */
rotationX: number,

/**
 * Clockwise rotation of the view in degrees (y-axis).
 */
rotationY: number,

/**
 * Scaling of the view in x-axis in pixels.
 */
scaleX: number,

/**
 * Scaling of the view in y-axis in pixels.
 */
scaleY: number,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
 */
softKeyboardOnFocus: number,

/**
 * The view's top position.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * A material design visual construct that provides an instantaneous visual confirmation of touch point.
 */
touchFeedback: boolean,

/**
 * Optional touch feedback ripple color. This has no effect unless `touchFeedback` is true.
 */
touchFeedbackColor: string,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Horizontal location of the view relative to its left position in pixels.
 */
translationX: number,

/**
 * Vertical location of the view relative to its top position in pixels.
 */
translationY: number,

/**
 * Depth of the view relative to its elevation in pixels.
 */
translationZ: number,

/**
 * A name to identify this view in activity transition.
 */
transitionName: string,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * Determines whether to keep the device screen on.
 */
keepScreenOn: boolean,

/**
 * Use with [DrawerLayout.drawerLockMode](Titanium.UI.Android.DrawerLayout.drawerLockMode) to specify the drawer is locked closed.
 */
+LOCK_MODE_LOCKED_CLOSED: number,

/**
 * Use with [DrawerLayout.drawerLockMode](Titanium.UI.Android.DrawerLayout.drawerLockMode) to specify the drawer is locked opened.
 */
+LOCK_MODE_LOCKED_OPEN: number,

/**
 * Use with [DrawerLayout.drawerLockMode](Titanium.UI.Android.DrawerLayout.drawerLockMode) to specify the drawer is reset to default lock state.
 */
+LOCK_MODE_UNDEFINED: number,

/**
 * Use with [DrawerLayout.drawerLockMode](Titanium.UI.Android.DrawerLayout.drawerLockMode) to specify the drawer is unlocked.
 */
+LOCK_MODE_UNLOCKED: number,

/**
 * Determine whether the left drawer is open
 */
isLeftOpen: boolean,

/**
 * Determine whether the right drawer is open
 */
isRightOpen: boolean,

/**
 * Determine whether the left drawer is visible
 */
isLeftVisible: boolean,

/**
 * Determine whether the right drawer is visible
 */
isRightVisible: boolean,

/**
 * Get or set the width of the left drawer
 */
leftWidth: number,

/**
 * Get or set the width of the right drawer
 */
rightWidth: number,

/**
 * Get or set the view of the left drawer
 */
leftView: Titanium$UI$View,

/**
 * Get or set the view of the right drawer
 */
rightView: Titanium$UI$View,

/**
 * Get or set the center view
 */
centerView: Titanium$UI$View,

/**
 * Determine the drawer indicator status
 */
drawerIndicatorEnabled: boolean,

/**
 * Get or set the drawerLockMode
 */
drawerLockMode: number,

/**
 * Determine whether to enable the toolbar.
 */
toolbarEnabled: boolean,

/**
 * A Toolbar instance to use as a toolbar.
 */
toolbar: Titanium$UI$Toolbar,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any): void,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any[]): void,

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Removes a child view from this view's hierarchy.
 */
remove(view: any): void,

/**
 * Removes all child views from this view's hierarchy.
 */
removeAllChildren(): void,

/**
 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
replaceAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Toggle the visibility of the left view.
 */
toggleLeft(): void,

/**
 * Open the left view.
 */
openLeft(): void,

/**
 * Close the left view.
 */
closeLeft(): void,

/**
 * Toggle the visibility of the right view.
 */
toggleRight(): void,

/**
 * Open the right view.
 */
openRight(): void,

/**
 * Close the right view.
 */
closeRight(): void,

/**
 * Disallow touch events on a specific view.
 */
interceptTouchEvent(view: any, disallowIntercept: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundDisabledColor> property.
 */
getBackgroundDisabledColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundDisabledColor> property.
 */
setBackgroundDisabledColor(backgroundDisabledColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundDisabledImage> property.
 */
getBackgroundDisabledImage(): string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundDisabledImage> property.
 */
setBackgroundDisabledImage(backgroundDisabledImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundFocusedColor> property.
 */
getBackgroundFocusedColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundFocusedColor> property.
 */
setBackgroundFocusedColor(backgroundFocusedColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundFocusedImage> property.
 */
getBackgroundFocusedImage(): string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundFocusedImage> property.
 */
setBackgroundFocusedImage(backgroundFocusedImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundGradient> property.
 */
getBackgroundGradient(): Gradient,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundGradient> property.
 */
setBackgroundGradient(backgroundGradient: Gradient): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundImage> property.
 */
getBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundRepeat> property.
 */
getBackgroundRepeat(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundRepeat> property.
 */
setBackgroundRepeat(backgroundRepeat: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundSelectedColor> property.
 */
getBackgroundSelectedColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundSelectedColor> property.
 */
setBackgroundSelectedColor(backgroundSelectedColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.backgroundSelectedImage> property.
 */
getBackgroundSelectedImage(): string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.backgroundSelectedImage> property.
 */
setBackgroundSelectedImage(backgroundSelectedImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.borderColor> property.
 */
getBorderColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.borderColor> property.
 */
setBorderColor(borderColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.children> property.
 */
getChildren(): Titanium$UI$View[],

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.elevation> property.
 */
getElevation(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.elevation> property.
 */
setElevation(elevation: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.focusable> property.
 */
getFocusable(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.focusable> property.
 */
setFocusable(focusable: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.hiddenBehavior> property.
 */
getHiddenBehavior(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.hiddenBehavior> property.
 */
setHiddenBehavior(hiddenBehavior: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.layout> property.
 */
getLayout(): string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.layout> property.
 */
setLayout(layout: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.overrideCurrentAnimation> property.
 */
getOverrideCurrentAnimation(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.overrideCurrentAnimation> property.
 */
setOverrideCurrentAnimation(overrideCurrentAnimation: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.rotation> property.
 */
getRotation(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.rotation> property.
 */
setRotation(rotation: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.rotationX> property.
 */
getRotationX(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.rotationX> property.
 */
setRotationX(rotationX: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.rotationY> property.
 */
getRotationY(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.rotationY> property.
 */
setRotationY(rotationY: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.scaleX> property.
 */
getScaleX(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.scaleX> property.
 */
setScaleX(scaleX: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.scaleY> property.
 */
getScaleY(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.scaleY> property.
 */
setScaleY(scaleY: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.softKeyboardOnFocus> property.
 */
getSoftKeyboardOnFocus(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.softKeyboardOnFocus> property.
 */
setSoftKeyboardOnFocus(softKeyboardOnFocus: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.touchFeedback> property.
 */
getTouchFeedback(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.touchFeedback> property.
 */
setTouchFeedback(touchFeedback: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.touchFeedbackColor> property.
 */
getTouchFeedbackColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.touchFeedbackColor> property.
 */
setTouchFeedbackColor(touchFeedbackColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.translationX> property.
 */
getTranslationX(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.translationX> property.
 */
setTranslationX(translationX: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.translationY> property.
 */
getTranslationY(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.translationY> property.
 */
setTranslationY(translationY: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.translationZ> property.
 */
getTranslationZ(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.translationZ> property.
 */
setTranslationZ(translationZ: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.transitionName> property.
 */
getTransitionName(): string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.transitionName> property.
 */
setTransitionName(transitionName: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.keepScreenOn> property.
 */
getKeepScreenOn(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.keepScreenOn> property.
 */
setKeepScreenOn(keepScreenOn: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.isLeftOpen> property.
 */
getIsLeftOpen(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.isLeftOpen> property.
 */
setIsLeftOpen(isLeftOpen: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.isRightOpen> property.
 */
getIsRightOpen(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.isRightOpen> property.
 */
setIsRightOpen(isRightOpen: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.isLeftVisible> property.
 */
getIsLeftVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.isLeftVisible> property.
 */
setIsLeftVisible(isLeftVisible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.isRightVisible> property.
 */
getIsRightVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.isRightVisible> property.
 */
setIsRightVisible(isRightVisible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.leftWidth> property.
 */
getLeftWidth(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.leftWidth> property.
 */
setLeftWidth(leftWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.rightWidth> property.
 */
getRightWidth(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.rightWidth> property.
 */
setRightWidth(rightWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.leftView> property.
 */
getLeftView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.leftView> property.
 */
setLeftView(leftView: any): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.rightView> property.
 */
getRightView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.rightView> property.
 */
setRightView(rightView: any): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.centerView> property.
 */
getCenterView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.centerView> property.
 */
setCenterView(centerView: any): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.drawerIndicatorEnabled> property.
 */
getDrawerIndicatorEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.drawerIndicatorEnabled> property.
 */
setDrawerIndicatorEnabled(drawerIndicatorEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.drawerLockMode> property.
 */
getDrawerLockMode(): number,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.drawerLockMode> property.
 */
setDrawerLockMode(drawerLockMode: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.toolbarEnabled> property.
 */
getToolbarEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.toolbarEnabled> property.
 */
setToolbarEnabled(toolbarEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.DrawerLayout.toolbar> property.
 */
getToolbar(): Titanium$UI$Toolbar,

/**
 * Sets the value of the <Titanium.UI.Android.DrawerLayout.toolbar> property.
 */
setToolbar(toolbar: Titanium$UI$Toolbar): void
} & Titanium$Proxy



/**
 * A progress dialog or a horizontal progress bar in the title of the window.
 */
declare type Titanium$UI$Android$ProgressIndicator = {

/**
 * Base elevation of the view relative to its parent in pixels.
 */
elevation: number,

/**
 * Sets the behavior when hiding an object to release or keep the free space
 */
hiddenBehavior: number,

/**
 * Clockwise 2D rotation of the view in degrees.
 */
rotation: number,

/**
 * Clockwise rotation of the view in degrees (x-axis).
 */
rotationX: number,

/**
 * Clockwise rotation of the view in degrees (y-axis).
 */
rotationY: number,

/**
 * Scaling of the view in x-axis in pixels.
 */
scaleX: number,

/**
 * Scaling of the view in y-axis in pixels.
 */
scaleY: number,

/**
 * A material design visual construct that provides an instantaneous visual confirmation of touch point.
 */
touchFeedback: boolean,

/**
 * Optional touch feedback ripple color. This has no effect unless `touchFeedback` is true.
 */
touchFeedbackColor: string,

/**
 * Horizontal location of the view relative to its left position in pixels.
 */
translationX: number,

/**
 * Vertical location of the view relative to its top position in pixels.
 */
translationY: number,

/**
 * Depth of the view relative to its elevation in pixels.
 */
translationZ: number,

/**
 * A name to identify this view in activity transition.
 */
transitionName: string,

/**
 * When `true` allows the user to cancel the progress dialog by pressing the BACK button.
 */
cancelable: boolean,

/**
 * When `cancelable` is set to `true` and this is set to `true`, the dialog is canceled when touched outside the window's bounds.
 */
canceledOnTouchOutside: boolean,

/**
 * Message text.
 */
message: string,

/**
 * Key identifying a string in the locale file to use for the message text.
 */
messageid: string,

/**
 * Minimum value of the progress bar.
 */
min: number,

/**
 * Maximum value of the progress bar.
 */
max: number,

/**
 * Location for the progress indicator.
 */
location: number,

/**
 * Type for the progress indicator.
 */
type: number,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides the progress indicator and stops the animation.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
replaceAt(params: any): void,

/**
 * Shows the progress indicator and starts the animation.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.elevation> property.
 */
getElevation(): number,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.elevation> property.
 */
setElevation(elevation: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.hiddenBehavior> property.
 */
getHiddenBehavior(): number,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.hiddenBehavior> property.
 */
setHiddenBehavior(hiddenBehavior: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.rotation> property.
 */
getRotation(): number,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.rotation> property.
 */
setRotation(rotation: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.rotationX> property.
 */
getRotationX(): number,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.rotationX> property.
 */
setRotationX(rotationX: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.rotationY> property.
 */
getRotationY(): number,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.rotationY> property.
 */
setRotationY(rotationY: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.scaleX> property.
 */
getScaleX(): number,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.scaleX> property.
 */
setScaleX(scaleX: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.scaleY> property.
 */
getScaleY(): number,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.scaleY> property.
 */
setScaleY(scaleY: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.touchFeedback> property.
 */
getTouchFeedback(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.touchFeedback> property.
 */
setTouchFeedback(touchFeedback: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.touchFeedbackColor> property.
 */
getTouchFeedbackColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.touchFeedbackColor> property.
 */
setTouchFeedbackColor(touchFeedbackColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.translationX> property.
 */
getTranslationX(): number,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.translationX> property.
 */
setTranslationX(translationX: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.translationY> property.
 */
getTranslationY(): number,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.translationY> property.
 */
setTranslationY(translationY: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.translationZ> property.
 */
getTranslationZ(): number,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.translationZ> property.
 */
setTranslationZ(translationZ: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.transitionName> property.
 */
getTransitionName(): string,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.transitionName> property.
 */
setTransitionName(transitionName: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.cancelable> property.
 */
getCancelable(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.cancelable> property.
 */
setCancelable(cancelable: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.canceledOnTouchOutside> property.
 */
getCanceledOnTouchOutside(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.canceledOnTouchOutside> property.
 */
setCanceledOnTouchOutside(canceledOnTouchOutside: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.message> property.
 */
getMessage(): string,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.message> property.
 */
setMessage(message: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.messageid> property.
 */
getMessageid(): string,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.messageid> property.
 */
setMessageid(messageid: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.min> property.
 */
getMin(): number,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.min> property.
 */
setMin(min: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.max> property.
 */
getMax(): number,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.max> property.
 */
setMax(max: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.location> property.
 */
getLocation(): number,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.location> property.
 */
setLocation(location: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.ProgressIndicator.type> property.
 */
getType(): number,

/**
 * Sets the value of the <Titanium.UI.Android.ProgressIndicator.type> property.
 */
setType(type: number): void
} & Titanium$Proxy



/**
 * A specialized text field for entering search text.
 */
declare type Titanium$UI$Android$SearchView = {

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Background color of the view, as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * Disabled background color of the view, as a color name or hex triplet.
 */
backgroundDisabledColor: string,

/**
 * Disabled background image for the view, specified as a local file path or URL.
 */
backgroundDisabledImage: string,

/**
 * Focused background color of the view, as a color name or hex triplet.
 */
backgroundFocusedColor: string,

/**
 * Focused background image for the view, specified as a local file path or URL.
 */
backgroundFocusedImage: string,

/**
 * A background gradient for the view.
 */
backgroundGradient: Gradient,

/**
 * Background image for the view, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Determines whether to tile a background across a view.
 */
backgroundRepeat: boolean,

/**
 * Selected background color of the view, as a color name or hex triplet.
 */
backgroundSelectedColor: string,

/**
 * Selected background image url for the view, specified as a local file path or URL.
 */
backgroundSelectedImage: string,

/**
 * Border color of the view, as a color name or hex triplet.
 */
borderColor: string,

/**
 * Radius for the rounded corners of the view's border.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * View's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * Array of this view's child views.
 */
+children: Titanium$UI$View[],

/**
 * Base elevation of the view relative to its parent in pixels.
 */
elevation: number,

/**
 * Whether view should be focusable while navigating with the trackball.
 */
focusable: boolean,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Sets the behavior when hiding an object to release or keep the free space
 */
hiddenBehavior: number,

/**
 * View's left position, in platform-specific units.
 */
left: number | string,

/**
 * Specifies how the view positions its children.
 * One of: 'composite', 'vertical', or 'horizontal'.
 */
layout: string,

/**
 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
 */
opacity: number,

/**
 * When on, animate call overrides current animation if applicable.
 */
overrideCurrentAnimation: boolean,

/**
 * View's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * Clockwise 2D rotation of the view in degrees.
 */
rotation: number,

/**
 * Clockwise rotation of the view in degrees (x-axis).
 */
rotationX: number,

/**
 * Clockwise rotation of the view in degrees (y-axis).
 */
rotationY: number,

/**
 * Scaling of the view in x-axis in pixels.
 */
scaleX: number,

/**
 * Scaling of the view in y-axis in pixels.
 */
scaleY: number,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
 */
softKeyboardOnFocus: number,

/**
 * The view's top position.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * A material design visual construct that provides an instantaneous visual confirmation of touch point.
 */
touchFeedback: boolean,

/**
 * Optional touch feedback ripple color. This has no effect unless `touchFeedback` is true.
 */
touchFeedbackColor: string,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Horizontal location of the view relative to its left position in pixels.
 */
translationX: number,

/**
 * Vertical location of the view relative to its top position in pixels.
 */
translationY: number,

/**
 * Depth of the view relative to its elevation in pixels.
 */
translationZ: number,

/**
 * A name to identify this view in activity transition.
 */
transitionName: string,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * Determines whether to keep the device screen on.
 */
keepScreenOn: boolean,

/**
 * Color of the text in this SearchView, as a color name or hex triplet.
 */
color: string,

/**
 * Text to show when the search view field is not focused.
 */
hintText: string,

/**
 * Color of hint text that displays when field is empty.
 */
hintTextColor: string,

/**
 * Value of the search view.
 */
value: string,

/**
 * Iconifies or expands the search view
 */
iconified: boolean,

/**
 * Sets the default or resting state of the search view
 */
iconifiedByDefault: boolean,

/**
 * Whether to display the submit button when necessary or never display.
 */
submitEnabled: boolean,

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Removes a child view from this view's hierarchy.
 */
remove(view: any): void,

/**
 * Removes all child views from this view's hierarchy.
 */
removeAllChildren(): void,

/**
 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
replaceAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Causes the search view to lose focus.
 */
blur(): void,

/**
 * Causes the search view to gain focus.
 */
focus(): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundDisabledColor> property.
 */
getBackgroundDisabledColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundDisabledColor> property.
 */
setBackgroundDisabledColor(backgroundDisabledColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundDisabledImage> property.
 */
getBackgroundDisabledImage(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundDisabledImage> property.
 */
setBackgroundDisabledImage(backgroundDisabledImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundFocusedColor> property.
 */
getBackgroundFocusedColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundFocusedColor> property.
 */
setBackgroundFocusedColor(backgroundFocusedColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundFocusedImage> property.
 */
getBackgroundFocusedImage(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundFocusedImage> property.
 */
setBackgroundFocusedImage(backgroundFocusedImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundGradient> property.
 */
getBackgroundGradient(): Gradient,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundGradient> property.
 */
setBackgroundGradient(backgroundGradient: Gradient): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundImage> property.
 */
getBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundRepeat> property.
 */
getBackgroundRepeat(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundRepeat> property.
 */
setBackgroundRepeat(backgroundRepeat: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundSelectedColor> property.
 */
getBackgroundSelectedColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundSelectedColor> property.
 */
setBackgroundSelectedColor(backgroundSelectedColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.backgroundSelectedImage> property.
 */
getBackgroundSelectedImage(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.backgroundSelectedImage> property.
 */
setBackgroundSelectedImage(backgroundSelectedImage: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.borderColor> property.
 */
getBorderColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.borderColor> property.
 */
setBorderColor(borderColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.children> property.
 */
getChildren(): Titanium$UI$View[],

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.elevation> property.
 */
getElevation(): number,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.elevation> property.
 */
setElevation(elevation: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.focusable> property.
 */
getFocusable(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.focusable> property.
 */
setFocusable(focusable: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.hiddenBehavior> property.
 */
getHiddenBehavior(): number,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.hiddenBehavior> property.
 */
setHiddenBehavior(hiddenBehavior: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.layout> property.
 */
getLayout(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.layout> property.
 */
setLayout(layout: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.overrideCurrentAnimation> property.
 */
getOverrideCurrentAnimation(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.overrideCurrentAnimation> property.
 */
setOverrideCurrentAnimation(overrideCurrentAnimation: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.rotation> property.
 */
getRotation(): number,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.rotation> property.
 */
setRotation(rotation: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.rotationX> property.
 */
getRotationX(): number,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.rotationX> property.
 */
setRotationX(rotationX: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.rotationY> property.
 */
getRotationY(): number,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.rotationY> property.
 */
setRotationY(rotationY: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.scaleX> property.
 */
getScaleX(): number,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.scaleX> property.
 */
setScaleX(scaleX: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.scaleY> property.
 */
getScaleY(): number,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.scaleY> property.
 */
setScaleY(scaleY: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.softKeyboardOnFocus> property.
 */
getSoftKeyboardOnFocus(): number,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.softKeyboardOnFocus> property.
 */
setSoftKeyboardOnFocus(softKeyboardOnFocus: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.touchFeedback> property.
 */
getTouchFeedback(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.touchFeedback> property.
 */
setTouchFeedback(touchFeedback: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.touchFeedbackColor> property.
 */
getTouchFeedbackColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.touchFeedbackColor> property.
 */
setTouchFeedbackColor(touchFeedbackColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.translationX> property.
 */
getTranslationX(): number,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.translationX> property.
 */
setTranslationX(translationX: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.translationY> property.
 */
getTranslationY(): number,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.translationY> property.
 */
setTranslationY(translationY: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.translationZ> property.
 */
getTranslationZ(): number,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.translationZ> property.
 */
setTranslationZ(translationZ: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.transitionName> property.
 */
getTransitionName(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.transitionName> property.
 */
setTransitionName(transitionName: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.keepScreenOn> property.
 */
getKeepScreenOn(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.keepScreenOn> property.
 */
setKeepScreenOn(keepScreenOn: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.color> property.
 */
getColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.color> property.
 */
setColor(color: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.hintText> property.
 */
getHintText(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.hintText> property.
 */
setHintText(hintText: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.hintTextColor> property.
 */
getHintTextColor(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.hintTextColor> property.
 */
setHintTextColor(hintTextColor: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.value> property.
 */
getValue(): string,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.value> property.
 */
setValue(value: string): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.iconified> property.
 */
getIconified(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.iconified> property.
 */
setIconified(iconified: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.iconifiedByDefault> property.
 */
getIconifiedByDefault(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.iconifiedByDefault> property.
 */
setIconifiedByDefault(iconifiedByDefault: boolean): void,

/**
 * Gets the value of the <Titanium.UI.Android.SearchView.submitEnabled> property.
 */
getSubmitEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.Android.SearchView.submitEnabled> property.
 */
setSubmitEnabled(submitEnabled: boolean): void
} & Titanium$Proxy



      declare var npm$namespace$Titanium$UI$Clipboard: {
        addEventListener: typeof Titanium$UI$Clipboard$addEventListener,
removeEventListener: typeof Titanium$UI$Clipboard$removeEventListener,
fireEvent: typeof Titanium$UI$Clipboard$fireEvent,
applyProperties: typeof Titanium$UI$Clipboard$applyProperties,
clearData: typeof Titanium$UI$Clipboard$clearData,
clearText: typeof Titanium$UI$Clipboard$clearText,
getData: typeof Titanium$UI$Clipboard$getData,
getText: typeof Titanium$UI$Clipboard$getText,
hasData: typeof Titanium$UI$Clipboard$hasData,
hasText: typeof Titanium$UI$Clipboard$hasText,
hasURLs: typeof Titanium$UI$Clipboard$hasURLs,
hasImages: typeof Titanium$UI$Clipboard$hasImages,
hasColors: typeof Titanium$UI$Clipboard$hasColors,
setData: typeof Titanium$UI$Clipboard$setData,
setText: typeof Titanium$UI$Clipboard$setText,
setItems: typeof Titanium$UI$Clipboard$setItems,
getItems: typeof Titanium$UI$Clipboard$getItems,
remove: typeof Titanium$UI$Clipboard$remove,
getBubbleParent: typeof Titanium$UI$Clipboard$getBubbleParent,
setBubbleParent: typeof Titanium$UI$Clipboard$setBubbleParent,
getApiName: typeof Titanium$UI$Clipboard$getApiName,
getLifecycleContainer: typeof Titanium$UI$Clipboard$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$UI$Clipboard$setLifecycleContainer,
getName: typeof Titanium$UI$Clipboard$getName,
setName: typeof Titanium$UI$Clipboard$setName,
getUnique: typeof Titanium$UI$Clipboard$getUnique,
setUnique: typeof Titanium$UI$Clipboard$setUnique,
getAllowCreation: typeof Titanium$UI$Clipboard$getAllowCreation,
setAllowCreation: typeof Titanium$UI$Clipboard$setAllowCreation,
        bubbleParent: typeof Titanium$UI$Clipboard$bubbleParent,
apiName: typeof Titanium$UI$Clipboard$apiName,
lifecycleContainer: typeof Titanium$UI$Clipboard$lifecycleContainer,
name: typeof Titanium$UI$Clipboard$name,
unique: typeof Titanium$UI$Clipboard$unique,
allowCreation: typeof Titanium$UI$Clipboard$allowCreation,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$Clipboard$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$Clipboard$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$UI$Clipboard$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Create a new named clipboard.
 */
declare var Titanium$UI$Clipboard$name: string;


/**
 * Create a new clipboard identified by a unique system-generated name.
 */
declare var Titanium$UI$Clipboard$unique: boolean;


/**
 * Create a clipboard identified by name if it doesn't exist.
 */
declare var Titanium$UI$Clipboard$allowCreation: boolean;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$Clipboard$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$Clipboard$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$Clipboard$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$Clipboard$applyProperties(props: any): void



/**
 * Deletes data of the specified MIME type stored in the clipboard. If MIME type omitted, all
 * data is deleted.
 */
declare function Titanium$UI$Clipboard$clearData(type?: string): void



/**
 * Deletes all text data stored in the clipboard.
 */
declare function Titanium$UI$Clipboard$clearText(): void



/**
 * Gets data of the specified MIME type stored in the clipboard.
 */
declare function Titanium$UI$Clipboard$getData(type: string): string | Titanium$Blob



/**
 * Gets text data stored in the clipboard.
 */
declare function Titanium$UI$Clipboard$getText(): string



/**
 * Indicates whether any data of the specified MIME type is stored in the clipboard.
 */
declare function Titanium$UI$Clipboard$hasData(type: string): boolean



/**
 * Indicates whether any text data is stored in the clipboard.
 */
declare function Titanium$UI$Clipboard$hasText(): boolean



/**
 * Indicates whether any URLs are stored in the clipboard.
 */
declare function Titanium$UI$Clipboard$hasURLs(): boolean



/**
 * Indicates whether any images are stored in the clipboard.
 */
declare function Titanium$UI$Clipboard$hasImages(): boolean



/**
 * Indicates whether any colors are stored in the clipboard.
 */
declare function Titanium$UI$Clipboard$hasColors(): boolean



/**
 * Stores data of the specified MIME type in the clipboard.
 */
declare function Titanium$UI$Clipboard$setData(type: string, data: any): void



/**
 * Stores text data in the clipboard.
 */
declare function Titanium$UI$Clipboard$setText(text: string): void



/**
 * Adds an array of items to a clipboard, and sets privacy options for all included items.
 */
declare function Titanium$UI$Clipboard$setItems(items: ClipboardItemsType): void



/**
 * Gets the items that have been specified earlier using <Titanium.UI.Clipboard.setItems>.
 */
declare function Titanium$UI$Clipboard$getItems(): any[]



/**
 * Removes the clipboard.
 */
declare function Titanium$UI$Clipboard$remove(): void



/**
 * Gets the value of the <Titanium.UI.Clipboard.bubbleParent> property.
 */
declare function Titanium$UI$Clipboard$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.Clipboard.bubbleParent> property.
 */
declare function Titanium$UI$Clipboard$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.Clipboard.apiName> property.
 */
declare function Titanium$UI$Clipboard$getApiName(): string



/**
 * Gets the value of the <Titanium.UI.Clipboard.lifecycleContainer> property.
 */
declare function Titanium$UI$Clipboard$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.UI.Clipboard.lifecycleContainer> property.
 */
declare function Titanium$UI$Clipboard$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.UI.Clipboard.lifecycleContainer> property.
 */
declare function Titanium$UI$Clipboard$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.UI.Clipboard.name> property.
 */
declare function Titanium$UI$Clipboard$getName(): string



/**
 * Sets the value of the <Titanium.UI.Clipboard.name> property.
 */
declare function Titanium$UI$Clipboard$setName(name: string): void



/**
 * Gets the value of the <Titanium.UI.Clipboard.unique> property.
 */
declare function Titanium$UI$Clipboard$getUnique(): boolean



/**
 * Sets the value of the <Titanium.UI.Clipboard.unique> property.
 */
declare function Titanium$UI$Clipboard$setUnique(unique: boolean): void



/**
 * Gets the value of the <Titanium.UI.Clipboard.allowCreation> property.
 */
declare function Titanium$UI$Clipboard$getAllowCreation(): boolean



/**
 * Sets the value of the <Titanium.UI.Clipboard.allowCreation> property.
 */
declare function Titanium$UI$Clipboard$setAllowCreation(allowCreation: boolean): void



      declare var npm$namespace$Titanium$UI$iOS: {
        addEventListener: typeof Titanium$UI$iOS$addEventListener,
removeEventListener: typeof Titanium$UI$iOS$removeEventListener,
fireEvent: typeof Titanium$UI$iOS$fireEvent,
applyProperties: typeof Titanium$UI$iOS$applyProperties,
createTransitionAnimation: typeof Titanium$UI$iOS$createTransitionAnimation,
createLivePhotoBadge: typeof Titanium$UI$iOS$createLivePhotoBadge,
createAdView: typeof Titanium$UI$iOS$createAdView,
createAnchorAttachmentBehavior: typeof Titanium$UI$iOS$createAnchorAttachmentBehavior,
createAnimator: typeof Titanium$UI$iOS$createAnimator,
createApplicationShortcuts: typeof Titanium$UI$iOS$createApplicationShortcuts,
createAttribute: typeof Titanium$UI$iOS$createAttribute,
createAttributedString: typeof Titanium$UI$iOS$createAttributedString,
createBlurView: typeof Titanium$UI$iOS$createBlurView,
createCollisionBehavior: typeof Titanium$UI$iOS$createCollisionBehavior,
createCoverFlowView: typeof Titanium$UI$iOS$createCoverFlowView,
createDocumentViewer: typeof Titanium$UI$iOS$createDocumentViewer,
createDynamicItemBehavior: typeof Titanium$UI$iOS$createDynamicItemBehavior,
createFeedbackGenerator: typeof Titanium$UI$iOS$createFeedbackGenerator,
createGravityBehavior: typeof Titanium$UI$iOS$createGravityBehavior,
createLivePhotoView: typeof Titanium$UI$iOS$createLivePhotoView,
createMenuPopup: typeof Titanium$UI$iOS$createMenuPopup,
createNavigationWindow: typeof Titanium$UI$iOS$createNavigationWindow,
createPreviewAction: typeof Titanium$UI$iOS$createPreviewAction,
createPreviewActionGroup: typeof Titanium$UI$iOS$createPreviewActionGroup,
createPreviewContext: typeof Titanium$UI$iOS$createPreviewContext,
createPushBehavior: typeof Titanium$UI$iOS$createPushBehavior,
createSnapBehavior: typeof Titanium$UI$iOS$createSnapBehavior,
createSplitWindow: typeof Titanium$UI$iOS$createSplitWindow,
createStepper: typeof Titanium$UI$iOS$createStepper,
createTabbedBar: typeof Titanium$UI$iOS$createTabbedBar,
createToolbar: typeof Titanium$UI$iOS$createToolbar,
createViewAttachmentBehavior: typeof Titanium$UI$iOS$createViewAttachmentBehavior,
createWebViewConfiguration: typeof Titanium$UI$iOS$createWebViewConfiguration,
createWebViewDecisionHandler: typeof Titanium$UI$iOS$createWebViewDecisionHandler,
createWebViewProcessPool: typeof Titanium$UI$iOS$createWebViewProcessPool,
getBubbleParent: typeof Titanium$UI$iOS$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iOS$setBubbleParent,
getApiName: typeof Titanium$UI$iOS$getApiName,
getForceTouchSupported: typeof Titanium$UI$iOS$getForceTouchSupported,
setMODAL_PRESENTATION_CURRENT_CONTEXT: typeof Titanium$UI$iOS$setMODAL_PRESENTATION_CURRENT_CONTEXT,
setMODAL_PRESENTATION_OVER_CURRENT_CONTEXT: typeof Titanium$UI$iOS$setMODAL_PRESENTATION_OVER_CURRENT_CONTEXT,
setMODAL_PRESENTATION_OVER_CURRENT_FULL_SCREEN: typeof Titanium$UI$iOS$setMODAL_PRESENTATION_OVER_CURRENT_FULL_SCREEN,
getAppBadge: typeof Titanium$UI$iOS$getAppBadge,
setAppBadge: typeof Titanium$UI$iOS$setAppBadge,
getAppSupportsShakeToEdit: typeof Titanium$UI$iOS$getAppSupportsShakeToEdit,
setAppSupportsShakeToEdit: typeof Titanium$UI$iOS$setAppSupportsShakeToEdit,
getStatusBarBackgroundColor: typeof Titanium$UI$iOS$getStatusBarBackgroundColor,
setStatusBarBackgroundColor: typeof Titanium$UI$iOS$setStatusBarBackgroundColor,
        bubbleParent: typeof Titanium$UI$iOS$bubbleParent,
apiName: typeof Titanium$UI$iOS$apiName,
LARGE_TITLE_DISPLAY_MODE_AUTOMATIC: typeof Titanium$UI$iOS$LARGE_TITLE_DISPLAY_MODE_AUTOMATIC,
LARGE_TITLE_DISPLAY_MODE_ALWAYS: typeof Titanium$UI$iOS$LARGE_TITLE_DISPLAY_MODE_ALWAYS,
LARGE_TITLE_DISPLAY_MODE_NEVER: typeof Titanium$UI$iOS$LARGE_TITLE_DISPLAY_MODE_NEVER,
LIVEPHOTO_BADGE_OPTIONS_OVER_CONTENT: typeof Titanium$UI$iOS$LIVEPHOTO_BADGE_OPTIONS_OVER_CONTENT,
LIVEPHOTO_BADGE_OPTIONS_LIVE_OFF: typeof Titanium$UI$iOS$LIVEPHOTO_BADGE_OPTIONS_LIVE_OFF,
ANIMATION_CURVE_EASE_IN: typeof Titanium$UI$iOS$ANIMATION_CURVE_EASE_IN,
ANIMATION_CURVE_EASE_IN_OUT: typeof Titanium$UI$iOS$ANIMATION_CURVE_EASE_IN_OUT,
ANIMATION_CURVE_EASE_OUT: typeof Titanium$UI$iOS$ANIMATION_CURVE_EASE_OUT,
ANIMATION_CURVE_LINEAR: typeof Titanium$UI$iOS$ANIMATION_CURVE_LINEAR,
ATTRIBUTE_FONT: typeof Titanium$UI$iOS$ATTRIBUTE_FONT,
ATTRIBUTE_FOREGROUND_COLOR: typeof Titanium$UI$iOS$ATTRIBUTE_FOREGROUND_COLOR,
ATTRIBUTE_BACKGROUND_COLOR: typeof Titanium$UI$iOS$ATTRIBUTE_BACKGROUND_COLOR,
ATTRIBUTE_LIGATURE: typeof Titanium$UI$iOS$ATTRIBUTE_LIGATURE,
ATTRIBUTE_LETTERPRESS_STYLE: typeof Titanium$UI$iOS$ATTRIBUTE_LETTERPRESS_STYLE,
ATTRIBUTE_KERN: typeof Titanium$UI$iOS$ATTRIBUTE_KERN,
ATTRIBUTE_STRIKETHROUGH_STYLE: typeof Titanium$UI$iOS$ATTRIBUTE_STRIKETHROUGH_STYLE,
ATTRIBUTE_UNDERLINES_STYLE: typeof Titanium$UI$iOS$ATTRIBUTE_UNDERLINES_STYLE,
ATTRIBUTE_STROKE_COLOR: typeof Titanium$UI$iOS$ATTRIBUTE_STROKE_COLOR,
ATTRIBUTE_STROKE_WIDTH: typeof Titanium$UI$iOS$ATTRIBUTE_STROKE_WIDTH,
ATTRIBUTE_SHADOW: typeof Titanium$UI$iOS$ATTRIBUTE_SHADOW,
ATTRIBUTE_WRITING_DIRECTION: typeof Titanium$UI$iOS$ATTRIBUTE_WRITING_DIRECTION,
ATTRIBUTE_TEXT_EFFECT: typeof Titanium$UI$iOS$ATTRIBUTE_TEXT_EFFECT,
ATTRIBUTE_LINK: typeof Titanium$UI$iOS$ATTRIBUTE_LINK,
ATTRIBUTE_BASELINE_OFFSET: typeof Titanium$UI$iOS$ATTRIBUTE_BASELINE_OFFSET,
ATTRIBUTE_UNDERLINE_COLOR: typeof Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_COLOR,
ATTRIBUTE_STRIKETHROUGH_COLOR: typeof Titanium$UI$iOS$ATTRIBUTE_STRIKETHROUGH_COLOR,
ATTRIBUTE_OBLIQUENESS: typeof Titanium$UI$iOS$ATTRIBUTE_OBLIQUENESS,
ATTRIBUTE_EXPANSION: typeof Titanium$UI$iOS$ATTRIBUTE_EXPANSION,
ATTRIBUTE_UNDERLINE_STYLE_NONE: typeof Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_STYLE_NONE,
ATTRIBUTE_UNDERLINE_STYLE_SINGLE: typeof Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_STYLE_SINGLE,
ATTRIBUTE_UNDERLINE_STYLE_THICK: typeof Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_STYLE_THICK,
ATTRIBUTE_UNDERLINE_STYLE_DOUBLE: typeof Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_STYLE_DOUBLE,
ATTRIBUTE_UNDERLINE_PATTERN_SOLID: typeof Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_PATTERN_SOLID,
ATTRIBUTE_UNDERLINE_PATTERN_DOT: typeof Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_PATTERN_DOT,
ATTRIBUTE_UNDERLINE_PATTERN_DASH: typeof Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_PATTERN_DASH,
ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT: typeof Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT,
ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT_DOT: typeof Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT_DOT,
ATTRIBUTE_UNDERLINE_BY_WORD: typeof Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_BY_WORD,
ATTRIBUTE_WRITING_DIRECTION_EMBEDDING: typeof Titanium$UI$iOS$ATTRIBUTE_WRITING_DIRECTION_EMBEDDING,
ATTRIBUTE_WRITING_DIRECTION_OVERRIDE: typeof Titanium$UI$iOS$ATTRIBUTE_WRITING_DIRECTION_OVERRIDE,
ATTRIBUTE_WRITING_DIRECTION_NATURAL: typeof Titanium$UI$iOS$ATTRIBUTE_WRITING_DIRECTION_NATURAL,
ATTRIBUTE_WRITING_DIRECTION_LEFT_TO_RIGHT: typeof Titanium$UI$iOS$ATTRIBUTE_WRITING_DIRECTION_LEFT_TO_RIGHT,
ATTRIBUTE_WRITING_DIRECTION_RIGHT_TO_LEFT: typeof Titanium$UI$iOS$ATTRIBUTE_WRITING_DIRECTION_RIGHT_TO_LEFT,
AUTODETECT_ADDRESS: typeof Titanium$UI$iOS$AUTODETECT_ADDRESS,
AUTODETECT_ALL: typeof Titanium$UI$iOS$AUTODETECT_ALL,
AUTODETECT_CALENDAR: typeof Titanium$UI$iOS$AUTODETECT_CALENDAR,
AUTODETECT_LINK: typeof Titanium$UI$iOS$AUTODETECT_LINK,
AUTODETECT_NONE: typeof Titanium$UI$iOS$AUTODETECT_NONE,
AUTODETECT_PHONE: typeof Titanium$UI$iOS$AUTODETECT_PHONE,
BLEND_MODE_CLEAR: typeof Titanium$UI$iOS$BLEND_MODE_CLEAR,
BLEND_MODE_COLOR: typeof Titanium$UI$iOS$BLEND_MODE_COLOR,
BLEND_MODE_COLOR_BURN: typeof Titanium$UI$iOS$BLEND_MODE_COLOR_BURN,
BLEND_MODE_COLOR_DODGE: typeof Titanium$UI$iOS$BLEND_MODE_COLOR_DODGE,
BLEND_MODE_COPY: typeof Titanium$UI$iOS$BLEND_MODE_COPY,
BLEND_MODE_DARKEN: typeof Titanium$UI$iOS$BLEND_MODE_DARKEN,
BLEND_MODE_DESTINATION_ATOP: typeof Titanium$UI$iOS$BLEND_MODE_DESTINATION_ATOP,
BLEND_MODE_DESTINATION_IN: typeof Titanium$UI$iOS$BLEND_MODE_DESTINATION_IN,
BLEND_MODE_DESTINATION_OUT: typeof Titanium$UI$iOS$BLEND_MODE_DESTINATION_OUT,
BLEND_MODE_DESTINATION_OVER: typeof Titanium$UI$iOS$BLEND_MODE_DESTINATION_OVER,
BLEND_MODE_DIFFERENCE: typeof Titanium$UI$iOS$BLEND_MODE_DIFFERENCE,
BLEND_MODE_EXCLUSION: typeof Titanium$UI$iOS$BLEND_MODE_EXCLUSION,
BLEND_MODE_HARD_LIGHT: typeof Titanium$UI$iOS$BLEND_MODE_HARD_LIGHT,
BLEND_MODE_HUE: typeof Titanium$UI$iOS$BLEND_MODE_HUE,
BLEND_MODE_LIGHTEN: typeof Titanium$UI$iOS$BLEND_MODE_LIGHTEN,
BLEND_MODE_LUMINOSITY: typeof Titanium$UI$iOS$BLEND_MODE_LUMINOSITY,
BLEND_MODE_MULTIPLY: typeof Titanium$UI$iOS$BLEND_MODE_MULTIPLY,
BLEND_MODE_NORMAL: typeof Titanium$UI$iOS$BLEND_MODE_NORMAL,
BLEND_MODE_OVERLAY: typeof Titanium$UI$iOS$BLEND_MODE_OVERLAY,
BLEND_MODE_PLUS_DARKER: typeof Titanium$UI$iOS$BLEND_MODE_PLUS_DARKER,
BLEND_MODE_PLUS_LIGHTER: typeof Titanium$UI$iOS$BLEND_MODE_PLUS_LIGHTER,
BLEND_MODE_SATURATION: typeof Titanium$UI$iOS$BLEND_MODE_SATURATION,
BLEND_MODE_SCREEN: typeof Titanium$UI$iOS$BLEND_MODE_SCREEN,
BLEND_MODE_SOFT_LIGHT: typeof Titanium$UI$iOS$BLEND_MODE_SOFT_LIGHT,
BLEND_MODE_SOURCE_ATOP: typeof Titanium$UI$iOS$BLEND_MODE_SOURCE_ATOP,
BLEND_MODE_SOURCE_IN: typeof Titanium$UI$iOS$BLEND_MODE_SOURCE_IN,
BLEND_MODE_SOURCE_OUT: typeof Titanium$UI$iOS$BLEND_MODE_SOURCE_OUT,
BLEND_MODE_XOR: typeof Titanium$UI$iOS$BLEND_MODE_XOR,
BLUR_EFFECT_STYLE_EXTRA_LIGHT: typeof Titanium$UI$iOS$BLUR_EFFECT_STYLE_EXTRA_LIGHT,
BLUR_EFFECT_STYLE_LIGHT: typeof Titanium$UI$iOS$BLUR_EFFECT_STYLE_LIGHT,
BLUR_EFFECT_STYLE_DARK: typeof Titanium$UI$iOS$BLUR_EFFECT_STYLE_DARK,
BLUR_EFFECT_STYLE_REGULAR: typeof Titanium$UI$iOS$BLUR_EFFECT_STYLE_REGULAR,
BLUR_EFFECT_STYLE_PROMINENT: typeof Titanium$UI$iOS$BLUR_EFFECT_STYLE_PROMINENT,
AD_SIZE_PORTRAIT: typeof Titanium$UI$iOS$AD_SIZE_PORTRAIT,
AD_SIZE_LANDSCAPE: typeof Titanium$UI$iOS$AD_SIZE_LANDSCAPE,
CLIP_MODE_DEFAULT: typeof Titanium$UI$iOS$CLIP_MODE_DEFAULT,
CLIP_MODE_DISABLED: typeof Titanium$UI$iOS$CLIP_MODE_DISABLED,
CLIP_MODE_ENABLED: typeof Titanium$UI$iOS$CLIP_MODE_ENABLED,
COLLISION_MODE_ALL: typeof Titanium$UI$iOS$COLLISION_MODE_ALL,
COLLISION_MODE_BOUNDARY: typeof Titanium$UI$iOS$COLLISION_MODE_BOUNDARY,
COLLISION_MODE_ITEM: typeof Titanium$UI$iOS$COLLISION_MODE_ITEM,
forceTouchSupported: typeof Titanium$UI$iOS$forceTouchSupported,
FEEDBACK_GENERATOR_TYPE_SELECTION: typeof Titanium$UI$iOS$FEEDBACK_GENERATOR_TYPE_SELECTION,
FEEDBACK_GENERATOR_TYPE_IMPACT: typeof Titanium$UI$iOS$FEEDBACK_GENERATOR_TYPE_IMPACT,
FEEDBACK_GENERATOR_TYPE_NOTIFICATION: typeof Titanium$UI$iOS$FEEDBACK_GENERATOR_TYPE_NOTIFICATION,
FEEDBACK_GENERATOR_NOTIFICATION_TYPE_SUCCESS: typeof Titanium$UI$iOS$FEEDBACK_GENERATOR_NOTIFICATION_TYPE_SUCCESS,
FEEDBACK_GENERATOR_NOTIFICATION_TYPE_WARNING: typeof Titanium$UI$iOS$FEEDBACK_GENERATOR_NOTIFICATION_TYPE_WARNING,
FEEDBACK_GENERATOR_NOTIFICATION_TYPE_ERROR: typeof Titanium$UI$iOS$FEEDBACK_GENERATOR_NOTIFICATION_TYPE_ERROR,
FEEDBACK_GENERATOR_IMPACT_STYLE_LIGHT: typeof Titanium$UI$iOS$FEEDBACK_GENERATOR_IMPACT_STYLE_LIGHT,
FEEDBACK_GENERATOR_IMPACT_STYLE_MEDIUM: typeof Titanium$UI$iOS$FEEDBACK_GENERATOR_IMPACT_STYLE_MEDIUM,
FEEDBACK_GENERATOR_IMPACT_STYLE_HEAVY: typeof Titanium$UI$iOS$FEEDBACK_GENERATOR_IMPACT_STYLE_HEAVY,
LIVEPHOTO_PLAYBACK_STYLE_FULL: typeof Titanium$UI$iOS$LIVEPHOTO_PLAYBACK_STYLE_FULL,
LIVEPHOTO_PLAYBACK_STYLE_HINT: typeof Titanium$UI$iOS$LIVEPHOTO_PLAYBACK_STYLE_HINT,
MENU_POPUP_ARROW_DIRECTION_UP: typeof Titanium$UI$iOS$MENU_POPUP_ARROW_DIRECTION_UP,
MENU_POPUP_ARROW_DIRECTION_DOWN: typeof Titanium$UI$iOS$MENU_POPUP_ARROW_DIRECTION_DOWN,
MENU_POPUP_ARROW_DIRECTION_LEFT: typeof Titanium$UI$iOS$MENU_POPUP_ARROW_DIRECTION_LEFT,
MENU_POPUP_ARROW_DIRECTION_RIGHT: typeof Titanium$UI$iOS$MENU_POPUP_ARROW_DIRECTION_RIGHT,
MENU_POPUP_ARROW_DIRECTION_DEFAULT: typeof Titanium$UI$iOS$MENU_POPUP_ARROW_DIRECTION_DEFAULT,
MODAL_PRESENTATION_CURRENT_CONTEXT: typeof Titanium$UI$iOS$MODAL_PRESENTATION_CURRENT_CONTEXT,
MODAL_PRESENTATION_OVER_CURRENT_CONTEXT: typeof Titanium$UI$iOS$MODAL_PRESENTATION_OVER_CURRENT_CONTEXT,
MODAL_PRESENTATION_OVER_CURRENT_FULL_SCREEN: typeof Titanium$UI$iOS$MODAL_PRESENTATION_OVER_CURRENT_FULL_SCREEN,
MODAL_PRESENTATION_FORMSHEET: typeof Titanium$UI$iOS$MODAL_PRESENTATION_FORMSHEET,
MODAL_PRESENTATION_FULLSCREEN: typeof Titanium$UI$iOS$MODAL_PRESENTATION_FULLSCREEN,
MODAL_PRESENTATION_PAGESHEET: typeof Titanium$UI$iOS$MODAL_PRESENTATION_PAGESHEET,
MODAL_TRANSITION_STYLE_COVER_VERTICAL: typeof Titanium$UI$iOS$MODAL_TRANSITION_STYLE_COVER_VERTICAL,
MODAL_TRANSITION_STYLE_CROSS_DISSOLVE: typeof Titanium$UI$iOS$MODAL_TRANSITION_STYLE_CROSS_DISSOLVE,
MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL: typeof Titanium$UI$iOS$MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL,
MODAL_TRANSITION_STYLE_PARTIAL_CURL: typeof Titanium$UI$iOS$MODAL_TRANSITION_STYLE_PARTIAL_CURL,
PUSH_MODE_CONTINUOUS: typeof Titanium$UI$iOS$PUSH_MODE_CONTINUOUS,
PUSH_MODE_INSTANTANEOUS: typeof Titanium$UI$iOS$PUSH_MODE_INSTANTANEOUS,
PREVIEW_ACTION_STYLE_DEFAULT: typeof Titanium$UI$iOS$PREVIEW_ACTION_STYLE_DEFAULT,
PREVIEW_ACTION_STYLE_SELECTED: typeof Titanium$UI$iOS$PREVIEW_ACTION_STYLE_SELECTED,
PREVIEW_ACTION_STYLE_DESTRUCTIVE: typeof Titanium$UI$iOS$PREVIEW_ACTION_STYLE_DESTRUCTIVE,
ROW_ACTION_STYLE_DEFAULT: typeof Titanium$UI$iOS$ROW_ACTION_STYLE_DEFAULT,
ROW_ACTION_STYLE_DESTRUCTIVE: typeof Titanium$UI$iOS$ROW_ACTION_STYLE_DESTRUCTIVE,
ROW_ACTION_STYLE_NORMAL: typeof Titanium$UI$iOS$ROW_ACTION_STYLE_NORMAL,
SCROLL_DECELERATION_RATE_FAST: typeof Titanium$UI$iOS$SCROLL_DECELERATION_RATE_FAST,
SCROLL_DECELERATION_RATE_NORMAL: typeof Titanium$UI$iOS$SCROLL_DECELERATION_RATE_NORMAL,
KEYBOARD_DISMISS_MODE_NONE: typeof Titanium$UI$iOS$KEYBOARD_DISMISS_MODE_NONE,
KEYBOARD_DISMISS_MODE_ON_DRAG: typeof Titanium$UI$iOS$KEYBOARD_DISMISS_MODE_ON_DRAG,
KEYBOARD_DISMISS_MODE_INTERACTIVE: typeof Titanium$UI$iOS$KEYBOARD_DISMISS_MODE_INTERACTIVE,
SEARCH_BAR_STYLE_PROMINENT: typeof Titanium$UI$iOS$SEARCH_BAR_STYLE_PROMINENT,
SEARCH_BAR_STYLE_MINIMAL: typeof Titanium$UI$iOS$SEARCH_BAR_STYLE_MINIMAL,
WEBVIEW_NAVIGATIONTYPE_LINK_CLICKED: typeof Titanium$UI$iOS$WEBVIEW_NAVIGATIONTYPE_LINK_CLICKED,
WEBVIEW_NAVIGATIONTYPE_FORM_SUBMITTED: typeof Titanium$UI$iOS$WEBVIEW_NAVIGATIONTYPE_FORM_SUBMITTED,
WEBVIEW_NAVIGATIONTYPE_BACK_FORWARD: typeof Titanium$UI$iOS$WEBVIEW_NAVIGATIONTYPE_BACK_FORWARD,
WEBVIEW_NAVIGATIONTYPE_RELOAD: typeof Titanium$UI$iOS$WEBVIEW_NAVIGATIONTYPE_RELOAD,
WEBVIEW_NAVIGATIONTYPE_FORM_RESUBMITTED: typeof Titanium$UI$iOS$WEBVIEW_NAVIGATIONTYPE_FORM_RESUBMITTED,
WEBVIEW_NAVIGATIONTYPE_OTHER: typeof Titanium$UI$iOS$WEBVIEW_NAVIGATIONTYPE_OTHER,
TABLEVIEW_INDEX_SEARCH: typeof Titanium$UI$iOS$TABLEVIEW_INDEX_SEARCH,
SHORTCUT_ICON_TYPE_COMPOSE: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_COMPOSE,
SHORTCUT_ICON_TYPE_PLAY: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_PLAY,
SHORTCUT_ICON_TYPE_PAUSE: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_PAUSE,
SHORTCUT_ICON_TYPE_ADD: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_ADD,
SHORTCUT_ICON_TYPE_LOCATION: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_LOCATION,
SHORTCUT_ICON_TYPE_SEARCH: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_SEARCH,
SHORTCUT_ICON_TYPE_SHARE: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_SHARE,
SHORTCUT_ICON_TYPE_PROHIBIT: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_PROHIBIT,
SHORTCUT_ICON_TYPE_CONTACT: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_CONTACT,
SHORTCUT_ICON_TYPE_HOME: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_HOME,
SHORTCUT_ICON_TYPE_MARK_LOCATION: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_MARK_LOCATION,
SHORTCUT_ICON_TYPE_FAVORITE: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_FAVORITE,
SHORTCUT_ICON_TYPE_LOVE: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_LOVE,
SHORTCUT_ICON_TYPE_CLOUD: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_CLOUD,
SHORTCUT_ICON_TYPE_INVITATION: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_INVITATION,
SHORTCUT_ICON_TYPE_CONFIRMATION: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_CONFIRMATION,
SHORTCUT_ICON_TYPE_MAIL: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_MAIL,
SHORTCUT_ICON_TYPE_MESSAGE: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_MESSAGE,
SHORTCUT_ICON_TYPE_DATE: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_DATE,
SHORTCUT_ICON_TYPE_TIME: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_TIME,
SHORTCUT_ICON_TYPE_CAPTURE_PHOTO: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_CAPTURE_PHOTO,
SHORTCUT_ICON_TYPE_CAPTURE_VIDEO: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_CAPTURE_VIDEO,
SHORTCUT_ICON_TYPE_TASK: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_TASK,
SHORTCUT_ICON_TYPE_TASK_COMPLETED: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_TASK_COMPLETED,
SHORTCUT_ICON_TYPE_ALARM: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_ALARM,
SHORTCUT_ICON_TYPE_BOOKMARK: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_BOOKMARK,
SHORTCUT_ICON_TYPE_SHUFFLE: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_SHUFFLE,
SHORTCUT_ICON_TYPE_AUDIO: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_AUDIO,
SHORTCUT_ICON_TYPE_UPDATE: typeof Titanium$UI$iOS$SHORTCUT_ICON_TYPE_UPDATE,
appBadge: typeof Titanium$UI$iOS$appBadge,
appSupportsShakeToEdit: typeof Titanium$UI$iOS$appSupportsShakeToEdit,
statusBarBackgroundColor: typeof Titanium$UI$iOS$statusBarBackgroundColor,
CREDENTIAL_PERSISTENCE_NONE: typeof Titanium$UI$iOS$CREDENTIAL_PERSISTENCE_NONE,
CREDENTIAL_PERSISTENCE_FOR_SESSION: typeof Titanium$UI$iOS$CREDENTIAL_PERSISTENCE_FOR_SESSION,
CREDENTIAL_PERSISTENCE_PERMANENT: typeof Titanium$UI$iOS$CREDENTIAL_PERSISTENCE_PERMANENT,
CREDENTIAL_PERSISTENCE_SYNCHRONIZABLE: typeof Titanium$UI$iOS$CREDENTIAL_PERSISTENCE_SYNCHRONIZABLE,
AUDIOVISUAL_MEDIA_TYPE_NONE: typeof Titanium$UI$iOS$AUDIOVISUAL_MEDIA_TYPE_NONE,
AUDIOVISUAL_MEDIA_TYPE_AUDIO: typeof Titanium$UI$iOS$AUDIOVISUAL_MEDIA_TYPE_AUDIO,
AUDIOVISUAL_MEDIA_TYPE_VIDEO: typeof Titanium$UI$iOS$AUDIOVISUAL_MEDIA_TYPE_VIDEO,
AUDIOVISUAL_MEDIA_TYPE_ALL: typeof Titanium$UI$iOS$AUDIOVISUAL_MEDIA_TYPE_ALL,
CACHE_POLICY_USE_PROTOCOL_CACHE_POLICY: typeof Titanium$UI$iOS$CACHE_POLICY_USE_PROTOCOL_CACHE_POLICY,
CACHE_POLICY_RELOAD_IGNORING_LOCAL_CACHE_DATA: typeof Titanium$UI$iOS$CACHE_POLICY_RELOAD_IGNORING_LOCAL_CACHE_DATA,
CACHE_POLICY_RETURN_CACHE_DATA_ELSE_LOAD: typeof Titanium$UI$iOS$CACHE_POLICY_RETURN_CACHE_DATA_ELSE_LOAD,
CACHE_POLICY_RETURN_CACHE_DATA_DONT_LOAD: typeof Titanium$UI$iOS$CACHE_POLICY_RETURN_CACHE_DATA_DONT_LOAD,
SELECTION_GRANULARITY_DYNAMIC: typeof Titanium$UI$iOS$SELECTION_GRANULARITY_DYNAMIC,
SELECTION_GRANULARITY_CHARACTER: typeof Titanium$UI$iOS$SELECTION_GRANULARITY_CHARACTER,
ACTION_POLICY_CANCEL: typeof Titanium$UI$iOS$ACTION_POLICY_CANCEL,
ACTION_POLICY_ALLOW: typeof Titanium$UI$iOS$ACTION_POLICY_ALLOW,
INJECTION_TIME_DOCUMENT_START: typeof Titanium$UI$iOS$INJECTION_TIME_DOCUMENT_START,
INJECTION_TIME_DOCUMENT_END: typeof Titanium$UI$iOS$INJECTION_TIME_DOCUMENT_END,
        
        
        AlertDialogStyle: typeof npm$namespace$Titanium$UI$iOS$AlertDialogStyle,
AnimationStyle: typeof npm$namespace$Titanium$UI$iOS$AnimationStyle,
ProgressBarStyle: typeof npm$namespace$Titanium$UI$iOS$ProgressBarStyle,
RowAnimationStyle: typeof npm$namespace$Titanium$UI$iOS$RowAnimationStyle,
ScrollIndicatorStyle: typeof npm$namespace$Titanium$UI$iOS$ScrollIndicatorStyle,
StatusBar: typeof npm$namespace$Titanium$UI$iOS$StatusBar,
SystemButton: typeof npm$namespace$Titanium$UI$iOS$SystemButton,
SystemButtonStyle: typeof npm$namespace$Titanium$UI$iOS$SystemButtonStyle,
SystemIcon: typeof npm$namespace$Titanium$UI$iOS$SystemIcon,
TableViewCellSelectionStyle: typeof npm$namespace$Titanium$UI$iOS$TableViewCellSelectionStyle,
TableViewScrollPosition: typeof npm$namespace$Titanium$UI$iOS$TableViewScrollPosition,
TableViewStyle: typeof npm$namespace$Titanium$UI$iOS$TableViewStyle,
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iOS$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iOS$apiName: string;


/**
 * Automatically use the large out-of-line title based on the state of the p
 * revious item in the navigation bar.
 */
declare var Titanium$UI$iOS$LARGE_TITLE_DISPLAY_MODE_AUTOMATIC: number;


/**
 * Always use a larger title when this item is top most.
 */
declare var Titanium$UI$iOS$LARGE_TITLE_DISPLAY_MODE_ALWAYS: number;


/**
 * Never use a larger title when this item is top most.
 */
declare var Titanium$UI$iOS$LARGE_TITLE_DISPLAY_MODE_NEVER: number;


/**
 * Include treatments so this image can be shown directly over the content
 * of the Live Photo.
 */
declare var Titanium$UI$iOS$LIVEPHOTO_BADGE_OPTIONS_OVER_CONTENT: number;


/**
 * To indicate that the Live Photo aspect is turned off and it will
 * be treated as a still (e.g. for sharing).
 */
declare var Titanium$UI$iOS$LIVEPHOTO_BADGE_OPTIONS_LIVE_OFF: number;


/**
 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that starts
 * slowly and speeds up.
 */
declare var Titanium$UI$iOS$ANIMATION_CURVE_EASE_IN: number;


/**
 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that starts
 * slowly, and speeds up, then slows down at the end of the animation.
 */
declare var Titanium$UI$iOS$ANIMATION_CURVE_EASE_IN_OUT: number;


/**
 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that starts
 * quickly, then slows down at the end of the animation.
 */
declare var Titanium$UI$iOS$ANIMATION_CURVE_EASE_OUT: number;


/**
 * Use with [Animation.curve](Titanium.UI.Animation.curve) to specify an animation that proceeds
 * at a constant rate.
 */
declare var Titanium$UI$iOS$ANIMATION_CURVE_LINEAR: number;


/**
 * Use with <Attribute.type> to specify a font.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_FONT: number;


/**
 * Use with <Attribute.type> to specify a font color.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_FOREGROUND_COLOR: number;


/**
 * Use with <Attribute.type> to specify a background color.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_BACKGROUND_COLOR: number;


/**
 * Use with <Attribute.type> to enable or disable ligatures.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_LIGATURE: number;


/**
 * Use with <Attribute.value> to use a letterpress text effect.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_LETTERPRESS_STYLE: number;


/**
 * Use with <Attribute.type> to specify kerning (space between characters).
 */
declare var Titanium$UI$iOS$ATTRIBUTE_KERN: number;


/**
 * Use with <Attribute.type> to place a horizontal line through the text.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_STRIKETHROUGH_STYLE: number;


/**
 * Use with <Attribute.type> to place a horizontal line under the text.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_UNDERLINES_STYLE: number;


/**
 * Use with <Attribute.type> to specify a color for the stroke text.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_STROKE_COLOR: number;


/**
 * Use with <Attribute.type> to specify the width of the stroke text.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_STROKE_WIDTH: number;


/**
 * Use with <Attribute.type> to display a shadow behind the text.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_SHADOW: number;


/**
 * Use with <Attribute.type> to control the direction of the text.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_WRITING_DIRECTION: number;


/**
 * Use with <Attribute.type> to apply a text effect.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_TEXT_EFFECT: number;


/**
 * Use with <Attribute.type> to create a link.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_LINK: number;


/**
 * Use with <Attribute.type> to apply a different baseline to the text.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_BASELINE_OFFSET: number;


/**
 * Use with <Attribute.type> to change the color of the horizontal line.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_COLOR: number;


/**
 * Use with <Attribute.type> to change the color of the horizontal line.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_STRIKETHROUGH_COLOR: number;


/**
 * Use with <Attribute.type> to skew the text.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_OBLIQUENESS: number;


/**
 * Use with <Attribute.type> to stretch the text horizontally.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_EXPANSION: number;


/**
 * Use with <Attribute.value> to not draw a line.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_STYLE_NONE: number;


/**
 * Use with <Attribute.value> to draw a single line.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_STYLE_SINGLE: number;


/**
 * Use with <Attribute.value> to draw a thick line.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_STYLE_THICK: number;


/**
 * Use with <Attribute.value> to draw a double line.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_STYLE_DOUBLE: number;


/**
 * Use with <Attribute.value> to draw a solid line.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_PATTERN_SOLID: number;


/**
 * Use with <Attribute.value> to draw a dotted line.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_PATTERN_DOT: number;


/**
 * Use with <Attribute.value> to draw a dashed line.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_PATTERN_DASH: number;


/**
 * Use with <Attribute.value> to draw an alternating line of dashes and dots.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT: number;


/**
 * Use with <Attribute.value> to draw an alternating line of dashes and two dots.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT_DOT: number;


/**
 * Use with <Attribute.value> to draw a line only underneath or through words.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_UNDERLINE_BY_WORD: number;


/**
 * Use with <Attribute.value> to use the embedded text direction.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_WRITING_DIRECTION_EMBEDDING: number;


/**
 * Use with <Attribute.value> to override the text direction.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_WRITING_DIRECTION_OVERRIDE: number;


/**
 * Use with <Attribute.value> to use the
 * [Unicode Bidirection Algorithm rules P2 and P3](http://www.unicode.org/reports/tr9/#The_Paragraph_Level)
 * to determine which direction to use.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_WRITING_DIRECTION_NATURAL: number;


/**
 * Use with <Attribute.value> to write text left to right.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_WRITING_DIRECTION_LEFT_TO_RIGHT: number;


/**
 * Use with <Attribute.value> to write text right to left.
 */
declare var Titanium$UI$iOS$ATTRIBUTE_WRITING_DIRECTION_RIGHT_TO_LEFT: number;


/**
 * Converts strings formatted as addresses into clickable links.
 */
declare var Titanium$UI$iOS$AUTODETECT_ADDRESS: number;


/**
 * Converts all detectable types of data into clickable links.
 */
declare var Titanium$UI$iOS$AUTODETECT_ALL: number;


/**
 * Converts strings formatted as calendar events into clickable links.
 */
declare var Titanium$UI$iOS$AUTODETECT_CALENDAR: number;


/**
 * Converts strings formatted as URLs into clickable links.
 */
declare var Titanium$UI$iOS$AUTODETECT_LINK: number;


/**
 * Disables converting strings into clickable links.
 */
declare var Titanium$UI$iOS$AUTODETECT_NONE: number;


/**
 * Converts strings formatted as phone numbers into clickable links.
 */
declare var Titanium$UI$iOS$AUTODETECT_PHONE: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_CLEAR: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_COLOR: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_COLOR_BURN: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_COLOR_DODGE: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_COPY: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_DARKEN: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_DESTINATION_ATOP: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_DESTINATION_IN: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_DESTINATION_OUT: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_DESTINATION_OVER: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_DIFFERENCE: number;


/**
 * Image mode constant. Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_EXCLUSION: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_HARD_LIGHT: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_HUE: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_LIGHTEN: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_LUMINOSITY: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_MULTIPLY: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_NORMAL: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_OVERLAY: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_PLUS_DARKER: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_PLUS_LIGHTER: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_SATURATION: number;


/**
 * Image mode constant. Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_SCREEN: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_SOFT_LIGHT: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_SOURCE_ATOP: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_SOURCE_IN: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_SOURCE_OUT: number;


/**
 * Use with [MaskedImage.mode](Titanium.UI.MaskedImage.mode) to specify a blend mode.
 */
declare var Titanium$UI$iOS$BLEND_MODE_XOR: number;


/**
 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
 */
declare var Titanium$UI$iOS$BLUR_EFFECT_STYLE_EXTRA_LIGHT: number;


/**
 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
 */
declare var Titanium$UI$iOS$BLUR_EFFECT_STYLE_LIGHT: number;


/**
 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
 */
declare var Titanium$UI$iOS$BLUR_EFFECT_STYLE_DARK: number;


/**
 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
 */
declare var Titanium$UI$iOS$BLUR_EFFECT_STYLE_REGULAR: number;


/**
 * Use with [BlurView.effect](Titanium.UI.iOS.BlurView.effect) to specify a blur effect.
 */
declare var Titanium$UI$iOS$BLUR_EFFECT_STYLE_PROMINENT: number;


/**
 * Use with [AdView.adSize](Titanium.UI.iOS.AdView.adSize) to specify a banner ad size
 * appropriate for portrait orientations.
 */
declare var Titanium$UI$iOS$AD_SIZE_PORTRAIT: string;


/**
 * Use with [AdView.adSize](Titanium.UI.iOS.AdView.adSize) to specify a banner ad size
 * appropriate for landscape orientations.
 */
declare var Titanium$UI$iOS$AD_SIZE_LANDSCAPE: string;


/**
 * Use with <Titanium.UI.View.clipMode> to specify clipping behavior.
 */
declare var Titanium$UI$iOS$CLIP_MODE_DEFAULT: number;


/**
 * Use with <Titanium.UI.View.clipMode> to specify clipping behavior.
 */
declare var Titanium$UI$iOS$CLIP_MODE_DISABLED: number;


/**
 * Use with <Titanium.UI.View.clipMode> to specify clipping behavior.
 */
declare var Titanium$UI$iOS$CLIP_MODE_ENABLED: number;


/**
 * Use with <Titanium.UI.iOS.CollisionBehavior.collisionMode> to specify collisions with both items and
 * boundaries.
 */
declare var Titanium$UI$iOS$COLLISION_MODE_ALL: number;


/**
 * Use with <Titanium.UI.iOS.CollisionBehavior.collisionMode> to specify collisions with
 * boundaries only.
 */
declare var Titanium$UI$iOS$COLLISION_MODE_BOUNDARY: number;


/**
 * Use with <Titanium.UI.iOS.CollisionBehavior.collisionMode> to specify collisions with items only.
 */
declare var Titanium$UI$iOS$COLLISION_MODE_ITEM: number;


/**
 * Determines if the 3D-Touch capability "Force Touch" is supported (`true`) or not (`false`) by the device.
 */
declare var Titanium$UI$iOS$forceTouchSupported: boolean;


/**
 * The feedback type to be used when specifying a selection in <Titanium.UI.iOS.FeedbackGenerator>.
 */
declare var Titanium$UI$iOS$FEEDBACK_GENERATOR_TYPE_SELECTION: number;


/**
 * The feedback type to be used when specifying an impact in <Titanium.UI.iOS.FeedbackGenerator>.
 */
declare var Titanium$UI$iOS$FEEDBACK_GENERATOR_TYPE_IMPACT: number;


/**
 * The feedback type to be used when specifying a received notification in <Titanium.UI.iOS.FeedbackGenerator>.
 */
declare var Titanium$UI$iOS$FEEDBACK_GENERATOR_TYPE_NOTIFICATION: number;


/**
 * The success notification type used as the argument in <Titanium.UI.iOS.FeedbackGenerator.notificationOccurred>.
 */
declare var Titanium$UI$iOS$FEEDBACK_GENERATOR_NOTIFICATION_TYPE_SUCCESS: number;


/**
 * The warning notification type used as the argument in <Titanium.UI.iOS.FeedbackGenerator.notificationOccurred>.
 */
declare var Titanium$UI$iOS$FEEDBACK_GENERATOR_NOTIFICATION_TYPE_WARNING: number;


/**
 * The error notification type used as the argument in <Titanium.UI.iOS.FeedbackGenerator.notificationOccurred>.
 */
declare var Titanium$UI$iOS$FEEDBACK_GENERATOR_NOTIFICATION_TYPE_ERROR: number;


/**
 * The light impact style used as the `style` argument when creating a <Titanium.UI.iOS.FeedbackGenerator> with the
 * type <Titanium.UI.iOS.FEEDBACK_GENERATOR_TYPE_IMPACT>.
 */
declare var Titanium$UI$iOS$FEEDBACK_GENERATOR_IMPACT_STYLE_LIGHT: number;


/**
 * The medium impact style used as the `style` argument when creating a <Titanium.UI.iOS.FeedbackGenerator> with the
 * type <Titanium.UI.iOS.FEEDBACK_GENERATOR_TYPE_IMPACT>.
 */
declare var Titanium$UI$iOS$FEEDBACK_GENERATOR_IMPACT_STYLE_MEDIUM: number;


/**
 * The heavy impact style used as the `style` argument when creating a <Titanium.UI.iOS.FeedbackGenerator> with the
 * type <Titanium.UI.iOS.FEEDBACK_GENERATOR_TYPE_IMPACT>.
 */
declare var Titanium$UI$iOS$FEEDBACK_GENERATOR_IMPACT_STYLE_HEAVY: number;


/**
 * Plays back the entire motion and sound content of the Live Photo, including transition
 * effects at the start and end.
 */
declare var Titanium$UI$iOS$LIVEPHOTO_PLAYBACK_STYLE_FULL: number;


/**
 * Plays back only a brief section of the motion content of the Live Photo, without sound.
 */
declare var Titanium$UI$iOS$LIVEPHOTO_PLAYBACK_STYLE_HINT: number;


/**
 * An arrow that points upward.
 */
declare var Titanium$UI$iOS$MENU_POPUP_ARROW_DIRECTION_UP: number;


/**
 * An arrow that points downward.
 */
declare var Titanium$UI$iOS$MENU_POPUP_ARROW_DIRECTION_DOWN: number;


/**
 * An arrow that points toward the left.
 */
declare var Titanium$UI$iOS$MENU_POPUP_ARROW_DIRECTION_LEFT: number;


/**
 * An arrow that points toward the right.
 */
declare var Titanium$UI$iOS$MENU_POPUP_ARROW_DIRECTION_RIGHT: number;


/**
 * An arrow that is automatically aligned.
 */
declare var Titanium$UI$iOS$MENU_POPUP_ARROW_DIRECTION_DEFAULT: number;


/**
 * View presented with the same style as its parent window.
 */
declare var Titanium$UI$iOS$MODAL_PRESENTATION_CURRENT_CONTEXT: number;


/**
 * View presented over its parent window.
 */
declare var Titanium$UI$iOS$MODAL_PRESENTATION_OVER_CURRENT_CONTEXT: number;


/**
 * Presented view covers the screen.
 */
declare var Titanium$UI$iOS$MODAL_PRESENTATION_OVER_CURRENT_FULL_SCREEN: number;


/**
 * Window width and height are smaller than those of the screen and the view is centered on
 * the screen.
 */
declare var Titanium$UI$iOS$MODAL_PRESENTATION_FORMSHEET: number;


/**
 * Window covers the screen.
 */
declare var Titanium$UI$iOS$MODAL_PRESENTATION_FULLSCREEN: number;


/**
 * Window height is the height of the screen and width is equal to screen width in a portrait
 * orientation.
 */
declare var Titanium$UI$iOS$MODAL_PRESENTATION_PAGESHEET: number;


/**
 * When the window is presented, its view slides up from the bottom of the screen. On dismissal,
 * the view slides back down (default.)
 */
declare var Titanium$UI$iOS$MODAL_TRANSITION_STYLE_COVER_VERTICAL: number;


/**
 * When the window is presented, the current view fades out while the new view fades in at the
 * same time. On dismissal, a similar type of cross-fade is used to return to the original view.
 */
declare var Titanium$UI$iOS$MODAL_TRANSITION_STYLE_CROSS_DISSOLVE: number;


/**
 * When the window is presented, the current view initiates a horizontal 3D flip from
 * right-to-left, resulting in the revealing of the new view as if it were on the back of the
 * previous view. On dismissal, the flip occurs from left-to-right, returning to the original
 * view.
 */
declare var Titanium$UI$iOS$MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL: number;


/**
 * When the window is presented, one corner of the current view curls up to reveal the modal
 * view underneath. On dismissal, the curled up page unfurls itself back on top of the modal
 * view.
 */
declare var Titanium$UI$iOS$MODAL_TRANSITION_STYLE_PARTIAL_CURL: number;


/**
 * Use with <Titanium.UI.iOS.PushBehavior.pushMode> to specifiy a continuous force.
 */
declare var Titanium$UI$iOS$PUSH_MODE_CONTINUOUS: number;


/**
 * Use with <Titanium.UI.iOS.PushBehavior.pushMode> to specifiy an instantaneous force.
 */
declare var Titanium$UI$iOS$PUSH_MODE_INSTANTANEOUS: number;


/**
 * The normal style for preview actions.
 */
declare var Titanium$UI$iOS$PREVIEW_ACTION_STYLE_DEFAULT: number;


/**
 * The selected style for preview actions.
 */
declare var Titanium$UI$iOS$PREVIEW_ACTION_STYLE_SELECTED: number;


/**
 * The destructive style for preview actions.
 */
declare var Titanium$UI$iOS$PREVIEW_ACTION_STYLE_DESTRUCTIVE: number;


/**
 * The default style for <RowActionType>.
 */
declare var Titanium$UI$iOS$ROW_ACTION_STYLE_DEFAULT: number;


/**
 * The destructive style for <RowActionType>.
 */
declare var Titanium$UI$iOS$ROW_ACTION_STYLE_DESTRUCTIVE: number;


/**
 * The normal style for <RowActionType>.
 */
declare var Titanium$UI$iOS$ROW_ACTION_STYLE_NORMAL: number;


/**
 * Use with <Titanium.UI.ScrollView.decelerationRate> to control deceleration rate.
 */
declare var Titanium$UI$iOS$SCROLL_DECELERATION_RATE_FAST: number;


/**
 * Use with <Titanium.UI.ScrollView.decelerationRate> to control deceleration rate.
 */
declare var Titanium$UI$iOS$SCROLL_DECELERATION_RATE_NORMAL: number;


/**
 * Use with <Titanium.UI.ScrollView.keyboardDismissMode> to control keyboard dismiss mode.
 */
declare var Titanium$UI$iOS$KEYBOARD_DISMISS_MODE_NONE: number;


/**
 * Use with <Titanium.UI.ScrollView.keyboardDismissMode> to control keyboard dismiss mode.
 */
declare var Titanium$UI$iOS$KEYBOARD_DISMISS_MODE_ON_DRAG: number;


/**
 * Use with <Titanium.UI.ScrollView.keyboardDismissMode> to control keyboard dismiss mode.
 */
declare var Titanium$UI$iOS$KEYBOARD_DISMISS_MODE_INTERACTIVE: number;


/**
 * Use with <Titanium.UI.SearchBar.style> to change the search bar style.
 */
declare var Titanium$UI$iOS$SEARCH_BAR_STYLE_PROMINENT: number;


/**
 * Use with <Titanium.UI.SearchBar.style> to change the search bar style.
 */
declare var Titanium$UI$iOS$SEARCH_BAR_STYLE_MINIMAL: number;


/**
 * User tapped a link.
 */
declare var Titanium$UI$iOS$WEBVIEW_NAVIGATIONTYPE_LINK_CLICKED: number;


/**
 * User submitted a form.
 */
declare var Titanium$UI$iOS$WEBVIEW_NAVIGATIONTYPE_FORM_SUBMITTED: number;


/**
 * User tapped the back or forward button.
 */
declare var Titanium$UI$iOS$WEBVIEW_NAVIGATIONTYPE_BACK_FORWARD: number;


/**
 * User tapped the reload button.
 */
declare var Titanium$UI$iOS$WEBVIEW_NAVIGATIONTYPE_RELOAD: number;


/**
 * User resubmitted a form.
 */
declare var Titanium$UI$iOS$WEBVIEW_NAVIGATIONTYPE_FORM_RESUBMITTED: number;


/**
 * Some other action occurred.
 */
declare var Titanium$UI$iOS$WEBVIEW_NAVIGATIONTYPE_OTHER: number;


/**
 * String that represents the magnifying glass on the table view index bar
 */
declare var Titanium$UI$iOS$TABLEVIEW_INDEX_SEARCH: string;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_COMPOSE: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_PLAY: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_PAUSE: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_ADD: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_LOCATION: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_SEARCH: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_SHARE: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_PROHIBIT: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_CONTACT: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_HOME: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_MARK_LOCATION: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_FAVORITE: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_LOVE: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_CLOUD: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_INVITATION: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_CONFIRMATION: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_MAIL: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_MESSAGE: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_DATE: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_TIME: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_CAPTURE_PHOTO: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_CAPTURE_VIDEO: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_TASK: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_TASK_COMPLETED: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_ALARM: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_BOOKMARK: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_SHUFFLE: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_AUDIO: number;


/**
 * Number that represents the icon used for the application shortcut
 */
declare var Titanium$UI$iOS$SHORTCUT_ICON_TYPE_UPDATE: number;


/**
 * Value of the badge for the application's springboard icon.
 */
declare var Titanium$UI$iOS$appBadge: number;


/**
 * Determines whether the shake to edit system-wide capability is enabled.
 */
declare var Titanium$UI$iOS$appSupportsShakeToEdit: boolean;


/**
 * Sets the global status bar background color for the application.
 */
declare var Titanium$UI$iOS$statusBarBackgroundColor: string;


/**
 * Credential should not be stored.
 */
declare var Titanium$UI$iOS$CREDENTIAL_PERSISTENCE_NONE: number;


/**
 * Credential should be stored only for this session.
 */
declare var Titanium$UI$iOS$CREDENTIAL_PERSISTENCE_FOR_SESSION: number;


/**
 * Credential should be stored in the keychain.
 */
declare var Titanium$UI$iOS$CREDENTIAL_PERSISTENCE_PERMANENT: number;


/**
 * Credential should be stored permanently in the keychain, and in addition should be
 * distributed to other devices based on the owning AppleID.
 */
declare var Titanium$UI$iOS$CREDENTIAL_PERSISTENCE_SYNCHRONIZABLE: number;


/**
 * No media types require a user gesture to begin playing.
 */
declare var Titanium$UI$iOS$AUDIOVISUAL_MEDIA_TYPE_NONE: number;


/**
 * Media types containing audio require a user gesture to begin playing.
 */
declare var Titanium$UI$iOS$AUDIOVISUAL_MEDIA_TYPE_AUDIO: number;


/**
 * Media types containing video require a user gesture to begin playing.
 */
declare var Titanium$UI$iOS$AUDIOVISUAL_MEDIA_TYPE_VIDEO: number;


/**
 * All media types require a user gesture to begin playing.
 */
declare var Titanium$UI$iOS$AUDIOVISUAL_MEDIA_TYPE_ALL: number;


/**
 * Specifies that the caching logic defined in the protocol implementation, if any,
 * is used for a particular URL load request.
 */
declare var Titanium$UI$iOS$CACHE_POLICY_USE_PROTOCOL_CACHE_POLICY: number;


/**
 * Specifies that the data for the URL load should be loaded from the originating source.
 * No existing cache data should be used to satisfy a URL load request.
 */
declare var Titanium$UI$iOS$CACHE_POLICY_RELOAD_IGNORING_LOCAL_CACHE_DATA: number;


/**
 * Specifies that the existing cached data should be used to satisfy the request,
 * regardless of its age or expiration date.
 */
declare var Titanium$UI$iOS$CACHE_POLICY_RETURN_CACHE_DATA_ELSE_LOAD: number;


/**
 * Specifies that the existing cache data should be used to satisfy a request,
 * regardless of its age or expiration date.
 */
declare var Titanium$UI$iOS$CACHE_POLICY_RETURN_CACHE_DATA_DONT_LOAD: number;


/**
 * Selection granularity varies automatically depending on the selection.
 */
declare var Titanium$UI$iOS$SELECTION_GRANULARITY_DYNAMIC: number;


/**
 * Selection endpoints can be placed at any character boundary.
 */
declare var Titanium$UI$iOS$SELECTION_GRANULARITY_CHARACTER: number;


/**
 * Cancel the navigation.
 */
declare var Titanium$UI$iOS$ACTION_POLICY_CANCEL: number;


/**
 * Allow the navigation to continue.
 */
declare var Titanium$UI$iOS$ACTION_POLICY_ALLOW: number;


/**
 * Inject the script after the document element is created, but before any other content is loaded.
 */
declare var Titanium$UI$iOS$INJECTION_TIME_DOCUMENT_START: number;


/**
 * Inject the script after the document finishes loading, but before other subresources finish loading.
 */
declare var Titanium$UI$iOS$INJECTION_TIME_DOCUMENT_END: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iOS$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iOS$applyProperties(props: any): void



/**
 * Creates a transition animation when opening or closing windows in a
 * <Titanium.UI.NavigationWindow> or <Titanium.UI.Tab>.
 */
declare function Titanium$UI$iOS$createTransitionAnimation(transition: transitionAnimationParam): Titanium$Proxy



/**
 * Creates a live photo badge to be used together with the
 * <Titanium.UI.iOS.LivePhotoView> API.
 */
declare function Titanium$UI$iOS$createLivePhotoBadge(type: number): Titanium$Blob



/**
 * Creates and returns an instance of <Titanium.UI.iOS.AdView>.
 */
declare function Titanium$UI$iOS$createAdView(parameters?: any): Titanium$UI$iOS$AdView



/**
 * Creates and returns an instance of <Titanium.UI.iOS.AnchorAttachmentBehavior>.
 */
declare function Titanium$UI$iOS$createAnchorAttachmentBehavior(parameters?: any): Titanium$UI$iOS$AnchorAttachmentBehavior



/**
 * Creates and returns an instance of <Titanium.UI.iOS.Animator>.
 */
declare function Titanium$UI$iOS$createAnimator(parameters?: any): Titanium$UI$iOS$Animator



/**
 * Creates and returns an instance of <Titanium.UI.iOS.ApplicationShortcuts>.
 */
declare function Titanium$UI$iOS$createApplicationShortcuts(parameters?: any): Titanium$UI$iOS$ApplicationShortcuts



/**
 * Creates and returns an instance of <Titanium.UI.iOS.Attribute>.
 */
declare function Titanium$UI$iOS$createAttribute(parameters?: any): Titanium$UI$iOS$Attribute



/**
 * Creates and returns an instance of <Titanium.UI.iOS.AttributedString>.
 */
declare function Titanium$UI$iOS$createAttributedString(parameters?: any): Titanium$UI$iOS$AttributedString



/**
 * Creates and returns an instance of <Titanium.UI.iOS.BlurView>.
 */
declare function Titanium$UI$iOS$createBlurView(parameters?: any): Titanium$UI$iOS$BlurView



/**
 * Creates and returns an instance of <Titanium.UI.iOS.CollisionBehavior>.
 */
declare function Titanium$UI$iOS$createCollisionBehavior(parameters?: any): Titanium$UI$iOS$CollisionBehavior



/**
 * Creates and returns an instance of <Titanium.UI.iOS.CoverFlowView>.
 */
declare function Titanium$UI$iOS$createCoverFlowView(parameters?: any): Titanium$UI$iOS$CoverFlowView



/**
 * Creates and returns an instance of <Titanium.UI.iOS.DocumentViewer>.
 */
declare function Titanium$UI$iOS$createDocumentViewer(parameters?: any): Titanium$UI$iOS$DocumentViewer



/**
 * Creates and returns an instance of <Titanium.UI.iOS.DynamicItemBehavior>.
 */
declare function Titanium$UI$iOS$createDynamicItemBehavior(parameters?: any): Titanium$UI$iOS$DynamicItemBehavior



/**
 * Creates and returns an instance of <Titanium.UI.iOS.FeedbackGenerator>.
 */
declare function Titanium$UI$iOS$createFeedbackGenerator(parameters?: any): Titanium$UI$iOS$FeedbackGenerator



/**
 * Creates and returns an instance of <Titanium.UI.iOS.GravityBehavior>.
 */
declare function Titanium$UI$iOS$createGravityBehavior(parameters?: any): Titanium$UI$iOS$GravityBehavior



/**
 * Creates and returns an instance of <Titanium.UI.iOS.LivePhotoView>.
 */
declare function Titanium$UI$iOS$createLivePhotoView(parameters?: any): Titanium$UI$iOS$LivePhotoView



/**
 * Creates and returns an instance of <Titanium.UI.iOS.MenuPopup>.
 */
declare function Titanium$UI$iOS$createMenuPopup(parameters?: any): Titanium$UI$iOS$MenuPopup



/**
 * Creates and returns an instance of <Titanium.UI.iOS.NavigationWindow>.
 */
declare function Titanium$UI$iOS$createNavigationWindow(parameters?: any): Titanium$UI$iOS$NavigationWindow



/**
 * Creates and returns an instance of <Titanium.UI.iOS.PreviewAction>.
 */
declare function Titanium$UI$iOS$createPreviewAction(parameters?: any): Titanium$UI$iOS$PreviewAction



/**
 * Creates and returns an instance of <Titanium.UI.iOS.PreviewActionGroup>.
 */
declare function Titanium$UI$iOS$createPreviewActionGroup(parameters?: any): Titanium$UI$iOS$PreviewActionGroup



/**
 * Creates and returns an instance of <Titanium.UI.iOS.PreviewContext>.
 */
declare function Titanium$UI$iOS$createPreviewContext(parameters?: any): Titanium$UI$iOS$PreviewContext



/**
 * Creates and returns an instance of <Titanium.UI.iOS.PushBehavior>.
 */
declare function Titanium$UI$iOS$createPushBehavior(parameters?: any): Titanium$UI$iOS$PushBehavior



/**
 * Creates and returns an instance of <Titanium.UI.iOS.SnapBehavior>.
 */
declare function Titanium$UI$iOS$createSnapBehavior(parameters?: any): Titanium$UI$iOS$SnapBehavior



/**
 * Creates and returns an instance of <Titanium.UI.iOS.SplitWindow>.
 */
declare function Titanium$UI$iOS$createSplitWindow(parameters?: any): Titanium$UI$iOS$SplitWindow



/**
 * Creates and returns an instance of <Titanium.UI.iOS.Stepper>.
 */
declare function Titanium$UI$iOS$createStepper(parameters?: any): Titanium$UI$iOS$Stepper



/**
 * Creates and returns an instance of <Titanium.UI.iOS.TabbedBar>.
 */
declare function Titanium$UI$iOS$createTabbedBar(parameters?: any): Titanium$UI$iOS$TabbedBar



/**
 * Creates and returns an instance of <Titanium.UI.iOS.Toolbar>.
 */
declare function Titanium$UI$iOS$createToolbar(parameters?: any): Titanium$UI$iOS$Toolbar



/**
 * Creates and returns an instance of <Titanium.UI.iOS.ViewAttachmentBehavior>.
 */
declare function Titanium$UI$iOS$createViewAttachmentBehavior(parameters?: any): Titanium$UI$iOS$ViewAttachmentBehavior



/**
 * Creates and returns an instance of <Titanium.UI.iOS.WebViewConfiguration>.
 */
declare function Titanium$UI$iOS$createWebViewConfiguration(parameters?: any): Titanium$UI$iOS$WebViewConfiguration



/**
 * Creates and returns an instance of <Titanium.UI.iOS.WebViewDecisionHandler>.
 */
declare function Titanium$UI$iOS$createWebViewDecisionHandler(parameters?: any): Titanium$UI$iOS$WebViewDecisionHandler



/**
 * Creates and returns an instance of <Titanium.UI.iOS.WebViewProcessPool>.
 */
declare function Titanium$UI$iOS$createWebViewProcessPool(parameters?: any): Titanium$UI$iOS$WebViewProcessPool



/**
 * Gets the value of the <Titanium.UI.iOS.bubbleParent> property.
 */
declare function Titanium$UI$iOS$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iOS.bubbleParent> property.
 */
declare function Titanium$UI$iOS$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iOS.apiName> property.
 */
declare function Titanium$UI$iOS$getApiName(): string



/**
 * Gets the value of the <Titanium.UI.iOS.forceTouchSupported> property.
 */
declare function Titanium$UI$iOS$getForceTouchSupported(): boolean



/**
 * Sets the value of the <Titanium.UI.iOS.MODAL_PRESENTATION_CURRENT_CONTEXT> property.
 */
declare function Titanium$UI$iOS$setMODAL_PRESENTATION_CURRENT_CONTEXT(MODAL_PRESENTATION_CURRENT_CONTEXT: number): void



/**
 * Sets the value of the <Titanium.UI.iOS.MODAL_PRESENTATION_OVER_CURRENT_CONTEXT> property.
 */
declare function Titanium$UI$iOS$setMODAL_PRESENTATION_OVER_CURRENT_CONTEXT(MODAL_PRESENTATION_OVER_CURRENT_CONTEXT: number): void



/**
 * Sets the value of the <Titanium.UI.iOS.MODAL_PRESENTATION_OVER_CURRENT_FULL_SCREEN> property.
 */
declare function Titanium$UI$iOS$setMODAL_PRESENTATION_OVER_CURRENT_FULL_SCREEN(MODAL_PRESENTATION_OVER_CURRENT_FULL_SCREEN: number): void



/**
 * Gets the value of the <Titanium.UI.iOS.appBadge> property.
 */
declare function Titanium$UI$iOS$getAppBadge(): number



/**
 * Sets the value of the <Titanium.UI.iOS.appBadge> property.
 */
declare function Titanium$UI$iOS$setAppBadge(appBadge: number): void



/**
 * Gets the value of the <Titanium.UI.iOS.appSupportsShakeToEdit> property.
 */
declare function Titanium$UI$iOS$getAppSupportsShakeToEdit(): boolean



/**
 * Sets the value of the <Titanium.UI.iOS.appSupportsShakeToEdit> property.
 */
declare function Titanium$UI$iOS$setAppSupportsShakeToEdit(appSupportsShakeToEdit: boolean): void



/**
 * Gets the value of the <Titanium.UI.iOS.statusBarBackgroundColor> property.
 */
declare function Titanium$UI$iOS$getStatusBarBackgroundColor(): string



/**
 * Sets the value of the <Titanium.UI.iOS.statusBarBackgroundColor> property.
 */
declare function Titanium$UI$iOS$setStatusBarBackgroundColor(statusBarBackgroundColor: string): void



/**
 * The AdView is a view for display Apple iAds.
 */
declare type Titanium$UI$iOS$AdView = {

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Current position of the view during an animation.
 */
+animatedCenter: Point,

/**
 * Background color of the view, as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * A background gradient for the view.
 */
backgroundGradient: Gradient,

/**
 * Background image for the view, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Determines whether to tile a background across a view.
 */
backgroundRepeat: boolean,

/**
 * Size of the left end cap.
 */
backgroundLeftCap: number,

/**
 * Size of the top end cap.
 */
backgroundTopCap: number,

/**
 * Border color of the view, as a color name or hex triplet.
 */
borderColor: string,

/**
 * Radius for the rounded corners of the view's border.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * View's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * Array of this view's child views.
 */
+children: Titanium$UI$View[],

/**
 * View's clipping behavior.
 */
clipMode: number,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Adds a horizontal parallax effect to the view
 */
horizontalMotionEffect: any,

/**
 * View's left position, in platform-specific units.
 */
left: number | string,

/**
 * Specifies how the view positions its children.
 * One of: 'composite', 'vertical', or 'horizontal'.
 */
layout: string,

/**
 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
 */
opacity: number,

/**
 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
 */
pullBackgroundColor: string,

/**
 * The preview context used in the 3D-Touch feature "Peek and Pop".
 */
previewContext: Titanium$UI$iOS$PreviewContext,

/**
 * View's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * The view's tintColor
 */
tintColor: string,

/**
 * The view's top position.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Adds a vertical parallax effect to the view
 */
verticalMotionEffect: any,

/**
 * Determines the blur radius used to create the shadow.
 */
viewShadowRadius: number,

/**
 * Determines the color of the shadow.
 */
viewShadowColor: string,

/**
 * Determines the offset for the shadow of the view.
 */
viewShadowOffset: Point,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * Size of the advertisement when minimized.
 */
adSize: string,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any): void,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any[]): void,

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Removes a child view from this view's hierarchy.
 */
remove(view: any): void,

/**
 * Removes all child views from this view's hierarchy.
 */
removeAllChildren(): void,

/**
 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
replaceAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Cancel a banner to uncover the user interface.
 */
cancelAction(): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.animatedCenter> property.
 */
getAnimatedCenter(): Point,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.backgroundGradient> property.
 */
getBackgroundGradient(): Gradient,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.backgroundGradient> property.
 */
setBackgroundGradient(backgroundGradient: Gradient): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.backgroundImage> property.
 */
getBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.backgroundRepeat> property.
 */
getBackgroundRepeat(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.backgroundRepeat> property.
 */
setBackgroundRepeat(backgroundRepeat: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.backgroundLeftCap> property.
 */
getBackgroundLeftCap(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.backgroundLeftCap> property.
 */
setBackgroundLeftCap(backgroundLeftCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.backgroundTopCap> property.
 */
getBackgroundTopCap(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.backgroundTopCap> property.
 */
setBackgroundTopCap(backgroundTopCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.borderColor> property.
 */
getBorderColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.borderColor> property.
 */
setBorderColor(borderColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.children> property.
 */
getChildren(): Titanium$UI$View[],

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.clipMode> property.
 */
getClipMode(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.clipMode> property.
 */
setClipMode(clipMode: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.horizontalMotionEffect> property.
 */
getHorizontalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.horizontalMotionEffect> property.
 */
setHorizontalMotionEffect(horizontalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.layout> property.
 */
getLayout(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.layout> property.
 */
setLayout(layout: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.pullBackgroundColor> property.
 */
getPullBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.pullBackgroundColor> property.
 */
setPullBackgroundColor(pullBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.previewContext> property.
 */
getPreviewContext(): Titanium$UI$iOS$PreviewContext,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.previewContext> property.
 */
setPreviewContext(previewContext: Titanium$UI$iOS$PreviewContext): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.tintColor> property.
 */
getTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.tintColor> property.
 */
setTintColor(tintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.verticalMotionEffect> property.
 */
getVerticalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.verticalMotionEffect> property.
 */
setVerticalMotionEffect(verticalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.viewShadowRadius> property.
 */
getViewShadowRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.viewShadowRadius> property.
 */
setViewShadowRadius(viewShadowRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.viewShadowColor> property.
 */
getViewShadowColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.viewShadowColor> property.
 */
setViewShadowColor(viewShadowColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.viewShadowOffset> property.
 */
getViewShadowOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.viewShadowOffset> property.
 */
setViewShadowOffset(viewShadowOffset: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AdView.adSize> property.
 */
getAdSize(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.AdView.adSize> property.
 */
setAdSize(adSize: string): void
} & Titanium$Proxy



/**
 * Dynamic behavior to support connections between an anchor point and an item.
 */
declare type Titanium$UI$iOS$AnchorAttachmentBehavior = {

/**
 * Anchor point for the attachment behavior relative to the animator's coordinate system.
 */
anchor: Point,

/**
 * Amount of damping to apply to the attachment behavior.
 */
damping: number,

/**
 * Distance, in points, between the two attachment points.
 */
distance: number,

/**
 * Frequency of oscillation for the behavior.
 */
frequency: number,

/**
 * Item to connect to use the attachment behavior.
 */
item: Titanium$UI$View,

/**
 * Offset from the center point of the item for the attachment.
 */
offset: Point,

/**
 * Gets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.anchor> property.
 */
getAnchor(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.anchor> property.
 */
setAnchor(anchor: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.damping> property.
 */
getDamping(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.damping> property.
 */
setDamping(damping: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.distance> property.
 */
getDistance(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.distance> property.
 */
setDistance(distance: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.frequency> property.
 */
getFrequency(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.frequency> property.
 */
setFrequency(frequency: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.item> property.
 */
getItem(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.item> property.
 */
setItem(item: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.offset> property.
 */
getOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.AnchorAttachmentBehavior.offset> property.
 */
setOffset(offset: Point): void
} & Titanium$Proxy



/**
 * Provides support for the built-in iOS dynamic animations
 */
declare type Titanium$UI$iOS$Animator = {

/**
 * Behaviors associated with this animator.
 */
behaviors: Titanium$Proxy[],

/**
 * Titanium View object to initialize as the reference view for the animator.
 */
referenceView: Titanium$UI$View,

/**
 * Returns `true` if the animator is running else `false`.
 */
+running: boolean,

/**
 * Adds a dynamic behavior to the animator.
 */
addBehavior(behavior: Titanium$Proxy): void,

/**
 * Removes all behaviors from this animator.
 */
removeAllBehaviors(): void,

/**
 * Removes the specified behavior from the animator.
 */
removeBehavior(behavior: Titanium$Proxy): void,

/**
 * Starts the animation behaviors.
 */
startAnimator(): void,

/**
 * Stops the animation behaviors.
 */
stopAnimator(): void,

/**
 * Updates the animator's state information with the current state of the specified item.
 */
updateItemUsingCurrentState(item: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Animator.behaviors> property.
 */
getBehaviors(): Titanium$Proxy[],

/**
 * Sets the value of the <Titanium.UI.iOS.Animator.behaviors> property.
 */
setBehaviors(behaviors: $ReadOnlyArray<Titanium$Proxy>): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Animator.referenceView> property.
 */
getReferenceView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.iOS.Animator.referenceView> property.
 */
setReferenceView(referenceView: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Animator.running> property.
 */
getRunning(): boolean
} & Titanium$Proxy



/**
 * The Home screen quick actions API is for adding shortcuts to your app icon that anticipate and accelerate a
 * user's interaction with your app.
 */
declare type Titanium$UI$iOS$ApplicationShortcuts = {

/**
 * Returns an array of the application shortcuts created dynamically.
 */
listDynamicShortcuts(): ShortcutParams[],

/**
 * Returns an array of the application shortcuts listed in your tiapp.xml file.
 */
listStaticShortcuts(): ShortcutParams[],

/**
 * Removes all dynamically created application shortcuts.
 */
removeAllDynamicShortcuts(): void,

/**
 * Returns true or false depending if the provided shortcut object already exists.
 */
dynamicShortcutExists(itemtype: string): boolean,

/**
 * Creates a new dynamic application shortcut item.
 */
addDynamicShortcut(params: ShortcutParams): void,

/**
 * Removes the dynamic application shortcut item identified by the `itemtype`.
 */
removeDynamicShortcut(itemtype: string): void,

/**
 * Gets the dynamic application shortcut item identified by the `itemtype`.
 */
getDynamicShortcut(itemtype: string): void
} & Titanium$Proxy



/**
 * An abstract datatype for specifying an attributed string attribute.
 */
declare type Titanium$UI$iOS$Attribute = {

/**
 * Attribute to apply to the text.
 */
type: number,

/**
 * Attribute value.
 */
value: number,

/**
 * Attribute range.
 */
range: number[],

/**
 * Gets the value of the <Titanium.UI.iOS.Attribute.type> property.
 */
getType(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Attribute.type> property.
 */
setType(type: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Attribute.value> property.
 */
getValue(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Attribute.value> property.
 */
setValue(value: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Attribute.range> property.
 */
getRange(): number[],

/**
 * Sets the value of the <Titanium.UI.iOS.Attribute.range> property.
 */
setRange(range: $ReadOnlyArray<number>): void
} & Titanium$Proxy



/**
 * An attributed string proxy manages character strings and associated sets of attributes (for example,
 * font and kerning) that apply to individual characters or ranges of characters in the string.
 */
declare type Titanium$UI$iOS$AttributedString = {

/**
 * The text applied to the attributed string.
 */
text: string,

/**
 * An array of attributes to add.
 */
attributes: Titanium$UI$iOS$Attribute[],

/**
 * Adds an [attribute](Attribute) with the given name and value to the characters in the specified range.
 */
addAttribute(attribute: Titanium$UI$iOS$Attribute): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AttributedString.text> property.
 */
getText(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.AttributedString.text> property.
 */
setText(text: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.AttributedString.attributes> property.
 */
getAttributes(): Titanium$UI$iOS$Attribute[],

/**
 * Sets the value of the <Titanium.UI.iOS.AttributedString.attributes> property.
 */
setAttributes(attributes: $ReadOnlyArray<Titanium$UI$iOS$Attribute>): void
} & Titanium$Proxy



/**
 * A <Titanium.UI.iOS.BlurView> object gives you an easy way implement some complex visual effects.
 * The blur effect is applied to every view the blur view is added to by default. You can also place the
 * blur view above other views and all visible views layered under the blur view are blurred as well.
 * For more information on BlurView, please refer to the official [Apple documentation](https://developer.apple.com/documentation/uikit/uivisualeffectview).
 * Note: Apple introduced two new constants <Titanium.UI.iOS.BLUR_EFFECT_STYLE_REGULAR> and <Titanium.UI.iOS.BLUR_EFFECT_STYLE_PROMINENT> in
 * iOS 10. These are internally mapped to <Titanium.UI.iOS.BLUR_EFFECT_STYLE_LIGHT> and <Titanium.UI.iOS.BLUR_EFFECT_STYLE_EXTRA_LIGHT>.
 */
declare type Titanium$UI$iOS$BlurView = {

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Current position of the view during an animation.
 */
+animatedCenter: Point,

/**
 * Background color of the view, as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * A background gradient for the view.
 */
backgroundGradient: Gradient,

/**
 * Background image for the view, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Determines whether to tile a background across a view.
 */
backgroundRepeat: boolean,

/**
 * Size of the left end cap.
 */
backgroundLeftCap: number,

/**
 * Size of the top end cap.
 */
backgroundTopCap: number,

/**
 * Border color of the view, as a color name or hex triplet.
 */
borderColor: string,

/**
 * Radius for the rounded corners of the view's border.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * View's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * Array of this view's child views.
 */
+children: Titanium$UI$View[],

/**
 * View's clipping behavior.
 */
clipMode: number,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Adds a horizontal parallax effect to the view
 */
horizontalMotionEffect: any,

/**
 * View's left position, in platform-specific units.
 */
left: number | string,

/**
 * Specifies how the view positions its children.
 * One of: 'composite', 'vertical', or 'horizontal'.
 */
layout: string,

/**
 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
 */
opacity: number,

/**
 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
 */
pullBackgroundColor: string,

/**
 * The preview context used in the 3D-Touch feature "Peek and Pop".
 */
previewContext: Titanium$UI$iOS$PreviewContext,

/**
 * View's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * The view's tintColor
 */
tintColor: string,

/**
 * The view's top position.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Adds a vertical parallax effect to the view
 */
verticalMotionEffect: any,

/**
 * Determines the blur radius used to create the shadow.
 */
viewShadowRadius: number,

/**
 * Determines the color of the shadow.
 */
viewShadowColor: string,

/**
 * Determines the offset for the shadow of the view.
 */
viewShadowOffset: Point,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * The effect you provide for the view.
 */
effect: number,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any): void,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any[]): void,

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Removes a child view from this view's hierarchy.
 */
remove(view: any): void,

/**
 * Removes all child views from this view's hierarchy.
 */
removeAllChildren(): void,

/**
 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
replaceAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.animatedCenter> property.
 */
getAnimatedCenter(): Point,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.backgroundGradient> property.
 */
getBackgroundGradient(): Gradient,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.backgroundGradient> property.
 */
setBackgroundGradient(backgroundGradient: Gradient): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.backgroundImage> property.
 */
getBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.backgroundRepeat> property.
 */
getBackgroundRepeat(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.backgroundRepeat> property.
 */
setBackgroundRepeat(backgroundRepeat: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.backgroundLeftCap> property.
 */
getBackgroundLeftCap(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.backgroundLeftCap> property.
 */
setBackgroundLeftCap(backgroundLeftCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.backgroundTopCap> property.
 */
getBackgroundTopCap(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.backgroundTopCap> property.
 */
setBackgroundTopCap(backgroundTopCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.borderColor> property.
 */
getBorderColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.borderColor> property.
 */
setBorderColor(borderColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.children> property.
 */
getChildren(): Titanium$UI$View[],

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.clipMode> property.
 */
getClipMode(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.clipMode> property.
 */
setClipMode(clipMode: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.horizontalMotionEffect> property.
 */
getHorizontalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.horizontalMotionEffect> property.
 */
setHorizontalMotionEffect(horizontalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.layout> property.
 */
getLayout(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.layout> property.
 */
setLayout(layout: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.pullBackgroundColor> property.
 */
getPullBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.pullBackgroundColor> property.
 */
setPullBackgroundColor(pullBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.previewContext> property.
 */
getPreviewContext(): Titanium$UI$iOS$PreviewContext,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.previewContext> property.
 */
setPreviewContext(previewContext: Titanium$UI$iOS$PreviewContext): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.tintColor> property.
 */
getTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.tintColor> property.
 */
setTintColor(tintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.verticalMotionEffect> property.
 */
getVerticalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.verticalMotionEffect> property.
 */
setVerticalMotionEffect(verticalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.viewShadowRadius> property.
 */
getViewShadowRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.viewShadowRadius> property.
 */
setViewShadowRadius(viewShadowRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.viewShadowColor> property.
 */
getViewShadowColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.viewShadowColor> property.
 */
setViewShadowColor(viewShadowColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.viewShadowOffset> property.
 */
getViewShadowOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.viewShadowOffset> property.
 */
setViewShadowOffset(viewShadowOffset: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.BlurView.effect> property.
 */
getEffect(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.BlurView.effect> property.
 */
setEffect(effect: number): void
} & Titanium$Proxy



/**
 * Dynamic behavior to support collisions between items and boundaries.
 */
declare type Titanium$UI$iOS$CollisionBehavior = {

/**
 * Boundary identfiers added to this behavior.
 */
+boundaryIdentifiers: BoundaryIdentifier[],

/**
 * Specifies the collision behavior.
 */
collisionMode: number,

/**
 * Items added to this behavior.
 */
+items: Titanium$UI$View[],

/**
 * Insets to apply when using the animator's reference view as the boundary.
 */
referenceInsets: ReferenceInsets,

/**
 * Use the animator's reference view as the boundary.
 */
treatReferenceAsBoundary: boolean,

/**
 * Adds a boundary to this behavior.
 */
addBoundary(boundary: BoundaryIdentifier): void,

/**
 * Adds an item to this behavior.
 */
addItem(item: any): void,

/**
 * Removes all boundaries from this behavior.
 */
removeAllBoundaries(): void,

/**
 * Removes the specified boundary from this behavior.
 */
removeBoundary(boundary: BoundaryIdentifier): void,

/**
 * Removes the specified item from this behavior.
 */
removeItem(item: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CollisionBehavior.boundaryIdentifiers> property.
 */
getBoundaryIdentifiers(): BoundaryIdentifier[],

/**
 * Gets the value of the <Titanium.UI.iOS.CollisionBehavior.collisionMode> property.
 */
getCollisionMode(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.CollisionBehavior.collisionMode> property.
 */
setCollisionMode(collisionMode: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CollisionBehavior.items> property.
 */
getItems(): Titanium$UI$View[],

/**
 * Gets the value of the <Titanium.UI.iOS.CollisionBehavior.referenceInsets> property.
 */
getReferenceInsets(): ReferenceInsets,

/**
 * Sets the value of the <Titanium.UI.iOS.CollisionBehavior.referenceInsets> property.
 */
setReferenceInsets(referenceInsets: ReferenceInsets): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CollisionBehavior.treatReferenceAsBoundary> property.
 */
getTreatReferenceAsBoundary(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.CollisionBehavior.treatReferenceAsBoundary> property.
 */
setTreatReferenceAsBoundary(treatReferenceAsBoundary: boolean): void
} & Titanium$Proxy



/**
 * The cover flow view is a container showing animated three-dimensional images in a style
 * consistent with the cover flow presentation style used for iPod, iTunes, and file browsing.
 */
declare type Titanium$UI$iOS$CoverFlowView = {

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Current position of the view during an animation.
 */
+animatedCenter: Point,

/**
 * Background color of the view, as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * A background gradient for the view.
 */
backgroundGradient: Gradient,

/**
 * Background image for the view, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Determines whether to tile a background across a view.
 */
backgroundRepeat: boolean,

/**
 * Size of the left end cap.
 */
backgroundLeftCap: number,

/**
 * Size of the top end cap.
 */
backgroundTopCap: number,

/**
 * Border color of the view, as a color name or hex triplet.
 */
borderColor: string,

/**
 * Radius for the rounded corners of the view's border.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * View's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * View's clipping behavior.
 */
clipMode: number,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Adds a horizontal parallax effect to the view
 */
horizontalMotionEffect: any,

/**
 * View's left position, in platform-specific units.
 */
left: number | string,

/**
 * Specifies how the view positions its children.
 * One of: 'composite', 'vertical', or 'horizontal'.
 */
layout: string,

/**
 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
 */
opacity: number,

/**
 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
 */
pullBackgroundColor: string,

/**
 * The preview context used in the 3D-Touch feature "Peek and Pop".
 */
previewContext: Titanium$UI$iOS$PreviewContext,

/**
 * View's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * The view's tintColor
 */
tintColor: string,

/**
 * The view's top position.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Adds a vertical parallax effect to the view
 */
verticalMotionEffect: any,

/**
 * Determines the blur radius used to create the shadow.
 */
viewShadowRadius: number,

/**
 * Determines the color of the shadow.
 */
viewShadowColor: string,

/**
 * Determines the offset for the shadow of the view.
 */
viewShadowOffset: Point,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * Images to display in the view.
 */
images: string[] | Titanium$Blob[] | Titanium$Filesystem$File[] | CoverFlowImageType[],

/**
 * Index to make selected.
 */
selected: number,

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Changes the image for a specified index.
 */
setImage(index: number, image: string): void,

/**
 * Changes the image for a specified index.
 */
setImage(index: number, image: Titanium$Blob): void,

/**
 * Changes the image for a specified index.
 */
setImage(index: number, image: Titanium$Filesystem$File): void,

/**
 * Changes the image for a specified index.
 */
setImage(index: number, image: CoverFlowImageType): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.animatedCenter> property.
 */
getAnimatedCenter(): Point,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundGradient> property.
 */
getBackgroundGradient(): Gradient,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundGradient> property.
 */
setBackgroundGradient(backgroundGradient: Gradient): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundImage> property.
 */
getBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundRepeat> property.
 */
getBackgroundRepeat(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundRepeat> property.
 */
setBackgroundRepeat(backgroundRepeat: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundLeftCap> property.
 */
getBackgroundLeftCap(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundLeftCap> property.
 */
setBackgroundLeftCap(backgroundLeftCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundTopCap> property.
 */
getBackgroundTopCap(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.backgroundTopCap> property.
 */
setBackgroundTopCap(backgroundTopCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.borderColor> property.
 */
getBorderColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.borderColor> property.
 */
setBorderColor(borderColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.clipMode> property.
 */
getClipMode(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.clipMode> property.
 */
setClipMode(clipMode: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.horizontalMotionEffect> property.
 */
getHorizontalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.horizontalMotionEffect> property.
 */
setHorizontalMotionEffect(horizontalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.layout> property.
 */
getLayout(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.layout> property.
 */
setLayout(layout: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.pullBackgroundColor> property.
 */
getPullBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.pullBackgroundColor> property.
 */
setPullBackgroundColor(pullBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.previewContext> property.
 */
getPreviewContext(): Titanium$UI$iOS$PreviewContext,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.previewContext> property.
 */
setPreviewContext(previewContext: Titanium$UI$iOS$PreviewContext): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.tintColor> property.
 */
getTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.tintColor> property.
 */
setTintColor(tintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.verticalMotionEffect> property.
 */
getVerticalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.verticalMotionEffect> property.
 */
setVerticalMotionEffect(verticalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.viewShadowRadius> property.
 */
getViewShadowRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.viewShadowRadius> property.
 */
setViewShadowRadius(viewShadowRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.viewShadowColor> property.
 */
getViewShadowColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.viewShadowColor> property.
 */
setViewShadowColor(viewShadowColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.viewShadowOffset> property.
 */
getViewShadowOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.viewShadowOffset> property.
 */
setViewShadowOffset(viewShadowOffset: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.images> property.
 */
getImages(
): string[] | Titanium$Blob[] | Titanium$Filesystem$File[] | CoverFlowImageType[],

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.images> property.
 */
setImages(images: $ReadOnlyArray<string>): void,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.images> property.
 */
setImages(images: $ReadOnlyArray<Titanium$Blob>): void,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.images> property.
 */
setImages(images: $ReadOnlyArray<Titanium$Filesystem$File>): void,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.images> property.
 */
setImages(images: $ReadOnlyArray<CoverFlowImageType>): void,

/**
 * Gets the value of the <Titanium.UI.iOS.CoverFlowView.selected> property.
 */
getSelected(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.CoverFlowView.selected> property.
 */
setSelected(selected: number): void
} & Titanium$Proxy



/**
 * A DocumentViewer provides in-app support for managing user interactions with files on the
 * local system.
 */
declare type Titanium$UI$iOS$DocumentViewer = {

/**
 * Name of the file (without the path).
 */
+name: string,

/**
 * URL of the document being previewed.
 */
url: string,

/**
 * Dismisses the document viewer.
 */
hide(options?: DocumentViewerOptions): void,

/**
 * Displays the document viewer over the current view.
 */
show(options?: DocumentViewerOptions): void,

/**
 * Gets the value of the <Titanium.UI.iOS.DocumentViewer.name> property.
 */
getName(): string,

/**
 * Gets the value of the <Titanium.UI.iOS.DocumentViewer.url> property.
 */
getUrl(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.DocumentViewer.url> property.
 */
setUrl(url: string): void
} & Titanium$Proxy



/**
 * Base dynamic configuration for an item.
 */
declare type Titanium$UI$iOS$DynamicItemBehavior = {

/**
 * Specifies if this item can rotate.
 */
allowsRotation: boolean,

/**
 * Specifies the angular resistance of this item.
 */
angularResistance: number,

/**
 * Specifies the relative mass density of this item.
 */
density: number,

/**
 * Specifies the elasticity applied to collisions for this item.
 */
elasticity: number,

/**
 * Specifies the linear resistance of the item when it slides against another item.
 */
friction: number,

/**
 * Items added to this behavior.
 */
+items: Titanium$UI$View[],

/**
 * Specifies the linear resistance of this item which reduces linear velocity over time.
 */
resistance: number,

/**
 * Adds a specified angular velocity for the item.
 */
addAngularVelocityForItem(item: any, velocity: number): void,

/**
 * Adds an item to this behavior.
 */
addItem(item: any): void,

/**
 * Adds a specified linear velocity for the item.
 */
addLinearVelocityForItem(item: any, velocity: Point): void,

/**
 * Returns the angular velocity of the item.
 */
angularVelocityForItem(item: any): number,

/**
 * Returns the linear velocity of the item.
 */
linearVelocityForItem(item: any): Point,

/**
 * Removes the specified item from this behavior.
 */
removeItem(item: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.DynamicItemBehavior.allowsRotation> property.
 */
getAllowsRotation(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.DynamicItemBehavior.allowsRotation> property.
 */
setAllowsRotation(allowsRotation: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.DynamicItemBehavior.angularResistance> property.
 */
getAngularResistance(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.DynamicItemBehavior.angularResistance> property.
 */
setAngularResistance(angularResistance: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.DynamicItemBehavior.density> property.
 */
getDensity(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.DynamicItemBehavior.density> property.
 */
setDensity(density: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.DynamicItemBehavior.elasticity> property.
 */
getElasticity(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.DynamicItemBehavior.elasticity> property.
 */
setElasticity(elasticity: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.DynamicItemBehavior.friction> property.
 */
getFriction(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.DynamicItemBehavior.friction> property.
 */
setFriction(friction: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.DynamicItemBehavior.items> property.
 */
getItems(): Titanium$UI$View[],

/**
 * Gets the value of the <Titanium.UI.iOS.DynamicItemBehavior.resistance> property.
 */
getResistance(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.DynamicItemBehavior.resistance> property.
 */
setResistance(resistance: number): void
} & Titanium$Proxy



/**
 * The feedback generator API is introduced in iOS 10 to handle the haptic feedback when using an iPhone 7 or
 * later devices.
 */
declare type Titanium$UI$iOS$FeedbackGenerator = {

/**
 * The type of feedback generator you want to create.
 */
type: number,

/**
 * The style of the feedback generator you want to create. This property is only required when using <Titanium.UI.iOS.FEEDBACK_GENERATOR_TYPE_IMPACT>.
 */
style?: number,

/**
 * Used to prepare the haptic sensor for the upcoming interaction with it.
 */
prepare(): void,

/**
 * Used to trigger a haptic feedback after a selection has been made.
 */
selectionChanged(): void,

/**
 * Used to trigger a haptic feedback after an impact occurred.
 */
impactOccurred(): void,

/**
 * Used to trigger a haptic feedback after a notification has been received.
 */
notificationOccurred(notificationType: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.FeedbackGenerator.type> property.
 */
getType(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.FeedbackGenerator.type> property.
 */
setType(type: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.FeedbackGenerator.style> property.
 */
getStyle(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.FeedbackGenerator.style> property.
 */
setStyle(style: number): void
} & Titanium$Proxy



/**
 * Gravitational force to apply to an item.
 */
declare type Titanium$UI$iOS$GravityBehavior = {

/**
 * Specifies the angle of the gravity vector in radians.
 */
angle: number,

/**
 * Specifies the direction of the gravity vector as an x, y pair.
 */
gravityDirection: Point,

/**
 * Items added to this behavior.
 */
+items: Titanium$UI$View[],

/**
 * Specifies the magnitude of the gravity vector.
 */
magnitude: number,

/**
 * Adds an item to this behavior.
 */
addItem(item: any): void,

/**
 * Removes the specified item from this behavior.
 */
removeItem(item: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.GravityBehavior.angle> property.
 */
getAngle(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.GravityBehavior.angle> property.
 */
setAngle(angle: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.GravityBehavior.gravityDirection> property.
 */
getGravityDirection(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.GravityBehavior.gravityDirection> property.
 */
setGravityDirection(gravityDirection: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.GravityBehavior.items> property.
 */
getItems(): Titanium$UI$View[],

/**
 * Gets the value of the <Titanium.UI.iOS.GravityBehavior.magnitude> property.
 */
getMagnitude(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.GravityBehavior.magnitude> property.
 */
setMagnitude(magnitude: number): void
} & Titanium$Proxy



/**
 * A set of constants for the style that can be used for the `selectionStyle` property of a
 * ListItem, which is set in the `properties` dictionary of either the <ListDataItem> or
 * <ItemTemplate>.
 */
declare type Titanium$UI$iOS$ListViewCellSelectionStyle = {

/**
 * The cell when selected has a blue background. This is the default value.
 */
+BLUE: number,

/**
 * The cell when selected has a gray background.
 */
+GRAY: number,

/**
 * The cell has no distinct style for when it is selected.
 */
+NONE: number
} & Titanium$Proxy



/**
 * A set of constants for the position value that can be used for the `position` property of
 * <ListViewAnimationProperties> when invoking the ListView's `scrollToItem`, `appendSection`,
 * `deleteSectionAt`, `insertSectionAt` and `replaceSectionAt` methods.
 */
declare type Titanium$UI$iOS$ListViewScrollPosition = {

/**
 * The list view scrolls the row of interest to the bottom of the visible list view.
 */
+BOTTOM: number,

/**
 * The list view scrolls the row of interest to the middle of the list table view.
 */
+MIDDLE: number,

/**
 * The table view scrolls the row of interest to be fully visible with a minimal movement.
 * If the row is already fully visible, no scrolling occurs. For example, if the row is above the
 * visible area, the behavior is identical to that specified by `TOP`. This is the default.
 */
+NONE: number,

/**
 * The list view scrolls the row of interest to the top of the visible list view.
 */
+TOP: number
} & Titanium$Proxy



/**
 * A set of constants for the style that can be used for the `style` property of
 * <Titanium.UI.ListView>.
 */
declare type Titanium$UI$iOS$ListViewStyle = {

/**
 * A list view whose sections present distinct groups of rows. The section headers and footers
 * do not float.
 */
+GROUPED: number,

/**
 * A plain list view. Any section headers or footers are displayed as inline separators and
 * float when the list view is scrolled.
 */
+PLAIN: number
} & Titanium$Proxy



/**
 * Abstract object representing a live photo used in <Titanium.UI.iOS.LivePhotoView>.
 */
declare type Titanium$UI$iOS$LivePhoto = {} & Titanium$Proxy



/**
 * A view to display a <Titanium.UI.iOS.LivePhoto> object introduced in iOS 9.1.
 */
declare type Titanium$UI$iOS$LivePhotoView = {

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Current position of the view during an animation.
 */
+animatedCenter: Point,

/**
 * Background color of the view, as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * A background gradient for the view.
 */
backgroundGradient: Gradient,

/**
 * Background image for the view, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Determines whether to tile a background across a view.
 */
backgroundRepeat: boolean,

/**
 * Size of the left end cap.
 */
backgroundLeftCap: number,

/**
 * Size of the top end cap.
 */
backgroundTopCap: number,

/**
 * Border color of the view, as a color name or hex triplet.
 */
borderColor: string,

/**
 * Radius for the rounded corners of the view's border.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * View's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * Array of this view's child views.
 */
+children: Titanium$UI$View[],

/**
 * View's clipping behavior.
 */
clipMode: number,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Adds a horizontal parallax effect to the view
 */
horizontalMotionEffect: any,

/**
 * View's left position, in platform-specific units.
 */
left: number | string,

/**
 * Specifies how the view positions its children.
 * One of: 'composite', 'vertical', or 'horizontal'.
 */
layout: string,

/**
 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
 */
opacity: number,

/**
 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
 */
pullBackgroundColor: string,

/**
 * The preview context used in the 3D-Touch feature "Peek and Pop".
 */
previewContext: Titanium$UI$iOS$PreviewContext,

/**
 * View's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * The view's tintColor
 */
tintColor: string,

/**
 * The view's top position.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Adds a vertical parallax effect to the view
 */
verticalMotionEffect: any,

/**
 * Determines the blur radius used to create the shadow.
 */
viewShadowRadius: number,

/**
 * Determines the color of the shadow.
 */
viewShadowColor: string,

/**
 * Determines the offset for the shadow of the view.
 */
viewShadowOffset: Point,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * The Live Photo displayed in the view.
 */
livePhoto: Titanium$UI$iOS$LivePhoto,

/**
 * A Boolean value that determines whether the view plays the audio content of its Live Photo.
 */
muted: boolean,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any): void,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any[]): void,

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Removes a child view from this view's hierarchy.
 */
remove(view: any): void,

/**
 * Removes all child views from this view's hierarchy.
 */
removeAllChildren(): void,

/**
 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
replaceAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Begins playback of Live Photo content in the view.
 */
startPlaybackWithStyle(playbackStyle: number): void,

/**
 * Ends playback of Live Photo content in the view.
 */
stopPlayback(): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.animatedCenter> property.
 */
getAnimatedCenter(): Point,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundGradient> property.
 */
getBackgroundGradient(): Gradient,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundGradient> property.
 */
setBackgroundGradient(backgroundGradient: Gradient): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundImage> property.
 */
getBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundRepeat> property.
 */
getBackgroundRepeat(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundRepeat> property.
 */
setBackgroundRepeat(backgroundRepeat: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundLeftCap> property.
 */
getBackgroundLeftCap(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundLeftCap> property.
 */
setBackgroundLeftCap(backgroundLeftCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundTopCap> property.
 */
getBackgroundTopCap(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.backgroundTopCap> property.
 */
setBackgroundTopCap(backgroundTopCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.borderColor> property.
 */
getBorderColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.borderColor> property.
 */
setBorderColor(borderColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.children> property.
 */
getChildren(): Titanium$UI$View[],

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.clipMode> property.
 */
getClipMode(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.clipMode> property.
 */
setClipMode(clipMode: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.horizontalMotionEffect> property.
 */
getHorizontalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.horizontalMotionEffect> property.
 */
setHorizontalMotionEffect(horizontalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.layout> property.
 */
getLayout(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.layout> property.
 */
setLayout(layout: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.pullBackgroundColor> property.
 */
getPullBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.pullBackgroundColor> property.
 */
setPullBackgroundColor(pullBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.previewContext> property.
 */
getPreviewContext(): Titanium$UI$iOS$PreviewContext,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.previewContext> property.
 */
setPreviewContext(previewContext: Titanium$UI$iOS$PreviewContext): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.tintColor> property.
 */
getTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.tintColor> property.
 */
setTintColor(tintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.verticalMotionEffect> property.
 */
getVerticalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.verticalMotionEffect> property.
 */
setVerticalMotionEffect(verticalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.viewShadowRadius> property.
 */
getViewShadowRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.viewShadowRadius> property.
 */
setViewShadowRadius(viewShadowRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.viewShadowColor> property.
 */
getViewShadowColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.viewShadowColor> property.
 */
setViewShadowColor(viewShadowColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.viewShadowOffset> property.
 */
getViewShadowOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.viewShadowOffset> property.
 */
setViewShadowOffset(viewShadowOffset: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.livePhoto> property.
 */
getLivePhoto(): Titanium$UI$iOS$LivePhoto,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.livePhoto> property.
 */
setLivePhoto(livePhoto: Titanium$UI$iOS$LivePhoto): void,

/**
 * Gets the value of the <Titanium.UI.iOS.LivePhotoView.muted> property.
 */
getMuted(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.LivePhotoView.muted> property.
 */
setMuted(muted: boolean): void
} & Titanium$Proxy



/**
 * A menu popup provides the ability to create custom tooltip options using the `items` property
 * covering the native `UIMenuController` class.
 * See also:
 * * [iOS Developer Library: UIMenuController](https://developer.apple.com/documentation/uikit/uimenucontroller)
 */
declare type Titanium$UI$iOS$MenuPopup = {

/**
 * The items of the menu popup.
 */
items: string,

/**
 * Shows the menu popup.
 */
show(params: MenuPopupShowParams): void,

/**
 * Hides the menu popup.
 */
hide(params?: MenuPopupHideParams): void,

/**
 * Indicates whether the menu popup is currently visible.
 */
isVisible(): void,

/**
 * Gets the value of the <Titanium.UI.iOS.MenuPopup.items> property.
 */
getItems(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.MenuPopup.items> property.
 */
setItems(items: string): void
} & Titanium$Proxy



/**
 * A `NavigationWindow` implements a specialized view that manages the navigation of hierarchical
 * content.
 */
declare type Titanium$UI$iOS$NavigationWindow = {

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Current position of the view during an animation.
 */
+animatedCenter: Point,

/**
 * Background color of the window, as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * A background gradient for the view.
 */
backgroundGradient: Gradient,

/**
 * Background image for the view, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Determines whether to tile a background across a view.
 */
backgroundRepeat: boolean,

/**
 * Size of the left end cap.
 */
backgroundLeftCap: number,

/**
 * Size of the top end cap.
 */
backgroundTopCap: number,

/**
 * Border color of the view, as a color name or hex triplet.
 */
borderColor: string,

/**
 * Radius for the rounded corners of the view's border.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * Window's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * Array of this view's child views.
 */
+children: Titanium$UI$View[],

/**
 * View's clipping behavior.
 */
clipMode: number,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Adds a horizontal parallax effect to the view
 */
horizontalMotionEffect: any,

/**
 * Window's left position, in platform-specific units.
 */
left: number | string,

/**
 * Specifies how the view positions its children.
 * One of: 'composite', 'vertical', or 'horizontal'.
 */
layout: string,

/**
 * The opacity from 0.0-1.0.
 */
opacity: number,

/**
 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
 */
pullBackgroundColor: string,

/**
 * The preview context used in the 3D-Touch feature "Peek and Pop".
 */
previewContext: Titanium$UI$iOS$PreviewContext,

/**
 * Window's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * The view's tintColor
 */
tintColor: string,

/**
 * Window's top position, in platform-specific units.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Adds a vertical parallax effect to the view
 */
verticalMotionEffect: any,

/**
 * Determines the blur radius used to create the shadow.
 */
viewShadowRadius: number,

/**
 * Determines the color of the shadow.
 */
viewShadowColor: string,

/**
 * Determines the offset for the shadow of the view.
 */
viewShadowOffset: Point,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * An array of supported values specified using the EXTEND_EDGE constants in <Titanium.UI>.
 */
extendEdges: number[],

/**
 * Specifies if the edges should extend beyond opaque bars (navigation bar, tab bar, toolbar).
 */
includeOpaqueBars: boolean,

/**
 * Specifies whether or not the view controller should automatically adjust its scroll view insets.
 */
autoAdjustScrollViewInsets: boolean,

/**
 * Specifies whether the screen insets/notches are allowed to overlap the window's content or not.
 */
extendSafeArea: boolean,

/**
 * Boolean value indicating if the window is fullscreen.
 */
fullscreen: boolean,

/**
 * Boolean value indicating whether the system is allowed to hide the visual indicator for returning to the Home screen.
 */
homeIndicatorAutoHidden: boolean,

/**
 * Set this to true to hide the navigation bar on swipe.
 */
hidesBarsOnSwipe: boolean,

/**
 * Set this to true to hide the navigation bar on tap.
 */
hidesBarsOnTap: boolean,

/**
 * Set this to true to hide the navigation bar when the keyboard appears.
 */
hidesBarsWhenKeyboardAppears: boolean,

/**
 * Set this to true to hide the back button of navigation bar.
 */
hidesBackButton: boolean,

/**
 * A Boolean value indicating whether the title should be displayed in a large format.
 */
largeTitleEnabled: string,

/**
 * The mode to use when displaying the title of the navigation bar.
 */
largeTitleDisplayMode: number,

/**
 * An Array of views to show in the left nav bar area.
 */
leftNavButtons: Titanium$UI$View[],

/**
 * Indicates to open a modal window or not.
 */
modal: boolean,

/**
 * The <Titanium.UI.NavigationWindow> instance hosting this window.
 */
+navigationWindow: Titanium$UI$NavigationWindow,

/**
 * Array of supported orientation modes, specified using the orientation
 * constants defined in <Titanium.UI>.
 */
orientationModes: number[],

/**
 * Current orientation of the window.
 */
+orientation: number,

/**
 * An Array of views to show in the right nav bar area.
 */
rightNavButtons: Titanium$UI$View[],

/**
 * The padding needed to safely display content without it being overlapped by the screen insets and notches.
 */
+safeAreaPadding: Dimension,

/**
 * The status bar style associated with this window.
 */
statusBarStyle: number,

/**
 * Title text attributes of the window.
 */
titleAttributes: titleAttributesParams,

/**
 * Window to add to this navigation window.
 */
window: Titanium$UI$Window,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any): void,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any[]): void,

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Removes a child view from this view's hierarchy.
 */
remove(view: any): void,

/**
 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
replaceAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Closes the window.
 */
close(params?: any): void,

/**
 * Hides the navigation bar.
 */
hideNavBar(options?: any): void,

/**
 * Opens the window.
 */
open(params?: openWindowParams): void,

/**
 * Makes the navigation bar visible.
 */
showNavBar(options?: any): void,

/**
 * Makes the bottom toolbar visible.
 */
showToolbar(options?: any): void,

/**
 * Makes the bottom toolbar invisible.
 */
hideToolbar(options?: any): void,

/**
 * Closes a window and removes it from the navigation window.
 */
closeWindow(window: Titanium$UI$Window, options: any): void,

/**
 * Opens a window within the navigation window.
 */
openWindow(window: Titanium$UI$Window, options: any): void,

/**
 * Closes all windows that are currently opened inside the navigation window.
 */
popToRootWindow(options: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.animatedCenter> property.
 */
getAnimatedCenter(): Point,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundGradient> property.
 */
getBackgroundGradient(): Gradient,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundGradient> property.
 */
setBackgroundGradient(backgroundGradient: Gradient): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundImage> property.
 */
getBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundRepeat> property.
 */
getBackgroundRepeat(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundRepeat> property.
 */
setBackgroundRepeat(backgroundRepeat: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundLeftCap> property.
 */
getBackgroundLeftCap(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundLeftCap> property.
 */
setBackgroundLeftCap(backgroundLeftCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundTopCap> property.
 */
getBackgroundTopCap(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.backgroundTopCap> property.
 */
setBackgroundTopCap(backgroundTopCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.borderColor> property.
 */
getBorderColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.borderColor> property.
 */
setBorderColor(borderColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.children> property.
 */
getChildren(): Titanium$UI$View[],

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.clipMode> property.
 */
getClipMode(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.clipMode> property.
 */
setClipMode(clipMode: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.horizontalMotionEffect> property.
 */
getHorizontalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.horizontalMotionEffect> property.
 */
setHorizontalMotionEffect(horizontalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.layout> property.
 */
getLayout(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.layout> property.
 */
setLayout(layout: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.pullBackgroundColor> property.
 */
getPullBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.pullBackgroundColor> property.
 */
setPullBackgroundColor(pullBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.previewContext> property.
 */
getPreviewContext(): Titanium$UI$iOS$PreviewContext,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.previewContext> property.
 */
setPreviewContext(previewContext: Titanium$UI$iOS$PreviewContext): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.tintColor> property.
 */
getTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.tintColor> property.
 */
setTintColor(tintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.verticalMotionEffect> property.
 */
getVerticalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.verticalMotionEffect> property.
 */
setVerticalMotionEffect(verticalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.viewShadowRadius> property.
 */
getViewShadowRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.viewShadowRadius> property.
 */
setViewShadowRadius(viewShadowRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.viewShadowColor> property.
 */
getViewShadowColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.viewShadowColor> property.
 */
setViewShadowColor(viewShadowColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.viewShadowOffset> property.
 */
getViewShadowOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.viewShadowOffset> property.
 */
setViewShadowOffset(viewShadowOffset: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.extendEdges> property.
 */
getExtendEdges(): number[],

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.extendEdges> property.
 */
setExtendEdges(extendEdges: $ReadOnlyArray<number>): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.includeOpaqueBars> property.
 */
getIncludeOpaqueBars(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.includeOpaqueBars> property.
 */
setIncludeOpaqueBars(includeOpaqueBars: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.autoAdjustScrollViewInsets> property.
 */
getAutoAdjustScrollViewInsets(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.autoAdjustScrollViewInsets> property.
 */
setAutoAdjustScrollViewInsets(autoAdjustScrollViewInsets: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.extendSafeArea> property.
 */
getExtendSafeArea(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.extendSafeArea> property.
 */
setExtendSafeArea(extendSafeArea: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.fullscreen> property.
 */
getFullscreen(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.fullscreen> property.
 */
setFullscreen(fullscreen: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.homeIndicatorAutoHidden> property.
 */
getHomeIndicatorAutoHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.homeIndicatorAutoHidden> property.
 */
setHomeIndicatorAutoHidden(homeIndicatorAutoHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.hidesBarsOnSwipe> property.
 */
getHidesBarsOnSwipe(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.hidesBarsOnSwipe> property.
 */
setHidesBarsOnSwipe(hidesBarsOnSwipe: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.hidesBarsOnTap> property.
 */
getHidesBarsOnTap(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.hidesBarsOnTap> property.
 */
setHidesBarsOnTap(hidesBarsOnTap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.hidesBarsWhenKeyboardAppears> property.
 */
getHidesBarsWhenKeyboardAppears(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.hidesBarsWhenKeyboardAppears> property.
 */
setHidesBarsWhenKeyboardAppears(hidesBarsWhenKeyboardAppears: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.hidesBackButton> property.
 */
getHidesBackButton(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.hidesBackButton> property.
 */
setHidesBackButton(hidesBackButton: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.largeTitleEnabled> property.
 */
getLargeTitleEnabled(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.largeTitleEnabled> property.
 */
setLargeTitleEnabled(largeTitleEnabled: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.largeTitleDisplayMode> property.
 */
getLargeTitleDisplayMode(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.largeTitleDisplayMode> property.
 */
setLargeTitleDisplayMode(largeTitleDisplayMode: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.leftNavButtons> property.
 */
getLeftNavButtons(): Titanium$UI$View[],

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.leftNavButtons> property.
 */
setLeftNavButtons(leftNavButtons: any[]): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.modal> property.
 */
getModal(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.modal> property.
 */
setModal(modal: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.navigationWindow> property.
 */
getNavigationWindow(): Titanium$UI$NavigationWindow,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.orientationModes> property.
 */
getOrientationModes(): number[],

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.orientationModes> property.
 */
setOrientationModes(orientationModes: $ReadOnlyArray<number>): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.orientation> property.
 */
getOrientation(): number,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.rightNavButtons> property.
 */
getRightNavButtons(): Titanium$UI$View[],

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.rightNavButtons> property.
 */
setRightNavButtons(rightNavButtons: any[]): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.safeAreaPadding> property.
 */
getSafeAreaPadding(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.statusBarStyle> property.
 */
getStatusBarStyle(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.statusBarStyle> property.
 */
setStatusBarStyle(statusBarStyle: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.titleAttributes> property.
 */
getTitleAttributes(): titleAttributesParams,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.titleAttributes> property.
 */
setTitleAttributes(titleAttributes: titleAttributesParams): void,

/**
 * Gets the value of the <Titanium.UI.iOS.NavigationWindow.window> property.
 */
getWindow(): Titanium$UI$Window,

/**
 * Sets the value of the <Titanium.UI.iOS.NavigationWindow.window> property.
 */
setWindow(window: Titanium$UI$Window): void
} & Titanium$Proxy



/**
 * A PreviewAction provides options to configure actions used by the iOS 9 3D-Touch "Peek and Pop"
 * feature.
 */
declare type Titanium$UI$iOS$PreviewAction = {

/**
 * The title of the action.
 */
title: string,

/**
 * The style of the action.
 */
style: number,

/**
 * Gets the value of the <Titanium.UI.iOS.PreviewAction.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.PreviewAction.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.PreviewAction.style> property.
 */
getStyle(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.PreviewAction.style> property.
 */
setStyle(style: number): void
} & Titanium$Proxy



/**
 * A PreviewActionGroup provides options to configure a group of actions used by the iOS9 3D-Touch
 * feature "Peek and Pop".
 */
declare type Titanium$UI$iOS$PreviewActionGroup = {

/**
 * The title of the action group.
 */
title: string,

/**
 * The style of the action group.
 */
style: number,

/**
 * The preview actions assigned to this preview action group.
 */
actions: Titanium$UI$iOS$PreviewAction[],

/**
 * Gets the value of the <Titanium.UI.iOS.PreviewActionGroup.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.PreviewActionGroup.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.PreviewActionGroup.style> property.
 */
getStyle(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.PreviewActionGroup.style> property.
 */
setStyle(style: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.PreviewActionGroup.actions> property.
 */
getActions(): Titanium$UI$iOS$PreviewAction[],

/**
 * Sets the value of the <Titanium.UI.iOS.PreviewActionGroup.actions> property.
 */
setActions(actions: $ReadOnlyArray<Titanium$UI$iOS$PreviewAction>): void
} & Titanium$Proxy



/**
 * A PreviewContext provides options to configure the iOS 9 3D-Touch "Peek and Pop" feature.
 */
declare type Titanium$UI$iOS$PreviewContext = {

/**
 * The preview actions and preview action groups.
 */
actions: Titanium$UI$iOS$PreviewAction[],

/**
 * The height of the preview.
 */
contentHeight: number,

/**
 * The preview view.
 */
preview: Titanium$UI$View,

/**
 * Gets the value of the <Titanium.UI.iOS.PreviewContext.actions> property.
 */
getActions(): Titanium$UI$iOS$PreviewAction[],

/**
 * Sets the value of the <Titanium.UI.iOS.PreviewContext.actions> property.
 */
setActions(actions: $ReadOnlyArray<Titanium$UI$iOS$PreviewAction>): void,

/**
 * Gets the value of the <Titanium.UI.iOS.PreviewContext.contentHeight> property.
 */
getContentHeight(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.PreviewContext.contentHeight> property.
 */
setContentHeight(contentHeight: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.PreviewContext.preview> property.
 */
getPreview(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.iOS.PreviewContext.preview> property.
 */
setPreview(preview: any): void
} & Titanium$Proxy



/**
 * Continuous or instantaneous force to apply to an item.
 */
declare type Titanium$UI$iOS$PushBehavior = {

/**
 * State of the push behavior's force.
 */
active: boolean,

/**
 * Specifies the angle of the force vector in radians.
 */
angle: number,

/**
 * Items added to this behavior.
 */
+items: Titanium$UI$View[],

/**
 * Specifies the magnitude of the force vector.
 */
magnitude: number,

/**
 * Specifies the direction of the force vector as an x, y pair.
 */
pushDirection: Point,

/**
 * Specifies the push mode.
 */
pushMode: number,

/**
 * Adds an item to this behavior.
 */
addItem(item: any): void,

/**
 * Removes the specified item from this behavior.
 */
removeItem(item: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.PushBehavior.active> property.
 */
getActive(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.PushBehavior.active> property.
 */
setActive(active: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.PushBehavior.angle> property.
 */
getAngle(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.PushBehavior.angle> property.
 */
setAngle(angle: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.PushBehavior.items> property.
 */
getItems(): Titanium$UI$View[],

/**
 * Gets the value of the <Titanium.UI.iOS.PushBehavior.magnitude> property.
 */
getMagnitude(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.PushBehavior.magnitude> property.
 */
setMagnitude(magnitude: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.PushBehavior.pushDirection> property.
 */
getPushDirection(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.PushBehavior.pushDirection> property.
 */
setPushDirection(pushDirection: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.PushBehavior.pushMode> property.
 */
getPushMode(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.PushBehavior.pushMode> property.
 */
setPushMode(pushMode: number): void
} & Titanium$Proxy



/**
 * Dynamic behavior defining an item's movement to a specific point.
 */
declare type Titanium$UI$iOS$SnapBehavior = {

/**
 * Specifies the amount of oscillation during the conclusion of the snap.
 */
damping: number,

/**
 * Item to add to this behavior.
 */
item: Titanium$UI$View,

/**
 * Specifies the point to snap to.
 */
snapPoint: Point,

/**
 * Gets the value of the <Titanium.UI.iOS.SnapBehavior.damping> property.
 */
getDamping(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.SnapBehavior.damping> property.
 */
setDamping(damping: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SnapBehavior.item> property.
 */
getItem(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.iOS.SnapBehavior.item> property.
 */
setItem(item: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SnapBehavior.snapPoint> property.
 */
getSnapPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.SnapBehavior.snapPoint> property.
 */
setSnapPoint(snapPoint: Point): void
} & Titanium$Proxy



/**
 * A SplitWindow is a window that manages the presentation of two side-by-side view
 * controllers.
 */
declare type Titanium$UI$iOS$SplitWindow = {

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Current position of the view during an animation.
 */
+animatedCenter: Point,

/**
 * Background color of the window, as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * A background gradient for the view.
 */
backgroundGradient: Gradient,

/**
 * Background image for the view, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Determines whether to tile a background across a view.
 */
backgroundRepeat: boolean,

/**
 * Size of the left end cap.
 */
backgroundLeftCap: number,

/**
 * Size of the top end cap.
 */
backgroundTopCap: number,

/**
 * Border color of the view, as a color name or hex triplet.
 */
borderColor: string,

/**
 * Radius for the rounded corners of the view's border.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * Window's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * Array of this view's child views.
 */
+children: Titanium$UI$View[],

/**
 * View's clipping behavior.
 */
clipMode: number,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Adds a horizontal parallax effect to the view
 */
horizontalMotionEffect: any,

/**
 * Window's left position, in platform-specific units.
 */
left: number | string,

/**
 * Specifies how the view positions its children.
 * One of: 'composite', 'vertical', or 'horizontal'.
 */
layout: string,

/**
 * The opacity from 0.0-1.0.
 */
opacity: number,

/**
 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
 */
pullBackgroundColor: string,

/**
 * The preview context used in the 3D-Touch feature "Peek and Pop".
 */
previewContext: Titanium$UI$iOS$PreviewContext,

/**
 * Window's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * The view's tintColor
 */
tintColor: string,

/**
 * Window's top position, in platform-specific units.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Adds a vertical parallax effect to the view
 */
verticalMotionEffect: any,

/**
 * Determines the blur radius used to create the shadow.
 */
viewShadowRadius: number,

/**
 * Determines the color of the shadow.
 */
viewShadowColor: string,

/**
 * Determines the offset for the shadow of the view.
 */
viewShadowOffset: Point,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * Title for the back button. This is only valid when the window is a child of a tab.
 */
backButtonTitle: string,

/**
 * The image to show as the back button. This is only valid when the window is a child of a tab.
 */
backButtonTitleImage: string | Titanium$Blob,

/**
 * Background color for the nav bar, as a color name or hex triplet.
 */
barColor: string,

/**
 * Background image for the nav bar, specified as a URL to a local image.
 */
barImage: string,

/**
 * An array of supported values specified using the EXTEND_EDGE constants in <Titanium.UI>.
 */
extendEdges: number[],

/**
 * Specifies if the edges should extend beyond opaque bars (navigation bar, tab bar, toolbar).
 */
includeOpaqueBars: boolean,

/**
 * Specifies whether or not the view controller should automatically adjust its scroll view insets.
 */
autoAdjustScrollViewInsets: boolean,

/**
 * Specifies whether the screen insets/notches are allowed to overlap the window's content or not.
 */
extendSafeArea: boolean,

/**
 * Boolean value indicating if the window is fullscreen.
 */
fullscreen: boolean,

/**
 * Boolean value indicating whether the system is allowed to hide the visual indicator for returning to the Home screen.
 */
homeIndicatorAutoHidden: boolean,

/**
 * Set this to true to hide the shadow image of the navigation bar.
 */
hideShadow: boolean,

/**
 * Set this to true to hide the navigation bar on swipe.
 */
hidesBarsOnSwipe: boolean,

/**
 * Set this to true to hide the navigation bar on tap.
 */
hidesBarsOnTap: boolean,

/**
 * Set this to true to hide the navigation bar when the keyboard appears.
 */
hidesBarsWhenKeyboardAppears: boolean,

/**
 * Set this to true to hide the back button of navigation bar.
 */
hidesBackButton: boolean,

/**
 * A Boolean value indicating whether the title should be displayed in a large format.
 */
largeTitleEnabled: string,

/**
 * The mode to use when displaying the title of the navigation bar.
 */
largeTitleDisplayMode: number,

/**
 * View to show in the left nav bar area.
 */
leftNavButton: Titanium$UI$View,

/**
 * An Array of views to show in the left nav bar area.
 */
leftNavButtons: Titanium$UI$View[],

/**
 * Indicates to open a modal window or not.
 */
modal: boolean,

/**
 * Hides the navigation bar (`true`) or shows the navigation bar (`false`).
 */
navBarHidden: boolean,

/**
 * The tintColor to apply to the navigation bar.
 */
navTintColor: string,

/**
 * The <Titanium.UI.NavigationWindow> instance hosting this window.
 */
+navigationWindow: Titanium$UI$NavigationWindow,

/**
 * Array of supported orientation modes, specified using the orientation
 * constants defined in <Titanium.UI>.
 */
orientationModes: number[],

/**
 * Current orientation of the window.
 */
+orientation: number,

/**
 * View to show in the right nav bar area.
 */
rightNavButton: Titanium$UI$View,

/**
 * An Array of views to show in the right nav bar area.
 */
rightNavButtons: Titanium$UI$View[],

/**
 * The padding needed to safely display content without it being overlapped by the screen insets and notches.
 */
+safeAreaPadding: Dimension,

/**
 * Shadow image for the navigation bar, specified as a URL to a local image..
 */
shadowImage: string,

/**
 * The status bar style associated with this window.
 */
statusBarStyle: number,

/**
 * Boolean value indicating if the tab bar should be hidden.
 */
tabBarHidden: boolean,

/**
 * Title of the window.
 */
title: string,

/**
 * Title text attributes of the window.
 */
titleAttributes: titleAttributesParams,

/**
 * View to show in the title area of the nav bar.
 */
titleControl: Titanium$UI$View,

/**
 * Image to show in the title area of the nav bar, specified as a local file path or URL.
 */
titleImage: string,

/**
 * Title prompt for the window.
 */
titlePrompt: string,

/**
 * Key identifying a string from the locale file to use for the window title.
 */
titleid: string,

/**
 * Key identifying a string from the locale file to use for the window title prompt.
 */
titlepromptid: string,

/**
 * Array of button objects to show in the window's toolbar.
 */
toolbar: any[],

/**
 * Boolean value indicating if the nav bar is translucent.
 */
translucent: boolean,

/**
 * Loads a JavaScript file from a local URL.
 */
url: string,

/**
 * Window for the detail view section of the SplitWindow.
 */
detailView: Titanium$UI$Window,

/**
 * Window for the master view section of the SplitWindow.
 */
masterView: Titanium$UI$Window,

/**
 * Determines whether to show the master view in portrait orientation.
 */
showMasterInPortrait: boolean,

/**
 * Determines whether to show the master view is overlayed in portrait orientation.
 */
masterIsOverlayed: boolean,

/**
 * Determines whether to show the master view or hide.
 */
masterViewVisible: boolean,

/**
 * Determines the width of the `masterView` in portrait mode.
 */
portraitSplit: number,

/**
 * Determines the width of the `masterView` in landscape mode.
 */
landscapeSplit: number,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any): void,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any[]): void,

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Removes a child view from this view's hierarchy.
 */
remove(view: any): void,

/**
 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
replaceAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Closes the window.
 */
close(params?: any): void,

/**
 * Hides the navigation bar.
 */
hideNavBar(options?: any): void,

/**
 * Hides the tab bar. Must be called before opening the window.
 */
hideTabBar(): void,

/**
 * Opens the window.
 */
open(params?: openWindowParams): void,

/**
 * Sets the array of items to show in the window's toolbar.
 */
setToolbar(items: $ReadOnlyArray<any>, params?: windowToolbarParam): void,

/**
 * Makes the navigation bar visible.
 */
showNavBar(options?: any): void,

/**
 * Makes the bottom toolbar visible.
 */
showToolbar(options?: any): void,

/**
 * Makes the bottom toolbar invisible.
 */
hideToolbar(options?: any): void,

/**
 * Sets the value of the [showMasterInPortrait](Titanium.UI.iOS.SplitWindow.showMasterInPortrait) property.
 */
setShowMasterInPortrait(showMasterInPortrait: boolean, animated?: animationOption): void,

/**
 * Sets the value of the [masterIsOverlayed](Titanium.UI.iOS.SplitWindow.masterIsOverlayed) property.
 */
setMasterIsOverlayed(masterIsOverlayed: boolean, animated?: animationOption): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.animatedCenter> property.
 */
getAnimatedCenter(): Point,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.backgroundGradient> property.
 */
getBackgroundGradient(): Gradient,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backgroundGradient> property.
 */
setBackgroundGradient(backgroundGradient: Gradient): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.backgroundImage> property.
 */
getBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.backgroundRepeat> property.
 */
getBackgroundRepeat(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backgroundRepeat> property.
 */
setBackgroundRepeat(backgroundRepeat: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.backgroundLeftCap> property.
 */
getBackgroundLeftCap(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backgroundLeftCap> property.
 */
setBackgroundLeftCap(backgroundLeftCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.backgroundTopCap> property.
 */
getBackgroundTopCap(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backgroundTopCap> property.
 */
setBackgroundTopCap(backgroundTopCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.borderColor> property.
 */
getBorderColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.borderColor> property.
 */
setBorderColor(borderColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.children> property.
 */
getChildren(): Titanium$UI$View[],

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.clipMode> property.
 */
getClipMode(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.clipMode> property.
 */
setClipMode(clipMode: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.horizontalMotionEffect> property.
 */
getHorizontalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.horizontalMotionEffect> property.
 */
setHorizontalMotionEffect(horizontalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.layout> property.
 */
getLayout(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.layout> property.
 */
setLayout(layout: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.pullBackgroundColor> property.
 */
getPullBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.pullBackgroundColor> property.
 */
setPullBackgroundColor(pullBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.previewContext> property.
 */
getPreviewContext(): Titanium$UI$iOS$PreviewContext,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.previewContext> property.
 */
setPreviewContext(previewContext: Titanium$UI$iOS$PreviewContext): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.tintColor> property.
 */
getTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.tintColor> property.
 */
setTintColor(tintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.verticalMotionEffect> property.
 */
getVerticalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.verticalMotionEffect> property.
 */
setVerticalMotionEffect(verticalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.viewShadowRadius> property.
 */
getViewShadowRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.viewShadowRadius> property.
 */
setViewShadowRadius(viewShadowRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.viewShadowColor> property.
 */
getViewShadowColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.viewShadowColor> property.
 */
setViewShadowColor(viewShadowColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.viewShadowOffset> property.
 */
getViewShadowOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.viewShadowOffset> property.
 */
setViewShadowOffset(viewShadowOffset: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.backButtonTitle> property.
 */
getBackButtonTitle(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backButtonTitle> property.
 */
setBackButtonTitle(backButtonTitle: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.backButtonTitleImage> property.
 */
getBackButtonTitleImage(): string | Titanium$Blob,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backButtonTitleImage> property.
 */
setBackButtonTitleImage(backButtonTitleImage: string): void,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.backButtonTitleImage> property.
 */
setBackButtonTitleImage(backButtonTitleImage: Titanium$Blob): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.barColor> property.
 */
getBarColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.barColor> property.
 */
setBarColor(barColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.barImage> property.
 */
getBarImage(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.barImage> property.
 */
setBarImage(barImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.extendEdges> property.
 */
getExtendEdges(): number[],

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.extendEdges> property.
 */
setExtendEdges(extendEdges: $ReadOnlyArray<number>): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.includeOpaqueBars> property.
 */
getIncludeOpaqueBars(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.includeOpaqueBars> property.
 */
setIncludeOpaqueBars(includeOpaqueBars: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.autoAdjustScrollViewInsets> property.
 */
getAutoAdjustScrollViewInsets(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.autoAdjustScrollViewInsets> property.
 */
setAutoAdjustScrollViewInsets(autoAdjustScrollViewInsets: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.extendSafeArea> property.
 */
getExtendSafeArea(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.extendSafeArea> property.
 */
setExtendSafeArea(extendSafeArea: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.fullscreen> property.
 */
getFullscreen(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.fullscreen> property.
 */
setFullscreen(fullscreen: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.homeIndicatorAutoHidden> property.
 */
getHomeIndicatorAutoHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.homeIndicatorAutoHidden> property.
 */
setHomeIndicatorAutoHidden(homeIndicatorAutoHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.hideShadow> property.
 */
getHideShadow(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.hideShadow> property.
 */
setHideShadow(hideShadow: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.hidesBarsOnSwipe> property.
 */
getHidesBarsOnSwipe(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.hidesBarsOnSwipe> property.
 */
setHidesBarsOnSwipe(hidesBarsOnSwipe: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.hidesBarsOnTap> property.
 */
getHidesBarsOnTap(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.hidesBarsOnTap> property.
 */
setHidesBarsOnTap(hidesBarsOnTap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.hidesBarsWhenKeyboardAppears> property.
 */
getHidesBarsWhenKeyboardAppears(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.hidesBarsWhenKeyboardAppears> property.
 */
setHidesBarsWhenKeyboardAppears(hidesBarsWhenKeyboardAppears: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.hidesBackButton> property.
 */
getHidesBackButton(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.hidesBackButton> property.
 */
setHidesBackButton(hidesBackButton: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.largeTitleEnabled> property.
 */
getLargeTitleEnabled(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.largeTitleEnabled> property.
 */
setLargeTitleEnabled(largeTitleEnabled: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.largeTitleDisplayMode> property.
 */
getLargeTitleDisplayMode(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.largeTitleDisplayMode> property.
 */
setLargeTitleDisplayMode(largeTitleDisplayMode: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.leftNavButton> property.
 */
getLeftNavButton(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.leftNavButton> property.
 */
setLeftNavButton(leftNavButton: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.leftNavButtons> property.
 */
getLeftNavButtons(): Titanium$UI$View[],

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.leftNavButtons> property.
 */
setLeftNavButtons(leftNavButtons: any[]): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.modal> property.
 */
getModal(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.modal> property.
 */
setModal(modal: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.navBarHidden> property.
 */
getNavBarHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.navBarHidden> property.
 */
setNavBarHidden(navBarHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.navTintColor> property.
 */
getNavTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.navTintColor> property.
 */
setNavTintColor(navTintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.navigationWindow> property.
 */
getNavigationWindow(): Titanium$UI$NavigationWindow,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.orientationModes> property.
 */
getOrientationModes(): number[],

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.orientationModes> property.
 */
setOrientationModes(orientationModes: $ReadOnlyArray<number>): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.orientation> property.
 */
getOrientation(): number,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.rightNavButton> property.
 */
getRightNavButton(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.rightNavButton> property.
 */
setRightNavButton(rightNavButton: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.rightNavButtons> property.
 */
getRightNavButtons(): Titanium$UI$View[],

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.rightNavButtons> property.
 */
setRightNavButtons(rightNavButtons: any[]): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.safeAreaPadding> property.
 */
getSafeAreaPadding(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.shadowImage> property.
 */
getShadowImage(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.shadowImage> property.
 */
setShadowImage(shadowImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.statusBarStyle> property.
 */
getStatusBarStyle(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.statusBarStyle> property.
 */
setStatusBarStyle(statusBarStyle: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.tabBarHidden> property.
 */
getTabBarHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.tabBarHidden> property.
 */
setTabBarHidden(tabBarHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.titleAttributes> property.
 */
getTitleAttributes(): titleAttributesParams,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.titleAttributes> property.
 */
setTitleAttributes(titleAttributes: titleAttributesParams): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.titleControl> property.
 */
getTitleControl(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.titleControl> property.
 */
setTitleControl(titleControl: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.titleImage> property.
 */
getTitleImage(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.titleImage> property.
 */
setTitleImage(titleImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.titlePrompt> property.
 */
getTitlePrompt(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.titlePrompt> property.
 */
setTitlePrompt(titlePrompt: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.titleid> property.
 */
getTitleid(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.titleid> property.
 */
setTitleid(titleid: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.titlepromptid> property.
 */
getTitlepromptid(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.titlepromptid> property.
 */
setTitlepromptid(titlepromptid: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.toolbar> property.
 */
getToolbar(): any[],

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.translucent> property.
 */
getTranslucent(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.translucent> property.
 */
setTranslucent(translucent: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.url> property.
 */
getUrl(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.url> property.
 */
setUrl(url: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.detailView> property.
 */
getDetailView(): Titanium$UI$Window,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.detailView> property.
 */
setDetailView(detailView: Titanium$UI$Window): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.masterView> property.
 */
getMasterView(): Titanium$UI$Window,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.masterView> property.
 */
setMasterView(masterView: Titanium$UI$Window): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.showMasterInPortrait> property.
 */
getShowMasterInPortrait(): boolean,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.masterIsOverlayed> property.
 */
getMasterIsOverlayed(): boolean,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.masterViewVisible> property.
 */
getMasterViewVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.masterViewVisible> property.
 */
setMasterViewVisible(masterViewVisible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.portraitSplit> property.
 */
getPortraitSplit(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.portraitSplit> property.
 */
setPortraitSplit(portraitSplit: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.SplitWindow.landscapeSplit> property.
 */
getLandscapeSplit(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.SplitWindow.landscapeSplit> property.
 */
setLandscapeSplit(landscapeSplit: number): void
} & Titanium$Proxy



/**
 * A widget used to increment and decrement a value.
 */
declare type Titanium$UI$iOS$Stepper = {

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Current position of the view during an animation.
 */
+animatedCenter: Point,

/**
 * Background color of the view, as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * A background gradient for the view.
 */
backgroundGradient: Gradient,

/**
 * Background image for the stepper in its normal state, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Determines whether to tile a background across a view.
 */
backgroundRepeat: boolean,

/**
 * Size of the left end cap.
 */
backgroundLeftCap: number,

/**
 * Size of the top end cap.
 */
backgroundTopCap: number,

/**
 * Border color of the view, as a color name or hex triplet.
 */
borderColor: string,

/**
 * Radius for the rounded corners of the view's border.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * View's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * View's clipping behavior.
 */
clipMode: number,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Adds a horizontal parallax effect to the view
 */
horizontalMotionEffect: any,

/**
 * View's left position, in platform-specific units.
 */
left: number | string,

/**
 * Specifies how the view positions its children.
 * One of: 'composite', 'vertical', or 'horizontal'.
 */
layout: string,

/**
 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
 */
opacity: number,

/**
 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
 */
pullBackgroundColor: string,

/**
 * The preview context used in the 3D-Touch feature "Peek and Pop".
 */
previewContext: Titanium$UI$iOS$PreviewContext,

/**
 * View's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * Sets the color for the widget, any backgroundImages added will be set to the same color.
 */
tintColor: string,

/**
 * The view's top position.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Adds a vertical parallax effect to the view
 */
verticalMotionEffect: any,

/**
 * Determines the blur radius used to create the shadow.
 */
viewShadowRadius: number,

/**
 * Determines the color of the shadow.
 */
viewShadowColor: string,

/**
 * Determines the offset for the shadow of the view.
 */
viewShadowOffset: Point,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * Determines if the stepper is enabled or disabled.
 */
enabled: boolean,

/**
 * The current value of the stepper.
 */
value: number,

/**
 * If YES, value change events are sent immediately when the value changes during user interaction.
 * If NO, a value change event is sent when user interaction ends.
 * The default value is YES.
 */
continuous: boolean,

/**
 * If YES, the user pressing and holding on the stepper repeatedly alters value.
 * The default value is YES.
 */
autorepeat: boolean,

/**
 * If YES, incrementing beyond <Titanium.UI.iOS.Stepper.maximum> sets value to <Titanium.UI.iOS.Stepper.minimum>. likewise, decrementing below
 * <Titanium.UI.iOS.Stepper.minimum> sets value to <Titanium.UI.iOS.Stepper.maximum>. If NO, the stepper does not increment beyond <Titanium.UI.iOS.Stepper.maximum> nor
 * does it decrement below <Titanium.UI.iOS.Stepper.minimum> but rather holds at those values.
 * The default value is NO.
 */
wraps: boolean,

/**
 * The minimum value the stepper will be set to, the value must be smaller than the maximum value.
 * If you attempt to set a value equal to or greater than maximum, the system will default the
 * value to 0.
 */
minimum: number,

/**
 * The maximum value the stepper will be set to, the value must be greater than the minimum value.
 * If you attempt to set a value equal to or lower than minimum, the system will default the
 * value to 100.
 */
maximum: number,

/**
 * The value the stepper will increment and decrement by, default value for this property is 1. When setting
 * a new value, it must be greater than 1.
 */
steps: number,

/**
 * Background image for the stepper decrement button in its normal state, specified as a local
 * file path or URL.
 */
decrementImage: string,

/**
 * Background image for the stepper decrement button in its disabled state, specified as a local
 * file path or URL. The decrement button enters a disabled state ones the value is equal to the
 * minimumValue , setting the enabled property to false will have no effect to decrement button state.
 */
decrementDisabledImage: string,

/**
 * Background image for the stepper increment button in its normal state, specified as a local
 * file path or URL.
 */
incrementImage: string,

/**
 * Background image for the stepper increment button in its disabled state, specified as a local
 * file path or URL.The increment button enters a disabled state ones the value is equal to the
 * maximumValue , setting the enabled property to false will have no effect to increment button state.
 */
incrementDisabledImage: string,

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.animatedCenter> property.
 */
getAnimatedCenter(): Point,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.backgroundGradient> property.
 */
getBackgroundGradient(): Gradient,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.backgroundGradient> property.
 */
setBackgroundGradient(backgroundGradient: Gradient): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.backgroundImage> property.
 */
getBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.backgroundRepeat> property.
 */
getBackgroundRepeat(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.backgroundRepeat> property.
 */
setBackgroundRepeat(backgroundRepeat: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.backgroundLeftCap> property.
 */
getBackgroundLeftCap(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.backgroundLeftCap> property.
 */
setBackgroundLeftCap(backgroundLeftCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.backgroundTopCap> property.
 */
getBackgroundTopCap(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.backgroundTopCap> property.
 */
setBackgroundTopCap(backgroundTopCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.borderColor> property.
 */
getBorderColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.borderColor> property.
 */
setBorderColor(borderColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.clipMode> property.
 */
getClipMode(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.clipMode> property.
 */
setClipMode(clipMode: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.horizontalMotionEffect> property.
 */
getHorizontalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.horizontalMotionEffect> property.
 */
setHorizontalMotionEffect(horizontalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.layout> property.
 */
getLayout(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.layout> property.
 */
setLayout(layout: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.pullBackgroundColor> property.
 */
getPullBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.pullBackgroundColor> property.
 */
setPullBackgroundColor(pullBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.previewContext> property.
 */
getPreviewContext(): Titanium$UI$iOS$PreviewContext,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.previewContext> property.
 */
setPreviewContext(previewContext: Titanium$UI$iOS$PreviewContext): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.tintColor> property.
 */
getTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.tintColor> property.
 */
setTintColor(tintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.verticalMotionEffect> property.
 */
getVerticalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.verticalMotionEffect> property.
 */
setVerticalMotionEffect(verticalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.viewShadowRadius> property.
 */
getViewShadowRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.viewShadowRadius> property.
 */
setViewShadowRadius(viewShadowRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.viewShadowColor> property.
 */
getViewShadowColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.viewShadowColor> property.
 */
setViewShadowColor(viewShadowColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.viewShadowOffset> property.
 */
getViewShadowOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.viewShadowOffset> property.
 */
setViewShadowOffset(viewShadowOffset: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.enabled> property.
 */
getEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.enabled> property.
 */
setEnabled(enabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.value> property.
 */
getValue(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.value> property.
 */
setValue(value: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.continuous> property.
 */
getContinuous(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.continuous> property.
 */
setContinuous(continuous: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.autorepeat> property.
 */
getAutorepeat(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.autorepeat> property.
 */
setAutorepeat(autorepeat: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.wraps> property.
 */
getWraps(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.wraps> property.
 */
setWraps(wraps: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.minimum> property.
 */
getMinimum(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.minimum> property.
 */
setMinimum(minimum: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.maximum> property.
 */
getMaximum(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.maximum> property.
 */
setMaximum(maximum: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.steps> property.
 */
getSteps(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.steps> property.
 */
setSteps(steps: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.decrementImage> property.
 */
getDecrementImage(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.decrementImage> property.
 */
setDecrementImage(decrementImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.decrementDisabledImage> property.
 */
getDecrementDisabledImage(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.decrementDisabledImage> property.
 */
setDecrementDisabledImage(decrementDisabledImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.incrementImage> property.
 */
getIncrementImage(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.incrementImage> property.
 */
setIncrementImage(incrementImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Stepper.incrementDisabledImage> property.
 */
getIncrementDisabledImage(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Stepper.incrementDisabledImage> property.
 */
setIncrementDisabledImage(incrementDisabledImage: string): void
} & Titanium$Proxy



/**
 * A button bar that maintains a selected state.
 */
declare type Titanium$UI$iOS$TabbedBar = {

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Current position of the view during an animation.
 */
+animatedCenter: Point,

/**
 * Background color of the view, as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * A background gradient for the view.
 */
backgroundGradient: Gradient,

/**
 * Background image for the view, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Determines whether to tile a background across a view.
 */
backgroundRepeat: boolean,

/**
 * Size of the left end cap.
 */
backgroundLeftCap: number,

/**
 * Size of the top end cap.
 */
backgroundTopCap: number,

/**
 * Border color of the view, as a color name or hex triplet.
 */
borderColor: string,

/**
 * Radius for the rounded corners of the view's border.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * View's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * View's clipping behavior.
 */
clipMode: number,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Adds a horizontal parallax effect to the view
 */
horizontalMotionEffect: any,

/**
 * View's left position, in platform-specific units.
 */
left: number | string,

/**
 * Specifies how the view positions its children.
 * One of: 'composite', 'vertical', or 'horizontal'.
 */
layout: string,

/**
 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
 */
opacity: number,

/**
 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
 */
pullBackgroundColor: string,

/**
 * The preview context used in the 3D-Touch feature "Peek and Pop".
 */
previewContext: Titanium$UI$iOS$PreviewContext,

/**
 * View's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * The view's tintColor
 */
tintColor: string,

/**
 * The view's top position.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Adds a vertical parallax effect to the view
 */
verticalMotionEffect: any,

/**
 * Determines the blur radius used to create the shadow.
 */
viewShadowRadius: number,

/**
 * Determines the color of the shadow.
 */
viewShadowColor: string,

/**
 * Determines the offset for the shadow of the view.
 */
viewShadowOffset: Point,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * Index of the currently selected button.
 */
index: number,

/**
 * Array of labels for the tabbed bar.
 */
labels: string[] | BarItemType[],

/**
 * Style of the tabbed bar.
 */
style: number,

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.animatedCenter> property.
 */
getAnimatedCenter(): Point,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.backgroundGradient> property.
 */
getBackgroundGradient(): Gradient,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.backgroundGradient> property.
 */
setBackgroundGradient(backgroundGradient: Gradient): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.backgroundImage> property.
 */
getBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.backgroundRepeat> property.
 */
getBackgroundRepeat(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.backgroundRepeat> property.
 */
setBackgroundRepeat(backgroundRepeat: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.backgroundLeftCap> property.
 */
getBackgroundLeftCap(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.backgroundLeftCap> property.
 */
setBackgroundLeftCap(backgroundLeftCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.backgroundTopCap> property.
 */
getBackgroundTopCap(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.backgroundTopCap> property.
 */
setBackgroundTopCap(backgroundTopCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.borderColor> property.
 */
getBorderColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.borderColor> property.
 */
setBorderColor(borderColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.clipMode> property.
 */
getClipMode(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.clipMode> property.
 */
setClipMode(clipMode: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.horizontalMotionEffect> property.
 */
getHorizontalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.horizontalMotionEffect> property.
 */
setHorizontalMotionEffect(horizontalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.layout> property.
 */
getLayout(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.layout> property.
 */
setLayout(layout: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.pullBackgroundColor> property.
 */
getPullBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.pullBackgroundColor> property.
 */
setPullBackgroundColor(pullBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.previewContext> property.
 */
getPreviewContext(): Titanium$UI$iOS$PreviewContext,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.previewContext> property.
 */
setPreviewContext(previewContext: Titanium$UI$iOS$PreviewContext): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.tintColor> property.
 */
getTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.tintColor> property.
 */
setTintColor(tintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.verticalMotionEffect> property.
 */
getVerticalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.verticalMotionEffect> property.
 */
setVerticalMotionEffect(verticalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.viewShadowRadius> property.
 */
getViewShadowRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.viewShadowRadius> property.
 */
setViewShadowRadius(viewShadowRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.viewShadowColor> property.
 */
getViewShadowColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.viewShadowColor> property.
 */
setViewShadowColor(viewShadowColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.viewShadowOffset> property.
 */
getViewShadowOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.viewShadowOffset> property.
 */
setViewShadowOffset(viewShadowOffset: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.index> property.
 */
getIndex(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.index> property.
 */
setIndex(index: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.labels> property.
 */
getLabels(): string[] | BarItemType[],

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.labels> property.
 */
setLabels(labels: $ReadOnlyArray<string>): void,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.labels> property.
 */
setLabels(labels: $ReadOnlyArray<BarItemType>): void,

/**
 * Gets the value of the <Titanium.UI.iOS.TabbedBar.style> property.
 */
getStyle(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.TabbedBar.style> property.
 */
setStyle(style: number): void
} & Titanium$Proxy



/**
 * An iOS toolbar, which can contain buttons and certain other controls.
 */
declare type Titanium$UI$iOS$Toolbar = {

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Current position of the view during an animation.
 */
+animatedCenter: Point,

/**
 * A background gradient for the view.
 */
backgroundGradient: Gradient,

/**
 * Background image for the view, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Border color of the view, as a color name or hex triplet.
 */
borderColor: string,

/**
 * Radius for the rounded corners of the view's border.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * View's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * View's clipping behavior.
 */
clipMode: number,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Adds a horizontal parallax effect to the view
 */
horizontalMotionEffect: any,

/**
 * View's left position, in platform-specific units.
 */
left: number | string,

/**
 * Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
 */
opacity: number,

/**
 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
 */
pullBackgroundColor: string,

/**
 * The preview context used in the 3D-Touch feature "Peek and Pop".
 */
previewContext: Titanium$UI$iOS$PreviewContext,

/**
 * View's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * The view's tintColor
 */
tintColor: string,

/**
 * The view's top position.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Adds a vertical parallax effect to the view
 */
verticalMotionEffect: any,

/**
 * Determines the blur radius used to create the shadow.
 */
viewShadowRadius: number,

/**
 * Determines the color of the shadow.
 */
viewShadowColor: string,

/**
 * Determines the offset for the shadow of the view.
 */
viewShadowOffset: Point,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * Background color for the toolbar, as a color name or hex triplet.
 */
barColor: string,

/**
 * An array of buttons (or other widgets) contained in the toolbar.
 */
items: Titanium$UI$View[],

/**
 * If `true`, the background of the toolbar extends upwards.
 */
extendBackground: boolean,

/**
 * If `true`, a translucent background color is used for the toolbar.
 */
translucent: boolean,

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.animatedCenter> property.
 */
getAnimatedCenter(): Point,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.backgroundGradient> property.
 */
getBackgroundGradient(): Gradient,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.backgroundGradient> property.
 */
setBackgroundGradient(backgroundGradient: Gradient): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.backgroundImage> property.
 */
getBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.borderColor> property.
 */
getBorderColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.borderColor> property.
 */
setBorderColor(borderColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.clipMode> property.
 */
getClipMode(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.clipMode> property.
 */
setClipMode(clipMode: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.horizontalMotionEffect> property.
 */
getHorizontalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.horizontalMotionEffect> property.
 */
setHorizontalMotionEffect(horizontalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.pullBackgroundColor> property.
 */
getPullBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.pullBackgroundColor> property.
 */
setPullBackgroundColor(pullBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.previewContext> property.
 */
getPreviewContext(): Titanium$UI$iOS$PreviewContext,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.previewContext> property.
 */
setPreviewContext(previewContext: Titanium$UI$iOS$PreviewContext): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.tintColor> property.
 */
getTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.tintColor> property.
 */
setTintColor(tintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.verticalMotionEffect> property.
 */
getVerticalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.verticalMotionEffect> property.
 */
setVerticalMotionEffect(verticalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.viewShadowRadius> property.
 */
getViewShadowRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.viewShadowRadius> property.
 */
setViewShadowRadius(viewShadowRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.viewShadowColor> property.
 */
getViewShadowColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.viewShadowColor> property.
 */
setViewShadowColor(viewShadowColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.viewShadowOffset> property.
 */
getViewShadowOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.viewShadowOffset> property.
 */
setViewShadowOffset(viewShadowOffset: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.barColor> property.
 */
getBarColor(): string,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.barColor> property.
 */
setBarColor(barColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.items> property.
 */
getItems(): Titanium$UI$View[],

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.items> property.
 */
setItems(items: any[]): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.extendBackground> property.
 */
getExtendBackground(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.extendBackground> property.
 */
setExtendBackground(extendBackground: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.Toolbar.translucent> property.
 */
getTranslucent(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.Toolbar.translucent> property.
 */
setTranslucent(translucent: boolean): void
} & Titanium$Proxy



/**
 * Dynamic behavior to support connections between two items.
 */
declare type Titanium$UI$iOS$ViewAttachmentBehavior = {

/**
 * Item to use as the anchor in this behavior.
 */
anchorItem: Titanium$UI$View,

/**
 * Offset from the center point of the anchor item for the attachment.
 */
anchorOffset: Point,

/**
 * Amount of damping to apply to the attachment behavior.
 */
damping: number,

/**
 * Distance, in points, between the two attachment points.
 */
distance: number,

/**
 * Frequency of oscillation for the behavior.
 */
frequency: number,

/**
 * Item to connect to use the attachment behavior.
 */
item: Titanium$UI$View,

/**
 * Offset from the center point of the item for the attachment.
 */
itemOffset: Point,

/**
 * Gets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.anchorItem> property.
 */
getAnchorItem(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.anchorItem> property.
 */
setAnchorItem(anchorItem: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.anchorOffset> property.
 */
getAnchorOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.anchorOffset> property.
 */
setAnchorOffset(anchorOffset: Point): void,

/**
 * Gets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.damping> property.
 */
getDamping(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.damping> property.
 */
setDamping(damping: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.distance> property.
 */
getDistance(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.distance> property.
 */
setDistance(distance: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.frequency> property.
 */
getFrequency(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.frequency> property.
 */
setFrequency(frequency: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.item> property.
 */
getItem(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.item> property.
 */
setItem(item: any): void,

/**
 * Gets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.itemOffset> property.
 */
getItemOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.iOS.ViewAttachmentBehavior.itemOffset> property.
 */
setItemOffset(itemOffset: Point): void
} & Titanium$Proxy



/**
 * A collection of properties used to initialize a web view.
 */
declare type Titanium$UI$iOS$WebViewConfiguration = {

/**
 * The preference settings to be used by the web view.
 */
preferences: WebViewPreferencesObject,

/**
 * The level of granularity with which the user can interactively select content in the web view.
 */
selectionGranularity: number,

/**
 * Determines which media types require a user gesture to begin playing.
 */
mediaTypesRequiringUserActionForPlayback: number,

/**
 * A Boolean value indicating whether the web view suppresses content rendering until it is fully
 * loaded into memory.
 */
suppressesIncrementalRendering: boolean,

/**
 * A Boolean value indicating whether HTML5 videos play inline or use the native full-screen controller.
 */
allowsInlineMediaPlayback: boolean,

/**
 * A Boolean value indicating whether AirPlay is allowed.
 */
allowsAirPlayMediaPlayback: boolean,

/**
 * A Boolean value indicating whether HTML5 videos can play picture-in-picture.
 */
allowsPictureInPictureMediaPlayback: boolean,

/**
 * The process pool from which to obtain the  Web Content process of view.
 */
processPool: Titanium$UI$iOS$WebViewProcessPool,

/**
 * Gets the value of the <Titanium.UI.iOS.WebViewConfiguration.preferences> property.
 */
getPreferences(): WebViewPreferencesObject,

/**
 * Sets the value of the <Titanium.UI.iOS.WebViewConfiguration.preferences> property.
 */
setPreferences(preferences: WebViewPreferencesObject): void,

/**
 * Gets the value of the <Titanium.UI.iOS.WebViewConfiguration.selectionGranularity> property.
 */
getSelectionGranularity(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.WebViewConfiguration.selectionGranularity> property.
 */
setSelectionGranularity(selectionGranularity: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.WebViewConfiguration.mediaTypesRequiringUserActionForPlayback> property.
 */
getMediaTypesRequiringUserActionForPlayback(): number,

/**
 * Sets the value of the <Titanium.UI.iOS.WebViewConfiguration.mediaTypesRequiringUserActionForPlayback> property.
 */
setMediaTypesRequiringUserActionForPlayback(mediaTypesRequiringUserActionForPlayback: number): void,

/**
 * Gets the value of the <Titanium.UI.iOS.WebViewConfiguration.suppressesIncrementalRendering> property.
 */
getSuppressesIncrementalRendering(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.WebViewConfiguration.suppressesIncrementalRendering> property.
 */
setSuppressesIncrementalRendering(suppressesIncrementalRendering: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.WebViewConfiguration.allowsInlineMediaPlayback> property.
 */
getAllowsInlineMediaPlayback(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.WebViewConfiguration.allowsInlineMediaPlayback> property.
 */
setAllowsInlineMediaPlayback(allowsInlineMediaPlayback: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.WebViewConfiguration.allowsAirPlayMediaPlayback> property.
 */
getAllowsAirPlayMediaPlayback(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.WebViewConfiguration.allowsAirPlayMediaPlayback> property.
 */
setAllowsAirPlayMediaPlayback(allowsAirPlayMediaPlayback: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.WebViewConfiguration.allowsPictureInPictureMediaPlayback> property.
 */
getAllowsPictureInPictureMediaPlayback(): boolean,

/**
 * Sets the value of the <Titanium.UI.iOS.WebViewConfiguration.allowsPictureInPictureMediaPlayback> property.
 */
setAllowsPictureInPictureMediaPlayback(allowsPictureInPictureMediaPlayback: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iOS.WebViewConfiguration.processPool> property.
 */
getProcessPool(): Titanium$UI$iOS$WebViewProcessPool,

/**
 * Sets the value of the <Titanium.UI.iOS.WebViewConfiguration.processPool> property.
 */
setProcessPool(processPool: Titanium$UI$iOS$WebViewProcessPool): void
} & Titanium$Proxy



/**
 * It represents the decision handler to tell to webview, whether allow or cancel the navigation.
 */
declare type Titanium$UI$iOS$WebViewDecisionHandler = {

/**
 * It calls the decision handler with given action policy.
 */
invoke(value: number): void
} & Titanium$Proxy



/**
 * It represents a pool of Web Content processes.
 */
declare type Titanium$UI$iOS$WebViewProcessPool = {} & Titanium$Proxy



      declare var npm$namespace$Titanium$UI$iOS$AlertDialogStyle: {
        addEventListener: typeof Titanium$UI$iOS$AlertDialogStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iOS$AlertDialogStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iOS$AlertDialogStyle$fireEvent,
applyProperties: typeof Titanium$UI$iOS$AlertDialogStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iOS$AlertDialogStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iOS$AlertDialogStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iOS$AlertDialogStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iOS$AlertDialogStyle$bubbleParent,
apiName: typeof Titanium$UI$iOS$AlertDialogStyle$apiName,
DEFAULT: typeof Titanium$UI$iOS$AlertDialogStyle$DEFAULT,
PLAIN_TEXT_INPUT: typeof Titanium$UI$iOS$AlertDialogStyle$PLAIN_TEXT_INPUT,
SECURE_TEXT_INPUT: typeof Titanium$UI$iOS$AlertDialogStyle$SECURE_TEXT_INPUT,
LOGIN_AND_PASSWORD_INPUT: typeof Titanium$UI$iOS$AlertDialogStyle$LOGIN_AND_PASSWORD_INPUT,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iOS$AlertDialogStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iOS$AlertDialogStyle$apiName: string;


/**
 * A standard alert dialog. This is the default value.
 */
declare var Titanium$UI$iOS$AlertDialogStyle$DEFAULT: number;


/**
 * An alert dialog that allows the user to enter text.
 */
declare var Titanium$UI$iOS$AlertDialogStyle$PLAIN_TEXT_INPUT: number;


/**
 * An alert dialog that allows the user to enter text. The text field is obscured.
 */
declare var Titanium$UI$iOS$AlertDialogStyle$SECURE_TEXT_INPUT: number;


/**
 * An alert dialog that allows the user to enter login identifier and password.
 */
declare var Titanium$UI$iOS$AlertDialogStyle$LOGIN_AND_PASSWORD_INPUT: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$AlertDialogStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$AlertDialogStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iOS$AlertDialogStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iOS$AlertDialogStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iOS.AlertDialogStyle.bubbleParent> property.
 */
declare function Titanium$UI$iOS$AlertDialogStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iOS.AlertDialogStyle.bubbleParent> property.
 */
declare function Titanium$UI$iOS$AlertDialogStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iOS.AlertDialogStyle.apiName> property.
 */
declare function Titanium$UI$iOS$AlertDialogStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iOS$AnimationStyle: {
        addEventListener: typeof Titanium$UI$iOS$AnimationStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iOS$AnimationStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iOS$AnimationStyle$fireEvent,
applyProperties: typeof Titanium$UI$iOS$AnimationStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iOS$AnimationStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iOS$AnimationStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iOS$AnimationStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iOS$AnimationStyle$bubbleParent,
apiName: typeof Titanium$UI$iOS$AnimationStyle$apiName,
CURL_DOWN: typeof Titanium$UI$iOS$AnimationStyle$CURL_DOWN,
CURL_UP: typeof Titanium$UI$iOS$AnimationStyle$CURL_UP,
FLIP_FROM_LEFT: typeof Titanium$UI$iOS$AnimationStyle$FLIP_FROM_LEFT,
FLIP_FROM_RIGHT: typeof Titanium$UI$iOS$AnimationStyle$FLIP_FROM_RIGHT,
FLIP_FROM_TOP: typeof Titanium$UI$iOS$AnimationStyle$FLIP_FROM_TOP,
FLIP_FROM_BOTTOM: typeof Titanium$UI$iOS$AnimationStyle$FLIP_FROM_BOTTOM,
CROSS_DISSOLVE: typeof Titanium$UI$iOS$AnimationStyle$CROSS_DISSOLVE,
NONE: typeof Titanium$UI$iOS$AnimationStyle$NONE,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iOS$AnimationStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iOS$AnimationStyle$apiName: string;


/**
 * Curl downwards during a transition animation.
 */
declare var Titanium$UI$iOS$AnimationStyle$CURL_DOWN: number;


/**
 * Curl upwards during a transition animation.
 */
declare var Titanium$UI$iOS$AnimationStyle$CURL_UP: number;


/**
 * Flip from left to right during a transition animation.
 */
declare var Titanium$UI$iOS$AnimationStyle$FLIP_FROM_LEFT: number;


/**
 * Flip from right to left during a transition animation.
 */
declare var Titanium$UI$iOS$AnimationStyle$FLIP_FROM_RIGHT: number;


/**
 * Flip from top to bottom during a transition animation.
 */
declare var Titanium$UI$iOS$AnimationStyle$FLIP_FROM_TOP: number;


/**
 * Flip from bottom to top during a transition animation.
 */
declare var Titanium$UI$iOS$AnimationStyle$FLIP_FROM_BOTTOM: number;


/**
 * A transition that dissolves from one view to the next.
 */
declare var Titanium$UI$iOS$AnimationStyle$CROSS_DISSOLVE: number;


/**
 * No animation.
 */
declare var Titanium$UI$iOS$AnimationStyle$NONE: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$AnimationStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$AnimationStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iOS$AnimationStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iOS$AnimationStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iOS.AnimationStyle.bubbleParent> property.
 */
declare function Titanium$UI$iOS$AnimationStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iOS.AnimationStyle.bubbleParent> property.
 */
declare function Titanium$UI$iOS$AnimationStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iOS.AnimationStyle.apiName> property.
 */
declare function Titanium$UI$iOS$AnimationStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iOS$ProgressBarStyle: {
        addEventListener: typeof Titanium$UI$iOS$ProgressBarStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iOS$ProgressBarStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iOS$ProgressBarStyle$fireEvent,
applyProperties: typeof Titanium$UI$iOS$ProgressBarStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iOS$ProgressBarStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iOS$ProgressBarStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iOS$ProgressBarStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iOS$ProgressBarStyle$bubbleParent,
apiName: typeof Titanium$UI$iOS$ProgressBarStyle$apiName,
BAR: typeof Titanium$UI$iOS$ProgressBarStyle$BAR,
DEFAULT: typeof Titanium$UI$iOS$ProgressBarStyle$DEFAULT,
PLAIN: typeof Titanium$UI$iOS$ProgressBarStyle$PLAIN,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iOS$ProgressBarStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iOS$ProgressBarStyle$apiName: string;


/**
 * The style of progress view that is used in a toolbar.
 */
declare var Titanium$UI$iOS$ProgressBarStyle$BAR: number;


/**
 * he standard progress-view style. This is the default.
 */
declare var Titanium$UI$iOS$ProgressBarStyle$DEFAULT: number;


/**
 * The standard progress-view style. Same as `DEFAULT`.
 */
declare var Titanium$UI$iOS$ProgressBarStyle$PLAIN: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$ProgressBarStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$ProgressBarStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iOS$ProgressBarStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iOS$ProgressBarStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iOS.ProgressBarStyle.bubbleParent> property.
 */
declare function Titanium$UI$iOS$ProgressBarStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iOS.ProgressBarStyle.bubbleParent> property.
 */
declare function Titanium$UI$iOS$ProgressBarStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iOS.ProgressBarStyle.apiName> property.
 */
declare function Titanium$UI$iOS$ProgressBarStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iOS$RowAnimationStyle: {
        addEventListener: typeof Titanium$UI$iOS$RowAnimationStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iOS$RowAnimationStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iOS$RowAnimationStyle$fireEvent,
applyProperties: typeof Titanium$UI$iOS$RowAnimationStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iOS$RowAnimationStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iOS$RowAnimationStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iOS$RowAnimationStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iOS$RowAnimationStyle$bubbleParent,
apiName: typeof Titanium$UI$iOS$RowAnimationStyle$apiName,
BOTTOM: typeof Titanium$UI$iOS$RowAnimationStyle$BOTTOM,
FADE: typeof Titanium$UI$iOS$RowAnimationStyle$FADE,
LEFT: typeof Titanium$UI$iOS$RowAnimationStyle$LEFT,
NONE: typeof Titanium$UI$iOS$RowAnimationStyle$NONE,
RIGHT: typeof Titanium$UI$iOS$RowAnimationStyle$RIGHT,
TOP: typeof Titanium$UI$iOS$RowAnimationStyle$TOP,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iOS$RowAnimationStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iOS$RowAnimationStyle$apiName: string;


/**
 * The inserted row or rows slides in from the bottom; the deleted row or rows slides out
 * toward the bottom.
 */
declare var Titanium$UI$iOS$RowAnimationStyle$BOTTOM: number;


/**
 * The inserted or deleted row or rows fades into or out of the table view.
 */
declare var Titanium$UI$iOS$RowAnimationStyle$FADE: number;


/**
 * The inserted row or rows slides in from the left; the deleted row or rows slides out to the
 * left.
 */
declare var Titanium$UI$iOS$RowAnimationStyle$LEFT: number;


/**
 * No animation is performed. The new cell value appears as if the cell had just been reloaded.
 */
declare var Titanium$UI$iOS$RowAnimationStyle$NONE: number;


/**
 * The inserted row or rows slides in from the right; the deleted row or rows slides out to
 * the right.
 */
declare var Titanium$UI$iOS$RowAnimationStyle$RIGHT: number;


/**
 * The inserted row or rows slides in from the top; the deleted row or rows slides out toward
 * the top.
 */
declare var Titanium$UI$iOS$RowAnimationStyle$TOP: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$RowAnimationStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$RowAnimationStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iOS$RowAnimationStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iOS$RowAnimationStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iOS.RowAnimationStyle.bubbleParent> property.
 */
declare function Titanium$UI$iOS$RowAnimationStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iOS.RowAnimationStyle.bubbleParent> property.
 */
declare function Titanium$UI$iOS$RowAnimationStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iOS.RowAnimationStyle.apiName> property.
 */
declare function Titanium$UI$iOS$RowAnimationStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iOS$ScrollIndicatorStyle: {
        addEventListener: typeof Titanium$UI$iOS$ScrollIndicatorStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iOS$ScrollIndicatorStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iOS$ScrollIndicatorStyle$fireEvent,
applyProperties: typeof Titanium$UI$iOS$ScrollIndicatorStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iOS$ScrollIndicatorStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iOS$ScrollIndicatorStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iOS$ScrollIndicatorStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iOS$ScrollIndicatorStyle$bubbleParent,
apiName: typeof Titanium$UI$iOS$ScrollIndicatorStyle$apiName,
BLACK: typeof Titanium$UI$iOS$ScrollIndicatorStyle$BLACK,
DEFAULT: typeof Titanium$UI$iOS$ScrollIndicatorStyle$DEFAULT,
WHITE: typeof Titanium$UI$iOS$ScrollIndicatorStyle$WHITE,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iOS$ScrollIndicatorStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iOS$ScrollIndicatorStyle$apiName: string;


/**
 * A style of indicator which is black smaller than the default style. This style is good
 * against a white content background.
 */
declare var Titanium$UI$iOS$ScrollIndicatorStyle$BLACK: number;


/**
 * The default style of scroll indicator, which is black with a white border. This style is
 * good against any content background.
 */
declare var Titanium$UI$iOS$ScrollIndicatorStyle$DEFAULT: number;


/**
 * A style of indicator is white and smaller than the default style. This style is good against
 * a black content background.
 */
declare var Titanium$UI$iOS$ScrollIndicatorStyle$WHITE: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$ScrollIndicatorStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$ScrollIndicatorStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iOS$ScrollIndicatorStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iOS$ScrollIndicatorStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iOS.ScrollIndicatorStyle.bubbleParent> property.
 */
declare function Titanium$UI$iOS$ScrollIndicatorStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iOS.ScrollIndicatorStyle.bubbleParent> property.
 */
declare function Titanium$UI$iOS$ScrollIndicatorStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iOS.ScrollIndicatorStyle.apiName> property.
 */
declare function Titanium$UI$iOS$ScrollIndicatorStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iOS$StatusBar: {
        addEventListener: typeof Titanium$UI$iOS$StatusBar$addEventListener,
removeEventListener: typeof Titanium$UI$iOS$StatusBar$removeEventListener,
fireEvent: typeof Titanium$UI$iOS$StatusBar$fireEvent,
applyProperties: typeof Titanium$UI$iOS$StatusBar$applyProperties,
getBubbleParent: typeof Titanium$UI$iOS$StatusBar$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iOS$StatusBar$setBubbleParent,
getApiName: typeof Titanium$UI$iOS$StatusBar$getApiName,
        bubbleParent: typeof Titanium$UI$iOS$StatusBar$bubbleParent,
apiName: typeof Titanium$UI$iOS$StatusBar$apiName,
ANIMATION_STYLE_NONE: typeof Titanium$UI$iOS$StatusBar$ANIMATION_STYLE_NONE,
ANIMATION_STYLE_SLIDE: typeof Titanium$UI$iOS$StatusBar$ANIMATION_STYLE_SLIDE,
ANIMATION_STYLE_FADE: typeof Titanium$UI$iOS$StatusBar$ANIMATION_STYLE_FADE,
DEFAULT: typeof Titanium$UI$iOS$StatusBar$DEFAULT,
GRAY: typeof Titanium$UI$iOS$StatusBar$GRAY,
GREY: typeof Titanium$UI$iOS$StatusBar$GREY,
LIGHT_CONTENT: typeof Titanium$UI$iOS$StatusBar$LIGHT_CONTENT,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iOS$StatusBar$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iOS$StatusBar$apiName: string;


/**
 * No animation style, when the status bar is hidden or shown.
 */
declare var Titanium$UI$iOS$StatusBar$ANIMATION_STYLE_NONE: number;


/**
 * Slide animation style, when the status bar is hidden or shown.
 */
declare var Titanium$UI$iOS$StatusBar$ANIMATION_STYLE_SLIDE: number;


/**
 * Fade animation style, when the status bar is hidden or shown.
 */
declare var Titanium$UI$iOS$StatusBar$ANIMATION_STYLE_FADE: number;


/**
 * Default status bar style.
 */
declare var Titanium$UI$iOS$StatusBar$DEFAULT: number;


/**
 * Gray-colored status bar style.
 */
declare var Titanium$UI$iOS$StatusBar$GRAY: number;


/**
 * Gray-colored status bar style.
 */
declare var Titanium$UI$iOS$StatusBar$GREY: number;


/**
 * Status bar style to use with dark backgrounds.
 */
declare var Titanium$UI$iOS$StatusBar$LIGHT_CONTENT: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$StatusBar$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$StatusBar$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iOS$StatusBar$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iOS$StatusBar$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iOS.StatusBar.bubbleParent> property.
 */
declare function Titanium$UI$iOS$StatusBar$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iOS.StatusBar.bubbleParent> property.
 */
declare function Titanium$UI$iOS$StatusBar$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iOS.StatusBar.apiName> property.
 */
declare function Titanium$UI$iOS$StatusBar$getApiName(): string



      declare var npm$namespace$Titanium$UI$iOS$SystemButton: {
        addEventListener: typeof Titanium$UI$iOS$SystemButton$addEventListener,
removeEventListener: typeof Titanium$UI$iOS$SystemButton$removeEventListener,
fireEvent: typeof Titanium$UI$iOS$SystemButton$fireEvent,
applyProperties: typeof Titanium$UI$iOS$SystemButton$applyProperties,
getBubbleParent: typeof Titanium$UI$iOS$SystemButton$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iOS$SystemButton$setBubbleParent,
getApiName: typeof Titanium$UI$iOS$SystemButton$getApiName,
        bubbleParent: typeof Titanium$UI$iOS$SystemButton$bubbleParent,
apiName: typeof Titanium$UI$iOS$SystemButton$apiName,
ACTION: typeof Titanium$UI$iOS$SystemButton$ACTION,
ACTIVITY: typeof Titanium$UI$iOS$SystemButton$ACTIVITY,
ADD: typeof Titanium$UI$iOS$SystemButton$ADD,
BOOKMARKS: typeof Titanium$UI$iOS$SystemButton$BOOKMARKS,
CAMERA: typeof Titanium$UI$iOS$SystemButton$CAMERA,
CANCEL: typeof Titanium$UI$iOS$SystemButton$CANCEL,
COMPOSE: typeof Titanium$UI$iOS$SystemButton$COMPOSE,
CONTACT_ADD: typeof Titanium$UI$iOS$SystemButton$CONTACT_ADD,
DISCLOSURE: typeof Titanium$UI$iOS$SystemButton$DISCLOSURE,
DONE: typeof Titanium$UI$iOS$SystemButton$DONE,
EDIT: typeof Titanium$UI$iOS$SystemButton$EDIT,
FAST_FORWARD: typeof Titanium$UI$iOS$SystemButton$FAST_FORWARD,
FIXED_SPACE: typeof Titanium$UI$iOS$SystemButton$FIXED_SPACE,
FLEXIBLE_SPACE: typeof Titanium$UI$iOS$SystemButton$FLEXIBLE_SPACE,
INFO_DARK: typeof Titanium$UI$iOS$SystemButton$INFO_DARK,
INFO_LIGHT: typeof Titanium$UI$iOS$SystemButton$INFO_LIGHT,
ORGANIZE: typeof Titanium$UI$iOS$SystemButton$ORGANIZE,
PAUSE: typeof Titanium$UI$iOS$SystemButton$PAUSE,
PLAY: typeof Titanium$UI$iOS$SystemButton$PLAY,
REFRESH: typeof Titanium$UI$iOS$SystemButton$REFRESH,
REPLY: typeof Titanium$UI$iOS$SystemButton$REPLY,
REWIND: typeof Titanium$UI$iOS$SystemButton$REWIND,
SAVE: typeof Titanium$UI$iOS$SystemButton$SAVE,
SPINNER: typeof Titanium$UI$iOS$SystemButton$SPINNER,
STOP: typeof Titanium$UI$iOS$SystemButton$STOP,
TRASH: typeof Titanium$UI$iOS$SystemButton$TRASH,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iOS$SystemButton$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iOS$SystemButton$apiName: string;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Action** button.
 */
declare var Titanium$UI$iOS$SystemButton$ACTION: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to create an activity indicator that
 * can be used in navigation bars and toolbars.
 */
declare var Titanium$UI$iOS$SystemButton$ACTIVITY: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Add** button.
 */
declare var Titanium$UI$iOS$SystemButton$ADD: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Bookmarks** button.
 */
declare var Titanium$UI$iOS$SystemButton$BOOKMARKS: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Camera** button.
 */
declare var Titanium$UI$iOS$SystemButton$CAMERA: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Cancel** button.
 */
declare var Titanium$UI$iOS$SystemButton$CANCEL: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Compose** button.
 */
declare var Titanium$UI$iOS$SystemButton$COMPOSE: number;


/**
 * Use with [Button.style](Titanium.UI.Button.style) to specify a **ContactAdd** button.
 */
declare var Titanium$UI$iOS$SystemButton$CONTACT_ADD: number;


/**
 * Use with [Button.style](Titanium.UI.Button.style) to specify a **Disclosure** button.
 */
declare var Titanium$UI$iOS$SystemButton$DISCLOSURE: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Done** button.
 */
declare var Titanium$UI$iOS$SystemButton$DONE: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Edit** button.
 */
declare var Titanium$UI$iOS$SystemButton$EDIT: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Fast Forward** button.
 */
declare var Titanium$UI$iOS$SystemButton$FAST_FORWARD: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to create a fixed-width blank space
 * for spacing items in toolbars.
 */
declare var Titanium$UI$iOS$SystemButton$FIXED_SPACE: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to create a flexible blank space
 * for spacing items in toolbars.
 */
declare var Titanium$UI$iOS$SystemButton$FLEXIBLE_SPACE: number;


/**
 * Use with [Button.style](Titanium.UI.Button.style) to specify a dark-colored **Info** button.
 */
declare var Titanium$UI$iOS$SystemButton$INFO_DARK: number;


/**
 * Use with [Button.style](Titanium.UI.Button.style) to specify a light-colored **Info** button.
 */
declare var Titanium$UI$iOS$SystemButton$INFO_LIGHT: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Organize** button.
 */
declare var Titanium$UI$iOS$SystemButton$ORGANIZE: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Pause** button.
 */
declare var Titanium$UI$iOS$SystemButton$PAUSE: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Play** button.
 */
declare var Titanium$UI$iOS$SystemButton$PLAY: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Refresh** button.
 */
declare var Titanium$UI$iOS$SystemButton$REFRESH: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Reply** button.
 */
declare var Titanium$UI$iOS$SystemButton$REPLY: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Rewind** button.
 */
declare var Titanium$UI$iOS$SystemButton$REWIND: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Save** button.
 */
declare var Titanium$UI$iOS$SystemButton$SAVE: number;


/**
 * Identical to [ACTIVITY](Titanium.UI.iOS.SystemButton.ACTIVITY).
 */
declare var Titanium$UI$iOS$SystemButton$SPINNER: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Stop** button.
 */
declare var Titanium$UI$iOS$SystemButton$STOP: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Trash** button.
 */
declare var Titanium$UI$iOS$SystemButton$TRASH: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$SystemButton$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$SystemButton$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iOS$SystemButton$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iOS$SystemButton$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iOS.SystemButton.bubbleParent> property.
 */
declare function Titanium$UI$iOS$SystemButton$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iOS.SystemButton.bubbleParent> property.
 */
declare function Titanium$UI$iOS$SystemButton$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iOS.SystemButton.apiName> property.
 */
declare function Titanium$UI$iOS$SystemButton$getApiName(): string



      declare var npm$namespace$Titanium$UI$iOS$SystemButtonStyle: {
        addEventListener: typeof Titanium$UI$iOS$SystemButtonStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iOS$SystemButtonStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iOS$SystemButtonStyle$fireEvent,
applyProperties: typeof Titanium$UI$iOS$SystemButtonStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iOS$SystemButtonStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iOS$SystemButtonStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iOS$SystemButtonStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iOS$SystemButtonStyle$bubbleParent,
apiName: typeof Titanium$UI$iOS$SystemButtonStyle$apiName,
BORDERED: typeof Titanium$UI$iOS$SystemButtonStyle$BORDERED,
DONE: typeof Titanium$UI$iOS$SystemButtonStyle$DONE,
PLAIN: typeof Titanium$UI$iOS$SystemButtonStyle$PLAIN,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iOS$SystemButtonStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iOS$SystemButtonStyle$apiName: string;


/**
 * A simple button style with a border.
 */
declare var Titanium$UI$iOS$SystemButtonStyle$BORDERED: number;


/**
 * The style for a **Done** button--for example, a button that completes some task and returns
 * to the previous view.
 */
declare var Titanium$UI$iOS$SystemButtonStyle$DONE: number;


/**
 * Specifies a borderless button, the default style for toolbars, button bars, and tabbed bars.
 */
declare var Titanium$UI$iOS$SystemButtonStyle$PLAIN: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$SystemButtonStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$SystemButtonStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iOS$SystemButtonStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iOS$SystemButtonStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iOS.SystemButtonStyle.bubbleParent> property.
 */
declare function Titanium$UI$iOS$SystemButtonStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iOS.SystemButtonStyle.bubbleParent> property.
 */
declare function Titanium$UI$iOS$SystemButtonStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iOS.SystemButtonStyle.apiName> property.
 */
declare function Titanium$UI$iOS$SystemButtonStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iOS$SystemIcon: {
        addEventListener: typeof Titanium$UI$iOS$SystemIcon$addEventListener,
removeEventListener: typeof Titanium$UI$iOS$SystemIcon$removeEventListener,
fireEvent: typeof Titanium$UI$iOS$SystemIcon$fireEvent,
applyProperties: typeof Titanium$UI$iOS$SystemIcon$applyProperties,
getBubbleParent: typeof Titanium$UI$iOS$SystemIcon$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iOS$SystemIcon$setBubbleParent,
getApiName: typeof Titanium$UI$iOS$SystemIcon$getApiName,
        bubbleParent: typeof Titanium$UI$iOS$SystemIcon$bubbleParent,
apiName: typeof Titanium$UI$iOS$SystemIcon$apiName,
BOOKMARKS: typeof Titanium$UI$iOS$SystemIcon$BOOKMARKS,
CONTACTS: typeof Titanium$UI$iOS$SystemIcon$CONTACTS,
DOWNLOADS: typeof Titanium$UI$iOS$SystemIcon$DOWNLOADS,
FAVORITES: typeof Titanium$UI$iOS$SystemIcon$FAVORITES,
FEATURED: typeof Titanium$UI$iOS$SystemIcon$FEATURED,
HISTORY: typeof Titanium$UI$iOS$SystemIcon$HISTORY,
MORE: typeof Titanium$UI$iOS$SystemIcon$MORE,
MOST_RECENT: typeof Titanium$UI$iOS$SystemIcon$MOST_RECENT,
MOST_VIEWED: typeof Titanium$UI$iOS$SystemIcon$MOST_VIEWED,
RECENTS: typeof Titanium$UI$iOS$SystemIcon$RECENTS,
SEARCH: typeof Titanium$UI$iOS$SystemIcon$SEARCH,
TOP_RATED: typeof Titanium$UI$iOS$SystemIcon$TOP_RATED,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iOS$SystemIcon$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iOS$SystemIcon$apiName: string;


/**
 * Bookmark style icon
 */
declare var Titanium$UI$iOS$SystemIcon$BOOKMARKS: number;


/**
 * Contacts style icon
 */
declare var Titanium$UI$iOS$SystemIcon$CONTACTS: number;


/**
 * Downloads style icon
 */
declare var Titanium$UI$iOS$SystemIcon$DOWNLOADS: number;


/**
 * Favorites style icon
 */
declare var Titanium$UI$iOS$SystemIcon$FAVORITES: number;


/**
 * Featured style icon
 */
declare var Titanium$UI$iOS$SystemIcon$FEATURED: number;


/**
 * History style icon
 */
declare var Titanium$UI$iOS$SystemIcon$HISTORY: number;


/**
 * More style icon
 */
declare var Titanium$UI$iOS$SystemIcon$MORE: number;


/**
 * Most recent style icon
 */
declare var Titanium$UI$iOS$SystemIcon$MOST_RECENT: number;


/**
 * Most viewed style icon
 */
declare var Titanium$UI$iOS$SystemIcon$MOST_VIEWED: number;


/**
 * Recents style icon
 */
declare var Titanium$UI$iOS$SystemIcon$RECENTS: number;


/**
 * Search style icon
 */
declare var Titanium$UI$iOS$SystemIcon$SEARCH: number;


/**
 * Top rated style icon
 */
declare var Titanium$UI$iOS$SystemIcon$TOP_RATED: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$SystemIcon$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$SystemIcon$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iOS$SystemIcon$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iOS$SystemIcon$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iOS.SystemIcon.bubbleParent> property.
 */
declare function Titanium$UI$iOS$SystemIcon$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iOS.SystemIcon.bubbleParent> property.
 */
declare function Titanium$UI$iOS$SystemIcon$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iOS.SystemIcon.apiName> property.
 */
declare function Titanium$UI$iOS$SystemIcon$getApiName(): string



      declare var npm$namespace$Titanium$UI$iOS$TableViewCellSelectionStyle: {
        addEventListener: typeof Titanium$UI$iOS$TableViewCellSelectionStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iOS$TableViewCellSelectionStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iOS$TableViewCellSelectionStyle$fireEvent,
applyProperties: typeof Titanium$UI$iOS$TableViewCellSelectionStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iOS$TableViewCellSelectionStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iOS$TableViewCellSelectionStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iOS$TableViewCellSelectionStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iOS$TableViewCellSelectionStyle$bubbleParent,
apiName: typeof Titanium$UI$iOS$TableViewCellSelectionStyle$apiName,
BLUE: typeof Titanium$UI$iOS$TableViewCellSelectionStyle$BLUE,
GRAY: typeof Titanium$UI$iOS$TableViewCellSelectionStyle$GRAY,
NONE: typeof Titanium$UI$iOS$TableViewCellSelectionStyle$NONE,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iOS$TableViewCellSelectionStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iOS$TableViewCellSelectionStyle$apiName: string;


/**
 * The cell when selected has a blue background. This is the default value.
 */
declare var Titanium$UI$iOS$TableViewCellSelectionStyle$BLUE: number;


/**
 * Then cell when selected has a gray background.
 */
declare var Titanium$UI$iOS$TableViewCellSelectionStyle$GRAY: number;


/**
 * The cell has no distinct style for when it is selected.
 */
declare var Titanium$UI$iOS$TableViewCellSelectionStyle$NONE: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$TableViewCellSelectionStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$TableViewCellSelectionStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iOS$TableViewCellSelectionStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iOS$TableViewCellSelectionStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iOS.TableViewCellSelectionStyle.bubbleParent> property.
 */
declare function Titanium$UI$iOS$TableViewCellSelectionStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iOS.TableViewCellSelectionStyle.bubbleParent> property.
 */
declare function Titanium$UI$iOS$TableViewCellSelectionStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iOS.TableViewCellSelectionStyle.apiName> property.
 */
declare function Titanium$UI$iOS$TableViewCellSelectionStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iOS$TableViewScrollPosition: {
        addEventListener: typeof Titanium$UI$iOS$TableViewScrollPosition$addEventListener,
removeEventListener: typeof Titanium$UI$iOS$TableViewScrollPosition$removeEventListener,
fireEvent: typeof Titanium$UI$iOS$TableViewScrollPosition$fireEvent,
applyProperties: typeof Titanium$UI$iOS$TableViewScrollPosition$applyProperties,
getBubbleParent: typeof Titanium$UI$iOS$TableViewScrollPosition$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iOS$TableViewScrollPosition$setBubbleParent,
getApiName: typeof Titanium$UI$iOS$TableViewScrollPosition$getApiName,
        bubbleParent: typeof Titanium$UI$iOS$TableViewScrollPosition$bubbleParent,
apiName: typeof Titanium$UI$iOS$TableViewScrollPosition$apiName,
BOTTOM: typeof Titanium$UI$iOS$TableViewScrollPosition$BOTTOM,
MIDDLE: typeof Titanium$UI$iOS$TableViewScrollPosition$MIDDLE,
NONE: typeof Titanium$UI$iOS$TableViewScrollPosition$NONE,
TOP: typeof Titanium$UI$iOS$TableViewScrollPosition$TOP,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iOS$TableViewScrollPosition$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iOS$TableViewScrollPosition$apiName: string;


/**
 * The table view scrolls the row of interest to the bottom of the visible table view.
 */
declare var Titanium$UI$iOS$TableViewScrollPosition$BOTTOM: number;


/**
 * The table view scrolls the row of interest to the middle of the visible table view.
 */
declare var Titanium$UI$iOS$TableViewScrollPosition$MIDDLE: number;


/**
 * The table view scrolls the row of interest to be fully visible with a minimum of movement. If the row is already fully visible, no scrolling occurs. For example, if the row is above the visible area, the behavior is identical to that specified by `TOP`. This is the default.
 */
declare var Titanium$UI$iOS$TableViewScrollPosition$NONE: number;


/**
 * The table view scrolls the row of interest to the top of the visible table view.
 */
declare var Titanium$UI$iOS$TableViewScrollPosition$TOP: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$TableViewScrollPosition$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$TableViewScrollPosition$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iOS$TableViewScrollPosition$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iOS$TableViewScrollPosition$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iOS.TableViewScrollPosition.bubbleParent> property.
 */
declare function Titanium$UI$iOS$TableViewScrollPosition$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iOS.TableViewScrollPosition.bubbleParent> property.
 */
declare function Titanium$UI$iOS$TableViewScrollPosition$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iOS.TableViewScrollPosition.apiName> property.
 */
declare function Titanium$UI$iOS$TableViewScrollPosition$getApiName(): string



      declare var npm$namespace$Titanium$UI$iOS$TableViewStyle: {
        addEventListener: typeof Titanium$UI$iOS$TableViewStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iOS$TableViewStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iOS$TableViewStyle$fireEvent,
applyProperties: typeof Titanium$UI$iOS$TableViewStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iOS$TableViewStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iOS$TableViewStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iOS$TableViewStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iOS$TableViewStyle$bubbleParent,
apiName: typeof Titanium$UI$iOS$TableViewStyle$apiName,
GROUPED: typeof Titanium$UI$iOS$TableViewStyle$GROUPED,
PLAIN: typeof Titanium$UI$iOS$TableViewStyle$PLAIN,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iOS$TableViewStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iOS$TableViewStyle$apiName: string;


/**
 * A table view whose sections present distinct groups of rows. The section headers and footers
 * do not float.
 */
declare var Titanium$UI$iOS$TableViewStyle$GROUPED: number;


/**
 * A plain table view. Any section headers or footers are displayed as inline separators and
 * float when the table view is scrolled.
 */
declare var Titanium$UI$iOS$TableViewStyle$PLAIN: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$TableViewStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iOS$TableViewStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iOS$TableViewStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iOS$TableViewStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iOS.TableViewStyle.bubbleParent> property.
 */
declare function Titanium$UI$iOS$TableViewStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iOS.TableViewStyle.bubbleParent> property.
 */
declare function Titanium$UI$iOS$TableViewStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iOS.TableViewStyle.apiName> property.
 */
declare function Titanium$UI$iOS$TableViewStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iPad: {
        addEventListener: typeof Titanium$UI$iPad$addEventListener,
removeEventListener: typeof Titanium$UI$iPad$removeEventListener,
fireEvent: typeof Titanium$UI$iPad$fireEvent,
applyProperties: typeof Titanium$UI$iPad$applyProperties,
createDocumentViewer: typeof Titanium$UI$iPad$createDocumentViewer,
createPopover: typeof Titanium$UI$iPad$createPopover,
createSplitWindow: typeof Titanium$UI$iPad$createSplitWindow,
getBubbleParent: typeof Titanium$UI$iPad$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iPad$setBubbleParent,
getApiName: typeof Titanium$UI$iPad$getApiName,
        bubbleParent: typeof Titanium$UI$iPad$bubbleParent,
apiName: typeof Titanium$UI$iPad$apiName,
POPOVER_ARROW_DIRECTION_ANY: typeof Titanium$UI$iPad$POPOVER_ARROW_DIRECTION_ANY,
POPOVER_ARROW_DIRECTION_DOWN: typeof Titanium$UI$iPad$POPOVER_ARROW_DIRECTION_DOWN,
POPOVER_ARROW_DIRECTION_LEFT: typeof Titanium$UI$iPad$POPOVER_ARROW_DIRECTION_LEFT,
POPOVER_ARROW_DIRECTION_RIGHT: typeof Titanium$UI$iPad$POPOVER_ARROW_DIRECTION_RIGHT,
POPOVER_ARROW_DIRECTION_UNKNOWN: typeof Titanium$UI$iPad$POPOVER_ARROW_DIRECTION_UNKNOWN,
POPOVER_ARROW_DIRECTION_UP: typeof Titanium$UI$iPad$POPOVER_ARROW_DIRECTION_UP,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iPad$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iPad$apiName: string;


/**
 * An arrow that points in any direction.
 */
declare var Titanium$UI$iPad$POPOVER_ARROW_DIRECTION_ANY: number;


/**
 * An arrow that points downward.
 */
declare var Titanium$UI$iPad$POPOVER_ARROW_DIRECTION_DOWN: number;


/**
 * An arrow that points toward the left.
 */
declare var Titanium$UI$iPad$POPOVER_ARROW_DIRECTION_LEFT: number;


/**
 * An arrow that points toward the right.
 */
declare var Titanium$UI$iPad$POPOVER_ARROW_DIRECTION_RIGHT: number;


/**
 * The status of the arrow is currently unknown.
 */
declare var Titanium$UI$iPad$POPOVER_ARROW_DIRECTION_UNKNOWN: number;


/**
 * An arrow that points upward.
 */
declare var Titanium$UI$iPad$POPOVER_ARROW_DIRECTION_UP: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPad$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPad$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iPad$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iPad$applyProperties(props: any): void



/**
 * Creates and returns an instance of <Titanium.UI.iPad.DocumentViewer>.
 */
declare function Titanium$UI$iPad$createDocumentViewer(parameters?: any): Titanium$UI$iPad$DocumentViewer



/**
 * Creates and returns an instance of <Titanium.UI.iPad.Popover>.
 */
declare function Titanium$UI$iPad$createPopover(parameters?: any): Titanium$UI$iPad$Popover



/**
 * Creates and returns an instance of <Titanium.UI.iPad.SplitWindow>.
 */
declare function Titanium$UI$iPad$createSplitWindow(parameters?: any): Titanium$UI$iPad$SplitWindow



/**
 * Gets the value of the <Titanium.UI.iPad.bubbleParent> property.
 */
declare function Titanium$UI$iPad$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iPad.bubbleParent> property.
 */
declare function Titanium$UI$iPad$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iPad.apiName> property.
 */
declare function Titanium$UI$iPad$getApiName(): string



/**
 * A DocumentViewer provides in-app support for managing user interactions with files on the
 * local system.
 */
declare type Titanium$UI$iPad$DocumentViewer = {

/**
 * Displays the document viewer over the current view.
 */
show(animated: boolean, view: any): void,

/**
 * Sets the url of the document viewer.
 */
setUrl(url: string): void
} & Titanium$Proxy



/**
 * A Popover is used to manage the presentation of content in a popover.
 */
declare type Titanium$UI$iPad$Popover = {

/**
 * Sets the background color of the popover.
 */
backgroundColor: string,

/**
 * Height of the popover.
 */
height: number | string,

/**
 * Adds a horizontal parallax effect to the view
 */
horizontalMotionEffect: any,

/**
 * Adds a vertical parallax effect to the view
 */
verticalMotionEffect: any,

/**
 * Width of the popover.
 */
width: number | string,

/**
 * Indicates the arrow direction of the popover.
 */
arrowDirection: number,

/**
 * View to use for the popover content. Must be set before calling the `show()` method.
 */
contentView: Titanium$UI$View,

/**
 * Left button in the navigation area of the popover.
 */
leftNavButton: any,

/**
 * Passthrough views to use when the popover is shown.
 */
passthroughViews: Titanium$UI$View[],

/**
 * Right button in the navigation area of the popover.
 */
rightNavButton: any,

/**
 * Title of the navigation area of the popover.
 */
title: string,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides the popover.
 */
hide(options: PopoverParams): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Displays the popover.
 */
show(params: PopoverParams): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Gets the value of the <Titanium.UI.iPad.Popover.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.Popover.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.Popover.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iPad.Popover.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.iPad.Popover.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.Popover.horizontalMotionEffect> property.
 */
getHorizontalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iPad.Popover.horizontalMotionEffect> property.
 */
setHorizontalMotionEffect(horizontalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iPad.Popover.verticalMotionEffect> property.
 */
getVerticalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iPad.Popover.verticalMotionEffect> property.
 */
setVerticalMotionEffect(verticalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iPad.Popover.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.iPad.Popover.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.iPad.Popover.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.Popover.arrowDirection> property.
 */
getArrowDirection(): number,

/**
 * Sets the value of the <Titanium.UI.iPad.Popover.arrowDirection> property.
 */
setArrowDirection(arrowDirection: number): void,

/**
 * Gets the value of the <Titanium.UI.iPad.Popover.contentView> property.
 */
getContentView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.iPad.Popover.contentView> property.
 */
setContentView(contentView: any): void,

/**
 * Gets the value of the <Titanium.UI.iPad.Popover.leftNavButton> property.
 */
getLeftNavButton(): any,

/**
 * Sets the value of the <Titanium.UI.iPad.Popover.leftNavButton> property.
 */
setLeftNavButton(leftNavButton: any): void,

/**
 * Gets the value of the <Titanium.UI.iPad.Popover.passthroughViews> property.
 */
getPassthroughViews(): Titanium$UI$View[],

/**
 * Sets the value of the <Titanium.UI.iPad.Popover.passthroughViews> property.
 */
setPassthroughViews(passthroughViews: any[]): void,

/**
 * Gets the value of the <Titanium.UI.iPad.Popover.rightNavButton> property.
 */
getRightNavButton(): any,

/**
 * Sets the value of the <Titanium.UI.iPad.Popover.rightNavButton> property.
 */
setRightNavButton(rightNavButton: any): void,

/**
 * Gets the value of the <Titanium.UI.iPad.Popover.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.Popover.title> property.
 */
setTitle(title: string): void
} & Titanium$Proxy



/**
 * A SplitWindow is a window that manages the presentation of two side-by-side view
 * controllers.
 */
declare type Titanium$UI$iPad$SplitWindow = {

/**
 * Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
 */
accessibilityHidden: boolean,

/**
 * Briefly describes what performing an action (such as a click) on the view will do.
 */
accessibilityHint: string,

/**
 * A succint label identifying the view for the device's accessibility service.
 */
accessibilityLabel: string,

/**
 * A string describing the value (if any) of the view for the device's accessibility service.
 */
accessibilityValue: string,

/**
 * Coordinate of the view about which to pivot an animation.
 */
anchorPoint: Point,

/**
 * Current position of the view during an animation.
 */
+animatedCenter: Point,

/**
 * Background color of the window, as a color name or hex triplet.
 */
backgroundColor: string,

/**
 * A background gradient for the view.
 */
backgroundGradient: Gradient,

/**
 * Background image for the view, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Determines whether to tile a background across a view.
 */
backgroundRepeat: boolean,

/**
 * Size of the left end cap.
 */
backgroundLeftCap: number,

/**
 * Size of the top end cap.
 */
backgroundTopCap: number,

/**
 * Border color of the view, as a color name or hex triplet.
 */
borderColor: string,

/**
 * Radius for the rounded corners of the view's border.
 */
borderRadius: number,

/**
 * Border width of the view.
 */
borderWidth: number,

/**
 * Window's bottom position, in platform-specific units.
 */
bottom: number | string,

/**
 * View's center position, in the parent view's coordinates.
 */
center: Point,

/**
 * Array of this view's child views.
 */
+children: Titanium$UI$View[],

/**
 * View's clipping behavior.
 */
clipMode: number,

/**
 * View height, in platform-specific units.
 */
height: number | string,

/**
 * Adds a horizontal parallax effect to the view
 */
horizontalMotionEffect: any,

/**
 * Window's left position, in platform-specific units.
 */
left: number | string,

/**
 * Specifies how the view positions its children.
 * One of: 'composite', 'vertical', or 'horizontal'.
 */
layout: string,

/**
 * The opacity from 0.0-1.0.
 */
opacity: number,

/**
 * Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.
 * Defaults to `undefined`. Results in a light grey background color on the wrapper view.
 */
pullBackgroundColor: string,

/**
 * Window's right position, in platform-specific units.
 */
right: number | string,

/**
 * The bounding box of the view relative to its parent, in system units.
 */
+rect: Dimension,

/**
 * The size of the view in system units.
 */
+size: Dimension,

/**
 * The view's tintColor
 */
tintColor: string,

/**
 * Window's top position, in platform-specific units.
 */
top: number | string,

/**
 * Determines whether view should receive touch events.
 */
touchEnabled: boolean,

/**
 * Transformation matrix to apply to the view.
 */
transform: Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Adds a vertical parallax effect to the view
 */
verticalMotionEffect: any,

/**
 * Determines the blur radius used to create the shadow.
 */
viewShadowRadius: number,

/**
 * Determines the color of the shadow.
 */
viewShadowColor: string,

/**
 * Determines the offset for the shadow of the view.
 */
viewShadowOffset: Point,

/**
 * Determines whether the view is visible.
 */
visible: boolean,

/**
 * View's width, in platform-specific units.
 */
width: number | string,

/**
 * Determines whether the layout has wrapping behavior.
 */
horizontalWrap: boolean,

/**
 * Z-index stack order position, relative to other sibling views.
 */
zIndex: number,

/**
 * Title for the back button. This is only valid when the window is a child of a tab.
 */
backButtonTitle: string,

/**
 * The image to show as the back button. This is only valid when the window is a child of a tab.
 */
backButtonTitleImage: string | Titanium$Blob,

/**
 * Background color for the nav bar, as a color name or hex triplet.
 */
barColor: string,

/**
 * Background image for the nav bar, specified as a URL to a local image.
 */
barImage: string,

/**
 * An array of supported values specified using the EXTEND_EDGE constants in <Titanium.UI>.
 */
extendEdges: number[],

/**
 * Specifies if the edges should extend beyond opaque bars (navigation bar, tab bar, toolbar).
 */
includeOpaqueBars: boolean,

/**
 * Specifies whether or not the view controller should automatically adjust its scroll view insets.
 */
autoAdjustScrollViewInsets: boolean,

/**
 * Specifies whether the screen insets/notches are allowed to overlap the window's content or not.
 */
extendSafeArea: boolean,

/**
 * Boolean value indicating if the window is fullscreen.
 */
fullscreen: boolean,

/**
 * Boolean value indicating whether the system is allowed to hide the visual indicator for returning to the Home screen.
 */
homeIndicatorAutoHidden: boolean,

/**
 * Set this to true to hide the shadow image of the navigation bar.
 */
hideShadow: boolean,

/**
 * Set this to true to hide the navigation bar on swipe.
 */
hidesBarsOnSwipe: boolean,

/**
 * Set this to true to hide the navigation bar on tap.
 */
hidesBarsOnTap: boolean,

/**
 * Set this to true to hide the navigation bar when the keyboard appears.
 */
hidesBarsWhenKeyboardAppears: boolean,

/**
 * Set this to true to hide the back button of navigation bar.
 */
hidesBackButton: boolean,

/**
 * A Boolean value indicating whether the title should be displayed in a large format.
 */
largeTitleEnabled: string,

/**
 * The mode to use when displaying the title of the navigation bar.
 */
largeTitleDisplayMode: number,

/**
 * View to show in the left nav bar area.
 */
leftNavButton: Titanium$UI$View,

/**
 * An Array of views to show in the left nav bar area.
 */
leftNavButtons: Titanium$UI$View[],

/**
 * Indicates to open a modal window or not.
 */
modal: boolean,

/**
 * Hides the navigation bar (`true`) or shows the navigation bar (`false`).
 */
navBarHidden: boolean,

/**
 * The tintColor to apply to the navigation bar.
 */
navTintColor: string,

/**
 * The <Titanium.UI.NavigationWindow> instance hosting this window.
 */
+navigationWindow: Titanium$UI$NavigationWindow,

/**
 * Array of supported orientation modes, specified using the orientation
 * constants defined in <Titanium.UI>.
 */
orientationModes: number[],

/**
 * Current orientation of the window.
 */
+orientation: number,

/**
 * View to show in the right nav bar area.
 */
rightNavButton: Titanium$UI$View,

/**
 * An Array of views to show in the right nav bar area.
 */
rightNavButtons: Titanium$UI$View[],

/**
 * The padding needed to safely display content without it being overlapped by the screen insets and notches.
 */
+safeAreaPadding: Dimension,

/**
 * Shadow image for the navigation bar, specified as a URL to a local image..
 */
shadowImage: string,

/**
 * The status bar style associated with this window.
 */
statusBarStyle: number,

/**
 * Boolean value indicating if the tab bar should be hidden.
 */
tabBarHidden: boolean,

/**
 * Title of the window.
 */
title: string,

/**
 * Title text attributes of the window.
 */
titleAttributes: titleAttributesParams,

/**
 * View to show in the title area of the nav bar.
 */
titleControl: Titanium$UI$View,

/**
 * Image to show in the title area of the nav bar, specified as a local file path or URL.
 */
titleImage: string,

/**
 * Title prompt for the window.
 */
titlePrompt: string,

/**
 * Key identifying a string from the locale file to use for the window title.
 */
titleid: string,

/**
 * Key identifying a string from the locale file to use for the window title prompt.
 */
titlepromptid: string,

/**
 * Array of button objects to show in the window's toolbar.
 */
toolbar: any[],

/**
 * Boolean value indicating if the nav bar is translucent.
 */
translucent: boolean,

/**
 * Loads a JavaScript file from a local URL.
 */
url: string,

/**
 * View for the detail view section of the SplitWindow.
 */
detailView: Titanium$UI$View,

/**
 * View for the master view section of the SplitWindow.
 */
masterView: Titanium$UI$View,

/**
 * Determines whether to show the master view in portrait orientation.
 */
showMasterInPortrait: boolean,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any): void,

/**
 * Adds a child to this view's hierarchy.
 */
add(view: any[]): void,

/**
 * Animates this view.
 */
animate(animation: any, callback?: (param0: any) => any): void,

/**
 * Finishes a batch update of the View's layout properties and schedules a layout pass of the
 * view tree.
 */
finishLayout(): void,

/**
 * Hides this view.
 */
hide(options?: AnimationOption): void,

/**
 * Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
insertAt(params: any): void,

/**
 * Removes a child view from this view's hierarchy.
 */
remove(view: any): void,

/**
 * Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
 */
replaceAt(params: any): void,

/**
 * Makes this view visible.
 */
show(options?: AnimationOption): void,

/**
 * Starts a batch update of this view's layout properties.
 */
startLayout(): void,

/**
 * Returns an image of the rendered view, as a Blob.
 */
toImage(
callback?: (param0: Titanium$Blob) => any,
honorScaleFactor?: boolean): Titanium$Blob,

/**
 * Performs a batch update of all supplied layout properties and schedules a layout pass after
 * they have been updated.
 */
updateLayout(params: any): void,

/**
 * Translates a point from this view's coordinate system to another view's coordinate system.
 */
convertPointToView(point: Point, destinationView: any): Point,

/**
 * Returns the matching view of a given view ID.
 */
getViewById(id: string): Titanium$UI$View,

/**
 * Closes the window.
 */
close(params?: any): void,

/**
 * Hides the navigation bar.
 */
hideNavBar(options?: any): void,

/**
 * Hides the tab bar. Must be called before opening the window.
 */
hideTabBar(): void,

/**
 * Opens the window.
 */
open(params?: openWindowParams): void,

/**
 * Sets the array of items to show in the window's toolbar.
 */
setToolbar(items: $ReadOnlyArray<any>, params?: windowToolbarParam): void,

/**
 * Makes the navigation bar visible.
 */
showNavBar(options?: any): void,

/**
 * Makes the bottom toolbar visible.
 */
showToolbar(options?: any): void,

/**
 * Makes the bottom toolbar invisible.
 */
hideToolbar(options?: any): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.accessibilityHidden> property.
 */
getAccessibilityHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.accessibilityHidden> property.
 */
setAccessibilityHidden(accessibilityHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.accessibilityHint> property.
 */
getAccessibilityHint(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.accessibilityHint> property.
 */
setAccessibilityHint(accessibilityHint: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.accessibilityLabel> property.
 */
getAccessibilityLabel(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.accessibilityLabel> property.
 */
setAccessibilityLabel(accessibilityLabel: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.accessibilityValue> property.
 */
getAccessibilityValue(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.accessibilityValue> property.
 */
setAccessibilityValue(accessibilityValue: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.anchorPoint> property.
 */
getAnchorPoint(): Point,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.anchorPoint> property.
 */
setAnchorPoint(anchorPoint: Point): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.animatedCenter> property.
 */
getAnimatedCenter(): Point,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.backgroundColor> property.
 */
getBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backgroundColor> property.
 */
setBackgroundColor(backgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.backgroundGradient> property.
 */
getBackgroundGradient(): Gradient,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backgroundGradient> property.
 */
setBackgroundGradient(backgroundGradient: Gradient): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.backgroundImage> property.
 */
getBackgroundImage(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.backgroundRepeat> property.
 */
getBackgroundRepeat(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backgroundRepeat> property.
 */
setBackgroundRepeat(backgroundRepeat: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.backgroundLeftCap> property.
 */
getBackgroundLeftCap(): number,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backgroundLeftCap> property.
 */
setBackgroundLeftCap(backgroundLeftCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.backgroundTopCap> property.
 */
getBackgroundTopCap(): number,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backgroundTopCap> property.
 */
setBackgroundTopCap(backgroundTopCap: number): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.borderColor> property.
 */
getBorderColor(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.borderColor> property.
 */
setBorderColor(borderColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.borderRadius> property.
 */
getBorderRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.borderRadius> property.
 */
setBorderRadius(borderRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.borderWidth> property.
 */
getBorderWidth(): number,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.borderWidth> property.
 */
setBorderWidth(borderWidth: number): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.bottom> property.
 */
getBottom(): number | string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.bottom> property.
 */
setBottom(bottom: number): void,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.bottom> property.
 */
setBottom(bottom: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.center> property.
 */
getCenter(): Point,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.center> property.
 */
setCenter(center: Point): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.children> property.
 */
getChildren(): Titanium$UI$View[],

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.clipMode> property.
 */
getClipMode(): number,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.clipMode> property.
 */
setClipMode(clipMode: number): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.height> property.
 */
getHeight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.height> property.
 */
setHeight(height: number): void,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.height> property.
 */
setHeight(height: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.horizontalMotionEffect> property.
 */
getHorizontalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.horizontalMotionEffect> property.
 */
setHorizontalMotionEffect(horizontalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.left> property.
 */
getLeft(): number | string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.left> property.
 */
setLeft(left: number): void,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.left> property.
 */
setLeft(left: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.layout> property.
 */
getLayout(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.layout> property.
 */
setLayout(layout: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.opacity> property.
 */
getOpacity(): number,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.opacity> property.
 */
setOpacity(opacity: number): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.pullBackgroundColor> property.
 */
getPullBackgroundColor(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.pullBackgroundColor> property.
 */
setPullBackgroundColor(pullBackgroundColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.right> property.
 */
getRight(): number | string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.right> property.
 */
setRight(right: number): void,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.right> property.
 */
setRight(right: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.rect> property.
 */
getRect(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.size> property.
 */
getSize(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.tintColor> property.
 */
getTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.tintColor> property.
 */
setTintColor(tintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.top> property.
 */
getTop(): number | string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.top> property.
 */
setTop(top: number): void,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.top> property.
 */
setTop(top: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.touchEnabled> property.
 */
getTouchEnabled(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.touchEnabled> property.
 */
setTouchEnabled(touchEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.transform> property.
 */
getTransform(): Titanium$UI$Matrix2D | Titanium$UI$Matrix3D,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix2D): void,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.transform> property.
 */
setTransform(transform: Titanium$UI$Matrix3D): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.verticalMotionEffect> property.
 */
getVerticalMotionEffect(): any,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.verticalMotionEffect> property.
 */
setVerticalMotionEffect(verticalMotionEffect: any): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.viewShadowRadius> property.
 */
getViewShadowRadius(): number,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.viewShadowRadius> property.
 */
setViewShadowRadius(viewShadowRadius: number): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.viewShadowColor> property.
 */
getViewShadowColor(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.viewShadowColor> property.
 */
setViewShadowColor(viewShadowColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.viewShadowOffset> property.
 */
getViewShadowOffset(): Point,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.viewShadowOffset> property.
 */
setViewShadowOffset(viewShadowOffset: Point): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.visible> property.
 */
getVisible(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.visible> property.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.width> property.
 */
getWidth(): number | string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.width> property.
 */
setWidth(width: number): void,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.width> property.
 */
setWidth(width: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.horizontalWrap> property.
 */
getHorizontalWrap(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.horizontalWrap> property.
 */
setHorizontalWrap(horizontalWrap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.zIndex> property.
 */
getZIndex(): number,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.zIndex> property.
 */
setZIndex(zIndex: number): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.backButtonTitle> property.
 */
getBackButtonTitle(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backButtonTitle> property.
 */
setBackButtonTitle(backButtonTitle: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.backButtonTitleImage> property.
 */
getBackButtonTitleImage(): string | Titanium$Blob,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backButtonTitleImage> property.
 */
setBackButtonTitleImage(backButtonTitleImage: string): void,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.backButtonTitleImage> property.
 */
setBackButtonTitleImage(backButtonTitleImage: Titanium$Blob): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.barColor> property.
 */
getBarColor(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.barColor> property.
 */
setBarColor(barColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.barImage> property.
 */
getBarImage(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.barImage> property.
 */
setBarImage(barImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.extendEdges> property.
 */
getExtendEdges(): number[],

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.extendEdges> property.
 */
setExtendEdges(extendEdges: $ReadOnlyArray<number>): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.includeOpaqueBars> property.
 */
getIncludeOpaqueBars(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.includeOpaqueBars> property.
 */
setIncludeOpaqueBars(includeOpaqueBars: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.autoAdjustScrollViewInsets> property.
 */
getAutoAdjustScrollViewInsets(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.autoAdjustScrollViewInsets> property.
 */
setAutoAdjustScrollViewInsets(autoAdjustScrollViewInsets: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.extendSafeArea> property.
 */
getExtendSafeArea(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.extendSafeArea> property.
 */
setExtendSafeArea(extendSafeArea: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.fullscreen> property.
 */
getFullscreen(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.fullscreen> property.
 */
setFullscreen(fullscreen: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.homeIndicatorAutoHidden> property.
 */
getHomeIndicatorAutoHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.homeIndicatorAutoHidden> property.
 */
setHomeIndicatorAutoHidden(homeIndicatorAutoHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.hideShadow> property.
 */
getHideShadow(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.hideShadow> property.
 */
setHideShadow(hideShadow: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.hidesBarsOnSwipe> property.
 */
getHidesBarsOnSwipe(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.hidesBarsOnSwipe> property.
 */
setHidesBarsOnSwipe(hidesBarsOnSwipe: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.hidesBarsOnTap> property.
 */
getHidesBarsOnTap(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.hidesBarsOnTap> property.
 */
setHidesBarsOnTap(hidesBarsOnTap: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.hidesBarsWhenKeyboardAppears> property.
 */
getHidesBarsWhenKeyboardAppears(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.hidesBarsWhenKeyboardAppears> property.
 */
setHidesBarsWhenKeyboardAppears(hidesBarsWhenKeyboardAppears: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.hidesBackButton> property.
 */
getHidesBackButton(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.hidesBackButton> property.
 */
setHidesBackButton(hidesBackButton: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.largeTitleEnabled> property.
 */
getLargeTitleEnabled(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.largeTitleEnabled> property.
 */
setLargeTitleEnabled(largeTitleEnabled: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.largeTitleDisplayMode> property.
 */
getLargeTitleDisplayMode(): number,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.largeTitleDisplayMode> property.
 */
setLargeTitleDisplayMode(largeTitleDisplayMode: number): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.leftNavButton> property.
 */
getLeftNavButton(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.leftNavButton> property.
 */
setLeftNavButton(leftNavButton: any): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.leftNavButtons> property.
 */
getLeftNavButtons(): Titanium$UI$View[],

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.leftNavButtons> property.
 */
setLeftNavButtons(leftNavButtons: any[]): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.modal> property.
 */
getModal(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.modal> property.
 */
setModal(modal: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.navBarHidden> property.
 */
getNavBarHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.navBarHidden> property.
 */
setNavBarHidden(navBarHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.navTintColor> property.
 */
getNavTintColor(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.navTintColor> property.
 */
setNavTintColor(navTintColor: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.navigationWindow> property.
 */
getNavigationWindow(): Titanium$UI$NavigationWindow,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.orientationModes> property.
 */
getOrientationModes(): number[],

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.orientationModes> property.
 */
setOrientationModes(orientationModes: $ReadOnlyArray<number>): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.orientation> property.
 */
getOrientation(): number,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.rightNavButton> property.
 */
getRightNavButton(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.rightNavButton> property.
 */
setRightNavButton(rightNavButton: any): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.rightNavButtons> property.
 */
getRightNavButtons(): Titanium$UI$View[],

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.rightNavButtons> property.
 */
setRightNavButtons(rightNavButtons: any[]): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.safeAreaPadding> property.
 */
getSafeAreaPadding(): Dimension,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.shadowImage> property.
 */
getShadowImage(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.shadowImage> property.
 */
setShadowImage(shadowImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.statusBarStyle> property.
 */
getStatusBarStyle(): number,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.statusBarStyle> property.
 */
setStatusBarStyle(statusBarStyle: number): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.tabBarHidden> property.
 */
getTabBarHidden(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.tabBarHidden> property.
 */
setTabBarHidden(tabBarHidden: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.titleAttributes> property.
 */
getTitleAttributes(): titleAttributesParams,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.titleAttributes> property.
 */
setTitleAttributes(titleAttributes: titleAttributesParams): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.titleControl> property.
 */
getTitleControl(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.titleControl> property.
 */
setTitleControl(titleControl: any): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.titleImage> property.
 */
getTitleImage(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.titleImage> property.
 */
setTitleImage(titleImage: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.titlePrompt> property.
 */
getTitlePrompt(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.titlePrompt> property.
 */
setTitlePrompt(titlePrompt: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.titleid> property.
 */
getTitleid(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.titleid> property.
 */
setTitleid(titleid: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.titlepromptid> property.
 */
getTitlepromptid(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.titlepromptid> property.
 */
setTitlepromptid(titlepromptid: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.toolbar> property.
 */
getToolbar(): any[],

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.translucent> property.
 */
getTranslucent(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.translucent> property.
 */
setTranslucent(translucent: boolean): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.url> property.
 */
getUrl(): string,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.url> property.
 */
setUrl(url: string): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.detailView> property.
 */
getDetailView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.detailView> property.
 */
setDetailView(detailView: any): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.masterView> property.
 */
getMasterView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.masterView> property.
 */
setMasterView(masterView: any): void,

/**
 * Gets the value of the <Titanium.UI.iPad.SplitWindow.showMasterInPortrait> property.
 */
getShowMasterInPortrait(): boolean,

/**
 * Sets the value of the <Titanium.UI.iPad.SplitWindow.showMasterInPortrait> property.
 */
setShowMasterInPortrait(showMasterInPortrait: boolean): void
} & Titanium$Proxy



      declare var npm$namespace$Titanium$UI$iPhone: {
        addEventListener: typeof Titanium$UI$iPhone$addEventListener,
removeEventListener: typeof Titanium$UI$iPhone$removeEventListener,
fireEvent: typeof Titanium$UI$iPhone$fireEvent,
applyProperties: typeof Titanium$UI$iPhone$applyProperties,
getBubbleParent: typeof Titanium$UI$iPhone$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iPhone$setBubbleParent,
getApiName: typeof Titanium$UI$iPhone$getApiName,
getAppBadge: typeof Titanium$UI$iPhone$getAppBadge,
setAppBadge: typeof Titanium$UI$iPhone$setAppBadge,
getAppSupportsShakeToEdit: typeof Titanium$UI$iPhone$getAppSupportsShakeToEdit,
setAppSupportsShakeToEdit: typeof Titanium$UI$iPhone$setAppSupportsShakeToEdit,
        bubbleParent: typeof Titanium$UI$iPhone$bubbleParent,
apiName: typeof Titanium$UI$iPhone$apiName,
MODAL_PRESENTATION_CURRENT_CONTEXT: typeof Titanium$UI$iPhone$MODAL_PRESENTATION_CURRENT_CONTEXT,
MODAL_PRESENTATION_FORMSHEET: typeof Titanium$UI$iPhone$MODAL_PRESENTATION_FORMSHEET,
MODAL_PRESENTATION_FULLSCREEN: typeof Titanium$UI$iPhone$MODAL_PRESENTATION_FULLSCREEN,
MODAL_PRESENTATION_PAGESHEET: typeof Titanium$UI$iPhone$MODAL_PRESENTATION_PAGESHEET,
MODAL_TRANSITION_STYLE_COVER_VERTICAL: typeof Titanium$UI$iPhone$MODAL_TRANSITION_STYLE_COVER_VERTICAL,
MODAL_TRANSITION_STYLE_CROSS_DISSOLVE: typeof Titanium$UI$iPhone$MODAL_TRANSITION_STYLE_CROSS_DISSOLVE,
MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL: typeof Titanium$UI$iPhone$MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL,
MODAL_TRANSITION_STYLE_PARTIAL_CURL: typeof Titanium$UI$iPhone$MODAL_TRANSITION_STYLE_PARTIAL_CURL,
appBadge: typeof Titanium$UI$iPhone$appBadge,
appSupportsShakeToEdit: typeof Titanium$UI$iPhone$appSupportsShakeToEdit,
        
        
        ActivityIndicatorStyle: typeof npm$namespace$Titanium$UI$iPhone$ActivityIndicatorStyle,
AlertDialogStyle: typeof npm$namespace$Titanium$UI$iPhone$AlertDialogStyle,
AnimationStyle: typeof npm$namespace$Titanium$UI$iPhone$AnimationStyle,
ListViewSeparatorStyle: typeof npm$namespace$Titanium$UI$iPhone$ListViewSeparatorStyle,
ProgressBarStyle: typeof npm$namespace$Titanium$UI$iPhone$ProgressBarStyle,
RowAnimationStyle: typeof npm$namespace$Titanium$UI$iPhone$RowAnimationStyle,
ScrollIndicatorStyle: typeof npm$namespace$Titanium$UI$iPhone$ScrollIndicatorStyle,
SystemButton: typeof npm$namespace$Titanium$UI$iPhone$SystemButton,
SystemButtonStyle: typeof npm$namespace$Titanium$UI$iPhone$SystemButtonStyle,
SystemIcon: typeof npm$namespace$Titanium$UI$iPhone$SystemIcon,
TableViewCellSelectionStyle: typeof npm$namespace$Titanium$UI$iPhone$TableViewCellSelectionStyle,
TableViewScrollPosition: typeof npm$namespace$Titanium$UI$iPhone$TableViewScrollPosition,
TableViewSeparatorStyle: typeof npm$namespace$Titanium$UI$iPhone$TableViewSeparatorStyle,
TableViewStyle: typeof npm$namespace$Titanium$UI$iPhone$TableViewStyle,
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iPhone$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iPhone$apiName: string;


/**
 * View presented with the same style as its parent window.
 */
declare var Titanium$UI$iPhone$MODAL_PRESENTATION_CURRENT_CONTEXT: number;


/**
 * Window width and height are smaller than those of the screen and the view is centered on
 * the screen.
 */
declare var Titanium$UI$iPhone$MODAL_PRESENTATION_FORMSHEET: number;


/**
 * Window covers the screen.
 */
declare var Titanium$UI$iPhone$MODAL_PRESENTATION_FULLSCREEN: number;


/**
 * Window height is the height of the screen and width is equal to screen width in a portrait
 * orientation.
 */
declare var Titanium$UI$iPhone$MODAL_PRESENTATION_PAGESHEET: number;


/**
 * When the window is presented, its view slides up from the bottom of the screen. On dismissal,
 * the view slides back down (default.)
 */
declare var Titanium$UI$iPhone$MODAL_TRANSITION_STYLE_COVER_VERTICAL: number;


/**
 * When the window is presented, the current view fades out while the new view fades in at the
 * same time. On dismissal, a similar type of cross-fade is used to return to the original view.
 */
declare var Titanium$UI$iPhone$MODAL_TRANSITION_STYLE_CROSS_DISSOLVE: number;


/**
 * When the window is presented, the current view initiates a horizontal 3D flip from
 * right-to-left, resulting in the revealing of the new view as if it were on the back of the
 * previous view. On dismissal, the flip occurs from left-to-right, returning to the original
 * view.
 */
declare var Titanium$UI$iPhone$MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL: number;


/**
 * When the window is presented, one corner of the current view curls up to reveal the modal
 * view underneath. On dismissal, the curled up page unfurls itself back on top of the modal
 * view.
 */
declare var Titanium$UI$iPhone$MODAL_TRANSITION_STYLE_PARTIAL_CURL: number;


/**
 * Value of the badge for the application's springboard icon.
 */
declare var Titanium$UI$iPhone$appBadge: number;


/**
 * Determines whether the shake to edit system-wide capability is enabled.
 */
declare var Titanium$UI$iPhone$appSupportsShakeToEdit: boolean;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iPhone$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iPhone$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iPhone.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iPhone.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iPhone.apiName> property.
 */
declare function Titanium$UI$iPhone$getApiName(): string



/**
 * Gets the value of the <Titanium.UI.iPhone.appBadge> property.
 */
declare function Titanium$UI$iPhone$getAppBadge(): number



/**
 * Sets the value of the <Titanium.UI.iPhone.appBadge> property.
 */
declare function Titanium$UI$iPhone$setAppBadge(appBadge: number): void



/**
 * Gets the value of the <Titanium.UI.iPhone.appSupportsShakeToEdit> property.
 */
declare function Titanium$UI$iPhone$getAppSupportsShakeToEdit(): boolean



/**
 * Sets the value of the <Titanium.UI.iPhone.appSupportsShakeToEdit> property.
 */
declare function Titanium$UI$iPhone$setAppSupportsShakeToEdit(appSupportsShakeToEdit: boolean): void



/**
 * A set of constants for the style that can be used for the `selectionStyle` property of a
 * ListItem, which is set in the `properties` dictionary of either the <ListDataItem> or
 * <ItemTemplate>.
 */
declare type Titanium$UI$iPhone$ListViewCellSelectionStyle = {

/**
 * The cell when selected has a blue background. This is the default value.
 */
+BLUE: number,

/**
 * The cell when selected has a gray background.
 */
+GRAY: number,

/**
 * The cell has no distinct style for when it is selected.
 */
+NONE: number
} & Titanium$Proxy



/**
 * A set of constants for the position value that can be used for the `position` property of
 * <ListViewAnimationProperties> when invoking the ListView's `scrollToItem`, `appendSection`,
 * `deleteSectionAt`, `insertSectionAt` and `replaceSectionAt` methods.
 */
declare type Titanium$UI$iPhone$ListViewScrollPosition = {

/**
 * The list view scrolls the row of interest to the bottom of the visible list view.
 */
+BOTTOM: number,

/**
 * The list view scrolls the row of interest to the middle of the list table view.
 */
+MIDDLE: number,

/**
 * The table view scrolls the row of interest to be fully visible with a minimal movement.
 * If the row is already fully visible, no scrolling occurs. For example, if the row is above the
 * visible area, the behavior is identical to that specified by `TOP`. This is the default.
 */
+NONE: number,

/**
 * The list view scrolls the row of interest to the top of the visible list view.
 */
+TOP: number
} & Titanium$Proxy



/**
 * A set of constants for the style that can be used for the `style` property of
 * <Titanium.UI.ListView>.
 */
declare type Titanium$UI$iPhone$ListViewStyle = {

/**
 * A list view whose sections present distinct groups of rows. The section headers and footers
 * do not float.
 */
+GROUPED: number,

/**
 * A plain list view. Any section headers or footers are displayed as inline separators and
 * float when the list view is scrolled.
 */
+PLAIN: number
} & Titanium$Proxy



      declare var npm$namespace$Titanium$UI$iPhone$ActivityIndicatorStyle: {
        addEventListener: typeof Titanium$UI$iPhone$ActivityIndicatorStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iPhone$ActivityIndicatorStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iPhone$ActivityIndicatorStyle$fireEvent,
applyProperties: typeof Titanium$UI$iPhone$ActivityIndicatorStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iPhone$ActivityIndicatorStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iPhone$ActivityIndicatorStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iPhone$ActivityIndicatorStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iPhone$ActivityIndicatorStyle$bubbleParent,
apiName: typeof Titanium$UI$iPhone$ActivityIndicatorStyle$apiName,
BIG: typeof Titanium$UI$iPhone$ActivityIndicatorStyle$BIG,
DARK: typeof Titanium$UI$iPhone$ActivityIndicatorStyle$DARK,
PLAIN: typeof Titanium$UI$iPhone$ActivityIndicatorStyle$PLAIN,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iPhone$ActivityIndicatorStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iPhone$ActivityIndicatorStyle$apiName: string;


/**
 * Large white spinning indicator.
 */
declare var Titanium$UI$iPhone$ActivityIndicatorStyle$BIG: number;


/**
 * Small gray spinning indicator.
 */
declare var Titanium$UI$iPhone$ActivityIndicatorStyle$DARK: number;


/**
 * Small white spinning indicator (default.)
 */
declare var Titanium$UI$iPhone$ActivityIndicatorStyle$PLAIN: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$ActivityIndicatorStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$ActivityIndicatorStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iPhone$ActivityIndicatorStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iPhone$ActivityIndicatorStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iPhone.ActivityIndicatorStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$ActivityIndicatorStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iPhone.ActivityIndicatorStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$ActivityIndicatorStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iPhone.ActivityIndicatorStyle.apiName> property.
 */
declare function Titanium$UI$iPhone$ActivityIndicatorStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iPhone$AlertDialogStyle: {
        addEventListener: typeof Titanium$UI$iPhone$AlertDialogStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iPhone$AlertDialogStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iPhone$AlertDialogStyle$fireEvent,
applyProperties: typeof Titanium$UI$iPhone$AlertDialogStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iPhone$AlertDialogStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iPhone$AlertDialogStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iPhone$AlertDialogStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iPhone$AlertDialogStyle$bubbleParent,
apiName: typeof Titanium$UI$iPhone$AlertDialogStyle$apiName,
DEFAULT: typeof Titanium$UI$iPhone$AlertDialogStyle$DEFAULT,
PLAIN_TEXT_INPUT: typeof Titanium$UI$iPhone$AlertDialogStyle$PLAIN_TEXT_INPUT,
SECURE_TEXT_INPUT: typeof Titanium$UI$iPhone$AlertDialogStyle$SECURE_TEXT_INPUT,
LOGIN_AND_PASSWORD_INPUT: typeof Titanium$UI$iPhone$AlertDialogStyle$LOGIN_AND_PASSWORD_INPUT,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iPhone$AlertDialogStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iPhone$AlertDialogStyle$apiName: string;


/**
 * A standard alert dialog. This is the default value.
 */
declare var Titanium$UI$iPhone$AlertDialogStyle$DEFAULT: number;


/**
 * An alert dialog that allows the user to enter text.
 */
declare var Titanium$UI$iPhone$AlertDialogStyle$PLAIN_TEXT_INPUT: number;


/**
 * An alert dialog that allows the user to enter text. The text field is obscured.
 */
declare var Titanium$UI$iPhone$AlertDialogStyle$SECURE_TEXT_INPUT: number;


/**
 * An alert dialog that allows the user to enter login identifier and password.
 */
declare var Titanium$UI$iPhone$AlertDialogStyle$LOGIN_AND_PASSWORD_INPUT: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$AlertDialogStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$AlertDialogStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iPhone$AlertDialogStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iPhone$AlertDialogStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iPhone.AlertDialogStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$AlertDialogStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iPhone.AlertDialogStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$AlertDialogStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iPhone.AlertDialogStyle.apiName> property.
 */
declare function Titanium$UI$iPhone$AlertDialogStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iPhone$AnimationStyle: {
        addEventListener: typeof Titanium$UI$iPhone$AnimationStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iPhone$AnimationStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iPhone$AnimationStyle$fireEvent,
applyProperties: typeof Titanium$UI$iPhone$AnimationStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iPhone$AnimationStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iPhone$AnimationStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iPhone$AnimationStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iPhone$AnimationStyle$bubbleParent,
apiName: typeof Titanium$UI$iPhone$AnimationStyle$apiName,
CURL_DOWN: typeof Titanium$UI$iPhone$AnimationStyle$CURL_DOWN,
CURL_UP: typeof Titanium$UI$iPhone$AnimationStyle$CURL_UP,
FLIP_FROM_LEFT: typeof Titanium$UI$iPhone$AnimationStyle$FLIP_FROM_LEFT,
FLIP_FROM_RIGHT: typeof Titanium$UI$iPhone$AnimationStyle$FLIP_FROM_RIGHT,
NONE: typeof Titanium$UI$iPhone$AnimationStyle$NONE,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iPhone$AnimationStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iPhone$AnimationStyle$apiName: string;


/**
 * Curl downwards during a transition animation.
 */
declare var Titanium$UI$iPhone$AnimationStyle$CURL_DOWN: number;


/**
 * Curl upwards during a transition animation.
 */
declare var Titanium$UI$iPhone$AnimationStyle$CURL_UP: number;


/**
 * Flip from left to right during a transition animation.
 */
declare var Titanium$UI$iPhone$AnimationStyle$FLIP_FROM_LEFT: number;


/**
 * Flip from right to left during a transition animation.
 */
declare var Titanium$UI$iPhone$AnimationStyle$FLIP_FROM_RIGHT: number;


/**
 * No animation.
 */
declare var Titanium$UI$iPhone$AnimationStyle$NONE: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$AnimationStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$AnimationStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iPhone$AnimationStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iPhone$AnimationStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iPhone.AnimationStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$AnimationStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iPhone.AnimationStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$AnimationStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iPhone.AnimationStyle.apiName> property.
 */
declare function Titanium$UI$iPhone$AnimationStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iPhone$ListViewSeparatorStyle: {
        addEventListener: typeof Titanium$UI$iPhone$ListViewSeparatorStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iPhone$ListViewSeparatorStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iPhone$ListViewSeparatorStyle$fireEvent,
applyProperties: typeof Titanium$UI$iPhone$ListViewSeparatorStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iPhone$ListViewSeparatorStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iPhone$ListViewSeparatorStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iPhone$ListViewSeparatorStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iPhone$ListViewSeparatorStyle$bubbleParent,
apiName: typeof Titanium$UI$iPhone$ListViewSeparatorStyle$apiName,
NONE: typeof Titanium$UI$iPhone$ListViewSeparatorStyle$NONE,
SINGLE_LINE: typeof Titanium$UI$iPhone$ListViewSeparatorStyle$SINGLE_LINE,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iPhone$ListViewSeparatorStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iPhone$ListViewSeparatorStyle$apiName: string;


/**
 * The separator cell has no distinct style.
 */
declare var Titanium$UI$iPhone$ListViewSeparatorStyle$NONE: number;


/**
 * The separator cell has a single line running across its width. This is the default value.
 */
declare var Titanium$UI$iPhone$ListViewSeparatorStyle$SINGLE_LINE: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$ListViewSeparatorStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$ListViewSeparatorStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iPhone$ListViewSeparatorStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iPhone$ListViewSeparatorStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iPhone.ListViewSeparatorStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$ListViewSeparatorStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iPhone.ListViewSeparatorStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$ListViewSeparatorStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iPhone.ListViewSeparatorStyle.apiName> property.
 */
declare function Titanium$UI$iPhone$ListViewSeparatorStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iPhone$ProgressBarStyle: {
        addEventListener: typeof Titanium$UI$iPhone$ProgressBarStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iPhone$ProgressBarStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iPhone$ProgressBarStyle$fireEvent,
applyProperties: typeof Titanium$UI$iPhone$ProgressBarStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iPhone$ProgressBarStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iPhone$ProgressBarStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iPhone$ProgressBarStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iPhone$ProgressBarStyle$bubbleParent,
apiName: typeof Titanium$UI$iPhone$ProgressBarStyle$apiName,
BAR: typeof Titanium$UI$iPhone$ProgressBarStyle$BAR,
DEFAULT: typeof Titanium$UI$iPhone$ProgressBarStyle$DEFAULT,
PLAIN: typeof Titanium$UI$iPhone$ProgressBarStyle$PLAIN,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iPhone$ProgressBarStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iPhone$ProgressBarStyle$apiName: string;


/**
 * The style of progress view that is used in a toolbar.
 */
declare var Titanium$UI$iPhone$ProgressBarStyle$BAR: number;


/**
 * he standard progress-view style. This is the default.
 */
declare var Titanium$UI$iPhone$ProgressBarStyle$DEFAULT: number;


/**
 * The standard progress-view style. Same as `DEFAULT`.
 */
declare var Titanium$UI$iPhone$ProgressBarStyle$PLAIN: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$ProgressBarStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$ProgressBarStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iPhone$ProgressBarStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iPhone$ProgressBarStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iPhone.ProgressBarStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$ProgressBarStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iPhone.ProgressBarStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$ProgressBarStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iPhone.ProgressBarStyle.apiName> property.
 */
declare function Titanium$UI$iPhone$ProgressBarStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iPhone$RowAnimationStyle: {
        addEventListener: typeof Titanium$UI$iPhone$RowAnimationStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iPhone$RowAnimationStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iPhone$RowAnimationStyle$fireEvent,
applyProperties: typeof Titanium$UI$iPhone$RowAnimationStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iPhone$RowAnimationStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iPhone$RowAnimationStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iPhone$RowAnimationStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iPhone$RowAnimationStyle$bubbleParent,
apiName: typeof Titanium$UI$iPhone$RowAnimationStyle$apiName,
BOTTOM: typeof Titanium$UI$iPhone$RowAnimationStyle$BOTTOM,
FADE: typeof Titanium$UI$iPhone$RowAnimationStyle$FADE,
LEFT: typeof Titanium$UI$iPhone$RowAnimationStyle$LEFT,
NONE: typeof Titanium$UI$iPhone$RowAnimationStyle$NONE,
RIGHT: typeof Titanium$UI$iPhone$RowAnimationStyle$RIGHT,
TOP: typeof Titanium$UI$iPhone$RowAnimationStyle$TOP,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iPhone$RowAnimationStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iPhone$RowAnimationStyle$apiName: string;


/**
 * The inserted row or rows slides in from the bottom; the deleted row or rows slides out
 * toward the bottom.
 */
declare var Titanium$UI$iPhone$RowAnimationStyle$BOTTOM: number;


/**
 * The inserted or deleted row or rows fades into or out of the table view.
 */
declare var Titanium$UI$iPhone$RowAnimationStyle$FADE: number;


/**
 * The inserted row or rows slides in from the left; the deleted row or rows slides out to the
 * left.
 */
declare var Titanium$UI$iPhone$RowAnimationStyle$LEFT: number;


/**
 * No animation is performed. The new cell value appears as if the cell had just been reloaded.
 */
declare var Titanium$UI$iPhone$RowAnimationStyle$NONE: number;


/**
 * The inserted row or rows slides in from the right; the deleted row or rows slides out to
 * the right.
 */
declare var Titanium$UI$iPhone$RowAnimationStyle$RIGHT: number;


/**
 * The inserted row or rows slides in from the top; the deleted row or rows slides out toward
 * the top.
 */
declare var Titanium$UI$iPhone$RowAnimationStyle$TOP: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$RowAnimationStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$RowAnimationStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iPhone$RowAnimationStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iPhone$RowAnimationStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iPhone.RowAnimationStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$RowAnimationStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iPhone.RowAnimationStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$RowAnimationStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iPhone.RowAnimationStyle.apiName> property.
 */
declare function Titanium$UI$iPhone$RowAnimationStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iPhone$ScrollIndicatorStyle: {
        addEventListener: typeof Titanium$UI$iPhone$ScrollIndicatorStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iPhone$ScrollIndicatorStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iPhone$ScrollIndicatorStyle$fireEvent,
applyProperties: typeof Titanium$UI$iPhone$ScrollIndicatorStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iPhone$ScrollIndicatorStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iPhone$ScrollIndicatorStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iPhone$ScrollIndicatorStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iPhone$ScrollIndicatorStyle$bubbleParent,
apiName: typeof Titanium$UI$iPhone$ScrollIndicatorStyle$apiName,
BLACK: typeof Titanium$UI$iPhone$ScrollIndicatorStyle$BLACK,
DEFAULT: typeof Titanium$UI$iPhone$ScrollIndicatorStyle$DEFAULT,
WHITE: typeof Titanium$UI$iPhone$ScrollIndicatorStyle$WHITE,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iPhone$ScrollIndicatorStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iPhone$ScrollIndicatorStyle$apiName: string;


/**
 * A style of indicator which is black smaller than the default style. This style is good
 * against a white content background.
 */
declare var Titanium$UI$iPhone$ScrollIndicatorStyle$BLACK: number;


/**
 * The default style of scroll indicator, which is black with a white border. This style is
 * good against any content background.
 */
declare var Titanium$UI$iPhone$ScrollIndicatorStyle$DEFAULT: number;


/**
 * A style of indicator is white and smaller than the default style. This style is good against
 * a black content background.
 */
declare var Titanium$UI$iPhone$ScrollIndicatorStyle$WHITE: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$ScrollIndicatorStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$ScrollIndicatorStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iPhone$ScrollIndicatorStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iPhone$ScrollIndicatorStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iPhone.ScrollIndicatorStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$ScrollIndicatorStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iPhone.ScrollIndicatorStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$ScrollIndicatorStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iPhone.ScrollIndicatorStyle.apiName> property.
 */
declare function Titanium$UI$iPhone$ScrollIndicatorStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iPhone$SystemButton: {
        addEventListener: typeof Titanium$UI$iPhone$SystemButton$addEventListener,
removeEventListener: typeof Titanium$UI$iPhone$SystemButton$removeEventListener,
fireEvent: typeof Titanium$UI$iPhone$SystemButton$fireEvent,
applyProperties: typeof Titanium$UI$iPhone$SystemButton$applyProperties,
getBubbleParent: typeof Titanium$UI$iPhone$SystemButton$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iPhone$SystemButton$setBubbleParent,
getApiName: typeof Titanium$UI$iPhone$SystemButton$getApiName,
        bubbleParent: typeof Titanium$UI$iPhone$SystemButton$bubbleParent,
apiName: typeof Titanium$UI$iPhone$SystemButton$apiName,
ACTION: typeof Titanium$UI$iPhone$SystemButton$ACTION,
ACTIVITY: typeof Titanium$UI$iPhone$SystemButton$ACTIVITY,
ADD: typeof Titanium$UI$iPhone$SystemButton$ADD,
BOOKMARKS: typeof Titanium$UI$iPhone$SystemButton$BOOKMARKS,
CAMERA: typeof Titanium$UI$iPhone$SystemButton$CAMERA,
CANCEL: typeof Titanium$UI$iPhone$SystemButton$CANCEL,
COMPOSE: typeof Titanium$UI$iPhone$SystemButton$COMPOSE,
CONTACT_ADD: typeof Titanium$UI$iPhone$SystemButton$CONTACT_ADD,
DISCLOSURE: typeof Titanium$UI$iPhone$SystemButton$DISCLOSURE,
DONE: typeof Titanium$UI$iPhone$SystemButton$DONE,
EDIT: typeof Titanium$UI$iPhone$SystemButton$EDIT,
FAST_FORWARD: typeof Titanium$UI$iPhone$SystemButton$FAST_FORWARD,
FIXED_SPACE: typeof Titanium$UI$iPhone$SystemButton$FIXED_SPACE,
FLEXIBLE_SPACE: typeof Titanium$UI$iPhone$SystemButton$FLEXIBLE_SPACE,
INFO_DARK: typeof Titanium$UI$iPhone$SystemButton$INFO_DARK,
INFO_LIGHT: typeof Titanium$UI$iPhone$SystemButton$INFO_LIGHT,
ORGANIZE: typeof Titanium$UI$iPhone$SystemButton$ORGANIZE,
PAUSE: typeof Titanium$UI$iPhone$SystemButton$PAUSE,
PLAY: typeof Titanium$UI$iPhone$SystemButton$PLAY,
REFRESH: typeof Titanium$UI$iPhone$SystemButton$REFRESH,
REPLY: typeof Titanium$UI$iPhone$SystemButton$REPLY,
REWIND: typeof Titanium$UI$iPhone$SystemButton$REWIND,
SAVE: typeof Titanium$UI$iPhone$SystemButton$SAVE,
SPINNER: typeof Titanium$UI$iPhone$SystemButton$SPINNER,
STOP: typeof Titanium$UI$iPhone$SystemButton$STOP,
TRASH: typeof Titanium$UI$iPhone$SystemButton$TRASH,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iPhone$SystemButton$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iPhone$SystemButton$apiName: string;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Action** button.
 */
declare var Titanium$UI$iPhone$SystemButton$ACTION: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to create an activity indicator that
 * can be used in navigation bars and toolbars.
 */
declare var Titanium$UI$iPhone$SystemButton$ACTIVITY: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Add** button.
 */
declare var Titanium$UI$iPhone$SystemButton$ADD: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Bookmarks** button.
 */
declare var Titanium$UI$iPhone$SystemButton$BOOKMARKS: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Camera** button.
 */
declare var Titanium$UI$iPhone$SystemButton$CAMERA: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Cancel** button.
 */
declare var Titanium$UI$iPhone$SystemButton$CANCEL: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Compose** button.
 */
declare var Titanium$UI$iPhone$SystemButton$COMPOSE: number;


/**
 * Use with [Button.style](Titanium.UI.Button.style) to specify a **ContactAdd** button.
 */
declare var Titanium$UI$iPhone$SystemButton$CONTACT_ADD: number;


/**
 * Use with [Button.style](Titanium.UI.Button.style) to specify a **Disclosure** button.
 */
declare var Titanium$UI$iPhone$SystemButton$DISCLOSURE: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Done** button.
 */
declare var Titanium$UI$iPhone$SystemButton$DONE: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Edit** button.
 */
declare var Titanium$UI$iPhone$SystemButton$EDIT: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Fast Forward** button.
 */
declare var Titanium$UI$iPhone$SystemButton$FAST_FORWARD: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to create a fixed-width blank space
 * for spacing items in toolbars.
 */
declare var Titanium$UI$iPhone$SystemButton$FIXED_SPACE: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to create a flexible blank space
 * for spacing items in toolbars.
 */
declare var Titanium$UI$iPhone$SystemButton$FLEXIBLE_SPACE: number;


/**
 * Use with [Button.style](Titanium.UI.Button.style) to specify a dark-colored **Info** button.
 */
declare var Titanium$UI$iPhone$SystemButton$INFO_DARK: number;


/**
 * Use with [Button.style](Titanium.UI.Button.style) to specify a light-colored **Info** button.
 */
declare var Titanium$UI$iPhone$SystemButton$INFO_LIGHT: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify an **Organize** button.
 */
declare var Titanium$UI$iPhone$SystemButton$ORGANIZE: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Pause** button.
 */
declare var Titanium$UI$iPhone$SystemButton$PAUSE: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Play** button.
 */
declare var Titanium$UI$iPhone$SystemButton$PLAY: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Refresh** button.
 */
declare var Titanium$UI$iPhone$SystemButton$REFRESH: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Reply** button.
 */
declare var Titanium$UI$iPhone$SystemButton$REPLY: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Rewind** button.
 */
declare var Titanium$UI$iPhone$SystemButton$REWIND: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Save** button.
 */
declare var Titanium$UI$iPhone$SystemButton$SAVE: number;


/**
 * Identical to [ACTIVITY](Titanium.UI.iPhone.SystemButton.ACTIVITY).
 */
declare var Titanium$UI$iPhone$SystemButton$SPINNER: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Stop** button.
 */
declare var Titanium$UI$iPhone$SystemButton$STOP: number;


/**
 * Use with [Button.systemButton](Titanium.UI.Button.systemButton) to specify a **Trash** button.
 */
declare var Titanium$UI$iPhone$SystemButton$TRASH: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$SystemButton$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$SystemButton$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iPhone$SystemButton$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iPhone$SystemButton$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iPhone.SystemButton.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$SystemButton$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iPhone.SystemButton.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$SystemButton$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iPhone.SystemButton.apiName> property.
 */
declare function Titanium$UI$iPhone$SystemButton$getApiName(): string



      declare var npm$namespace$Titanium$UI$iPhone$SystemButtonStyle: {
        addEventListener: typeof Titanium$UI$iPhone$SystemButtonStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iPhone$SystemButtonStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iPhone$SystemButtonStyle$fireEvent,
applyProperties: typeof Titanium$UI$iPhone$SystemButtonStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iPhone$SystemButtonStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iPhone$SystemButtonStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iPhone$SystemButtonStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iPhone$SystemButtonStyle$bubbleParent,
apiName: typeof Titanium$UI$iPhone$SystemButtonStyle$apiName,
BAR: typeof Titanium$UI$iPhone$SystemButtonStyle$BAR,
BORDERED: typeof Titanium$UI$iPhone$SystemButtonStyle$BORDERED,
DONE: typeof Titanium$UI$iPhone$SystemButtonStyle$DONE,
PLAIN: typeof Titanium$UI$iPhone$SystemButtonStyle$PLAIN,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iPhone$SystemButtonStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iPhone$SystemButtonStyle$apiName: string;


/**
 * Used with [ButtonBar](Titanium.UI.ButtonBar) or [TabbedBar](Titanium.UI.iOS.TabbedBar) only,
 * to use the more condensed style used in nav bars and tool bars.
 */
declare var Titanium$UI$iPhone$SystemButtonStyle$BAR: number;


/**
 * A simple button style with a border.
 */
declare var Titanium$UI$iPhone$SystemButtonStyle$BORDERED: number;


/**
 * The style for a **Done** button--for example, a button that completes some task and returns
 * to the previous view.
 */
declare var Titanium$UI$iPhone$SystemButtonStyle$DONE: number;


/**
 * Specifies a borderless button, the default style for toolbars, button bars, and tabbed bars.
 */
declare var Titanium$UI$iPhone$SystemButtonStyle$PLAIN: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$SystemButtonStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$SystemButtonStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iPhone$SystemButtonStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iPhone$SystemButtonStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iPhone.SystemButtonStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$SystemButtonStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iPhone.SystemButtonStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$SystemButtonStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iPhone.SystemButtonStyle.apiName> property.
 */
declare function Titanium$UI$iPhone$SystemButtonStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iPhone$SystemIcon: {
        addEventListener: typeof Titanium$UI$iPhone$SystemIcon$addEventListener,
removeEventListener: typeof Titanium$UI$iPhone$SystemIcon$removeEventListener,
fireEvent: typeof Titanium$UI$iPhone$SystemIcon$fireEvent,
applyProperties: typeof Titanium$UI$iPhone$SystemIcon$applyProperties,
getBubbleParent: typeof Titanium$UI$iPhone$SystemIcon$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iPhone$SystemIcon$setBubbleParent,
getApiName: typeof Titanium$UI$iPhone$SystemIcon$getApiName,
        bubbleParent: typeof Titanium$UI$iPhone$SystemIcon$bubbleParent,
apiName: typeof Titanium$UI$iPhone$SystemIcon$apiName,
BOOKMARKS: typeof Titanium$UI$iPhone$SystemIcon$BOOKMARKS,
CONTACTS: typeof Titanium$UI$iPhone$SystemIcon$CONTACTS,
DOWNLOADS: typeof Titanium$UI$iPhone$SystemIcon$DOWNLOADS,
FAVORITES: typeof Titanium$UI$iPhone$SystemIcon$FAVORITES,
FEATURED: typeof Titanium$UI$iPhone$SystemIcon$FEATURED,
HISTORY: typeof Titanium$UI$iPhone$SystemIcon$HISTORY,
MORE: typeof Titanium$UI$iPhone$SystemIcon$MORE,
MOST_RECENT: typeof Titanium$UI$iPhone$SystemIcon$MOST_RECENT,
MOST_VIEWED: typeof Titanium$UI$iPhone$SystemIcon$MOST_VIEWED,
RECENTS: typeof Titanium$UI$iPhone$SystemIcon$RECENTS,
SEARCH: typeof Titanium$UI$iPhone$SystemIcon$SEARCH,
TOP_RATED: typeof Titanium$UI$iPhone$SystemIcon$TOP_RATED,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iPhone$SystemIcon$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iPhone$SystemIcon$apiName: string;


/**
 * Bookmark style icon
 */
declare var Titanium$UI$iPhone$SystemIcon$BOOKMARKS: number;


/**
 * Contacts style icon
 */
declare var Titanium$UI$iPhone$SystemIcon$CONTACTS: number;


/**
 * Downloads style icon
 */
declare var Titanium$UI$iPhone$SystemIcon$DOWNLOADS: number;


/**
 * Favorites style icon
 */
declare var Titanium$UI$iPhone$SystemIcon$FAVORITES: number;


/**
 * Featured style icon
 */
declare var Titanium$UI$iPhone$SystemIcon$FEATURED: number;


/**
 * History style icon
 */
declare var Titanium$UI$iPhone$SystemIcon$HISTORY: number;


/**
 * More style icon
 */
declare var Titanium$UI$iPhone$SystemIcon$MORE: number;


/**
 * Most recent style icon
 */
declare var Titanium$UI$iPhone$SystemIcon$MOST_RECENT: number;


/**
 * Most viewed style icon
 */
declare var Titanium$UI$iPhone$SystemIcon$MOST_VIEWED: number;


/**
 * Recents style icon
 */
declare var Titanium$UI$iPhone$SystemIcon$RECENTS: number;


/**
 * Search style icon
 */
declare var Titanium$UI$iPhone$SystemIcon$SEARCH: number;


/**
 * Top rated style icon
 */
declare var Titanium$UI$iPhone$SystemIcon$TOP_RATED: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$SystemIcon$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$SystemIcon$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iPhone$SystemIcon$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iPhone$SystemIcon$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iPhone.SystemIcon.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$SystemIcon$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iPhone.SystemIcon.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$SystemIcon$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iPhone.SystemIcon.apiName> property.
 */
declare function Titanium$UI$iPhone$SystemIcon$getApiName(): string



      declare var npm$namespace$Titanium$UI$iPhone$TableViewCellSelectionStyle: {
        addEventListener: typeof Titanium$UI$iPhone$TableViewCellSelectionStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iPhone$TableViewCellSelectionStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iPhone$TableViewCellSelectionStyle$fireEvent,
applyProperties: typeof Titanium$UI$iPhone$TableViewCellSelectionStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iPhone$TableViewCellSelectionStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iPhone$TableViewCellSelectionStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iPhone$TableViewCellSelectionStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iPhone$TableViewCellSelectionStyle$bubbleParent,
apiName: typeof Titanium$UI$iPhone$TableViewCellSelectionStyle$apiName,
BLUE: typeof Titanium$UI$iPhone$TableViewCellSelectionStyle$BLUE,
GRAY: typeof Titanium$UI$iPhone$TableViewCellSelectionStyle$GRAY,
NONE: typeof Titanium$UI$iPhone$TableViewCellSelectionStyle$NONE,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iPhone$TableViewCellSelectionStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iPhone$TableViewCellSelectionStyle$apiName: string;


/**
 * The cell when selected has a blue background. This is the default value.
 */
declare var Titanium$UI$iPhone$TableViewCellSelectionStyle$BLUE: number;


/**
 * Then cell when selected has a gray background.
 */
declare var Titanium$UI$iPhone$TableViewCellSelectionStyle$GRAY: number;


/**
 * The cell has no distinct style for when it is selected.
 */
declare var Titanium$UI$iPhone$TableViewCellSelectionStyle$NONE: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$TableViewCellSelectionStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$TableViewCellSelectionStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iPhone$TableViewCellSelectionStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iPhone$TableViewCellSelectionStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iPhone.TableViewCellSelectionStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$TableViewCellSelectionStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iPhone.TableViewCellSelectionStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$TableViewCellSelectionStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iPhone.TableViewCellSelectionStyle.apiName> property.
 */
declare function Titanium$UI$iPhone$TableViewCellSelectionStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iPhone$TableViewScrollPosition: {
        addEventListener: typeof Titanium$UI$iPhone$TableViewScrollPosition$addEventListener,
removeEventListener: typeof Titanium$UI$iPhone$TableViewScrollPosition$removeEventListener,
fireEvent: typeof Titanium$UI$iPhone$TableViewScrollPosition$fireEvent,
applyProperties: typeof Titanium$UI$iPhone$TableViewScrollPosition$applyProperties,
getBubbleParent: typeof Titanium$UI$iPhone$TableViewScrollPosition$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iPhone$TableViewScrollPosition$setBubbleParent,
getApiName: typeof Titanium$UI$iPhone$TableViewScrollPosition$getApiName,
        bubbleParent: typeof Titanium$UI$iPhone$TableViewScrollPosition$bubbleParent,
apiName: typeof Titanium$UI$iPhone$TableViewScrollPosition$apiName,
BOTTOM: typeof Titanium$UI$iPhone$TableViewScrollPosition$BOTTOM,
MIDDLE: typeof Titanium$UI$iPhone$TableViewScrollPosition$MIDDLE,
NONE: typeof Titanium$UI$iPhone$TableViewScrollPosition$NONE,
TOP: typeof Titanium$UI$iPhone$TableViewScrollPosition$TOP,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iPhone$TableViewScrollPosition$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iPhone$TableViewScrollPosition$apiName: string;


/**
 * The table view scrolls the row of interest to the bottom of the visible table view.
 */
declare var Titanium$UI$iPhone$TableViewScrollPosition$BOTTOM: number;


/**
 * The table view scrolls the row of interest to the middle of the visible table view.
 */
declare var Titanium$UI$iPhone$TableViewScrollPosition$MIDDLE: number;


/**
 * The table view scrolls the row of interest to be fully visible with a minimum of movement. If the row is already fully visible, no scrolling occurs. For example, if the row is above the visible area, the behavior is identical to that specified by `TOP`. This is the default.
 */
declare var Titanium$UI$iPhone$TableViewScrollPosition$NONE: number;


/**
 * The table view scrolls the row of interest to the top of the visible table view.
 */
declare var Titanium$UI$iPhone$TableViewScrollPosition$TOP: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$TableViewScrollPosition$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$TableViewScrollPosition$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iPhone$TableViewScrollPosition$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iPhone$TableViewScrollPosition$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iPhone.TableViewScrollPosition.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$TableViewScrollPosition$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iPhone.TableViewScrollPosition.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$TableViewScrollPosition$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iPhone.TableViewScrollPosition.apiName> property.
 */
declare function Titanium$UI$iPhone$TableViewScrollPosition$getApiName(): string



      declare var npm$namespace$Titanium$UI$iPhone$TableViewSeparatorStyle: {
        addEventListener: typeof Titanium$UI$iPhone$TableViewSeparatorStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iPhone$TableViewSeparatorStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iPhone$TableViewSeparatorStyle$fireEvent,
applyProperties: typeof Titanium$UI$iPhone$TableViewSeparatorStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iPhone$TableViewSeparatorStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iPhone$TableViewSeparatorStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iPhone$TableViewSeparatorStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iPhone$TableViewSeparatorStyle$bubbleParent,
apiName: typeof Titanium$UI$iPhone$TableViewSeparatorStyle$apiName,
NONE: typeof Titanium$UI$iPhone$TableViewSeparatorStyle$NONE,
SINGLE_LINE: typeof Titanium$UI$iPhone$TableViewSeparatorStyle$SINGLE_LINE,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iPhone$TableViewSeparatorStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iPhone$TableViewSeparatorStyle$apiName: string;


/**
 * The separator cell has no distinct style.
 */
declare var Titanium$UI$iPhone$TableViewSeparatorStyle$NONE: number;


/**
 * The separator cell has a single line running across its width. This is the default value.
 */
declare var Titanium$UI$iPhone$TableViewSeparatorStyle$SINGLE_LINE: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$TableViewSeparatorStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$TableViewSeparatorStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iPhone$TableViewSeparatorStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iPhone$TableViewSeparatorStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iPhone.TableViewSeparatorStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$TableViewSeparatorStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iPhone.TableViewSeparatorStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$TableViewSeparatorStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iPhone.TableViewSeparatorStyle.apiName> property.
 */
declare function Titanium$UI$iPhone$TableViewSeparatorStyle$getApiName(): string



      declare var npm$namespace$Titanium$UI$iPhone$TableViewStyle: {
        addEventListener: typeof Titanium$UI$iPhone$TableViewStyle$addEventListener,
removeEventListener: typeof Titanium$UI$iPhone$TableViewStyle$removeEventListener,
fireEvent: typeof Titanium$UI$iPhone$TableViewStyle$fireEvent,
applyProperties: typeof Titanium$UI$iPhone$TableViewStyle$applyProperties,
getBubbleParent: typeof Titanium$UI$iPhone$TableViewStyle$getBubbleParent,
setBubbleParent: typeof Titanium$UI$iPhone$TableViewStyle$setBubbleParent,
getApiName: typeof Titanium$UI$iPhone$TableViewStyle$getApiName,
        bubbleParent: typeof Titanium$UI$iPhone$TableViewStyle$bubbleParent,
apiName: typeof Titanium$UI$iPhone$TableViewStyle$apiName,
GROUPED: typeof Titanium$UI$iPhone$TableViewStyle$GROUPED,
PLAIN: typeof Titanium$UI$iPhone$TableViewStyle$PLAIN,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$UI$iPhone$TableViewStyle$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$UI$iPhone$TableViewStyle$apiName: string;


/**
 * A table view whose sections present distinct groups of rows. The section headers and footers
 * do not float.
 */
declare var Titanium$UI$iPhone$TableViewStyle$GROUPED: number;


/**
 * A plain table view. Any section headers or footers are displayed as inline separators and
 * float when the table view is scrolled.
 */
declare var Titanium$UI$iPhone$TableViewStyle$PLAIN: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$TableViewStyle$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$UI$iPhone$TableViewStyle$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$UI$iPhone$TableViewStyle$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$UI$iPhone$TableViewStyle$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.UI.iPhone.TableViewStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$TableViewStyle$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.UI.iPhone.TableViewStyle.bubbleParent> property.
 */
declare function Titanium$UI$iPhone$TableViewStyle$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.UI.iPhone.TableViewStyle.apiName> property.
 */
declare function Titanium$UI$iPhone$TableViewStyle$getApiName(): string



      declare var npm$namespace$Titanium$Module: {
        addEventListener: typeof Titanium$Module$addEventListener,
removeEventListener: typeof Titanium$Module$removeEventListener,
fireEvent: typeof Titanium$Module$fireEvent,
applyProperties: typeof Titanium$Module$applyProperties,
getBubbleParent: typeof Titanium$Module$getBubbleParent,
setBubbleParent: typeof Titanium$Module$setBubbleParent,
getApiName: typeof Titanium$Module$getApiName,
getLifecycleContainer: typeof Titanium$Module$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Module$setLifecycleContainer,
        bubbleParent: typeof Titanium$Module$bubbleParent,
apiName: typeof Titanium$Module$apiName,
lifecycleContainer: typeof Titanium$Module$lifecycleContainer,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Module$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Module$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Module$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Module$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Module$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Module$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Module$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.Module.bubbleParent> property.
 */
declare function Titanium$Module$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Module.bubbleParent> property.
 */
declare function Titanium$Module$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Module.apiName> property.
 */
declare function Titanium$Module$getApiName(): string



/**
 * Gets the value of the <Titanium.Module.lifecycleContainer> property.
 */
declare function Titanium$Module$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Module.lifecycleContainer> property.
 */
declare function Titanium$Module$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Module.lifecycleContainer> property.
 */
declare function Titanium$Module$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



      declare var npm$namespace$Titanium$API: {
        addEventListener: typeof Titanium$API$addEventListener,
removeEventListener: typeof Titanium$API$removeEventListener,
fireEvent: typeof Titanium$API$fireEvent,
applyProperties: typeof Titanium$API$applyProperties,
debug: typeof Titanium$API$debug,
error: typeof Titanium$API$error,
info: typeof Titanium$API$info,
log: typeof Titanium$API$log,
timestamp: typeof Titanium$API$timestamp,
trace: typeof Titanium$API$trace,
warn: typeof Titanium$API$warn,
getBubbleParent: typeof Titanium$API$getBubbleParent,
setBubbleParent: typeof Titanium$API$setBubbleParent,
getApiName: typeof Titanium$API$getApiName,
getLifecycleContainer: typeof Titanium$API$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$API$setLifecycleContainer,
        bubbleParent: typeof Titanium$API$bubbleParent,
apiName: typeof Titanium$API$apiName,
lifecycleContainer: typeof Titanium$API$lifecycleContainer,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$API$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$API$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$API$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$API$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$API$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$API$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$API$applyProperties(props: any): void



/**
 * Logs messages with a `debug` severity-level.
 */
declare function Titanium$API$debug(message: $ReadOnlyArray<string>): void



/**
 * Logs messages with a `debug` severity-level.
 */
declare function Titanium$API$debug(message: string): void



/**
 * Logs messages with an `error` severity-level.
 */
declare function Titanium$API$error(message: $ReadOnlyArray<string>): void



/**
 * Logs messages with an `error` severity-level.
 */
declare function Titanium$API$error(message: string): void



/**
 * Logs messages with an `info` severity-level.
 */
declare function Titanium$API$info(message: $ReadOnlyArray<string>): void



/**
 * Logs messages with an `info` severity-level.
 */
declare function Titanium$API$info(message: string): void



/**
 * Logs messages with the specified severity-level.
 */
declare function Titanium$API$log(level: string, message: $ReadOnlyArray<string>): void



/**
 * Logs messages with the specified severity-level.
 */
declare function Titanium$API$log(level: string, message: string): void



/**
 * Logs messages with a `timestamp` severity-level, prefixed with a timestamp float number
 * representing the number of seconds since January 1st, 2001.
 */
declare function Titanium$API$timestamp(message: $ReadOnlyArray<string>): void



/**
 * Logs messages with a `timestamp` severity-level, prefixed with a timestamp float number
 * representing the number of seconds since January 1st, 2001.
 */
declare function Titanium$API$timestamp(message: string): void



/**
 * Logs messages with a `trace` severity-level.
 */
declare function Titanium$API$trace(message: $ReadOnlyArray<string>): void



/**
 * Logs messages with a `trace` severity-level.
 */
declare function Titanium$API$trace(message: string): void



/**
 * Logs messages with a `warn` severity-level.
 */
declare function Titanium$API$warn(message: $ReadOnlyArray<string>): void



/**
 * Logs messages with a `warn` severity-level.
 */
declare function Titanium$API$warn(message: string): void



/**
 * Gets the value of the <Titanium.API.bubbleParent> property.
 */
declare function Titanium$API$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.API.bubbleParent> property.
 */
declare function Titanium$API$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.API.apiName> property.
 */
declare function Titanium$API$getApiName(): string



/**
 * Gets the value of the <Titanium.API.lifecycleContainer> property.
 */
declare function Titanium$API$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.API.lifecycleContainer> property.
 */
declare function Titanium$API$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.API.lifecycleContainer> property.
 */
declare function Titanium$API$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



      declare var npm$namespace$Titanium$Accelerometer: {
        addEventListener: typeof Titanium$Accelerometer$addEventListener,
removeEventListener: typeof Titanium$Accelerometer$removeEventListener,
fireEvent: typeof Titanium$Accelerometer$fireEvent,
applyProperties: typeof Titanium$Accelerometer$applyProperties,
getBubbleParent: typeof Titanium$Accelerometer$getBubbleParent,
setBubbleParent: typeof Titanium$Accelerometer$setBubbleParent,
getApiName: typeof Titanium$Accelerometer$getApiName,
getLifecycleContainer: typeof Titanium$Accelerometer$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Accelerometer$setLifecycleContainer,
        bubbleParent: typeof Titanium$Accelerometer$bubbleParent,
apiName: typeof Titanium$Accelerometer$apiName,
lifecycleContainer: typeof Titanium$Accelerometer$lifecycleContainer,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Accelerometer$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Accelerometer$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Accelerometer$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Accelerometer$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Accelerometer$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Accelerometer$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Accelerometer$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.Accelerometer.bubbleParent> property.
 */
declare function Titanium$Accelerometer$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Accelerometer.bubbleParent> property.
 */
declare function Titanium$Accelerometer$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Accelerometer.apiName> property.
 */
declare function Titanium$Accelerometer$getApiName(): string



/**
 * Gets the value of the <Titanium.Accelerometer.lifecycleContainer> property.
 */
declare function Titanium$Accelerometer$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Accelerometer.lifecycleContainer> property.
 */
declare function Titanium$Accelerometer$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Accelerometer.lifecycleContainer> property.
 */
declare function Titanium$Accelerometer$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



      declare var npm$namespace$Titanium$Analytics: {
        addEvent: typeof Titanium$Analytics$addEvent,
featureEvent: typeof Titanium$Analytics$featureEvent,
filterEvents: typeof Titanium$Analytics$filterEvents,
navEvent: typeof Titanium$Analytics$navEvent,
settingsEvent: typeof Titanium$Analytics$settingsEvent,
timedEvent: typeof Titanium$Analytics$timedEvent,
userEvent: typeof Titanium$Analytics$userEvent,
getBubbleParent: typeof Titanium$Analytics$getBubbleParent,
setBubbleParent: typeof Titanium$Analytics$setBubbleParent,
getApiName: typeof Titanium$Analytics$getApiName,
getLifecycleContainer: typeof Titanium$Analytics$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Analytics$setLifecycleContainer,
getLastEvent: typeof Titanium$Analytics$getLastEvent,
getOptedOut: typeof Titanium$Analytics$getOptedOut,
setOptedOut: typeof Titanium$Analytics$setOptedOut,
        bubbleParent: typeof Titanium$Analytics$bubbleParent,
apiName: typeof Titanium$Analytics$apiName,
lifecycleContainer: typeof Titanium$Analytics$lifecycleContainer,
lastEvent: typeof Titanium$Analytics$lastEvent,
optedOut: typeof Titanium$Analytics$optedOut,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Analytics$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Analytics$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Analytics$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * JSON representation of the last Analytics event generated.
 */
declare var Titanium$Analytics$lastEvent: string;


/**
 * Allows the user to opt out from Analytics during runtime to comply to GPDR.
 */
declare var Titanium$Analytics$optedOut: boolean;


/**
 * Sends a generic event for this application session.
 * **Not displayed in Analytics UI**.
 */
declare function Titanium$Analytics$addEvent(type: string, name: string, data?: any): void



/**
 * Sends a feature event for this application session.
 */
declare function Titanium$Analytics$featureEvent(name: string, data?: any): number



/**
 * Sets a list of events that will not be sent to the Analytics server.
 */
declare function Titanium$Analytics$filterEvents(events: $ReadOnlyArray<string>): void



/**
 * Sends a navigation event for this application session.
 * **Not displayed in Analytics UI**.
 */
declare function Titanium$Analytics$navEvent(from: string, to: string, name?: string, data?: any): void



/**
 * Sends a settings event for this application session.
 * **Not displayed in Analytics UI**.
 */
declare function Titanium$Analytics$settingsEvent(name: string, data?: any): void



/**
 * Send a timed event for this application session.
 * **Not displayed in Analytics UI**.
 */
declare function Titanium$Analytics$timedEvent(name: string, start: Date, stop: Date, duration: number, data?: any): void



/**
 * Sends a user event for this application session. **Not displayed in Analytics UI**.
 */
declare function Titanium$Analytics$userEvent(name: string, data?: any): void



/**
 * Gets the value of the <Titanium.Analytics.bubbleParent> property.
 */
declare function Titanium$Analytics$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Analytics.bubbleParent> property.
 */
declare function Titanium$Analytics$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Analytics.apiName> property.
 */
declare function Titanium$Analytics$getApiName(): string



/**
 * Gets the value of the <Titanium.Analytics.lifecycleContainer> property.
 */
declare function Titanium$Analytics$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Analytics.lifecycleContainer> property.
 */
declare function Titanium$Analytics$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Analytics.lifecycleContainer> property.
 */
declare function Titanium$Analytics$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.Analytics.lastEvent> property.
 */
declare function Titanium$Analytics$getLastEvent(): string



/**
 * Gets the value of the <Titanium.Analytics.optedOut> property.
 */
declare function Titanium$Analytics$getOptedOut(): boolean



/**
 * Sets the value of the <Titanium.Analytics.optedOut> property.
 */
declare function Titanium$Analytics$setOptedOut(optedOut: boolean): void



      declare var npm$namespace$Titanium$Android: {
        addEventListener: typeof Titanium$Android$addEventListener,
removeEventListener: typeof Titanium$Android$removeEventListener,
fireEvent: typeof Titanium$Android$fireEvent,
applyProperties: typeof Titanium$Android$applyProperties,
createIntentChooser: typeof Titanium$Android$createIntentChooser,
createPendingIntent: typeof Titanium$Android$createPendingIntent,
createService: typeof Titanium$Android$createService,
createServiceIntent: typeof Titanium$Android$createServiceIntent,
createDrawerLayout: typeof Titanium$Android$createDrawerLayout,
hasPermission: typeof Titanium$Android$hasPermission,
requestPermissions: typeof Titanium$Android$requestPermissions,
isServiceRunning: typeof Titanium$Android$isServiceRunning,
registerBroadcastReceiver: typeof Titanium$Android$registerBroadcastReceiver,
unregisterBroadcastReceiver: typeof Titanium$Android$unregisterBroadcastReceiver,
startService: typeof Titanium$Android$startService,
stopService: typeof Titanium$Android$stopService,
createBroadcastIntent: typeof Titanium$Android$createBroadcastIntent,
getBubbleParent: typeof Titanium$Android$getBubbleParent,
setBubbleParent: typeof Titanium$Android$setBubbleParent,
getApiName: typeof Titanium$Android$getApiName,
getLifecycleContainer: typeof Titanium$Android$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Android$setLifecycleContainer,
createBigPictureStyle: typeof Titanium$Android$createBigPictureStyle,
createBigTextStyle: typeof Titanium$Android$createBigTextStyle,
createBroadcastReceiver: typeof Titanium$Android$createBroadcastReceiver,
createIntent: typeof Titanium$Android$createIntent,
createNotification: typeof Titanium$Android$createNotification,
createNotificationChannel: typeof Titanium$Android$createNotificationChannel,
createQuickSettingsService: typeof Titanium$Android$createQuickSettingsService,
createRemoteViews: typeof Titanium$Android$createRemoteViews,
        bubbleParent: typeof Titanium$Android$bubbleParent,
apiName: typeof Titanium$Android$apiName,
lifecycleContainer: typeof Titanium$Android$lifecycleContainer,
ACTION_AIRPLANE_MODE_CHANGED: typeof Titanium$Android$ACTION_AIRPLANE_MODE_CHANGED,
ACTION_ALL_APPS: typeof Titanium$Android$ACTION_ALL_APPS,
ACTION_ANSWER: typeof Titanium$Android$ACTION_ANSWER,
ACTION_ATTACH_DATA: typeof Titanium$Android$ACTION_ATTACH_DATA,
ACTION_BATTERY_CHANGED: typeof Titanium$Android$ACTION_BATTERY_CHANGED,
ACTION_BATTERY_LOW: typeof Titanium$Android$ACTION_BATTERY_LOW,
ACTION_BATTERY_OKAY: typeof Titanium$Android$ACTION_BATTERY_OKAY,
ACTION_BOOT_COMPLETED: typeof Titanium$Android$ACTION_BOOT_COMPLETED,
ACTION_BUG_REPORT: typeof Titanium$Android$ACTION_BUG_REPORT,
ACTION_CALL: typeof Titanium$Android$ACTION_CALL,
ACTION_CALL_BUTTON: typeof Titanium$Android$ACTION_CALL_BUTTON,
ACTION_CAMERA_BUTTON: typeof Titanium$Android$ACTION_CAMERA_BUTTON,
ACTION_CHOOSER: typeof Titanium$Android$ACTION_CHOOSER,
ACTION_CLOSE_SYSTEM_DIALOGS: typeof Titanium$Android$ACTION_CLOSE_SYSTEM_DIALOGS,
ACTION_CONFIGURATION_CHANGED: typeof Titanium$Android$ACTION_CONFIGURATION_CHANGED,
ACTION_CREATE_SHORTCUT: typeof Titanium$Android$ACTION_CREATE_SHORTCUT,
ACTION_DATE_CHANGED: typeof Titanium$Android$ACTION_DATE_CHANGED,
ACTION_DEFAULT: typeof Titanium$Android$ACTION_DEFAULT,
ACTION_DELETE: typeof Titanium$Android$ACTION_DELETE,
ACTION_DEVICE_STORAGE_LOW: typeof Titanium$Android$ACTION_DEVICE_STORAGE_LOW,
ACTION_DIAL: typeof Titanium$Android$ACTION_DIAL,
ACTION_EDIT: typeof Titanium$Android$ACTION_EDIT,
ACTION_GET_CONTENT: typeof Titanium$Android$ACTION_GET_CONTENT,
ACTION_GTALK_SERVICE_CONNECTED: typeof Titanium$Android$ACTION_GTALK_SERVICE_CONNECTED,
ACTION_GTALK_SERVICE_DISCONNECTED: typeof Titanium$Android$ACTION_GTALK_SERVICE_DISCONNECTED,
ACTION_HEADSET_PLUG: typeof Titanium$Android$ACTION_HEADSET_PLUG,
ACTION_INPUT_METHOD_CHANGED: typeof Titanium$Android$ACTION_INPUT_METHOD_CHANGED,
ACTION_INSERT: typeof Titanium$Android$ACTION_INSERT,
ACTION_INSERT_OR_EDIT: typeof Titanium$Android$ACTION_INSERT_OR_EDIT,
ACTION_MAIN: typeof Titanium$Android$ACTION_MAIN,
ACTION_MANAGE_PACKAGE_STORAGE: typeof Titanium$Android$ACTION_MANAGE_PACKAGE_STORAGE,
ACTION_MEDIA_BAD_REMOVAL: typeof Titanium$Android$ACTION_MEDIA_BAD_REMOVAL,
ACTION_MEDIA_BUTTON: typeof Titanium$Android$ACTION_MEDIA_BUTTON,
ACTION_MEDIA_CHECKING: typeof Titanium$Android$ACTION_MEDIA_CHECKING,
ACTION_MEDIA_EJECT: typeof Titanium$Android$ACTION_MEDIA_EJECT,
ACTION_MEDIA_MOUNTED: typeof Titanium$Android$ACTION_MEDIA_MOUNTED,
ACTION_MEDIA_NOFS: typeof Titanium$Android$ACTION_MEDIA_NOFS,
ACTION_MEDIA_REMOVED: typeof Titanium$Android$ACTION_MEDIA_REMOVED,
ACTION_MEDIA_SCANNER_FINISHED: typeof Titanium$Android$ACTION_MEDIA_SCANNER_FINISHED,
ACTION_MEDIA_SCANNER_SCAN_FILE: typeof Titanium$Android$ACTION_MEDIA_SCANNER_SCAN_FILE,
ACTION_MEDIA_SCANNER_STARTED: typeof Titanium$Android$ACTION_MEDIA_SCANNER_STARTED,
ACTION_MEDIA_SHARED: typeof Titanium$Android$ACTION_MEDIA_SHARED,
ACTION_MEDIA_UNMOUNTABLE: typeof Titanium$Android$ACTION_MEDIA_UNMOUNTABLE,
ACTION_MEDIA_UNMOUNTED: typeof Titanium$Android$ACTION_MEDIA_UNMOUNTED,
ACTION_NEW_OUTGOING_CALL: typeof Titanium$Android$ACTION_NEW_OUTGOING_CALL,
ACTION_PACKAGE_ADDED: typeof Titanium$Android$ACTION_PACKAGE_ADDED,
ACTION_PACKAGE_CHANGED: typeof Titanium$Android$ACTION_PACKAGE_CHANGED,
ACTION_PACKAGE_DATA_CLEARED: typeof Titanium$Android$ACTION_PACKAGE_DATA_CLEARED,
ACTION_PACKAGE_REMOVED: typeof Titanium$Android$ACTION_PACKAGE_REMOVED,
ACTION_PACKAGE_REPLACED: typeof Titanium$Android$ACTION_PACKAGE_REPLACED,
ACTION_PACKAGE_RESTARTED: typeof Titanium$Android$ACTION_PACKAGE_RESTARTED,
ACTION_PICK: typeof Titanium$Android$ACTION_PICK,
ACTION_PICK_ACTIVITY: typeof Titanium$Android$ACTION_PICK_ACTIVITY,
ACTION_POWER_CONNECTED: typeof Titanium$Android$ACTION_POWER_CONNECTED,
ACTION_POWER_DISCONNECTED: typeof Titanium$Android$ACTION_POWER_DISCONNECTED,
ACTION_POWER_USAGE_SUMMARY: typeof Titanium$Android$ACTION_POWER_USAGE_SUMMARY,
ACTION_PROVIDER_CHANGED: typeof Titanium$Android$ACTION_PROVIDER_CHANGED,
ACTION_REBOOT: typeof Titanium$Android$ACTION_REBOOT,
ACTION_RUN: typeof Titanium$Android$ACTION_RUN,
ACTION_SCREEN_OFF: typeof Titanium$Android$ACTION_SCREEN_OFF,
ACTION_SCREEN_ON: typeof Titanium$Android$ACTION_SCREEN_ON,
ACTION_SEARCH: typeof Titanium$Android$ACTION_SEARCH,
ACTION_SEARCH_LONG_PRESS: typeof Titanium$Android$ACTION_SEARCH_LONG_PRESS,
ACTION_SEND: typeof Titanium$Android$ACTION_SEND,
ACTION_SENDTO: typeof Titanium$Android$ACTION_SENDTO,
ACTION_SEND_MULTIPLE: typeof Titanium$Android$ACTION_SEND_MULTIPLE,
ACTION_SET_WALLPAPER: typeof Titanium$Android$ACTION_SET_WALLPAPER,
ACTION_SHUTDOWN: typeof Titanium$Android$ACTION_SHUTDOWN,
ACTION_SYNC: typeof Titanium$Android$ACTION_SYNC,
ACTION_SYSTEM_TUTORIAL: typeof Titanium$Android$ACTION_SYSTEM_TUTORIAL,
ACTION_TIME_CHANGED: typeof Titanium$Android$ACTION_TIME_CHANGED,
ACTION_TIME_TICK: typeof Titanium$Android$ACTION_TIME_TICK,
ACTION_UID_REMOVED: typeof Titanium$Android$ACTION_UID_REMOVED,
ACTION_USER_PRESENT: typeof Titanium$Android$ACTION_USER_PRESENT,
ACTION_VIEW: typeof Titanium$Android$ACTION_VIEW,
ACTION_VOICE_COMMAND: typeof Titanium$Android$ACTION_VOICE_COMMAND,
ACTION_WALLPAPER_CHANGED: typeof Titanium$Android$ACTION_WALLPAPER_CHANGED,
ACTION_WEB_SEARCH: typeof Titanium$Android$ACTION_WEB_SEARCH,
CATEGORY_ALTERNATIVE: typeof Titanium$Android$CATEGORY_ALTERNATIVE,
CATEGORY_BROWSABLE: typeof Titanium$Android$CATEGORY_BROWSABLE,
CATEGORY_DEFAULT: typeof Titanium$Android$CATEGORY_DEFAULT,
CATEGORY_DEVELOPMENT_PREFERENCE: typeof Titanium$Android$CATEGORY_DEVELOPMENT_PREFERENCE,
CATEGORY_EMBED: typeof Titanium$Android$CATEGORY_EMBED,
CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST: typeof Titanium$Android$CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST,
CATEGORY_HOME: typeof Titanium$Android$CATEGORY_HOME,
CATEGORY_INFO: typeof Titanium$Android$CATEGORY_INFO,
CATEGORY_LAUNCHER: typeof Titanium$Android$CATEGORY_LAUNCHER,
CATEGORY_MONKEY: typeof Titanium$Android$CATEGORY_MONKEY,
CATEGORY_OPENABLE: typeof Titanium$Android$CATEGORY_OPENABLE,
CATEGORY_PREFERENCE: typeof Titanium$Android$CATEGORY_PREFERENCE,
CATEGORY_SAMPLE_CODE: typeof Titanium$Android$CATEGORY_SAMPLE_CODE,
CATEGORY_SELECTED_ALTERNATIVE: typeof Titanium$Android$CATEGORY_SELECTED_ALTERNATIVE,
CATEGORY_TAB: typeof Titanium$Android$CATEGORY_TAB,
CATEGORY_TEST: typeof Titanium$Android$CATEGORY_TEST,
CATEGORY_UNIT_TEST: typeof Titanium$Android$CATEGORY_UNIT_TEST,
EXTRA_ALARM_COUNT: typeof Titanium$Android$EXTRA_ALARM_COUNT,
EXTRA_BCC: typeof Titanium$Android$EXTRA_BCC,
EXTRA_CC: typeof Titanium$Android$EXTRA_CC,
EXTRA_DATA_REMOVED: typeof Titanium$Android$EXTRA_DATA_REMOVED,
EXTRA_DONT_KILL_APP: typeof Titanium$Android$EXTRA_DONT_KILL_APP,
EXTRA_EMAIL: typeof Titanium$Android$EXTRA_EMAIL,
EXTRA_INTENT: typeof Titanium$Android$EXTRA_INTENT,
EXTRA_KEY_EVENT: typeof Titanium$Android$EXTRA_KEY_EVENT,
EXTRA_PHONE_NUMBER: typeof Titanium$Android$EXTRA_PHONE_NUMBER,
EXTRA_REPLACING: typeof Titanium$Android$EXTRA_REPLACING,
EXTRA_SHORTCUT_ICON: typeof Titanium$Android$EXTRA_SHORTCUT_ICON,
EXTRA_SHORTCUT_ICON_RESOURCE: typeof Titanium$Android$EXTRA_SHORTCUT_ICON_RESOURCE,
EXTRA_SHORTCUT_INTENT: typeof Titanium$Android$EXTRA_SHORTCUT_INTENT,
EXTRA_SHORTCUT_NAME: typeof Titanium$Android$EXTRA_SHORTCUT_NAME,
EXTRA_STREAM: typeof Titanium$Android$EXTRA_STREAM,
EXTRA_SUBJECT: typeof Titanium$Android$EXTRA_SUBJECT,
EXTRA_TEMPLATE: typeof Titanium$Android$EXTRA_TEMPLATE,
EXTRA_TEXT: typeof Titanium$Android$EXTRA_TEXT,
EXTRA_TITLE: typeof Titanium$Android$EXTRA_TITLE,
EXTRA_UID: typeof Titanium$Android$EXTRA_UID,
FILL_IN_ACTION: typeof Titanium$Android$FILL_IN_ACTION,
FILL_IN_CATEGORIES: typeof Titanium$Android$FILL_IN_CATEGORIES,
FILL_IN_COMPONENT: typeof Titanium$Android$FILL_IN_COMPONENT,
FILL_IN_DATA: typeof Titanium$Android$FILL_IN_DATA,
FILL_IN_PACKAGE: typeof Titanium$Android$FILL_IN_PACKAGE,
FLAG_ACTIVITY_BROUGHT_TO_FRONT: typeof Titanium$Android$FLAG_ACTIVITY_BROUGHT_TO_FRONT,
FLAG_ACTIVITY_CLEAR_TOP: typeof Titanium$Android$FLAG_ACTIVITY_CLEAR_TOP,
FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET: typeof Titanium$Android$FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET,
FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS: typeof Titanium$Android$FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS,
FLAG_ACTIVITY_FORWARD_RESULT: typeof Titanium$Android$FLAG_ACTIVITY_FORWARD_RESULT,
FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY: typeof Titanium$Android$FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY,
FLAG_ACTIVITY_MULTIPLE_TASK: typeof Titanium$Android$FLAG_ACTIVITY_MULTIPLE_TASK,
FLAG_ACTIVITY_NEW_TASK: typeof Titanium$Android$FLAG_ACTIVITY_NEW_TASK,
FLAG_ACTIVITY_NO_ANIMATION: typeof Titanium$Android$FLAG_ACTIVITY_NO_ANIMATION,
FLAG_ACTIVITY_NO_HISTORY: typeof Titanium$Android$FLAG_ACTIVITY_NO_HISTORY,
FLAG_ACTIVITY_NO_USER_ACTION: typeof Titanium$Android$FLAG_ACTIVITY_NO_USER_ACTION,
FLAG_ACTIVITY_PREVIOUS_IS_TOP: typeof Titanium$Android$FLAG_ACTIVITY_PREVIOUS_IS_TOP,
FLAG_ACTIVITY_REORDER_TO_FRONT: typeof Titanium$Android$FLAG_ACTIVITY_REORDER_TO_FRONT,
FLAG_ACTIVITY_RESET_TASK_IF_NEEDED: typeof Titanium$Android$FLAG_ACTIVITY_RESET_TASK_IF_NEEDED,
FLAG_ACTIVITY_SINGLE_TOP: typeof Titanium$Android$FLAG_ACTIVITY_SINGLE_TOP,
FLAG_DEBUG_LOG_RESOLUTION: typeof Titanium$Android$FLAG_DEBUG_LOG_RESOLUTION,
FLAG_FROM_BACKGROUND: typeof Titanium$Android$FLAG_FROM_BACKGROUND,
FLAG_GRANT_READ_URI_PERMISSION: typeof Titanium$Android$FLAG_GRANT_READ_URI_PERMISSION,
FLAG_GRANT_WRITE_URI_PERMISSION: typeof Titanium$Android$FLAG_GRANT_WRITE_URI_PERMISSION,
FLAG_RECEIVER_REGISTERED_ONLY: typeof Titanium$Android$FLAG_RECEIVER_REGISTERED_ONLY,
FLAG_CANCEL_CURRENT: typeof Titanium$Android$FLAG_CANCEL_CURRENT,
FLAG_NO_CREATE: typeof Titanium$Android$FLAG_NO_CREATE,
FLAG_ONE_SHOT: typeof Titanium$Android$FLAG_ONE_SHOT,
FLAG_UPDATE_CURRENT: typeof Titanium$Android$FLAG_UPDATE_CURRENT,
CATEGORY_ALARM: typeof Titanium$Android$CATEGORY_ALARM,
CATEGORY_CALL: typeof Titanium$Android$CATEGORY_CALL,
CATEGORY_EMAIL: typeof Titanium$Android$CATEGORY_EMAIL,
CATEGORY_ERROR: typeof Titanium$Android$CATEGORY_ERROR,
CATEGORY_EVENT: typeof Titanium$Android$CATEGORY_EVENT,
CATEGORY_MESSAGE: typeof Titanium$Android$CATEGORY_MESSAGE,
CATEGORY_PROGRESS: typeof Titanium$Android$CATEGORY_PROGRESS,
CATEGORY_PROMO: typeof Titanium$Android$CATEGORY_PROMO,
CATEGORY_RECOMMENDATION: typeof Titanium$Android$CATEGORY_RECOMMENDATION,
CATEGORY_SERVICE: typeof Titanium$Android$CATEGORY_SERVICE,
CATEGORY_SOCIAL: typeof Titanium$Android$CATEGORY_SOCIAL,
CATEGORY_STATUS: typeof Titanium$Android$CATEGORY_STATUS,
CATEGORY_TRANSPORT: typeof Titanium$Android$CATEGORY_TRANSPORT,
DEFAULT_ALL: typeof Titanium$Android$DEFAULT_ALL,
DEFAULT_LIGHTS: typeof Titanium$Android$DEFAULT_LIGHTS,
DEFAULT_SOUND: typeof Titanium$Android$DEFAULT_SOUND,
DEFAULT_VIBRATE: typeof Titanium$Android$DEFAULT_VIBRATE,
FLAG_AUTO_CANCEL: typeof Titanium$Android$FLAG_AUTO_CANCEL,
FLAG_INSISTENT: typeof Titanium$Android$FLAG_INSISTENT,
FLAG_NO_CLEAR: typeof Titanium$Android$FLAG_NO_CLEAR,
FLAG_ONGOING_EVENT: typeof Titanium$Android$FLAG_ONGOING_EVENT,
FLAG_ONLY_ALERT_ONCE: typeof Titanium$Android$FLAG_ONLY_ALERT_ONCE,
FLAG_SHOW_LIGHTS: typeof Titanium$Android$FLAG_SHOW_LIGHTS,
PRIORITY_MAX: typeof Titanium$Android$PRIORITY_MAX,
PRIORITY_HIGH: typeof Titanium$Android$PRIORITY_HIGH,
PRIORITY_DEFAULT: typeof Titanium$Android$PRIORITY_DEFAULT,
PRIORITY_LOW: typeof Titanium$Android$PRIORITY_LOW,
PRIORITY_MIN: typeof Titanium$Android$PRIORITY_MIN,
VISIBILITY_PRIVATE: typeof Titanium$Android$VISIBILITY_PRIVATE,
VISIBILITY_PUBLIC: typeof Titanium$Android$VISIBILITY_PUBLIC,
VISIBILITY_SECRET: typeof Titanium$Android$VISIBILITY_SECRET,
TILE_STATE_UNAVAILABLE: typeof Titanium$Android$TILE_STATE_UNAVAILABLE,
TILE_STATE_INACTIVE: typeof Titanium$Android$TILE_STATE_INACTIVE,
TILE_STATE_ACTIVE: typeof Titanium$Android$TILE_STATE_ACTIVE,
WAKE_LOCK_PARTIAL: typeof Titanium$Android$WAKE_LOCK_PARTIAL,
WAKE_LOCK_FULL: typeof Titanium$Android$WAKE_LOCK_FULL,
WAKE_LOCK_SCREEN_DIM: typeof Titanium$Android$WAKE_LOCK_SCREEN_DIM,
WAKE_LOCK_SCREEN_BRIGHT: typeof Titanium$Android$WAKE_LOCK_SCREEN_BRIGHT,
WAKE_LOCK_ACQUIRE_CAUSES_WAKEUP: typeof Titanium$Android$WAKE_LOCK_ACQUIRE_CAUSES_WAKEUP,
WAKE_LOCK_ON_AFTER_RELEASE: typeof Titanium$Android$WAKE_LOCK_ON_AFTER_RELEASE,
PENDING_INTENT_FOR_ACTIVITY: typeof Titanium$Android$PENDING_INTENT_FOR_ACTIVITY,
PENDING_INTENT_FOR_BROADCAST: typeof Titanium$Android$PENDING_INTENT_FOR_BROADCAST,
PENDING_INTENT_FOR_SERVICE: typeof Titanium$Android$PENDING_INTENT_FOR_SERVICE,
PENDING_INTENT_MAX_VALUE: typeof Titanium$Android$PENDING_INTENT_MAX_VALUE,
RESULT_CANCELED: typeof Titanium$Android$RESULT_CANCELED,
RESULT_FIRST_USER: typeof Titanium$Android$RESULT_FIRST_USER,
RESULT_OK: typeof Titanium$Android$RESULT_OK,
SCREEN_ORIENTATION_BEHIND: typeof Titanium$Android$SCREEN_ORIENTATION_BEHIND,
SCREEN_ORIENTATION_LANDSCAPE: typeof Titanium$Android$SCREEN_ORIENTATION_LANDSCAPE,
SCREEN_ORIENTATION_NOSENSOR: typeof Titanium$Android$SCREEN_ORIENTATION_NOSENSOR,
SCREEN_ORIENTATION_PORTRAIT: typeof Titanium$Android$SCREEN_ORIENTATION_PORTRAIT,
SCREEN_ORIENTATION_SENSOR: typeof Titanium$Android$SCREEN_ORIENTATION_SENSOR,
SCREEN_ORIENTATION_UNSPECIFIED: typeof Titanium$Android$SCREEN_ORIENTATION_UNSPECIFIED,
SCREEN_ORIENTATION_USER: typeof Titanium$Android$SCREEN_ORIENTATION_USER,
SHOW_AS_ACTION_ALWAYS: typeof Titanium$Android$SHOW_AS_ACTION_ALWAYS,
SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW: typeof Titanium$Android$SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW,
SHOW_AS_ACTION_IF_ROOM: typeof Titanium$Android$SHOW_AS_ACTION_IF_ROOM,
SHOW_AS_ACTION_NEVER: typeof Titanium$Android$SHOW_AS_ACTION_NEVER,
SHOW_AS_ACTION_WITH_TEXT: typeof Titanium$Android$SHOW_AS_ACTION_WITH_TEXT,
NAVIGATION_MODE_STANDARD: typeof Titanium$Android$NAVIGATION_MODE_STANDARD,
NAVIGATION_MODE_TABS: typeof Titanium$Android$NAVIGATION_MODE_TABS,
START_NOT_STICKY: typeof Titanium$Android$START_NOT_STICKY,
START_REDELIVER_INTENT: typeof Titanium$Android$START_REDELIVER_INTENT,
STREAM_ALARM: typeof Titanium$Android$STREAM_ALARM,
STREAM_DEFAULT: typeof Titanium$Android$STREAM_DEFAULT,
STREAM_MUSIC: typeof Titanium$Android$STREAM_MUSIC,
STREAM_NOTIFICATION: typeof Titanium$Android$STREAM_NOTIFICATION,
STREAM_RING: typeof Titanium$Android$STREAM_RING,
STREAM_SYSTEM: typeof Titanium$Android$STREAM_SYSTEM,
STREAM_VOICE_CALL: typeof Titanium$Android$STREAM_VOICE_CALL,
URI_INTENT_SCHEME: typeof Titanium$Android$URI_INTENT_SCHEME,
IMPORTANCE_DEFAULT: typeof Titanium$Android$IMPORTANCE_DEFAULT,
IMPORTANCE_HIGH: typeof Titanium$Android$IMPORTANCE_HIGH,
IMPORTANCE_LOW: typeof Titanium$Android$IMPORTANCE_LOW,
IMPORTANCE_MAX: typeof Titanium$Android$IMPORTANCE_MAX,
IMPORTANCE_MIN: typeof Titanium$Android$IMPORTANCE_MIN,
IMPORTANCE_NONE: typeof Titanium$Android$IMPORTANCE_NONE,
IMPORTANCE_UNSPECIFIED: typeof Titanium$Android$IMPORTANCE_UNSPECIFIED,
currentActivity: typeof Titanium$Android$currentActivity,
currentService: typeof Titanium$Android$currentService,
rootActivity: typeof Titanium$Android$rootActivity,
        
        
        Calendar: typeof npm$namespace$Titanium$Android$Calendar,
NotificationManager: typeof npm$namespace$Titanium$Android$NotificationManager,
R: typeof npm$namespace$Titanium$Android$R,
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Android$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Android$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Android$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * User switched airplane mode on or off.
 */
declare var Titanium$Android$ACTION_AIRPLANE_MODE_CHANGED: string;


/**
 * List all applications.
 */
declare var Titanium$Android$ACTION_ALL_APPS: string;


/**
 * Handle an incoming phone call.
 */
declare var Titanium$Android$ACTION_ANSWER: string;


/**
 * Used to indicate that the data is an attachment.
 */
declare var Titanium$Android$ACTION_ATTACH_DATA: string;


/**
 * Listen to battery state change status.
 */
declare var Titanium$Android$ACTION_BATTERY_CHANGED: string;


/**
 * Indicates low battery condition on the device.
 */
declare var Titanium$Android$ACTION_BATTERY_LOW: string;


/**
 * Inidicates the battery is now okay after being low.
 */
declare var Titanium$Android$ACTION_BATTERY_OKAY: string;


/**
 * Indicates the system has finished booting.
 */
declare var Titanium$Android$ACTION_BOOT_COMPLETED: string;


/**
 * Show activity for reporting a bug.
 */
declare var Titanium$Android$ACTION_BUG_REPORT: string;


/**
 * Perform a call to someone specified by the `data` property.
 */
declare var Titanium$Android$ACTION_CALL: string;


/**
 * User pressed the call button.
 */
declare var Titanium$Android$ACTION_CALL_BUTTON: string;


/**
 * The camera button was pressed.
 */
declare var Titanium$Android$ACTION_CAMERA_BUTTON: string;


/**
 * Display an activity chooser.
 */
declare var Titanium$Android$ACTION_CHOOSER: string;


/**
 * User dismissed a temporary system dialog, such as the notification drawer or recent-app drawer.
 */
declare var Titanium$Android$ACTION_CLOSE_SYSTEM_DIALOGS: string;


/**
 * The device's configuration changed.
 */
declare var Titanium$Android$ACTION_CONFIGURATION_CHANGED: string;


/**
 * Create a shortcut.
 */
declare var Titanium$Android$ACTION_CREATE_SHORTCUT: string;


/**
 * Date changed.
 */
declare var Titanium$Android$ACTION_DATE_CHANGED: string;


/**
 * Default action, which is `Titanium.Android.ACTION_VIEW`
 */
declare var Titanium$Android$ACTION_DEFAULT: string;


/**
 * Delete the data specified by the Intent's `data` property.
 */
declare var Titanium$Android$ACTION_DELETE: string;


/**
 * Indicates a low memory condition on the device.
 */
declare var Titanium$Android$ACTION_DEVICE_STORAGE_LOW: string;


/**
 * Dial a number specified by the Intent's `data` property.
 */
declare var Titanium$Android$ACTION_DIAL: string;


/**
 * Provide editable access to the data specified by the Intent's `data` property.
 */
declare var Titanium$Android$ACTION_EDIT: string;


/**
 * Allow the user to select a particular kind of data specified by the Intent's `type` property.
 */
declare var Titanium$Android$ACTION_GET_CONTENT: string;


/**
 * GTalk connection has been established.
 */
declare var Titanium$Android$ACTION_GTALK_SERVICE_CONNECTED: string;


/**
 * GTalk connection has been disconnected.
 */
declare var Titanium$Android$ACTION_GTALK_SERVICE_DISCONNECTED: string;


/**
 * A wired headset has been plugged in or unplugged.
 */
declare var Titanium$Android$ACTION_HEADSET_PLUG: string;


/**
 * An input method has been changed.
 */
declare var Titanium$Android$ACTION_INPUT_METHOD_CHANGED: string;


/**
 * Insert an empty item into the given container.
 */
declare var Titanium$Android$ACTION_INSERT: string;


/**
 * Pick an existing item or insert an empty item, then edit it.
 */
declare var Titanium$Android$ACTION_INSERT_OR_EDIT: string;


/**
 * Start as the main entry point.
 */
declare var Titanium$Android$ACTION_MAIN: string;


/**
 * Indicates low memory condition notification acknowledged by user and package management should be started.
 */
declare var Titanium$Android$ACTION_MANAGE_PACKAGE_STORAGE: string;


/**
 * External media was removed from SD card slot, but mount point was not unmounted.
 */
declare var Titanium$Android$ACTION_MEDIA_BAD_REMOVAL: string;


/**
 * The media button was pressed.
 */
declare var Titanium$Android$ACTION_MEDIA_BUTTON: string;


/**
 * External media is present and being disk-checked.
 */
declare var Titanium$Android$ACTION_MEDIA_CHECKING: string;


/**
 * User has expressed the desire to remove the external storage media.
 */
declare var Titanium$Android$ACTION_MEDIA_EJECT: string;


/**
 * External media is present and mounted at its mount point.
 */
declare var Titanium$Android$ACTION_MEDIA_MOUNTED: string;


/**
 * External media is present, but is using an incompatible filesystem or is blank.
 */
declare var Titanium$Android$ACTION_MEDIA_NOFS: string;


/**
 * External media has been removed.
 */
declare var Titanium$Android$ACTION_MEDIA_REMOVED: string;


/**
 * The media scanner has finished scanning a directory.
 */
declare var Titanium$Android$ACTION_MEDIA_SCANNER_FINISHED: string;


/**
 * Request the media scanner to scan a file and add it to the media database.
 */
declare var Titanium$Android$ACTION_MEDIA_SCANNER_SCAN_FILE: string;


/**
 * The media scanner has started scanning a directory.
 */
declare var Titanium$Android$ACTION_MEDIA_SCANNER_STARTED: string;


/**
 * External media is unmounted because it is being shared via USB mass storage.
 */
declare var Titanium$Android$ACTION_MEDIA_SHARED: string;


/**
 * Corresponds to the Android `Intent.ACTION_MEDIA_UNMOUNTABLE` constant.
 */
declare var Titanium$Android$ACTION_MEDIA_UNMOUNTABLE: string;


/**
 * External media is present, but not mounted at its mount point.
 */
declare var Titanium$Android$ACTION_MEDIA_UNMOUNTED: string;


/**
 * An outgoing call is about to be placed.
 */
declare var Titanium$Android$ACTION_NEW_OUTGOING_CALL: string;


/**
 * A new application package has been installed on the device.
 */
declare var Titanium$Android$ACTION_PACKAGE_ADDED: string;


/**
 * An existing application package has been changed.
 */
declare var Titanium$Android$ACTION_PACKAGE_CHANGED: string;


/**
 * The user has cleared the data of a package.
 */
declare var Titanium$Android$ACTION_PACKAGE_DATA_CLEARED: string;


/**
 * An existing application package has been removed from the device.
 */
declare var Titanium$Android$ACTION_PACKAGE_REMOVED: string;


/**
 * A new version of an application package has been installed, replacing an existing version that was previously installed.
 */
declare var Titanium$Android$ACTION_PACKAGE_REPLACED: string;


/**
 * The user has restarted a package, and all of its processes have been killed.
 */
declare var Titanium$Android$ACTION_PACKAGE_RESTARTED: string;


/**
 * Pick an item from the directory indicated by the Intent's `data` property.
 */
declare var Titanium$Android$ACTION_PICK: string;


/**
 * Pick an activity given an intent.
 */
declare var Titanium$Android$ACTION_PICK_ACTIVITY: string;


/**
 * External power has been connected to the device.
 */
declare var Titanium$Android$ACTION_POWER_CONNECTED: string;


/**
 * External power has been disconnected from the device.
 */
declare var Titanium$Android$ACTION_POWER_DISCONNECTED: string;


/**
 * Show power usage information to the user.
 */
declare var Titanium$Android$ACTION_POWER_USAGE_SUMMARY: string;


/**
 * Content provider published new events or items.
 */
declare var Titanium$Android$ACTION_PROVIDER_CHANGED: string;


/**
 * Device rebooted.
 */
declare var Titanium$Android$ACTION_REBOOT: string;


/**
 * Run the data.
 */
declare var Titanium$Android$ACTION_RUN: string;


/**
 * Sent when the device goes to sleep and becomes non-interactive.
 */
declare var Titanium$Android$ACTION_SCREEN_OFF: string;


/**
 * Sent when the device wakes up and becomes interactive.
 */
declare var Titanium$Android$ACTION_SCREEN_ON: string;


/**
 * Perform a search.
 */
declare var Titanium$Android$ACTION_SEARCH: string;


/**
 * Start action associated with long pressing on the search key.
 */
declare var Titanium$Android$ACTION_SEARCH_LONG_PRESS: string;


/**
 * Deliver data to another activity.
 */
declare var Titanium$Android$ACTION_SEND: string;


/**
 * Deliver data to the recipient specified by the Intent's `data` property.
 */
declare var Titanium$Android$ACTION_SENDTO: string;


/**
 * Deliver multiple data to another activity.
 */
declare var Titanium$Android$ACTION_SEND_MULTIPLE: string;


/**
 * Show settings for choosing the system wallpaper.
 */
declare var Titanium$Android$ACTION_SET_WALLPAPER: string;


/**
 * Device is shutting down.
 */
declare var Titanium$Android$ACTION_SHUTDOWN: string;


/**
 * Perform data synchronization.
 */
declare var Titanium$Android$ACTION_SYNC: string;


/**
 * Start the platform-defined tutorial.
 */
declare var Titanium$Android$ACTION_SYSTEM_TUTORIAL: string;


/**
 * The time was set.
 */
declare var Titanium$Android$ACTION_TIME_CHANGED: string;


/**
 * The current time changed.  Sent every minute.
 */
declare var Titanium$Android$ACTION_TIME_TICK: string;


/**
 * A user ID was removed from the system.
 */
declare var Titanium$Android$ACTION_UID_REMOVED: string;


/**
 * Sent when the user is present after device wakes up.
 */
declare var Titanium$Android$ACTION_USER_PRESENT: string;


/**
 * Display data to the user.
 */
declare var Titanium$Android$ACTION_VIEW: string;


/**
 * Start voice command.
 */
declare var Titanium$Android$ACTION_VOICE_COMMAND: string;


/**
 * The current system wallpaper has changed.
 */
declare var Titanium$Android$ACTION_WALLPAPER_CHANGED: string;


/**
 * Perform a web search.
 */
declare var Titanium$Android$ACTION_WEB_SEARCH: string;


/**
 * Set if the activity should be considered as an alternative action to the data the user is currently viewing.
 */
declare var Titanium$Android$CATEGORY_ALTERNATIVE: string;


/**
 * Activity can browse the Internet.
 */
declare var Titanium$Android$CATEGORY_BROWSABLE: string;


/**
 * Activity should be used as the default action to perform on a piece of data.
 */
declare var Titanium$Android$CATEGORY_DEFAULT: string;


/**
 * Activity is in the development preference panel.
 */
declare var Titanium$Android$CATEGORY_DEVELOPMENT_PREFERENCE: string;


/**
 * Activity can run inside a parent activity.
 */
declare var Titanium$Android$CATEGORY_EMBED: string;


/**
 * To be used as test code for framework instrumentation tests.
 */
declare var Titanium$Android$CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST: string;


/**
 * Home activity, the first activity that is displayed when the device boots.
 */
declare var Titanium$Android$CATEGORY_HOME: string;


/**
 * Provides information about the package it is in.
 */
declare var Titanium$Android$CATEGORY_INFO: string;


/**
 * Activity is in the device's launcher.
 */
declare var Titanium$Android$CATEGORY_LAUNCHER: string;


/**
 * This activity may be exercised by the monkey or other automated test tools.
 */
declare var Titanium$Android$CATEGORY_MONKEY: string;


/**
 * Activity can open raw `file://` or `scheme://` URIs.
 */
declare var Titanium$Android$CATEGORY_OPENABLE: string;


/**
 * This activity is a preference panel.
 */
declare var Titanium$Android$CATEGORY_PREFERENCE: string;


/**
 * To be used as a sample code example (not part of the normal user experience).
 */
declare var Titanium$Android$CATEGORY_SAMPLE_CODE: string;


/**
 * Activity should be considered as an alternative selection action to the data the user
 * has currently selected.
 */
declare var Titanium$Android$CATEGORY_SELECTED_ALTERNATIVE: string;


/**
 * Activity to be used in a tab activity.
 */
declare var Titanium$Android$CATEGORY_TAB: string;


/**
 * To be used as a test (not part of the normal user experience).
 */
declare var Titanium$Android$CATEGORY_TEST: string;


/**
 * To be used as a unit test (run through the Test Harness).
 */
declare var Titanium$Android$CATEGORY_UNIT_TEST: string;


/**
 * Integer indicating how many pending alarms are being delivered with the intent.
 */
declare var Titanium$Android$EXTRA_ALARM_COUNT: string;


/**
 * String array containing e-mail addresses for blind carbon copying.
 */
declare var Titanium$Android$EXTRA_BCC: string;


/**
 * String array containing e-mail addresses for carbon copying.
 */
declare var Titanium$Android$EXTRA_CC: string;


/**
 * Boolean indicating full uninstall (true) or partial uninstall (false).
 */
declare var Titanium$Android$EXTRA_DATA_REMOVED: string;


/**
 * Boolean indicating to restart the application or not.
 */
declare var Titanium$Android$EXTRA_DONT_KILL_APP: string;


/**
 * String array containing e-mail addresses.
 */
declare var Titanium$Android$EXTRA_EMAIL: string;


/**
 * An Intent describing the choices you would like shown.
 */
declare var Titanium$Android$EXTRA_INTENT: string;


/**
 * A KeyEvent object containing the event that triggered the creation of the Intent it is in.
 */
declare var Titanium$Android$EXTRA_KEY_EVENT: string;


/**
 * String holding the phone number to call or number that was called.
 */
declare var Titanium$Android$EXTRA_PHONE_NUMBER: string;


/**
 * Boolean indicating if the package is being replaced.
 */
declare var Titanium$Android$EXTRA_REPLACING: string;


/**
 * Bitmap icon.
 */
declare var Titanium$Android$EXTRA_SHORTCUT_ICON: string;


/**
 * Resource of the shortcut.
 */
declare var Titanium$Android$EXTRA_SHORTCUT_ICON_RESOURCE: string;


/**
 * Intent of a shortcut.
 */
declare var Titanium$Android$EXTRA_SHORTCUT_INTENT: string;


/**
 * Name of the shortcut.
 */
declare var Titanium$Android$EXTRA_SHORTCUT_NAME: string;


/**
 * URI containing the stream data.
 */
declare var Titanium$Android$EXTRA_STREAM: string;


/**
 * Subject line of a message.
 */
declare var Titanium$Android$EXTRA_SUBJECT: string;


/**
 * Initial data to place in a newly created record.
 */
declare var Titanium$Android$EXTRA_TEMPLATE: string;


/**
 * Corresponds to the Android `Intent.EXTRA_TEXT` constant.
 */
declare var Titanium$Android$EXTRA_TEXT: string;


/**
 * Corresponds to the Android `Intent.EXTRA_TITLE` constant.
 */
declare var Titanium$Android$EXTRA_TITLE: string;


/**
 * UID of the assigned packaged.
 */
declare var Titanium$Android$EXTRA_UID: string;


/**
 * Not used.
 */
declare var Titanium$Android$FILL_IN_ACTION: number;


/**
 * Not used.
 */
declare var Titanium$Android$FILL_IN_CATEGORIES: number;


/**
 * Not used.
 */
declare var Titanium$Android$FILL_IN_COMPONENT: number;


/**
 * Not used.
 */
declare var Titanium$Android$FILL_IN_DATA: number;


/**
 * Not used.
 */
declare var Titanium$Android$FILL_IN_PACKAGE: number;


/**
 * If activity is already running, bring it to the foreground.
 */
declare var Titanium$Android$FLAG_ACTIVITY_BROUGHT_TO_FRONT: number;


/**
 * If the activity is present, removes any activities on top of it to make it the foreground activity.
 */
declare var Titanium$Android$FLAG_ACTIVITY_CLEAR_TOP: number;


/**
 * Corresponds to the Android `Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET` constant.
 */
declare var Titanium$Android$FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET: number;


/**
 * Exclude the activity from recently launched activities.
 */
declare var Titanium$Android$FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS: number;


/**
 * Return result to the original calling activity.
 */
declare var Titanium$Android$FLAG_ACTIVITY_FORWARD_RESULT: number;


/**
 * Activity was launched from history.
 */
declare var Titanium$Android$FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY: number;


/**
 * Start the activity as a new task even if it exists.
 */
declare var Titanium$Android$FLAG_ACTIVITY_MULTIPLE_TASK: number;


/**
 * Activity will be the start of a new task (collection of activities).
 */
declare var Titanium$Android$FLAG_ACTIVITY_NEW_TASK: number;


/**
 * Prevent transition animation.
 */
declare var Titanium$Android$FLAG_ACTIVITY_NO_ANIMATION: number;


/**
 * Do not keep the activity in the history stack.
 */
declare var Titanium$Android$FLAG_ACTIVITY_NO_HISTORY: number;


/**
 * Disables the [onUserLeaveHint()](https://developer.android.com/reference/android/app/Activity.html#onUserLeaveHint()) callback.
 */
declare var Titanium$Android$FLAG_ACTIVITY_NO_USER_ACTION: number;


/**
 * Corresponds to the Android `Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP` constant.
 */
declare var Titanium$Android$FLAG_ACTIVITY_PREVIOUS_IS_TOP: number;


/**
 * If the activity already exists, place it at the top of the history stack.
 */
declare var Titanium$Android$FLAG_ACTIVITY_REORDER_TO_FRONT: number;


/**
 * If the task already exists, resets the task to its initial state.
 */
declare var Titanium$Android$FLAG_ACTIVITY_RESET_TASK_IF_NEEDED: number;


/**
 * Do not launch the activity if it is already running.
 */
declare var Titanium$Android$FLAG_ACTIVITY_SINGLE_TOP: number;


/**
 * Enable a log message to print out the resolution of the intent.
 */
declare var Titanium$Android$FLAG_DEBUG_LOG_RESOLUTION: number;


/**
 * Indicates the intent is coming from a background operation.
 */
declare var Titanium$Android$FLAG_FROM_BACKGROUND: number;


/**
 * Grant read permission on the URI in the Intent's data or clipboard.
 */
declare var Titanium$Android$FLAG_GRANT_READ_URI_PERMISSION: number;


/**
 * Grants write permission on the URI in the Intent's data or clipboard.
 */
declare var Titanium$Android$FLAG_GRANT_WRITE_URI_PERMISSION: number;


/**
 * When sending a broadcast, only registered receivers will be called.
 */
declare var Titanium$Android$FLAG_RECEIVER_REGISTERED_ONLY: number;


/**
 * Cancel the current pending intent before creating a new one.
 */
declare var Titanium$Android$FLAG_CANCEL_CURRENT: number;


/**
 * If the current intent does not exist, do not create it.
 */
declare var Titanium$Android$FLAG_NO_CREATE: number;


/**
 * The pending intent can only be used once.
 */
declare var Titanium$Android$FLAG_ONE_SHOT: number;


/**
 * If the current pending intent already exists, only update the current intent's extra data.
 */
declare var Titanium$Android$FLAG_UPDATE_CURRENT: number;


/**
 * Notification category indicating an alarm or timer.
 */
declare var Titanium$Android$CATEGORY_ALARM: string;


/**
 * Notification category indicating an incoming call (voice or video) or similar synchronous
 * communication request.
 */
declare var Titanium$Android$CATEGORY_CALL: string;


/**
 * Notification category indicating an asynchronous bulk message (email).
 */
declare var Titanium$Android$CATEGORY_EMAIL: string;


/**
 * Notification category indicating an error in background operation or authentication status.
 */
declare var Titanium$Android$CATEGORY_ERROR: string;


/**
 * Notification category indicating a calendar event.
 */
declare var Titanium$Android$CATEGORY_EVENT: string;


/**
 * Notification category indicating an incoming direct message (SMS, instant message, etc.).
 */
declare var Titanium$Android$CATEGORY_MESSAGE: string;


/**
 * Notification category indicating the progress of a long-running background operation.
 */
declare var Titanium$Android$CATEGORY_PROGRESS: string;


/**
 * Notification category indicating a promotion or advertisement.
 */
declare var Titanium$Android$CATEGORY_PROMO: string;


/**
 * Notification category indicating a specific, timely recommendation for a single thing.
 */
declare var Titanium$Android$CATEGORY_RECOMMENDATION: string;


/**
 * Notification category for a running background service.
 */
declare var Titanium$Android$CATEGORY_SERVICE: string;


/**
 * Notification category for a social network or sharing update.
 */
declare var Titanium$Android$CATEGORY_SOCIAL: string;


/**
 * Notification category indicating ongoing information about device or contextual status.
 */
declare var Titanium$Android$CATEGORY_STATUS: string;


/**
 * Notification category indicating media transport control for playback.
 */
declare var Titanium$Android$CATEGORY_TRANSPORT: string;


/**
 * Use all default settings for a notification; see
 * [Notification.defaults](Titanium.Android.Notification.defaults).
 */
declare var Titanium$Android$DEFAULT_ALL: number;


/**
 * Use the default light settings for a notification; see
 * [Notification.defaults](Titanium.Android.Notification.defaults).
 */
declare var Titanium$Android$DEFAULT_LIGHTS: number;


/**
 * Use the default sound settings for a notification; see
 * [Notification.defaults](Titanium.Android.Notification.defaults).
 */
declare var Titanium$Android$DEFAULT_SOUND: number;


/**
 * Use the default vibration settings for a notification; see
 * [Notification.defaults](Titanium.Android.Notification.defaults).
 */
declare var Titanium$Android$DEFAULT_VIBRATE: number;


/**
 * Cancel the notification when it is clicked by the user.
 */
declare var Titanium$Android$FLAG_AUTO_CANCEL: number;


/**
 * Repeat audio until the notification is cancelled or the notification window
 * is opened.
 */
declare var Titanium$Android$FLAG_INSISTENT: number;


/**
 * Do not cancel the notification when the user clicks the Clear All button.
 */
declare var Titanium$Android$FLAG_NO_CLEAR: number;


/**
 * Specifies that a notification is in reference to something that is ongoing, like a phone call.
 */
declare var Titanium$Android$FLAG_ONGOING_EVENT: number;


/**
 * Play an alert (sound, lights, and/or vibration) once each time the notification is sent, even if it has not been canceled before that.
 */
declare var Titanium$Android$FLAG_ONLY_ALERT_ONCE: number;


/**
 * Use LED lights to alert the user to the notification.
 */
declare var Titanium$Android$FLAG_SHOW_LIGHTS: number;


/**
 * Use for urgent or time-critical notifications, for example, turn-by-turn directions or
 * emergency alerts.
 */
declare var Titanium$Android$PRIORITY_MAX: number;


/**
 * Use for high priority notifications like real-time chat messages.
 */
declare var Titanium$Android$PRIORITY_HIGH: number;


/**
 * Default priority if it does not fit into another priority category.
 */
declare var Titanium$Android$PRIORITY_DEFAULT: number;


/**
 * Use for low priority notifications like software updates.
 */
declare var Titanium$Android$PRIORITY_LOW: number;


/**
 * Use for expired events.
 */
declare var Titanium$Android$PRIORITY_MIN: number;


/**
 * Shows basic information about the notification.
 */
declare var Titanium$Android$VISIBILITY_PRIVATE: number;


/**
 * Shows the notification's full content on the lockscreen. This is the system default if visibility is left unspecified.
 */
declare var Titanium$Android$VISIBILITY_PUBLIC: number;


/**
 * Shows the most minimal information of the notification on the lockscreen.
 */
declare var Titanium$Android$VISIBILITY_SECRET: number;


/**
 * QuickSettings tile is unavailble.
 */
declare var Titanium$Android$TILE_STATE_UNAVAILABLE: number;


/**
 * QuickSettings tile is inactive.
 */
declare var Titanium$Android$TILE_STATE_INACTIVE: number;


/**
 * QuickSettings tile is active.
 */
declare var Titanium$Android$TILE_STATE_ACTIVE: number;


/**
 * Ensures that the CPU is running; the screen and keyboard backlight will be allowed to go off.
 */
declare var Titanium$Android$WAKE_LOCK_PARTIAL: number;


/**
 * Ensures that the screen and keyboard backlight are on at full brightness.
 */
declare var Titanium$Android$WAKE_LOCK_FULL: number;


/**
 * Ensures that the screen is on (but may be dimmed); the keyboard backlight will be allowed to go off.
 */
declare var Titanium$Android$WAKE_LOCK_SCREEN_DIM: number;


/**
 * Ensures that the screen is on at full brightness; the keyboard backlight will be allowed to go off.
 */
declare var Titanium$Android$WAKE_LOCK_SCREEN_BRIGHT: number;


/**
 * Turn the screen on when the wake lock is acquired.
 */
declare var Titanium$Android$WAKE_LOCK_ACQUIRE_CAUSES_WAKEUP: number;


/**
 * When this wake lock is released, poke the user activity timer so the screen stays on for a little longer.
 */
declare var Titanium$Android$WAKE_LOCK_ON_AFTER_RELEASE: number;


/**
 * Not used.
 */
declare var Titanium$Android$PENDING_INTENT_FOR_ACTIVITY: number;


/**
 * Not used.
 */
declare var Titanium$Android$PENDING_INTENT_FOR_BROADCAST: number;


/**
 * Not used.
 */
declare var Titanium$Android$PENDING_INTENT_FOR_SERVICE: number;


/**
 * Not used.
 */
declare var Titanium$Android$PENDING_INTENT_MAX_VALUE: number;


/**
 * Used with [setResult](Titanium.Android.Activity.setResult) to specify that
 * an activity was canceled.
 */
declare var Titanium$Android$RESULT_CANCELED: number;


/**
 * Used with [setResult](Titanium.Android.Activity.setResult) to specify a
 * user-defined result.
 */
declare var Titanium$Android$RESULT_FIRST_USER: number;


/**
 * Used with [setResult](Titanium.Android.Activity.setResult) to specify that
 * an activity succeeded.
 */
declare var Titanium$Android$RESULT_OK: number;


/**
 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
 * specify the activity should run in the same orientation as the activity behind it
 * in the activity stack.
 */
declare var Titanium$Android$SCREEN_ORIENTATION_BEHIND: number;


/**
 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
 * specify a landscape screen orientation.
 */
declare var Titanium$Android$SCREEN_ORIENTATION_LANDSCAPE: number;


/**
 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
 * specify that the sensor should be ignored and the display should not rotate.
 */
declare var Titanium$Android$SCREEN_ORIENTATION_NOSENSOR: number;


/**
 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
 * specify a portrait screen orientation.
 */
declare var Titanium$Android$SCREEN_ORIENTATION_PORTRAIT: number;


/**
 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
 * specify that orientation should be determined by the orientation sensor.
 */
declare var Titanium$Android$SCREEN_ORIENTATION_SENSOR: number;


/**
 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
 * specify that the system should use its default rules for determining the best
 * orientation.
 */
declare var Titanium$Android$SCREEN_ORIENTATION_UNSPECIFIED: number;


/**
 * Use with [requestedOrientation](Titanium.Android.Activity.requestedOrientation) to
 * specify that the system should use the user's preferred orientation.
 */
declare var Titanium$Android$SCREEN_ORIENTATION_USER: number;


/**
 * Always show this item as an action button in the action bar.
 */
declare var Titanium$Android$SHOW_AS_ACTION_ALWAYS: number;


/**
 * The action view can collapse to a normal menu item.
 */
declare var Titanium$Android$SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW: number;


/**
 * Show this item as an action button if the system decides there is room for it.
 */
declare var Titanium$Android$SHOW_AS_ACTION_IF_ROOM: number;


/**
 * Never display this item as an action button in the action bar.
 */
declare var Titanium$Android$SHOW_AS_ACTION_NEVER: number;


/**
 * When this item is in the action bar, always show it with a text label.
 */
declare var Titanium$Android$SHOW_AS_ACTION_WITH_TEXT: number;


/**
 * Standard Action Bar navigation mode.
 */
declare var Titanium$Android$NAVIGATION_MODE_STANDARD: number;


/**
 * Action Bar tab navigation mode.
 */
declare var Titanium$Android$NAVIGATION_MODE_TABS: number;


/**
 * A Service start mode indicating that if the host application is stopped by Android, the service should not be restarted automatically.
 */
declare var Titanium$Android$START_NOT_STICKY: number;


/**
 * A Service start mode indicating that if the host application is stopped by Android, the service should be restarted automatically and the original Intent re-sent.
 */
declare var Titanium$Android$START_REDELIVER_INTENT: number;


/**
 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to
 * request that the alarm stream type for notifications be used.
 */
declare var Titanium$Android$STREAM_ALARM: number;


/**
 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to request that the
 * default stream type for notifications be used.
 */
declare var Titanium$Android$STREAM_DEFAULT: number;


/**
 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to
 * request that the music stream type for notifications be used.
 */
declare var Titanium$Android$STREAM_MUSIC: number;


/**
 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to request that the
 * notification stream type for notifications be used.
 */
declare var Titanium$Android$STREAM_NOTIFICATION: number;


/**
 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to request that the
 * ring stream type for notifications be used.
 */
declare var Titanium$Android$STREAM_RING: number;


/**
 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to request that the
 * system stream type for notifications be used.
 */
declare var Titanium$Android$STREAM_SYSTEM: number;


/**
 * Use with [audioStreamType](Titanium.Android.Notification.audioStreamType) to request that the
 * voice call stream type for notifications be used.
 */
declare var Titanium$Android$STREAM_VOICE_CALL: number;


/**
 * The URI scheme used for intent URIs.
 */
declare var Titanium$Android$URI_INTENT_SCHEME: number;


/**
 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
 */
declare var Titanium$Android$IMPORTANCE_DEFAULT: number;


/**
 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
 */
declare var Titanium$Android$IMPORTANCE_HIGH: number;


/**
 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
 */
declare var Titanium$Android$IMPORTANCE_LOW: number;


/**
 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
 */
declare var Titanium$Android$IMPORTANCE_MAX: number;


/**
 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
 */
declare var Titanium$Android$IMPORTANCE_MIN: number;


/**
 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
 */
declare var Titanium$Android$IMPORTANCE_NONE: number;


/**
 * Used with [NotificationChannel](Titanium.Android.NotificationChannel) to specify an importance level.
 */
declare var Titanium$Android$IMPORTANCE_UNSPECIFIED: number;


/**
 * References the top-most window's activity.
 */
declare var Titanium$Android$currentActivity: Titanium$Android$Activity;


/**
 * Service in the active context.
 */
declare var Titanium$Android$currentService: Titanium$Android$Service;


/**
 * The first activity launched by the application.
 */
declare var Titanium$Android$rootActivity: Titanium$Android$Activity;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Android$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Android$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Android$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Android$applyProperties(props: any): void



/**
 * Creates an activity chooser intent, used to allow the user to select a target activity
 * for an intent.
 */
declare function Titanium$Android$createIntentChooser(intent: Titanium$Android$Intent, title: string): Titanium$Android$Intent



/**
 * Creates a [PendingIntent](Titanium.Android.PendingIntent) to be used inside a
 * [Notification](Titanium.Android.Notification).
 */
declare function Titanium$Android$createPendingIntent(parameters?: any): Titanium$Android$PendingIntent



/**
 * Create a <Titanium.Android.Service> so you can start/stop it and listen for events from it.
 */
declare function Titanium$Android$createService(intent: Titanium$Android$Intent): Titanium$Android$Service



/**
 * Create an `Intent` to be used to start a service.
 */
declare function Titanium$Android$createServiceIntent(options: ServiceIntentOptions): Titanium$Android$Intent



/**
 * Creates a [DrawerLayout](Titanium.UI.Android.DrawerLayout).
 */
declare function Titanium$Android$createDrawerLayout(parameters?: any): Titanium$UI$Android$DrawerLayout



/**
 * Returns `true` if the app has permission access.
 */
declare function Titanium$Android$hasPermission(permission: string): boolean



/**
 * Returns `true` if the app has permission access.
 */
declare function Titanium$Android$hasPermission(permission: $ReadOnlyArray<string>): boolean



/**
 * Request for permission access.
 */
declare function Titanium$Android$requestPermissions(
permissions: string,
callback?: (param0: RequestPermissionAccessResult) => any): void



/**
 * Request for permission access.
 */
declare function Titanium$Android$requestPermissions(
permissions: $ReadOnlyArray<string>,
callback?: (param0: RequestPermissionAccessResult) => any): void



/**
 * Check on state of Service.
 */
declare function Titanium$Android$isServiceRunning(intent: Titanium$Android$Intent): boolean



/**
 * Registers broadcast receiver for the given actions.
 */
declare function Titanium$Android$registerBroadcastReceiver(
broadcastReceiver: Titanium$Android$BroadcastReceiver,
actions: $ReadOnlyArray<string>): void



/**
 * Unregisters a broadcast receiver.
 */
declare function Titanium$Android$unregisterBroadcastReceiver(broadcastReceiver: Titanium$Android$BroadcastReceiver): void



/**
 * Starts a simple service.
 */
declare function Titanium$Android$startService(intent: Titanium$Android$Intent): void



/**
 * Stop a simple service that was started with `startService`.
 */
declare function Titanium$Android$stopService(intent: Titanium$Android$Intent): void



/**
 * Create an `Intent` to be used in a broadcast.
 */
declare function Titanium$Android$createBroadcastIntent(parameters?: any): Titanium$Android$Intent



/**
 * Gets the value of the <Titanium.Android.bubbleParent> property.
 */
declare function Titanium$Android$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Android.bubbleParent> property.
 */
declare function Titanium$Android$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Android.apiName> property.
 */
declare function Titanium$Android$getApiName(): string



/**
 * Gets the value of the <Titanium.Android.lifecycleContainer> property.
 */
declare function Titanium$Android$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Android.lifecycleContainer> property.
 */
declare function Titanium$Android$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Android.lifecycleContainer> property.
 */
declare function Titanium$Android$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Creates and returns an instance of <Titanium.Android.BigPictureStyle>.
 */
declare function Titanium$Android$createBigPictureStyle(parameters?: any): Titanium$Android$BigPictureStyle



/**
 * Creates and returns an instance of <Titanium.Android.BigTextStyle>.
 */
declare function Titanium$Android$createBigTextStyle(parameters?: any): Titanium$Android$BigTextStyle



/**
 * Creates and returns an instance of <Titanium.Android.BroadcastReceiver>.
 */
declare function Titanium$Android$createBroadcastReceiver(parameters?: any): Titanium$Android$BroadcastReceiver



/**
 * Creates and returns an instance of <Titanium.Android.Intent>.
 */
declare function Titanium$Android$createIntent(parameters?: any): Titanium$Android$Intent



/**
 * Creates and returns an instance of <Titanium.Android.Notification>.
 */
declare function Titanium$Android$createNotification(parameters?: any): Titanium$Android$Notification



/**
 * Creates and returns an instance of <Titanium.Android.NotificationChannel>.
 */
declare function Titanium$Android$createNotificationChannel(parameters?: any): Titanium$Android$NotificationChannel



/**
 * Creates and returns an instance of <Titanium.Android.QuickSettingsService>.
 */
declare function Titanium$Android$createQuickSettingsService(parameters?: any): Titanium$Android$QuickSettingsService



/**
 * Creates and returns an instance of <Titanium.Android.RemoteViews>.
 */
declare function Titanium$Android$createRemoteViews(parameters?: any): Titanium$Android$RemoteViews



/**
 * An action bar is a window feature that identifies the application and user location,
 * and provides user actions and navigation modes.
 */
declare type Titanium$Android$ActionBar = {

/**
 * The background image for the action bar, specified as a local file path or URL.
 */
backgroundImage: string,

/**
 * Displays an "up" affordance on the "home" area of the action bar.
 */
displayHomeAsUp: boolean,

/**
 * Enable or disable the "home" button in the corner of the action bar.
 */
homeButtonEnabled: boolean,

/**
 * Sets the application icon displayed in the "home" area of the action bar, specified as a local file path or URL.
 */
icon: string,

/**
 * Sets the application logo displayed in the "home" area of the action bar, specified as a local file path or URL.
 */
logo: string,

/**
 * Controls the navigation mode.
 */
navigationMode: number,

/**
 * Callback function called when the home icon is clicked.
 */
onHomeIconItemSelected: () => any,

/**
 * Sets the subtitle of the action bar.
 */
subtitle: string,

/**
 * Sets the title of the action bar.
 */
title: string,

/**
 * Sets a view to be used for a custom navigation mode.
 */
customView: Titanium$UI$View,

/**
 * Hides the action bar if it is currently showing.
 */
hide(): void,

/**
 * Shows or hides the action bar home icon
 */
setDisplayShowHomeEnabled(show: boolean): void,

/**
 * Shows or hides the action bar title/subtitle
 */
setDisplayShowTitleEnabled(show: boolean): void,

/**
 * Shows the action bar if it is currently hidden.
 */
show(): void,

/**
 * Sets the value of the <Titanium.Android.ActionBar.backgroundImage> property.
 */
setBackgroundImage(backgroundImage: string): void,

/**
 * Sets the value of the <Titanium.Android.ActionBar.displayHomeAsUp> property.
 */
setDisplayHomeAsUp(displayHomeAsUp: boolean): void,

/**
 * Sets the value of the <Titanium.Android.ActionBar.homeButtonEnabled> property.
 */
setHomeButtonEnabled(homeButtonEnabled: boolean): void,

/**
 * Sets the value of the <Titanium.Android.ActionBar.icon> property.
 */
setIcon(icon: string): void,

/**
 * Sets the value of the <Titanium.Android.ActionBar.logo> property.
 */
setLogo(logo: string): void,

/**
 * Gets the value of the <Titanium.Android.ActionBar.navigationMode> property.
 */
getNavigationMode(): number,

/**
 * Sets the value of the <Titanium.Android.ActionBar.navigationMode> property.
 */
setNavigationMode(navigationMode: number): void,

/**
 * Sets the value of the <Titanium.Android.ActionBar.onHomeIconItemSelected> property.
 */
setOnHomeIconItemSelected(onHomeIconItemSelected: () => any): void,

/**
 * Gets the value of the <Titanium.Android.ActionBar.subtitle> property.
 */
getSubtitle(): string,

/**
 * Sets the value of the <Titanium.Android.ActionBar.subtitle> property.
 */
setSubtitle(subtitle: string): void,

/**
 * Gets the value of the <Titanium.Android.ActionBar.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.Android.ActionBar.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.Android.ActionBar.customView> property.
 */
getCustomView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.Android.ActionBar.customView> property.
 */
setCustomView(customView: any): void
} & Titanium$Proxy



/**
 * The Titanium binding of an Android Activity.
 */
declare type Titanium$Android$Activity = {

/**
 * The action bar for this activity.
 */
+actionBar: Titanium$Android$ActionBar,

/**
 * The last `Intent` received by this activity.
 */
+intent: Titanium$Android$Intent,

/**
 * Callback function called when the Android activity is created.
 */
onCreate: (param0: any) => any,

/**
 * Callback function called to initially create an Android options menu
 * for this Activity when the user presses the **Menu** button.
 */
onCreateOptionsMenu: (param0: any) => any,

/**
 * Callback function called when the Android activity is destroyed.
 */
onDestroy: (param0: any) => any,

/**
 * Callback function called when the Android activity is paused.
 */
onPause: (param0: any) => any,

/**
 * Callback function called to prepare an options menu for display when the user presses
 * the **Menu** button.
 */
onPrepareOptionsMenu: (param0: any) => any,

/**
 * Callback function called when the Android activity is restarted.
 */
onRestart: (param0: any) => any,

/**
 * Callback function called when the Android activity is resumed.
 */
onResume: (param0: any) => any,

/**
 * Callback function called when the Android activity is started.
 */
onStart: (param0: any) => any,

/**
 * Callback function called when the Android activity is stopped.
 */
onStop: (param0: any) => any,

/**
 * Specifies a specific orientation for this activity.
 */
requestedOrientation: number,

/**
 * Toolbar instance that serves as ActionBar
 */
supportToolbar: Titanium$UI$Toolbar,

/**
 * Closes this activity.
 */
finish(): void,

/**
 * Gets an Android or Application string using the specified Resource ID and optional format arguments.
 */
getString(resourceId: number, format: any): string,

/**
 * Declares that the option menu has changed and should be recreated.
 */
invalidateOptionsMenu(): void,

/**
 * Sets the requested Activity orientation.
 */
setRequestedOrientation(orientation: number): void,

/**
 * Sets the result of this activity using an `Intent`.
 */
setResult(resultCode: number, intent?: Titanium$Android$Intent): void,

/**
 * Sets a toolbar instance to be used as an ActionBar.
 */
setSupportActionBar(toolbar: Titanium$UI$Toolbar): void,

/**
 * Starts a new activity, using the passed in `Intent` as the description.
 */
startActivity(intent: Titanium$Android$Intent): void,

/**
 * The same as `startActivity`, but also accepts a callback function for handling the result of the started Activity.
 */
startActivityForResult(
intent: Titanium$Android$Intent,
callback: (param0: ActivityResult) => any): void,

/**
 * Programmatically opens the options menu.
 */
openOptionsMenu(): void,

/**
 * Broadcast the passed in `Intent` to all `BroadcastReceiver`s.
 */
sendBroadcast(intent: Titanium$Android$Intent): void,

/**
 * Broadcast the passed in `Intent` to all `BroadcastReceiver`s with an optional permission.
 */
sendBroadcastWithPermission(intent: Titanium$Android$Intent, receiverPermission?: string): void,

/**
 * Gets the value of the <Titanium.Android.Activity.actionBar> property.
 */
getActionBar(): Titanium$Android$ActionBar,

/**
 * Gets the value of the <Titanium.Android.Activity.intent> property.
 */
getIntent(): Titanium$Android$Intent,

/**
 * Gets the value of the <Titanium.Android.Activity.onCreate> property.
 */
getOnCreate(): (param0: any) => any,

/**
 * Sets the value of the <Titanium.Android.Activity.onCreate> property.
 */
setOnCreate(onCreate: (param0: any) => any): void,

/**
 * Gets the value of the <Titanium.Android.Activity.onCreateOptionsMenu> property.
 */
getOnCreateOptionsMenu(): (param0: any) => any,

/**
 * Sets the value of the <Titanium.Android.Activity.onCreateOptionsMenu> property.
 */
setOnCreateOptionsMenu(onCreateOptionsMenu: (param0: any) => any): void,

/**
 * Gets the value of the <Titanium.Android.Activity.onDestroy> property.
 */
getOnDestroy(): (param0: any) => any,

/**
 * Sets the value of the <Titanium.Android.Activity.onDestroy> property.
 */
setOnDestroy(onDestroy: (param0: any) => any): void,

/**
 * Gets the value of the <Titanium.Android.Activity.onPause> property.
 */
getOnPause(): (param0: any) => any,

/**
 * Sets the value of the <Titanium.Android.Activity.onPause> property.
 */
setOnPause(onPause: (param0: any) => any): void,

/**
 * Gets the value of the <Titanium.Android.Activity.onPrepareOptionsMenu> property.
 */
getOnPrepareOptionsMenu(): (param0: any) => any,

/**
 * Sets the value of the <Titanium.Android.Activity.onPrepareOptionsMenu> property.
 */
setOnPrepareOptionsMenu(onPrepareOptionsMenu: (param0: any) => any): void,

/**
 * Gets the value of the <Titanium.Android.Activity.onRestart> property.
 */
getOnRestart(): (param0: any) => any,

/**
 * Sets the value of the <Titanium.Android.Activity.onRestart> property.
 */
setOnRestart(onRestart: (param0: any) => any): void,

/**
 * Gets the value of the <Titanium.Android.Activity.onResume> property.
 */
getOnResume(): (param0: any) => any,

/**
 * Sets the value of the <Titanium.Android.Activity.onResume> property.
 */
setOnResume(onResume: (param0: any) => any): void,

/**
 * Gets the value of the <Titanium.Android.Activity.onStart> property.
 */
getOnStart(): (param0: any) => any,

/**
 * Sets the value of the <Titanium.Android.Activity.onStart> property.
 */
setOnStart(onStart: (param0: any) => any): void,

/**
 * Gets the value of the <Titanium.Android.Activity.onStop> property.
 */
getOnStop(): (param0: any) => any,

/**
 * Sets the value of the <Titanium.Android.Activity.onStop> property.
 */
setOnStop(onStop: (param0: any) => any): void,

/**
 * Gets the value of the <Titanium.Android.Activity.supportToolbar> property.
 */
getSupportToolbar(): Titanium$UI$Toolbar,

/**
 * Sets the value of the <Titanium.Android.Activity.supportToolbar> property.
 */
setSupportToolbar(supportToolbar: Titanium$UI$Toolbar): void
} & Titanium$Proxy



/**
 * Helper object for generating large-format notifications that include a large image attachment.
 */
declare type Titanium$Android$BigPictureStyle = {

/**
 * Override the <Titanium.Android.Notification.largeIcon> when the big notification is shown.
 */
bigLargeIcon: number | string,

/**
 * Provide the bitmap to be used as the payload for the BigPicture notification.
 */
bigPicture: number | string | Titanium$Blob | Titanium$Filesystem$File,

/**
 * Overrides <Titanium.Android.Notification.contentTitle> in the big form of the notification. This defaults to the value passed to <Titanium.Android.Notification.contentTitle>.
 */
bigContentTitle: string,

/**
 * Number of times to retry decoding the bitmap at bigPicture URL.
 */
decodeRetries: number,

/**
 * Set the first line of text after the detail section in the big form of the notification.
 */
summaryText: string,

/**
 * Gets the value of the <Titanium.Android.BigPictureStyle.bigLargeIcon> property.
 */
getBigLargeIcon(): number | string,

/**
 * Sets the value of the <Titanium.Android.BigPictureStyle.bigLargeIcon> property.
 */
setBigLargeIcon(bigLargeIcon: number): void,

/**
 * Sets the value of the <Titanium.Android.BigPictureStyle.bigLargeIcon> property.
 */
setBigLargeIcon(bigLargeIcon: string): void,

/**
 * Gets the value of the <Titanium.Android.BigPictureStyle.bigPicture> property.
 */
getBigPicture(): number | string | Titanium$Blob | Titanium$Filesystem$File,

/**
 * Sets the value of the <Titanium.Android.BigPictureStyle.bigPicture> property.
 */
setBigPicture(bigPicture: number): void,

/**
 * Sets the value of the <Titanium.Android.BigPictureStyle.bigPicture> property.
 */
setBigPicture(bigPicture: string): void,

/**
 * Sets the value of the <Titanium.Android.BigPictureStyle.bigPicture> property.
 */
setBigPicture(bigPicture: Titanium$Blob): void,

/**
 * Sets the value of the <Titanium.Android.BigPictureStyle.bigPicture> property.
 */
setBigPicture(bigPicture: Titanium$Filesystem$File): void,

/**
 * Gets the value of the <Titanium.Android.BigPictureStyle.bigContentTitle> property.
 */
getBigContentTitle(): string,

/**
 * Sets the value of the <Titanium.Android.BigPictureStyle.bigContentTitle> property.
 */
setBigContentTitle(bigContentTitle: string): void,

/**
 * Gets the value of the <Titanium.Android.BigPictureStyle.decodeRetries> property.
 */
getDecodeRetries(): number,

/**
 * Sets the value of the <Titanium.Android.BigPictureStyle.decodeRetries> property.
 */
setDecodeRetries(decodeRetries: number): void,

/**
 * Gets the value of the <Titanium.Android.BigPictureStyle.summaryText> property.
 */
getSummaryText(): string,

/**
 * Sets the value of the <Titanium.Android.BigPictureStyle.summaryText> property.
 */
setSummaryText(summaryText: string): void
} & Titanium$Proxy



/**
 * Helper object for generating large-format notifications that include a lot of text.
 */
declare type Titanium$Android$BigTextStyle = {

/**
 * Sets the longer text to be displayed in the big form of the notification in place of the content text.
 */
bigText: string,

/**
 * Overrides <Titanium.Android.Notification.contentTitle> in the big form of the notification. This defaults to the value passed to <Titanium.Android.Notification.contentTitle>.
 */
bigContentTitle: string,

/**
 * Set the first line of text after the detail section in the big form of the notification.
 */
summaryText: string,

/**
 * Gets the value of the <Titanium.Android.BigTextStyle.bigText> property.
 */
getBigText(): string,

/**
 * Sets the value of the <Titanium.Android.BigTextStyle.bigText> property.
 */
setBigText(bigText: string): void,

/**
 * Gets the value of the <Titanium.Android.BigTextStyle.bigContentTitle> property.
 */
getBigContentTitle(): string,

/**
 * Sets the value of the <Titanium.Android.BigTextStyle.bigContentTitle> property.
 */
setBigContentTitle(bigContentTitle: string): void,

/**
 * Gets the value of the <Titanium.Android.BigTextStyle.summaryText> property.
 */
getSummaryText(): string,

/**
 * Sets the value of the <Titanium.Android.BigTextStyle.summaryText> property.
 */
setSummaryText(summaryText: string): void
} & Titanium$Proxy



/**
 * Monitor and handle Android system broadcasts.
 */
declare type Titanium$Android$BroadcastReceiver = {

/**
 * The function called when a broadcast is received.
 */
onReceived: (param0: any) => any,

/**
 * URL of the JavaScript file to handle the broadcast.
 */
url: string,

/**
 * Gets the value of the <Titanium.Android.BroadcastReceiver.onReceived> property.
 */
getOnReceived(): (param0: any) => any,

/**
 * Sets the value of the <Titanium.Android.BroadcastReceiver.onReceived> property.
 */
setOnReceived(onReceived: (param0: any) => any): void,

/**
 * Gets the value of the <Titanium.Android.BroadcastReceiver.url> property.
 */
getUrl(): string,

/**
 * Sets the value of the <Titanium.Android.BroadcastReceiver.url> property.
 */
setUrl(url: string): void
} & Titanium$Proxy



/**
 * Message objects passed between Android application components.
 */
declare type Titanium$Android$Intent = {

/**
 * The action associated with this intent.
 */
action: string,

/**
 * The Java class name of the activity associated with this intent
 * ([packageName](Titanium.Android.Intent.packageName) must also be set).
 */
className: string,

/**
 * The Intent's Data URI.
 */
+data: string,

/**
 * Intent flags.
 */
flags: number,

/**
 * The fully-qualified Java package name of the activity.
 */
packageName: string,

/**
 * The MIME type for this Intent.
 */
+type: string,

/**
 * The URL to a Titanium JavaScript Activity.
 */
url: string,

/**
 * Adds a category to this Intent.
 */
addCategory(name: string): void,

/**
 * Adds to the existing flags on the `Intent`.
 */
addFlags(flags: number): void,

/**
 * Get a <Titanium.Blob> property from this `Intent`.
 */
getBlobExtra(name: string): Titanium$Blob,

/**
 * Get a boolean property from this Intent.
 */
getBooleanExtra(name: string, defaultValue: boolean): boolean,

/**
 * Get the Data URI from this `Intent`.
 */
getData(): string,

/**
 * Get a double property from this `Intent`.
 */
getDoubleExtra(name: string, defaultValue: number): number,

/**
 * Get an integer property from this `Intent`.
 */
getIntExtra(name: string, defaultValue: number): number,

/**
 * Get a long property from this `Intent`.
 */
getLongExtra(name: string, defaultValue: number): number,

/**
 * Get a string property from this `Intent`.
 */
getStringExtra(name: string): string,

/**
 * Returns `true` if this `Intent` has the specified property.
 */
hasExtra(name: string): boolean,

/**
 * Puts an extra property on this `Intent`.
 */
putExtra(name: string, value: any): void,

/**
 * Put a URI property on this `Intent` (useful for <Titanium.Android.EXTRA_STREAM>).
 */
putExtraUri(name: string, value: any): void,

/**
 * Gets the value of the <Titanium.Android.Intent.action> property.
 */
getAction(): string,

/**
 * Sets the value of the <Titanium.Android.Intent.action> property.
 */
setAction(action: string): void,

/**
 * Gets the value of the <Titanium.Android.Intent.className> property.
 */
getClassName(): string,

/**
 * Sets the value of the <Titanium.Android.Intent.className> property.
 */
setClassName(className: string): void,

/**
 * Gets the value of the <Titanium.Android.Intent.flags> property.
 */
getFlags(): number,

/**
 * Sets the value of the <Titanium.Android.Intent.flags> property.
 */
setFlags(flags: number): void,

/**
 * Gets the value of the <Titanium.Android.Intent.packageName> property.
 */
getPackageName(): string,

/**
 * Sets the value of the <Titanium.Android.Intent.packageName> property.
 */
setPackageName(packageName: string): void,

/**
 * Gets the value of the <Titanium.Android.Intent.type> property.
 */
getType(): string,

/**
 * Gets the value of the <Titanium.Android.Intent.url> property.
 */
getUrl(): string,

/**
 * Sets the value of the <Titanium.Android.Intent.url> property.
 */
setUrl(url: string): void
} & Titanium$Proxy



/**
 * The Titanium binding of an Android Options Menu.
 */
declare type Titanium$Android$Menu = {

/**
 * Array of menu items in this menu.
 */
+items: Titanium$Android$MenuItem[],

/**
 * Creates a <Titanium.Android.MenuItem> from the passed creation options.
 */
add(options: any): Titanium$Android$MenuItem,

/**
 * Clears all items from this menu.
 */
clear(): void,

/**
 * Closes the menu, if visible.
 */
close(): void,

/**
 * Locates a [MenuItem](Titanium.Android.MenuItem) in this menu, by item ID or reference.
 */
findItem(item: number): Titanium$Android$MenuItem,

/**
 * Locates a [MenuItem](Titanium.Android.MenuItem) in this menu, by item ID or reference.
 */
findItem(item: Titanium$Android$MenuItem): Titanium$Android$MenuItem,

/**
 * Returns the [MenuItem](Titanium.Android.MenuItem) at a specific index.
 */
getItem(index: number): Titanium$Android$MenuItem,

/**
 * Returns `true` if this menu has visible items.
 */
hasVisibleItems(): boolean,

/**
 * Removes all menu items with the specified
 * [groupId](Titanium.Android.MenuItem.groupId).
 */
removeGroup(groupId: number): void,

/**
 * Removes a specific [MenuItem](Titanium.Android.MenuItem) identified by its
 * [itemId](Titanium.Android.MenuItem.itemId).
 */
removeItem(itemId: number): void,

/**
 * Enables or disables a group of menu items identified by a
 * [groupId](Titanium.Android.MenuItem.groupId).
 */
setGroupEnabled(groupId: number, enabled: boolean): void,

/**
 * Shows or hides a group of menu items identified by a
 * [groupId](Titanium.Android.MenuItem.groupId).
 */
setGroupVisible(groupId: number, visible: boolean): void,

/**
 * Number of items in this menu.
 */
size(): number,

/**
 * Gets the value of the <Titanium.Android.Menu.items> property.
 */
getItems(): Titanium$Android$MenuItem[]
} & Titanium$Proxy



/**
 * The Titanium binding of an Android menu item.
 */
declare type Titanium$Android$MenuItem = {

/**
 * Custom view that replaces the default menu item button.
 */
actionView: Titanium$UI$View,

/**
 * True if this menu item's action view has been expanded.
 */
+actionViewExpanded: boolean,

/**
 * Determines if the item can be checked.
 */
checkable: boolean,

/**
 * Determines if the item is checked.
 */
checked: boolean,

/**
 * Determines if the item is enabled.
 */
enabled: boolean,

/**
 * Group ID for this item.
 */
+groupId: number,

/**
 * Icon to display for the this menu item.
 */
icon: number | string,

/**
 * Item ID for this item.
 */
+itemId: number,

/**
 * Integer used for controlling the category and sort order for menu items.
 */
+order: number,

/**
 * A set of flags that controls how this item appears in the action bar.
 */
showAsAction: number,

/**
 * Title of the item.
 */
title: string,

/**
 * Shortened version of the item's title.
 */
titleCondensed: string,

/**
 * Determines whether the menu item is visible.
 */
visible: boolean,

/**
 * Collapse the action view associated with this menu item.
 */
collapseActionView(): void,

/**
 * Expand the action view associated with this menu item.
 */
expandActionView(): void,

/**
 * Returns the [actionViewExpanded](Titanium.Android.MenuItem.actionViewExpanded) state of the menu item.
 */
isActionViewExpanded(): boolean,

/**
 * Returns the [checkable](Titanium.Android.MenuItem.checkable) state of the menu item.
 */
isCheckable(): boolean,

/**
 * Returns the [checked](Titanium.Android.MenuItem.checked) state of the menu item.
 */
isChecked(): boolean,

/**
 * Returns the [enabled](Titanium.Android.MenuItem.enabled) state of the menu item.
 */
isEnabled(): boolean,

/**
 * Returns the [visible](Titanium.Android.MenuItem.visible) state of the menu item.
 */
isVisible(): boolean,

/**
 * Sets the [checkable](Titanium.Android.MenuItem.checkable) state of the menu item.
 */
setCheckable(checkable: boolean): void,

/**
 * Sets the [checked](Titanium.Android.MenuItem.checked) state of the menu item.
 */
setChecked(enabled: boolean): void,

/**
 * Sets the [enabled](Titanium.Android.MenuItem.enabled) state of the menu item.
 */
setEnabled(enabled: boolean): void,

/**
 * Sets the [visible](Titanium.Android.MenuItem.visible) state of the menu item.
 */
setVisible(visible: boolean): void,

/**
 * Gets the value of the <Titanium.Android.MenuItem.actionView> property.
 */
getActionView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.Android.MenuItem.actionView> property.
 */
setActionView(actionView: any): void,

/**
 * Gets the value of the <Titanium.Android.MenuItem.groupId> property.
 */
getGroupId(): number,

/**
 * Sets the value of the <Titanium.Android.MenuItem.icon> property.
 */
setIcon(icon: number): void,

/**
 * Sets the value of the <Titanium.Android.MenuItem.icon> property.
 */
setIcon(icon: string): void,

/**
 * Gets the value of the <Titanium.Android.MenuItem.itemId> property.
 */
getItemId(): number,

/**
 * Gets the value of the <Titanium.Android.MenuItem.order> property.
 */
getOrder(): number,

/**
 * Sets the value of the <Titanium.Android.MenuItem.showAsAction> property.
 */
setShowAsAction(showAsAction: number): void,

/**
 * Gets the value of the <Titanium.Android.MenuItem.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.Android.MenuItem.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.Android.MenuItem.titleCondensed> property.
 */
getTitleCondensed(): string,

/**
 * Sets the value of the <Titanium.Android.MenuItem.titleCondensed> property.
 */
setTitleCondensed(titleCondensed: string): void
} & Titanium$Proxy



/**
 * UI notifications that can be sent while the application is in the background.
 */
declare type Titanium$Android$Notification = {

/**
 * The audio stream type to use when playing the sound.
 */
audioStreamType: number,

/**
 * Sets the notification's category.
 */
category: string,

/**
 * The `PendingIntent` to execute when the expanded status entry is clicked.
 */
contentIntent: Titanium$Android$PendingIntent,

/**
 * Description text of the notification.
 */
contentText: string,

/**
 * Title of the notification.
 */
contentTitle: string,

/**
 * Custom layout to display in the notification.
 */
contentView: Titanium$Android$RemoteViews,

/**
 * Specifies which values should be taken from the defaults.
 */
defaults: number,

/**
 * The `PendingIntent` to execute when the status entry is deleted by the user with the "Clear All Notifications" button.
 */
deleteIntent: Titanium$Android$PendingIntent,

/**
 * Set of flags for the notification.
 */
flags: number,

/**
 * The group key that the notification will belong to.
 */
groupKey: string,

/**
 * Specifies if this is a group summary notification.
 */
groupSummary: boolean,

/**
 * Notification icon, specified as an Android resource ID, or a local URL to a density-specific image.
 */
icon: number | string,

/**
 * Add a large icon to the notification (and the ticker on some devices) specified as an Android resource ID, or a local URL to a density-specific image.
 */
largeIcon: number | string,

/**
 * Accent color used behind icon.
 */
color: string,

/**
 * The color for the LED to blink.
 */
ledARGB: number,

/**
 * The number of milliseconds for the LED to be off while it's flashing.
 */
ledOffMS: number,

/**
 * The number of milliseconds for the LED to be on while it's flashing.
 */
ledOnMS: number,

/**
 * The number of events that this notification represents.
 */
number: number,

/**
 * Sets the priority of the notification.
 */
priority: number,

/**
 * A URL to the sound to play.
 */
sound: string,

/**
 * Style object that can apply a rich notification style.
 */
style: Titanium$Android$BigTextStyle | Titanium$Android$BigPictureStyle,

/**
 * Text to scroll across the screen when this item is added to the status bar.
 */
tickerText: string,

/**
 * Allows user to conceal private information of the notification on the lockscreen.
 */
visibility: number,

/**
 * Will wake up the device for the given time (in milliseconds) when the notification is shown.
 * The application needs to also set the `android.permission.WAKE_LOCK` permission
 * in the Android manifest section of the `tiapp.xml` file.
 * <ti:app>
 *      <android>
 *          <manifest>
 *              <uses-permission android:name="android.permission.WAKE_LOCK" />
 *          </manifest>
 *      </android>
 * </ti:app>
 */
wakeLock: wakeLockOptions,

/**
 * The timestamp for the notification (defaults to the current time).
 */
when: Date | number,

/**
 * Sets the latest event info using the built-in notification view for this notification.
 */
setLatestEventInfo(
contentTitle: string,
contentText: string,
contentIntent: Titanium$Android$PendingIntent): void,

/**
 * Set the progress this notification represents.
 */
setProgress(max: number, progress: number, indeterminate: boolean): void,

/**
 * Add an action button to the notification
 */
addAction(icon: number, title: string, intent: Titanium$Android$PendingIntent): void,

/**
 * Add an action button to the notification
 */
addAction(icon: string, title: string, intent: Titanium$Android$PendingIntent): void,

/**
 * Gets the value of the <Titanium.Android.Notification.audioStreamType> property.
 */
getAudioStreamType(): number,

/**
 * Sets the value of the <Titanium.Android.Notification.audioStreamType> property.
 */
setAudioStreamType(audioStreamType: number): void,

/**
 * Gets the value of the <Titanium.Android.Notification.category> property.
 */
getCategory(): string,

/**
 * Sets the value of the <Titanium.Android.Notification.category> property.
 */
setCategory(category: string): void,

/**
 * Gets the value of the <Titanium.Android.Notification.contentIntent> property.
 */
getContentIntent(): Titanium$Android$PendingIntent,

/**
 * Sets the value of the <Titanium.Android.Notification.contentIntent> property.
 */
setContentIntent(contentIntent: Titanium$Android$PendingIntent): void,

/**
 * Gets the value of the <Titanium.Android.Notification.contentText> property.
 */
getContentText(): string,

/**
 * Sets the value of the <Titanium.Android.Notification.contentText> property.
 */
setContentText(contentText: string): void,

/**
 * Gets the value of the <Titanium.Android.Notification.contentTitle> property.
 */
getContentTitle(): string,

/**
 * Sets the value of the <Titanium.Android.Notification.contentTitle> property.
 */
setContentTitle(contentTitle: string): void,

/**
 * Sets the value of the <Titanium.Android.Notification.contentView> property.
 */
setContentView(contentView: Titanium$Android$RemoteViews): void,

/**
 * Gets the value of the <Titanium.Android.Notification.defaults> property.
 */
getDefaults(): number,

/**
 * Sets the value of the <Titanium.Android.Notification.defaults> property.
 */
setDefaults(defaults: number): void,

/**
 * Gets the value of the <Titanium.Android.Notification.deleteIntent> property.
 */
getDeleteIntent(): Titanium$Android$PendingIntent,

/**
 * Sets the value of the <Titanium.Android.Notification.deleteIntent> property.
 */
setDeleteIntent(deleteIntent: Titanium$Android$PendingIntent): void,

/**
 * Gets the value of the <Titanium.Android.Notification.flags> property.
 */
getFlags(): number,

/**
 * Sets the value of the <Titanium.Android.Notification.flags> property.
 */
setFlags(flags: number): void,

/**
 * Gets the value of the <Titanium.Android.Notification.groupKey> property.
 */
getGroupKey(): string,

/**
 * Sets the value of the <Titanium.Android.Notification.groupKey> property.
 */
setGroupKey(groupKey: string): void,

/**
 * Gets the value of the <Titanium.Android.Notification.groupSummary> property.
 */
getGroupSummary(): boolean,

/**
 * Sets the value of the <Titanium.Android.Notification.groupSummary> property.
 */
setGroupSummary(groupSummary: boolean): void,

/**
 * Gets the value of the <Titanium.Android.Notification.icon> property.
 */
getIcon(): number | string,

/**
 * Sets the value of the <Titanium.Android.Notification.icon> property.
 */
setIcon(icon: number): void,

/**
 * Sets the value of the <Titanium.Android.Notification.icon> property.
 */
setIcon(icon: string): void,

/**
 * Gets the value of the <Titanium.Android.Notification.largeIcon> property.
 */
getLargeIcon(): number | string,

/**
 * Sets the value of the <Titanium.Android.Notification.largeIcon> property.
 */
setLargeIcon(largeIcon: number): void,

/**
 * Sets the value of the <Titanium.Android.Notification.largeIcon> property.
 */
setLargeIcon(largeIcon: string): void,

/**
 * Gets the value of the <Titanium.Android.Notification.color> property.
 */
getColor(): string,

/**
 * Sets the value of the <Titanium.Android.Notification.color> property.
 */
setColor(color: string): void,

/**
 * Gets the value of the <Titanium.Android.Notification.ledARGB> property.
 */
getLedARGB(): number,

/**
 * Sets the value of the <Titanium.Android.Notification.ledARGB> property.
 */
setLedARGB(ledARGB: number): void,

/**
 * Gets the value of the <Titanium.Android.Notification.ledOffMS> property.
 */
getLedOffMS(): number,

/**
 * Sets the value of the <Titanium.Android.Notification.ledOffMS> property.
 */
setLedOffMS(ledOffMS: number): void,

/**
 * Gets the value of the <Titanium.Android.Notification.ledOnMS> property.
 */
getLedOnMS(): number,

/**
 * Sets the value of the <Titanium.Android.Notification.ledOnMS> property.
 */
setLedOnMS(ledOnMS: number): void,

/**
 * Gets the value of the <Titanium.Android.Notification.number> property.
 */
getNumber(): number,

/**
 * Sets the value of the <Titanium.Android.Notification.number> property.
 */
setNumber(number: number): void,

/**
 * Gets the value of the <Titanium.Android.Notification.priority> property.
 */
getPriority(): number,

/**
 * Sets the value of the <Titanium.Android.Notification.priority> property.
 */
setPriority(priority: number): void,

/**
 * Gets the value of the <Titanium.Android.Notification.sound> property.
 */
getSound(): string,

/**
 * Sets the value of the <Titanium.Android.Notification.sound> property.
 */
setSound(sound: string): void,

/**
 * Gets the value of the <Titanium.Android.Notification.style> property.
 */
getStyle(): Titanium$Android$BigTextStyle | Titanium$Android$BigPictureStyle,

/**
 * Sets the value of the <Titanium.Android.Notification.style> property.
 */
setStyle(style: Titanium$Android$BigTextStyle): void,

/**
 * Sets the value of the <Titanium.Android.Notification.style> property.
 */
setStyle(style: Titanium$Android$BigPictureStyle): void,

/**
 * Gets the value of the <Titanium.Android.Notification.tickerText> property.
 */
getTickerText(): string,

/**
 * Sets the value of the <Titanium.Android.Notification.tickerText> property.
 */
setTickerText(tickerText: string): void,

/**
 * Gets the value of the <Titanium.Android.Notification.visibility> property.
 */
getVisibility(): number,

/**
 * Sets the value of the <Titanium.Android.Notification.visibility> property.
 */
setVisibility(visibility: number): void,

/**
 * Gets the value of the <Titanium.Android.Notification.wakeLock> property.
 */
getWakeLock(): wakeLockOptions,

/**
 * Sets the value of the <Titanium.Android.Notification.wakeLock> property.
 */
setWakeLock(wakeLock: wakeLockOptions): void,

/**
 * Gets the value of the <Titanium.Android.Notification.when> property.
 */
getWhen(): Date | number,

/**
 * Sets the value of the <Titanium.Android.Notification.when> property.
 */
setWhen(when: Date): void,

/**
 * Sets the value of the <Titanium.Android.Notification.when> property.
 */
setWhen(when: number): void
} & Titanium$Proxy



/**
 * Module for notification channels.
 */
declare type Titanium$Android$NotificationChannel = {

/**
 * Whether or not notifications posted to this channel can interrupt the user.
 */
bypassDnd: boolean,

/**
 * User visible description of this channel.
 */
description: string,

/**
 * Whether notifications posted to this channel should display notification lights
 */
enableLights: boolean,

/**
 * Whether notification posted to this channel should vibrate.
 */
enableVibration: boolean,

/**
 * Group id this channel belongs to.
 */
groupId: string,

/**
 * The audio stream type to use when playing the sound.
 */
importance: number,

/**
 * The channel id specified for the notification channel.
 */
id: string,

/**
 * The notification light color for notifications posted to this channel.
 */
lightColor: number,

/**
 * Whether or not notifications posted to this channel are shown on the lockscreen in full or redacted form.
 */
lockscreenVisibility: number,

/**
 * Whether notifications posted to this channel can appear as application icon badges in a Launcher.
 */
showBadge: boolean,

/**
 * A URL to the sound to play.
 */
sound: string,

/**
 * The vibration pattern for notifications posted to this channel.
 */
vibratePattern: number[],

/**
 * Gets the value of the <Titanium.Android.NotificationChannel.bypassDnd> property.
 */
getBypassDnd(): boolean,

/**
 * Sets the value of the <Titanium.Android.NotificationChannel.bypassDnd> property.
 */
setBypassDnd(bypassDnd: boolean): void,

/**
 * Gets the value of the <Titanium.Android.NotificationChannel.description> property.
 */
getDescription(): string,

/**
 * Sets the value of the <Titanium.Android.NotificationChannel.description> property.
 */
setDescription(description: string): void,

/**
 * Gets the value of the <Titanium.Android.NotificationChannel.enableLights> property.
 */
getEnableLights(): boolean,

/**
 * Sets the value of the <Titanium.Android.NotificationChannel.enableLights> property.
 */
setEnableLights(enableLights: boolean): void,

/**
 * Gets the value of the <Titanium.Android.NotificationChannel.enableVibration> property.
 */
getEnableVibration(): boolean,

/**
 * Sets the value of the <Titanium.Android.NotificationChannel.enableVibration> property.
 */
setEnableVibration(enableVibration: boolean): void,

/**
 * Gets the value of the <Titanium.Android.NotificationChannel.groupId> property.
 */
getGroupId(): string,

/**
 * Sets the value of the <Titanium.Android.NotificationChannel.groupId> property.
 */
setGroupId(groupId: string): void,

/**
 * Gets the value of the <Titanium.Android.NotificationChannel.importance> property.
 */
getImportance(): number,

/**
 * Sets the value of the <Titanium.Android.NotificationChannel.importance> property.
 */
setImportance(importance: number): void,

/**
 * Gets the value of the <Titanium.Android.NotificationChannel.id> property.
 */
getId(): string,

/**
 * Sets the value of the <Titanium.Android.NotificationChannel.id> property.
 */
setId(id: string): void,

/**
 * Gets the value of the <Titanium.Android.NotificationChannel.lightColor> property.
 */
getLightColor(): number,

/**
 * Sets the value of the <Titanium.Android.NotificationChannel.lightColor> property.
 */
setLightColor(lightColor: number): void,

/**
 * Gets the value of the <Titanium.Android.NotificationChannel.lockscreenVisibility> property.
 */
getLockscreenVisibility(): number,

/**
 * Sets the value of the <Titanium.Android.NotificationChannel.lockscreenVisibility> property.
 */
setLockscreenVisibility(lockscreenVisibility: number): void,

/**
 * Gets the value of the <Titanium.Android.NotificationChannel.showBadge> property.
 */
getShowBadge(): boolean,

/**
 * Sets the value of the <Titanium.Android.NotificationChannel.showBadge> property.
 */
setShowBadge(showBadge: boolean): void,

/**
 * Gets the value of the <Titanium.Android.NotificationChannel.sound> property.
 */
getSound(): string,

/**
 * Sets the value of the <Titanium.Android.NotificationChannel.sound> property.
 */
setSound(sound: string): void,

/**
 * Gets the value of the <Titanium.Android.NotificationChannel.vibratePattern> property.
 */
getVibratePattern(): number[],

/**
 * Sets the value of the <Titanium.Android.NotificationChannel.vibratePattern> property.
 */
setVibratePattern(vibratePattern: $ReadOnlyArray<number>): void
} & Titanium$Proxy



/**
 * The Titanium binding of an Android `PendingIntent`.
 */
declare type Titanium$Android$PendingIntent = {

/**
 * Flags used for creating the Pending Intent.
 */
flags: number,

/**
 * The intent data to pass to the [Activity](Titanium.Android.Activity) launched by this `PendingIntent`.
 */
intent: Titanium$Android$Intent,

/**
 * If this property is true, flag <Titanium.Android.FLAG_UPDATE_CURRENT> will be
 * appended to `flags` automatically. Default value is true.
 */
updateCurrentIntent: boolean,

/**
 * Gets the value of the <Titanium.Android.PendingIntent.flags> property.
 */
getFlags(): number,

/**
 * Sets the value of the <Titanium.Android.PendingIntent.flags> property.
 */
setFlags(flags: number): void,

/**
 * Gets the value of the <Titanium.Android.PendingIntent.intent> property.
 */
getIntent(): Titanium$Android$Intent,

/**
 * Sets the value of the <Titanium.Android.PendingIntent.intent> property.
 */
setIntent(intent: Titanium$Android$Intent): void,

/**
 * Gets the value of the <Titanium.Android.PendingIntent.updateCurrentIntent> property.
 */
getUpdateCurrentIntent(): boolean,

/**
 * Sets the value of the <Titanium.Android.PendingIntent.updateCurrentIntent> property.
 */
setUpdateCurrentIntent(updateCurrentIntent: boolean): void
} & Titanium$Proxy



/**
 * Android service for creating custom quick settings tiles and handling user's interaction with them.
 */
declare type Titanium$Android$QuickSettingsService = {

/**
 * The intent used to start or bind to the Service.
 */
+intent: Titanium$Android$Intent,

/**
 * A service can be started more than once -- this number (based on an incrementing integer)
 * indicates which "start number" in the sequence the current service instance is.
 */
+serviceInstanceId: number,

/**
 * Puts the service into the "background" state and removes its foreground notification.
 */
foregroundCancel(): void,

/**
 * Puts the service into the "foreground" state and displays a notification.
 */
foregroundNotify(id: number, notification: Titanium$Android$Notification): void,

/**
 * Starts the Service.
 */
start(): void,

/**
 * Stops this running instance of the Service.
 */
stop(): void,

/**
 * Applies current tile's properties.
 */
updateTile(): void,

/**
 * Changes the Tile's icon.
 */
setIcon(icon: string): void,

/**
 * Changes the Tile's icon.
 */
setIcon(icon: Titanium$Blob): void,

/**
 * Changes the Tile's icon.
 */
setIcon(icon: Titanium$Filesystem$File): void,

/**
 * Sets the state of the Tile.
 */
setState(state: number): void,

/**
 * Changes the Tile's label.
 */
setLabel(label: string): void,

/**
 * Returns the Tile's current icon.
 */
getIcon(): string | Titanium$Blob | Titanium$Filesystem$File,

/**
 * Returns the Tile's current state.
 */
getState(): number,

/**
 * Returns the Tile's current label.
 */
getLabel(): string,

/**
 * Returns 'true' if the device is currently locked, 'false' otherwise.
 */
isLocked(): boolean,

/**
 * Returns 'true' if the device is in secure state, 'false' otherwise.
 */
isSecure(): boolean,

/**
 * Opens an Alert dialog.
 */
showDialog(options: showParams): void,

/**
 * Colapses the quick settings menu and starts an activity for the passed Intent.
 */
startActivityAndCollapse(intent: Titanium$Android$Intent): void,

/**
 * Prompts the user to unlock the device and runs the JS code.
 */
unlockAndRun(jsCode: string): void,

/**
 * Gets the value of the <Titanium.Android.QuickSettingsService.intent> property.
 */
getIntent(): Titanium$Android$Intent,

/**
 * Gets the value of the <Titanium.Android.QuickSettingsService.serviceInstanceId> property.
 */
getServiceInstanceId(): number
} & Titanium$Proxy



/**
 * The Titanium binding of [Android RemoteViews](https://developer.android.com/reference/android/widget/RemoteViews.html).
 */
declare type Titanium$Android$RemoteViews = {

/**
 * Android layout resource ID for the view to display. Required.
 */
layoutId: number,

/**
 * Package name that the resource ID lives in. Optional.
 */
packageName: string,

/**
 * Calls a method taking a single `boolean` argument on a view in the remote view
 * hierarchy.  See Android's documentation for
 * [setBoolean](https://developer.android.com/reference/android/widget/RemoteViews.html#setBoolean(int, java.lang.String, boolean)).
 */
setBoolean(viewId: number, methodName: string, value: boolean): void,

/**
 * Sets the base time, format string, and started flag for a chronometer
 * in the remote view hierarchy.
 */
setChronometer(viewId: number, base: Date, format: string, started: boolean): void,

/**
 * Calls a method taking a single `double` argument on a view in the remote view
 * hierarchy.
 */
setDouble(viewId: number, methodName: string, value: number): void,

/**
 * Sets the image for an image view in the remote view hierarchy using an Android drawable resource.
 */
setImageViewResource(viewId: number, srcId: number): void,

/**
 * Sets the image for an image view in the remote view hierarchy using a URI.
 */
setImageViewUri(viewId: number, uri: string): void,

/**
 * Calls a method taking a single `int` argument on a view in the remote view hierarchy.
 */
setInt(viewId: number, methodName: string, value: number): void,

/**
 * Launches a <Titanium.Android.PendingIntent> when the specified view is clicked.
 */
setOnClickPendingIntent(viewId: number, pendingIntent: Titanium$Android$PendingIntent): void,

/**
 * Sets the progress, max value, and indeterminate flag of a progress bar in the
 * remote view hierarchy.
 */
setProgressBar(viewId: number, max: number, progress: number, indeterminate: boolean): void,

/**
 * Calls a method taking a single String argument on a view in the remote view
 * hierarchy.
 */
setString(viewId: number, methodName: string, value: string): void,

/**
 * Sets the text color of a view in the remote view hierarchy.
 */
setTextColor(viewId: number, color: number): void,

/**
 * Sets the text of a text view in the remote view hierarchy.
 */
setTextViewText(viewId: number, text: string): void,

/**
 * Calls a method taking one URI on a view in the remote view hierarchy.
 */
setUri(viewId: number, methodName: string, value: string): void,

/**
 * Sets the visibility of a view in the remote view hierarchy.
 */
setViewVisibility(viewId: number, visibility: number): void,

/**
 * Gets the value of the <Titanium.Android.RemoteViews.layoutId> property.
 */
getLayoutId(): number,

/**
 * Sets the value of the <Titanium.Android.RemoteViews.layoutId> property.
 */
setLayoutId(layoutId: number): void,

/**
 * Gets the value of the <Titanium.Android.RemoteViews.packageName> property.
 */
getPackageName(): string,

/**
 * Sets the value of the <Titanium.Android.RemoteViews.packageName> property.
 */
setPackageName(packageName: string): void
} & Titanium$Proxy



/**
 * Android application component that executes in the background.
 */
declare type Titanium$Android$Service = {

/**
 * The intent used to start or bind to the Service.
 */
+intent: Titanium$Android$Intent,

/**
 * A service can be started more than once -- this number (based on an incrementing integer)
 * indicates which "start number" in the sequence the current service instance is.
 */
+serviceInstanceId: number,

/**
 * Puts the service into the "background" state and removes its foreground notification.
 */
foregroundCancel(): void,

/**
 * Puts the service into the "foreground" state and displays a notification.
 */
foregroundNotify(id: number, notification: Titanium$Android$Notification): void,

/**
 * Starts the Service.
 */
start(): void,

/**
 * Stops this running instance of the Service.
 */
stop(): void,

/**
 * Gets the value of the <Titanium.Android.Service.intent> property.
 */
getIntent(): Titanium$Android$Intent,

/**
 * Gets the value of the <Titanium.Android.Service.serviceInstanceId> property.
 */
getServiceInstanceId(): number
} & Titanium$Proxy



      declare var npm$namespace$Titanium$Android$Calendar: {
        addEventListener: typeof Titanium$Android$Calendar$addEventListener,
removeEventListener: typeof Titanium$Android$Calendar$removeEventListener,
fireEvent: typeof Titanium$Android$Calendar$fireEvent,
applyProperties: typeof Titanium$Android$Calendar$applyProperties,
getCalendarById: typeof Titanium$Android$Calendar$getCalendarById,
getBubbleParent: typeof Titanium$Android$Calendar$getBubbleParent,
setBubbleParent: typeof Titanium$Android$Calendar$setBubbleParent,
getApiName: typeof Titanium$Android$Calendar$getApiName,
getLifecycleContainer: typeof Titanium$Android$Calendar$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Android$Calendar$setLifecycleContainer,
getAllAlerts: typeof Titanium$Android$Calendar$getAllAlerts,
getAllCalendars: typeof Titanium$Android$Calendar$getAllCalendars,
getSelectableCalendars: typeof Titanium$Android$Calendar$getSelectableCalendars,
        bubbleParent: typeof Titanium$Android$Calendar$bubbleParent,
apiName: typeof Titanium$Android$Calendar$apiName,
lifecycleContainer: typeof Titanium$Android$Calendar$lifecycleContainer,
METHOD_ALERT: typeof Titanium$Android$Calendar$METHOD_ALERT,
METHOD_DEFAULT: typeof Titanium$Android$Calendar$METHOD_DEFAULT,
METHOD_EMAIL: typeof Titanium$Android$Calendar$METHOD_EMAIL,
METHOD_SMS: typeof Titanium$Android$Calendar$METHOD_SMS,
STATE_DISMISSED: typeof Titanium$Android$Calendar$STATE_DISMISSED,
STATE_FIRED: typeof Titanium$Android$Calendar$STATE_FIRED,
STATE_SCHEDULED: typeof Titanium$Android$Calendar$STATE_SCHEDULED,
STATUS_CANCELED: typeof Titanium$Android$Calendar$STATUS_CANCELED,
STATUS_CONFIRMED: typeof Titanium$Android$Calendar$STATUS_CONFIRMED,
STATUS_TENTATIVE: typeof Titanium$Android$Calendar$STATUS_TENTATIVE,
VISIBILITY_CONFIDENTIAL: typeof Titanium$Android$Calendar$VISIBILITY_CONFIDENTIAL,
VISIBILITY_DEFAULT: typeof Titanium$Android$Calendar$VISIBILITY_DEFAULT,
VISIBILITY_PRIVATE: typeof Titanium$Android$Calendar$VISIBILITY_PRIVATE,
VISIBILITY_PUBLIC: typeof Titanium$Android$Calendar$VISIBILITY_PUBLIC,
allAlerts: typeof Titanium$Android$Calendar$allAlerts,
allCalendars: typeof Titanium$Android$Calendar$allCalendars,
selectableCalendars: typeof Titanium$Android$Calendar$selectableCalendars,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Android$Calendar$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Android$Calendar$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Android$Calendar$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Reminder alert delivery method.
 */
declare var Titanium$Android$Calendar$METHOD_ALERT: number;


/**
 * Reminder default delivery method.
 */
declare var Titanium$Android$Calendar$METHOD_DEFAULT: number;


/**
 * Reminder email delivery method.
 */
declare var Titanium$Android$Calendar$METHOD_EMAIL: number;


/**
 * Reminder SMS delivery method.
 */
declare var Titanium$Android$Calendar$METHOD_SMS: number;


/**
 * Alert dismissed state.
 */
declare var Titanium$Android$Calendar$STATE_DISMISSED: number;


/**
 * Alert fired state.
 */
declare var Titanium$Android$Calendar$STATE_FIRED: number;


/**
 * Alert scheduled status.
 */
declare var Titanium$Android$Calendar$STATE_SCHEDULED: number;


/**
 * Event canceled status.
 */
declare var Titanium$Android$Calendar$STATUS_CANCELED: number;


/**
 * Event confirmed status.
 */
declare var Titanium$Android$Calendar$STATUS_CONFIRMED: number;


/**
 * Event tentative status.
 */
declare var Titanium$Android$Calendar$STATUS_TENTATIVE: number;


/**
 * Event confidential visibility.
 */
declare var Titanium$Android$Calendar$VISIBILITY_CONFIDENTIAL: number;


/**
 * Event default visibility.
 */
declare var Titanium$Android$Calendar$VISIBILITY_DEFAULT: number;


/**
 * Event private visibility.
 */
declare var Titanium$Android$Calendar$VISIBILITY_PRIVATE: number;


/**
 * Event public visibility.
 */
declare var Titanium$Android$Calendar$VISIBILITY_PUBLIC: number;


/**
 * All alerts in selected calendars.
 */
declare var Titanium$Android$Calendar$allAlerts: Titanium$Android$Calendar$Alert[];


/**
 * All calendars known to the native calendar app.
 */
declare var Titanium$Android$Calendar$allCalendars: Titanium$Android$Calendar$Calendar[];


/**
 * All calendars selected within the native calendar app, which may be a subset of `allCalendars`.
 */
declare var Titanium$Android$Calendar$selectableCalendars: Titanium$Android$Calendar$Calendar[];


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Android$Calendar$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Android$Calendar$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Android$Calendar$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Android$Calendar$applyProperties(props: any): void



/**
 * Gets the calendar with the specified identifier.
 */
declare function Titanium$Android$Calendar$getCalendarById(id: number): Titanium$Android$Calendar$Calendar



/**
 * Gets the value of the <Titanium.Android.Calendar.bubbleParent> property.
 */
declare function Titanium$Android$Calendar$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Android.Calendar.bubbleParent> property.
 */
declare function Titanium$Android$Calendar$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Android.Calendar.apiName> property.
 */
declare function Titanium$Android$Calendar$getApiName(): string



/**
 * Gets the value of the <Titanium.Android.Calendar.lifecycleContainer> property.
 */
declare function Titanium$Android$Calendar$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Android.Calendar.lifecycleContainer> property.
 */
declare function Titanium$Android$Calendar$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Android.Calendar.lifecycleContainer> property.
 */
declare function Titanium$Android$Calendar$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.Android.Calendar.allAlerts> property.
 */
declare function Titanium$Android$Calendar$getAllAlerts(): Titanium$Android$Calendar$Alert[]



/**
 * Gets the value of the <Titanium.Android.Calendar.allCalendars> property.
 */
declare function Titanium$Android$Calendar$getAllCalendars(): Titanium$Android$Calendar$Calendar[]



/**
 * Gets the value of the <Titanium.Android.Calendar.selectableCalendars> property.
 */
declare function Titanium$Android$Calendar$getSelectableCalendars(): Titanium$Android$Calendar$Calendar[]



/**
 * An object that represents a single alert for an event in an Android calendar.
 */
declare type Titanium$Android$Calendar$Alert = {

/**
 * Date/time at which this alert alarm is set to trigger.
 */
+alarmTime: Date,

/**
 * Start date/time for the corresponding event.
 */
+begin: Date,

/**
 * End date/time for the corresponding event.
 */
+end: Date,

/**
 * Identifier of the event for which this alert is set.
 */
+eventId: number,

/**
 * Identifier of this alert.
 */
+id: string,

/**
 * Reminder notice period in minutes, that determines how long prior to the event this alert
 * should trigger.
 */
+minutes: number,

/**
 * The current state of the alert.
 */
+state: number,

/**
 * Gets the value of the <Titanium.Android.Calendar.Alert.alarmTime> property.
 */
getAlarmTime(): Date,

/**
 * Gets the value of the <Titanium.Android.Calendar.Alert.begin> property.
 */
getBegin(): Date,

/**
 * Gets the value of the <Titanium.Android.Calendar.Alert.end> property.
 */
getEnd(): Date,

/**
 * Gets the value of the <Titanium.Android.Calendar.Alert.eventId> property.
 */
getEventId(): number,

/**
 * Gets the value of the <Titanium.Android.Calendar.Alert.id> property.
 */
getId(): string,

/**
 * Gets the value of the <Titanium.Android.Calendar.Alert.minutes> property.
 */
getMinutes(): number,

/**
 * Gets the value of the <Titanium.Android.Calendar.Alert.state> property.
 */
getState(): number
} & Titanium$Proxy



/**
 * An object that represents a single calendar on Android.
 */
declare type Titanium$Android$Calendar$Calendar = {

/**
 * Indicates whether this calendar is hidden.
 */
+hidden: boolean,

/**
 * Identifier of this calendar.
 */
+id: string,

/**
 * Display name of this calendar.
 */
+name: string,

/**
 * Indicates whether the calendar is selected.
 */
+selected: boolean,

/**
 * Creates an event in this calendar.
 */
createEvent(properties: any): Titanium$Android$Calendar$Event,

/**
 * Gets the event with the specified identifier.
 */
getEventById(id: number): Titanium$Android$Calendar$Event,

/**
 * Gets events that occur between two dates.
 */
getEventsBetweenDates(date1: Date, date2: Date): Titanium$Android$Calendar$Event[],

/**
 * Gets events that occur on a specified date.
 */
getEventsInDate(year: number, month: number, day: number): Titanium$Android$Calendar$Event[],

/**
 * Gets events that occur during a specified month.
 */
getEventsInMonth(year: number, month: number): Titanium$Android$Calendar$Event[],

/**
 * Gets all events that occur during a specified year.
 */
getEventsInYear(year: number): Titanium$Android$Calendar$Event[],

/**
 * Gets the value of the <Titanium.Android.Calendar.Calendar.hidden> property.
 */
getHidden(): boolean,

/**
 * Gets the value of the <Titanium.Android.Calendar.Calendar.id> property.
 */
getId(): string,

/**
 * Gets the value of the <Titanium.Android.Calendar.Calendar.name> property.
 */
getName(): string,

/**
 * Gets the value of the <Titanium.Android.Calendar.Calendar.selected> property.
 */
getSelected(): boolean
} & Titanium$Proxy



/**
 * An object that represents a single event in an Android calendar.
 */
declare type Titanium$Android$Calendar$Event = {

/**
 * Existing alerts for this event.
 */
+alerts: Titanium$Android$Calendar$Alert[],

/**
 * Indicates whether this event is all day.
 */
+allDay: boolean,

/**
 * Start date/time of this event.
 */
+begin: Date,

/**
 * Description of this event.
 */
+description: string,

/**
 * End date/time of this event.
 */
+end: Date,

/**
 * Extended properties of this event.
 */
+extendedProperties: any,

/**
 * Indicates whether an alarm is scheduled for this event.
 */
+hasAlarm: boolean,

/**
 * Indicates whether [extendedProperties](Titanium.Android.Calendar.Event.extendedProperties)
 * exists for this event.
 */
+hasExtendedProperties: boolean,

/**
 * Identifier of this event.
 */
+id: string,

/**
 * Location of this event.
 */
+location: string,

/**
 * Existing reminders for this event.
 */
+reminders: Titanium$Android$Calendar$Reminder[],

/**
 * Status of this event.
 */
+status: number,

/**
 * Title of this event.
 */
+title: string,

/**
 * Visibility of this event.
 */
+visibility: number,

/**
 * Creates an alert for this event.
 */
createAlert(data: any): Titanium$Android$Calendar$Alert,

/**
 * Creates a reminder for this event.
 */
createReminder(data: any): Titanium$Android$Calendar$Reminder,

/**
 * Gets the value of the specified extended property.
 */
getExtendedProperty(name: string): string,

/**
 * Sets the value of the specified extended property.
 */
setExtendedProperty(name: string, value: string): void,

/**
 * Gets the value of the <Titanium.Android.Calendar.Event.alerts> property.
 */
getAlerts(): Titanium$Android$Calendar$Alert[],

/**
 * Gets the value of the <Titanium.Android.Calendar.Event.allDay> property.
 */
getAllDay(): boolean,

/**
 * Gets the value of the <Titanium.Android.Calendar.Event.begin> property.
 */
getBegin(): Date,

/**
 * Gets the value of the <Titanium.Android.Calendar.Event.description> property.
 */
getDescription(): string,

/**
 * Gets the value of the <Titanium.Android.Calendar.Event.end> property.
 */
getEnd(): Date,

/**
 * Gets the value of the <Titanium.Android.Calendar.Event.extendedProperties> property.
 */
getExtendedProperties(): any,

/**
 * Gets the value of the <Titanium.Android.Calendar.Event.hasAlarm> property.
 */
getHasAlarm(): boolean,

/**
 * Gets the value of the <Titanium.Android.Calendar.Event.hasExtendedProperties> property.
 */
getHasExtendedProperties(): boolean,

/**
 * Gets the value of the <Titanium.Android.Calendar.Event.id> property.
 */
getId(): string,

/**
 * Gets the value of the <Titanium.Android.Calendar.Event.location> property.
 */
getLocation(): string,

/**
 * Gets the value of the <Titanium.Android.Calendar.Event.reminders> property.
 */
getReminders(): Titanium$Android$Calendar$Reminder[],

/**
 * Gets the value of the <Titanium.Android.Calendar.Event.status> property.
 */
getStatus(): number,

/**
 * Gets the value of the <Titanium.Android.Calendar.Event.title> property.
 */
getTitle(): string,

/**
 * Gets the value of the <Titanium.Android.Calendar.Event.visibility> property.
 */
getVisibility(): number
} & Titanium$Proxy



/**
 * An object that represents a single reminder for an event in an Android calendar.
 */
declare type Titanium$Android$Calendar$Reminder = {

/**
 * Identifier of this reminder.
 */
+id: string,

/**
 * Method by which this reminder will be delivered.
 */
+method: number,

/**
 * Reminder notice period in minutes, that determines how long prior to the event this reminder
 * should trigger.
 */
+minutes: number,

/**
 * Gets the value of the <Titanium.Android.Calendar.Reminder.id> property.
 */
getId(): string,

/**
 * Gets the value of the <Titanium.Android.Calendar.Reminder.method> property.
 */
getMethod(): number,

/**
 * Gets the value of the <Titanium.Android.Calendar.Reminder.minutes> property.
 */
getMinutes(): number
} & Titanium$Proxy



      declare var npm$namespace$Titanium$Android$NotificationManager: {
        addEventListener: typeof Titanium$Android$NotificationManager$addEventListener,
removeEventListener: typeof Titanium$Android$NotificationManager$removeEventListener,
fireEvent: typeof Titanium$Android$NotificationManager$fireEvent,
applyProperties: typeof Titanium$Android$NotificationManager$applyProperties,
cancel: typeof Titanium$Android$NotificationManager$cancel,
cancelAll: typeof Titanium$Android$NotificationManager$cancelAll,
notify: typeof Titanium$Android$NotificationManager$notify,
createNotificationChannel: typeof Titanium$Android$NotificationManager$createNotificationChannel,
areNotificationsEnabled: typeof Titanium$Android$NotificationManager$areNotificationsEnabled,
getBubbleParent: typeof Titanium$Android$NotificationManager$getBubbleParent,
setBubbleParent: typeof Titanium$Android$NotificationManager$setBubbleParent,
getApiName: typeof Titanium$Android$NotificationManager$getApiName,
getLifecycleContainer: typeof Titanium$Android$NotificationManager$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Android$NotificationManager$setLifecycleContainer,
        bubbleParent: typeof Titanium$Android$NotificationManager$bubbleParent,
apiName: typeof Titanium$Android$NotificationManager$apiName,
lifecycleContainer: typeof Titanium$Android$NotificationManager$lifecycleContainer,
DEFAULT_ALL: typeof Titanium$Android$NotificationManager$DEFAULT_ALL,
DEFAULT_LIGHTS: typeof Titanium$Android$NotificationManager$DEFAULT_LIGHTS,
DEFAULT_SOUND: typeof Titanium$Android$NotificationManager$DEFAULT_SOUND,
DEFAULT_VIBRATE: typeof Titanium$Android$NotificationManager$DEFAULT_VIBRATE,
FLAG_AUTO_CANCEL: typeof Titanium$Android$NotificationManager$FLAG_AUTO_CANCEL,
FLAG_INSISTENT: typeof Titanium$Android$NotificationManager$FLAG_INSISTENT,
FLAG_NO_CLEAR: typeof Titanium$Android$NotificationManager$FLAG_NO_CLEAR,
FLAG_ONGOING_EVENT: typeof Titanium$Android$NotificationManager$FLAG_ONGOING_EVENT,
FLAG_ONLY_ALERT_ONCE: typeof Titanium$Android$NotificationManager$FLAG_ONLY_ALERT_ONCE,
FLAG_SHOW_LIGHTS: typeof Titanium$Android$NotificationManager$FLAG_SHOW_LIGHTS,
STREAM_DEFAULT: typeof Titanium$Android$NotificationManager$STREAM_DEFAULT,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Android$NotificationManager$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Android$NotificationManager$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Android$NotificationManager$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Use <Titanium.Android.DEFAULT_ALL> instead.
 */
declare var Titanium$Android$NotificationManager$DEFAULT_ALL: number;


/**
 * Use <Titanium.Android.DEFAULT_LIGHTS> instead.
 */
declare var Titanium$Android$NotificationManager$DEFAULT_LIGHTS: number;


/**
 * Use <Titanium.Android.DEFAULT_SOUND> instead.
 */
declare var Titanium$Android$NotificationManager$DEFAULT_SOUND: number;


/**
 * Use <Titanium.Android.DEFAULT_VIBRATE> instead.
 */
declare var Titanium$Android$NotificationManager$DEFAULT_VIBRATE: number;


/**
 * Use <Titanium.Android.FLAG_AUTO_CANCEL> instead.
 */
declare var Titanium$Android$NotificationManager$FLAG_AUTO_CANCEL: number;


/**
 * Use <Titanium.Android.FLAG_INSISTENT> instead.
 */
declare var Titanium$Android$NotificationManager$FLAG_INSISTENT: number;


/**
 * Use <Titanium.Android.FLAG_NO_CLEAR> instead.
 */
declare var Titanium$Android$NotificationManager$FLAG_NO_CLEAR: number;


/**
 * Use <Titanium.Android.FLAG_ONGOING_EVENT> instead.
 */
declare var Titanium$Android$NotificationManager$FLAG_ONGOING_EVENT: number;


/**
 * Use <Titanium.Android.FLAG_ONLY_ALERT_ONCE> instead.
 */
declare var Titanium$Android$NotificationManager$FLAG_ONLY_ALERT_ONCE: number;


/**
 * Use <Titanium.Android.FLAG_SHOW_LIGHTS> instead.
 */
declare var Titanium$Android$NotificationManager$FLAG_SHOW_LIGHTS: number;


/**
 * Use <Titanium.Android.STREAM_DEFAULT> instead.
 */
declare var Titanium$Android$NotificationManager$STREAM_DEFAULT: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Android$NotificationManager$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Android$NotificationManager$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Android$NotificationManager$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Android$NotificationManager$applyProperties(props: any): void



/**
 * Cancels a previously displayed notification.
 */
declare function Titanium$Android$NotificationManager$cancel(id: number): void



/**
 * Cancels all previously displayed notifications.
 */
declare function Titanium$Android$NotificationManager$cancelAll(): void



/**
 * Adds a persistent notification to the status bar.
 */
declare function Titanium$Android$NotificationManager$notify(id: number, notification: Titanium$Android$Notification): void



/**
 * Create a notification channel.
 */
declare function Titanium$Android$NotificationManager$createNotificationChannel(parameters: any): Titanium$Android$NotificationChannel



/**
 * Returns whether showing notifications is enabled for the application.
 */
declare function Titanium$Android$NotificationManager$areNotificationsEnabled(): boolean



/**
 * Gets the value of the <Titanium.Android.NotificationManager.bubbleParent> property.
 */
declare function Titanium$Android$NotificationManager$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Android.NotificationManager.bubbleParent> property.
 */
declare function Titanium$Android$NotificationManager$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Android.NotificationManager.apiName> property.
 */
declare function Titanium$Android$NotificationManager$getApiName(): string



/**
 * Gets the value of the <Titanium.Android.NotificationManager.lifecycleContainer> property.
 */
declare function Titanium$Android$NotificationManager$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Android.NotificationManager.lifecycleContainer> property.
 */
declare function Titanium$Android$NotificationManager$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Android.NotificationManager.lifecycleContainer> property.
 */
declare function Titanium$Android$NotificationManager$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



      declare var npm$namespace$Titanium$Android$R: {
        addEventListener: typeof Titanium$Android$R$addEventListener,
removeEventListener: typeof Titanium$Android$R$removeEventListener,
fireEvent: typeof Titanium$Android$R$fireEvent,
applyProperties: typeof Titanium$Android$R$applyProperties,
getBubbleParent: typeof Titanium$Android$R$getBubbleParent,
setBubbleParent: typeof Titanium$Android$R$setBubbleParent,
getApiName: typeof Titanium$Android$R$getApiName,
getLifecycleContainer: typeof Titanium$Android$R$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Android$R$setLifecycleContainer,
        bubbleParent: typeof Titanium$Android$R$bubbleParent,
apiName: typeof Titanium$Android$R$apiName,
lifecycleContainer: typeof Titanium$Android$R$lifecycleContainer,
anim: typeof Titanium$Android$R$anim,
animator: typeof Titanium$Android$R$animator,
array: typeof Titanium$Android$R$array,
attr: typeof Titanium$Android$R$attr,
bool: typeof Titanium$Android$R$bool,
color: typeof Titanium$Android$R$color,
dimen: typeof Titanium$Android$R$dimen,
drawable: typeof Titanium$Android$R$drawable,
fraction: typeof Titanium$Android$R$fraction,
id: typeof Titanium$Android$R$id,
integer: typeof Titanium$Android$R$integer,
interpolator: typeof Titanium$Android$R$interpolator,
layout: typeof Titanium$Android$R$layout,
menu: typeof Titanium$Android$R$menu,
mipmap: typeof Titanium$Android$R$mipmap,
plurals: typeof Titanium$Android$R$plurals,
raw: typeof Titanium$Android$R$raw,
string: typeof Titanium$Android$R$string,
style: typeof Titanium$Android$R$style,
styleable: typeof Titanium$Android$R$styleable,
transition: typeof Titanium$Android$R$transition,
xml: typeof Titanium$Android$R$xml,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Android$R$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Android$R$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Android$R$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Animation resources. See
 * [R.anim](https://developer.android.com/reference/android/R.anim.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$anim: any;


/**
 * Animator resources. See
 * [R.animator](https://developer.android.com/reference/android/R.animator.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$animator: any;


/**
 * Array resources. See [R.array](https://developer.android.com/reference/android/R.array.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$array: any;


/**
 * Attribute resources. See
 * [R.attr](https://developer.android.com/reference/android/R.attr.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$attr: any;


/**
 * Boolean resources. See
 * [R.bool](https://developer.android.com/reference/android/R.bool.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$bool: any;


/**
 * Color resources. See
 * [R.color](https://developer.android.com/reference/android/R.color.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$color: any;


/**
 * Dimension resources.  See
 * [https://developer.android.com/reference/android/R.dimen.html](https://developer.android.com/reference/android/R.dimen.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$dimen: any;


/**
 * Drawable resources. See
 * [R.drawable](https://developer.android.com/reference/android/R.drawable.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$drawable: any;


/**
 * Fraction resources. See
 * [R.fraction](https://developer.android.com/reference/android/R.fraction.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$fraction: any;


/**
 * ID resources.  See
 * [R.id](https://developer.android.com/reference/android/R.id.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$id: any;


/**
 * Integer resources. See
 * [R.integer](https://developer.android.com/reference/android/R.integer.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$integer: any;


/**
 * Interpolator resources. See
 * [R.fraction](https://developer.android.com/reference/android/R.interpolator.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$interpolator: any;


/**
 * Layout resources. See
 * [R.layout](https://developer.android.com/reference/android/R.layout.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$layout: any;


/**
 * Menu resources. See
 * [R.menu](https://developer.android.com/reference/android/R.menu.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$menu: any;


/**
 * Mipmap resources. See
 * [R.mipmap](https://developer.android.com/reference/android/R.mipmap.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$mipmap: any;


/**
 * Plurals resources. See
 * [R.plurals](https://developer.android.com/reference/android/R.plurals.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$plurals: any;


/**
 * Raw resources. See
 * [R.raw](https://developer.android.com/reference/android/R.raw.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$raw: any;


/**
 * String resources. See
 * [R.string](https://developer.android.com/reference/android/R.string.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$string: any;


/**
 * Style resources. See
 * [R.style](https://developer.android.com/reference/android/R.style.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$style: any;


/**
 * Styleable resources. See
 * [R.styleable](https://developer.android.com/reference/android/R.styleable.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$styleable: any;


/**
 * Transition resources. See
 * [R.transition](https://developer.android.com/reference/android/R.transition.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$transition: any;


/**
 * XML resources. See
 * [R.xml](https://developer.android.com/reference/android/R.xml.html)
 * in the Android Developer Reference.
 */
declare var Titanium$Android$R$xml: any;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Android$R$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Android$R$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Android$R$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Android$R$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.Android.R.bubbleParent> property.
 */
declare function Titanium$Android$R$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Android.R.bubbleParent> property.
 */
declare function Titanium$Android$R$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Android.R.apiName> property.
 */
declare function Titanium$Android$R$getApiName(): string



/**
 * Gets the value of the <Titanium.Android.R.lifecycleContainer> property.
 */
declare function Titanium$Android$R$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Android.R.lifecycleContainer> property.
 */
declare function Titanium$Android$R$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Android.R.lifecycleContainer> property.
 */
declare function Titanium$Android$R$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



      declare var npm$namespace$Titanium$App: {
        addEventListener: typeof Titanium$App$addEventListener,
removeEventListener: typeof Titanium$App$removeEventListener,
fireEvent: typeof Titanium$App$fireEvent,
applyProperties: typeof Titanium$App$applyProperties,
fireSystemEvent: typeof Titanium$App$fireSystemEvent,
getArguments: typeof Titanium$App$getArguments,
getBubbleParent: typeof Titanium$App$getBubbleParent,
setBubbleParent: typeof Titanium$App$setBubbleParent,
getApiName: typeof Titanium$App$getApiName,
getLifecycleContainer: typeof Titanium$App$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$App$setLifecycleContainer,
getAccessibilityEnabled: typeof Titanium$App$getAccessibilityEnabled,
getAnalytics: typeof Titanium$App$getAnalytics,
getCopyright: typeof Titanium$App$getCopyright,
getDeployType: typeof Titanium$App$getDeployType,
getDescription: typeof Titanium$App$getDescription,
getGuid: typeof Titanium$App$getGuid,
getForceSplashAsSnapshot: typeof Titanium$App$getForceSplashAsSnapshot,
setForceSplashAsSnapshot: typeof Titanium$App$setForceSplashAsSnapshot,
getId: typeof Titanium$App$getId,
getInstallId: typeof Titanium$App$getInstallId,
getIdleTimerDisabled: typeof Titanium$App$getIdleTimerDisabled,
setIdleTimerDisabled: typeof Titanium$App$setIdleTimerDisabled,
getName: typeof Titanium$App$getName,
getProximityDetection: typeof Titanium$App$getProximityDetection,
setProximityDetection: typeof Titanium$App$setProximityDetection,
getProximityState: typeof Titanium$App$getProximityState,
getDisableNetworkActivityIndicator: typeof Titanium$App$getDisableNetworkActivityIndicator,
setDisableNetworkActivityIndicator: typeof Titanium$App$setDisableNetworkActivityIndicator,
getPublisher: typeof Titanium$App$getPublisher,
getSessionId: typeof Titanium$App$getSessionId,
getUrl: typeof Titanium$App$getUrl,
getVersion: typeof Titanium$App$getVersion,
getKeyboardVisible: typeof Titanium$App$getKeyboardVisible,
        bubbleParent: typeof Titanium$App$bubbleParent,
apiName: typeof Titanium$App$apiName,
lifecycleContainer: typeof Titanium$App$lifecycleContainer,
EVENT_ACCESSIBILITY_ANNOUNCEMENT: typeof Titanium$App$EVENT_ACCESSIBILITY_ANNOUNCEMENT,
EVENT_ACCESSIBILITY_CHANGED: typeof Titanium$App$EVENT_ACCESSIBILITY_CHANGED,
accessibilityEnabled: typeof Titanium$App$accessibilityEnabled,
analytics: typeof Titanium$App$analytics,
copyright: typeof Titanium$App$copyright,
deployType: typeof Titanium$App$deployType,
description: typeof Titanium$App$description,
guid: typeof Titanium$App$guid,
forceSplashAsSnapshot: typeof Titanium$App$forceSplashAsSnapshot,
id: typeof Titanium$App$id,
installId: typeof Titanium$App$installId,
idleTimerDisabled: typeof Titanium$App$idleTimerDisabled,
name: typeof Titanium$App$name,
proximityDetection: typeof Titanium$App$proximityDetection,
proximityState: typeof Titanium$App$proximityState,
disableNetworkActivityIndicator: typeof Titanium$App$disableNetworkActivityIndicator,
publisher: typeof Titanium$App$publisher,
sessionId: typeof Titanium$App$sessionId,
url: typeof Titanium$App$url,
version: typeof Titanium$App$version,
keyboardVisible: typeof Titanium$App$keyboardVisible,
trackUserInteraction: typeof Titanium$App$trackUserInteraction,
        
        
        Android: typeof npm$namespace$Titanium$App$Android,
Properties: typeof npm$namespace$Titanium$App$Properties,
iOS: typeof npm$namespace$Titanium$App$iOS,
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$App$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$App$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$App$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Convenience constant for system event "accessibilityannouncement".
 */
declare var Titanium$App$EVENT_ACCESSIBILITY_ANNOUNCEMENT: string;


/**
 * Convenience constant for system event "accessibilitychanged".
 */
declare var Titanium$App$EVENT_ACCESSIBILITY_CHANGED: string;


/**
 * Indicates whether Accessibility is enabled by the system.
 */
declare var Titanium$App$accessibilityEnabled: boolean;


/**
 * Indicates whether Analytics is enabled, determined by `tiapp.xml`.
 */
declare var Titanium$App$analytics: boolean;


/**
 * Application copyright statement, determined by `tiapp.xml`.
 */
declare var Titanium$App$copyright: string;


/**
 * Build type that reflects how the application was packaged.
 * Returns one of the following values:
 * * `development` (Simulator)
 * * `test` (Device)
 * * `production` (App Store / Adhoc)
 */
declare var Titanium$App$deployType: string;


/**
 * Application description, determined by `tiapp.xml`.
 */
declare var Titanium$App$description: string;


/**
 * Application globally-unique ID, determined by `tiapp.xml`.
 */
declare var Titanium$App$guid: string;


/**
 * Shows the application's splash screen on app resume.
 */
declare var Titanium$App$forceSplashAsSnapshot: boolean;


/**
 * Application ID, from `tiapp.xml`.
 */
declare var Titanium$App$id: string;


/**
 * The install ID for this application.
 */
declare var Titanium$App$installId: string;


/**
 * Determines whether the screen is locked when the device is idle.
 */
declare var Titanium$App$idleTimerDisabled: boolean;


/**
 * Application name, determined by `tiapp.xml`.
 */
declare var Titanium$App$name: string;


/**
 * Determines whether proximity detection is enabled.
 */
declare var Titanium$App$proximityDetection: boolean;


/**
 * Indicates the state of the device's proximity sensor, according to the
 * <Titanium.App.proximity> event.
 */
declare var Titanium$App$proximityState: boolean;


/**
 * Prevents network activity indicator from being displayed.
 */
declare var Titanium$App$disableNetworkActivityIndicator: boolean;


/**
 * Application publisher, from `tiapp.xml`.
 */
declare var Titanium$App$publisher: string;


/**
 * Unique session identifier for the current continuous run of the application.
 */
declare var Titanium$App$sessionId: string;


/**
 * Application URL, from `tiapp.xml`.
 */
declare var Titanium$App$url: string;


/**
 * Application version, from `tiapp.xml`.
 */
declare var Titanium$App$version: string;


/**
 * Indicates whether or not the soft keyboard is visible.
 */
declare var Titanium$App$keyboardVisible: boolean;


/**
 * Indicates whether or not the user interaction shoud be tracked.
 */
declare var Titanium$App$trackUserInteraction: boolean;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$App$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$App$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$App$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$App$applyProperties(props: any): void



/**
 * Fire a system-level event such as <Titanium.App.EVENT_ACCESSIBILITY_ANNOUNCEMENT>.
 */
declare function Titanium$App$fireSystemEvent(eventName: string, param?: any): void



/**
 * Returns the arguments passed to the application on startup.
 */
declare function Titanium$App$getArguments(): launchOptions



/**
 * Gets the value of the <Titanium.App.bubbleParent> property.
 */
declare function Titanium$App$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.App.bubbleParent> property.
 */
declare function Titanium$App$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.App.apiName> property.
 */
declare function Titanium$App$getApiName(): string



/**
 * Gets the value of the <Titanium.App.lifecycleContainer> property.
 */
declare function Titanium$App$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.App.lifecycleContainer> property.
 */
declare function Titanium$App$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.App.lifecycleContainer> property.
 */
declare function Titanium$App$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.App.accessibilityEnabled> property.
 */
declare function Titanium$App$getAccessibilityEnabled(): boolean



/**
 * Gets the value of the <Titanium.App.analytics> property.
 */
declare function Titanium$App$getAnalytics(): boolean



/**
 * Gets the value of the <Titanium.App.copyright> property.
 */
declare function Titanium$App$getCopyright(): string



/**
 * Gets the value of the <Titanium.App.deployType> property.
 */
declare function Titanium$App$getDeployType(): string



/**
 * Gets the value of the <Titanium.App.description> property.
 */
declare function Titanium$App$getDescription(): string



/**
 * Gets the value of the <Titanium.App.guid> property.
 */
declare function Titanium$App$getGuid(): string



/**
 * Gets the value of the <Titanium.App.forceSplashAsSnapshot> property.
 */
declare function Titanium$App$getForceSplashAsSnapshot(): boolean



/**
 * Sets the value of the <Titanium.App.forceSplashAsSnapshot> property.
 */
declare function Titanium$App$setForceSplashAsSnapshot(forceSplashAsSnapshot: boolean): void



/**
 * Gets the value of the <Titanium.App.id> property.
 */
declare function Titanium$App$getId(): string



/**
 * Gets the value of the <Titanium.App.installId> property.
 */
declare function Titanium$App$getInstallId(): string



/**
 * Gets the value of the <Titanium.App.idleTimerDisabled> property.
 */
declare function Titanium$App$getIdleTimerDisabled(): boolean



/**
 * Sets the value of the <Titanium.App.idleTimerDisabled> property.
 */
declare function Titanium$App$setIdleTimerDisabled(idleTimerDisabled: boolean): void



/**
 * Gets the value of the <Titanium.App.name> property.
 */
declare function Titanium$App$getName(): string



/**
 * Gets the value of the <Titanium.App.proximityDetection> property.
 */
declare function Titanium$App$getProximityDetection(): boolean



/**
 * Sets the value of the <Titanium.App.proximityDetection> property.
 */
declare function Titanium$App$setProximityDetection(proximityDetection: boolean): void



/**
 * Gets the value of the <Titanium.App.proximityState> property.
 */
declare function Titanium$App$getProximityState(): boolean



/**
 * Gets the value of the <Titanium.App.disableNetworkActivityIndicator> property.
 */
declare function Titanium$App$getDisableNetworkActivityIndicator(): boolean



/**
 * Sets the value of the <Titanium.App.disableNetworkActivityIndicator> property.
 */
declare function Titanium$App$setDisableNetworkActivityIndicator(disableNetworkActivityIndicator: boolean): void



/**
 * Gets the value of the <Titanium.App.publisher> property.
 */
declare function Titanium$App$getPublisher(): string



/**
 * Gets the value of the <Titanium.App.sessionId> property.
 */
declare function Titanium$App$getSessionId(): string



/**
 * Gets the value of the <Titanium.App.url> property.
 */
declare function Titanium$App$getUrl(): string



/**
 * Gets the value of the <Titanium.App.version> property.
 */
declare function Titanium$App$getVersion(): string



/**
 * Gets the value of the <Titanium.App.keyboardVisible> property.
 */
declare function Titanium$App$getKeyboardVisible(): boolean



      declare var npm$namespace$Titanium$App$Android: {
        addEventListener: typeof Titanium$App$Android$addEventListener,
removeEventListener: typeof Titanium$App$Android$removeEventListener,
fireEvent: typeof Titanium$App$Android$fireEvent,
applyProperties: typeof Titanium$App$Android$applyProperties,
getBubbleParent: typeof Titanium$App$Android$getBubbleParent,
setBubbleParent: typeof Titanium$App$Android$setBubbleParent,
getApiName: typeof Titanium$App$Android$getApiName,
getLifecycleContainer: typeof Titanium$App$Android$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$App$Android$setLifecycleContainer,
getAppVersionCode: typeof Titanium$App$Android$getAppVersionCode,
getAppVersionName: typeof Titanium$App$Android$getAppVersionName,
getLaunchIntent: typeof Titanium$App$Android$getLaunchIntent,
        bubbleParent: typeof Titanium$App$Android$bubbleParent,
apiName: typeof Titanium$App$Android$apiName,
lifecycleContainer: typeof Titanium$App$Android$lifecycleContainer,
R: typeof Titanium$App$Android$R,
appVersionCode: typeof Titanium$App$Android$appVersionCode,
appVersionName: typeof Titanium$App$Android$appVersionName,
launchIntent: typeof Titanium$App$Android$launchIntent,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$App$Android$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$App$Android$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$App$Android$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * The `R` namespace for application resources.
 */
declare var Titanium$App$Android$R: Titanium$App$Android$R;


/**
 * The version number of the application.
 */
declare var Titanium$App$Android$appVersionCode: number;


/**
 * The version name of the application.
 */
declare var Titanium$App$Android$appVersionName: string;


/**
 * Return the intent that was used to launch the application.
 */
declare var Titanium$App$Android$launchIntent: Titanium$Android$Intent;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$App$Android$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$App$Android$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$App$Android$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$App$Android$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.App.Android.bubbleParent> property.
 */
declare function Titanium$App$Android$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.App.Android.bubbleParent> property.
 */
declare function Titanium$App$Android$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.App.Android.apiName> property.
 */
declare function Titanium$App$Android$getApiName(): string



/**
 * Gets the value of the <Titanium.App.Android.lifecycleContainer> property.
 */
declare function Titanium$App$Android$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.App.Android.lifecycleContainer> property.
 */
declare function Titanium$App$Android$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.App.Android.lifecycleContainer> property.
 */
declare function Titanium$App$Android$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.App.Android.appVersionCode> property.
 */
declare function Titanium$App$Android$getAppVersionCode(): number



/**
 * Gets the value of the <Titanium.App.Android.appVersionName> property.
 */
declare function Titanium$App$Android$getAppVersionName(): string



/**
 * Gets the value of the <Titanium.App.Android.launchIntent> property.
 */
declare function Titanium$App$Android$getLaunchIntent(): Titanium$Android$Intent



/**
 * The Titanium binding of the native Android `R` class, giving access to application resources.
 */
declare type Titanium$App$Android$R = {} & Titanium$Proxy



      declare var npm$namespace$Titanium$App$Properties: {
        addEventListener: typeof Titanium$App$Properties$addEventListener,
removeEventListener: typeof Titanium$App$Properties$removeEventListener,
fireEvent: typeof Titanium$App$Properties$fireEvent,
applyProperties: typeof Titanium$App$Properties$applyProperties,
getBool: typeof Titanium$App$Properties$getBool,
getDouble: typeof Titanium$App$Properties$getDouble,
getInt: typeof Titanium$App$Properties$getInt,
getList: typeof Titanium$App$Properties$getList,
getObject: typeof Titanium$App$Properties$getObject,
getString: typeof Titanium$App$Properties$getString,
hasProperty: typeof Titanium$App$Properties$hasProperty,
listProperties: typeof Titanium$App$Properties$listProperties,
removeProperty: typeof Titanium$App$Properties$removeProperty,
removeAllProperties: typeof Titanium$App$Properties$removeAllProperties,
setBool: typeof Titanium$App$Properties$setBool,
setDouble: typeof Titanium$App$Properties$setDouble,
setInt: typeof Titanium$App$Properties$setInt,
setList: typeof Titanium$App$Properties$setList,
setObject: typeof Titanium$App$Properties$setObject,
setString: typeof Titanium$App$Properties$setString,
getBubbleParent: typeof Titanium$App$Properties$getBubbleParent,
setBubbleParent: typeof Titanium$App$Properties$setBubbleParent,
getApiName: typeof Titanium$App$Properties$getApiName,
getLifecycleContainer: typeof Titanium$App$Properties$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$App$Properties$setLifecycleContainer,
        bubbleParent: typeof Titanium$App$Properties$bubbleParent,
apiName: typeof Titanium$App$Properties$apiName,
lifecycleContainer: typeof Titanium$App$Properties$lifecycleContainer,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$App$Properties$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$App$Properties$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$App$Properties$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$App$Properties$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$App$Properties$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$App$Properties$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$App$Properties$applyProperties(props: any): void



/**
 * Returns the value of a property as a boolean data type.
 */
declare function Titanium$App$Properties$getBool(property: string, defaultValue?: boolean): boolean



/**
 * Returns the value of a property as a double (double-precision, floating point) data type.
 */
declare function Titanium$App$Properties$getDouble(property: string, defaultValue?: number): number



/**
 * Returns the value of a property as an integer data type.
 */
declare function Titanium$App$Properties$getInt(property: string, defaultValue?: number): number



/**
 * Returns the value of a property as an array data type.
 */
declare function Titanium$App$Properties$getList(property: string, defaultValue?: $ReadOnlyArray<any>): any[]



/**
 * Returns the value of a property as an object.
 */
declare function Titanium$App$Properties$getObject(property: string, defaultValue?: any): any



/**
 * Returns the value of a property as a string data type.
 */
declare function Titanium$App$Properties$getString(property: string, defaultValue?: string): string



/**
 * Indicates whether a property exists.
 */
declare function Titanium$App$Properties$hasProperty(property: string): boolean



/**
 * Returns an array of property names.
 */
declare function Titanium$App$Properties$listProperties(): any[]



/**
 * Removes a property if it exists, or does nothing otherwise.
 */
declare function Titanium$App$Properties$removeProperty(property: string): void



/**
 * Removes all properties that have been set by the user on runtime, or does nothing otherwise.
 */
declare function Titanium$App$Properties$removeAllProperties(): void



/**
 * Sets the value of a property as a boolean data type. The property will be created if it
 * does not exist.
 */
declare function Titanium$App$Properties$setBool(property: string, value: boolean): void



/**
 * Sets the value of a property as a double (double-precision, floating point) data type. The
 * property will be created if it does not exist.
 */
declare function Titanium$App$Properties$setDouble(property: string, value: number): void



/**
 * Sets the value of a property as an integer data type. The property will be created if it
 * does not exist.
 */
declare function Titanium$App$Properties$setInt(property: string, value: number): void



/**
 * Sets the value of a property as an array data type. The property will be created if it
 * does not exist.
 */
declare function Titanium$App$Properties$setList(property: string, value: $ReadOnlyArray<any>): void



/**
 * Sets the value of a property as an object data type. The property will be created if it
 * does not exist.
 */
declare function Titanium$App$Properties$setObject(property: string, value: any): void



/**
 * Sets the value of a property as a string data type. The property will be created if it
 * does not exist.
 */
declare function Titanium$App$Properties$setString(property: string, value: string): void



/**
 * Gets the value of the <Titanium.App.Properties.bubbleParent> property.
 */
declare function Titanium$App$Properties$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.App.Properties.bubbleParent> property.
 */
declare function Titanium$App$Properties$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.App.Properties.apiName> property.
 */
declare function Titanium$App$Properties$getApiName(): string



/**
 * Gets the value of the <Titanium.App.Properties.lifecycleContainer> property.
 */
declare function Titanium$App$Properties$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.App.Properties.lifecycleContainer> property.
 */
declare function Titanium$App$Properties$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.App.Properties.lifecycleContainer> property.
 */
declare function Titanium$App$Properties$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



      declare var npm$namespace$Titanium$App$iOS: {
        addEventListener: typeof Titanium$App$iOS$addEventListener,
removeEventListener: typeof Titanium$App$iOS$removeEventListener,
fireEvent: typeof Titanium$App$iOS$fireEvent,
applyProperties: typeof Titanium$App$iOS$applyProperties,
createUserDefaults: typeof Titanium$App$iOS$createUserDefaults,
cancelAllLocalNotifications: typeof Titanium$App$iOS$cancelAllLocalNotifications,
cancelLocalNotification: typeof Titanium$App$iOS$cancelLocalNotification,
registerBackgroundService: typeof Titanium$App$iOS$registerBackgroundService,
registerUserNotificationSettings: typeof Titanium$App$iOS$registerUserNotificationSettings,
scheduleLocalNotification: typeof Titanium$App$iOS$scheduleLocalNotification,
setMinimumBackgroundFetchInterval: typeof Titanium$App$iOS$setMinimumBackgroundFetchInterval,
endBackgroundHandler: typeof Titanium$App$iOS$endBackgroundHandler,
sendWatchExtensionReply: typeof Titanium$App$iOS$sendWatchExtensionReply,
createSearchQuery: typeof Titanium$App$iOS$createSearchQuery,
createSearchableIndex: typeof Titanium$App$iOS$createSearchableIndex,
createSearchableItem: typeof Titanium$App$iOS$createSearchableItem,
createSearchableItemAttributeSet: typeof Titanium$App$iOS$createSearchableItemAttributeSet,
createUserActivity: typeof Titanium$App$iOS$createUserActivity,
createUserNotificationAction: typeof Titanium$App$iOS$createUserNotificationAction,
createUserNotificationCategory: typeof Titanium$App$iOS$createUserNotificationCategory,
getBubbleParent: typeof Titanium$App$iOS$getBubbleParent,
setBubbleParent: typeof Titanium$App$iOS$setBubbleParent,
getApiName: typeof Titanium$App$iOS$getApiName,
getCurrentUserNotificationSettings: typeof Titanium$App$iOS$getCurrentUserNotificationSettings,
getSupportedUserActivityTypes: typeof Titanium$App$iOS$getSupportedUserActivityTypes,
getApplicationOpenSettingsURL: typeof Titanium$App$iOS$getApplicationOpenSettingsURL,
        bubbleParent: typeof Titanium$App$iOS$bubbleParent,
apiName: typeof Titanium$App$iOS$apiName,
EVENT_ACCESSIBILITY_LAYOUT_CHANGED: typeof Titanium$App$iOS$EVENT_ACCESSIBILITY_LAYOUT_CHANGED,
EVENT_ACCESSIBILITY_SCREEN_CHANGED: typeof Titanium$App$iOS$EVENT_ACCESSIBILITY_SCREEN_CHANGED,
BACKGROUNDFETCHINTERVAL_MIN: typeof Titanium$App$iOS$BACKGROUNDFETCHINTERVAL_MIN,
BACKGROUNDFETCHINTERVAL_NEVER: typeof Titanium$App$iOS$BACKGROUNDFETCHINTERVAL_NEVER,
USER_NOTIFICATION_TYPE_NONE: typeof Titanium$App$iOS$USER_NOTIFICATION_TYPE_NONE,
USER_NOTIFICATION_TYPE_BADGE: typeof Titanium$App$iOS$USER_NOTIFICATION_TYPE_BADGE,
USER_NOTIFICATION_TYPE_SOUND: typeof Titanium$App$iOS$USER_NOTIFICATION_TYPE_SOUND,
USER_NOTIFICATION_TYPE_ALERT: typeof Titanium$App$iOS$USER_NOTIFICATION_TYPE_ALERT,
USER_NOTIFICATION_TYPE_CRITICAL_ALERT: typeof Titanium$App$iOS$USER_NOTIFICATION_TYPE_CRITICAL_ALERT,
USER_NOTIFICATION_TYPE_PROVISIONAL: typeof Titanium$App$iOS$USER_NOTIFICATION_TYPE_PROVISIONAL,
USER_NOTIFICATION_TYPE_PROVIDES_APP_NOTIFICATION_SETTINGS: typeof Titanium$App$iOS$USER_NOTIFICATION_TYPE_PROVIDES_APP_NOTIFICATION_SETTINGS,
USER_NOTIFICATION_ACTIVATION_MODE_BACKGROUND: typeof Titanium$App$iOS$USER_NOTIFICATION_ACTIVATION_MODE_BACKGROUND,
USER_NOTIFICATION_ACTIVATION_MODE_FOREGROUND: typeof Titanium$App$iOS$USER_NOTIFICATION_ACTIVATION_MODE_FOREGROUND,
USER_NOTIFICATION_BEHAVIOR_DEFAULT: typeof Titanium$App$iOS$USER_NOTIFICATION_BEHAVIOR_DEFAULT,
USER_NOTIFICATION_BEHAVIOR_TEXTINPUT: typeof Titanium$App$iOS$USER_NOTIFICATION_BEHAVIOR_TEXTINPUT,
USER_NOTIFICATION_AUTHORIZATION_STATUS_NOT_DETERMINED: typeof Titanium$App$iOS$USER_NOTIFICATION_AUTHORIZATION_STATUS_NOT_DETERMINED,
USER_NOTIFICATION_AUTHORIZATION_STATUS_AUTHORIZED: typeof Titanium$App$iOS$USER_NOTIFICATION_AUTHORIZATION_STATUS_AUTHORIZED,
USER_NOTIFICATION_AUTHORIZATION_STATUS_DENIED: typeof Titanium$App$iOS$USER_NOTIFICATION_AUTHORIZATION_STATUS_DENIED,
USER_NOTIFICATION_AUTHORIZATION_STATUS_PROVISIONAL: typeof Titanium$App$iOS$USER_NOTIFICATION_AUTHORIZATION_STATUS_PROVISIONAL,
USER_NOTIFICATION_SETTING_NOT_SUPPORTED: typeof Titanium$App$iOS$USER_NOTIFICATION_SETTING_NOT_SUPPORTED,
USER_NOTIFICATION_SETTING_ENABLED: typeof Titanium$App$iOS$USER_NOTIFICATION_SETTING_ENABLED,
USER_NOTIFICATION_SETTING_DISABLED: typeof Titanium$App$iOS$USER_NOTIFICATION_SETTING_DISABLED,
USER_NOTIFICATION_ALERT_STYLE_NONE: typeof Titanium$App$iOS$USER_NOTIFICATION_ALERT_STYLE_NONE,
USER_NOTIFICATION_ALERT_STYLE_ALERT: typeof Titanium$App$iOS$USER_NOTIFICATION_ALERT_STYLE_ALERT,
USER_NOTIFICATION_ALERT_STYLE_BANNER: typeof Titanium$App$iOS$USER_NOTIFICATION_ALERT_STYLE_BANNER,
USER_NOTIFICATION_CATEGORY_OPTION_NONE: typeof Titanium$App$iOS$USER_NOTIFICATION_CATEGORY_OPTION_NONE,
USER_NOTIFICATION_CATEGORY_OPTION_CUSTOM_DISMISS_ACTION: typeof Titanium$App$iOS$USER_NOTIFICATION_CATEGORY_OPTION_CUSTOM_DISMISS_ACTION,
USER_NOTIFICATION_CATEGORY_OPTION_ALLOW_IN_CARPLAY: typeof Titanium$App$iOS$USER_NOTIFICATION_CATEGORY_OPTION_ALLOW_IN_CARPLAY,
USER_NOTIFICATION_CATEGORY_OPTION_HIDDEN_PREVIEWS_SHOW_TITLE: typeof Titanium$App$iOS$USER_NOTIFICATION_CATEGORY_OPTION_HIDDEN_PREVIEWS_SHOW_TITLE,
USER_NOTIFICATION_CATEGORY_OPTION_HIDDEN_PREVIEWS_SHOW_SUBTITLE: typeof Titanium$App$iOS$USER_NOTIFICATION_CATEGORY_OPTION_HIDDEN_PREVIEWS_SHOW_SUBTITLE,
UTTYPE_TEXT: typeof Titanium$App$iOS$UTTYPE_TEXT,
UTTYPE_PLAIN_TEXT: typeof Titanium$App$iOS$UTTYPE_PLAIN_TEXT,
UTTYPE_UTF8_PLAIN_TEXT: typeof Titanium$App$iOS$UTTYPE_UTF8_PLAIN_TEXT,
UTTYPE_UTF16_EXTERNAL_PLAIN_TEXT: typeof Titanium$App$iOS$UTTYPE_UTF16_EXTERNAL_PLAIN_TEXT,
UTTYPE_UTF16_PLAIN_TEXT: typeof Titanium$App$iOS$UTTYPE_UTF16_PLAIN_TEXT,
UTTYPE_RTF: typeof Titanium$App$iOS$UTTYPE_RTF,
UTTYPE_HTML: typeof Titanium$App$iOS$UTTYPE_HTML,
UTTYPE_XML: typeof Titanium$App$iOS$UTTYPE_XML,
UTTYPE_PDF: typeof Titanium$App$iOS$UTTYPE_PDF,
UTTYPE_RTFD: typeof Titanium$App$iOS$UTTYPE_RTFD,
UTTYPE_FLAT_RTFD: typeof Titanium$App$iOS$UTTYPE_FLAT_RTFD,
UTTYPE_TXN_TEXT_AND_MULTIMEDIA_DATA: typeof Titanium$App$iOS$UTTYPE_TXN_TEXT_AND_MULTIMEDIA_DATA,
UTTYPE_WEB_ARCHIVE: typeof Titanium$App$iOS$UTTYPE_WEB_ARCHIVE,
UTTYPE_IMAGE: typeof Titanium$App$iOS$UTTYPE_IMAGE,
UTTYPE_JPEG: typeof Titanium$App$iOS$UTTYPE_JPEG,
UTTYPE_JPEG2000: typeof Titanium$App$iOS$UTTYPE_JPEG2000,
UTTYPE_TIFF: typeof Titanium$App$iOS$UTTYPE_TIFF,
UTTYPE_PICT: typeof Titanium$App$iOS$UTTYPE_PICT,
UTTYPE_GIF: typeof Titanium$App$iOS$UTTYPE_GIF,
UTTYPE_PNG: typeof Titanium$App$iOS$UTTYPE_PNG,
UTTYPE_QUICKTIME_IMAGE: typeof Titanium$App$iOS$UTTYPE_QUICKTIME_IMAGE,
UTTYPE_APPLE_ICNS: typeof Titanium$App$iOS$UTTYPE_APPLE_ICNS,
UTTYPE_BMP: typeof Titanium$App$iOS$UTTYPE_BMP,
UTTYPE_ICO: typeof Titanium$App$iOS$UTTYPE_ICO,
UTTYPE_MOVIE: typeof Titanium$App$iOS$UTTYPE_MOVIE,
UTTYPE_VIDEO: typeof Titanium$App$iOS$UTTYPE_VIDEO,
UTTYPE_AUDIO: typeof Titanium$App$iOS$UTTYPE_AUDIO,
UTTYPE_QUICKTIME_MOVIE: typeof Titanium$App$iOS$UTTYPE_QUICKTIME_MOVIE,
UTTYPE_MPEG: typeof Titanium$App$iOS$UTTYPE_MPEG,
UTTYPE_MPEG4: typeof Titanium$App$iOS$UTTYPE_MPEG4,
UTTYPE_MP3: typeof Titanium$App$iOS$UTTYPE_MP3,
UTTYPE_MPEG4_AUDIO: typeof Titanium$App$iOS$UTTYPE_MPEG4_AUDIO,
UTTYPE_APPLE_PROTECTED_MPEG4_AUDIO: typeof Titanium$App$iOS$UTTYPE_APPLE_PROTECTED_MPEG4_AUDIO,
currentUserNotificationSettings: typeof Titanium$App$iOS$currentUserNotificationSettings,
supportedUserActivityTypes: typeof Titanium$App$iOS$supportedUserActivityTypes,
applicationOpenSettingsURL: typeof Titanium$App$iOS$applicationOpenSettingsURL,
        
        
        UserNotificationCenter: typeof npm$namespace$Titanium$App$iOS$UserNotificationCenter,
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$App$iOS$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$App$iOS$apiName: string;


/**
 * Convenience constant for system event "accessibilitylayoutchanged".
 */
declare var Titanium$App$iOS$EVENT_ACCESSIBILITY_LAYOUT_CHANGED: string;


/**
 * Convenience constant for system event "accessibilityscreenchanged".
 */
declare var Titanium$App$iOS$EVENT_ACCESSIBILITY_SCREEN_CHANGED: string;


/**
 * Use with [setMinimumBackgroundFetchInterval](Titanium.App.iOS.setMinimumBackgroundFetchInterval) method.
 * Specifies the smallest fetch interval supported by the system.
 */
declare var Titanium$App$iOS$BACKGROUNDFETCHINTERVAL_MIN: number;


/**
 * Use with [setMinimumBackgroundFetchInterval](Titanium.App.iOS.setMinimumBackgroundFetchInterval) method.
 * Used to specify a fetch interval large enough to prevent fetch operations from occurring.
 */
declare var Titanium$App$iOS$BACKGROUNDFETCHINTERVAL_NEVER: number;


/**
 * The application may not present any UI upon a notification being received.
 * Use with the [types](UserNotificationSettings.types) property.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_TYPE_NONE: number;


/**
 * The application may badge its icon upon a notification being received.
 * Use with the [types](UserNotificationSettings.types) property.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_TYPE_BADGE: number;


/**
 * The application may play a sound upon a notification being received.
 * Use with the [types](UserNotificationSettings.types) property.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_TYPE_SOUND: number;


/**
 * The application may display an alert upon a notification being received.
 * Use with the [types](UserNotificationSettings.types) property.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_TYPE_ALERT: number;


/**
 * The ability to play sounds for critical alerts.
 * Use with the [types](UserNotificationSettings.types) property.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_TYPE_CRITICAL_ALERT: number;


/**
 * The ability to post non-interrupting notifications provisionally to the Notification Center.
 * Use with the [types](UserNotificationSettings.types) property.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_TYPE_PROVISIONAL: number;


/**
 * An option indicating the system should display a button for in-app notification settings.
 * Use with the [types](UserNotificationSettings.types) property.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_TYPE_PROVIDES_APP_NOTIFICATION_SETTINGS: number;


/**
 * The action will execute in background. Use with the
 * [activationMode](Titanium.App.iOS.UserNotificationAction.activationMode) property.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_ACTIVATION_MODE_BACKGROUND: number;


/**
 * The action will launch the application and execute in the foreground.
 * Use with the [activationMode](Titanium.App.iOS.UserNotificationAction.activationMode) property.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_ACTIVATION_MODE_FOREGROUND: number;


/**
 * Default action behavior with no additional action support.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_BEHAVIOR_DEFAULT: number;


/**
 * Provides a textfield with the notification for the user to enter a text response.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_BEHAVIOR_TEXTINPUT: number;


/**
 * The user has not yet made a choice regarding whether the application may post
 * user notifications.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_AUTHORIZATION_STATUS_NOT_DETERMINED: number;


/**
 * The application is authorized to post user notifications.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_AUTHORIZATION_STATUS_AUTHORIZED: number;


/**
 * The application is not authorized to post user notifications.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_AUTHORIZATION_STATUS_DENIED: number;


/**
 * The application is provisionally authorized to post non-interruptive user notifications.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_AUTHORIZATION_STATUS_PROVISIONAL: number;


/**
 * The application does not support this notification type.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_SETTING_NOT_SUPPORTED: number;


/**
 * The notification setting is turned on.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_SETTING_ENABLED: number;


/**
 * The notification setting is turned off.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_SETTING_DISABLED: number;


/**
 * No banner or alert dialog is presented when the notification is received.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_ALERT_STYLE_NONE: number;


/**
 * A alert dialog is presented when the notification is received.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_ALERT_STYLE_ALERT: number;


/**
 * A banner is presented when the notification is received.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_ALERT_STYLE_BANNER: number;


/**
 * No options.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_CATEGORY_OPTION_NONE: number;


/**
 * Send dismiss actions to the UNUserNotificationCenter object's delegate for handling.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_CATEGORY_OPTION_CUSTOM_DISMISS_ACTION: number;


/**
 * Allow CarPlay to display notifications of this type.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_CATEGORY_OPTION_ALLOW_IN_CARPLAY: number;


/**
 * Show the notification's title, even if the user has disabled notification previews for the app.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_CATEGORY_OPTION_HIDDEN_PREVIEWS_SHOW_TITLE: number;


/**
 * Show the notification's subtitle, even if the user has disabled notification previews for the app.
 */
declare var Titanium$App$iOS$USER_NOTIFICATION_CATEGORY_OPTION_HIDDEN_PREVIEWS_SHOW_SUBTITLE: number;


/**
 * Uniform type identifier for all text types.
 */
declare var Titanium$App$iOS$UTTYPE_TEXT: string;


/**
 * Uniform type identifier for a plain text type, equivalent to MIME type text/plain.
 */
declare var Titanium$App$iOS$UTTYPE_PLAIN_TEXT: string;


/**
 * Uniform type identifier for Unicode-8 plain text type.
 */
declare var Titanium$App$iOS$UTTYPE_UTF8_PLAIN_TEXT: string;


/**
 * Uniform type identifier for Unicode-16 with byte-order mark (BOM), or if BOM is not present,
 * an external representation byte order (big-endian).
 */
declare var Titanium$App$iOS$UTTYPE_UTF16_EXTERNAL_PLAIN_TEXT: string;


/**
 * Uniform type identifier for Unicode-16, native byte order, with an optional byte-order mark (BOM).
 */
declare var Titanium$App$iOS$UTTYPE_UTF16_PLAIN_TEXT: string;


/**
 * Uniform type identifier for Rich Text.
 */
declare var Titanium$App$iOS$UTTYPE_RTF: string;


/**
 * Uniform type identifier for HTML.
 */
declare var Titanium$App$iOS$UTTYPE_HTML: string;


/**
 * Uniform type identifier for XML.
 */
declare var Titanium$App$iOS$UTTYPE_XML: string;


/**
 * Uniform type identifier for PDF data.
 */
declare var Titanium$App$iOS$UTTYPE_PDF: string;


/**
 * Uniform type identifier for Rich Text Format Directory, that is, Rich Text with content embedding, on-disk format.
 */
declare var Titanium$App$iOS$UTTYPE_RTFD: string;


/**
 * Uniform type identifier for Rich Text with content embedding, pasteboard format.
 */
declare var Titanium$App$iOS$UTTYPE_FLAT_RTFD: string;


/**
 * Uniform type identifier for MLTE (Textension) format for mixed text and multimedia data.
 */
declare var Titanium$App$iOS$UTTYPE_TXN_TEXT_AND_MULTIMEDIA_DATA: string;


/**
 * Uniform type identifier for WebKit webarchive format.
 */
declare var Titanium$App$iOS$UTTYPE_WEB_ARCHIVE: string;


/**
 * Uniform type identifier for all image types.
 */
declare var Titanium$App$iOS$UTTYPE_IMAGE: string;


/**
 * Uniform type identifier for JPEG images.
 */
declare var Titanium$App$iOS$UTTYPE_JPEG: string;


/**
 * Uniform type identifier for JPEG 2000 images.
 */
declare var Titanium$App$iOS$UTTYPE_JPEG2000: string;


/**
 * Uniform type identifier for TIFF images.
 */
declare var Titanium$App$iOS$UTTYPE_TIFF: string;


/**
 * Uniform type identifier for PICT images.
 */
declare var Titanium$App$iOS$UTTYPE_PICT: string;


/**
 * Uniform type identifier for GIF images.
 */
declare var Titanium$App$iOS$UTTYPE_GIF: string;


/**
 * Uniform type identifier for PNG images.
 */
declare var Titanium$App$iOS$UTTYPE_PNG: string;


/**
 * Uniform type identifier for QuickTime images.
 */
declare var Titanium$App$iOS$UTTYPE_QUICKTIME_IMAGE: string;


/**
 * Uniform type identifier for Mac OS icon images.
 */
declare var Titanium$App$iOS$UTTYPE_APPLE_ICNS: string;


/**
 * Uniform type identifier for Windows bitmap images.
 */
declare var Titanium$App$iOS$UTTYPE_BMP: string;


/**
 * Uniform type identifier for Windows icon images.
 */
declare var Titanium$App$iOS$UTTYPE_ICO: string;


/**
 * Uniform type identifier for all audiovisual content.
 */
declare var Titanium$App$iOS$UTTYPE_MOVIE: string;


/**
 * Uniform type identifier for all video content without audio.
 */
declare var Titanium$App$iOS$UTTYPE_VIDEO: string;


/**
 * Uniform type identifier for all audio content.
 */
declare var Titanium$App$iOS$UTTYPE_AUDIO: string;


/**
 * Uniform type identifier for QuickTime movies.
 */
declare var Titanium$App$iOS$UTTYPE_QUICKTIME_MOVIE: string;


/**
 * Uniform type identifier for MPEG-1 and MPEG-2 content.
 */
declare var Titanium$App$iOS$UTTYPE_MPEG: string;


/**
 * Uniform type identifier for MPEG-4 content.
 */
declare var Titanium$App$iOS$UTTYPE_MPEG4: string;


/**
 * Uniform type identifier for MP3 audio.
 */
declare var Titanium$App$iOS$UTTYPE_MP3: string;


/**
 * Uniform type identifier for MPEG-4 audio.
 */
declare var Titanium$App$iOS$UTTYPE_MPEG4_AUDIO: string;


/**
 * Uniform type identifier for protected MPEG-4 audio (iTunes music store format).
 */
declare var Titanium$App$iOS$UTTYPE_APPLE_PROTECTED_MPEG4_AUDIO: string;


/**
 * Notification types and user notification categories the application is registered to use.
 */
declare var Titanium$App$iOS$currentUserNotificationSettings: UserNotificationSettings;


/**
 * Provides an Array of the NSUserActivityTypes keys defined within your Titanium project.
 */
declare var Titanium$App$iOS$supportedUserActivityTypes: string[];


/**
 * Returns a URL to open the app's settings.
 */
declare var Titanium$App$iOS$applicationOpenSettingsURL: string;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$App$iOS$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$App$iOS$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$App$iOS$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$App$iOS$applyProperties(props: any): void



/**
 * Creates and returns an instance of Titanium.App.iOS.UserDefaults.
 */
declare function Titanium$App$iOS$createUserDefaults(parameters: any): Titanium$App$iOS$UserDefaults



/**
 * Cancels all scheduled local notifications.
 */
declare function Titanium$App$iOS$cancelAllLocalNotifications(): void



/**
 * Cancels a local notification.
 */
declare function Titanium$App$iOS$cancelLocalNotification(id: number): void



/**
 * Cancels a local notification.
 */
declare function Titanium$App$iOS$cancelLocalNotification(id: string): void



/**
 * Registers a service to run when the application is placed in the background.
 */
declare function Titanium$App$iOS$registerBackgroundService(params: any): Titanium$App$iOS$BackgroundService



/**
 * Registers the application to use the requested notification types and categories.
 */
declare function Titanium$App$iOS$registerUserNotificationSettings(params: UserNotificationSettings): void



/**
 * Schedule a local notification.
 */
declare function Titanium$App$iOS$scheduleLocalNotification(params: NotificationParams): Titanium$App$iOS$LocalNotification



/**
 * Specifies the minimum amount of time that must elapse between background fetch operations.
 * Available only on iOS 7 and later.
 */
declare function Titanium$App$iOS$setMinimumBackgroundFetchInterval(fetchInterval: number): void



/**
 * Marks the end of the app execution after initiating the download operation. Available only on iOS 7 and later.
 */
declare function Titanium$App$iOS$endBackgroundHandler(handlerID: string): void



/**
 * Marks the end of an `openParentApplication:reply` execution by a WatchKit extension.
 */
declare function Titanium$App$iOS$sendWatchExtensionReply(handlerId: string, userInfo: any): void



/**
 * Creates and returns an instance of <Titanium.App.iOS.SearchQuery>.
 */
declare function Titanium$App$iOS$createSearchQuery(parameters?: any): Titanium$App$iOS$SearchQuery



/**
 * Creates and returns an instance of <Titanium.App.iOS.SearchableIndex>.
 */
declare function Titanium$App$iOS$createSearchableIndex(parameters?: any): Titanium$App$iOS$SearchableIndex



/**
 * Creates and returns an instance of <Titanium.App.iOS.SearchableItem>.
 */
declare function Titanium$App$iOS$createSearchableItem(parameters?: any): Titanium$App$iOS$SearchableItem



/**
 * Creates and returns an instance of <Titanium.App.iOS.SearchableItemAttributeSet>.
 */
declare function Titanium$App$iOS$createSearchableItemAttributeSet(parameters?: any): Titanium$App$iOS$SearchableItemAttributeSet



/**
 * Creates and returns an instance of <Titanium.App.iOS.UserActivity>.
 */
declare function Titanium$App$iOS$createUserActivity(parameters?: any): Titanium$App$iOS$UserActivity



/**
 * Creates and returns an instance of <Titanium.App.iOS.UserNotificationAction>.
 */
declare function Titanium$App$iOS$createUserNotificationAction(parameters?: any): Titanium$App$iOS$UserNotificationAction



/**
 * Creates and returns an instance of <Titanium.App.iOS.UserNotificationCategory>.
 */
declare function Titanium$App$iOS$createUserNotificationCategory(parameters?: any): Titanium$App$iOS$UserNotificationCategory



/**
 * Gets the value of the <Titanium.App.iOS.bubbleParent> property.
 */
declare function Titanium$App$iOS$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.App.iOS.bubbleParent> property.
 */
declare function Titanium$App$iOS$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.App.iOS.apiName> property.
 */
declare function Titanium$App$iOS$getApiName(): string



/**
 * Gets the value of the <Titanium.App.iOS.currentUserNotificationSettings> property.
 */
declare function Titanium$App$iOS$getCurrentUserNotificationSettings(): UserNotificationSettings



/**
 * Gets the value of the <Titanium.App.iOS.supportedUserActivityTypes> property.
 */
declare function Titanium$App$iOS$getSupportedUserActivityTypes(): string[]



/**
 * Gets the value of the <Titanium.App.iOS.applicationOpenSettingsURL> property.
 */
declare function Titanium$App$iOS$getApplicationOpenSettingsURL(): string



/**
 * A service that runs when the application is placed in the background.
 */
declare type Titanium$App$iOS$BackgroundService = {

/**
 * A local URL to a JavaScript file containing the code to run in the background.
 */
url: string,

/**
 * Stops the service from running during the current background session to conserve resources.
 */
stop(): void,

/**
 * Unregisters the background service.
 */
unregister(): void,

/**
 * Gets the value of the <Titanium.App.iOS.BackgroundService.url> property.
 */
getUrl(): string,

/**
 * Sets the value of the <Titanium.App.iOS.BackgroundService.url> property.
 */
setUrl(url: string): void
} & Titanium$Proxy



/**
 * A local notification to alert the user of new or pending application information.
 */
declare type Titanium$App$iOS$LocalNotification = {

/**
 * Cancels the pending notification.
 */
cancel(): void
} & Titanium$Proxy



/**
 * A search query object manages the criteria to apply when searching app content that you have previously
 * indexed by using the Core Spotlight APIs.
 */
declare type Titanium$App$iOS$SearchQuery = {

/**
 * A formatted string that defines the matching criteria to apply to indexed items.
 */
queryString: string,

/**
 * An array of strings that represent the attributes of indexed items.
 */
attributes: string[],

/**
 * Asynchronously queries the index for items that match the query object's specifications.
 */
start(): void,

/**
 * Cancels a query operation.
 */
cancel(): void,

/**
 * A Boolean value that indicates if the query has been cancelled (`true`) or not (`false`).
 */
isCancelled(): boolean
} & Titanium$Proxy



/**
 * The SearchableIndex module is used to add or remove Ti.App.iOS.SearchableItem objects from the device search index.
 */
declare type Titanium$App$iOS$SearchableIndex = {

/**
 * Indicates whether indexing is supported by the device.
 */
isSupported(): boolean,

/**
 * Adds an array of Titanium.App.iOS.SearchableItem objects to the default search index.
 */
addToDefaultSearchableIndex(
Array: $ReadOnlyArray<Titanium$App$iOS$SearchableItem>,
callback: (param0: any) => any): void,

/**
 * Removes all search items added by the application.
 */
deleteAllSearchableItems(callback: (param0: any) => any): void,

/**
 * Removes search items based on an array of domain identifiers.
 */
deleteAllSearchableItemByDomainIdenifiers(Array: $ReadOnlyArray<string>, callback: (param0: any) => any): void,

/**
 * Removes search items based on an array of identifiers.
 */
deleteSearchableItemsByIdentifiers(Array: $ReadOnlyArray<string>, callback: (param0: any) => any): void
} & Titanium$Proxy



/**
 * Used to create a unique object containing all of the search information that will appear in the device search index.
 */
declare type Titanium$App$iOS$SearchableItem = {

/**
 * Set of metadata properties to display for the item.
 */
attributeSet: Titanium$App$iOS$SearchableItemAttributeSet,

/**
 * Identifier that represents the "domain" or owner of this item.
 */
domainIdentifier: string,

/**
 * Searchable items have an expiration date or time to live.  By default it is set to one month.
 */
expirationDate: string,

/**
 * Unique identifier to your application group.
 */
uniqueIdentifier: string,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItem.domainIdentifier> property.
 */
getDomainIdentifier(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItem.domainIdentifier> property.
 */
setDomainIdentifier(domainIdentifier: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItem.expirationDate> property.
 */
getExpirationDate(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItem.expirationDate> property.
 */
setExpirationDate(expirationDate: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItem.uniqueIdentifier> property.
 */
getUniqueIdentifier(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItem.uniqueIdentifier> property.
 */
setUniqueIdentifier(uniqueIdentifier: string): void
} & Titanium$Proxy



/**
 * The SearchableItemAttributeSet module defines metadata properties for SearchItem and UserActivity objects.
 */
declare type Titanium$App$iOS$SearchableItemAttributeSet = {

/**
 * Content type of the attribute set.
 */
itemContentType: string,

/**
 * A localized string to be displayed in the UI for this item.
 */
displayName: string,

/**
 * An array of localized strings of alternate display names for this item.
 */
alternateNames: string[],

/**
 * The complete path to the item.
 */
path: string,

/**
 * File URL representing the content to be indexed.
 */
contentURL: string,

/**
 * File URL pointing to a thumbnail image for this item.
 */
thumbnailURL: string,

/**
 * Image data for thumbnail for this item.
 */
thumbnailData: string | Titanium$Blob,

/**
 * For activities this is the unique identifier for the item this activity is related to.
 */
relatedUniqueIdentifier: string,

/**
 * The date that the last metadata attribute was changed.
 */
metadataModificationDate: string,

/**
 * UTI Type pedigree for an item.
 */
contentType: string,

/**
 * Array of strings related to the content tree of the item.
 */
contentTypeTree: string[],

/**
 * Represents keywords associated with this particular item. Example keywords might be Birthday etc.
 */
keywords: string[],

/**
 * The title of the particular item.
 */
title: string,

/**
 * Subject of the the item.
 */
subject: string,

/**
 * Theme of the the item.
 */
theme: string,

/**
 * An account of the content of the resource.
 */
contentDescription: string,

/**
 * Used to reference to the resource within a given context.
 */
identifier: string,

/**
 * A class of entity for whom the resource is intended or useful.
 */
audiences: string[],

/**
 * Size of the document in MB.
 */
fileSize: number,

/**
 * Number of pages in the item.
 */
pageCount: number,

/**
 * Width in points (72 points per inch) of the document page.
 */
pageWidth: number,

/**
 * Height in points (72 points per inch) of the document page.
 */
pageHeight: number,

/**
 * Security (encryption) method used in the file.
 */
securityMethod: string,

/**
 * Application used to create the document content (e.g. "Word","Framemaker", etc.).
 */
creator: string,

/**
 * Software used to convert the original content into a PDF stream.
 */
encodingApplications: string[],

/**
 * Kind that the item represents.
 */
kind: string,

/**
 * Array of font names used in the item.
 */
fontNames: string[],

/**
 * The sample rate of the audio data contained in the file.
 */
audioSampleRate: number,

/**
 * The number of channels in the audio data contained in the file.
 */
audioChannelCount: number,

/**
 * The tempo of the music contained in the audio file in Beats Per Minute.
 */
tempo: number,

/**
 * The musical key of the song/composition contained in an audio file.
 */
keySignature: string,

/**
 * The time signature of the musical composition contained in the audio/MIDI file.
 */
timeSignature: string,

/**
 * The name of the application that encoded the data contained in the audio file.
 */
audioEncodingApplication: string,

/**
 * The composer of the song/composition contained in the audio file.
 */
composer: string,

/**
 * The lyricist/text writer for song/composition contained in the audio file.
 */
lyricist: string,

/**
 * The title for a collection of media.
 */
album: string,

/**
 * The artist for the media.
 */
artist: string,

/**
 * The track number of a song/composition when it is part of an album.
 */
audioTrackNumber: number,

/**
 * The recording date of the song/composition.
 */
recordingDate: string,

/**
 * The musical genre of the song/composition contained in the audio file.
 */
musicalGenre: string,

/**
 * Used to indicates whether the MIDI sequence contained in the file is setup for use with a General MIDI device.
 */
generalMIDISequence: number,

/**
 * Metadata attribute that stores the category of instrument.
 */
musicalInstrumentCategory: string,

/**
 * Metadata attribute that stores the name of instrument.
 */
musicalInstrumentName: string,

/**
 * Used to indicate that using the phone number is appropriate.
 */
supportsPhoneCall: number,

/**
 * Used to determine if navigation is supported.
 */
supportsNavigation: number,

/**
 * Title displayed in the search container
 */
containerTitle: string,

/**
 * Display of the search container
 */
containerDisplayName: string,

/**
 * Identifier for the search container
 */
containerIdentifier: string,

/**
 * Order the search container is displayed.
 */
containerOrder: number,

/**
 * The list of editor/editors that have worked on this item.
 */
editors: string[],

/**
 * The list of people who are visible in an image or movie or written about in a document.
 */
participants: string[],

/**
 * The list of projects that this item is part of.
 */
projects: string[],

/**
 * The date that the file was last downloaded / received.
 */
downloadedDate: string,

/**
 * The date that the item was last used.
 */
lastUsedDate: string,

/**
 * The date that the contents of the item were created.
 */
contentCreationDate: string,

/**
 * The date that the contents of the item were last modified.
 */
contentModificationDate: string,

/**
 * The date that the item was moved into the current location.
 */
addedDate: string,

/**
 * Used to indicate where the item was obtained from.
 */
contentSources: string[],

/**
 * Comment related to a file.
 */
comment: string,

/**
 * Copyright of the content.
 */
copyright: string,

/**
 * Duration in seconds of the content of the item (if appropriate).
 */
duration: number,

/**
 * A list of contacts that are somehow associated with this document beyond what is captured as Author.
 */
contactKeywords: string[],

/**
 * The codecs used to encode/decode the media.
 */
codecs: string[],

/**
 * Used to indicate company/Organization that created the document.
 */
organizations: string[],

/**
 * Media types present in the content.
 */
mediaTypes: string[],

/**
 * A version specifier for this item.
 */
version: string,

/**
 * Used to indicate the role of the document creator.
 */
role: string,

/**
 * Whether the content is prepared for streaming.  Set to `0` for not streamable and `1` for streamable.
 */
streamable: number,

/**
 * The total bit rate (audio and video combined) of the media.
 */
totalBitRate: number,

/**
 * The video bit rate.
 */
videoBitRate: number,

/**
 * The audio bit rate.
 */
audioBitRate: number,

/**
 * The delivery type of the item.  Set to `0` for fast start and `1` for RTSP.
 */
deliveryType: number,

/**
 * Used to designate the languages of the intellectual content of the resource.
 */
languages: string[],

/**
 * Used to provide a link to information about rights held in and over resource.
 */
rights: string[],

/**
 * Used to designate the entity responsible for making the resource available.
 */
publishers: string[],

/**
 * Used to designate the entity responsible for making contributions to the content of the resource.
 */
contributors: string[],

/**
 * Used to designate the extent or scope of the content of the resource.
 */
coverage: string[],

/**
 * User rating of this item out of 5 stars.
 */
rating: number,

/**
 * A description of the rating, for example, the number of reviewers.
 */
ratingDescription: string,

/**
 * User play count of this item.
 */
playCount: number,

/**
 * Information about the item.
 */
information: string,

/**
 * Director of the item, for example, the movie director.
 */
director: string,

/**
 * Producer of the content.
 */
producer: string,

/**
 * Genre of the item, for example, movie genre.
 */
genre: string,

/**
 * Performers in the movie.
 */
performers: string[],

/**
 * Original format of the movie.
 */
originalFormat: string,

/**
 * Original source of the movie.
 */
originalSource: string,

/**
 * Whether or not the item is local. Set to `1` if true and `0` otherwise.
 */
local: number,

/**
 * Whether or not the item has explicit content. Set to `1` for explicit or `0` for clean.
 */
contentRating: number,

/**
 * URL of the item.
 */
url: string,

/**
 * The fully formatted address of the item (obtained from MapKit).
 */
fullyFormattedAddress: string,

/**
 * The sub-location (e.g., street number) for the item according to guidelines established by the provider.
 */
subThoroughfare: string,

/**
 * The location (e.g., street name) for the item according to guidelines established by the provider.
 */
thoroughfare: string,

/**
 * The postal code for the item according to guidelines established by the provider.
 */
postalCode: string,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.displayName> property.
 */
getDisplayName(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.displayName> property.
 */
setDisplayName(displayName: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.alternateNames> property.
 */
getAlternateNames(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.alternateNames> property.
 */
setAlternateNames(alternateNames: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.path> property.
 */
getPath(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.path> property.
 */
setPath(path: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentURL> property.
 */
getContentURL(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentURL> property.
 */
setContentURL(contentURL: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.thumbnailURL> property.
 */
getThumbnailURL(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.thumbnailURL> property.
 */
setThumbnailURL(thumbnailURL: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.thumbnailData> property.
 */
getThumbnailData(): string | Titanium$Blob,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.thumbnailData> property.
 */
setThumbnailData(thumbnailData: string): void,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.thumbnailData> property.
 */
setThumbnailData(thumbnailData: Titanium$Blob): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.relatedUniqueIdentifier> property.
 */
getRelatedUniqueIdentifier(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.relatedUniqueIdentifier> property.
 */
setRelatedUniqueIdentifier(relatedUniqueIdentifier: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.metadataModificationDate> property.
 */
getMetadataModificationDate(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.metadataModificationDate> property.
 */
setMetadataModificationDate(metadataModificationDate: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentType> property.
 */
getContentType(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentType> property.
 */
setContentType(contentType: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentTypeTree> property.
 */
getContentTypeTree(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentTypeTree> property.
 */
setContentTypeTree(contentTypeTree: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.keywords> property.
 */
getKeywords(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.keywords> property.
 */
setKeywords(keywords: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.subject> property.
 */
getSubject(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.subject> property.
 */
setSubject(subject: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.theme> property.
 */
getTheme(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.theme> property.
 */
setTheme(theme: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentDescription> property.
 */
getContentDescription(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentDescription> property.
 */
setContentDescription(contentDescription: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.identifier> property.
 */
getIdentifier(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.identifier> property.
 */
setIdentifier(identifier: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audiences> property.
 */
getAudiences(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audiences> property.
 */
setAudiences(audiences: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.fileSize> property.
 */
getFileSize(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.fileSize> property.
 */
setFileSize(fileSize: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.pageCount> property.
 */
getPageCount(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.pageCount> property.
 */
setPageCount(pageCount: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.pageWidth> property.
 */
getPageWidth(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.pageWidth> property.
 */
setPageWidth(pageWidth: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.pageHeight> property.
 */
getPageHeight(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.pageHeight> property.
 */
setPageHeight(pageHeight: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.securityMethod> property.
 */
getSecurityMethod(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.securityMethod> property.
 */
setSecurityMethod(securityMethod: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.creator> property.
 */
getCreator(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.creator> property.
 */
setCreator(creator: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.encodingApplications> property.
 */
getEncodingApplications(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.encodingApplications> property.
 */
setEncodingApplications(encodingApplications: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.kind> property.
 */
getKind(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.kind> property.
 */
setKind(kind: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.fontNames> property.
 */
getFontNames(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.fontNames> property.
 */
setFontNames(fontNames: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioSampleRate> property.
 */
getAudioSampleRate(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioSampleRate> property.
 */
setAudioSampleRate(audioSampleRate: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioChannelCount> property.
 */
getAudioChannelCount(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioChannelCount> property.
 */
setAudioChannelCount(audioChannelCount: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.tempo> property.
 */
getTempo(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.tempo> property.
 */
setTempo(tempo: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.keySignature> property.
 */
getKeySignature(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.keySignature> property.
 */
setKeySignature(keySignature: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.timeSignature> property.
 */
getTimeSignature(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.timeSignature> property.
 */
setTimeSignature(timeSignature: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioEncodingApplication> property.
 */
getAudioEncodingApplication(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioEncodingApplication> property.
 */
setAudioEncodingApplication(audioEncodingApplication: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.composer> property.
 */
getComposer(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.composer> property.
 */
setComposer(composer: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.lyricist> property.
 */
getLyricist(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.lyricist> property.
 */
setLyricist(lyricist: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.album> property.
 */
getAlbum(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.album> property.
 */
setAlbum(album: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.artist> property.
 */
getArtist(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.artist> property.
 */
setArtist(artist: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioTrackNumber> property.
 */
getAudioTrackNumber(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioTrackNumber> property.
 */
setAudioTrackNumber(audioTrackNumber: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.recordingDate> property.
 */
getRecordingDate(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.recordingDate> property.
 */
setRecordingDate(recordingDate: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.musicalGenre> property.
 */
getMusicalGenre(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.musicalGenre> property.
 */
setMusicalGenre(musicalGenre: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.generalMIDISequence> property.
 */
getGeneralMIDISequence(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.generalMIDISequence> property.
 */
setGeneralMIDISequence(generalMIDISequence: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.musicalInstrumentCategory> property.
 */
getMusicalInstrumentCategory(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.musicalInstrumentCategory> property.
 */
setMusicalInstrumentCategory(musicalInstrumentCategory: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.musicalInstrumentName> property.
 */
getMusicalInstrumentName(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.musicalInstrumentName> property.
 */
setMusicalInstrumentName(musicalInstrumentName: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.supportsPhoneCall> property.
 */
getSupportsPhoneCall(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.supportsPhoneCall> property.
 */
setSupportsPhoneCall(supportsPhoneCall: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.supportsNavigation> property.
 */
getSupportsNavigation(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.supportsNavigation> property.
 */
setSupportsNavigation(supportsNavigation: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.containerTitle> property.
 */
getContainerTitle(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.containerTitle> property.
 */
setContainerTitle(containerTitle: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.containerDisplayName> property.
 */
getContainerDisplayName(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.containerDisplayName> property.
 */
setContainerDisplayName(containerDisplayName: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.containerIdentifier> property.
 */
getContainerIdentifier(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.containerIdentifier> property.
 */
setContainerIdentifier(containerIdentifier: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.containerOrder> property.
 */
getContainerOrder(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.containerOrder> property.
 */
setContainerOrder(containerOrder: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.editors> property.
 */
getEditors(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.editors> property.
 */
setEditors(editors: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.participants> property.
 */
getParticipants(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.participants> property.
 */
setParticipants(participants: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.projects> property.
 */
getProjects(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.projects> property.
 */
setProjects(projects: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.downloadedDate> property.
 */
getDownloadedDate(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.downloadedDate> property.
 */
setDownloadedDate(downloadedDate: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.lastUsedDate> property.
 */
getLastUsedDate(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.lastUsedDate> property.
 */
setLastUsedDate(lastUsedDate: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentCreationDate> property.
 */
getContentCreationDate(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentCreationDate> property.
 */
setContentCreationDate(contentCreationDate: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentModificationDate> property.
 */
getContentModificationDate(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentModificationDate> property.
 */
setContentModificationDate(contentModificationDate: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.addedDate> property.
 */
getAddedDate(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.addedDate> property.
 */
setAddedDate(addedDate: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentSources> property.
 */
getContentSources(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentSources> property.
 */
setContentSources(contentSources: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.comment> property.
 */
getComment(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.comment> property.
 */
setComment(comment: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.copyright> property.
 */
getCopyright(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.copyright> property.
 */
setCopyright(copyright: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.duration> property.
 */
getDuration(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.duration> property.
 */
setDuration(duration: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contactKeywords> property.
 */
getContactKeywords(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contactKeywords> property.
 */
setContactKeywords(contactKeywords: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.codecs> property.
 */
getCodecs(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.codecs> property.
 */
setCodecs(codecs: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.organizations> property.
 */
getOrganizations(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.organizations> property.
 */
setOrganizations(organizations: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.mediaTypes> property.
 */
getMediaTypes(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.mediaTypes> property.
 */
setMediaTypes(mediaTypes: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.version> property.
 */
getVersion(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.version> property.
 */
setVersion(version: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.role> property.
 */
getRole(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.role> property.
 */
setRole(role: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.streamable> property.
 */
getStreamable(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.streamable> property.
 */
setStreamable(streamable: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.totalBitRate> property.
 */
getTotalBitRate(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.totalBitRate> property.
 */
setTotalBitRate(totalBitRate: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.videoBitRate> property.
 */
getVideoBitRate(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.videoBitRate> property.
 */
setVideoBitRate(videoBitRate: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioBitRate> property.
 */
getAudioBitRate(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.audioBitRate> property.
 */
setAudioBitRate(audioBitRate: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.deliveryType> property.
 */
getDeliveryType(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.deliveryType> property.
 */
setDeliveryType(deliveryType: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.languages> property.
 */
getLanguages(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.languages> property.
 */
setLanguages(languages: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.rights> property.
 */
getRights(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.rights> property.
 */
setRights(rights: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.publishers> property.
 */
getPublishers(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.publishers> property.
 */
setPublishers(publishers: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contributors> property.
 */
getContributors(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contributors> property.
 */
setContributors(contributors: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.coverage> property.
 */
getCoverage(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.coverage> property.
 */
setCoverage(coverage: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.rating> property.
 */
getRating(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.rating> property.
 */
setRating(rating: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.ratingDescription> property.
 */
getRatingDescription(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.ratingDescription> property.
 */
setRatingDescription(ratingDescription: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.playCount> property.
 */
getPlayCount(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.playCount> property.
 */
setPlayCount(playCount: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.information> property.
 */
getInformation(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.information> property.
 */
setInformation(information: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.director> property.
 */
getDirector(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.director> property.
 */
setDirector(director: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.producer> property.
 */
getProducer(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.producer> property.
 */
setProducer(producer: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.genre> property.
 */
getGenre(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.genre> property.
 */
setGenre(genre: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.performers> property.
 */
getPerformers(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.performers> property.
 */
setPerformers(performers: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.originalFormat> property.
 */
getOriginalFormat(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.originalFormat> property.
 */
setOriginalFormat(originalFormat: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.originalSource> property.
 */
getOriginalSource(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.originalSource> property.
 */
setOriginalSource(originalSource: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.local> property.
 */
getLocal(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.local> property.
 */
setLocal(local: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentRating> property.
 */
getContentRating(): number,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.contentRating> property.
 */
setContentRating(contentRating: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.url> property.
 */
getUrl(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.url> property.
 */
setUrl(url: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.fullyFormattedAddress> property.
 */
getFullyFormattedAddress(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.fullyFormattedAddress> property.
 */
setFullyFormattedAddress(fullyFormattedAddress: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.subThoroughfare> property.
 */
getSubThoroughfare(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.subThoroughfare> property.
 */
setSubThoroughfare(subThoroughfare: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.thoroughfare> property.
 */
getThoroughfare(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.thoroughfare> property.
 */
setThoroughfare(thoroughfare: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.postalCode> property.
 */
getPostalCode(): string,

/**
 * Sets the value of the <Titanium.App.iOS.SearchableItemAttributeSet.postalCode> property.
 */
setPostalCode(postalCode: string): void
} & Titanium$Proxy



/**
 * The UserActivity module is used to enable device Handoff and to create User Activities.
 */
declare type Titanium$App$iOS$UserActivity = {

/**
 * Name of the activity type.
 */
activityType: string,

/**
 * Set to `true` if the user activity can be publicly accessed by all iOS users.
 */
eligibleForPublicIndexing: boolean,

/**
 * Set to true if the user activity should be added to the on-device index.
 */
eligibleForSearch: boolean,

/**
 * Set to true if this user activity should be eligible to be handed off to another device
 */
eligibleForHandoff: boolean,

/**
 * A Boolean value that determines whether Siri can suggest the user activity as a shortcut to the user.
 */
eligibleForPrediction: boolean,

/**
 * A value used to identify the user activity.
 */
persistentIdentifier: string,

/**
 * Absolute date after which the activity is no longer eligible to be indexed or handed off.
 */
expirationDate: string,

/**
 * An array of string keywords representing words or phrases that might help the user to find the activity in the application history.
 */
keywords: string[],

/**
 * Set to true everytime you have updated the user activity and need the changes to be saved before handing it off to another device.
 */
needsSave: boolean,

/**
 * An array of String keys from the userInfo property which represent the minimal information about the user activity that should be stored for later restoration.
 */
requiredUserInfoKeys: string[],

/**
 * Determines if user activities are supported (`true`) or not (`false`) by the device.
 */
supported: boolean,

/**
 * An optional, user-visible title for this activity such as a document name or web page title.
 */
title: string,

/**
 * The userInfo dictionary contains application-specific state needed to continue an activity on another device.
 */
userInfo: any,

/**
 * When no suitable application is installed on a resuming device and the `webpageURL` property is set,
 * the user activity will instead be continued in a web browser by loading the specified URL.
 */
webpageURL: string,

/**
 * Adds a Titanium.App.iOS.SearchableItemAttributeSet to the user activity.
 */
addContentAttributeSet(contentAttributeSet: Titanium$App$iOS$SearchableItemAttributeSet): void,

/**
 * Marks the activity as currently in use by the user.
 */
becomeCurrent(): void,

/**
 * Invalidates an activity when it is no longer eligible for continuation.
 */
invalidate(): void,

/**
 * Marks the activity as currently **not** in use and ineligible to be continued.
 */
resignCurrent(): void,

/**
 * Determines if user activities are supported (`true`) or not (`false`) by the device.
 */
isSupported(): boolean,

/**
 * Deletes user activities created by your app that have the specified persistent identifiers.
 */
deleteSavedUserActivitiesForPersistentIdentifiers(persistentIdentifiers: $ReadOnlyArray<string>): void,

/**
 * Deletes all user activities created by your app.
 */
deleteAllSavedUserActivities(): void,

/**
 * Gets the value of the <Titanium.App.iOS.UserActivity.activityType> property.
 */
getActivityType(): string,

/**
 * Sets the value of the <Titanium.App.iOS.UserActivity.activityType> property.
 */
setActivityType(activityType: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.UserActivity.eligibleForPublicIndexing> property.
 */
getEligibleForPublicIndexing(): boolean,

/**
 * Sets the value of the <Titanium.App.iOS.UserActivity.eligibleForPublicIndexing> property.
 */
setEligibleForPublicIndexing(eligibleForPublicIndexing: boolean): void,

/**
 * Gets the value of the <Titanium.App.iOS.UserActivity.eligibleForSearch> property.
 */
getEligibleForSearch(): boolean,

/**
 * Sets the value of the <Titanium.App.iOS.UserActivity.eligibleForSearch> property.
 */
setEligibleForSearch(eligibleForSearch: boolean): void,

/**
 * Gets the value of the <Titanium.App.iOS.UserActivity.eligibleForHandoff> property.
 */
getEligibleForHandoff(): boolean,

/**
 * Sets the value of the <Titanium.App.iOS.UserActivity.eligibleForHandoff> property.
 */
setEligibleForHandoff(eligibleForHandoff: boolean): void,

/**
 * Gets the value of the <Titanium.App.iOS.UserActivity.eligibleForPrediction> property.
 */
getEligibleForPrediction(): boolean,

/**
 * Sets the value of the <Titanium.App.iOS.UserActivity.eligibleForPrediction> property.
 */
setEligibleForPrediction(eligibleForPrediction: boolean): void,

/**
 * Gets the value of the <Titanium.App.iOS.UserActivity.persistentIdentifier> property.
 */
getPersistentIdentifier(): string,

/**
 * Sets the value of the <Titanium.App.iOS.UserActivity.persistentIdentifier> property.
 */
setPersistentIdentifier(persistentIdentifier: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.UserActivity.expirationDate> property.
 */
getExpirationDate(): string,

/**
 * Sets the value of the <Titanium.App.iOS.UserActivity.expirationDate> property.
 */
setExpirationDate(expirationDate: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.UserActivity.keywords> property.
 */
getKeywords(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.UserActivity.keywords> property.
 */
setKeywords(keywords: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.UserActivity.needsSave> property.
 */
getNeedsSave(): boolean,

/**
 * Sets the value of the <Titanium.App.iOS.UserActivity.needsSave> property.
 */
setNeedsSave(needsSave: boolean): void,

/**
 * Gets the value of the <Titanium.App.iOS.UserActivity.requiredUserInfoKeys> property.
 */
getRequiredUserInfoKeys(): string[],

/**
 * Sets the value of the <Titanium.App.iOS.UserActivity.requiredUserInfoKeys> property.
 */
setRequiredUserInfoKeys(requiredUserInfoKeys: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.App.iOS.UserActivity.supported> property.
 */
getSupported(): boolean,

/**
 * Sets the value of the <Titanium.App.iOS.UserActivity.supported> property.
 */
setSupported(supported: boolean): void,

/**
 * Gets the value of the <Titanium.App.iOS.UserActivity.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.App.iOS.UserActivity.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.UserActivity.userInfo> property.
 */
getUserInfo(): any,

/**
 * Sets the value of the <Titanium.App.iOS.UserActivity.userInfo> property.
 */
setUserInfo(userInfo: any): void,

/**
 * Gets the value of the <Titanium.App.iOS.UserActivity.webpageURL> property.
 */
getWebpageURL(): string,

/**
 * Sets the value of the <Titanium.App.iOS.UserActivity.webpageURL> property.
 */
setWebpageURL(webpageURL: string): void
} & Titanium$Proxy



/**
 * The UserDefaults module is used for storing application-related data in property/value pairs
 * that persist beyond application sessions and device power cycles. UserDefaults allows the suiteName
 * of the UserDefaults to be specified at creation time.
 */
declare type Titanium$App$iOS$UserDefaults = {

/**
 * Sets the name of the suite to be used to access UserDefaults.
 */
suiteName: string,

/**
 * Returns the value of a property as a boolean data type.
 */
getBool(property: string, defaultValue?: boolean): boolean,

/**
 * Returns the value of a property as a double (double-precision, floating point) data type.
 */
getDouble(property: string, defaultValue?: number): number,

/**
 * Returns the value of a property as an integer data type.
 */
getInt(property: string, defaultValue?: number): number,

/**
 * Returns the value of a property as an array data type.
 */
getList(property: string, defaultValue?: $ReadOnlyArray<any>): any[],

/**
 * Returns the value of a property as an object.
 */
getObject(property: string, defaultValue?: any): any,

/**
 * Returns the value of a property as a string data type.
 */
getString(property: string, defaultValue?: string): string,

/**
 * Indicates whether a property exists.
 */
hasProperty(property: string): boolean,

/**
 * Returns an array of property names.
 */
listProperties(): any[],

/**
 * Removes a property if it exists, or does nothing otherwise.
 */
removeProperty(property: string): void,

/**
 * Removes all properties that have been set by the user on runtime, or does nothing otherwise.
 */
removeAllProperties(): void,

/**
 * Sets the value of a property as a boolean data type. The property will be created if it
 * does not exist.
 */
setBool(property: string, value: boolean): void,

/**
 * Sets the value of a property as a double (double-precision, floating point) data type. The
 * property will be created if it does not exist.
 */
setDouble(property: string, value: number): void,

/**
 * Sets the value of a property as an integer data type. The property will be created if it
 * does not exist.
 */
setInt(property: string, value: number): void,

/**
 * Sets the value of a property as an array data type. The property will be created if it
 * does not exist.
 */
setList(property: string, value: $ReadOnlyArray<any>): void,

/**
 * Sets the value of a property as an object data type. The property will be created if it
 * does not exist.
 */
setObject(property: string, value: any): void,

/**
 * Sets the value of a property as a string data type. The property will be created if it
 * does not exist.
 */
setString(property: string, value: string): void,

/**
 * Gets the value of the <Titanium.App.iOS.UserDefaults.suiteName> property.
 */
getSuiteName(): string,

/**
 * Sets the value of the <Titanium.App.iOS.UserDefaults.suiteName> property.
 */
setSuiteName(suiteName: string): void
} & Titanium$Proxy



/**
 * An action the user selects in response to an interactive notification.
 */
declare type Titanium$App$iOS$UserNotificationAction = {

/**
 * Selects how to activate the application.
 */
activationMode: number,

/**
 * Custom behavior the user notification supports.
 */
behavior: number,

/**
 * Set to true if the action requires the device to be unlocked. On the Apple Watch actions never require authentication.
 */
authenticationRequired: boolean,

/**
 * Set to true if the action causes destructive behavior to the user's data or the application.
 */
destructive: boolean,

/**
 * Identifier for this action. Used to identify the action the user pressed.
 */
identifier: string,

/**
 * Title of the button displayed in the notification.
 */
title: string,

/**
 * Gets the value of the <Titanium.App.iOS.UserNotificationAction.activationMode> property.
 */
getActivationMode(): number,

/**
 * Sets the value of the <Titanium.App.iOS.UserNotificationAction.activationMode> property.
 */
setActivationMode(activationMode: number): void,

/**
 * Gets the value of the <Titanium.App.iOS.UserNotificationAction.behavior> property.
 */
getBehavior(): number,

/**
 * Sets the value of the <Titanium.App.iOS.UserNotificationAction.behavior> property.
 */
setBehavior(behavior: number): void
} & Titanium$Proxy



/**
 * A set of notification actions to associate with a notification.
 */
declare type Titanium$App$iOS$UserNotificationCategory = {

/**
 * Array of notification actions to associate with the group.
 */
actionsForDefaultContext: Titanium$App$iOS$UserNotificationAction[],

/**
 * Array of notification actions to display for non-dialog-style notification.
 */
actionsForMinimalContext: Titanium$App$iOS$UserNotificationAction[],

/**
 * A format string for the summary description used when the system groups the category's notifications.
 */
categorySummaryFormat: string,

/**
 * Identifier for this category.
 */
identifier: string,

/**
 * The intents related to notifications of this category.
 */
intentIdentifiers: string[],

/**
 * The placeholder text to display when notification previews are disabled for the app.
 */
hiddenPreviewsBodyPlaceholder: string,

/**
 * Options for how to handle notifications of this type.
 */
options: number[]
} & Titanium$Proxy



      declare var npm$namespace$Titanium$App$iOS$UserNotificationCenter: {
        getPendingNotifications: typeof Titanium$App$iOS$UserNotificationCenter$getPendingNotifications,
getDeliveredNotifications: typeof Titanium$App$iOS$UserNotificationCenter$getDeliveredNotifications,
removePendingNotifications: typeof Titanium$App$iOS$UserNotificationCenter$removePendingNotifications,
removeDeliveredNotifications: typeof Titanium$App$iOS$UserNotificationCenter$removeDeliveredNotifications,
requestUserNotificationSettings: typeof Titanium$App$iOS$UserNotificationCenter$requestUserNotificationSettings,
getApiName: typeof Titanium$App$iOS$UserNotificationCenter$getApiName,
        apiName: typeof Titanium$App$iOS$UserNotificationCenter$apiName,
        
        
        
      }

/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$App$iOS$UserNotificationCenter$apiName: string;


/**
 * Fetches the pending notifications asynchronously.
 */
declare function Titanium$App$iOS$UserNotificationCenter$getPendingNotifications(callback: (param0: UserNotificationCallbackResponse) => any): void



/**
 * Fetches the delivered notifications asynchronously.
 */
declare function Titanium$App$iOS$UserNotificationCenter$getDeliveredNotifications(callback: (param0: UserNotificationCallbackResponse) => any): void



/**
 * Removes the specified pending notifications to prevent them from being triggered.
 * If no notifications are specified, all pending notifications will be removed.
 */
declare function Titanium$App$iOS$UserNotificationCenter$removePendingNotifications(notifications: $ReadOnlyArray<UserNotificationDictionary>): void



/**
 * Removes the specified delivered notifications from the notification-center.
 * If no notifications are specified, all delivered notifications will be removed.
 */
declare function Titanium$App$iOS$UserNotificationCenter$removeDeliveredNotifications(notifications: $ReadOnlyArray<UserNotificationDictionary>): void



/**
 * Notification types and user notification categories the application is registered to use.
 */
declare function Titanium$App$iOS$UserNotificationCenter$requestUserNotificationSettings(callback: (param0: GetUserNotificationSettings) => any): void



/**
 * Gets the value of the <Titanium.App.iOS.UserNotificationCenter.apiName> property.
 */
declare function Titanium$App$iOS$UserNotificationCenter$getApiName(): string



      declare var npm$namespace$Titanium$Calendar: {
        addEventListener: typeof Titanium$Calendar$addEventListener,
removeEventListener: typeof Titanium$Calendar$removeEventListener,
fireEvent: typeof Titanium$Calendar$fireEvent,
applyProperties: typeof Titanium$Calendar$applyProperties,
getCalendarById: typeof Titanium$Calendar$getCalendarById,
hasCalendarPermissions: typeof Titanium$Calendar$hasCalendarPermissions,
requestCalendarPermissions: typeof Titanium$Calendar$requestCalendarPermissions,
requestEventsAuthorization: typeof Titanium$Calendar$requestEventsAuthorization,
getBubbleParent: typeof Titanium$Calendar$getBubbleParent,
setBubbleParent: typeof Titanium$Calendar$setBubbleParent,
getApiName: typeof Titanium$Calendar$getApiName,
getLifecycleContainer: typeof Titanium$Calendar$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Calendar$setLifecycleContainer,
getEventsAuthorization: typeof Titanium$Calendar$getEventsAuthorization,
getCalendarAuthorization: typeof Titanium$Calendar$getCalendarAuthorization,
getAllAlerts: typeof Titanium$Calendar$getAllAlerts,
getAllCalendars: typeof Titanium$Calendar$getAllCalendars,
getAllEditableCalendars: typeof Titanium$Calendar$getAllEditableCalendars,
getSelectableCalendars: typeof Titanium$Calendar$getSelectableCalendars,
getDefaultCalendar: typeof Titanium$Calendar$getDefaultCalendar,
        bubbleParent: typeof Titanium$Calendar$bubbleParent,
apiName: typeof Titanium$Calendar$apiName,
lifecycleContainer: typeof Titanium$Calendar$lifecycleContainer,
METHOD_ALERT: typeof Titanium$Calendar$METHOD_ALERT,
METHOD_DEFAULT: typeof Titanium$Calendar$METHOD_DEFAULT,
METHOD_EMAIL: typeof Titanium$Calendar$METHOD_EMAIL,
METHOD_SMS: typeof Titanium$Calendar$METHOD_SMS,
STATE_DISMISSED: typeof Titanium$Calendar$STATE_DISMISSED,
STATE_FIRED: typeof Titanium$Calendar$STATE_FIRED,
STATE_SCHEDULED: typeof Titanium$Calendar$STATE_SCHEDULED,
STATUS_NONE: typeof Titanium$Calendar$STATUS_NONE,
STATUS_CANCELLED: typeof Titanium$Calendar$STATUS_CANCELLED,
STATUS_CANCELED: typeof Titanium$Calendar$STATUS_CANCELED,
STATUS_CONFIRMED: typeof Titanium$Calendar$STATUS_CONFIRMED,
STATUS_TENTATIVE: typeof Titanium$Calendar$STATUS_TENTATIVE,
AVAILABILITY_NOTSUPPORTED: typeof Titanium$Calendar$AVAILABILITY_NOTSUPPORTED,
AVAILABILITY_BUSY: typeof Titanium$Calendar$AVAILABILITY_BUSY,
AVAILABILITY_FREE: typeof Titanium$Calendar$AVAILABILITY_FREE,
AVAILABILITY_TENTATIVE: typeof Titanium$Calendar$AVAILABILITY_TENTATIVE,
AVAILABILITY_UNAVAILABLE: typeof Titanium$Calendar$AVAILABILITY_UNAVAILABLE,
AUTHORIZATION_AUTHORIZED: typeof Titanium$Calendar$AUTHORIZATION_AUTHORIZED,
AUTHORIZATION_DENIED: typeof Titanium$Calendar$AUTHORIZATION_DENIED,
AUTHORIZATION_RESTRICTED: typeof Titanium$Calendar$AUTHORIZATION_RESTRICTED,
AUTHORIZATION_UNKNOWN: typeof Titanium$Calendar$AUTHORIZATION_UNKNOWN,
SPAN_THISEVENT: typeof Titanium$Calendar$SPAN_THISEVENT,
SPAN_FUTUREEVENTS: typeof Titanium$Calendar$SPAN_FUTUREEVENTS,
RECURRENCEFREQUENCY_DAILY: typeof Titanium$Calendar$RECURRENCEFREQUENCY_DAILY,
RECURRENCEFREQUENCY_WEEKLY: typeof Titanium$Calendar$RECURRENCEFREQUENCY_WEEKLY,
RECURRENCEFREQUENCY_MONTHLY: typeof Titanium$Calendar$RECURRENCEFREQUENCY_MONTHLY,
RECURRENCEFREQUENCY_YEARLY: typeof Titanium$Calendar$RECURRENCEFREQUENCY_YEARLY,
VISIBILITY_CONFIDENTIAL: typeof Titanium$Calendar$VISIBILITY_CONFIDENTIAL,
VISIBILITY_DEFAULT: typeof Titanium$Calendar$VISIBILITY_DEFAULT,
VISIBILITY_PRIVATE: typeof Titanium$Calendar$VISIBILITY_PRIVATE,
VISIBILITY_PUBLIC: typeof Titanium$Calendar$VISIBILITY_PUBLIC,
ATTENDEE_STATUS_UNKNOWN: typeof Titanium$Calendar$ATTENDEE_STATUS_UNKNOWN,
ATTENDEE_STATUS_PENDING: typeof Titanium$Calendar$ATTENDEE_STATUS_PENDING,
ATTENDEE_STATUS_ACCEPTED: typeof Titanium$Calendar$ATTENDEE_STATUS_ACCEPTED,
ATTENDEE_STATUS_DECLINED: typeof Titanium$Calendar$ATTENDEE_STATUS_DECLINED,
ATTENDEE_STATUS_TENTATIVE: typeof Titanium$Calendar$ATTENDEE_STATUS_TENTATIVE,
ATTENDEE_STATUS_INVITED: typeof Titanium$Calendar$ATTENDEE_STATUS_INVITED,
ATTENDEE_STATUS_NONE: typeof Titanium$Calendar$ATTENDEE_STATUS_NONE,
ATTENDEE_STATUS_DELEGATED: typeof Titanium$Calendar$ATTENDEE_STATUS_DELEGATED,
ATTENDEE_STATUS_IN_PROCESS: typeof Titanium$Calendar$ATTENDEE_STATUS_IN_PROCESS,
RELATIONSHIP_ATTENDEE: typeof Titanium$Calendar$RELATIONSHIP_ATTENDEE,
RELATIONSHIP_NONE: typeof Titanium$Calendar$RELATIONSHIP_NONE,
RELATIONSHIP_ORGANIZER: typeof Titanium$Calendar$RELATIONSHIP_ORGANIZER,
RELATIONSHIP_PERFORMER: typeof Titanium$Calendar$RELATIONSHIP_PERFORMER,
RELATIONSHIP_SPEAKER: typeof Titanium$Calendar$RELATIONSHIP_SPEAKER,
RELATIONSHIP_UNKNOWN: typeof Titanium$Calendar$RELATIONSHIP_UNKNOWN,
ATTENDEE_ROLE_UNKNOWN: typeof Titanium$Calendar$ATTENDEE_ROLE_UNKNOWN,
ATTENDEE_ROLE_OPTIONAL: typeof Titanium$Calendar$ATTENDEE_ROLE_OPTIONAL,
ATTENDEE_ROLE_REQUIRED: typeof Titanium$Calendar$ATTENDEE_ROLE_REQUIRED,
ATTENDEE_ROLE_CHAIR: typeof Titanium$Calendar$ATTENDEE_ROLE_CHAIR,
ATTENDEE_ROLE_NON_PARTICIPANT: typeof Titanium$Calendar$ATTENDEE_ROLE_NON_PARTICIPANT,
ATTENDEE_TYPE_UNKNOWN: typeof Titanium$Calendar$ATTENDEE_TYPE_UNKNOWN,
ATTENDEE_TYPE_PERSON: typeof Titanium$Calendar$ATTENDEE_TYPE_PERSON,
ATTENDEE_TYPE_ROOM: typeof Titanium$Calendar$ATTENDEE_TYPE_ROOM,
ATTENDEE_TYPE_RESOURCE: typeof Titanium$Calendar$ATTENDEE_TYPE_RESOURCE,
ATTENDEE_TYPE_NONE: typeof Titanium$Calendar$ATTENDEE_TYPE_NONE,
ATTENDEE_TYPE_REQUIRED: typeof Titanium$Calendar$ATTENDEE_TYPE_REQUIRED,
ATTENDEE_TYPE_GROUP: typeof Titanium$Calendar$ATTENDEE_TYPE_GROUP,
SOURCE_TYPE_LOCAL: typeof Titanium$Calendar$SOURCE_TYPE_LOCAL,
SOURCE_TYPE_EXCHANGE: typeof Titanium$Calendar$SOURCE_TYPE_EXCHANGE,
SOURCE_TYPE_CALDAV: typeof Titanium$Calendar$SOURCE_TYPE_CALDAV,
SOURCE_TYPE_MOBILEME: typeof Titanium$Calendar$SOURCE_TYPE_MOBILEME,
SOURCE_TYPE_SUBSCRIBED: typeof Titanium$Calendar$SOURCE_TYPE_SUBSCRIBED,
SOURCE_TYPE_BIRTHDAYS: typeof Titanium$Calendar$SOURCE_TYPE_BIRTHDAYS,
eventsAuthorization: typeof Titanium$Calendar$eventsAuthorization,
calendarAuthorization: typeof Titanium$Calendar$calendarAuthorization,
allAlerts: typeof Titanium$Calendar$allAlerts,
allCalendars: typeof Titanium$Calendar$allCalendars,
allEditableCalendars: typeof Titanium$Calendar$allEditableCalendars,
selectableCalendars: typeof Titanium$Calendar$selectableCalendars,
defaultCalendar: typeof Titanium$Calendar$defaultCalendar,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Calendar$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Calendar$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Calendar$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Reminder alert delivery method.
 */
declare var Titanium$Calendar$METHOD_ALERT: number;


/**
 * Reminder default delivery method.
 */
declare var Titanium$Calendar$METHOD_DEFAULT: number;


/**
 * Reminder email delivery method.
 */
declare var Titanium$Calendar$METHOD_EMAIL: number;


/**
 * Reminder SMS delivery method.
 */
declare var Titanium$Calendar$METHOD_SMS: number;


/**
 * Alert dismissed state.
 */
declare var Titanium$Calendar$STATE_DISMISSED: number;


/**
 * Alert fired state.
 */
declare var Titanium$Calendar$STATE_FIRED: number;


/**
 * Alert scheduled status.
 */
declare var Titanium$Calendar$STATE_SCHEDULED: number;


/**
 * Event has no status.
 */
declare var Titanium$Calendar$STATUS_NONE: number;


/**
 * Event canceled status.
 */
declare var Titanium$Calendar$STATUS_CANCELLED: number;


/**
 * Event canceled status.
 */
declare var Titanium$Calendar$STATUS_CANCELED: number;


/**
 * Event confirmed status.
 */
declare var Titanium$Calendar$STATUS_CONFIRMED: number;


/**
 * Event tentative status.
 */
declare var Titanium$Calendar$STATUS_TENTATIVE: number;


/**
 * Availability settings are not supported by the event's calendar.
 */
declare var Titanium$Calendar$AVAILABILITY_NOTSUPPORTED: number;


/**
 * Event has a busy availability setting.
 */
declare var Titanium$Calendar$AVAILABILITY_BUSY: number;


/**
 * Event has a free availability setting.
 */
declare var Titanium$Calendar$AVAILABILITY_FREE: number;


/**
 * Event has a tentative availability setting.
 */
declare var Titanium$Calendar$AVAILABILITY_TENTATIVE: number;


/**
 * Event has a tentative availability setting.
 */
declare var Titanium$Calendar$AVAILABILITY_UNAVAILABLE: number;


/**
 * A [eventsAuthorization](Titanium.Calendar.eventsAuthorization) value
 * indicating that the application is authorized to use events in the Calendar.
 */
declare var Titanium$Calendar$AUTHORIZATION_AUTHORIZED: number;


/**
 * A [eventsAuthorization](Titanium.Calendar.eventsAuthorization) value
 * indicating that the application is not authorized to use events in the Calendar.
 */
declare var Titanium$Calendar$AUTHORIZATION_DENIED: number;


/**
 * A [eventsAuthorization](Titanium.Calendar.eventsAuthorization) value
 * indicating that the application is not authorized to use events in the Calendar.
 * the user cannot change this application's status.
 */
declare var Titanium$Calendar$AUTHORIZATION_RESTRICTED: number;


/**
 * A [eventsAuthorization](Titanium.Calendar.eventsAuthorization) value
 * indicating that the authorization state is unknown.
 */
declare var Titanium$Calendar$AUTHORIZATION_UNKNOWN: number;


/**
 * A [save](Titanium.Calendar.Event.save)/[remove](Titanium.Calendar.Event.remove) event value,
 * indicating modifications to this event instance should affect only this instance.
 */
declare var Titanium$Calendar$SPAN_THISEVENT: number;


/**
 * A [save](Titanium.Calendar.Event.save)/[remove](Titanium.Calendar.Event.remove) event value,
 * indicating modifications to this event instance should also affect future instances of this event.
 */
declare var Titanium$Calendar$SPAN_FUTUREEVENTS: number;


/**
 * Indicates a daily recurrence rule for a events reccurance frequency.
 */
declare var Titanium$Calendar$RECURRENCEFREQUENCY_DAILY: number;


/**
 * Indicates a weekly recurrence rule for a events reccurance frequency.
 */
declare var Titanium$Calendar$RECURRENCEFREQUENCY_WEEKLY: number;


/**
 * Indicates a monthly recurrence rule for a events reccurance frequency.
 */
declare var Titanium$Calendar$RECURRENCEFREQUENCY_MONTHLY: number;


/**
 * Indicates a yearly recurrence rule for a events reccurance frequency.
 */
declare var Titanium$Calendar$RECURRENCEFREQUENCY_YEARLY: number;


/**
 * Event confidential visibility.
 */
declare var Titanium$Calendar$VISIBILITY_CONFIDENTIAL: number;


/**
 * Event default visibility.
 */
declare var Titanium$Calendar$VISIBILITY_DEFAULT: number;


/**
 * Event private visibility.
 */
declare var Titanium$Calendar$VISIBILITY_PRIVATE: number;


/**
 * Event public visibility.
 */
declare var Titanium$Calendar$VISIBILITY_PUBLIC: number;


/**
 * Attendee status is unknown.
 */
declare var Titanium$Calendar$ATTENDEE_STATUS_UNKNOWN: number;


/**
 * Attendee status is pending.
 */
declare var Titanium$Calendar$ATTENDEE_STATUS_PENDING: number;


/**
 * Attendee status is accepted.
 */
declare var Titanium$Calendar$ATTENDEE_STATUS_ACCEPTED: number;


/**
 * Attendee status is declined.
 */
declare var Titanium$Calendar$ATTENDEE_STATUS_DECLINED: number;


/**
 * Attendee status is tentative.
 */
declare var Titanium$Calendar$ATTENDEE_STATUS_TENTATIVE: number;


/**
 * Attendee status is invited.
 */
declare var Titanium$Calendar$ATTENDEE_STATUS_INVITED: number;


/**
 * There is no Attendee status.
 */
declare var Titanium$Calendar$ATTENDEE_STATUS_NONE: number;


/**
 * Attendee status is delegated.
 */
declare var Titanium$Calendar$ATTENDEE_STATUS_DELEGATED: number;


/**
 * Attendee status is in process.
 */
declare var Titanium$Calendar$ATTENDEE_STATUS_IN_PROCESS: number;


/**
 * Relationship is attendee.
 */
declare var Titanium$Calendar$RELATIONSHIP_ATTENDEE: number;


/**
 * There is no relationship.
 */
declare var Titanium$Calendar$RELATIONSHIP_NONE: number;


/**
 * Attendee is organizer.
 */
declare var Titanium$Calendar$RELATIONSHIP_ORGANIZER: number;


/**
 * Attendee is performer.
 */
declare var Titanium$Calendar$RELATIONSHIP_PERFORMER: number;


/**
 * Attendee is speaker.
 */
declare var Titanium$Calendar$RELATIONSHIP_SPEAKER: number;


/**
 * Relationship is unknown.
 */
declare var Titanium$Calendar$RELATIONSHIP_UNKNOWN: number;


/**
 * Attendee role is unknown.
 */
declare var Titanium$Calendar$ATTENDEE_ROLE_UNKNOWN: number;


/**
 * Attendee role is optional.
 */
declare var Titanium$Calendar$ATTENDEE_ROLE_OPTIONAL: number;


/**
 * Attendee role is required.
 */
declare var Titanium$Calendar$ATTENDEE_ROLE_REQUIRED: number;


/**
 * Attendee role is chair.
 */
declare var Titanium$Calendar$ATTENDEE_ROLE_CHAIR: number;


/**
 * Attendee is not a participant.
 */
declare var Titanium$Calendar$ATTENDEE_ROLE_NON_PARTICIPANT: number;


/**
 * Attendee type is unknown.
 */
declare var Titanium$Calendar$ATTENDEE_TYPE_UNKNOWN: number;


/**
 * Attendee type is person.
 */
declare var Titanium$Calendar$ATTENDEE_TYPE_PERSON: number;


/**
 * Attendee type is room.
 */
declare var Titanium$Calendar$ATTENDEE_TYPE_ROOM: number;


/**
 * Attendee type is resource.
 */
declare var Titanium$Calendar$ATTENDEE_TYPE_RESOURCE: number;


/**
 * There is not attendee type.
 */
declare var Titanium$Calendar$ATTENDEE_TYPE_NONE: number;


/**
 * Attendee type is required.
 */
declare var Titanium$Calendar$ATTENDEE_TYPE_REQUIRED: number;


/**
 * Attendee type is group.
 */
declare var Titanium$Calendar$ATTENDEE_TYPE_GROUP: number;


/**
 * A local calendar source.
 */
declare var Titanium$Calendar$SOURCE_TYPE_LOCAL: number;


/**
 * A microsoft exchange calendar source.
 */
declare var Titanium$Calendar$SOURCE_TYPE_EXCHANGE: number;


/**
 * A calDev calendar source.
 */
declare var Titanium$Calendar$SOURCE_TYPE_CALDAV: number;


/**
 * A mobileMe calendar source.
 */
declare var Titanium$Calendar$SOURCE_TYPE_MOBILEME: number;


/**
 * A subscribed calendar source.
 */
declare var Titanium$Calendar$SOURCE_TYPE_SUBSCRIBED: number;


/**
 * A birthday calendar source.
 */
declare var Titanium$Calendar$SOURCE_TYPE_BIRTHDAYS: number;


/**
 * Returns an authorization constant indicating if the application has access to the events in the EventKit.
 */
declare var Titanium$Calendar$eventsAuthorization: number;


/**
 * Returns an authorization constant indicating if the application has access to the events in the EventKit.
 */
declare var Titanium$Calendar$calendarAuthorization: number;


/**
 * All alerts in selected calendars.
 */
declare var Titanium$Calendar$allAlerts: Titanium$Calendar$Alert[];


/**
 * All calendars known to the native calendar app.
 */
declare var Titanium$Calendar$allCalendars: Titanium$Calendar$Calendar[];


/**
 * All calendars known to the native calendar app that can add, edit, and
 * delete items in the calendar.
 */
declare var Titanium$Calendar$allEditableCalendars: Titanium$Calendar$Calendar[];


/**
 * All calendars selected within the native calendar app, which may be a subset of `allCalendars`.
 */
declare var Titanium$Calendar$selectableCalendars: Titanium$Calendar$Calendar[];


/**
 * Calendar that events are added to by default, as specified by user settings.
 */
declare var Titanium$Calendar$defaultCalendar: Titanium$Calendar$Calendar;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Calendar$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Calendar$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Calendar$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Calendar$applyProperties(props: any): void



/**
 * Gets the calendar with the specified identifier.
 */
declare function Titanium$Calendar$getCalendarById(id: string): Titanium$Calendar$Calendar



/**
 * Returns `true` if the app has calendar access.
 */
declare function Titanium$Calendar$hasCalendarPermissions(): boolean



/**
 * Requests for calendar access.
 */
declare function Titanium$Calendar$requestCalendarPermissions(callback: (param0: EventsAuthorizationResponse) => any): void



/**
 * If authorization is unknown, will bring up a dialog requesting permission.
 */
declare function Titanium$Calendar$requestEventsAuthorization(callback: (param0: EventsAuthorizationResponse) => any): void



/**
 * Gets the value of the <Titanium.Calendar.bubbleParent> property.
 */
declare function Titanium$Calendar$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Calendar.bubbleParent> property.
 */
declare function Titanium$Calendar$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Calendar.apiName> property.
 */
declare function Titanium$Calendar$getApiName(): string



/**
 * Gets the value of the <Titanium.Calendar.lifecycleContainer> property.
 */
declare function Titanium$Calendar$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Calendar.lifecycleContainer> property.
 */
declare function Titanium$Calendar$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Calendar.lifecycleContainer> property.
 */
declare function Titanium$Calendar$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.Calendar.eventsAuthorization> property.
 */
declare function Titanium$Calendar$getEventsAuthorization(): number



/**
 * Gets the value of the <Titanium.Calendar.calendarAuthorization> property.
 */
declare function Titanium$Calendar$getCalendarAuthorization(): number



/**
 * Gets the value of the <Titanium.Calendar.allAlerts> property.
 */
declare function Titanium$Calendar$getAllAlerts(): Titanium$Calendar$Alert[]



/**
 * Gets the value of the <Titanium.Calendar.allCalendars> property.
 */
declare function Titanium$Calendar$getAllCalendars(): Titanium$Calendar$Calendar[]



/**
 * Gets the value of the <Titanium.Calendar.allEditableCalendars> property.
 */
declare function Titanium$Calendar$getAllEditableCalendars(): Titanium$Calendar$Calendar[]



/**
 * Gets the value of the <Titanium.Calendar.selectableCalendars> property.
 */
declare function Titanium$Calendar$getSelectableCalendars(): Titanium$Calendar$Calendar[]



/**
 * Gets the value of the <Titanium.Calendar.defaultCalendar> property.
 */
declare function Titanium$Calendar$getDefaultCalendar(): Titanium$Calendar$Calendar



/**
 * An object that represents a single alert for an event in an calendar.
 */
declare type Titanium$Calendar$Alert = {

/**
 * The absolute date for the alarm.
 */
absoluteDate: Date,

/**
 * The offset from the start of an event, at which the alarm fires.
 */
relativeOffset: number,

/**
 * Date/time at which this alert alarm is set to trigger.
 */
+alarmTime: Date,

/**
 * Start date/time for the corresponding event.
 */
+begin: Date,

/**
 * End date/time for the corresponding event.
 */
+end: Date,

/**
 * Identifier of the event for which this alert is set.
 */
+eventId: number,

/**
 * Identifier of this alert.
 */
+id: string,

/**
 * Reminder notice period in minutes, that determines how long prior to the event this alert
 * should trigger.
 */
+minutes: number,

/**
 * The current state of the alert.
 */
+state: number,

/**
 * Gets the value of the <Titanium.Calendar.Alert.absoluteDate> property.
 */
getAbsoluteDate(): Date,

/**
 * Sets the value of the <Titanium.Calendar.Alert.absoluteDate> property.
 */
setAbsoluteDate(absoluteDate: Date): void,

/**
 * Gets the value of the <Titanium.Calendar.Alert.relativeOffset> property.
 */
getRelativeOffset(): number,

/**
 * Sets the value of the <Titanium.Calendar.Alert.relativeOffset> property.
 */
setRelativeOffset(relativeOffset: number): void,

/**
 * Gets the value of the <Titanium.Calendar.Alert.alarmTime> property.
 */
getAlarmTime(): Date,

/**
 * Gets the value of the <Titanium.Calendar.Alert.begin> property.
 */
getBegin(): Date,

/**
 * Gets the value of the <Titanium.Calendar.Alert.end> property.
 */
getEnd(): Date,

/**
 * Gets the value of the <Titanium.Calendar.Alert.eventId> property.
 */
getEventId(): number,

/**
 * Gets the value of the <Titanium.Calendar.Alert.id> property.
 */
getId(): string,

/**
 * Gets the value of the <Titanium.Calendar.Alert.minutes> property.
 */
getMinutes(): number,

/**
 * Gets the value of the <Titanium.Calendar.Alert.state> property.
 */
getState(): number
} & Titanium$Proxy



/**
 * An object that represents a single attendee of an event.
 */
declare type Titanium$Calendar$Attendee = {

/**
 * Indicates whether this attendee is the event organizer.
 */
isOrganizer: boolean,

/**
 * The attendee name.
 */
name: string,

/**
 * The attendee email.
 */
email: string,

/**
 * The role of the attendee.
 */
role: number,

/**
 * The type of the attendee.
 */
type: number,

/**
 * The status of the attendee.
 */
status: number,

/**
 * Gets the value of the <Titanium.Calendar.Attendee.isOrganizer> property.
 */
getIsOrganizer(): boolean,

/**
 * Sets the value of the <Titanium.Calendar.Attendee.isOrganizer> property.
 */
setIsOrganizer(isOrganizer: boolean): void,

/**
 * Gets the value of the <Titanium.Calendar.Attendee.name> property.
 */
getName(): string,

/**
 * Sets the value of the <Titanium.Calendar.Attendee.name> property.
 */
setName(name: string): void,

/**
 * Gets the value of the <Titanium.Calendar.Attendee.email> property.
 */
getEmail(): string,

/**
 * Sets the value of the <Titanium.Calendar.Attendee.email> property.
 */
setEmail(email: string): void,

/**
 * Gets the value of the <Titanium.Calendar.Attendee.role> property.
 */
getRole(): number,

/**
 * Sets the value of the <Titanium.Calendar.Attendee.role> property.
 */
setRole(role: number): void,

/**
 * Gets the value of the <Titanium.Calendar.Attendee.type> property.
 */
getType(): number,

/**
 * Sets the value of the <Titanium.Calendar.Attendee.type> property.
 */
setType(type: number): void,

/**
 * Gets the value of the <Titanium.Calendar.Attendee.status> property.
 */
getStatus(): number,

/**
 * Sets the value of the <Titanium.Calendar.Attendee.status> property.
 */
setStatus(status: number): void
} & Titanium$Proxy



/**
 * An object that represents a single calendar.
 */
declare type Titanium$Calendar$Calendar = {

/**
 * Indicates whether this calendar can be edited or deleted.
 */
+hidden: boolean,

/**
 * Identifier of this calendar.
 */
+id: string,

/**
 * Display name of this calendar.
 */
+name: string,

/**
 * Indicates whether the calendar is selected.
 */
+selected: boolean,

/**
 * Displays the source title.
 */
+sourceTitle: string,

/**
 * Displays the source type.
 */
+sourceType: number,

/**
 * Displays the source identifier.
 */
+sourceIdentifier: string,

/**
 * Creates an event in this calendar.
 */
createEvent(properties: any): Titanium$Calendar$Event,

/**
 * Gets the event with the specified identifier.
 */
getEventById(id: number): Titanium$Calendar$Event,

/**
 * Gets events that occur between two dates.
 */
getEventsBetweenDates(date1: Date, date2: Date | string): Titanium$Calendar$Event[],

/**
 * Gets events that occur between two dates.
 */
getEventsBetweenDates(date1: string, date2: Date | string): Titanium$Calendar$Event[],

/**
 * Gets events that occur between two dates.
 */
getEventsBetweenDates(date1: Date | string, date2: Date): Titanium$Calendar$Event[],

/**
 * Gets events that occur between two dates.
 */
getEventsBetweenDates(date1: Date | string, date2: string): Titanium$Calendar$Event[],

/**
 * Gets events that occur on a specified date.
 */
getEventsInDate(year: number, month: number, day: number): Titanium$Calendar$Event[],

/**
 * Gets events that occur during a specified month.
 */
getEventsInMonth(year: number, month: number): Titanium$Calendar$Event[],

/**
 * Gets all events that occur during a specified year.
 */
getEventsInYear(year: number): Titanium$Calendar$Event[],

/**
 * Gets the value of the <Titanium.Calendar.Calendar.hidden> property.
 */
getHidden(): boolean,

/**
 * Gets the value of the <Titanium.Calendar.Calendar.id> property.
 */
getId(): string,

/**
 * Gets the value of the <Titanium.Calendar.Calendar.name> property.
 */
getName(): string,

/**
 * Gets the value of the <Titanium.Calendar.Calendar.selected> property.
 */
getSelected(): boolean,

/**
 * Gets the value of the <Titanium.Calendar.Calendar.sourceTitle> property.
 */
getSourceTitle(): string,

/**
 * Gets the value of the <Titanium.Calendar.Calendar.sourceType> property.
 */
getSourceType(): number,

/**
 * Gets the value of the <Titanium.Calendar.Calendar.sourceIdentifier> property.
 */
getSourceIdentifier(): string
} & Titanium$Proxy



/**
 * An object that represents a single event in a calendar.
 */
declare type Titanium$Calendar$Event = {

/**
 * Alarms associated with the calendar item, as an array of <Titanium.Calendar.Alert> objects.
 */
alerts: Titanium$Calendar$Alert[],

/**
 * Indicates whether this event is all day.
 */
allDay: boolean,

/**
 * Start date/time of this event.
 */
begin: Date,

/**
 * Notes for this event.
 */
notes: string,

/**
 * Description of this event.
 */
+description: string,

/**
 * End date/time of this event.
 */
end: Date,

/**
 * Extended properties of this event.
 */
+extendedProperties: any,

/**
 * Indicates whether an alarm is scheduled for this event.
 */
+hasAlarm: boolean,

/**
 * Identifier of this event.
 */
+id: string,

/**
 * Location of this event.
 */
location: string,

/**
 * Existing reminders for this event.
 */
+reminders: Titanium$Calendar$Reminder[],

/**
 * Status of this event.
 */
+status: number,

/**
 * Availability of this event.
 */
+availability: number,

/**
 * Boolean value that indicates whether an event is a detached instance of a
 * repeating event.
 */
+isDetached: boolean,

/**
 * Title of this event.
 */
title: string,

/**
 * The recurrence rules for the calendar item.
 */
recurrenceRules: Titanium$Calendar$RecurrenceRule[],

/**
 * Visibility of this event.
 */
+visibility: number,

/**
 * The list of event attendees. This list will be empty if the event has no attendees.
 */
+attendees: Titanium$Calendar$Attendee[],

/**
 * Creates an alert for this event.
 */
createAlert(data: any): Titanium$Calendar$Alert,

/**
 * Creates a reminder for this event.
 */
createReminder(data: any): Titanium$Calendar$Reminder,

/**
 * Gets the value of the specified extended property.
 */
getExtendedProperty(name: string): string,

/**
 * Sets the value of the specified extended property.
 */
setExtendedProperty(name: string, value: string): void,

/**
 * Creates an recurrence pattern for a recurring event.
 * All of the properties for the recurrence rule must be set during creation.
 * The recurrence rule properties cannot be modified.
 */
createRecurrenceRule(data: any): Titanium$Calendar$RecurrenceRule,

/**
 * Saves changes to an event permanently.
 */
save(span: number): boolean,

/**
 * Removes an event from the event store.
 */
remove(span: number): boolean,

/**
 * Updates the event's data with the current information in the Calendar database.
 */
refresh(): boolean,

/**
 * Adds a recurrence rule to the recurrence rule array.
 */
addRecurrenceRule(rule: Titanium$Calendar$RecurrenceRule): void,

/**
 * Removes a recurrence rule to the recurrence rule array.
 */
removeRecurrenceRule(rule: Titanium$Calendar$RecurrenceRule): void,

/**
 * Gets the value of the <Titanium.Calendar.Event.alerts> property.
 */
getAlerts(): Titanium$Calendar$Alert[],

/**
 * Sets the value of the <Titanium.Calendar.Event.alerts> property.
 */
setAlerts(alerts: $ReadOnlyArray<Titanium$Calendar$Alert>): void,

/**
 * Gets the value of the <Titanium.Calendar.Event.allDay> property.
 */
getAllDay(): boolean,

/**
 * Sets the value of the <Titanium.Calendar.Event.allDay> property.
 */
setAllDay(allDay: boolean): void,

/**
 * Gets the value of the <Titanium.Calendar.Event.begin> property.
 */
getBegin(): Date,

/**
 * Sets the value of the <Titanium.Calendar.Event.begin> property.
 */
setBegin(begin: Date): void,

/**
 * Gets the value of the <Titanium.Calendar.Event.notes> property.
 */
getNotes(): string,

/**
 * Sets the value of the <Titanium.Calendar.Event.notes> property.
 */
setNotes(notes: string): void,

/**
 * Gets the value of the <Titanium.Calendar.Event.description> property.
 */
getDescription(): string,

/**
 * Gets the value of the <Titanium.Calendar.Event.end> property.
 */
getEnd(): Date,

/**
 * Sets the value of the <Titanium.Calendar.Event.end> property.
 */
setEnd(end: Date): void,

/**
 * Gets the value of the <Titanium.Calendar.Event.extendedProperties> property.
 */
getExtendedProperties(): any,

/**
 * Gets the value of the <Titanium.Calendar.Event.hasAlarm> property.
 */
getHasAlarm(): boolean,

/**
 * Gets the value of the <Titanium.Calendar.Event.id> property.
 */
getId(): string,

/**
 * Gets the value of the <Titanium.Calendar.Event.location> property.
 */
getLocation(): string,

/**
 * Sets the value of the <Titanium.Calendar.Event.location> property.
 */
setLocation(location: string): void,

/**
 * Gets the value of the <Titanium.Calendar.Event.reminders> property.
 */
getReminders(): Titanium$Calendar$Reminder[],

/**
 * Gets the value of the <Titanium.Calendar.Event.status> property.
 */
getStatus(): number,

/**
 * Gets the value of the <Titanium.Calendar.Event.availability> property.
 */
getAvailability(): number,

/**
 * Gets the value of the <Titanium.Calendar.Event.isDetached> property.
 */
getIsDetached(): boolean,

/**
 * Gets the value of the <Titanium.Calendar.Event.title> property.
 */
getTitle(): string,

/**
 * Sets the value of the <Titanium.Calendar.Event.title> property.
 */
setTitle(title: string): void,

/**
 * Gets the value of the <Titanium.Calendar.Event.recurrenceRules> property.
 */
getRecurrenceRules(): Titanium$Calendar$RecurrenceRule[],

/**
 * Sets the value of the <Titanium.Calendar.Event.recurrenceRules> property.
 */
setRecurrenceRules(recurrenceRules: $ReadOnlyArray<Titanium$Calendar$RecurrenceRule>): void,

/**
 * Gets the value of the <Titanium.Calendar.Event.visibility> property.
 */
getVisibility(): number,

/**
 * Gets the value of the <Titanium.Calendar.Event.attendees> property.
 */
getAttendees(): Titanium$Calendar$Attendee[]
} & Titanium$Proxy



/**
 * An object that is used to describe the recurrence pattern for a recurring event.
 */
declare type Titanium$Calendar$RecurrenceRule = {

/**
 * Identifier for the recurrence rule's calendar.
 */
+calendarID: string,

/**
 * Frequency of the recurrence rule.
 */
+frequency: number,

/**
 * The interval between instances of this recurrence. For example, a weekly
 * recurrence rule with an interval of 2 occurs every other week. Must be greater than 0.
 */
+interval: number,

/**
 * The days of the week that the event occurs, as an Dictionay of `daysOfWeek` and `Week`.
 */
+daysOfTheWeek: daysOfTheWeekDictionary,

/**
 * The days of the month that the event occurs, as an array of number objects.
 * Values can be from 1 to 31 and from -1 to -31. This parameter is only valid for
 * recurrence rules of type
 * [RECURRENCEFREQUENCY_MONTHLY](Titanium.Calendar.RECURRENCEFREQUENCY_MONTHLY).
 */
+daysOfTheMonth: number[],

/**
 * The months of the year that the event occurs, as an array of Number objects.
 * Values can be from 1 to 12. This parameter is only valid for recurrence rules of
 * type [RECURRENCEFREQUENCY_YEARLY](Titanium.Calendar.RECURRENCEFREQUENCY_YEARLY).
 */
+monthsOfTheYear: number[],

/**
 * The weeks of the year that the event occurs, as an array of number objects.
 * Values can be from 1 to 53 and from -1 to -53. This parameter is only valid for
 * recurrence rules of type [RECURRENCEFREQUENCY_YEARLY](Titanium.Calendar.RECURRENCEFREQUENCY_YEARLY).
 */
+weeksOfTheYear: number[],

/**
 * The days of the year that the event occurs, as an array of number objects.
 * Values can be from 1 to 366 and from -1 to -366. This parameter is only valid for
 * recurrence rules of type [RECURRENCEFREQUENCY_YEARLY](Titanium.Calendar.RECURRENCEFREQUENCY_YEARLY).
 */
+daysOfTheYear: number[],

/**
 * An array of ordinal numbers that filters which recurrences to include in the
 * recurrence rule's frequency. For example, a yearly recurrence rule that has a
 * [daysOfTheWeek](Titanium.Calendar.RecurrenceRule.daysOfTheWeek) value that specifies
 * Monday through Friday, and a `setPositions` array containing 2 and -1, occurs only
 * on the second weekday and last weekday of every year.
 */
+setPositions: number[],

/**
 * End of a recurrence rule.
 */
+end: recurrenceEndDictionary,

/**
 * Gets the value of the <Titanium.Calendar.RecurrenceRule.calendarID> property.
 */
getCalendarID(): string,

/**
 * Gets the value of the <Titanium.Calendar.RecurrenceRule.frequency> property.
 */
getFrequency(): number,

/**
 * Gets the value of the <Titanium.Calendar.RecurrenceRule.interval> property.
 */
getInterval(): number,

/**
 * Gets the value of the <Titanium.Calendar.RecurrenceRule.daysOfTheWeek> property.
 */
getDaysOfTheWeek(): daysOfTheWeekDictionary,

/**
 * Gets the value of the <Titanium.Calendar.RecurrenceRule.daysOfTheMonth> property.
 */
getDaysOfTheMonth(): number[],

/**
 * Gets the value of the <Titanium.Calendar.RecurrenceRule.monthsOfTheYear> property.
 */
getMonthsOfTheYear(): number[],

/**
 * Gets the value of the <Titanium.Calendar.RecurrenceRule.weeksOfTheYear> property.
 */
getWeeksOfTheYear(): number[],

/**
 * Gets the value of the <Titanium.Calendar.RecurrenceRule.daysOfTheYear> property.
 */
getDaysOfTheYear(): number[],

/**
 * Gets the value of the <Titanium.Calendar.RecurrenceRule.setPositions> property.
 */
getSetPositions(): number[],

/**
 * Gets the value of the <Titanium.Calendar.RecurrenceRule.end> property.
 */
getEnd(): recurrenceEndDictionary
} & Titanium$Proxy



/**
 * An object that represents a single reminder for an event in a calendar.
 */
declare type Titanium$Calendar$Reminder = {

/**
 * Identifier of this reminder.
 */
+id: string,

/**
 * Method by which this reminder will be delivered.
 */
+method: number,

/**
 * Reminder notice period in minutes, that determines how long prior to the event this reminder
 * should trigger.
 */
+minutes: number,

/**
 * Gets the value of the <Titanium.Calendar.Reminder.id> property.
 */
getId(): string,

/**
 * Gets the value of the <Titanium.Calendar.Reminder.method> property.
 */
getMethod(): number,

/**
 * Gets the value of the <Titanium.Calendar.Reminder.minutes> property.
 */
getMinutes(): number
} & Titanium$Proxy



      declare var npm$namespace$Titanium$Codec: {
        addEventListener: typeof Titanium$Codec$addEventListener,
removeEventListener: typeof Titanium$Codec$removeEventListener,
fireEvent: typeof Titanium$Codec$fireEvent,
applyProperties: typeof Titanium$Codec$applyProperties,
getNativeByteOrder: typeof Titanium$Codec$getNativeByteOrder,
encodeNumber: typeof Titanium$Codec$encodeNumber,
decodeNumber: typeof Titanium$Codec$decodeNumber,
encodeString: typeof Titanium$Codec$encodeString,
decodeString: typeof Titanium$Codec$decodeString,
getBubbleParent: typeof Titanium$Codec$getBubbleParent,
setBubbleParent: typeof Titanium$Codec$setBubbleParent,
getApiName: typeof Titanium$Codec$getApiName,
getLifecycleContainer: typeof Titanium$Codec$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Codec$setLifecycleContainer,
        bubbleParent: typeof Titanium$Codec$bubbleParent,
apiName: typeof Titanium$Codec$apiName,
lifecycleContainer: typeof Titanium$Codec$lifecycleContainer,
CHARSET_ASCII: typeof Titanium$Codec$CHARSET_ASCII,
CHARSET_ISO_LATIN_1: typeof Titanium$Codec$CHARSET_ISO_LATIN_1,
CHARSET_UTF8: typeof Titanium$Codec$CHARSET_UTF8,
CHARSET_UTF16: typeof Titanium$Codec$CHARSET_UTF16,
CHARSET_UTF16BE: typeof Titanium$Codec$CHARSET_UTF16BE,
CHARSET_UTF16LE: typeof Titanium$Codec$CHARSET_UTF16LE,
TYPE_BYTE: typeof Titanium$Codec$TYPE_BYTE,
TYPE_SHORT: typeof Titanium$Codec$TYPE_SHORT,
TYPE_INT: typeof Titanium$Codec$TYPE_INT,
TYPE_FLOAT: typeof Titanium$Codec$TYPE_FLOAT,
TYPE_LONG: typeof Titanium$Codec$TYPE_LONG,
TYPE_DOUBLE: typeof Titanium$Codec$TYPE_DOUBLE,
BIG_ENDIAN: typeof Titanium$Codec$BIG_ENDIAN,
LITTLE_ENDIAN: typeof Titanium$Codec$LITTLE_ENDIAN,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Codec$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Codec$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Codec$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * ASCII character encoding..
 */
declare var Titanium$Codec$CHARSET_ASCII: string;


/**
 * ISO 8859-1 (Latin-1) character encoding.
 */
declare var Titanium$Codec$CHARSET_ISO_LATIN_1: string;


/**
 * UTF-8 character encoding.
 */
declare var Titanium$Codec$CHARSET_UTF8: string;


/**
 * UTF-16 character encoding with default byte order.
 */
declare var Titanium$Codec$CHARSET_UTF16: string;


/**
 * UTF-16 character encoding with big endian byte order.
 */
declare var Titanium$Codec$CHARSET_UTF16BE: string;


/**
 * UTF-16 character encoding with little endian byte order.
 */
declare var Titanium$Codec$CHARSET_UTF16LE: string;


/**
 * 8-bit integer encoding type.
 */
declare var Titanium$Codec$TYPE_BYTE: string;


/**
 * 16-bit integer encoding type.
 */
declare var Titanium$Codec$TYPE_SHORT: string;


/**
 * 32-bit integer encoding type.
 */
declare var Titanium$Codec$TYPE_INT: string;


/**
 * 32-bit single precision floating-point type.
 */
declare var Titanium$Codec$TYPE_FLOAT: string;


/**
 * 64-bit integer encoding type.
 */
declare var Titanium$Codec$TYPE_LONG: string;


/**
 * 64-bit double precision floating-point type.
 */
declare var Titanium$Codec$TYPE_DOUBLE: string;


/**
 * Big endian (network) byte order -- that is, the most significant byte first.
 */
declare var Titanium$Codec$BIG_ENDIAN: number;


/**
 * Little endian byte order -- that is, the least significant byte first.
 */
declare var Titanium$Codec$LITTLE_ENDIAN: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Codec$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Codec$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Codec$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Codec$applyProperties(props: any): void



/**
 * Get the OS native byte order (either <Titanium.Codec.BIG_ENDIAN> or
 * <Titanium.Codec.LITTLE_ENDIAN>).
 */
declare function Titanium$Codec$getNativeByteOrder(): number



/**
 * Encodes a number and writes it to a buffer.
 */
declare function Titanium$Codec$encodeNumber(options: EncodeNumberDict): number



/**
 * Decodes a number from the `source` buffer using the specified data type.
 */
declare function Titanium$Codec$decodeNumber(options: DecodeNumberDict): number



/**
 * Encodes a string into a series of bytes in a buffer using the specified character set.
 */
declare function Titanium$Codec$encodeString(options: any): number



/**
 * Decodes the source buffer into a String using the supplied character set.
 */
declare function Titanium$Codec$decodeString(options: DecodeStringDict): string



/**
 * Gets the value of the <Titanium.Codec.bubbleParent> property.
 */
declare function Titanium$Codec$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Codec.bubbleParent> property.
 */
declare function Titanium$Codec$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Codec.apiName> property.
 */
declare function Titanium$Codec$getApiName(): string



/**
 * Gets the value of the <Titanium.Codec.lifecycleContainer> property.
 */
declare function Titanium$Codec$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Codec.lifecycleContainer> property.
 */
declare function Titanium$Codec$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Codec.lifecycleContainer> property.
 */
declare function Titanium$Codec$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



      declare var npm$namespace$Titanium$Contacts: {
        addEventListener: typeof Titanium$Contacts$addEventListener,
removeEventListener: typeof Titanium$Contacts$removeEventListener,
fireEvent: typeof Titanium$Contacts$fireEvent,
applyProperties: typeof Titanium$Contacts$applyProperties,
createGroup: typeof Titanium$Contacts$createGroup,
createPerson: typeof Titanium$Contacts$createPerson,
getAllGroups: typeof Titanium$Contacts$getAllGroups,
getAllPeople: typeof Titanium$Contacts$getAllPeople,
getGroupByID: typeof Titanium$Contacts$getGroupByID,
getGroupByIdentifier: typeof Titanium$Contacts$getGroupByIdentifier,
getPeopleWithName: typeof Titanium$Contacts$getPeopleWithName,
getPersonByID: typeof Titanium$Contacts$getPersonByID,
getPersonByIdentifier: typeof Titanium$Contacts$getPersonByIdentifier,
removeGroup: typeof Titanium$Contacts$removeGroup,
removePerson: typeof Titanium$Contacts$removePerson,
revert: typeof Titanium$Contacts$revert,
save: typeof Titanium$Contacts$save,
showContacts: typeof Titanium$Contacts$showContacts,
hasContactsPermissions: typeof Titanium$Contacts$hasContactsPermissions,
requestContactsPermissions: typeof Titanium$Contacts$requestContactsPermissions,
requestAuthorization: typeof Titanium$Contacts$requestAuthorization,
getBubbleParent: typeof Titanium$Contacts$getBubbleParent,
setBubbleParent: typeof Titanium$Contacts$setBubbleParent,
getApiName: typeof Titanium$Contacts$getApiName,
getLifecycleContainer: typeof Titanium$Contacts$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Contacts$setLifecycleContainer,
getContactsAuthorization: typeof Titanium$Contacts$getContactsAuthorization,
        bubbleParent: typeof Titanium$Contacts$bubbleParent,
apiName: typeof Titanium$Contacts$apiName,
lifecycleContainer: typeof Titanium$Contacts$lifecycleContainer,
CONTACTS_KIND_ORGANIZATION: typeof Titanium$Contacts$CONTACTS_KIND_ORGANIZATION,
CONTACTS_KIND_PERSON: typeof Titanium$Contacts$CONTACTS_KIND_PERSON,
CONTACTS_SORT_FIRST_NAME: typeof Titanium$Contacts$CONTACTS_SORT_FIRST_NAME,
CONTACTS_SORT_LAST_NAME: typeof Titanium$Contacts$CONTACTS_SORT_LAST_NAME,
AUTHORIZATION_AUTHORIZED: typeof Titanium$Contacts$AUTHORIZATION_AUTHORIZED,
AUTHORIZATION_DENIED: typeof Titanium$Contacts$AUTHORIZATION_DENIED,
AUTHORIZATION_RESTRICTED: typeof Titanium$Contacts$AUTHORIZATION_RESTRICTED,
AUTHORIZATION_UNKNOWN: typeof Titanium$Contacts$AUTHORIZATION_UNKNOWN,
contactsAuthorization: typeof Titanium$Contacts$contactsAuthorization,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Contacts$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Contacts$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Contacts$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Specifies that a contact is an organization.
 */
declare var Titanium$Contacts$CONTACTS_KIND_ORGANIZATION: number;


/**
 * Specifies that a contact is a person.
 */
declare var Titanium$Contacts$CONTACTS_KIND_PERSON: number;


/**
 * Specifies that group members will be sorted by first name.
 */
declare var Titanium$Contacts$CONTACTS_SORT_FIRST_NAME: number;


/**
 * Specifies that group members will be sorted by last name.
 */
declare var Titanium$Contacts$CONTACTS_SORT_LAST_NAME: number;


/**
 * A [contactsAuthorization](Titanium.Contacts.contactsAuthorization) value
 * indicating that the application is authorized to use the address book.
 */
declare var Titanium$Contacts$AUTHORIZATION_AUTHORIZED: number;


/**
 * A [contactsAuthorization](Titanium.Contacts.contactsAuthorization) value
 * indicating that the application is not authorized to use the address book.
 */
declare var Titanium$Contacts$AUTHORIZATION_DENIED: number;


/**
 * A [contactsAuthorization](Titanium.Contacts.contactsAuthorization) value
 * indicating that the application is not authorized to use the address book *and*
 * the user cannot change this application's status.
 */
declare var Titanium$Contacts$AUTHORIZATION_RESTRICTED: number;


/**
 * A [contactsAuthorization](Titanium.Contacts.contactsAuthorization) value
 * indicating that the authorization state is unknown.
 */
declare var Titanium$Contacts$AUTHORIZATION_UNKNOWN: number;


/**
 * Returns an authorization constant indicating if the application has access to the address book.
 */
declare var Titanium$Contacts$contactsAuthorization: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Contacts$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Contacts$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Contacts$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Contacts$applyProperties(props: any): void



/**
 * Creates and returns an instance of <Titanium.Contacts.Group>.
 */
declare function Titanium$Contacts$createGroup(parameters?: any): Titanium$Contacts$Group



/**
 * Creates and returns an instance of <Titanium.Contacts.Person>, and commits all pending
 * changes to the underlying contacts database.
 */
declare function Titanium$Contacts$createPerson(parameters?: any): Titanium$Contacts$Person



/**
 * Gets all groups.
 */
declare function Titanium$Contacts$getAllGroups(): Titanium$Contacts$Group[]



/**
 * Gets all people, unless a limit is specified.
 */
declare function Titanium$Contacts$getAllPeople(limit: number): Titanium$Contacts$Person[]



/**
 * Gets the group with the specified identifier.
 */
declare function Titanium$Contacts$getGroupByID(id: number): Titanium$Contacts$Group



/**
 * Gets the group with the specified identifier.
 */
declare function Titanium$Contacts$getGroupByIdentifier(id: string): Titanium$Contacts$Group



/**
 * Gets people with a `firstName`, `middleName` or `lastName` field, or a combination
 * of these fields, that match the specified name.
 */
declare function Titanium$Contacts$getPeopleWithName(name: string): Titanium$Contacts$Person[]



/**
 * Gets the person with the specified identifier.
 */
declare function Titanium$Contacts$getPersonByID(id: number): Titanium$Contacts$Person



/**
 * Gets the person with the specified identifier.
 */
declare function Titanium$Contacts$getPersonByIdentifier(id: number): Titanium$Contacts$Person



/**
 * Removes a group from the address book.
 */
declare function Titanium$Contacts$removeGroup(group: Titanium$Contacts$Group): void



/**
 * Removes a contact from the address book.
 */
declare function Titanium$Contacts$removePerson(person: Titanium$Contacts$Person): void



/**
 * Reverts all changes made by the previous save to the address book. Deprecated for >= iOS9.
 */
declare function Titanium$Contacts$revert(): void



/**
 * Commits all pending changes to the underlying contacts database.
 */
declare function Titanium$Contacts$save(contacts: $ReadOnlyArray<Titanium$Contacts$Person>): void



/**
 * Displays a picker that allows a person to be selected.
 */
declare function Titanium$Contacts$showContacts(params: showContactsParams): void



/**
 * Returns `true` if the app has contacts access.
 */
declare function Titanium$Contacts$hasContactsPermissions(): boolean



/**
 * Requests for contacts access.
 */
declare function Titanium$Contacts$requestContactsPermissions(callback: (param0: ContactsAuthorizationResponse) => any): void



/**
 * If authorization is unknown, will bring up a dialog requesting permission.
 */
declare function Titanium$Contacts$requestAuthorization(callback: (param0: ContactsAuthorizationResponse) => any): void



/**
 * Gets the value of the <Titanium.Contacts.bubbleParent> property.
 */
declare function Titanium$Contacts$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Contacts.bubbleParent> property.
 */
declare function Titanium$Contacts$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Contacts.apiName> property.
 */
declare function Titanium$Contacts$getApiName(): string



/**
 * Gets the value of the <Titanium.Contacts.lifecycleContainer> property.
 */
declare function Titanium$Contacts$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Contacts.lifecycleContainer> property.
 */
declare function Titanium$Contacts$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Contacts.lifecycleContainer> property.
 */
declare function Titanium$Contacts$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.Contacts.contactsAuthorization> property.
 */
declare function Titanium$Contacts$getContactsAuthorization(): number



/**
 * An object which represents a group in the system contacts address book.
 */
declare type Titanium$Contacts$Group = {

/**
 * Name of this group.
 */
name: string,

/**
 * Record identifier of the group. Single value. Deprecated for iOS 9 and later.
 */
recordId: number,

/**
 * Identifier of the group.
 */
+identifier: string,

/**
 * Adds a person to this group.
 */
add(person: Titanium$Contacts$Person): void,

/**
 * Gets people that are members of this group.
 */
members(): Titanium$Contacts$Person[],

/**
 * Removes a person from this group. For >= iOS9, it is not
 * required to call <Titanium.Contacts.save> after calling this method.
 */
remove(person: Titanium$Contacts$Person): void,

/**
 * Gets people that are members of this group, sorted in the specified order.
 */
sortedMembers(sortBy: number): Titanium$Contacts$Person[],

/**
 * Gets the value of the <Titanium.Contacts.Group.name> property.
 */
getName(): string,

/**
 * Sets the value of the <Titanium.Contacts.Group.name> property.
 */
setName(name: string): void,

/**
 * Gets the value of the <Titanium.Contacts.Group.recordId> property.
 */
getRecordId(): number,

/**
 * Sets the value of the <Titanium.Contacts.Group.recordId> property.
 */
setRecordId(recordId: number): void,

/**
 * Gets the value of the <Titanium.Contacts.Group.identifier> property.
 */
getIdentifier(): string
} & Titanium$Proxy



/**
 * An object that represents a contact record for a person or organization in the system contacts
 * address book.
 */
declare type Titanium$Contacts$Person = {

/**
 * Addresses for the person. Multi-value. Read-only on Android.
 */
address: any,

/**
 * Date of birth of the person. Single value.
 */
birthday: string,

/**
 * Alternate birthday of the person. Single Dictionary.
 */
alternateBirthday: any,

/**
 * Date and time that the person record was created. Single value. Deprecated since iOS 9.
 */
+created: string,

/**
 * Dates associated with the person. Multi-value.
 */
date: any,

/**
 * Department of the person. Single value.
 */
department: string,

/**
 * Email addresses for the person. Multi-value. Read-only on Android.
 */
email: any,

/**
 * First name of the person. Single value.
 */
firstName: string,

/**
 * Phonetic first name of the person.  Single value.
 */
firstPhonetic: string,

/**
 * Localized full name of the person. Single value. Read-only on Android.
 */
+fullName: string,

/**
 * Record identifier of the person. Single value.
 */
+id: number,

/**
 * Identifier of the person.
 */
+identifier: string,

/**
 * Image for the person. Single value. Read-only for >= iOS9
 */
image: Titanium$Blob,

/**
 * Instant messenger information of the person. Multi-value.
 */
instantMessage: any,

/**
 * Social profile information of the person. Multi-value.
 */
socialProfile: any,

/**
 * Job title of the person. Single value.
 */
jobTitle: string,

/**
 * Determines the type of information the person record contains; either person or organization.
 * Read-only on Android.
 */
kind: number,

/**
 * Last name of the person. Single value.
 */
lastName: string,

/**
 * Phonetic last name of the person. Single value.
 */
lastPhonetic: string,

/**
 * Middle name of the person. Single value.
 */
middleName: string,

/**
 * Phonetic middle name of the person. Single value.
 */
middlePhonetic: string,

/**
 * Date and time that the person record was last modified. Single value. Deprecated since iOS 9.
 */
+modified: string,

/**
 * Nickname of the person. Single value.
 */
nickname: string,

/**
 * Notes for the person. Single value.
 */
note: string,

/**
 * Organization to which the person belongs. Single value.
 */
organization: string,

/**
 * Phone numbers for the person. Multi-value. Read-only on Android.
 */
phone: any,

/**
 * Prefix for the person. Single value.
 */
+prefix: string,

/**
 * Record identifier of the person. Single value. Deprecated since iOS 9.
 */
recordId: number,

/**
 * Names of people to which the person is related. Multi-value.
 */
relatedNames: any,

/**
 * Suffix for the person. Single value.
 */
+suffix: string,

/**
 * URLs of webpages associated with the person. Multi-value.
 */
url: any,

/**
 * Gets the value of the <Titanium.Contacts.Person.address> property.
 */
getAddress(): any,

/**
 * Sets the value of the <Titanium.Contacts.Person.address> property.
 */
setAddress(address: any): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.birthday> property.
 */
getBirthday(): string,

/**
 * Sets the value of the <Titanium.Contacts.Person.birthday> property.
 */
setBirthday(birthday: string): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.alternateBirthday> property.
 */
getAlternateBirthday(): any,

/**
 * Sets the value of the <Titanium.Contacts.Person.alternateBirthday> property.
 */
setAlternateBirthday(alternateBirthday: any): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.created> property.
 */
getCreated(): string,

/**
 * Gets the value of the <Titanium.Contacts.Person.date> property.
 */
getDate(): any,

/**
 * Sets the value of the <Titanium.Contacts.Person.date> property.
 */
setDate(date: any): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.department> property.
 */
getDepartment(): string,

/**
 * Sets the value of the <Titanium.Contacts.Person.department> property.
 */
setDepartment(department: string): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.email> property.
 */
getEmail(): any,

/**
 * Sets the value of the <Titanium.Contacts.Person.email> property.
 */
setEmail(email: any): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.firstName> property.
 */
getFirstName(): string,

/**
 * Sets the value of the <Titanium.Contacts.Person.firstName> property.
 */
setFirstName(firstName: string): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.firstPhonetic> property.
 */
getFirstPhonetic(): string,

/**
 * Sets the value of the <Titanium.Contacts.Person.firstPhonetic> property.
 */
setFirstPhonetic(firstPhonetic: string): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.fullName> property.
 */
getFullName(): string,

/**
 * Gets the value of the <Titanium.Contacts.Person.id> property.
 */
getId(): number,

/**
 * Gets the value of the <Titanium.Contacts.Person.identifier> property.
 */
getIdentifier(): string,

/**
 * Gets the value of the <Titanium.Contacts.Person.image> property.
 */
getImage(): Titanium$Blob,

/**
 * Sets the value of the <Titanium.Contacts.Person.image> property.
 */
setImage(image: Titanium$Blob): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.instantMessage> property.
 */
getInstantMessage(): any,

/**
 * Sets the value of the <Titanium.Contacts.Person.instantMessage> property.
 */
setInstantMessage(instantMessage: any): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.socialProfile> property.
 */
getSocialProfile(): any,

/**
 * Sets the value of the <Titanium.Contacts.Person.socialProfile> property.
 */
setSocialProfile(socialProfile: any): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.jobTitle> property.
 */
getJobTitle(): string,

/**
 * Sets the value of the <Titanium.Contacts.Person.jobTitle> property.
 */
setJobTitle(jobTitle: string): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.kind> property.
 */
getKind(): number,

/**
 * Sets the value of the <Titanium.Contacts.Person.kind> property.
 */
setKind(kind: number): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.lastName> property.
 */
getLastName(): string,

/**
 * Sets the value of the <Titanium.Contacts.Person.lastName> property.
 */
setLastName(lastName: string): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.lastPhonetic> property.
 */
getLastPhonetic(): string,

/**
 * Sets the value of the <Titanium.Contacts.Person.lastPhonetic> property.
 */
setLastPhonetic(lastPhonetic: string): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.middleName> property.
 */
getMiddleName(): string,

/**
 * Sets the value of the <Titanium.Contacts.Person.middleName> property.
 */
setMiddleName(middleName: string): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.middlePhonetic> property.
 */
getMiddlePhonetic(): string,

/**
 * Sets the value of the <Titanium.Contacts.Person.middlePhonetic> property.
 */
setMiddlePhonetic(middlePhonetic: string): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.modified> property.
 */
getModified(): string,

/**
 * Gets the value of the <Titanium.Contacts.Person.nickname> property.
 */
getNickname(): string,

/**
 * Sets the value of the <Titanium.Contacts.Person.nickname> property.
 */
setNickname(nickname: string): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.note> property.
 */
getNote(): string,

/**
 * Sets the value of the <Titanium.Contacts.Person.note> property.
 */
setNote(note: string): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.organization> property.
 */
getOrganization(): string,

/**
 * Sets the value of the <Titanium.Contacts.Person.organization> property.
 */
setOrganization(organization: string): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.phone> property.
 */
getPhone(): any,

/**
 * Sets the value of the <Titanium.Contacts.Person.phone> property.
 */
setPhone(phone: any): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.prefix> property.
 */
getPrefix(): string,

/**
 * Gets the value of the <Titanium.Contacts.Person.recordId> property.
 */
getRecordId(): number,

/**
 * Sets the value of the <Titanium.Contacts.Person.recordId> property.
 */
setRecordId(recordId: number): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.relatedNames> property.
 */
getRelatedNames(): any,

/**
 * Sets the value of the <Titanium.Contacts.Person.relatedNames> property.
 */
setRelatedNames(relatedNames: any): void,

/**
 * Gets the value of the <Titanium.Contacts.Person.suffix> property.
 */
getSuffix(): string,

/**
 * Gets the value of the <Titanium.Contacts.Person.url> property.
 */
getUrl(): any,

/**
 * Sets the value of the <Titanium.Contacts.Person.url> property.
 */
setUrl(url: any): void
} & Titanium$Proxy



      declare var npm$namespace$Titanium$Database: {
        addEventListener: typeof Titanium$Database$addEventListener,
removeEventListener: typeof Titanium$Database$removeEventListener,
fireEvent: typeof Titanium$Database$fireEvent,
applyProperties: typeof Titanium$Database$applyProperties,
install: typeof Titanium$Database$install,
open: typeof Titanium$Database$open,
getBubbleParent: typeof Titanium$Database$getBubbleParent,
setBubbleParent: typeof Titanium$Database$setBubbleParent,
getApiName: typeof Titanium$Database$getApiName,
getLifecycleContainer: typeof Titanium$Database$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Database$setLifecycleContainer,
        bubbleParent: typeof Titanium$Database$bubbleParent,
apiName: typeof Titanium$Database$apiName,
lifecycleContainer: typeof Titanium$Database$lifecycleContainer,
FIELD_TYPE_DOUBLE: typeof Titanium$Database$FIELD_TYPE_DOUBLE,
FIELD_TYPE_FLOAT: typeof Titanium$Database$FIELD_TYPE_FLOAT,
FIELD_TYPE_INT: typeof Titanium$Database$FIELD_TYPE_INT,
FIELD_TYPE_STRING: typeof Titanium$Database$FIELD_TYPE_STRING,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Database$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Database$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Database$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Constant for requesting a column's value returned in double form.
 */
declare var Titanium$Database$FIELD_TYPE_DOUBLE: number;


/**
 * Constant for requesting a column's value returned in float form.
 */
declare var Titanium$Database$FIELD_TYPE_FLOAT: number;


/**
 * Constant for requesting a column's value returned in integer form.
 */
declare var Titanium$Database$FIELD_TYPE_INT: number;


/**
 * Constant for requesting a column's value returned in string form.
 */
declare var Titanium$Database$FIELD_TYPE_STRING: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Database$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Database$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Database$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Database$applyProperties(props: any): void



/**
 * Installs an SQLite database to device's internal storage.
 */
declare function Titanium$Database$install(path: string, dbName: string): Titanium$Database$DB



/**
 * Opens an SQLite database.
 */
declare function Titanium$Database$open(dbName: string): Titanium$Database$DB



/**
 * Gets the value of the <Titanium.Database.bubbleParent> property.
 */
declare function Titanium$Database$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Database.bubbleParent> property.
 */
declare function Titanium$Database$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Database.apiName> property.
 */
declare function Titanium$Database$getApiName(): string



/**
 * Gets the value of the <Titanium.Database.lifecycleContainer> property.
 */
declare function Titanium$Database$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Database.lifecycleContainer> property.
 */
declare function Titanium$Database$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Database.lifecycleContainer> property.
 */
declare function Titanium$Database$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * The `Database` instance returned by <Titanium.Database.open> or <Titanium.Database.install>.
 */
declare type Titanium$Database$DB = {

/**
 * A `File` object representing the file where this database is stored. Must only be used for
 * setting file properties.
 */
+file: Titanium$Filesystem$File,

/**
 * The identifier of the last populated row.
 */
lastInsertRowId: number,

/**
 * The name of the database.
 */
name: string,

/**
 * The number of rows affected by the last query.
 */
rowsAffected: number,

/**
 * Closes the database and releases resources from memory. Once closed, this instance is no
 * longer valid and should not be used. On iOS, also closes all <Titanium.Database.ResultSet>
 * instances that exist.
 */
close(): void,

/**
 * Executes an SQL statement against the database and returns a `ResultSet`.
 */
execute(sql: string, vararg?: string): Titanium$Database$ResultSet,

/**
 * Executes an SQL statement against the database and returns a `ResultSet`.
 */
execute(sql: string, vararg?: $ReadOnlyArray<string>): Titanium$Database$ResultSet,

/**
 * Executes an SQL statement against the database and returns a `ResultSet`.
 */
execute(sql: string, vararg?: any): Titanium$Database$ResultSet,

/**
 * Executes an SQL statement against the database and returns a `ResultSet`.
 */
execute(sql: string, vararg?: $ReadOnlyArray<any>): Titanium$Database$ResultSet,

/**
 * Removes the database files for this instance from disk. WARNING: this is a destructive
 * operation and cannot be reversed. All data in the database will be lost; use with caution.
 */
remove(): void,

/**
 * Gets the value of the <Titanium.Database.DB.file> property.
 */
getFile(): Titanium$Filesystem$File,

/**
 * Gets the value of the <Titanium.Database.DB.lastInsertRowId> property.
 */
getLastInsertRowId(): number,

/**
 * Sets the value of the <Titanium.Database.DB.lastInsertRowId> property.
 */
setLastInsertRowId(lastInsertRowId: number): void,

/**
 * Gets the value of the <Titanium.Database.DB.name> property.
 */
getName(): string,

/**
 * Sets the value of the <Titanium.Database.DB.name> property.
 */
setName(name: string): void,

/**
 * Gets the value of the <Titanium.Database.DB.rowsAffected> property.
 */
getRowsAffected(): number,

/**
 * Sets the value of the <Titanium.Database.DB.rowsAffected> property.
 */
setRowsAffected(rowsAffected: number): void
} & Titanium$Proxy



/**
 * The ResultSet instance returned by <Titanium.Database.DB.execute>.
 */
declare type Titanium$Database$ResultSet = {

/**
 * The number of columns in this result set.
 */
+fieldCount: number,

/**
 * The number of rows in this result set.
 */
+rowCount: number,

/**
 * Indicates whether the current row is valid.
 */
+validRow: boolean,

/**
 * Closes this result set and release resources. Once closed, the result set must no longer
 * be used.
 */
close(): void,

/**
 * Retrieves the value for the specified field in the current row,
 * and casts it to the specified type (String, Integer, Float or Double.)
 */
field(index: number, type?: number): string | number | Titanium$Blob,

/**
 * Retrieves the value for the specified field in the current row,
 * and casts it to the specified type (String, Integer, Float or Double.)
 */
fieldByName(name: string, type?: number): string | number | Titanium$Blob,

/**
 * Returns the field name for the specified field index.
 */
fieldName(index: number): string,

/**
 * Returns the field name for the specified field index.
 */
getFieldName(index: number): string,

/**
 * Returns whether the current row is valid.
 */
isValidRow(): boolean,

/**
 * Advances to the next row in the result set and returns `true` if one exists,
 * or `false` otherwise.
 */
next(): boolean,

/**
 * Gets the value of the <Titanium.Database.ResultSet.fieldCount> property.
 */
getFieldCount(): number,

/**
 * Gets the value of the <Titanium.Database.ResultSet.rowCount> property.
 */
getRowCount(): number,

/**
 * Gets the value of the <Titanium.Database.ResultSet.validRow> property.
 */
getValidRow(): boolean
} & Titanium$Proxy



      declare var npm$namespace$Titanium$Filesystem: {
        addEventListener: typeof Titanium$Filesystem$addEventListener,
removeEventListener: typeof Titanium$Filesystem$removeEventListener,
fireEvent: typeof Titanium$Filesystem$fireEvent,
applyProperties: typeof Titanium$Filesystem$applyProperties,
createTempDirectory: typeof Titanium$Filesystem$createTempDirectory,
createTempFile: typeof Titanium$Filesystem$createTempFile,
getFile: typeof Titanium$Filesystem$getFile,
getAsset: typeof Titanium$Filesystem$getAsset,
isExternalStoragePresent: typeof Titanium$Filesystem$isExternalStoragePresent,
hasStoragePermissions: typeof Titanium$Filesystem$hasStoragePermissions,
requestStoragePermissions: typeof Titanium$Filesystem$requestStoragePermissions,
openStream: typeof Titanium$Filesystem$openStream,
directoryForSuite: typeof Titanium$Filesystem$directoryForSuite,
getBubbleParent: typeof Titanium$Filesystem$getBubbleParent,
setBubbleParent: typeof Titanium$Filesystem$setBubbleParent,
getApiName: typeof Titanium$Filesystem$getApiName,
getLifecycleContainer: typeof Titanium$Filesystem$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Filesystem$setLifecycleContainer,
getApplicationCacheDirectory: typeof Titanium$Filesystem$getApplicationCacheDirectory,
getApplicationDataDirectory: typeof Titanium$Filesystem$getApplicationDataDirectory,
getApplicationDirectory: typeof Titanium$Filesystem$getApplicationDirectory,
getApplicationSupportDirectory: typeof Titanium$Filesystem$getApplicationSupportDirectory,
getExternalStorageDirectory: typeof Titanium$Filesystem$getExternalStorageDirectory,
getLineEnding: typeof Titanium$Filesystem$getLineEnding,
getResourcesDirectory: typeof Titanium$Filesystem$getResourcesDirectory,
getResRawDirectory: typeof Titanium$Filesystem$getResRawDirectory,
getSeparator: typeof Titanium$Filesystem$getSeparator,
getTempDirectory: typeof Titanium$Filesystem$getTempDirectory,
        bubbleParent: typeof Titanium$Filesystem$bubbleParent,
apiName: typeof Titanium$Filesystem$apiName,
lifecycleContainer: typeof Titanium$Filesystem$lifecycleContainer,
MODE_APPEND: typeof Titanium$Filesystem$MODE_APPEND,
MODE_READ: typeof Titanium$Filesystem$MODE_READ,
MODE_WRITE: typeof Titanium$Filesystem$MODE_WRITE,
IOS_FILE_PROTECTION_NONE: typeof Titanium$Filesystem$IOS_FILE_PROTECTION_NONE,
IOS_FILE_PROTECTION_COMPLETE: typeof Titanium$Filesystem$IOS_FILE_PROTECTION_COMPLETE,
IOS_FILE_PROTECTION_COMPLETE_UNLESS_OPEN: typeof Titanium$Filesystem$IOS_FILE_PROTECTION_COMPLETE_UNLESS_OPEN,
IOS_FILE_PROTECTION_COMPLETE_UNTIL_FIRST_USER_AUTHENTICATION: typeof Titanium$Filesystem$IOS_FILE_PROTECTION_COMPLETE_UNTIL_FIRST_USER_AUTHENTICATION,
applicationCacheDirectory: typeof Titanium$Filesystem$applicationCacheDirectory,
applicationDataDirectory: typeof Titanium$Filesystem$applicationDataDirectory,
applicationDirectory: typeof Titanium$Filesystem$applicationDirectory,
applicationSupportDirectory: typeof Titanium$Filesystem$applicationSupportDirectory,
externalStorageDirectory: typeof Titanium$Filesystem$externalStorageDirectory,
lineEnding: typeof Titanium$Filesystem$lineEnding,
resourcesDirectory: typeof Titanium$Filesystem$resourcesDirectory,
resRawDirectory: typeof Titanium$Filesystem$resRawDirectory,
separator: typeof Titanium$Filesystem$separator,
tempDirectory: typeof Titanium$Filesystem$tempDirectory,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Filesystem$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Filesystem$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Filesystem$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Constant for append mode for file operations.
 */
declare var Titanium$Filesystem$MODE_APPEND: number;


/**
 * Constant for read mode for file operations.
 */
declare var Titanium$Filesystem$MODE_READ: number;


/**
 * Constant for write mode for file operations.
 */
declare var Titanium$Filesystem$MODE_WRITE: number;


/**
 * Constant used to set protection key to NSFileProtectionNone in file attributes.
 */
declare var Titanium$Filesystem$IOS_FILE_PROTECTION_NONE: string;


/**
 * Constant used to set protection key to NSFileProtectionComplete in file attributes.
 */
declare var Titanium$Filesystem$IOS_FILE_PROTECTION_COMPLETE: string;


/**
 * Constant used to set protection key to NSFileProtectionCompleteUnlessOpen in file attributes.
 */
declare var Titanium$Filesystem$IOS_FILE_PROTECTION_COMPLETE_UNLESS_OPEN: string;


/**
 * Constant used to set protection key to NSFileProtectionCompleteUntilFirstUserAuthentication in file attributes.
 */
declare var Titanium$Filesystem$IOS_FILE_PROTECTION_COMPLETE_UNTIL_FIRST_USER_AUTHENTICATION: string;


/**
 * Path to the application's internal cache directory.
 */
declare var Titanium$Filesystem$applicationCacheDirectory: string;


/**
 * Path to the application's data directory.
 */
declare var Titanium$Filesystem$applicationDataDirectory: string;


/**
 * Path to the iOS application directory.
 */
declare var Titanium$Filesystem$applicationDirectory: string;


/**
 * Path to the application support directory.
 */
declare var Titanium$Filesystem$applicationSupportDirectory: string;


/**
 * Path to a directory on removable storage, such as SD card.
 */
declare var Titanium$Filesystem$externalStorageDirectory: string;


/**
 * Platform-specific line ending constant.
 */
declare var Titanium$Filesystem$lineEnding: string;


/**
 * Path to the application's resource directory.
 */
declare var Titanium$Filesystem$resourcesDirectory: string;


/**
 * Path to the application's raw resource directory.
 */
declare var Titanium$Filesystem$resRawDirectory: string;


/**
 * Platform-specific path separator constant.
 */
declare var Titanium$Filesystem$separator: string;


/**
 * Path for the application's temporary directory.
 */
declare var Titanium$Filesystem$tempDirectory: string;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Filesystem$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Filesystem$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Filesystem$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Filesystem$applyProperties(props: any): void



/**
 * Creates a temporary directory and returns a [File](Titanium.Filesystem.File) object representing the new directory.
 */
declare function Titanium$Filesystem$createTempDirectory(): Titanium$Filesystem$File



/**
 * Creates a temporary file and returns a [File](Titanium.Filesystem.File) object representing the new file.
 */
declare function Titanium$Filesystem$createTempFile(): Titanium$Filesystem$File



/**
 * Returns a `File` object representing the file identified by the path arguments.
 */
declare function Titanium$Filesystem$getFile(...paths: string[]): Titanium$Filesystem$File



/**
 * Returns a `File` object representing the file identified by the path arguments.
 */
declare function Titanium$Filesystem$getFile(...paths: string[]): Titanium$Filesystem$File



/**
 * Returns a `Blob` object representing the asset catalog image identified by the path arguments.
 */
declare function Titanium$Filesystem$getAsset(path: string): Titanium$Blob



/**
 * Returns `true` if the device supports external storage *and* the external storage device is mounted.
 */
declare function Titanium$Filesystem$isExternalStoragePresent(): boolean



/**
 * Returns `true` if the app has storage permissions.
 */
declare function Titanium$Filesystem$hasStoragePermissions(): boolean



/**
 * Requests for storage permissions
 */
declare function Titanium$Filesystem$requestStoragePermissions(callback: (param0: RequestStorageAccessResult) => any): void



/**
 * Opens file using the <Titanium.IOStream> interface.
 */
declare function Titanium$Filesystem$openStream(mode: number, path: string): Titanium$Filesystem$FileStream



/**
 * Returns the path to the container directory associated with the specified security application group ID.
 */
declare function Titanium$Filesystem$directoryForSuite(suiteName: string): string



/**
 * Gets the value of the <Titanium.Filesystem.bubbleParent> property.
 */
declare function Titanium$Filesystem$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Filesystem.bubbleParent> property.
 */
declare function Titanium$Filesystem$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Filesystem.apiName> property.
 */
declare function Titanium$Filesystem$getApiName(): string



/**
 * Gets the value of the <Titanium.Filesystem.lifecycleContainer> property.
 */
declare function Titanium$Filesystem$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Filesystem.lifecycleContainer> property.
 */
declare function Titanium$Filesystem$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Filesystem.lifecycleContainer> property.
 */
declare function Titanium$Filesystem$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.Filesystem.applicationCacheDirectory> property.
 */
declare function Titanium$Filesystem$getApplicationCacheDirectory(): string



/**
 * Gets the value of the <Titanium.Filesystem.applicationDataDirectory> property.
 */
declare function Titanium$Filesystem$getApplicationDataDirectory(): string



/**
 * Gets the value of the <Titanium.Filesystem.applicationDirectory> property.
 */
declare function Titanium$Filesystem$getApplicationDirectory(): string



/**
 * Gets the value of the <Titanium.Filesystem.applicationSupportDirectory> property.
 */
declare function Titanium$Filesystem$getApplicationSupportDirectory(): string



/**
 * Gets the value of the <Titanium.Filesystem.externalStorageDirectory> property.
 */
declare function Titanium$Filesystem$getExternalStorageDirectory(): string



/**
 * Gets the value of the <Titanium.Filesystem.lineEnding> property.
 */
declare function Titanium$Filesystem$getLineEnding(): string



/**
 * Gets the value of the <Titanium.Filesystem.resourcesDirectory> property.
 */
declare function Titanium$Filesystem$getResourcesDirectory(): string



/**
 * Gets the value of the <Titanium.Filesystem.resRawDirectory> property.
 */
declare function Titanium$Filesystem$getResRawDirectory(): string



/**
 * Gets the value of the <Titanium.Filesystem.separator> property.
 */
declare function Titanium$Filesystem$getSeparator(): string



/**
 * Gets the value of the <Titanium.Filesystem.tempDirectory> property.
 */
declare function Titanium$Filesystem$getTempDirectory(): string



/**
 * Object representing a path to a file or directory in the device's persistent storage.
 */
declare type Titanium$Filesystem$File = {

/**
 * `true` if the file is executable.
 */
+executable: boolean,

/**
 * Set to `true` if the file is hidden.
 */
hidden: boolean,

/**
 * Name of the file.
 */
+name: string,

/**
 * Native path associated with this file object, as a file URL.
 */
+nativePath: string,

/**
 * A `File` object representing the parent directory of the file identified by this object.
 */
+parent: Titanium$Filesystem$File,

/**
 * `true` if the file identified by this object is read-only.
 */
+readonly: boolean,

/**
 * Size, in bytes, of the file identified by this object.
 */
+size: number,

/**
 * Value indicating whether or not to back up to a cloud service.
 */
remoteBackup: boolean,

/**
 * `true` if the file identified by this object is a symbolic link.
 */
+symbolicLink: boolean,

/**
 * `true` if the file identified by this object is writable.
 */
+writable: boolean,

/**
 * `true` if the file identified by this object is writable.
 */
+writeable: boolean,

/**
 * Appends data to the file identified by this file object.
 */
append(data: string): boolean,

/**
 * Appends data to the file identified by this file object.
 */
append(data: Titanium$Blob): boolean,

/**
 * Appends data to the file identified by this file object.
 */
append(data: Titanium$Filesystem$File): boolean,

/**
 * Copies the file identified by this file object to a new path.
 */
copy(destinationPath: string): boolean,

/**
 * Creates a directory at the path identified by this file object.
 */
createDirectory(recursive?: boolean): boolean,

/**
 * Creates a file at the path identified by this file object.
 */
createFile(): boolean,

/**
 * Returns the creation timestamp for the file identified by this file object.
 */
createTimestamp(): number,

/**
 * Returns the creation Date for the file identified by this file object.
 */
createdAt(): Date,

/**
 * Deletes the directory identified by this file object.
 */
deleteDirectory(recursive?: boolean): boolean,

/**
 * Deletes the file identified by this file object.
 */
deleteFile(): boolean,

/**
 * Returns `true` if the file or directory identified by this file object exists on the device.
 */
exists(): boolean,

/**
 * Returns the extension for the file identified by this file object.
 */
extension(): string,

/**
 * Returns a listing of the directory identified by this file object, or `null`
 * if this object doesn't identify a directory.
 */
getDirectoryListing(): string[],

/**
 * Returns the path of the parent directory holding the file identified by this
 * file object, as a String (deprecated) **or** as a `File` object.
 */
getParent(): string | Titanium$Filesystem$File,

/**
 * Returns the protection key value of this file object.
 * Returns `null` if there's an error.
 */
getProtectionKey(): string,

/**
 * Returns `true` if this file object represents a directory.
 */
isDirectory(): boolean,

/**
 * Returns `true` if this file object represents an ordinary file.
 */
isFile(): boolean,

/**
 * Returns the last modification time for this file.
 */
modificationTimestamp(): number,

/**
 * Returns the last modification Date for the file identified by this file object.
 */
modifiedAt(): Date,

/**
 * Moves the file identified by this file object to another path.
 */
move(newpath: string): boolean,

/**
 * Opens the file identified by this file object for random access.
 */
open(mode: number): Titanium$Filesystem$FileStream,

/**
 * Returns the contents of the file identified by this file object as a `Blob`.
 */
read(): Titanium$Blob,

/**
 * Renames the file identified by this file object.
 */
rename(newname: string): boolean,

/**
 * Returns the fully-resolved native path associated with this file object.
 */
resolve(): string,

/**
 * Sets the protection key as an attribute to the file identified by this file object.
 */
setProtectionKey(fileProtectionType: string): boolean,

/**
 * Returns the amount of free space available on the device where the file identified by this file object is stored.
 */
spaceAvailable(): number,

/**
 * Writes the specified data to the file identified by this file object.
 */
write(data: string, append?: boolean): boolean,

/**
 * Writes the specified data to the file identified by this file object.
 */
write(data: Titanium$Filesystem$File, append?: boolean): boolean,

/**
 * Writes the specified data to the file identified by this file object.
 */
write(data: Titanium$Blob, append?: boolean): boolean,

/**
 * Gets the value of the <Titanium.Filesystem.File.executable> property.
 */
getExecutable(): boolean,

/**
 * Gets the value of the <Titanium.Filesystem.File.hidden> property.
 */
getHidden(): boolean,

/**
 * Sets the value of the <Titanium.Filesystem.File.hidden> property.
 */
setHidden(hidden: boolean): void,

/**
 * Gets the value of the <Titanium.Filesystem.File.name> property.
 */
getName(): string,

/**
 * Gets the value of the <Titanium.Filesystem.File.nativePath> property.
 */
getNativePath(): string,

/**
 * Gets the value of the <Titanium.Filesystem.File.readonly> property.
 */
getReadonly(): boolean,

/**
 * Gets the value of the <Titanium.Filesystem.File.size> property.
 */
getSize(): number,

/**
 * Gets the value of the <Titanium.Filesystem.File.remoteBackup> property.
 */
getRemoteBackup(): boolean,

/**
 * Sets the value of the <Titanium.Filesystem.File.remoteBackup> property.
 */
setRemoteBackup(remoteBackup: boolean): void,

/**
 * Gets the value of the <Titanium.Filesystem.File.symbolicLink> property.
 */
getSymbolicLink(): boolean,

/**
 * Gets the value of the <Titanium.Filesystem.File.writable> property.
 */
getWritable(): boolean,

/**
 * Gets the value of the <Titanium.Filesystem.File.writeable> property.
 */
getWriteable(): boolean
} & Titanium$Proxy



/**
 * Wrapper around `Titanium.Filesystem.File` that implements the `Titanium.IOStream` interface
 */
declare type Titanium$Filesystem$FileStream = {

/**
 * Reads data from this stream into a buffer.
 */
read(
buffer: Titanium$Buffer,
offset?: number,
length?: number,
resultsCallback?: (param0: ReadCallbackArgs) => any): number,

/**
 * Writes data from a buffer to this stream.
 */
write(
buffer: Titanium$Buffer,
offset?: number,
length?: number,
resultsCallback?: (param0: WriteCallbackArgs) => any): number,

/**
 * Indicates whether this stream is writable.
 */
isWritable(): boolean,

/**
 * Indicates whether this stream is readable.
 */
isReadable(): boolean,

/**
 * closes file stream, exception is thrown on error
 */
close(): void
} & Titanium$Proxy



      declare var npm$namespace$Titanium$Geolocation: {
        addEventListener: typeof Titanium$Geolocation$addEventListener,
removeEventListener: typeof Titanium$Geolocation$removeEventListener,
fireEvent: typeof Titanium$Geolocation$fireEvent,
applyProperties: typeof Titanium$Geolocation$applyProperties,
forwardGeocoder: typeof Titanium$Geolocation$forwardGeocoder,
getCurrentHeading: typeof Titanium$Geolocation$getCurrentHeading,
getCurrentPosition: typeof Titanium$Geolocation$getCurrentPosition,
hasLocationPermissions: typeof Titanium$Geolocation$hasLocationPermissions,
requestLocationPermissions: typeof Titanium$Geolocation$requestLocationPermissions,
reverseGeocoder: typeof Titanium$Geolocation$reverseGeocoder,
getBubbleParent: typeof Titanium$Geolocation$getBubbleParent,
setBubbleParent: typeof Titanium$Geolocation$setBubbleParent,
getApiName: typeof Titanium$Geolocation$getApiName,
getLifecycleContainer: typeof Titanium$Geolocation$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Geolocation$setLifecycleContainer,
getAccuracy: typeof Titanium$Geolocation$getAccuracy,
setAccuracy: typeof Titanium$Geolocation$setAccuracy,
getDistanceFilter: typeof Titanium$Geolocation$getDistanceFilter,
setDistanceFilter: typeof Titanium$Geolocation$setDistanceFilter,
getFrequency: typeof Titanium$Geolocation$getFrequency,
setFrequency: typeof Titanium$Geolocation$setFrequency,
getHasCompass: typeof Titanium$Geolocation$getHasCompass,
getHeadingFilter: typeof Titanium$Geolocation$getHeadingFilter,
setHeadingFilter: typeof Titanium$Geolocation$setHeadingFilter,
getLocationServicesAuthorization: typeof Titanium$Geolocation$getLocationServicesAuthorization,
setLocationServicesAuthorization: typeof Titanium$Geolocation$setLocationServicesAuthorization,
getLocationServicesEnabled: typeof Titanium$Geolocation$getLocationServicesEnabled,
getPreferredProvider: typeof Titanium$Geolocation$getPreferredProvider,
setPreferredProvider: typeof Titanium$Geolocation$setPreferredProvider,
getShowCalibration: typeof Titanium$Geolocation$getShowCalibration,
setShowCalibration: typeof Titanium$Geolocation$setShowCalibration,
getShowBackgroundLocationIndicator: typeof Titanium$Geolocation$getShowBackgroundLocationIndicator,
setShowBackgroundLocationIndicator: typeof Titanium$Geolocation$setShowBackgroundLocationIndicator,
getTrackSignificantLocationChange: typeof Titanium$Geolocation$getTrackSignificantLocationChange,
setTrackSignificantLocationChange: typeof Titanium$Geolocation$setTrackSignificantLocationChange,
getAllowsBackgroundLocationUpdates: typeof Titanium$Geolocation$getAllowsBackgroundLocationUpdates,
setAllowsBackgroundLocationUpdates: typeof Titanium$Geolocation$setAllowsBackgroundLocationUpdates,
getActivityType: typeof Titanium$Geolocation$getActivityType,
setActivityType: typeof Titanium$Geolocation$setActivityType,
getPauseLocationUpdateAutomatically: typeof Titanium$Geolocation$getPauseLocationUpdateAutomatically,
setPauseLocationUpdateAutomatically: typeof Titanium$Geolocation$setPauseLocationUpdateAutomatically,
getLastGeolocation: typeof Titanium$Geolocation$getLastGeolocation,
        bubbleParent: typeof Titanium$Geolocation$bubbleParent,
apiName: typeof Titanium$Geolocation$apiName,
lifecycleContainer: typeof Titanium$Geolocation$lifecycleContainer,
ACCURACY_BEST: typeof Titanium$Geolocation$ACCURACY_BEST,
ACCURACY_HUNDRED_METERS: typeof Titanium$Geolocation$ACCURACY_HUNDRED_METERS,
ACCURACY_KILOMETER: typeof Titanium$Geolocation$ACCURACY_KILOMETER,
ACCURACY_NEAREST_TEN_METERS: typeof Titanium$Geolocation$ACCURACY_NEAREST_TEN_METERS,
ACCURACY_THREE_KILOMETERS: typeof Titanium$Geolocation$ACCURACY_THREE_KILOMETERS,
ACCURACY_HIGH: typeof Titanium$Geolocation$ACCURACY_HIGH,
ACCURACY_BEST_FOR_NAVIGATION: typeof Titanium$Geolocation$ACCURACY_BEST_FOR_NAVIGATION,
ACCURACY_LOW: typeof Titanium$Geolocation$ACCURACY_LOW,
AUTHORIZATION_AUTHORIZED: typeof Titanium$Geolocation$AUTHORIZATION_AUTHORIZED,
AUTHORIZATION_DENIED: typeof Titanium$Geolocation$AUTHORIZATION_DENIED,
AUTHORIZATION_RESTRICTED: typeof Titanium$Geolocation$AUTHORIZATION_RESTRICTED,
AUTHORIZATION_UNKNOWN: typeof Titanium$Geolocation$AUTHORIZATION_UNKNOWN,
AUTHORIZATION_ALWAYS: typeof Titanium$Geolocation$AUTHORIZATION_ALWAYS,
AUTHORIZATION_WHEN_IN_USE: typeof Titanium$Geolocation$AUTHORIZATION_WHEN_IN_USE,
ERROR_DENIED: typeof Titanium$Geolocation$ERROR_DENIED,
ERROR_HEADING_FAILURE: typeof Titanium$Geolocation$ERROR_HEADING_FAILURE,
ERROR_LOCATION_UNKNOWN: typeof Titanium$Geolocation$ERROR_LOCATION_UNKNOWN,
ERROR_NETWORK: typeof Titanium$Geolocation$ERROR_NETWORK,
ERROR_REGION_MONITORING_DELAYED: typeof Titanium$Geolocation$ERROR_REGION_MONITORING_DELAYED,
ERROR_REGION_MONITORING_DENIED: typeof Titanium$Geolocation$ERROR_REGION_MONITORING_DENIED,
ERROR_REGION_MONITORING_FAILURE: typeof Titanium$Geolocation$ERROR_REGION_MONITORING_FAILURE,
ACTIVITYTYPE_OTHER: typeof Titanium$Geolocation$ACTIVITYTYPE_OTHER,
ACTIVITYTYPE_AUTOMOTIVE_NAVIGATION: typeof Titanium$Geolocation$ACTIVITYTYPE_AUTOMOTIVE_NAVIGATION,
ACTIVITYTYPE_FITNESS: typeof Titanium$Geolocation$ACTIVITYTYPE_FITNESS,
ACTIVITYTYPE_OTHER_NAVIGATION: typeof Titanium$Geolocation$ACTIVITYTYPE_OTHER_NAVIGATION,
accuracy: typeof Titanium$Geolocation$accuracy,
distanceFilter: typeof Titanium$Geolocation$distanceFilter,
frequency: typeof Titanium$Geolocation$frequency,
hasCompass: typeof Titanium$Geolocation$hasCompass,
headingFilter: typeof Titanium$Geolocation$headingFilter,
locationServicesAuthorization: typeof Titanium$Geolocation$locationServicesAuthorization,
locationServicesEnabled: typeof Titanium$Geolocation$locationServicesEnabled,
preferredProvider: typeof Titanium$Geolocation$preferredProvider,
showCalibration: typeof Titanium$Geolocation$showCalibration,
showBackgroundLocationIndicator: typeof Titanium$Geolocation$showBackgroundLocationIndicator,
trackSignificantLocationChange: typeof Titanium$Geolocation$trackSignificantLocationChange,
allowsBackgroundLocationUpdates: typeof Titanium$Geolocation$allowsBackgroundLocationUpdates,
activityType: typeof Titanium$Geolocation$activityType,
pauseLocationUpdateAutomatically: typeof Titanium$Geolocation$pauseLocationUpdateAutomatically,
lastGeolocation: typeof Titanium$Geolocation$lastGeolocation,
        
        
        Android: typeof npm$namespace$Titanium$Geolocation$Android,
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Geolocation$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Geolocation$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Geolocation$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Use with [accuracy](Titanium.Geolocation.accuracy) to request the best
 * accuracy available.
 */
declare var Titanium$Geolocation$ACCURACY_BEST: number;


/**
 * Use with [accuracy](Titanium.Geolocation.accuracy) to request location
 * updates accurate to the nearest 100 meters.
 */
declare var Titanium$Geolocation$ACCURACY_HUNDRED_METERS: number;


/**
 * Use with [accuracy](Titanium.Geolocation.accuracy) to request location
 * updates accurate to the nearest kilometer.
 */
declare var Titanium$Geolocation$ACCURACY_KILOMETER: number;


/**
 * Use with [accuracy](Titanium.Geolocation.accuracy) to request location
 * updates accurate to the nearest 10 meters.
 */
declare var Titanium$Geolocation$ACCURACY_NEAREST_TEN_METERS: number;


/**
 * Use with [accuracy](Titanium.Geolocation.accuracy) to request location
 * updates accurate to the nearest three kilometers.
 */
declare var Titanium$Geolocation$ACCURACY_THREE_KILOMETERS: number;


/**
 * Use with [accuracy](Titanium.Geolocation.accuracy) to request more
 * accurate location updates with higher battery usage.
 */
declare var Titanium$Geolocation$ACCURACY_HIGH: number;


/**
 * Use with [accuracy](Titanium.Geolocation.accuracy) to request highest possible
 * accuracy and combine it with additional sensor data.
 */
declare var Titanium$Geolocation$ACCURACY_BEST_FOR_NAVIGATION: number;


/**
 * Use with [accuracy](Titanium.Geolocation.accuracy) to request less
 * accurate location updates with lower battery usage.
 */
declare var Titanium$Geolocation$ACCURACY_LOW: number;


/**
 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
 * indicating that the application is authorized to use location services.
 */
declare var Titanium$Geolocation$AUTHORIZATION_AUTHORIZED: number;


/**
 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
 * indicating that the application is not authorized to use location services, *or*
 * location services are disabled.
 */
declare var Titanium$Geolocation$AUTHORIZATION_DENIED: number;


/**
 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
 * indicating that the application is not authorized to use location servies *and*
 * the user cannot change this application's status.
 */
declare var Titanium$Geolocation$AUTHORIZATION_RESTRICTED: number;


/**
 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
 * indicating that the authorization state is unknown.
 */
declare var Titanium$Geolocation$AUTHORIZATION_UNKNOWN: number;


/**
 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
 * indicating that the application is authorized to start location services at any time. This authorization
 * includes the use of all location services, including monitoring regions and significant location changes.
 */
declare var Titanium$Geolocation$AUTHORIZATION_ALWAYS: number;


/**
 * A [locationServicesAuthorization](Titanium.Geolocation.locationServicesAuthorization) value
 * indicating that the application is authorized to start most location services only while running in the foreground.
 */
declare var Titanium$Geolocation$AUTHORIZATION_WHEN_IN_USE: number;


/**
 * Error code indicating that the user denied access to the location service.
 */
declare var Titanium$Geolocation$ERROR_DENIED: number;


/**
 * Error code indicating that the heading could not be determined.
 */
declare var Titanium$Geolocation$ERROR_HEADING_FAILURE: number;


/**
 * Error code indicating that the user's location could not be determined.
 */
declare var Titanium$Geolocation$ERROR_LOCATION_UNKNOWN: number;


/**
 * Error code indicating that the network was unavailable.
 */
declare var Titanium$Geolocation$ERROR_NETWORK: number;


/**
 * Error code indicating that region monitoring is delayed.
 */
declare var Titanium$Geolocation$ERROR_REGION_MONITORING_DELAYED: number;


/**
 * Error code indicating that region monitoring is denied.
 */
declare var Titanium$Geolocation$ERROR_REGION_MONITORING_DENIED: number;


/**
 * Error code indicating a region monitoring failure.
 */
declare var Titanium$Geolocation$ERROR_REGION_MONITORING_FAILURE: number;


/**
 * The location data is being used for an unknown activity.
 */
declare var Titanium$Geolocation$ACTIVITYTYPE_OTHER: string;


/**
 * The location data is used for tracking location changes to the automobile specifically during vehicular navigation.
 */
declare var Titanium$Geolocation$ACTIVITYTYPE_AUTOMOTIVE_NAVIGATION: string;


/**
 * The location data is used for tracking any pedestrian-related activity.
 */
declare var Titanium$Geolocation$ACTIVITYTYPE_FITNESS: string;


/**
 * The location data is used for tracking movements of other types of vehicular
 * navigation that are not automobile related.
 */
declare var Titanium$Geolocation$ACTIVITYTYPE_OTHER_NAVIGATION: string;


/**
 * Specifies the requested accuracy for location updates.
 */
declare var Titanium$Geolocation$accuracy: number;


/**
 * The minimum change of position (in meters) before a 'location' event is fired.
 */
declare var Titanium$Geolocation$distanceFilter: number;


/**
 * Requested frequency for location updates, in milliseconds.
 */
declare var Titanium$Geolocation$frequency: number;


/**
 * Indicates whether the current device supports a compass.
 */
declare var Titanium$Geolocation$hasCompass: boolean;


/**
 * Minimum heading change (in degrees) before a `heading` event is fired.
 */
declare var Titanium$Geolocation$headingFilter: number;


/**
 * Returns an authorization constant indicating if the application has access to location services.
 */
declare var Titanium$Geolocation$locationServicesAuthorization: number;


/**
 * Indicates if the user has enabled or disabled location services for the device (not the application).
 */
declare var Titanium$Geolocation$locationServicesEnabled: boolean;


/**
 * Determines the preferred location provider.
 */
declare var Titanium$Geolocation$preferredProvider: string;


/**
 * Determines whether the compass calibration UI is shown if needed.
 */
declare var Titanium$Geolocation$showCalibration: boolean;


/**
 * Specifies that an indicator be shown when the app makes use of continuous
 * background location updates.
 */
declare var Titanium$Geolocation$showBackgroundLocationIndicator: boolean;


/**
 * Indicates if the location changes should be updated only when a significant change
 * in location occurs.
 */
declare var Titanium$Geolocation$trackSignificantLocationChange: boolean;


/**
 * Determines if the app can do background location updates.
 */
declare var Titanium$Geolocation$allowsBackgroundLocationUpdates: boolean;


/**
 * The type of user activity to be associated with the location updates.
 */
declare var Titanium$Geolocation$activityType: number;


/**
 * Indicates whether the location updates may be paused.
 */
declare var Titanium$Geolocation$pauseLocationUpdateAutomatically: boolean;


/**
 * JSON representation of the last geolocation received.
 */
declare var Titanium$Geolocation$lastGeolocation: string;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Geolocation$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Geolocation$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Geolocation$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Geolocation$applyProperties(props: any): void



/**
 * Resolves an address to a location.
 */
declare function Titanium$Geolocation$forwardGeocoder(address: string, callback: (param0: ForwardGeocodeResponse) => any): void



/**
 * Retrieves the current compass heading.
 */
declare function Titanium$Geolocation$getCurrentHeading(callback: (param0: HeadingResponse) => any): void



/**
 * Retrieves the last known location from the device.
 */
declare function Titanium$Geolocation$getCurrentPosition(callback: (param0: LocationResults) => any): void



/**
 * Returns `true` if the app has location access.
 */
declare function Titanium$Geolocation$hasLocationPermissions(authorizationType: number): boolean



/**
 * Requests for location access.
 */
declare function Titanium$Geolocation$requestLocationPermissions(
authorizationType: number,
callback: (param0: LocationAuthorizationResponse) => any): void



/**
 * Tries to resolve a location to an address.
 */
declare function Titanium$Geolocation$reverseGeocoder(
latitude: number,
longitude: number,
callback: (param0: ReverseGeocodeResponse) => any): void



/**
 * Gets the value of the <Titanium.Geolocation.bubbleParent> property.
 */
declare function Titanium$Geolocation$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Geolocation.bubbleParent> property.
 */
declare function Titanium$Geolocation$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Geolocation.apiName> property.
 */
declare function Titanium$Geolocation$getApiName(): string



/**
 * Gets the value of the <Titanium.Geolocation.lifecycleContainer> property.
 */
declare function Titanium$Geolocation$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Geolocation.lifecycleContainer> property.
 */
declare function Titanium$Geolocation$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Geolocation.lifecycleContainer> property.
 */
declare function Titanium$Geolocation$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.Geolocation.accuracy> property.
 */
declare function Titanium$Geolocation$getAccuracy(): number



/**
 * Sets the value of the <Titanium.Geolocation.accuracy> property.
 */
declare function Titanium$Geolocation$setAccuracy(accuracy: number): void



/**
 * Gets the value of the <Titanium.Geolocation.distanceFilter> property.
 */
declare function Titanium$Geolocation$getDistanceFilter(): number



/**
 * Sets the value of the <Titanium.Geolocation.distanceFilter> property.
 */
declare function Titanium$Geolocation$setDistanceFilter(distanceFilter: number): void



/**
 * Gets the value of the <Titanium.Geolocation.frequency> property.
 */
declare function Titanium$Geolocation$getFrequency(): number



/**
 * Sets the value of the <Titanium.Geolocation.frequency> property.
 */
declare function Titanium$Geolocation$setFrequency(frequency: number): void



/**
 * Gets the value of the <Titanium.Geolocation.hasCompass> property.
 */
declare function Titanium$Geolocation$getHasCompass(): boolean



/**
 * Gets the value of the <Titanium.Geolocation.headingFilter> property.
 */
declare function Titanium$Geolocation$getHeadingFilter(): number



/**
 * Sets the value of the <Titanium.Geolocation.headingFilter> property.
 */
declare function Titanium$Geolocation$setHeadingFilter(headingFilter: number): void



/**
 * Gets the value of the <Titanium.Geolocation.locationServicesAuthorization> property.
 */
declare function Titanium$Geolocation$getLocationServicesAuthorization(): number



/**
 * Sets the value of the <Titanium.Geolocation.locationServicesAuthorization> property.
 */
declare function Titanium$Geolocation$setLocationServicesAuthorization(locationServicesAuthorization: number): void



/**
 * Gets the value of the <Titanium.Geolocation.locationServicesEnabled> property.
 */
declare function Titanium$Geolocation$getLocationServicesEnabled(): boolean



/**
 * Gets the value of the <Titanium.Geolocation.preferredProvider> property.
 */
declare function Titanium$Geolocation$getPreferredProvider(): string



/**
 * Sets the value of the <Titanium.Geolocation.preferredProvider> property.
 */
declare function Titanium$Geolocation$setPreferredProvider(preferredProvider: string): void



/**
 * Gets the value of the <Titanium.Geolocation.showCalibration> property.
 */
declare function Titanium$Geolocation$getShowCalibration(): boolean



/**
 * Sets the value of the <Titanium.Geolocation.showCalibration> property.
 */
declare function Titanium$Geolocation$setShowCalibration(showCalibration: boolean): void



/**
 * Gets the value of the <Titanium.Geolocation.showBackgroundLocationIndicator> property.
 */
declare function Titanium$Geolocation$getShowBackgroundLocationIndicator(): boolean



/**
 * Sets the value of the <Titanium.Geolocation.showBackgroundLocationIndicator> property.
 */
declare function Titanium$Geolocation$setShowBackgroundLocationIndicator(showBackgroundLocationIndicator: boolean): void



/**
 * Gets the value of the <Titanium.Geolocation.trackSignificantLocationChange> property.
 */
declare function Titanium$Geolocation$getTrackSignificantLocationChange(): boolean



/**
 * Sets the value of the <Titanium.Geolocation.trackSignificantLocationChange> property.
 */
declare function Titanium$Geolocation$setTrackSignificantLocationChange(trackSignificantLocationChange: boolean): void



/**
 * Gets the value of the <Titanium.Geolocation.allowsBackgroundLocationUpdates> property.
 */
declare function Titanium$Geolocation$getAllowsBackgroundLocationUpdates(): boolean



/**
 * Sets the value of the <Titanium.Geolocation.allowsBackgroundLocationUpdates> property.
 */
declare function Titanium$Geolocation$setAllowsBackgroundLocationUpdates(allowsBackgroundLocationUpdates: boolean): void



/**
 * Gets the value of the <Titanium.Geolocation.activityType> property.
 */
declare function Titanium$Geolocation$getActivityType(): number



/**
 * Sets the value of the <Titanium.Geolocation.activityType> property.
 */
declare function Titanium$Geolocation$setActivityType(activityType: number): void



/**
 * Gets the value of the <Titanium.Geolocation.pauseLocationUpdateAutomatically> property.
 */
declare function Titanium$Geolocation$getPauseLocationUpdateAutomatically(): boolean



/**
 * Sets the value of the <Titanium.Geolocation.pauseLocationUpdateAutomatically> property.
 */
declare function Titanium$Geolocation$setPauseLocationUpdateAutomatically(pauseLocationUpdateAutomatically: boolean): void



/**
 * Gets the value of the <Titanium.Geolocation.lastGeolocation> property.
 */
declare function Titanium$Geolocation$getLastGeolocation(): string



      declare var npm$namespace$Titanium$Geolocation$Android: {
        addEventListener: typeof Titanium$Geolocation$Android$addEventListener,
removeEventListener: typeof Titanium$Geolocation$Android$removeEventListener,
fireEvent: typeof Titanium$Geolocation$Android$fireEvent,
applyProperties: typeof Titanium$Geolocation$Android$applyProperties,
addLocationProvider: typeof Titanium$Geolocation$Android$addLocationProvider,
removeLocationProvider: typeof Titanium$Geolocation$Android$removeLocationProvider,
addLocationRule: typeof Titanium$Geolocation$Android$addLocationRule,
removeLocationRule: typeof Titanium$Geolocation$Android$removeLocationRule,
getBubbleParent: typeof Titanium$Geolocation$Android$getBubbleParent,
setBubbleParent: typeof Titanium$Geolocation$Android$setBubbleParent,
getApiName: typeof Titanium$Geolocation$Android$getApiName,
getLifecycleContainer: typeof Titanium$Geolocation$Android$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Geolocation$Android$setLifecycleContainer,
getManualMode: typeof Titanium$Geolocation$Android$getManualMode,
setManualMode: typeof Titanium$Geolocation$Android$setManualMode,
createLocationProvider: typeof Titanium$Geolocation$Android$createLocationProvider,
createLocationRule: typeof Titanium$Geolocation$Android$createLocationRule,
        bubbleParent: typeof Titanium$Geolocation$Android$bubbleParent,
apiName: typeof Titanium$Geolocation$Android$apiName,
lifecycleContainer: typeof Titanium$Geolocation$Android$lifecycleContainer,
manualMode: typeof Titanium$Geolocation$Android$manualMode,
PROVIDER_GPS: typeof Titanium$Geolocation$Android$PROVIDER_GPS,
PROVIDER_NETWORK: typeof Titanium$Geolocation$Android$PROVIDER_NETWORK,
PROVIDER_PASSIVE: typeof Titanium$Geolocation$Android$PROVIDER_PASSIVE,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Geolocation$Android$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Geolocation$Android$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Geolocation$Android$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Set to `true` to enable manual configuration of location updates through this module.
 */
declare var Titanium$Geolocation$Android$manualMode: boolean;


/**
 * Specifies the GPS location provider.
 */
declare var Titanium$Geolocation$Android$PROVIDER_GPS: string;


/**
 * Specifies the network location provider.
 */
declare var Titanium$Geolocation$Android$PROVIDER_NETWORK: string;


/**
 * Specifies the passive location provider.
 */
declare var Titanium$Geolocation$Android$PROVIDER_PASSIVE: string;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Geolocation$Android$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Geolocation$Android$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Geolocation$Android$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Geolocation$Android$applyProperties(props: any): void



/**
 * Adds and enables the specified location provider, possibly replacing an existing one.
 */
declare function Titanium$Geolocation$Android$addLocationProvider(provider: Titanium$Geolocation$Android$LocationProvider): void



/**
 * Disables and removes the specified location provider.
 */
declare function Titanium$Geolocation$Android$removeLocationProvider(provider: Titanium$Geolocation$Android$LocationProvider): void



/**
 * Adds and enables the specified location rule.
 */
declare function Titanium$Geolocation$Android$addLocationRule(rule: Titanium$Geolocation$Android$LocationRule): void



/**
 * Disables and removes the specified location rule.
 */
declare function Titanium$Geolocation$Android$removeLocationRule(rule: Titanium$Geolocation$Android$LocationRule): void



/**
 * Gets the value of the <Titanium.Geolocation.Android.bubbleParent> property.
 */
declare function Titanium$Geolocation$Android$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Geolocation.Android.bubbleParent> property.
 */
declare function Titanium$Geolocation$Android$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Geolocation.Android.apiName> property.
 */
declare function Titanium$Geolocation$Android$getApiName(): string



/**
 * Gets the value of the <Titanium.Geolocation.Android.lifecycleContainer> property.
 */
declare function Titanium$Geolocation$Android$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Geolocation.Android.lifecycleContainer> property.
 */
declare function Titanium$Geolocation$Android$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Geolocation.Android.lifecycleContainer> property.
 */
declare function Titanium$Geolocation$Android$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.Geolocation.Android.manualMode> property.
 */
declare function Titanium$Geolocation$Android$getManualMode(): boolean



/**
 * Sets the value of the <Titanium.Geolocation.Android.manualMode> property.
 */
declare function Titanium$Geolocation$Android$setManualMode(manualMode: boolean): void



/**
 * Creates and returns an instance of <Titanium.Geolocation.Android.LocationProvider>.
 */
declare function Titanium$Geolocation$Android$createLocationProvider(parameters?: any): Titanium$Geolocation$Android$LocationProvider



/**
 * Creates and returns an instance of <Titanium.Geolocation.Android.LocationRule>.
 */
declare function Titanium$Geolocation$Android$createLocationRule(parameters?: any): Titanium$Geolocation$Android$LocationRule



/**
 * Represents a source of location information, such as GPS.
 */
declare type Titanium$Geolocation$Android$LocationProvider = {

/**
 * Type of location provider: [PROVIDER_GPS](Titanium.Geolocation.Android.PROVIDER_GPS),
 * [PROVIDER_NETWORK](Titanium.Geolocation.Android.PROVIDER_NETWORK), or
 * [PROVIDER_PASSIVE](Titanium.Geolocation.Android.PROVIDER_PASSIVE).
 */
name: string,

/**
 * Limits the frequency of location updates to no more than one per `minUpdateTime` seconds.
 */
minUpdateTime: number,

/**
 * Don't send a location update unless the location has changed at least `minUpdateDistance`
 * meters since the previous update.
 */
minUpdateDistance: number,

/**
 * Gets the value of the <Titanium.Geolocation.Android.LocationProvider.name> property.
 */
getName(): string,

/**
 * Sets the value of the <Titanium.Geolocation.Android.LocationProvider.name> property.
 */
setName(name: string): void,

/**
 * Gets the value of the <Titanium.Geolocation.Android.LocationProvider.minUpdateTime> property.
 */
getMinUpdateTime(): number,

/**
 * Sets the value of the <Titanium.Geolocation.Android.LocationProvider.minUpdateTime> property.
 */
setMinUpdateTime(minUpdateTime: number): void,

/**
 * Gets the value of the <Titanium.Geolocation.Android.LocationProvider.minUpdateDistance> property.
 */
getMinUpdateDistance(): number,

/**
 * Sets the value of the <Titanium.Geolocation.Android.LocationProvider.minUpdateDistance> property.
 */
setMinUpdateDistance(minUpdateDistance: number): void
} & Titanium$Proxy



/**
 * A location rule to filter the results returned by location providers.
 */
declare type Titanium$Geolocation$Android$LocationRule = {

/**
 * If specified, this rule only applies to updates generated
 * by the specified provider. If `null`, this rule applies to all updates.
 */
name: string,

/**
 * Minimum accuracy required for a location update.
 */
accuracy: number,

/**
 * Controls the frequency of location updates.
 */
minAge: number,

/**
 * Controls the freshness of location updates. Do not forward an update
 * unless it is newer than `maxAge` milliseconds.
 */
maxAge: number,

/**
 * Gets the value of the <Titanium.Geolocation.Android.LocationRule.name> property.
 */
getName(): string,

/**
 * Sets the value of the <Titanium.Geolocation.Android.LocationRule.name> property.
 */
setName(name: string): void,

/**
 * Gets the value of the <Titanium.Geolocation.Android.LocationRule.accuracy> property.
 */
getAccuracy(): number,

/**
 * Sets the value of the <Titanium.Geolocation.Android.LocationRule.accuracy> property.
 */
setAccuracy(accuracy: number): void,

/**
 * Gets the value of the <Titanium.Geolocation.Android.LocationRule.minAge> property.
 */
getMinAge(): number,

/**
 * Sets the value of the <Titanium.Geolocation.Android.LocationRule.minAge> property.
 */
setMinAge(minAge: number): void,

/**
 * Gets the value of the <Titanium.Geolocation.Android.LocationRule.maxAge> property.
 */
getMaxAge(): number,

/**
 * Sets the value of the <Titanium.Geolocation.Android.LocationRule.maxAge> property.
 */
setMaxAge(maxAge: number): void
} & Titanium$Proxy



      declare var npm$namespace$Titanium$Gesture: {
        addEventListener: typeof Titanium$Gesture$addEventListener,
removeEventListener: typeof Titanium$Gesture$removeEventListener,
fireEvent: typeof Titanium$Gesture$fireEvent,
applyProperties: typeof Titanium$Gesture$applyProperties,
isLandscape: typeof Titanium$Gesture$isLandscape,
isPortrait: typeof Titanium$Gesture$isPortrait,
getBubbleParent: typeof Titanium$Gesture$getBubbleParent,
setBubbleParent: typeof Titanium$Gesture$setBubbleParent,
getApiName: typeof Titanium$Gesture$getApiName,
getLifecycleContainer: typeof Titanium$Gesture$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Gesture$setLifecycleContainer,
getOrientation: typeof Titanium$Gesture$getOrientation,
        bubbleParent: typeof Titanium$Gesture$bubbleParent,
apiName: typeof Titanium$Gesture$apiName,
lifecycleContainer: typeof Titanium$Gesture$lifecycleContainer,
portrait: typeof Titanium$Gesture$portrait,
landscape: typeof Titanium$Gesture$landscape,
orientation: typeof Titanium$Gesture$orientation,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Gesture$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Gesture$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Gesture$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Indicates if the device is currently held in portrait form.
 */
declare var Titanium$Gesture$portrait: boolean;


/**
 * Indicates if the device is currently held in landscape form.
 */
declare var Titanium$Gesture$landscape: boolean;


/**
 * Orientation of the device.
 */
declare var Titanium$Gesture$orientation: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Gesture$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Gesture$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Gesture$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Gesture$applyProperties(props: any): void



/**
 * Returns whether or not the device is currently held in landscape form.
 */
declare function Titanium$Gesture$isLandscape(): boolean



/**
 * Returns whether or not the device is currently held in portrait form.
 */
declare function Titanium$Gesture$isPortrait(): boolean



/**
 * Gets the value of the <Titanium.Gesture.bubbleParent> property.
 */
declare function Titanium$Gesture$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Gesture.bubbleParent> property.
 */
declare function Titanium$Gesture$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Gesture.apiName> property.
 */
declare function Titanium$Gesture$getApiName(): string



/**
 * Gets the value of the <Titanium.Gesture.lifecycleContainer> property.
 */
declare function Titanium$Gesture$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Gesture.lifecycleContainer> property.
 */
declare function Titanium$Gesture$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Gesture.lifecycleContainer> property.
 */
declare function Titanium$Gesture$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.Gesture.orientation> property.
 */
declare function Titanium$Gesture$getOrientation(): number



      declare var npm$namespace$Titanium$Locale: {
        addEventListener: typeof Titanium$Locale$addEventListener,
removeEventListener: typeof Titanium$Locale$removeEventListener,
fireEvent: typeof Titanium$Locale$fireEvent,
applyProperties: typeof Titanium$Locale$applyProperties,
formatTelephoneNumber: typeof Titanium$Locale$formatTelephoneNumber,
getCurrencyCode: typeof Titanium$Locale$getCurrencyCode,
getCurrencySymbol: typeof Titanium$Locale$getCurrencySymbol,
setLanguage: typeof Titanium$Locale$setLanguage,
getLocaleCurrencySymbol: typeof Titanium$Locale$getLocaleCurrencySymbol,
getString: typeof Titanium$Locale$getString,
getBubbleParent: typeof Titanium$Locale$getBubbleParent,
setBubbleParent: typeof Titanium$Locale$setBubbleParent,
getApiName: typeof Titanium$Locale$getApiName,
getLifecycleContainer: typeof Titanium$Locale$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Locale$setLifecycleContainer,
getCurrentCountry: typeof Titanium$Locale$getCurrentCountry,
getCurrentLanguage: typeof Titanium$Locale$getCurrentLanguage,
getCurrentLocale: typeof Titanium$Locale$getCurrentLocale,
        bubbleParent: typeof Titanium$Locale$bubbleParent,
apiName: typeof Titanium$Locale$apiName,
lifecycleContainer: typeof Titanium$Locale$lifecycleContainer,
currentCountry: typeof Titanium$Locale$currentCountry,
currentLanguage: typeof Titanium$Locale$currentLanguage,
currentLocale: typeof Titanium$Locale$currentLocale,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Locale$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Locale$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Locale$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Country of the current system locale, as an ISO 2-letter code.
 */
declare var Titanium$Locale$currentCountry: string;


/**
 * Language of the current system locale, as an ISO 2-letter code.
 */
declare var Titanium$Locale$currentLanguage: string;


/**
 * Current system locale, as a combination of ISO 2-letter language and country codes.
 */
declare var Titanium$Locale$currentLocale: string;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Locale$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Locale$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Locale$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Locale$applyProperties(props: any): void



/**
 * Formats a telephone number according to the current system locale.
 */
declare function Titanium$Locale$formatTelephoneNumber(number: string): string



/**
 * Returns the ISO 3-letter currency code for the specified locale.
 */
declare function Titanium$Locale$getCurrencyCode(locale: string): string



/**
 * Returns the currency symbol for the specified currency code.
 */
declare function Titanium$Locale$getCurrencySymbol(currencyCode: string): string



/**
 * Sets the current language of the application.
 */
declare function Titanium$Locale$setLanguage(language: string): void



/**
 * Returns the currency symbol for the specified locale.
 */
declare function Titanium$Locale$getLocaleCurrencySymbol(locale: string): string



/**
 * Returns a string, localized according to the current system locale using the appropriate
 * `/i18n/LANG/strings.xml` localization file.
 */
declare function Titanium$Locale$getString(key: string, hint?: string): string



/**
 * Gets the value of the <Titanium.Locale.bubbleParent> property.
 */
declare function Titanium$Locale$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Locale.bubbleParent> property.
 */
declare function Titanium$Locale$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Locale.apiName> property.
 */
declare function Titanium$Locale$getApiName(): string



/**
 * Gets the value of the <Titanium.Locale.lifecycleContainer> property.
 */
declare function Titanium$Locale$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Locale.lifecycleContainer> property.
 */
declare function Titanium$Locale$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Locale.lifecycleContainer> property.
 */
declare function Titanium$Locale$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.Locale.currentCountry> property.
 */
declare function Titanium$Locale$getCurrentCountry(): string



/**
 * Gets the value of the <Titanium.Locale.currentLanguage> property.
 */
declare function Titanium$Locale$getCurrentLanguage(): string



/**
 * Gets the value of the <Titanium.Locale.currentLocale> property.
 */
declare function Titanium$Locale$getCurrentLocale(): string



      declare var npm$namespace$Titanium$Media: {
        addEventListener: typeof Titanium$Media$addEventListener,
removeEventListener: typeof Titanium$Media$removeEventListener,
fireEvent: typeof Titanium$Media$fireEvent,
applyProperties: typeof Titanium$Media$applyProperties,
beep: typeof Titanium$Media$beep,
hideCamera: typeof Titanium$Media$hideCamera,
hideMusicLibrary: typeof Titanium$Media$hideMusicLibrary,
isMediaTypeSupported: typeof Titanium$Media$isMediaTypeSupported,
openMusicLibrary: typeof Titanium$Media$openMusicLibrary,
openPhotoGallery: typeof Titanium$Media$openPhotoGallery,
previewImage: typeof Titanium$Media$previewImage,
saveToPhotoGallery: typeof Titanium$Media$saveToPhotoGallery,
setOverrideAudioRoute: typeof Titanium$Media$setOverrideAudioRoute,
showCamera: typeof Titanium$Media$showCamera,
hasMusicLibraryPermissions: typeof Titanium$Media$hasMusicLibraryPermissions,
requestMusicLibraryPermissions: typeof Titanium$Media$requestMusicLibraryPermissions,
queryMusicLibrary: typeof Titanium$Media$queryMusicLibrary,
startMicrophoneMonitor: typeof Titanium$Media$startMicrophoneMonitor,
stopMicrophoneMonitor: typeof Titanium$Media$stopMicrophoneMonitor,
takePicture: typeof Titanium$Media$takePicture,
startVideoCapture: typeof Titanium$Media$startVideoCapture,
stopVideoCapture: typeof Titanium$Media$stopVideoCapture,
switchCamera: typeof Titanium$Media$switchCamera,
hasCameraPermissions: typeof Titanium$Media$hasCameraPermissions,
requestCameraPermissions: typeof Titanium$Media$requestCameraPermissions,
hasPhotoGalleryPermissions: typeof Titanium$Media$hasPhotoGalleryPermissions,
requestPhotoGalleryPermissions: typeof Titanium$Media$requestPhotoGalleryPermissions,
requestCameraAccess: typeof Titanium$Media$requestCameraAccess,
takeScreenshot: typeof Titanium$Media$takeScreenshot,
vibrate: typeof Titanium$Media$vibrate,
requestAuthorization: typeof Titanium$Media$requestAuthorization,
hasAudioPermissions: typeof Titanium$Media$hasAudioPermissions,
hasAudioRecorderPermissions: typeof Titanium$Media$hasAudioRecorderPermissions,
requestAudioPermissions: typeof Titanium$Media$requestAudioPermissions,
requestAudioRecorderPermissions: typeof Titanium$Media$requestAudioRecorderPermissions,
createAudioPlayer: typeof Titanium$Media$createAudioPlayer,
createAudioRecorder: typeof Titanium$Media$createAudioRecorder,
getBubbleParent: typeof Titanium$Media$getBubbleParent,
setBubbleParent: typeof Titanium$Media$setBubbleParent,
getApiName: typeof Titanium$Media$getApiName,
getLifecycleContainer: typeof Titanium$Media$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Media$setLifecycleContainer,
getQUALITY_640x480: typeof Titanium$Media$getQUALITY_640x480,
getQUALITY_IFRAME_1280x720: typeof Titanium$Media$getQUALITY_IFRAME_1280x720,
getQUALITY_IFRAME_960x540: typeof Titanium$Media$getQUALITY_IFRAME_960x540,
getAppMusicPlayer: typeof Titanium$Media$getAppMusicPlayer,
getAudioLineType: typeof Titanium$Media$getAudioLineType,
getAudioPlaying: typeof Titanium$Media$getAudioPlaying,
getAudioSessionCategory: typeof Titanium$Media$getAudioSessionCategory,
setAudioSessionCategory: typeof Titanium$Media$setAudioSessionCategory,
getAudioSessionMode: typeof Titanium$Media$getAudioSessionMode,
setAudioSessionMode: typeof Titanium$Media$setAudioSessionMode,
getAvailableCameras: typeof Titanium$Media$getAvailableCameras,
getAvailableCameraMediaTypes: typeof Titanium$Media$getAvailableCameraMediaTypes,
setAvailableCameraMediaTypes: typeof Titanium$Media$setAvailableCameraMediaTypes,
getAvailablePhotoGalleryMediaTypes: typeof Titanium$Media$getAvailablePhotoGalleryMediaTypes,
setAvailablePhotoGalleryMediaTypes: typeof Titanium$Media$setAvailablePhotoGalleryMediaTypes,
getAvailablePhotoMediaTypes: typeof Titanium$Media$getAvailablePhotoMediaTypes,
setAvailablePhotoMediaTypes: typeof Titanium$Media$setAvailablePhotoMediaTypes,
getAverageMicrophonePower: typeof Titanium$Media$getAverageMicrophonePower,
setAverageMicrophonePower: typeof Titanium$Media$setAverageMicrophonePower,
getCameraFlashMode: typeof Titanium$Media$getCameraFlashMode,
setCameraFlashMode: typeof Titanium$Media$setCameraFlashMode,
getCanRecord: typeof Titanium$Media$getCanRecord,
getCurrentRoute: typeof Titanium$Media$getCurrentRoute,
getIsCameraSupported: typeof Titanium$Media$getIsCameraSupported,
getCameraAuthorizationStatus: typeof Titanium$Media$getCameraAuthorizationStatus,
getCameraAuthorization: typeof Titanium$Media$getCameraAuthorization,
getPeakMicrophonePower: typeof Titanium$Media$getPeakMicrophonePower,
getSystemMusicPlayer: typeof Titanium$Media$getSystemMusicPlayer,
getVolume: typeof Titanium$Media$getVolume,
createSound: typeof Titanium$Media$createSound,
createSystemAlert: typeof Titanium$Media$createSystemAlert,
createVideoPlayer: typeof Titanium$Media$createVideoPlayer,
        bubbleParent: typeof Titanium$Media$bubbleParent,
apiName: typeof Titanium$Media$apiName,
lifecycleContainer: typeof Titanium$Media$lifecycleContainer,
AUDIO_FILEFORMAT_3GP2: typeof Titanium$Media$AUDIO_FILEFORMAT_3GP2,
AUDIO_FILEFORMAT_3GPP: typeof Titanium$Media$AUDIO_FILEFORMAT_3GPP,
AUDIO_FILEFORMAT_AIFF: typeof Titanium$Media$AUDIO_FILEFORMAT_AIFF,
AUDIO_FILEFORMAT_AMR: typeof Titanium$Media$AUDIO_FILEFORMAT_AMR,
AUDIO_FILEFORMAT_CAF: typeof Titanium$Media$AUDIO_FILEFORMAT_CAF,
AUDIO_FILEFORMAT_MP3: typeof Titanium$Media$AUDIO_FILEFORMAT_MP3,
AUDIO_FILEFORMAT_MP4: typeof Titanium$Media$AUDIO_FILEFORMAT_MP4,
AUDIO_FILEFORMAT_MP4A: typeof Titanium$Media$AUDIO_FILEFORMAT_MP4A,
AUDIO_FILEFORMAT_WAVE: typeof Titanium$Media$AUDIO_FILEFORMAT_WAVE,
AUDIO_FORMAT_AAC: typeof Titanium$Media$AUDIO_FORMAT_AAC,
AUDIO_FORMAT_ALAW: typeof Titanium$Media$AUDIO_FORMAT_ALAW,
AUDIO_FORMAT_APPLE_LOSSLESS: typeof Titanium$Media$AUDIO_FORMAT_APPLE_LOSSLESS,
AUDIO_FORMAT_ILBC: typeof Titanium$Media$AUDIO_FORMAT_ILBC,
AUDIO_FORMAT_IMA4: typeof Titanium$Media$AUDIO_FORMAT_IMA4,
AUDIO_FORMAT_LINEAR_PCM: typeof Titanium$Media$AUDIO_FORMAT_LINEAR_PCM,
AUDIO_FORMAT_ULAW: typeof Titanium$Media$AUDIO_FORMAT_ULAW,
AUDIO_HEADPHONES: typeof Titanium$Media$AUDIO_HEADPHONES,
AUDIO_HEADPHONES_AND_MIC: typeof Titanium$Media$AUDIO_HEADPHONES_AND_MIC,
AUDIO_HEADSET_INOUT: typeof Titanium$Media$AUDIO_HEADSET_INOUT,
AUDIO_LINEOUT: typeof Titanium$Media$AUDIO_LINEOUT,
AUDIO_MICROPHONE: typeof Titanium$Media$AUDIO_MICROPHONE,
AUDIO_MUTED: typeof Titanium$Media$AUDIO_MUTED,
AUDIO_RECEIVER_AND_MIC: typeof Titanium$Media$AUDIO_RECEIVER_AND_MIC,
AUDIO_SESSION_CATEGORY_AMBIENT: typeof Titanium$Media$AUDIO_SESSION_CATEGORY_AMBIENT,
AUDIO_SESSION_CATEGORY_PLAYBACK: typeof Titanium$Media$AUDIO_SESSION_CATEGORY_PLAYBACK,
AUDIO_SESSION_CATEGORY_PLAY_AND_RECORD: typeof Titanium$Media$AUDIO_SESSION_CATEGORY_PLAY_AND_RECORD,
AUDIO_SESSION_CATEGORY_RECORD: typeof Titanium$Media$AUDIO_SESSION_CATEGORY_RECORD,
AUDIO_SESSION_CATEGORY_SOLO_AMBIENT: typeof Titanium$Media$AUDIO_SESSION_CATEGORY_SOLO_AMBIENT,
AUDIO_SESSION_MODE_AMBIENT: typeof Titanium$Media$AUDIO_SESSION_MODE_AMBIENT,
AUDIO_SESSION_MODE_PLAYBACK: typeof Titanium$Media$AUDIO_SESSION_MODE_PLAYBACK,
AUDIO_SESSION_MODE_PLAY_AND_RECORD: typeof Titanium$Media$AUDIO_SESSION_MODE_PLAY_AND_RECORD,
AUDIO_SESSION_MODE_RECORD: typeof Titanium$Media$AUDIO_SESSION_MODE_RECORD,
AUDIO_SESSION_MODE_SOLO_AMBIENT: typeof Titanium$Media$AUDIO_SESSION_MODE_SOLO_AMBIENT,
AUDIO_SESSION_OVERRIDE_ROUTE_NONE: typeof Titanium$Media$AUDIO_SESSION_OVERRIDE_ROUTE_NONE,
AUDIO_SESSION_OVERRIDE_ROUTE_SPEAKER: typeof Titanium$Media$AUDIO_SESSION_OVERRIDE_ROUTE_SPEAKER,
AUDIO_SESSION_PORT_LINEIN: typeof Titanium$Media$AUDIO_SESSION_PORT_LINEIN,
AUDIO_SESSION_PORT_BUILTINMIC: typeof Titanium$Media$AUDIO_SESSION_PORT_BUILTINMIC,
AUDIO_SESSION_PORT_HEADSETMIC: typeof Titanium$Media$AUDIO_SESSION_PORT_HEADSETMIC,
AUDIO_SESSION_PORT_LINEOUT: typeof Titanium$Media$AUDIO_SESSION_PORT_LINEOUT,
AUDIO_SESSION_PORT_HEADPHONES: typeof Titanium$Media$AUDIO_SESSION_PORT_HEADPHONES,
AUDIO_SESSION_PORT_BLUETOOTHA2DP: typeof Titanium$Media$AUDIO_SESSION_PORT_BLUETOOTHA2DP,
AUDIO_SESSION_PORT_BUILTINRECEIVER: typeof Titanium$Media$AUDIO_SESSION_PORT_BUILTINRECEIVER,
AUDIO_SESSION_PORT_BUILTINSPEAKER: typeof Titanium$Media$AUDIO_SESSION_PORT_BUILTINSPEAKER,
AUDIO_SESSION_PORT_HDMI: typeof Titanium$Media$AUDIO_SESSION_PORT_HDMI,
AUDIO_SESSION_PORT_AIRPLAY: typeof Titanium$Media$AUDIO_SESSION_PORT_AIRPLAY,
AUDIO_SESSION_PORT_BLUETOOTHHFP: typeof Titanium$Media$AUDIO_SESSION_PORT_BLUETOOTHHFP,
AUDIO_SESSION_PORT_USBAUDIO: typeof Titanium$Media$AUDIO_SESSION_PORT_USBAUDIO,
AUDIO_SESSION_PORT_BLUETOOTHLE: typeof Titanium$Media$AUDIO_SESSION_PORT_BLUETOOTHLE,
AUDIO_SESSION_PORT_CARAUDIO: typeof Titanium$Media$AUDIO_SESSION_PORT_CARAUDIO,
AUDIO_SPEAKER: typeof Titanium$Media$AUDIO_SPEAKER,
AUDIO_UNAVAILABLE: typeof Titanium$Media$AUDIO_UNAVAILABLE,
AUDIO_UNKNOWN: typeof Titanium$Media$AUDIO_UNKNOWN,
AUDIO_STATE_BUFFERING: typeof Titanium$Media$AUDIO_STATE_BUFFERING,
AUDIO_STATE_INITIALIZED: typeof Titanium$Media$AUDIO_STATE_INITIALIZED,
AUDIO_STATE_PAUSED: typeof Titanium$Media$AUDIO_STATE_PAUSED,
AUDIO_STATE_PLAYING: typeof Titanium$Media$AUDIO_STATE_PLAYING,
AUDIO_STATE_STARTING: typeof Titanium$Media$AUDIO_STATE_STARTING,
AUDIO_STATE_STOPPED: typeof Titanium$Media$AUDIO_STATE_STOPPED,
AUDIO_STATE_STOPPING: typeof Titanium$Media$AUDIO_STATE_STOPPING,
AUDIO_STATE_WAITING_FOR_DATA: typeof Titanium$Media$AUDIO_STATE_WAITING_FOR_DATA,
AUDIO_STATE_WAITING_FOR_QUEUE: typeof Titanium$Media$AUDIO_STATE_WAITING_FOR_QUEUE,
CAMERA_FLASH_AUTO: typeof Titanium$Media$CAMERA_FLASH_AUTO,
CAMERA_FLASH_OFF: typeof Titanium$Media$CAMERA_FLASH_OFF,
CAMERA_FLASH_ON: typeof Titanium$Media$CAMERA_FLASH_ON,
CAMERA_FRONT: typeof Titanium$Media$CAMERA_FRONT,
CAMERA_REAR: typeof Titanium$Media$CAMERA_REAR,
CAMERA_AUTHORIZATION_AUTHORIZED: typeof Titanium$Media$CAMERA_AUTHORIZATION_AUTHORIZED,
CAMERA_AUTHORIZATION_DENIED: typeof Titanium$Media$CAMERA_AUTHORIZATION_DENIED,
CAMERA_AUTHORIZATION_RESTRICTED: typeof Titanium$Media$CAMERA_AUTHORIZATION_RESTRICTED,
CAMERA_AUTHORIZATION_NOT_DETERMINED: typeof Titanium$Media$CAMERA_AUTHORIZATION_NOT_DETERMINED,
CAMERA_AUTHORIZATION_UNKNOWN: typeof Titanium$Media$CAMERA_AUTHORIZATION_UNKNOWN,
DEVICE_BUSY: typeof Titanium$Media$DEVICE_BUSY,
MEDIA_TYPE_PHOTO: typeof Titanium$Media$MEDIA_TYPE_PHOTO,
MEDIA_TYPE_LIVEPHOTO: typeof Titanium$Media$MEDIA_TYPE_LIVEPHOTO,
MEDIA_TYPE_VIDEO: typeof Titanium$Media$MEDIA_TYPE_VIDEO,
MUSIC_MEDIA_TYPE_ALL: typeof Titanium$Media$MUSIC_MEDIA_TYPE_ALL,
MUSIC_MEDIA_TYPE_ANY_AUDIO: typeof Titanium$Media$MUSIC_MEDIA_TYPE_ANY_AUDIO,
MUSIC_MEDIA_TYPE_AUDIOBOOK: typeof Titanium$Media$MUSIC_MEDIA_TYPE_AUDIOBOOK,
MUSIC_MEDIA_TYPE_MUSIC: typeof Titanium$Media$MUSIC_MEDIA_TYPE_MUSIC,
MUSIC_MEDIA_TYPE_PODCAST: typeof Titanium$Media$MUSIC_MEDIA_TYPE_PODCAST,
MUSIC_MEDIA_GROUP_TITLE: typeof Titanium$Media$MUSIC_MEDIA_GROUP_TITLE,
MUSIC_MEDIA_GROUP_ALBUM: typeof Titanium$Media$MUSIC_MEDIA_GROUP_ALBUM,
MUSIC_MEDIA_GROUP_ARTIST: typeof Titanium$Media$MUSIC_MEDIA_GROUP_ARTIST,
MUSIC_MEDIA_GROUP_ALBUM_ARTIST: typeof Titanium$Media$MUSIC_MEDIA_GROUP_ALBUM_ARTIST,
MUSIC_MEDIA_GROUP_COMPOSER: typeof Titanium$Media$MUSIC_MEDIA_GROUP_COMPOSER,
MUSIC_MEDIA_GROUP_GENRE: typeof Titanium$Media$MUSIC_MEDIA_GROUP_GENRE,
MUSIC_MEDIA_GROUP_PLAYLIST: typeof Titanium$Media$MUSIC_MEDIA_GROUP_PLAYLIST,
MUSIC_MEDIA_GROUP_PODCAST_TITLE: typeof Titanium$Media$MUSIC_MEDIA_GROUP_PODCAST_TITLE,
MUSIC_PLAYER_REPEAT_ALL: typeof Titanium$Media$MUSIC_PLAYER_REPEAT_ALL,
MUSIC_PLAYER_REPEAT_DEFAULT: typeof Titanium$Media$MUSIC_PLAYER_REPEAT_DEFAULT,
MUSIC_PLAYER_REPEAT_NONE: typeof Titanium$Media$MUSIC_PLAYER_REPEAT_NONE,
MUSIC_PLAYER_REPEAT_ONE: typeof Titanium$Media$MUSIC_PLAYER_REPEAT_ONE,
MUSIC_PLAYER_SHUFFLE_ALBUMS: typeof Titanium$Media$MUSIC_PLAYER_SHUFFLE_ALBUMS,
MUSIC_PLAYER_SHUFFLE_DEFAULT: typeof Titanium$Media$MUSIC_PLAYER_SHUFFLE_DEFAULT,
MUSIC_PLAYER_SHUFFLE_NONE: typeof Titanium$Media$MUSIC_PLAYER_SHUFFLE_NONE,
MUSIC_PLAYER_SHUFFLE_SONGS: typeof Titanium$Media$MUSIC_PLAYER_SHUFFLE_SONGS,
MUSIC_PLAYER_STATE_INTERRUPTED: typeof Titanium$Media$MUSIC_PLAYER_STATE_INTERRUPTED,
MUSIC_PLAYER_STATE_PAUSED: typeof Titanium$Media$MUSIC_PLAYER_STATE_PAUSED,
MUSIC_PLAYER_STATE_PLAYING: typeof Titanium$Media$MUSIC_PLAYER_STATE_PLAYING,
MUSIC_PLAYER_STATE_SEEK_BACKWARD: typeof Titanium$Media$MUSIC_PLAYER_STATE_SEEK_BACKWARD,
MUSIC_PLAYER_STATE_SEEK_FORWARD: typeof Titanium$Media$MUSIC_PLAYER_STATE_SEEK_FORWARD,
MUSIC_PLAYER_STATE_STOPPED: typeof Titanium$Media$MUSIC_PLAYER_STATE_STOPPED,
NO_CAMERA: typeof Titanium$Media$NO_CAMERA,
NO_VIDEO: typeof Titanium$Media$NO_VIDEO,
QUALITY_HIGH: typeof Titanium$Media$QUALITY_HIGH,
QUALITY_LOW: typeof Titanium$Media$QUALITY_LOW,
QUALITY_MEDIUM: typeof Titanium$Media$QUALITY_MEDIUM,
QUALITY_640x480: typeof Titanium$Media$QUALITY_640x480,
QUALITY_IFRAME_1280x720: typeof Titanium$Media$QUALITY_IFRAME_1280x720,
QUALITY_IFRAME_960x540: typeof Titanium$Media$QUALITY_IFRAME_960x540,
UNKNOWN_ERROR: typeof Titanium$Media$UNKNOWN_ERROR,
VIDEO_CONTROL_DEFAULT: typeof Titanium$Media$VIDEO_CONTROL_DEFAULT,
VIDEO_CONTROL_EMBEDDED: typeof Titanium$Media$VIDEO_CONTROL_EMBEDDED,
VIDEO_CONTROL_FULLSCREEN: typeof Titanium$Media$VIDEO_CONTROL_FULLSCREEN,
VIDEO_CONTROL_HIDDEN: typeof Titanium$Media$VIDEO_CONTROL_HIDDEN,
VIDEO_CONTROL_NONE: typeof Titanium$Media$VIDEO_CONTROL_NONE,
VIDEO_CONTROL_VOLUME_ONLY: typeof Titanium$Media$VIDEO_CONTROL_VOLUME_ONLY,
VIDEO_FINISH_REASON_PLAYBACK_ENDED: typeof Titanium$Media$VIDEO_FINISH_REASON_PLAYBACK_ENDED,
VIDEO_FINISH_REASON_PLAYBACK_ERROR: typeof Titanium$Media$VIDEO_FINISH_REASON_PLAYBACK_ERROR,
VIDEO_FINISH_REASON_USER_EXITED: typeof Titanium$Media$VIDEO_FINISH_REASON_USER_EXITED,
VIDEO_LOAD_STATE_FAILED: typeof Titanium$Media$VIDEO_LOAD_STATE_FAILED,
VIDEO_LOAD_STATE_PLAYABLE: typeof Titanium$Media$VIDEO_LOAD_STATE_PLAYABLE,
VIDEO_LOAD_STATE_PLAYTHROUGH_OK: typeof Titanium$Media$VIDEO_LOAD_STATE_PLAYTHROUGH_OK,
VIDEO_LOAD_STATE_STALLED: typeof Titanium$Media$VIDEO_LOAD_STATE_STALLED,
VIDEO_LOAD_STATE_UNKNOWN: typeof Titanium$Media$VIDEO_LOAD_STATE_UNKNOWN,
VIDEO_MEDIA_TYPE_AUDIO: typeof Titanium$Media$VIDEO_MEDIA_TYPE_AUDIO,
VIDEO_MEDIA_TYPE_NONE: typeof Titanium$Media$VIDEO_MEDIA_TYPE_NONE,
VIDEO_MEDIA_TYPE_VIDEO: typeof Titanium$Media$VIDEO_MEDIA_TYPE_VIDEO,
VIDEO_PLAYBACK_STATE_INTERRUPTED: typeof Titanium$Media$VIDEO_PLAYBACK_STATE_INTERRUPTED,
VIDEO_PLAYBACK_STATE_PAUSED: typeof Titanium$Media$VIDEO_PLAYBACK_STATE_PAUSED,
VIDEO_PLAYBACK_STATE_PLAYING: typeof Titanium$Media$VIDEO_PLAYBACK_STATE_PLAYING,
VIDEO_PLAYBACK_STATE_SEEKING_BACKWARD: typeof Titanium$Media$VIDEO_PLAYBACK_STATE_SEEKING_BACKWARD,
VIDEO_PLAYBACK_STATE_SEEKING_FORWARD: typeof Titanium$Media$VIDEO_PLAYBACK_STATE_SEEKING_FORWARD,
VIDEO_PLAYBACK_STATE_STOPPED: typeof Titanium$Media$VIDEO_PLAYBACK_STATE_STOPPED,
VIDEO_REPEAT_MODE_NONE: typeof Titanium$Media$VIDEO_REPEAT_MODE_NONE,
VIDEO_REPEAT_MODE_ONE: typeof Titanium$Media$VIDEO_REPEAT_MODE_ONE,
VIDEO_SCALING_ASPECT_FILL: typeof Titanium$Media$VIDEO_SCALING_ASPECT_FILL,
VIDEO_SCALING_ASPECT_FIT: typeof Titanium$Media$VIDEO_SCALING_ASPECT_FIT,
VIDEO_SCALING_MODE_FILL: typeof Titanium$Media$VIDEO_SCALING_MODE_FILL,
VIDEO_SCALING_NONE: typeof Titanium$Media$VIDEO_SCALING_NONE,
VIDEO_SCALING_RESIZE: typeof Titanium$Media$VIDEO_SCALING_RESIZE,
VIDEO_SCALING_RESIZE_ASPECT: typeof Titanium$Media$VIDEO_SCALING_RESIZE_ASPECT,
VIDEO_SCALING_RESIZE_ASPECT_FILL: typeof Titanium$Media$VIDEO_SCALING_RESIZE_ASPECT_FILL,
VIDEO_SOURCE_TYPE_FILE: typeof Titanium$Media$VIDEO_SOURCE_TYPE_FILE,
VIDEO_SOURCE_TYPE_STREAMING: typeof Titanium$Media$VIDEO_SOURCE_TYPE_STREAMING,
VIDEO_SOURCE_TYPE_UNKNOWN: typeof Titanium$Media$VIDEO_SOURCE_TYPE_UNKNOWN,
VIDEO_TIME_OPTION_EXACT: typeof Titanium$Media$VIDEO_TIME_OPTION_EXACT,
VIDEO_TIME_OPTION_NEAREST_KEYFRAME: typeof Titanium$Media$VIDEO_TIME_OPTION_NEAREST_KEYFRAME,
VIDEO_TIME_OPTION_CLOSEST_SYNC: typeof Titanium$Media$VIDEO_TIME_OPTION_CLOSEST_SYNC,
VIDEO_TIME_OPTION_NEXT_SYNC: typeof Titanium$Media$VIDEO_TIME_OPTION_NEXT_SYNC,
VIDEO_TIME_OPTION_PREVIOUS_SYNC: typeof Titanium$Media$VIDEO_TIME_OPTION_PREVIOUS_SYNC,
appMusicPlayer: typeof Titanium$Media$appMusicPlayer,
audioLineType: typeof Titanium$Media$audioLineType,
audioPlaying: typeof Titanium$Media$audioPlaying,
audioSessionCategory: typeof Titanium$Media$audioSessionCategory,
audioSessionMode: typeof Titanium$Media$audioSessionMode,
availableCameras: typeof Titanium$Media$availableCameras,
availableCameraMediaTypes: typeof Titanium$Media$availableCameraMediaTypes,
availablePhotoGalleryMediaTypes: typeof Titanium$Media$availablePhotoGalleryMediaTypes,
availablePhotoMediaTypes: typeof Titanium$Media$availablePhotoMediaTypes,
averageMicrophonePower: typeof Titanium$Media$averageMicrophonePower,
cameraFlashMode: typeof Titanium$Media$cameraFlashMode,
canRecord: typeof Titanium$Media$canRecord,
currentRoute: typeof Titanium$Media$currentRoute,
isCameraSupported: typeof Titanium$Media$isCameraSupported,
cameraAuthorizationStatus: typeof Titanium$Media$cameraAuthorizationStatus,
cameraAuthorization: typeof Titanium$Media$cameraAuthorization,
peakMicrophonePower: typeof Titanium$Media$peakMicrophonePower,
systemMusicPlayer: typeof Titanium$Media$systemMusicPlayer,
volume: typeof Titanium$Media$volume,
        
        
        Android: typeof npm$namespace$Titanium$Media$Android,
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Media$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Media$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Media$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Audio file format 3GPP2.
 */
declare var Titanium$Media$AUDIO_FILEFORMAT_3GP2: number;


/**
 * Audio file format 3GPP.
 */
declare var Titanium$Media$AUDIO_FILEFORMAT_3GPP: number;


/**
 * Audio file format Audio Interchange File Format (AIFF).
 */
declare var Titanium$Media$AUDIO_FILEFORMAT_AIFF: number;


/**
 * Audio file format Adaptive Multi-Rate (AMR).
 */
declare var Titanium$Media$AUDIO_FILEFORMAT_AMR: number;


/**
 * Audio file format Apple Compressed Audio Format (CAF).
 */
declare var Titanium$Media$AUDIO_FILEFORMAT_CAF: number;


/**
 * Audio file format MP3.
 */
declare var Titanium$Media$AUDIO_FILEFORMAT_MP3: number;


/**
 * Audio file format MP4.
 */
declare var Titanium$Media$AUDIO_FILEFORMAT_MP4: number;


/**
 * Audio file format MP4A.
 */
declare var Titanium$Media$AUDIO_FILEFORMAT_MP4A: number;


/**
 * Audio file format WAVE.
 */
declare var Titanium$Media$AUDIO_FILEFORMAT_WAVE: number;


/**
 * Audio format MPEG4 AAC encoding.
 */
declare var Titanium$Media$AUDIO_FORMAT_AAC: number;


/**
 * Audio format 8-bit [aLaw encoding](https://en.wikipedia.org/wiki/A-law_algorithm).
 */
declare var Titanium$Media$AUDIO_FORMAT_ALAW: number;


/**
 * Audio format Apple lossless encoding.
 */
declare var Titanium$Media$AUDIO_FORMAT_APPLE_LOSSLESS: number;


/**
 * Audio format [iLBC encoding](https://en.wikipedia.org/wiki/Internet_Low_Bitrate_Codec).
 */
declare var Titanium$Media$AUDIO_FORMAT_ILBC: number;


/**
 * Audio format Apple IMA4 encoding.
 */
declare var Titanium$Media$AUDIO_FORMAT_IMA4: number;


/**
 * Audio format 16-bit, [linear PCM encoding](https://en.wikipedia.org/wiki/Pulse-code_modulation).
 */
declare var Titanium$Media$AUDIO_FORMAT_LINEAR_PCM: number;


/**
 * Audio format 8-bit [muLaw encoding](https://en.wikipedia.org/wiki/M-law_algorithm).
 */
declare var Titanium$Media$AUDIO_FORMAT_ULAW: number;


/**
 * Line-type constant for headphones.
 */
declare var Titanium$Media$AUDIO_HEADPHONES: number;


/**
 * Line-type constant for headphones and microphone.
 */
declare var Titanium$Media$AUDIO_HEADPHONES_AND_MIC: number;


/**
 * Line-type constant for headset in/out.
 */
declare var Titanium$Media$AUDIO_HEADSET_INOUT: number;


/**
 * Line-type constant for line-out.
 */
declare var Titanium$Media$AUDIO_LINEOUT: number;


/**
 * Line-type constant for microphone.
 */
declare var Titanium$Media$AUDIO_MICROPHONE: number;


/**
 * Line-type constant indicated mute switch is on.
 */
declare var Titanium$Media$AUDIO_MUTED: number;


/**
 * Line-type constant indicating receiver and microphone.
 */
declare var Titanium$Media$AUDIO_RECEIVER_AND_MIC: number;


/**
 * For long-duration sounds such as rain, car engine noise, and so on.
 */
declare var Titanium$Media$AUDIO_SESSION_CATEGORY_AMBIENT: string;


/**
 * Session mode for playing recorded music or other sounds that are central to the successful use of your application.
 */
declare var Titanium$Media$AUDIO_SESSION_CATEGORY_PLAYBACK: string;


/**
 * Session mode for recording (input) and playback (output) of audio, such as for a VOIP (voice over IP) application.
 */
declare var Titanium$Media$AUDIO_SESSION_CATEGORY_PLAY_AND_RECORD: string;


/**
 * Session mode for recording audio; it silences playback audio.
 */
declare var Titanium$Media$AUDIO_SESSION_CATEGORY_RECORD: string;


/**
 * Session mode for long-duration sounds such as rain, car engine noise, and so on.
 */
declare var Titanium$Media$AUDIO_SESSION_CATEGORY_SOLO_AMBIENT: string;


/**
 * For long-duration sounds such as rain, car engine noise, and so on.
 */
declare var Titanium$Media$AUDIO_SESSION_MODE_AMBIENT: number;


/**
 * Session mode for playing recorded music or other sounds that are central to the successful use of your application.
 */
declare var Titanium$Media$AUDIO_SESSION_MODE_PLAYBACK: number;


/**
 * Session mode for recording (input) and playback (output) of audio, such as for a VOIP (voice over IP) application.
 */
declare var Titanium$Media$AUDIO_SESSION_MODE_PLAY_AND_RECORD: number;


/**
 * Session mode for recording audio; it silences playback audio.
 */
declare var Titanium$Media$AUDIO_SESSION_MODE_RECORD: number;


/**
 * Session mode for long-duration sounds such as rain, car engine noise, and so on.
 */
declare var Titanium$Media$AUDIO_SESSION_MODE_SOLO_AMBIENT: number;


/**
 * Constant that specifies audio should output to the default audio route. See <Titanium.Media.setOverrideAudioRoute> for more information.
 */
declare var Titanium$Media$AUDIO_SESSION_OVERRIDE_ROUTE_NONE: number;


/**
 * Constant that specifies audio should output to the speaker. See <Titanium.Media.setOverrideAudioRoute> for more information.
 */
declare var Titanium$Media$AUDIO_SESSION_OVERRIDE_ROUTE_SPEAKER: number;


/**
 * Constant for line level input on a dock connector. This is an input port.
 */
declare var Titanium$Media$AUDIO_SESSION_PORT_LINEIN: string;


/**
 * Constant for built-in microphone on an iOS device. This is an input port.
 */
declare var Titanium$Media$AUDIO_SESSION_PORT_BUILTINMIC: string;


/**
 * Constant for microphone on a wired headset. This is an input port.
 */
declare var Titanium$Media$AUDIO_SESSION_PORT_HEADSETMIC: string;


/**
 * Constant for line level output on a dock connector. This is an output port.
 */
declare var Titanium$Media$AUDIO_SESSION_PORT_LINEOUT: string;


/**
 * Constant for headphone or headset output. This is an output port.
 */
declare var Titanium$Media$AUDIO_SESSION_PORT_HEADPHONES: string;


/**
 * Constant for output on a Bluetooth A2DP device. This is an output port.
 */
declare var Titanium$Media$AUDIO_SESSION_PORT_BLUETOOTHA2DP: string;


/**
 * Constant for the speaker you hold to your ear when on a phone call. This is an output port.
 */
declare var Titanium$Media$AUDIO_SESSION_PORT_BUILTINRECEIVER: string;


/**
 * Constant for built-in speaker on an iOS device. This is an output port.
 */
declare var Titanium$Media$AUDIO_SESSION_PORT_BUILTINSPEAKER: string;


/**
 * Constant for output via High-Definition Multimedia Interface. This is an output port
 */
declare var Titanium$Media$AUDIO_SESSION_PORT_HDMI: string;


/**
 * Constant for output on a remote Air Play device. This is an output port.
 */
declare var Titanium$Media$AUDIO_SESSION_PORT_AIRPLAY: string;


/**
 * Constant for input or output on a Bluetooth Hands-Free Profile device. This can be both an input and output port.
 */
declare var Titanium$Media$AUDIO_SESSION_PORT_BLUETOOTHHFP: string;


/**
 * Constant for input or output on a Universal Serial Bus device. This can be both an input and output port.
 */
declare var Titanium$Media$AUDIO_SESSION_PORT_USBAUDIO: string;


/**
 * Constant for output on a Bluetooth Low Energy device. This is an output port. This is available on iOS7 and later.
 */
declare var Titanium$Media$AUDIO_SESSION_PORT_BLUETOOTHLE: string;


/**
 * Constant for Input or output via Car Audio. This can be both an input and output port. This is available on iOS7 and later.
 */
declare var Titanium$Media$AUDIO_SESSION_PORT_CARAUDIO: string;


/**
 * Line-type constant for speaker output.
 */
declare var Titanium$Media$AUDIO_SPEAKER: number;


/**
 * Line-type constant indicating that audio is unavailable.
 */
declare var Titanium$Media$AUDIO_UNAVAILABLE: number;


/**
 * Line-type constant indicating that line-type is unknown or not determined.
 */
declare var Titanium$Media$AUDIO_UNKNOWN: number;


/**
 * Audio data is being buffered from the network.
 */
declare var Titanium$Media$AUDIO_STATE_BUFFERING: number;


/**
 * Audio playback is being initialized.
 */
declare var Titanium$Media$AUDIO_STATE_INITIALIZED: number;


/**
 * Playback is paused.
 */
declare var Titanium$Media$AUDIO_STATE_PAUSED: number;


/**
 * Audio playback is active.
 */
declare var Titanium$Media$AUDIO_STATE_PLAYING: number;


/**
 * Audio playback is starting.
 */
declare var Titanium$Media$AUDIO_STATE_STARTING: number;


/**
 * Audio playback is stopped.
 */
declare var Titanium$Media$AUDIO_STATE_STOPPED: number;


/**
 * Audio playback is stopping.
 */
declare var Titanium$Media$AUDIO_STATE_STOPPING: number;


/**
 * Player is waiting for audio data from the network.
 */
declare var Titanium$Media$AUDIO_STATE_WAITING_FOR_DATA: number;


/**
 * Player is waiting for audio data to fill the queue.
 */
declare var Titanium$Media$AUDIO_STATE_WAITING_FOR_QUEUE: number;


/**
 * Constant specifying to have the device determine to use the flash or not.
 */
declare var Titanium$Media$CAMERA_FLASH_AUTO: number;


/**
 * Constant specifying to never fire the flash.
 */
declare var Titanium$Media$CAMERA_FLASH_OFF: number;


/**
 * Constant specifying to always fire the flash.
 */
declare var Titanium$Media$CAMERA_FLASH_ON: number;


/**
 * Constant specifying the front camera.
 */
declare var Titanium$Media$CAMERA_FRONT: number;


/**
 * Constant indicating the rear camera.
 */
declare var Titanium$Media$CAMERA_REAR: number;


/**
 * Constant specifying that app is authorized to use camera. This is available on iOS7 and later.
 */
declare var Titanium$Media$CAMERA_AUTHORIZATION_AUTHORIZED: number;


/**
 * Constant specifying that app is denied usage of camera. This is available on iOS7 and later.
 */
declare var Titanium$Media$CAMERA_AUTHORIZATION_DENIED: number;


/**
 * Constant specifying that app is restricted from using camera. This is available on iOS7 and later.
 */
declare var Titanium$Media$CAMERA_AUTHORIZATION_RESTRICTED: number;


/**
 * Constant specifying that app is not yet authorized to use camera. This is available on iOS7 and later.
 */
declare var Titanium$Media$CAMERA_AUTHORIZATION_NOT_DETERMINED: number;


/**
 * Constant specifying that app is not yet authorized to use camera. This is available on iOS7 and later.
 */
declare var Titanium$Media$CAMERA_AUTHORIZATION_UNKNOWN: number;


/**
 * Constant for media device busy error.
 */
declare var Titanium$Media$DEVICE_BUSY: number;


/**
 * Media type constant for photo media.
 */
declare var Titanium$Media$MEDIA_TYPE_PHOTO: string;


/**
 * Media type constant for live photo media.
 */
declare var Titanium$Media$MEDIA_TYPE_LIVEPHOTO: string;


/**
 * Media type constant for video media.
 */
declare var Titanium$Media$MEDIA_TYPE_VIDEO: string;


/**
 * Music library media containing any type of content.
 */
declare var Titanium$Media$MUSIC_MEDIA_TYPE_ALL: number;


/**
 * Music library media containing any type of audio content.
 */
declare var Titanium$Media$MUSIC_MEDIA_TYPE_ANY_AUDIO: number;


/**
 * Music library media containing audiobook content.
 */
declare var Titanium$Media$MUSIC_MEDIA_TYPE_AUDIOBOOK: number;


/**
 * Music library media containing music content.
 */
declare var Titanium$Media$MUSIC_MEDIA_TYPE_MUSIC: number;


/**
 * Music library media containing podcast content.
 */
declare var Titanium$Media$MUSIC_MEDIA_TYPE_PODCAST: number;


/**
 * Constant for grouping query results by title.
 */
declare var Titanium$Media$MUSIC_MEDIA_GROUP_TITLE: number;


/**
 * Constant for grouping query results by album.
 */
declare var Titanium$Media$MUSIC_MEDIA_GROUP_ALBUM: number;


/**
 * Constant for grouping query results by artist.
 */
declare var Titanium$Media$MUSIC_MEDIA_GROUP_ARTIST: number;


/**
 * Constant for grouping query results by album and artist.
 */
declare var Titanium$Media$MUSIC_MEDIA_GROUP_ALBUM_ARTIST: number;


/**
 * Constant for grouping query results by composer.
 */
declare var Titanium$Media$MUSIC_MEDIA_GROUP_COMPOSER: number;


/**
 * Constant for grouping query results by genre.
 */
declare var Titanium$Media$MUSIC_MEDIA_GROUP_GENRE: number;


/**
 * Constant for grouping query results by playlist.
 */
declare var Titanium$Media$MUSIC_MEDIA_GROUP_PLAYLIST: number;


/**
 * Constant for grouping query results by podcast title.
 */
declare var Titanium$Media$MUSIC_MEDIA_GROUP_PODCAST_TITLE: number;


/**
 * Constant for "Repeat All" setting.
 */
declare var Titanium$Media$MUSIC_PLAYER_REPEAT_ALL: number;


/**
 * Constant for user's default repeat setting.
 */
declare var Titanium$Media$MUSIC_PLAYER_REPEAT_DEFAULT: number;


/**
 * Constant for "No Repeat" setting.
 */
declare var Titanium$Media$MUSIC_PLAYER_REPEAT_NONE: number;


/**
 * Constant for "Repeat one item" setting.
 */
declare var Titanium$Media$MUSIC_PLAYER_REPEAT_ONE: number;


/**
 * Constant for shuffling complete albums setting.
 */
declare var Titanium$Media$MUSIC_PLAYER_SHUFFLE_ALBUMS: number;


/**
 * Constant for user's default shuffle setting.
 */
declare var Titanium$Media$MUSIC_PLAYER_SHUFFLE_DEFAULT: number;


/**
 * Constant for "no shuffle" setting.
 */
declare var Titanium$Media$MUSIC_PLAYER_SHUFFLE_NONE: number;


/**
 * Constant for shuffling songs setting.
 */
declare var Titanium$Media$MUSIC_PLAYER_SHUFFLE_SONGS: number;


/**
 * Constant for interrupted state.
 */
declare var Titanium$Media$MUSIC_PLAYER_STATE_INTERRUPTED: number;


/**
 * Constant for paused state.
 */
declare var Titanium$Media$MUSIC_PLAYER_STATE_PAUSED: number;


/**
 * Constant for playing state.
 */
declare var Titanium$Media$MUSIC_PLAYER_STATE_PLAYING: number;


/**
 * Constant for backward seek state.
 */
declare var Titanium$Media$MUSIC_PLAYER_STATE_SEEK_BACKWARD: number;


/**
 * Constant for forward seek state.
 */
declare var Titanium$Media$MUSIC_PLAYER_STATE_SEEK_FORWARD: number;


/**
 * Constant for stopped state.
 */
declare var Titanium$Media$MUSIC_PLAYER_STATE_STOPPED: number;


/**
 * Constant for media no camera error.
 */
declare var Titanium$Media$NO_CAMERA: number;


/**
 * Constant for media no video error.
 */
declare var Titanium$Media$NO_VIDEO: number;


/**
 * Media type constant for high-quality video recording.
 */
declare var Titanium$Media$QUALITY_HIGH: number;


/**
 * Media type constant for low-quality video recording.
 */
declare var Titanium$Media$QUALITY_LOW: number;


/**
 * Media type constant for medium-quality video recording.
 */
declare var Titanium$Media$QUALITY_MEDIUM: number;


/**
 * Media type constant for medium-quality video recording.
 */
declare var Titanium$Media$QUALITY_640x480: number;


/**
 * Media type constant for medium-quality video recording.
 */
declare var Titanium$Media$QUALITY_IFRAME_1280x720: number;


/**
 * Media type constant for medium-quality video recording.
 */
declare var Titanium$Media$QUALITY_IFRAME_960x540: number;


/**
 * Constant for unknown media error.
 */
declare var Titanium$Media$UNKNOWN_ERROR: number;


/**
 * Constant for default video controls.
 */
declare var Titanium$Media$VIDEO_CONTROL_DEFAULT: number;


/**
 * Constant for video controls for an embedded view.
 */
declare var Titanium$Media$VIDEO_CONTROL_EMBEDDED: number;


/**
 * Constant for fullscreen video controls.
 */
declare var Titanium$Media$VIDEO_CONTROL_FULLSCREEN: number;


/**
 * Constant for video controls hidden.
 */
declare var Titanium$Media$VIDEO_CONTROL_HIDDEN: number;


/**
 * Constant for no video controls.
 */
declare var Titanium$Media$VIDEO_CONTROL_NONE: number;


/**
 * Constant for video controls volume only.
 */
declare var Titanium$Media$VIDEO_CONTROL_VOLUME_ONLY: number;


/**
 * Video playback ended normally.
 */
declare var Titanium$Media$VIDEO_FINISH_REASON_PLAYBACK_ENDED: number;


/**
 * Video playback ended abnormally.
 */
declare var Titanium$Media$VIDEO_FINISH_REASON_PLAYBACK_ERROR: number;


/**
 * Video playback ended by user action (such as clicking the `Done` button).
 */
declare var Titanium$Media$VIDEO_FINISH_REASON_USER_EXITED: number;


/**
 * Indicates that the player can no longer play media items because of an error.
 */
declare var Titanium$Media$VIDEO_LOAD_STATE_FAILED: number;


/**
 * Current media is playable.
 */
declare var Titanium$Media$VIDEO_LOAD_STATE_PLAYABLE: number;


/**
 * Playback will be automatically started in this state when `autoplay` is true.
 */
declare var Titanium$Media$VIDEO_LOAD_STATE_PLAYTHROUGH_OK: number;


/**
 * Playback will be automatically paused in this state, if started.
 */
declare var Titanium$Media$VIDEO_LOAD_STATE_STALLED: number;


/**
 * Current load state is not known.
 */
declare var Titanium$Media$VIDEO_LOAD_STATE_UNKNOWN: number;


/**
 * A audio type of media in the movie returned by <Titanium.Media.VideoPlayer> `mediaTypes` property.
 */
declare var Titanium$Media$VIDEO_MEDIA_TYPE_AUDIO: number;


/**
 * An unknown type of media in the movie returned by <Titanium.Media.VideoPlayer> `mediaTypes` property.
 */
declare var Titanium$Media$VIDEO_MEDIA_TYPE_NONE: number;


/**
 * A video type of media in the movie returned by <Titanium.Media.VideoPlayer> `mediaTypes` property.
 */
declare var Titanium$Media$VIDEO_MEDIA_TYPE_VIDEO: number;


/**
 * Video playback has been interrupted.
 */
declare var Titanium$Media$VIDEO_PLAYBACK_STATE_INTERRUPTED: number;


/**
 * Video playback is paused.
 */
declare var Titanium$Media$VIDEO_PLAYBACK_STATE_PAUSED: number;


/**
 * Video is being played.
 */
declare var Titanium$Media$VIDEO_PLAYBACK_STATE_PLAYING: number;


/**
 * Video playback is rewinding.
 */
declare var Titanium$Media$VIDEO_PLAYBACK_STATE_SEEKING_BACKWARD: number;


/**
 * Video playback is seeking forward.
 */
declare var Titanium$Media$VIDEO_PLAYBACK_STATE_SEEKING_FORWARD: number;


/**
 * Video playback is stopped.
 */
declare var Titanium$Media$VIDEO_PLAYBACK_STATE_STOPPED: number;


/**
 * Constant for disabling repeat on video playback.
 */
declare var Titanium$Media$VIDEO_REPEAT_MODE_NONE: number;


/**
 * Constant for repeating one video (i.e., the one video will repeat constantly) during playback.
 */
declare var Titanium$Media$VIDEO_REPEAT_MODE_ONE: number;


/**
 * Scale video to fill the screen, clipping edges if necessary.
 */
declare var Titanium$Media$VIDEO_SCALING_ASPECT_FILL: number;


/**
 * Scale video to fit the screen, letterboxing if necessary.
 */
declare var Titanium$Media$VIDEO_SCALING_ASPECT_FIT: number;


/**
 * Video is scaled until both dimensions fit the screen exactly, stretching if necessary.
 */
declare var Titanium$Media$VIDEO_SCALING_MODE_FILL: number;


/**
 * Video scaling is disabled.
 */
declare var Titanium$Media$VIDEO_SCALING_NONE: number;


/**
 * Specifies that the video should be stretched to fill the bounds of layer.
 */
declare var Titanium$Media$VIDEO_SCALING_RESIZE: string;


/**
 * Specifies that the player should preserve the aspect ratio of video and fit the video within the bounds of layer.
 */
declare var Titanium$Media$VIDEO_SCALING_RESIZE_ASPECT: string;


/**
 * Specifies that the player should preserve the aspect ratio of video and fill the bounds of layer.
 */
declare var Titanium$Media$VIDEO_SCALING_RESIZE_ASPECT_FILL: string;


/**
 * Video source type is a file.
 */
declare var Titanium$Media$VIDEO_SOURCE_TYPE_FILE: number;


/**
 * Video source type is a remote stream.
 */
declare var Titanium$Media$VIDEO_SOURCE_TYPE_STREAMING: number;


/**
 * Video source type is unknown.
 */
declare var Titanium$Media$VIDEO_SOURCE_TYPE_UNKNOWN: number;


/**
 * Use the exact time.
 */
declare var Titanium$Media$VIDEO_TIME_OPTION_EXACT: number;


/**
 * Use the closest keyframe in the time.
 */
declare var Titanium$Media$VIDEO_TIME_OPTION_NEAREST_KEYFRAME: number;


/**
 * Use the closest sync (or key) frame at given the time.
 */
declare var Titanium$Media$VIDEO_TIME_OPTION_CLOSEST_SYNC: number;


/**
 * Use the sync (or key) frame located right after or at given the time.
 */
declare var Titanium$Media$VIDEO_TIME_OPTION_NEXT_SYNC: number;


/**
 * Use the sync (or key) frame located right before or at given the time.
 */
declare var Titanium$Media$VIDEO_TIME_OPTION_PREVIOUS_SYNC: number;


/**
 * An instance of <Titanium.Media.MusicPlayer> representing the app-specific music player.
 */
declare var Titanium$Media$appMusicPlayer: Titanium$Media$MusicPlayer;


/**
 * Returns the line type constant for the current line type.
 */
declare var Titanium$Media$audioLineType: number;


/**
 * Returns `true` if the device is playing audio.
 */
declare var Titanium$Media$audioPlaying: boolean;


/**
 * A constant for the audio session category to be used.
 */
declare var Titanium$Media$audioSessionCategory: number;


/**
 * A constant for the audio session mode to be used.
 */
declare var Titanium$Media$audioSessionMode: number;


/**
 * Array indicating which cameras are available, `CAMERA_FRONT`, `CAMERA_REAR` or both.
 */
declare var Titanium$Media$availableCameras: number[];


/**
 * Array of media type constants supported for the camera.
 */
declare var Titanium$Media$availableCameraMediaTypes: any[];


/**
 * Array of media type constants supported for saving to the device's camera roll or saved images album.
 */
declare var Titanium$Media$availablePhotoGalleryMediaTypes: any[];


/**
 * Array of media type constants supported for the photo library.
 */
declare var Titanium$Media$availablePhotoMediaTypes: any[];


/**
 * Current average microphone level in dB or -1 if microphone monitoring is disabled.
 */
declare var Titanium$Media$averageMicrophonePower: number;


/**
 * Determines how the flash is fired when using the device's camera.
 */
declare var Titanium$Media$cameraFlashMode: number;


/**
 * `true` if the device has a recording input device available.
 */
declare var Titanium$Media$canRecord: boolean;


/**
 * Returns a description of the current route, consisting of zero or more input ports and zero or more output ports.
 */
declare var Titanium$Media$currentRoute: RouteDescription;


/**
 * `true` if the device has camera support.
 */
declare var Titanium$Media$isCameraSupported: boolean;


/**
 * Returns the authorization status for the camera.
 */
declare var Titanium$Media$cameraAuthorizationStatus: number;


/**
 * Returns the authorization status for the camera.
 */
declare var Titanium$Media$cameraAuthorization: number;


/**
 * Current microphone level peak power in dB or -1 if microphone monitoring is disabled.
 */
declare var Titanium$Media$peakMicrophonePower: number;


/**
 * An instance of <Titanium.Media.MusicPlayer> representing the system-wide music player.
 */
declare var Titanium$Media$systemMusicPlayer: Titanium$Media$MusicPlayer;


/**
 * Current volume of the playback device.
 */
declare var Titanium$Media$volume: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Media$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Media$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Media$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Media$applyProperties(props: any): void



/**
 * Plays a device beep notification.
 */
declare function Titanium$Media$beep(): void



/**
 * Hides the device camera UI.
 */
declare function Titanium$Media$hideCamera(): void



/**
 * Hides the music library.
 */
declare function Titanium$Media$hideMusicLibrary(): void



/**
 * Returns `true` if the source supports the specified media type.
 */
declare function Titanium$Media$isMediaTypeSupported(source: string, type: string): boolean



/**
 * Shows the music library and allows the user to select one or more tracks.
 */
declare function Titanium$Media$openMusicLibrary(options: MusicLibraryOptionsType): void



/**
 * Opens the photo gallery image picker.
 */
declare function Titanium$Media$openPhotoGallery(options: PhotoGalleryOptionsType): void



/**
 * Displays the given image.
 */
declare function Titanium$Media$previewImage(options: any): void



/**
 * Saves media to the device's photo gallery / camera roll.
 */
declare function Titanium$Media$saveToPhotoGallery(media: Titanium$Blob, callbacks: any): void



/**
 * Saves media to the device's photo gallery / camera roll.
 */
declare function Titanium$Media$saveToPhotoGallery(media: Titanium$Filesystem$File, callbacks: any): void



/**
 * Overrides the default audio route when using the <Titanium.Media.AUDIO_SESSION_CATEGORY_PLAY_AND_RECORD> session mode.
 */
declare function Titanium$Media$setOverrideAudioRoute(route: number): void



/**
 * Shows the camera.
 */
declare function Titanium$Media$showCamera(options: CameraOptionsType): void



/**
 * Returns `true` if the app has music library access.
 */
declare function Titanium$Media$hasMusicLibraryPermissions(): boolean



/**
 * Request permissions for the native music-library.
 */
declare function Titanium$Media$requestMusicLibraryPermissions(callback: (param0: RequestMusicLibraryAccessResult) => any): void



/**
 * Searches the music library for items matching the specified search predicates.
 */
declare function Titanium$Media$queryMusicLibrary(query: MediaQueryType): Titanium$Media$Item[]



/**
 * Starts monitoring the microphone sound level.
 */
declare function Titanium$Media$startMicrophoneMonitor(): void



/**
 * Stops monitoring the microphone sound level.
 */
declare function Titanium$Media$stopMicrophoneMonitor(): void



/**
 * Uses the device camera to capture a photo.
 */
declare function Titanium$Media$takePicture(): void



/**
 * Starts video capture using the camera specified.
 */
declare function Titanium$Media$startVideoCapture(): void



/**
 * Stops video capture using the camera specified.
 */
declare function Titanium$Media$stopVideoCapture(): void



/**
 * Switches between front and rear-facing cameras. Make sure to set one of the below constants to determine
 * the camera you want to switch to.
 */
declare function Titanium$Media$switchCamera(camera: number): void



/**
 * Returns `true` if the app has camera access.
 */
declare function Titanium$Media$hasCameraPermissions(): boolean



/**
 * Requests for camera access.
 */
declare function Titanium$Media$requestCameraPermissions(callback: (param0: RequestCameraAccessResult) => any): void



/**
 * Returns `true` if the app has photo gallery permissions.
 */
declare function Titanium$Media$hasPhotoGalleryPermissions(): boolean



/**
 * Requests for photo gallery permissions.
 */
declare function Titanium$Media$requestPhotoGalleryPermissions(callback: (param0: RequestPhotoGalleryAccessResult) => any): void



/**
 * Requests for camera access.
 */
declare function Titanium$Media$requestCameraAccess(callback: (param0: RequestCameraAccessResult) => any): void



/**
 * Takes a screen shot of the visible UI on the device.
 */
declare function Titanium$Media$takeScreenshot(callback: (param0: ScreenshotResult) => any): void



/**
 * Makes the device vibrate.
 */
declare function Titanium$Media$vibrate(pattern?: $ReadOnlyArray<number>): void



/**
 * Request the user's permission for audio recording.
 */
declare function Titanium$Media$requestAuthorization(callback: (param0: MediaAuthorizationResponse) => any): void



/**
 * Returns `true` if the app has audio permissions.
 */
declare function Titanium$Media$hasAudioPermissions(): boolean



/**
 * Returns `true` if the app has audio permissions.
 */
declare function Titanium$Media$hasAudioRecorderPermissions(): boolean



/**
 * Request the user's permission for audio recording.
 */
declare function Titanium$Media$requestAudioPermissions(callback: (param0: MediaAuthorizationResponse) => any): void



/**
 * Request the user's permission for audio recording.
 */
declare function Titanium$Media$requestAudioRecorderPermissions(callback: (param0: MediaAuthorizationResponse) => any): void



/**
 * Creates and returns an instance of <Titanium.Media.AudioPlayer>.
 */
declare function Titanium$Media$createAudioPlayer(parameters?: any): Titanium$Media$AudioPlayer



/**
 * Creates and returns an instance of <Titanium.Media.AudioRecorder>.
 */
declare function Titanium$Media$createAudioRecorder(parameters?: any): Titanium$Media$AudioRecorder



/**
 * Gets the value of the <Titanium.Media.bubbleParent> property.
 */
declare function Titanium$Media$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Media.bubbleParent> property.
 */
declare function Titanium$Media$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Media.apiName> property.
 */
declare function Titanium$Media$getApiName(): string



/**
 * Gets the value of the <Titanium.Media.lifecycleContainer> property.
 */
declare function Titanium$Media$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Media.lifecycleContainer> property.
 */
declare function Titanium$Media$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Media.lifecycleContainer> property.
 */
declare function Titanium$Media$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.Media.QUALITY_640x480> property.
 */
declare function Titanium$Media$getQUALITY_640x480(): number



/**
 * Gets the value of the <Titanium.Media.QUALITY_IFRAME_1280x720> property.
 */
declare function Titanium$Media$getQUALITY_IFRAME_1280x720(): number



/**
 * Gets the value of the <Titanium.Media.QUALITY_IFRAME_960x540> property.
 */
declare function Titanium$Media$getQUALITY_IFRAME_960x540(): number



/**
 * Gets the value of the <Titanium.Media.appMusicPlayer> property.
 */
declare function Titanium$Media$getAppMusicPlayer(): Titanium$Media$MusicPlayer



/**
 * Gets the value of the <Titanium.Media.audioLineType> property.
 */
declare function Titanium$Media$getAudioLineType(): number



/**
 * Gets the value of the <Titanium.Media.audioPlaying> property.
 */
declare function Titanium$Media$getAudioPlaying(): boolean



/**
 * Gets the value of the <Titanium.Media.audioSessionCategory> property.
 */
declare function Titanium$Media$getAudioSessionCategory(): number



/**
 * Sets the value of the <Titanium.Media.audioSessionCategory> property.
 */
declare function Titanium$Media$setAudioSessionCategory(audioSessionCategory: number): void



/**
 * Gets the value of the <Titanium.Media.audioSessionMode> property.
 */
declare function Titanium$Media$getAudioSessionMode(): number



/**
 * Sets the value of the <Titanium.Media.audioSessionMode> property.
 */
declare function Titanium$Media$setAudioSessionMode(audioSessionMode: number): void



/**
 * Gets the value of the <Titanium.Media.availableCameras> property.
 */
declare function Titanium$Media$getAvailableCameras(): number[]



/**
 * Gets the value of the <Titanium.Media.availableCameraMediaTypes> property.
 */
declare function Titanium$Media$getAvailableCameraMediaTypes(): any[]



/**
 * Sets the value of the <Titanium.Media.availableCameraMediaTypes> property.
 */
declare function Titanium$Media$setAvailableCameraMediaTypes(availableCameraMediaTypes: $ReadOnlyArray<any>): void



/**
 * Gets the value of the <Titanium.Media.availablePhotoGalleryMediaTypes> property.
 */
declare function Titanium$Media$getAvailablePhotoGalleryMediaTypes(): any[]



/**
 * Sets the value of the <Titanium.Media.availablePhotoGalleryMediaTypes> property.
 */
declare function Titanium$Media$setAvailablePhotoGalleryMediaTypes(availablePhotoGalleryMediaTypes: $ReadOnlyArray<any>): void



/**
 * Gets the value of the <Titanium.Media.availablePhotoMediaTypes> property.
 */
declare function Titanium$Media$getAvailablePhotoMediaTypes(): any[]



/**
 * Sets the value of the <Titanium.Media.availablePhotoMediaTypes> property.
 */
declare function Titanium$Media$setAvailablePhotoMediaTypes(availablePhotoMediaTypes: $ReadOnlyArray<any>): void



/**
 * Gets the value of the <Titanium.Media.averageMicrophonePower> property.
 */
declare function Titanium$Media$getAverageMicrophonePower(): number



/**
 * Sets the value of the <Titanium.Media.averageMicrophonePower> property.
 */
declare function Titanium$Media$setAverageMicrophonePower(averageMicrophonePower: number): void



/**
 * Gets the value of the <Titanium.Media.cameraFlashMode> property.
 */
declare function Titanium$Media$getCameraFlashMode(): number



/**
 * Sets the value of the <Titanium.Media.cameraFlashMode> property.
 */
declare function Titanium$Media$setCameraFlashMode(cameraFlashMode: number): void



/**
 * Gets the value of the <Titanium.Media.canRecord> property.
 */
declare function Titanium$Media$getCanRecord(): boolean



/**
 * Gets the value of the <Titanium.Media.currentRoute> property.
 */
declare function Titanium$Media$getCurrentRoute(): RouteDescription



/**
 * Gets the value of the <Titanium.Media.isCameraSupported> property.
 */
declare function Titanium$Media$getIsCameraSupported(): boolean



/**
 * Gets the value of the <Titanium.Media.cameraAuthorizationStatus> property.
 */
declare function Titanium$Media$getCameraAuthorizationStatus(): number



/**
 * Gets the value of the <Titanium.Media.cameraAuthorization> property.
 */
declare function Titanium$Media$getCameraAuthorization(): number



/**
 * Gets the value of the <Titanium.Media.peakMicrophonePower> property.
 */
declare function Titanium$Media$getPeakMicrophonePower(): number



/**
 * Gets the value of the <Titanium.Media.systemMusicPlayer> property.
 */
declare function Titanium$Media$getSystemMusicPlayer(): Titanium$Media$MusicPlayer



/**
 * Gets the value of the <Titanium.Media.volume> property.
 */
declare function Titanium$Media$getVolume(): number



/**
 * Creates and returns an instance of <Titanium.Media.Sound>.
 */
declare function Titanium$Media$createSound(parameters?: any): Titanium$Media$Sound



/**
 * Creates and returns an instance of <Titanium.Media.SystemAlert>.
 */
declare function Titanium$Media$createSystemAlert(parameters?: any): Titanium$Media$SystemAlert



/**
 * Creates and returns an instance of <Titanium.Media.VideoPlayer>.
 */
declare function Titanium$Media$createVideoPlayer(parameters?: any): Titanium$Media$VideoPlayer



/**
 * An audio player object used for streaming audio to the device, and low-level control of the audio playback.
 */
declare type Titanium$Media$AudioPlayer = {

/**
 * Audio data is being buffered from the network.
 */
+STATE_BUFFERING: number,

/**
 * Audio playback is being initialized.
 */
+STATE_INITIALIZED: number,

/**
 * Playback is paused.
 */
+STATE_PAUSED: number,

/**
 * Audio playback is active.
 */
+STATE_PLAYING: number,

/**
 * Audio playback is starting.
 */
+STATE_STARTING: number,

/**
 * Audio playback is stopped.
 */
+STATE_STOPPED: number,

/**
 * Audio playback is stopping.
 */
+STATE_STOPPING: number,

/**
 * Player is waiting for audio data from the network.
 */
+STATE_WAITING_FOR_DATA: number,

/**
 * Player is waiting for audio data to fill the queue.
 */
+STATE_WAITING_FOR_QUEUE: number,

/**
 * Used to identify the volume of audio streams for alarms.
 */
+AUDIO_TYPE_ALARM: number,

/**
 * Used to identify the volume of audio streams for DTMF tones or beeps.
 */
+AUDIO_TYPE_SIGNALLING: number,

/**
 * Used to identify the volume of audio streams for media playback.
 */
+AUDIO_TYPE_MEDIA: number,

/**
 * Used to identify the volume of audio streams for notifications.
 */
+AUDIO_TYPE_NOTIFICATION: number,

/**
 * Used to identify the volume of audio streams for the phone ring.
 */
+AUDIO_TYPE_RING: number,

/**
 * Used to identify the volume of audio streams for voice calls.
 */
+AUDIO_TYPE_VOICE: number,

/**
 * Boolean to indicate if audio should continue playing even if the associated
 * Android [Activity](Titanium.Android.Activity) is paused.
 */
allowBackground: boolean,

/**
 * Focuses on the current audio player and stops other audio playing.
 */
audioFocus: boolean,

/**
 * Changes the audio-stream-type.
 */
audioType: number,

/**
 * Bit rate of the current playback stream.
 */
bitRate: number,

/**
 * Estimated duration in milliseconds of the file being played.
 */
+duration: number,

/**
 * Boolean indicating if the player is idle.
 */
+idle: boolean,

/**
 * Indicates whether or not audio output of the player is muted.
 */
muted: boolean,

/**
 * Indicates whether the player is currently playing video in "external playback" mode.
 */
+externalPlaybackActive: boolean,

/**
 * Indicates whether the player allows switching to "external playback" mode.
 */
allowsExternalPlayback: boolean,

/**
 * Indicates the desired rate of playback; 0.0 means "paused", 1.0 indicates a
 * desire to play at the natural rate of the current item. In addition, 2.0
 * would mean that the audio plays twice as fast.
 */
rate: number,

/**
 * Boolean indicating if audio playback is paused.
 */
paused: boolean,

/**
 * Boolean indicating if audio is currently playing.
 */
+playing: boolean,

/**
 * Current playback progress, in milliseconds.
 */
+progress: number,

/**
 * Current state of playback, specified using one of the `STATE` constants defined on this object.
 */
+state: number,

/**
 * URL for the audio stream.
 */
url: string,

/**
 * Volume of the audio, from 0.0 (muted) to 1.0 (loudest).
 */
volume: number,

/**
 * Boolean indicating if the playback is waiting for audio data from the network.
 */
+waiting: boolean,

/**
 * Size of the buffer used for streaming, in milliseconds.
 */
bufferSize: number,

/**
 * Current playback position of the audio.
 */
time: number,

/**
 * Returns the value of the [paused](Titanium.Media.AudioPlayer.paused) property.
 */
getPaused(): boolean,

/**
 * Returns the value of the [paused](Titanium.Media.AudioPlayer.paused) property.
 */
isPaused(): boolean,

/**
 * Returns the value of the [playing](Titanium.Media.AudioPlayer.playing) property.
 */
getPlaying(): boolean,

/**
 * Returns the value of the [playing](Titanium.Media.AudioPlayer.playing) property.
 */
isPlaying(): boolean,

/**
 * Pauses audio playback.
 */
pause(): void,

/**
 * Starts or resumes audio playback.
 */
play(): void,

/**
 * Sets the value of the [paused](Titanium.Media.AudioPlayer.paused) property.
 */
setPaused(paused: boolean): void,

/**
 * Moves the playback cursor and invokes the specified block when the seek
 * operation has either been completed or been interrupted.
 */
seekToTime(time: number): void,

/**
 * Stops buffering audio data and releases audio resources.
 */
release(): void,

/**
 * Returns the audio session id.
 */
getAudioSessionId(): number,

/**
 * Starts or resumes audio playback.
 */
start(): void,

/**
 * Restarts (stops and stars) audio playback.
 */
restart(): void,

/**
 * Converts a [state](Titanium.Media.AudioPlayer.state) value into a text description
 * suitable for display.
 */
stateDescription(state: number): string,

/**
 * Stops audio playback.
 */
stop(): void,

/**
 * Gets the value of the <Titanium.Media.AudioPlayer.allowBackground> property.
 */
getAllowBackground(): boolean,

/**
 * Sets the value of the <Titanium.Media.AudioPlayer.allowBackground> property.
 */
setAllowBackground(allowBackground: boolean): void,

/**
 * Gets the value of the <Titanium.Media.AudioPlayer.audioFocus> property.
 */
getAudioFocus(): boolean,

/**
 * Sets the value of the <Titanium.Media.AudioPlayer.audioFocus> property.
 */
setAudioFocus(audioFocus: boolean): void,

/**
 * Gets the value of the <Titanium.Media.AudioPlayer.audioType> property.
 */
getAudioType(): number,

/**
 * Sets the value of the <Titanium.Media.AudioPlayer.audioType> property.
 */
setAudioType(audioType: number): void,

/**
 * Gets the value of the <Titanium.Media.AudioPlayer.bitRate> property.
 */
getBitRate(): number,

/**
 * Sets the value of the <Titanium.Media.AudioPlayer.bitRate> property.
 */
setBitRate(bitRate: number): void,

/**
 * Gets the value of the <Titanium.Media.AudioPlayer.duration> property.
 */
getDuration(): number,

/**
 * Gets the value of the <Titanium.Media.AudioPlayer.idle> property.
 */
getIdle(): boolean,

/**
 * Gets the value of the <Titanium.Media.AudioPlayer.muted> property.
 */
getMuted(): boolean,

/**
 * Sets the value of the <Titanium.Media.AudioPlayer.muted> property.
 */
setMuted(muted: boolean): void,

/**
 * Gets the value of the <Titanium.Media.AudioPlayer.externalPlaybackActive> property.
 */
getExternalPlaybackActive(): boolean,

/**
 * Gets the value of the <Titanium.Media.AudioPlayer.allowsExternalPlayback> property.
 */
getAllowsExternalPlayback(): boolean,

/**
 * Sets the value of the <Titanium.Media.AudioPlayer.allowsExternalPlayback> property.
 */
setAllowsExternalPlayback(allowsExternalPlayback: boolean): void,

/**
 * Gets the value of the <Titanium.Media.AudioPlayer.rate> property.
 */
getRate(): number,

/**
 * Sets the value of the <Titanium.Media.AudioPlayer.rate> property.
 */
setRate(rate: number): void,

/**
 * Gets the value of the <Titanium.Media.AudioPlayer.progress> property.
 */
getProgress(): number,

/**
 * Gets the value of the <Titanium.Media.AudioPlayer.state> property.
 */
getState(): number,

/**
 * Gets the value of the <Titanium.Media.AudioPlayer.url> property.
 */
getUrl(): string,

/**
 * Sets the value of the <Titanium.Media.AudioPlayer.url> property.
 */
setUrl(url: string): void,

/**
 * Gets the value of the <Titanium.Media.AudioPlayer.volume> property.
 */
getVolume(): number,

/**
 * Sets the value of the <Titanium.Media.AudioPlayer.volume> property.
 */
setVolume(volume: number): void,

/**
 * Gets the value of the <Titanium.Media.AudioPlayer.waiting> property.
 */
getWaiting(): boolean,

/**
 * Gets the value of the <Titanium.Media.AudioPlayer.bufferSize> property.
 */
getBufferSize(): number,

/**
 * Sets the value of the <Titanium.Media.AudioPlayer.bufferSize> property.
 */
setBufferSize(bufferSize: number): void,

/**
 * Gets the value of the <Titanium.Media.AudioPlayer.time> property.
 */
getTime(): number,

/**
 * Sets the value of the <Titanium.Media.AudioPlayer.time> property.
 */
setTime(time: number): void
} & Titanium$Proxy



/**
 * An audio recorder object used for recording audio from the device microphone.
 */
declare type Titanium$Media$AudioRecorder = {

/**
 * Audio compression to be used for the recording.
 */
compression: number,

/**
 * Audio format to be used for the recording.
 */
format: number,

/**
 * Indicates if the audio recorder is paused.
 */
+paused: boolean,

/**
 * Indicates if the audio recorder is recording.
 */
+recording: boolean,

/**
 * Indicates if the audio recorder is stopped.
 */
+stopped: boolean,

/**
 * Pauses the current audio recording.
 */
pause(): void,

/**
 * Resumes a paused recording.
 */
resume(): void,

/**
 * Starts an audio recording.
 */
start(): void,

/**
 * Stops the current audio recording and returns the recorded audio file.
 */
stop(): Titanium$Filesystem$File,

/**
 * Gets the value of the <Titanium.Media.AudioRecorder.compression> property.
 */
getCompression(): number,

/**
 * Sets the value of the <Titanium.Media.AudioRecorder.compression> property.
 */
setCompression(compression: number): void,

/**
 * Gets the value of the <Titanium.Media.AudioRecorder.format> property.
 */
getFormat(): number,

/**
 * Sets the value of the <Titanium.Media.AudioRecorder.format> property.
 */
setFormat(format: number): void,

/**
 * Gets the value of the <Titanium.Media.AudioRecorder.paused> property.
 */
getPaused(): boolean,

/**
 * Gets the value of the <Titanium.Media.AudioRecorder.recording> property.
 */
getRecording(): boolean,

/**
 * Gets the value of the <Titanium.Media.AudioRecorder.stopped> property.
 */
getStopped(): boolean
} & Titanium$Proxy



/**
 * A representation of a media item returned by [openMusicLibrary](Titanium.Media.openMusicLibrary) or [queryMusicLibrary](Titanium.Media.queryMusicLibrary).
 */
declare type Titanium$Media$Item = {

/**
 * Artist credited for the album containing this item.
 */
+albumArtist: string,

/**
 * The persistent identifier for an album artist.
 */
+albumArtistPersistentID: number,

/**
 * The key for the persistent identifier for an album.
 */
+albumPersistentID: number,

/**
 * Title of the album containing this item.
 */
+albumTitle: string,

/**
 * Number of tracks for the album containing this item.
 */
+albumTrackCount: number,

/**
 * Track number for this item.
 */
+albumTrackNumber: number,

/**
 * Artist credited for this item.
 */
+artist: string,

/**
 * Image for the item's artwork as a `Blob` object,  or `null` if no artwork is
 * available.
 */
+artwork: Titanium$Blob,

/**
 * A URL pointing to the media item.
 */
+assetURL: string,

/**
 * The number of musical beats per minute for the media item, corresponding
 * to the "BPM" field in the Info tab in the "Get Info" dialog in iTunes.
 */
+beatsPerMinute: number,

/**
 * The user's place in the media item the most recent time it was played.
 */
+bookmarkTime: string,

/**
 * Textual information about the media item, corresponding to the "Comments"
 * field in in the Info tab in the Get Info dialog in iTunes.
 */
+comments: string,

/**
 * Composer of this item.
 */
+composer: string,

/**
 * Date when the item was added to the music library.
 */
+dateAdded: Date,

/**
 * Total number of discs for the album containing this item.
 */
+discCount: number,

/**
 * Disc number for this item in the album.
 */
+discNumber: number,

/**
 * Genre of this item.
 */
+genre: string,

/**
 * The persistent identifier for a genre.
 */
+genrePersistentID: number,

/**
 * True if the item represents a protected asset.
 */
+hasProtectedAsset: boolean,

/**
 * True if the media item is an iCloud item.
 */
+isCloudItem: boolean,

/**
 * True if this item is part of a compilation album.
 */
+isCompilation: boolean,

/**
 * True if this item is marked as "Explicit".
 */
+isExplicit: boolean,

/**
 * The most recent calendar date on which the user played the media item.
 */
+lastPlayedDate: Date,

/**
 * Lyrics for this item.
 */
+lyrics: string,

/**
 * The type of the media.
 */
+mediaType: number,

/**
 * The key for the persistent identifier for the media item.
 */
+persistentID: string,

/**
 * Number of times the item has been played.
 */
+playCount: number,

/**
 * Length (in seconds) of this item.
 */
+playbackDuration: number,

/**
 * Used to enqueue store tracks by their ID.
 */
+playbackStoreID: number,

/**
 * Title of a podcast item.
 */
+podcastTitle: string,

/**
 * The persistent identifier for an audio podcast.
 */
+podcastPersistentID: number,

/**
 * Rating for this item.
 */
+rating: number,

/**
 * Date when this this item was released.
 */
+releaseDate: Date,

/**
 * Number of times this item has been skipped.
 */
+skipCount: number,

/**
 * Title of this item.
 */
+title: string,

/**
 * Corresponds to the "Grouping" field in the Info tab in the "Get Info"
 * dialog in iTunes.
 */
+userGrouping: string,

/**
 * Gets the value of the <Titanium.Media.Item.albumArtist> property.
 */
getAlbumArtist(): string,

/**
 * Gets the value of the <Titanium.Media.Item.albumArtistPersistentID> property.
 */
getAlbumArtistPersistentID(): number,

/**
 * Gets the value of the <Titanium.Media.Item.albumPersistentID> property.
 */
getAlbumPersistentID(): number,

/**
 * Gets the value of the <Titanium.Media.Item.albumTitle> property.
 */
getAlbumTitle(): string,

/**
 * Gets the value of the <Titanium.Media.Item.albumTrackCount> property.
 */
getAlbumTrackCount(): number,

/**
 * Gets the value of the <Titanium.Media.Item.albumTrackNumber> property.
 */
getAlbumTrackNumber(): number,

/**
 * Gets the value of the <Titanium.Media.Item.artist> property.
 */
getArtist(): string,

/**
 * Gets the value of the <Titanium.Media.Item.artwork> property.
 */
getArtwork(): Titanium$Blob,

/**
 * Gets the value of the <Titanium.Media.Item.assetURL> property.
 */
getAssetURL(): string,

/**
 * Gets the value of the <Titanium.Media.Item.beatsPerMinute> property.
 */
getBeatsPerMinute(): number,

/**
 * Gets the value of the <Titanium.Media.Item.bookmarkTime> property.
 */
getBookmarkTime(): string,

/**
 * Gets the value of the <Titanium.Media.Item.comments> property.
 */
getComments(): string,

/**
 * Gets the value of the <Titanium.Media.Item.composer> property.
 */
getComposer(): string,

/**
 * Gets the value of the <Titanium.Media.Item.dateAdded> property.
 */
getDateAdded(): Date,

/**
 * Gets the value of the <Titanium.Media.Item.discCount> property.
 */
getDiscCount(): number,

/**
 * Gets the value of the <Titanium.Media.Item.discNumber> property.
 */
getDiscNumber(): number,

/**
 * Gets the value of the <Titanium.Media.Item.genre> property.
 */
getGenre(): string,

/**
 * Gets the value of the <Titanium.Media.Item.genrePersistentID> property.
 */
getGenrePersistentID(): number,

/**
 * Gets the value of the <Titanium.Media.Item.hasProtectedAsset> property.
 */
getHasProtectedAsset(): boolean,

/**
 * Gets the value of the <Titanium.Media.Item.isCloudItem> property.
 */
getIsCloudItem(): boolean,

/**
 * Gets the value of the <Titanium.Media.Item.isCompilation> property.
 */
getIsCompilation(): boolean,

/**
 * Gets the value of the <Titanium.Media.Item.isExplicit> property.
 */
getIsExplicit(): boolean,

/**
 * Gets the value of the <Titanium.Media.Item.lastPlayedDate> property.
 */
getLastPlayedDate(): Date,

/**
 * Gets the value of the <Titanium.Media.Item.lyrics> property.
 */
getLyrics(): string,

/**
 * Gets the value of the <Titanium.Media.Item.mediaType> property.
 */
getMediaType(): number,

/**
 * Gets the value of the <Titanium.Media.Item.persistentID> property.
 */
getPersistentID(): string,

/**
 * Gets the value of the <Titanium.Media.Item.playCount> property.
 */
getPlayCount(): number,

/**
 * Gets the value of the <Titanium.Media.Item.playbackDuration> property.
 */
getPlaybackDuration(): number,

/**
 * Gets the value of the <Titanium.Media.Item.playbackStoreID> property.
 */
getPlaybackStoreID(): number,

/**
 * Gets the value of the <Titanium.Media.Item.podcastTitle> property.
 */
getPodcastTitle(): string,

/**
 * Gets the value of the <Titanium.Media.Item.podcastPersistentID> property.
 */
getPodcastPersistentID(): number,

/**
 * Gets the value of the <Titanium.Media.Item.rating> property.
 */
getRating(): number,

/**
 * Gets the value of the <Titanium.Media.Item.releaseDate> property.
 */
getReleaseDate(): Date,

/**
 * Gets the value of the <Titanium.Media.Item.skipCount> property.
 */
getSkipCount(): number,

/**
 * Gets the value of the <Titanium.Media.Item.title> property.
 */
getTitle(): string,

/**
 * Gets the value of the <Titanium.Media.Item.userGrouping> property.
 */
getUserGrouping(): string
} & Titanium$Proxy



/**
 * This object represents a music controller.
 */
declare type Titanium$Media$MusicPlayer = {

/**
 * Current point in song playback, in seconds.
 */
currentPlaybackTime: number,

/**
 * An `Item` object representing the currently playing media item.
 */
+nowPlaying: Titanium$Media$Item,

/**
 * Playback state.
 */
+playbackState: number,

/**
 * Repeat setting.
 */
repeatMode: number,

/**
 * Shuffle setting.
 */
shuffleMode: number,

/**
 * Pauses playback of the current media item.
 */
pause(): void,

/**
 * Begins playback of the current media item.
 */
play(): void,

/**
 * Begins seeking backward in the currently playing media.
 */
seekBackward(): void,

/**
 * Begins seeking forward in the currently playing media item.
 */
seekForward(): void,

/**
 * Sets the media queue.
 */
setQueue(queue: Titanium$Media$Item): void,

/**
 * Sets the media queue.
 */
setQueue(queue: $ReadOnlyArray<Titanium$Media$Item>): void,

/**
 * Sets the media queue.
 */
setQueue(queue: string): void,

/**
 * Skips to the beginning of the currently playing media item.
 */
skipToBeginning(): void,

/**
 * Skips to the next media item in the queue.
 */
skipToNext(): void,

/**
 * Skips to the previous media item in the queue.
 */
skipToPrevious(): void,

/**
 * Stops playback of the current media queue.
 */
stop(): void,

/**
 * Ends a seek operation and returns to the previous playback state.
 * See also: [seekForward](Titanium.Media.MusicPlayer.seekForward) and
 * [seekBackward](Titanium.Media.MusicPlayer.seekBackward).
 */
stopSeeking(): void,

/**
 * Gets the value of the <Titanium.Media.MusicPlayer.currentPlaybackTime> property.
 */
getCurrentPlaybackTime(): number,

/**
 * Sets the value of the <Titanium.Media.MusicPlayer.currentPlaybackTime> property.
 */
setCurrentPlaybackTime(currentPlaybackTime: number): void,

/**
 * Gets the value of the <Titanium.Media.MusicPlayer.nowPlaying> property.
 */
getNowPlaying(): Titanium$Media$Item,

/**
 * Gets the value of the <Titanium.Media.MusicPlayer.playbackState> property.
 */
getPlaybackState(): number,

/**
 * Gets the value of the <Titanium.Media.MusicPlayer.repeatMode> property.
 */
getRepeatMode(): number,

/**
 * Sets the value of the <Titanium.Media.MusicPlayer.repeatMode> property.
 */
setRepeatMode(repeatMode: number): void,

/**
 * Gets the value of the <Titanium.Media.MusicPlayer.shuffleMode> property.
 */
getShuffleMode(): number,

/**
 * Sets the value of the <Titanium.Media.MusicPlayer.shuffleMode> property.
 */
setShuffleMode(shuffleMode: number): void
} & Titanium$Proxy



/**
 * An object for playing basic audio resources.
 */
declare type Titanium$Media$Sound = {

/**
 * Audio data is being buffered from the network.
 */
+STATE_BUFFERING: number,

/**
 * Audio playback is being initialized.
 */
+STATE_INITIALIZED: number,

/**
 * Playback is paused.
 */
+STATE_PAUSED: number,

/**
 * Audio playback is active.
 */
+STATE_PLAYING: number,

/**
 * Audio playback is starting.
 */
+STATE_STARTING: number,

/**
 * Audio playback is stopped.
 */
+STATE_STOPPED: number,

/**
 * Audio playback is stopping.
 */
+STATE_STOPPING: number,

/**
 * Player is waiting for audio data from the network.
 */
+STATE_WAITING_FOR_DATA: number,

/**
 * Player is waiting for audio data to fill the queue.
 */
+STATE_WAITING_FOR_QUEUE: number,

/**
 * Used to identify the volume of audio streams for alarms.
 */
+AUDIO_TYPE_ALARM: number,

/**
 * Used to identify the volume of audio streams for DTMF tones or beeps.
 */
+AUDIO_TYPE_SIGNALLING: number,

/**
 * Used to identify the volume of audio streams for media playback.
 */
+AUDIO_TYPE_MEDIA: number,

/**
 * Used to identify the volume of audio streams for notifications.
 */
+AUDIO_TYPE_NOTIFICATION: number,

/**
 * Used to identify the volume of audio streams for the phone ring.
 */
+AUDIO_TYPE_RING: number,

/**
 * Used to identify the volume of audio streams for voice calls.
 */
+AUDIO_TYPE_VOICE: number,

/**
 * Determines whether the audio should continue playing even when its activity is paused.
 */
allowBackground: boolean,

/**
 * Changes the audio-stream-type.
 */
audioType: number,

/**
 * Duration of the audio resource.
 */
+duration: number,

/**
 * Determines whether the audio should loop upon completion.
 */
looping: boolean,

/**
 * Indicates if the audio is paused.
 */
paused: boolean,

/**
 * Indicates if the audio is playing.
 */
+playing: boolean,

/**
 * Current playback position of the audio.
 */
time: number,

/**
 * URL identifying the audio resource.
 */
url: string,

/**
 * Volume of the audio from 0.0 (muted) to 1.0 (loudest).
 */
volume: number,

/**
 * Returns the value of the [looping](Titanium.Media.Sound.looping) property.
 */
isLooping(): boolean,

/**
 * Returns the value of the [paused](Titanium.Media.Sound.paused) property.
 */
isPaused(): boolean,

/**
 * Returns the value of the [playing](Titanium.Media.Sound.playing) property.
 */
isPlaying(): boolean,

/**
 * Pauses the audio.
 */
pause(): void,

/**
 * Starting playing the sound, or resume playing a paused sound.
 */
play(): void,

/**
 * Releases all internal resources.
 */
release(): void,

/**
 * Resets the audio playback position to the beginning.
 */
reset(): void,

/**
 * Sets the value of the [looping](Titanium.Media.Sound.looping) property.
 */
setLooping(looping: boolean): void,

/**
 * Sets the value of the [paused](Titanium.Media.Sound.paused) property.
 */
setPaused(paused: boolean): void,

/**
 * Stops playing the audio and resets the playback position to the beginning of the clip.
 */
stop(): void,

/**
 * Gets the value of the <Titanium.Media.Sound.audioType> property.
 */
getAudioType(): number,

/**
 * Sets the value of the <Titanium.Media.Sound.audioType> property.
 */
setAudioType(audioType: number): void,

/**
 * Gets the value of the <Titanium.Media.Sound.duration> property.
 */
getDuration(): number,

/**
 * Gets the value of the <Titanium.Media.Sound.time> property.
 */
getTime(): number,

/**
 * Sets the value of the <Titanium.Media.Sound.time> property.
 */
setTime(time: number): void,

/**
 * Gets the value of the <Titanium.Media.Sound.url> property.
 */
getUrl(): string,

/**
 * Sets the value of the <Titanium.Media.Sound.url> property.
 */
setUrl(url: string): void,

/**
 * Gets the value of the <Titanium.Media.Sound.volume> property.
 */
getVolume(): number,

/**
 * Sets the value of the <Titanium.Media.Sound.volume> property.
 */
setVolume(volume: number): void
} & Titanium$Proxy



/**
 * An object for playing system sounds.
 */
declare type Titanium$Media$SystemAlert = {

/**
 * URL identifying the audio resource.
 */
url: string,

/**
 * Start playing the system alert.
 */
play(): void,

/**
 * Gets the value of the <Titanium.Media.SystemAlert.url> property.
 */
getUrl(): string,

/**
 * Sets the value of the <Titanium.Media.SystemAlert.url> property.
 */
setUrl(url: string): void
} & Titanium$Proxy



/**
 * A native control for playing videos.
 */
declare type Titanium$Media$VideoPlayer = {

/**
 * Whether or not the current movie can be played on a remote device.
 */
allowsAirPlay: boolean,

/**
 * Indicates if a movie should automatically start playback.
 */
autoplay: boolean,

/**
 * Sets the background view for customization which is always displayed behind movie content.
 */
backgroundView: Titanium$UI$View,

/**
 * URL of the media to play.
 */
contentURL: string,

/**
 * Current playback time of the current movie in milliseconds.
 */
currentPlaybackTime: number,

/**
 * The duration of the current movie in milliseconds, or 0.0 if not known.
 */
duration: number,

/**
 * The end time of movie playback, in milliseconds.
 */
endPlaybackTime: number,

/**
 * Determines if the movie is presented in the entire screen (obscuring all other application content).
 */
fullscreen: boolean,

/**
 * The start time of movie playback, in milliseconds.
 */
initialPlaybackTime: number,

/**
 * Returns the network load state of the movie player.
 */
+loadState: number,

/**
 * Media object to play, as either a `File`,  a `Blob`, or a URL.
 */
media: Titanium$Blob | Titanium$Filesystem$File | string,

/**
 * The style of the playback controls.
 */
mediaControlStyle: number,

/**
 * The types of media in the movie, or <Titanium.Media.VIDEO_MEDIA_TYPE_NONE> if not known.
 */
mediaTypes: number,

/**
 * Returns the status of the movie player.
 */
+moviePlayerStatus: number,

/**
 * Returns the natural size of the movie.
 */
naturalSize: MovieSize,

/**
 * Use the overlay view to add additional custom views between the video content and the controls.
 */
overlayView: Titanium$UI$View,

/**
 * Whether or not the receiver allows Picture in Picture playback.
 */
pictureInPictureEnabled: boolean,

/**
 * Currently playable duration of the movie, in milliseconds, for progressively
 * downloaded network content, or 0.0 if not known.
 */
+playableDuration: number,

/**
 * Current playback state of the video player.
 */
+playbackState: number,

/**
 * Boolean to indicate if the player has started playing.
 */
+playing: boolean,

/**
 * Determines how the movie player repeats when reaching the end of playback.
 */
repeatMode: number,

/**
 * Determines how the content scales to fit the view.
 */
scalingMode: number,

/**
 * Whether or not the receiver shows playback controls. Default is true.
 */
showsControls: boolean,

/**
 * The playback type of the movie.
 */
sourceType: number,

/**
 * URL of the media to play.
 */
url: string | string[],

/**
 * Volume of the audio portion of the video.
 */
volume: number,

/**
 * Cancels all pending asynchronous thumbnail requests.
 */
cancelAllThumbnailImageRequests(): void,

/**
 * Pauses playing the video.
 */
pause(): void,

/**
 * Starts playing the video.
 */
play(): void,

/**
 * Releases the internal video resources immediately.
 */
release(): void,

/**
 * Asynchronously request thumbnail images for one or more points in time in the video.
 */
requestThumbnailImagesAtTimes(
times: $ReadOnlyArray<number>,
option: number,
callback: (param0: ThumbnailResponse) => any): void,

/**
 * Stops playing the video.
 */
stop(): void,

/**
 * Returns a thumbnail image for the video at the specified time.
 */
thumbnailImageAtTime(time: number, option: number): Titanium$Blob,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.allowsAirPlay> property.
 */
getAllowsAirPlay(): boolean,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.allowsAirPlay> property.
 */
setAllowsAirPlay(allowsAirPlay: boolean): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.autoplay> property.
 */
getAutoplay(): boolean,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.autoplay> property.
 */
setAutoplay(autoplay: boolean): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.backgroundView> property.
 */
getBackgroundView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.backgroundView> property.
 */
setBackgroundView(backgroundView: any): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.contentURL> property.
 */
getContentURL(): string,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.contentURL> property.
 */
setContentURL(contentURL: string): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.currentPlaybackTime> property.
 */
getCurrentPlaybackTime(): number,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.currentPlaybackTime> property.
 */
setCurrentPlaybackTime(currentPlaybackTime: number): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.duration> property.
 */
getDuration(): number,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.duration> property.
 */
setDuration(duration: number): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.endPlaybackTime> property.
 */
getEndPlaybackTime(): number,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.endPlaybackTime> property.
 */
setEndPlaybackTime(endPlaybackTime: number): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.fullscreen> property.
 */
getFullscreen(): boolean,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.fullscreen> property.
 */
setFullscreen(fullscreen: boolean): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.initialPlaybackTime> property.
 */
getInitialPlaybackTime(): number,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.initialPlaybackTime> property.
 */
setInitialPlaybackTime(initialPlaybackTime: number): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.loadState> property.
 */
getLoadState(): number,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.media> property.
 */
setMedia(media: Titanium$Blob): void,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.media> property.
 */
setMedia(media: Titanium$Filesystem$File): void,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.media> property.
 */
setMedia(media: string): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.mediaControlStyle> property.
 */
getMediaControlStyle(): number,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.mediaControlStyle> property.
 */
setMediaControlStyle(mediaControlStyle: number): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.mediaTypes> property.
 */
getMediaTypes(): number,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.mediaTypes> property.
 */
setMediaTypes(mediaTypes: number): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.moviePlayerStatus> property.
 */
getMoviePlayerStatus(): number,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.naturalSize> property.
 */
getNaturalSize(): MovieSize,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.naturalSize> property.
 */
setNaturalSize(naturalSize: MovieSize): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.overlayView> property.
 */
getOverlayView(): Titanium$UI$View,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.overlayView> property.
 */
setOverlayView(overlayView: any): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.pictureInPictureEnabled> property.
 */
getPictureInPictureEnabled(): boolean,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.pictureInPictureEnabled> property.
 */
setPictureInPictureEnabled(pictureInPictureEnabled: boolean): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.playableDuration> property.
 */
getPlayableDuration(): number,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.playbackState> property.
 */
getPlaybackState(): number,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.playing> property.
 */
getPlaying(): boolean,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.repeatMode> property.
 */
getRepeatMode(): number,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.repeatMode> property.
 */
setRepeatMode(repeatMode: number): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.scalingMode> property.
 */
getScalingMode(): number,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.scalingMode> property.
 */
setScalingMode(scalingMode: number): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.showsControls> property.
 */
getShowsControls(): boolean,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.showsControls> property.
 */
setShowsControls(showsControls: boolean): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.sourceType> property.
 */
getSourceType(): number,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.sourceType> property.
 */
setSourceType(sourceType: number): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.url> property.
 */
getUrl(): string | string[],

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.url> property.
 */
setUrl(url: string): void,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.url> property.
 */
setUrl(url: $ReadOnlyArray<string>): void,

/**
 * Gets the value of the <Titanium.Media.VideoPlayer.volume> property.
 */
getVolume(): number,

/**
 * Sets the value of the <Titanium.Media.VideoPlayer.volume> property.
 */
setVolume(volume: number): void
} & Titanium$UI$View



      declare var npm$namespace$Titanium$Media$Android: {
        addEventListener: typeof Titanium$Media$Android$addEventListener,
removeEventListener: typeof Titanium$Media$Android$removeEventListener,
fireEvent: typeof Titanium$Media$Android$fireEvent,
applyProperties: typeof Titanium$Media$Android$applyProperties,
scanMediaFiles: typeof Titanium$Media$Android$scanMediaFiles,
setSystemWallpaper: typeof Titanium$Media$Android$setSystemWallpaper,
getBubbleParent: typeof Titanium$Media$Android$getBubbleParent,
setBubbleParent: typeof Titanium$Media$Android$setBubbleParent,
getApiName: typeof Titanium$Media$Android$getApiName,
getLifecycleContainer: typeof Titanium$Media$Android$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Media$Android$setLifecycleContainer,
        bubbleParent: typeof Titanium$Media$Android$bubbleParent,
apiName: typeof Titanium$Media$Android$apiName,
lifecycleContainer: typeof Titanium$Media$Android$lifecycleContainer,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Media$Android$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Media$Android$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Media$Android$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Media$Android$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Media$Android$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Media$Android$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Media$Android$applyProperties(props: any): void



/**
 * Scans newly created or downloaded media files to make them available to other
 * Android media providers, such as the Gallery.
 */
declare function Titanium$Media$Android$scanMediaFiles(
paths: $ReadOnlyArray<string>,
mimeTypes: $ReadOnlyArray<string>,
callback: (param0: MediaScannerResponse) => any): void



/**
 * Set the system homescreen wallpaper.
 */
declare function Titanium$Media$Android$setSystemWallpaper(image: Titanium$Blob, scale: boolean): void



/**
 * Gets the value of the <Titanium.Media.Android.bubbleParent> property.
 */
declare function Titanium$Media$Android$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Media.Android.bubbleParent> property.
 */
declare function Titanium$Media$Android$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Media.Android.apiName> property.
 */
declare function Titanium$Media$Android$getApiName(): string



/**
 * Gets the value of the <Titanium.Media.Android.lifecycleContainer> property.
 */
declare function Titanium$Media$Android$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Media.Android.lifecycleContainer> property.
 */
declare function Titanium$Media$Android$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Media.Android.lifecycleContainer> property.
 */
declare function Titanium$Media$Android$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



      declare var npm$namespace$Titanium$Network: {
        addEventListener: typeof Titanium$Network$addEventListener,
removeEventListener: typeof Titanium$Network$removeEventListener,
fireEvent: typeof Titanium$Network$fireEvent,
applyProperties: typeof Titanium$Network$applyProperties,
addConnectivityListener: typeof Titanium$Network$addConnectivityListener,
addHTTPCookie: typeof Titanium$Network$addHTTPCookie,
addSystemCookie: typeof Titanium$Network$addSystemCookie,
createBonjourBrowser: typeof Titanium$Network$createBonjourBrowser,
createBonjourService: typeof Titanium$Network$createBonjourService,
createTCPSocket: typeof Titanium$Network$createTCPSocket,
decodeURIComponent: typeof Titanium$Network$decodeURIComponent,
encodeURIComponent: typeof Titanium$Network$encodeURIComponent,
getHTTPCookies: typeof Titanium$Network$getHTTPCookies,
getHTTPCookiesForDomain: typeof Titanium$Network$getHTTPCookiesForDomain,
getSystemCookies: typeof Titanium$Network$getSystemCookies,
removeAllHTTPCookies: typeof Titanium$Network$removeAllHTTPCookies,
removeAllSystemCookies: typeof Titanium$Network$removeAllSystemCookies,
removeHTTPCookie: typeof Titanium$Network$removeHTTPCookie,
removeHTTPCookiesForDomain: typeof Titanium$Network$removeHTTPCookiesForDomain,
removeSystemCookie: typeof Titanium$Network$removeSystemCookie,
registerForPushNotifications: typeof Titanium$Network$registerForPushNotifications,
unregisterForPushNotifications: typeof Titanium$Network$unregisterForPushNotifications,
createCookie: typeof Titanium$Network$createCookie,
createHTTPClient: typeof Titanium$Network$createHTTPClient,
getBubbleParent: typeof Titanium$Network$getBubbleParent,
setBubbleParent: typeof Titanium$Network$setBubbleParent,
getApiName: typeof Titanium$Network$getApiName,
getLifecycleContainer: typeof Titanium$Network$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Network$setLifecycleContainer,
getAllHTTPCookies: typeof Titanium$Network$getAllHTTPCookies,
getNetworkType: typeof Titanium$Network$getNetworkType,
getNetworkTypeName: typeof Titanium$Network$getNetworkTypeName,
getOnline: typeof Titanium$Network$getOnline,
getRemoteDeviceUUID: typeof Titanium$Network$getRemoteDeviceUUID,
getRemoteNotificationTypes: typeof Titanium$Network$getRemoteNotificationTypes,
getRemoteNotificationsEnabled: typeof Titanium$Network$getRemoteNotificationsEnabled,
        bubbleParent: typeof Titanium$Network$bubbleParent,
apiName: typeof Titanium$Network$apiName,
lifecycleContainer: typeof Titanium$Network$lifecycleContainer,
INADDR_ANY: typeof Titanium$Network$INADDR_ANY,
NETWORK_LAN: typeof Titanium$Network$NETWORK_LAN,
NETWORK_MOBILE: typeof Titanium$Network$NETWORK_MOBILE,
NETWORK_NONE: typeof Titanium$Network$NETWORK_NONE,
NETWORK_UNKNOWN: typeof Titanium$Network$NETWORK_UNKNOWN,
NETWORK_WIFI: typeof Titanium$Network$NETWORK_WIFI,
NOTIFICATION_TYPE_ALERT: typeof Titanium$Network$NOTIFICATION_TYPE_ALERT,
NOTIFICATION_TYPE_BADGE: typeof Titanium$Network$NOTIFICATION_TYPE_BADGE,
NOTIFICATION_TYPE_SOUND: typeof Titanium$Network$NOTIFICATION_TYPE_SOUND,
NOTIFICATION_TYPE_NEWSSTAND: typeof Titanium$Network$NOTIFICATION_TYPE_NEWSSTAND,
READ_MODE: typeof Titanium$Network$READ_MODE,
READ_WRITE_MODE: typeof Titanium$Network$READ_WRITE_MODE,
SOCKET_CLOSED: typeof Titanium$Network$SOCKET_CLOSED,
SOCKET_CONNECTED: typeof Titanium$Network$SOCKET_CONNECTED,
SOCKET_ERROR: typeof Titanium$Network$SOCKET_ERROR,
SOCKET_INITIALIZED: typeof Titanium$Network$SOCKET_INITIALIZED,
SOCKET_LISTENING: typeof Titanium$Network$SOCKET_LISTENING,
WRITE_MODE: typeof Titanium$Network$WRITE_MODE,
TLS_VERSION_1_0: typeof Titanium$Network$TLS_VERSION_1_0,
TLS_VERSION_1_1: typeof Titanium$Network$TLS_VERSION_1_1,
TLS_VERSION_1_2: typeof Titanium$Network$TLS_VERSION_1_2,
PROGRESS_UNKNOWN: typeof Titanium$Network$PROGRESS_UNKNOWN,
allHTTPCookies: typeof Titanium$Network$allHTTPCookies,
networkType: typeof Titanium$Network$networkType,
networkTypeName: typeof Titanium$Network$networkTypeName,
online: typeof Titanium$Network$online,
remoteDeviceUUID: typeof Titanium$Network$remoteDeviceUUID,
remoteNotificationTypes: typeof Titanium$Network$remoteNotificationTypes,
remoteNotificationsEnabled: typeof Titanium$Network$remoteNotificationsEnabled,
        
        
        Socket: typeof npm$namespace$Titanium$Network$Socket,
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Network$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Network$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Network$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Special hostname value for listening sockets, representing all
 * locally available network interfaces.
 */
declare var Titanium$Network$INADDR_ANY: string;


/**
 * A [networkType](Titanium.Network.networkType) value indicating that the device is
 * communicating over a local-area network.
 */
declare var Titanium$Network$NETWORK_LAN: number;


/**
 * A [networkType](Titanium.Network.networkType) value indicating that the device is
 * communicating over a mobile network.
 */
declare var Titanium$Network$NETWORK_MOBILE: number;


/**
 * A [networkType](Titanium.Network.networkType) value indicating that no
 * network is available.
 */
declare var Titanium$Network$NETWORK_NONE: number;


/**
 * A [networkType](Titanium.Network.networkType) value indicating that the
 * current network type is unknown.
 */
declare var Titanium$Network$NETWORK_UNKNOWN: number;


/**
 * A [networkType](Titanium.Network.networkType) value indicating that the
 * device is communicating over a WiFi network.
 */
declare var Titanium$Network$NETWORK_WIFI: number;


/**
 * Constant value for an Alert style push notification.
 */
declare var Titanium$Network$NOTIFICATION_TYPE_ALERT: number;


/**
 * Constant value for a Badge style push notification.
 */
declare var Titanium$Network$NOTIFICATION_TYPE_BADGE: number;


/**
 * Constant value for a Sound style push notification.
 */
declare var Titanium$Network$NOTIFICATION_TYPE_SOUND: number;


/**
 * Constant value for a Newsstand style push notification. Only available on iOS5 and later
 */
declare var Titanium$Network$NOTIFICATION_TYPE_NEWSSTAND: number;


/**
 * Constant value specifying read-only mode for sockets.
 */
declare var Titanium$Network$READ_MODE: number;


/**
 * Constant value specifying read-write mode for sockets.
 */
declare var Titanium$Network$READ_WRITE_MODE: number;


/**
 * Constant value representing a socket in the CLOSED state.
 */
declare var Titanium$Network$SOCKET_CLOSED: number;


/**
 * Constant value representing a socket in the CONNECTED state.
 */
declare var Titanium$Network$SOCKET_CONNECTED: number;


/**
 * Constant value representing a socket in the ERROR state.
 */
declare var Titanium$Network$SOCKET_ERROR: number;


/**
 * Constant value representing a socket in the INITIALIZED state.
 */
declare var Titanium$Network$SOCKET_INITIALIZED: number;


/**
 * Constant value representing a socket in the LISTENING state.
 */
declare var Titanium$Network$SOCKET_LISTENING: number;


/**
 * Constant value specifying write-only mode for sockets.
 */
declare var Titanium$Network$WRITE_MODE: number;


/**
 * Constant value specifying TLS version 1.0 for SSL.
 */
declare var Titanium$Network$TLS_VERSION_1_0: number;


/**
 * Constant value specifying TLS version 1.1 for SSL.
 */
declare var Titanium$Network$TLS_VERSION_1_1: number;


/**
 * Constant value specifying TLS version 1.2 for SSL.
 */
declare var Titanium$Network$TLS_VERSION_1_2: number;


/**
 * Constant value specifying that the progress of a download can not be calculated.
 */
declare var Titanium$Network$PROGRESS_UNKNOWN: number;


/**
 * A list of all cookies in the cookie storage.
 */
declare var Titanium$Network$allHTTPCookies: Titanium$Network$Cookie[];


/**
 * Network type value as a constant.
 */
declare var Titanium$Network$networkType: number;


/**
 * Network type as a String. Returns one of `NONE`, `WIFI`, `LAN`, `MOBILE`, or `UNKNOWN`.
 */
declare var Titanium$Network$networkTypeName: string;


/**
 * Boolean value indicating if the device is connected to the network.
 */
declare var Titanium$Network$online: boolean;


/**
 * Remote device UUID if the device is registered with the Apple Push Notification
 * Service, or null if it is not registered.
 */
declare var Titanium$Network$remoteDeviceUUID: string;


/**
 * Array of push notification type constants enabled for the application.
 */
declare var Titanium$Network$remoteNotificationTypes: number[];


/**
 * Indicates whether push  notifications have been enabled using
 * [registerForPushNotifications](Titanium.Network.registerForPushNotifications).
 */
declare var Titanium$Network$remoteNotificationsEnabled: boolean;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Network$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Network$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Network$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Network$applyProperties(props: any): void



/**
 * Legacy method to add a connectivity listener to listen for network changes.
 */
declare function Titanium$Network$addConnectivityListener(callback: (param0: any) => any): void



/**
 * Adds a cookie to the HTTP client cookie store.
 */
declare function Titanium$Network$addHTTPCookie(cookie: Titanium$Network$Cookie): void



/**
 * Adds a cookie to the system cookie store.
 */
declare function Titanium$Network$addSystemCookie(cookie: Titanium$Network$Cookie): void



/**
 * Creates and returns a `BonjourBrowser` object.
 */
declare function Titanium$Network$createBonjourBrowser(
serviceType: string,
domain: string,
parameters?: any): Titanium$Network$BonjourBrowser



/**
 * Creates and returns a `BonjourService` object.
 */
declare function Titanium$Network$createBonjourService(
name: string,
type: string,
domain: string,
parameters?: any): Titanium$Network$BonjourService



/**
 * Legacy method to create and return an instance of <Titanium.Network.TCPSocket>.
 */
declare function Titanium$Network$createTCPSocket(
hostName: string,
port: number,
mode: number,
parameters: any): Titanium$Network$TCPSocket



/**
 * Returns a decoded version of a URI encoded value.
 */
declare function Titanium$Network$decodeURIComponent(value: string): string



/**
 * Returns a URI encoded version of the specified URI component.
 */
declare function Titanium$Network$encodeURIComponent(value: string): string



/**
 * Gets all the cookies with the domain, path and name matched with the given values from the HTTP client cookie store.
 */
declare function Titanium$Network$getHTTPCookies(domain: string, path: string, name: string): Titanium$Network$Cookie[]



/**
 * Gets all the cookies with the domain matched with the given values from the HTTP client cookie store.
 */
declare function Titanium$Network$getHTTPCookiesForDomain(domain: string): Titanium$Network$Cookie[]



/**
 * Gets all the cookies with the domain, path and name matched with the given values from the system cookie store.
 */
declare function Titanium$Network$getSystemCookies(domain: string, path: string, name: string): Titanium$Network$Cookie[]



/**
 * Removes all the cookies from the HTTP client cookie store.
 */
declare function Titanium$Network$removeAllHTTPCookies(): void



/**
 * Removes all the cookie from the system client cookie store.
 */
declare function Titanium$Network$removeAllSystemCookies(): void



/**
 * Removes the cookie with the domain, path and name exactly the same as the given values from the HTTP client cookie store.
 */
declare function Titanium$Network$removeHTTPCookie(domain: string, path: string, name: string): void



/**
 * Removes the cookies with the domain matched with the given values from the HTTP client cookie store.
 */
declare function Titanium$Network$removeHTTPCookiesForDomain(domain: string): void



/**
 * Removes the cookie with the domain, path and name exactly the same as the given values from the system cookie store.
 */
declare function Titanium$Network$removeSystemCookie(domain: string, path: string, name: string): void



/**
 * Registers for push notifications with the Apple Push Notification Service.
 */
declare function Titanium$Network$registerForPushNotifications(config: PushNotificationConfig): void



/**
 * Unregisters the application for push notifications.
 */
declare function Titanium$Network$unregisterForPushNotifications(): void



/**
 * Creates and returns an instance of <Titanium.Network.Cookie>.
 */
declare function Titanium$Network$createCookie(parameters?: any): Titanium$Network$Cookie



/**
 * Creates and returns an instance of <Titanium.Network.HTTPClient>.
 */
declare function Titanium$Network$createHTTPClient(parameters?: any): Titanium$Network$HTTPClient



/**
 * Gets the value of the <Titanium.Network.bubbleParent> property.
 */
declare function Titanium$Network$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Network.bubbleParent> property.
 */
declare function Titanium$Network$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Network.apiName> property.
 */
declare function Titanium$Network$getApiName(): string



/**
 * Gets the value of the <Titanium.Network.lifecycleContainer> property.
 */
declare function Titanium$Network$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Network.lifecycleContainer> property.
 */
declare function Titanium$Network$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Network.lifecycleContainer> property.
 */
declare function Titanium$Network$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.Network.allHTTPCookies> property.
 */
declare function Titanium$Network$getAllHTTPCookies(): Titanium$Network$Cookie[]



/**
 * Gets the value of the <Titanium.Network.networkType> property.
 */
declare function Titanium$Network$getNetworkType(): number



/**
 * Gets the value of the <Titanium.Network.networkTypeName> property.
 */
declare function Titanium$Network$getNetworkTypeName(): string



/**
 * Gets the value of the <Titanium.Network.online> property.
 */
declare function Titanium$Network$getOnline(): boolean



/**
 * Gets the value of the <Titanium.Network.remoteDeviceUUID> property.
 */
declare function Titanium$Network$getRemoteDeviceUUID(): string



/**
 * Gets the value of the <Titanium.Network.remoteNotificationTypes> property.
 */
declare function Titanium$Network$getRemoteNotificationTypes(): number[]



/**
 * Gets the value of the <Titanium.Network.remoteNotificationsEnabled> property.
 */
declare function Titanium$Network$getRemoteNotificationsEnabled(): boolean



/**
 * A browser for the discovery and retrieval of Bonjour services available on the network.
 */
declare type Titanium$Network$BonjourBrowser = {

/**
 * The domain the browser is searching in
 */
domain: string,

/**
 * Whether or not the browser is currently searching
 */
isSearching: boolean,

/**
 * The type of the service the browser searches for
 */
serviceType: string,

/**
 * Conduct a search for Bonjour services matching the type and domain specified during creation
 */
search(): void,

/**
 * Halt an ongoing search
 */
stopSearch(): void,

/**
 * Gets the value of the <Titanium.Network.BonjourBrowser.domain> property.
 */
getDomain(): string,

/**
 * Sets the value of the <Titanium.Network.BonjourBrowser.domain> property.
 */
setDomain(domain: string): void,

/**
 * Gets the value of the <Titanium.Network.BonjourBrowser.isSearching> property.
 */
getIsSearching(): boolean,

/**
 * Sets the value of the <Titanium.Network.BonjourBrowser.isSearching> property.
 */
setIsSearching(isSearching: boolean): void,

/**
 * Gets the value of the <Titanium.Network.BonjourBrowser.serviceType> property.
 */
getServiceType(): string,

/**
 * Sets the value of the <Titanium.Network.BonjourBrowser.serviceType> property.
 */
setServiceType(serviceType: string): void
} & Titanium$Proxy



/**
 * Describes a service on the network which is published by Bonjour.
 */
declare type Titanium$Network$BonjourService = {

/**
 * the domain of the service
 */
domain: string,

/**
 * whether or not the service is local to the device
 */
isLocal: boolean,

/**
 * the name of the service
 */
name: string,

/**
 * the TCPSocket object that is used to connect to the service
 */
socket: any,

/**
 * the type of the service
 */
type: string,

/**
 * Publish a Bonjour service to the network.  Only works if isLocal is TRUE
 */
publish(socket: any): void,

/**
 * Resolve a Bonjour service from the network.  Must be done before attempting to access the service's socket information, if a remote service.  You cannot resolve a locally published service.
 */
resolve(timeout: number): void,

/**
 * Halts publication of a service.
 */
stop(): void,

/**
 * Gets the value of the <Titanium.Network.BonjourService.domain> property.
 */
getDomain(): string,

/**
 * Sets the value of the <Titanium.Network.BonjourService.domain> property.
 */
setDomain(domain: string): void,

/**
 * Gets the value of the <Titanium.Network.BonjourService.isLocal> property.
 */
getIsLocal(): boolean,

/**
 * Sets the value of the <Titanium.Network.BonjourService.isLocal> property.
 */
setIsLocal(isLocal: boolean): void,

/**
 * Gets the value of the <Titanium.Network.BonjourService.name> property.
 */
getName(): string,

/**
 * Sets the value of the <Titanium.Network.BonjourService.name> property.
 */
setName(name: string): void,

/**
 * Gets the value of the <Titanium.Network.BonjourService.socket> property.
 */
getSocket(): any,

/**
 * Sets the value of the <Titanium.Network.BonjourService.socket> property.
 */
setSocket(socket: any): void,

/**
 * Gets the value of the <Titanium.Network.BonjourService.type> property.
 */
getType(): string,

/**
 * Sets the value of the <Titanium.Network.BonjourService.type> property.
 */
setType(type: string): void
} & Titanium$Proxy



/**
 * Cookie object used to manage the system cookie store and HTTP client cookie store.
 */
declare type Titanium$Network$Cookie = {

/**
 * The comment describing the purpose of this cookie
 */
comment: string,

/**
 * The domain attribute of the cookie.
 */
domain: string,

/**
 * The expiration Date of the cookie.
 */
expiryDate: string,

/**
 * Sets the Max-Age attribute of a Cookie, in delta-seconds.
 */
maxAge: number,

/**
 * The httponly attribute of the cookie.
 */
httponly: boolean,

/**
 * The name of the cookie.
 */
+name: string,

/**
 * The origual url attribute of the cookie.
 */
originalUrl: string,

/**
 * The path attribute of the cookie.
 */
path: string,

/**
 * The secure attribute of the cookie.
 */
secure: boolean,

/**
 * The value of the cookie.
 */
value: string,

/**
 * The version of the cookie specification to which this cookie conforms.
 */
version: number,

/**
 * Returns true if the cookie is valid.
 */
isValid(): boolean,

/**
 * Gets the value of the <Titanium.Network.Cookie.comment> property.
 */
getComment(): string,

/**
 * Sets the value of the <Titanium.Network.Cookie.comment> property.
 */
setComment(comment: string): void,

/**
 * Gets the value of the <Titanium.Network.Cookie.domain> property.
 */
getDomain(): string,

/**
 * Sets the value of the <Titanium.Network.Cookie.domain> property.
 */
setDomain(domain: string): void,

/**
 * Gets the value of the <Titanium.Network.Cookie.expiryDate> property.
 */
getExpiryDate(): string,

/**
 * Sets the value of the <Titanium.Network.Cookie.expiryDate> property.
 */
setExpiryDate(expiryDate: string): void,

/**
 * Gets the value of the <Titanium.Network.Cookie.maxAge> property.
 */
getMaxAge(): number,

/**
 * Sets the value of the <Titanium.Network.Cookie.maxAge> property.
 */
setMaxAge(maxAge: number): void,

/**
 * Gets the value of the <Titanium.Network.Cookie.httponly> property.
 */
getHttponly(): boolean,

/**
 * Sets the value of the <Titanium.Network.Cookie.httponly> property.
 */
setHttponly(httponly: boolean): void,

/**
 * Gets the value of the <Titanium.Network.Cookie.name> property.
 */
getName(): string,

/**
 * Gets the value of the <Titanium.Network.Cookie.originalUrl> property.
 */
getOriginalUrl(): string,

/**
 * Sets the value of the <Titanium.Network.Cookie.originalUrl> property.
 */
setOriginalUrl(originalUrl: string): void,

/**
 * Gets the value of the <Titanium.Network.Cookie.path> property.
 */
getPath(): string,

/**
 * Sets the value of the <Titanium.Network.Cookie.path> property.
 */
setPath(path: string): void,

/**
 * Gets the value of the <Titanium.Network.Cookie.secure> property.
 */
getSecure(): boolean,

/**
 * Sets the value of the <Titanium.Network.Cookie.secure> property.
 */
setSecure(secure: boolean): void,

/**
 * Gets the value of the <Titanium.Network.Cookie.value> property.
 */
getValue(): string,

/**
 * Sets the value of the <Titanium.Network.Cookie.value> property.
 */
setValue(value: string): void,

/**
 * Gets the value of the <Titanium.Network.Cookie.version> property.
 */
getVersion(): number,

/**
 * Sets the value of the <Titanium.Network.Cookie.version> property.
 */
setVersion(version: number): void
} & Titanium$Proxy



/**
 * HTTP client object that (mostly) implements the XMLHttpRequest specification.
 */
declare type Titanium$Network$HTTPClient = {

/**
 * Ready state constant indicating that the request is complete.
 */
+DONE: number,

/**
 * Ready state constant indicating that response headers have been received.
 */
+HEADERS_RECEIVED: number,

/**
 * Ready state constant indicating that response data is being received from the remote server.
 */
+LOADING: number,

/**
 * Ready state constant indicating that the connection has been opened, but the request has
 * not yet been sent.
 */
+OPENED: number,

/**
 * Ready state constant indicating that HTTPClient request has not been opened or sent.
 */
+UNSENT: number,

/**
 * All of the response headers.
 */
+allResponseHeaders: string,

/**
 * Returns all the response headers returned with the request.
 */
+responseHeaders: any,

/**
 * Determines whether automatic encoding is enabled for the specified URL.
 */
autoEncodeUrl: boolean,

/**
 * Determines whether automatic automatic handling of HTTP redirects is enabled.
 */
autoRedirect: boolean,

/**
 * Indicates whether the response was successful.
 */
+connected: boolean,

/**
 * Connection type, normally either `GET`, `POST` or `PATCH`.
 */
+connectionType: string,

/**
 * Sets the domain parameter for authentication credentials.
 */
domain: string,

/**
 * Determines whether the client should attempt to keep a persistent connection.
 */
enableKeepAlive: boolean,

/**
 * Target local file to receive data.
 */
file: string,

/**
 * Absolute URL of the request.
 */
+location: string,

/**
 * Function to be called at regular intervals as the request data is being received.
 */
ondatastream: (param0: any) => any,

/**
 * Function to be called upon a error response.
 */
onerror: (param0: FailureResponse) => any,

/**
 * Function to be called upon a successful response.
 */
onload: (param0: SuccessResponse) => any,

/**
 * Function to be called for each [readyState](Titanium.Network.HTTPClient.readyState) change.
 */
onreadystatechange: (param0: any) => any,

/**
 * Function to be called at regular intervals as the request data is being transmitted.
 */
onsendstream: (param0: any) => any,

/**
 * Sets the password parameter for authentication credentials.
 */
password: string,

/**
 * The current ready state of this HTTP request.
 */
+readyState: number,

/**
 * Response data as a `Blob` object.
 */
+responseData: Titanium$Blob,

/**
 * Response as text.
 */
+responseText: string,

/**
 * Response object as an XML DOM Document object.
 */
+responseXML: Titanium$XML$Document,

/**
 * The Security Manager for this client.
 */
securityManager: SecurityManagerProtocol,

/**
 * Response HTTP status code.
 */
+status: number,

/**
 * Human-readable status message associated with the status code.
 */
+statusText: string,

/**
 * Timeout in milliseconds when the connection should be aborted.
 */
timeout: number,

/**
 * Sets the username parameter for authentication credentials.
 */
username: string,

/**
 * Determines how SSL certification validation is performed on connection.
 */
validatesSecureCertificate: boolean,

/**
 * Sets the TLS version to use for handshakes.
 */
tlsVersion: number,

/**
 * Determines whether HTTP responses are cached.
 */
cache: boolean,

/**
 * Cancels a pending request.
 */
abort(): void,

/**
 * Registers a new AuthSchemeFactory for a given scheme.
 */
addAuthFactory(scheme: string, factory: any): void,

/**
 * Adds a custom key manager.
 */
addKeyManager(X509KeyManager: any): void,

/**
 * Adds a custom trust manager.
 */
addTrustManager(X509TrustManager: any): void,

/**
 * Clears any cookies stored for the host.
 */
clearCookies(host: string): void,

/**
 * Returns the value of the specified response header.
 */
getResponseHeader(name: string): string,

/**
 * Opens the request and prepares the connection.
 */
open(method: string, url: string, async?: boolean): void,

/**
 * Sends the request.
 */
send(data?: any): void,

/**
 * Sends the request.
 */
send(data?: string): void,

/**
 * Sends the request.
 */
send(data?: Titanium$Filesystem$File): void,

/**
 * Sends the request.
 */
send(data?: Titanium$Blob): void,

/**
 * Sets the value for the specified request header. Must be called after `open` but before `send`.
 */
setRequestHeader(name: string, value: string): void,

/**
 * Sets the request timeout.
 */
setTimeout(timeout: number): void,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.allResponseHeaders> property.
 */
getAllResponseHeaders(): string,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.responseHeaders> property.
 */
getResponseHeaders(): any,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.autoEncodeUrl> property.
 */
getAutoEncodeUrl(): boolean,

/**
 * Sets the value of the <Titanium.Network.HTTPClient.autoEncodeUrl> property.
 */
setAutoEncodeUrl(autoEncodeUrl: boolean): void,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.autoRedirect> property.
 */
getAutoRedirect(): boolean,

/**
 * Sets the value of the <Titanium.Network.HTTPClient.autoRedirect> property.
 */
setAutoRedirect(autoRedirect: boolean): void,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.connected> property.
 */
getConnected(): boolean,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.connectionType> property.
 */
getConnectionType(): string,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.domain> property.
 */
getDomain(): string,

/**
 * Sets the value of the <Titanium.Network.HTTPClient.domain> property.
 */
setDomain(domain: string): void,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.enableKeepAlive> property.
 */
getEnableKeepAlive(): boolean,

/**
 * Sets the value of the <Titanium.Network.HTTPClient.enableKeepAlive> property.
 */
setEnableKeepAlive(enableKeepAlive: boolean): void,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.file> property.
 */
getFile(): string,

/**
 * Sets the value of the <Titanium.Network.HTTPClient.file> property.
 */
setFile(file: string): void,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.location> property.
 */
getLocation(): string,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.ondatastream> property.
 */
getOndatastream(): (param0: any) => any,

/**
 * Sets the value of the <Titanium.Network.HTTPClient.ondatastream> property.
 */
setOndatastream(ondatastream: (param0: any) => any): void,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.onerror> property.
 */
getOnerror(): (param0: FailureResponse) => any,

/**
 * Sets the value of the <Titanium.Network.HTTPClient.onerror> property.
 */
setOnerror(onerror: (param0: FailureResponse) => any): void,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.onload> property.
 */
getOnload(): (param0: SuccessResponse) => any,

/**
 * Sets the value of the <Titanium.Network.HTTPClient.onload> property.
 */
setOnload(onload: (param0: SuccessResponse) => any): void,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.onreadystatechange> property.
 */
getOnreadystatechange(): (param0: any) => any,

/**
 * Sets the value of the <Titanium.Network.HTTPClient.onreadystatechange> property.
 */
setOnreadystatechange(onreadystatechange: (param0: any) => any): void,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.onsendstream> property.
 */
getOnsendstream(): (param0: any) => any,

/**
 * Sets the value of the <Titanium.Network.HTTPClient.onsendstream> property.
 */
setOnsendstream(onsendstream: (param0: any) => any): void,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.password> property.
 */
getPassword(): string,

/**
 * Sets the value of the <Titanium.Network.HTTPClient.password> property.
 */
setPassword(password: string): void,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.readyState> property.
 */
getReadyState(): number,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.responseData> property.
 */
getResponseData(): Titanium$Blob,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.responseText> property.
 */
getResponseText(): string,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.responseXML> property.
 */
getResponseXML(): Titanium$XML$Document,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.securityManager> property.
 */
getSecurityManager(): SecurityManagerProtocol,

/**
 * Sets the value of the <Titanium.Network.HTTPClient.securityManager> property.
 */
setSecurityManager(securityManager: SecurityManagerProtocol): void,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.status> property.
 */
getStatus(): number,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.statusText> property.
 */
getStatusText(): string,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.timeout> property.
 */
getTimeout(): number,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.username> property.
 */
getUsername(): string,

/**
 * Sets the value of the <Titanium.Network.HTTPClient.username> property.
 */
setUsername(username: string): void,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.validatesSecureCertificate> property.
 */
getValidatesSecureCertificate(): boolean,

/**
 * Sets the value of the <Titanium.Network.HTTPClient.validatesSecureCertificate> property.
 */
setValidatesSecureCertificate(validatesSecureCertificate: boolean): void,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.tlsVersion> property.
 */
getTlsVersion(): number,

/**
 * Sets the value of the <Titanium.Network.HTTPClient.tlsVersion> property.
 */
setTlsVersion(tlsVersion: number): void,

/**
 * Gets the value of the <Titanium.Network.HTTPClient.cache> property.
 */
getCache(): boolean,

/**
 * Sets the value of the <Titanium.Network.HTTPClient.cache> property.
 */
setCache(cache: boolean): void
} & Titanium$Proxy



/**
 * The TCPSocket instance returned from <Titanium.Network.createTCPSocket>.  This object
 * represents a socket which either listens locally on the device for connections,
 * or connects to a remote machine.
 */
declare type Titanium$Network$TCPSocket = {

/**
 * the host name to connect to.  Must be <Titanium.Network.INADDR_ANY> or an identifier for the local device in order to listen
 */
hostName: string,

/**
 * whether or not the socket is valid
 */
isValid: boolean,

/**
 * the socket's mode
 */
mode: number,

/**
 * the port to connect/listen on
 */
port: number,

/**
 * strip terminating null character when sending string data; default is false
 */
stripTerminator: boolean,

/**
 * close the socket
 */
close(): void,

/**
 * connect the scocket to a TCP server
 */
connect(): void,

/**
 * set up the socket to receive connections
 */
listen(): void,

/**
 * write data to the socket, if the mode is WRITE_MODE or READ_WRITE_MODE
 */
write(data: any, sendTo: number): void,

/**
 * write data to the socket, if the mode is WRITE_MODE or READ_WRITE_MODE
 */
write(data: string, sendTo: number): void,

/**
 * Gets the value of the <Titanium.Network.TCPSocket.hostName> property.
 */
getHostName(): string,

/**
 * Sets the value of the <Titanium.Network.TCPSocket.hostName> property.
 */
setHostName(hostName: string): void,

/**
 * Gets the value of the <Titanium.Network.TCPSocket.isValid> property.
 */
getIsValid(): boolean,

/**
 * Sets the value of the <Titanium.Network.TCPSocket.isValid> property.
 */
setIsValid(isValid: boolean): void,

/**
 * Gets the value of the <Titanium.Network.TCPSocket.mode> property.
 */
getMode(): number,

/**
 * Sets the value of the <Titanium.Network.TCPSocket.mode> property.
 */
setMode(mode: number): void,

/**
 * Gets the value of the <Titanium.Network.TCPSocket.port> property.
 */
getPort(): number,

/**
 * Sets the value of the <Titanium.Network.TCPSocket.port> property.
 */
setPort(port: number): void,

/**
 * Gets the value of the <Titanium.Network.TCPSocket.stripTerminator> property.
 */
getStripTerminator(): boolean,

/**
 * Sets the value of the <Titanium.Network.TCPSocket.stripTerminator> property.
 */
setStripTerminator(stripTerminator: boolean): void
} & Titanium$Proxy



      declare var npm$namespace$Titanium$Network$Socket: {
        addEventListener: typeof Titanium$Network$Socket$addEventListener,
removeEventListener: typeof Titanium$Network$Socket$removeEventListener,
fireEvent: typeof Titanium$Network$Socket$fireEvent,
applyProperties: typeof Titanium$Network$Socket$applyProperties,
createTCP: typeof Titanium$Network$Socket$createTCP,
getBubbleParent: typeof Titanium$Network$Socket$getBubbleParent,
setBubbleParent: typeof Titanium$Network$Socket$setBubbleParent,
getApiName: typeof Titanium$Network$Socket$getApiName,
getLifecycleContainer: typeof Titanium$Network$Socket$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Network$Socket$setLifecycleContainer,
        bubbleParent: typeof Titanium$Network$Socket$bubbleParent,
apiName: typeof Titanium$Network$Socket$apiName,
lifecycleContainer: typeof Titanium$Network$Socket$lifecycleContainer,
INITIALIZED: typeof Titanium$Network$Socket$INITIALIZED,
CONNECTED: typeof Titanium$Network$Socket$CONNECTED,
LISTENING: typeof Titanium$Network$Socket$LISTENING,
CLOSED: typeof Titanium$Network$Socket$CLOSED,
ERROR: typeof Titanium$Network$Socket$ERROR,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Network$Socket$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Network$Socket$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Network$Socket$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * State value representing an initialized socket.
 */
declare var Titanium$Network$Socket$INITIALIZED: number;


/**
 * State value representing a connected socket.
 */
declare var Titanium$Network$Socket$CONNECTED: number;


/**
 * State value representing a socket that is listening for connections.
 */
declare var Titanium$Network$Socket$LISTENING: number;


/**
 * State value representing a closed socket.
 */
declare var Titanium$Network$Socket$CLOSED: number;


/**
 * State value indicating an error has occurred on the socket.
 */
declare var Titanium$Network$Socket$ERROR: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Network$Socket$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Network$Socket$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Network$Socket$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Network$Socket$applyProperties(props: any): void



/**
 * Returns a new TCP socket object.
 */
declare function Titanium$Network$Socket$createTCP(params?: any): Titanium$Network$Socket$TCP



/**
 * Gets the value of the <Titanium.Network.Socket.bubbleParent> property.
 */
declare function Titanium$Network$Socket$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Network.Socket.bubbleParent> property.
 */
declare function Titanium$Network$Socket$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Network.Socket.apiName> property.
 */
declare function Titanium$Network$Socket$getApiName(): string



/**
 * Gets the value of the <Titanium.Network.Socket.lifecycleContainer> property.
 */
declare function Titanium$Network$Socket$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Network.Socket.lifecycleContainer> property.
 */
declare function Titanium$Network$Socket$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Network.Socket.lifecycleContainer> property.
 */
declare function Titanium$Network$Socket$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * TCP socket that implements the `Titanium.IOStream` interface.
 */
declare type Titanium$Network$Socket$TCP = {

/**
 * The host to connect to or listen on.
 */
host: string,

/**
 * The port to connect to or listen on.
 */
port: number,

/**
 * Max number of pending incoming connections to be allowed when the socket is in the [LISTENING](Titanium.Network.Socket.LISTENING) state.
 */
listenQueueSize: number,

/**
 * Timeout, in milliseconds, for `connect` and all `write` operations.
 */
timeout: number,

/**
 * Callback to be fired when the socket enters the "connected" state.
 */
connected: (param0: ConnectedCallbackArgs) => any,

/**
 * Callback to be fired when the socket enters the [ERROR](Titanium.Network.Socket.ERROR) state.
 */
error: (param0: ErrorCallbackArgs) => any,

/**
 * Callback to be fired when a listener accepts a connection.
 */
accepted: (param0: AcceptedCallbackArgs) => any,

/**
 * Current state of the socket.
 */
+state: number,

/**
 * Reads data from this stream into a buffer.
 */
read(
buffer: Titanium$Buffer,
offset?: number,
length?: number,
resultsCallback?: (param0: ReadCallbackArgs) => any): number,

/**
 * Writes data from a buffer to this stream.
 */
write(
buffer: Titanium$Buffer,
offset?: number,
length?: number,
resultsCallback?: (param0: WriteCallbackArgs) => any): number,

/**
 * Indicates whether this stream is writable.
 */
isWritable(): boolean,

/**
 * Indicates whether this stream is readable.
 */
isReadable(): boolean,

/**
 * Closes a socket.
 */
close(): void,

/**
 * Attempts to connect the socket to its host/port.
 */
connect(): void,

/**
 * Attempts to start listening on the socket's host/port.
 */
listen(): void,

/**
 * Tells a [LISTENING](Titanium.Network.Socket.LISTENING) socket to accept a connection request at the top of a listener's request queue when one becomes available.
 */
accept(options: AcceptDict): void,

/**
 * Gets the value of the <Titanium.Network.Socket.TCP.host> property.
 */
getHost(): string,

/**
 * Sets the value of the <Titanium.Network.Socket.TCP.host> property.
 */
setHost(host: string): void,

/**
 * Gets the value of the <Titanium.Network.Socket.TCP.port> property.
 */
getPort(): number,

/**
 * Sets the value of the <Titanium.Network.Socket.TCP.port> property.
 */
setPort(port: number): void,

/**
 * Gets the value of the <Titanium.Network.Socket.TCP.listenQueueSize> property.
 */
getListenQueueSize(): number,

/**
 * Sets the value of the <Titanium.Network.Socket.TCP.listenQueueSize> property.
 */
setListenQueueSize(listenQueueSize: number): void,

/**
 * Gets the value of the <Titanium.Network.Socket.TCP.timeout> property.
 */
getTimeout(): number,

/**
 * Sets the value of the <Titanium.Network.Socket.TCP.timeout> property.
 */
setTimeout(timeout: number): void,

/**
 * Gets the value of the <Titanium.Network.Socket.TCP.connected> property.
 */
getConnected(): (param0: ConnectedCallbackArgs) => any,

/**
 * Sets the value of the <Titanium.Network.Socket.TCP.connected> property.
 */
setConnected(connected: (param0: ConnectedCallbackArgs) => any): void,

/**
 * Gets the value of the <Titanium.Network.Socket.TCP.error> property.
 */
getError(): (param0: ErrorCallbackArgs) => any,

/**
 * Sets the value of the <Titanium.Network.Socket.TCP.error> property.
 */
setError(error: (param0: ErrorCallbackArgs) => any): void,

/**
 * Gets the value of the <Titanium.Network.Socket.TCP.accepted> property.
 */
getAccepted(): (param0: AcceptedCallbackArgs) => any,

/**
 * Sets the value of the <Titanium.Network.Socket.TCP.accepted> property.
 */
setAccepted(accepted: (param0: AcceptedCallbackArgs) => any): void,

/**
 * Gets the value of the <Titanium.Network.Socket.TCP.state> property.
 */
getState(): number
} & Titanium$Proxy



      declare var npm$namespace$Titanium$Platform: {
        addEventListener: typeof Titanium$Platform$addEventListener,
removeEventListener: typeof Titanium$Platform$removeEventListener,
fireEvent: typeof Titanium$Platform$fireEvent,
applyProperties: typeof Titanium$Platform$applyProperties,
canOpenURL: typeof Titanium$Platform$canOpenURL,
cpus: typeof Titanium$Platform$cpus,
createUUID: typeof Titanium$Platform$createUUID,
openURL: typeof Titanium$Platform$openURL,
is24HourTimeFormat: typeof Titanium$Platform$is24HourTimeFormat,
getBubbleParent: typeof Titanium$Platform$getBubbleParent,
setBubbleParent: typeof Titanium$Platform$setBubbleParent,
getApiName: typeof Titanium$Platform$getApiName,
getLifecycleContainer: typeof Titanium$Platform$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Platform$setLifecycleContainer,
getAddress: typeof Titanium$Platform$getAddress,
getArchitecture: typeof Titanium$Platform$getArchitecture,
getAvailableMemory: typeof Titanium$Platform$getAvailableMemory,
getBatteryLevel: typeof Titanium$Platform$getBatteryLevel,
getBatteryMonitoring: typeof Titanium$Platform$getBatteryMonitoring,
setBatteryMonitoring: typeof Titanium$Platform$setBatteryMonitoring,
getBatteryState: typeof Titanium$Platform$getBatteryState,
getDisplayCaps: typeof Titanium$Platform$getDisplayCaps,
getId: typeof Titanium$Platform$getId,
getIdentifierForVendor: typeof Titanium$Platform$getIdentifierForVendor,
getIdentifierForAdvertising: typeof Titanium$Platform$getIdentifierForAdvertising,
setIdentifierForAdvertising: typeof Titanium$Platform$setIdentifierForAdvertising,
getIsAdvertisingTrackingEnabled: typeof Titanium$Platform$getIsAdvertisingTrackingEnabled,
getLocale: typeof Titanium$Platform$getLocale,
getMacaddress: typeof Titanium$Platform$getMacaddress,
getManufacturer: typeof Titanium$Platform$getManufacturer,
getModel: typeof Titanium$Platform$getModel,
getName: typeof Titanium$Platform$getName,
getNetmask: typeof Titanium$Platform$getNetmask,
getOsname: typeof Titanium$Platform$getOsname,
getOstype: typeof Titanium$Platform$getOstype,
getProcessorCount: typeof Titanium$Platform$getProcessorCount,
getRuntime: typeof Titanium$Platform$getRuntime,
getTotalMemory: typeof Titanium$Platform$getTotalMemory,
getUptime: typeof Titanium$Platform$getUptime,
getUsername: typeof Titanium$Platform$getUsername,
getVersion: typeof Titanium$Platform$getVersion,
        bubbleParent: typeof Titanium$Platform$bubbleParent,
apiName: typeof Titanium$Platform$apiName,
lifecycleContainer: typeof Titanium$Platform$lifecycleContainer,
BATTERY_STATE_CHARGING: typeof Titanium$Platform$BATTERY_STATE_CHARGING,
BATTERY_STATE_FULL: typeof Titanium$Platform$BATTERY_STATE_FULL,
BATTERY_STATE_UNKNOWN: typeof Titanium$Platform$BATTERY_STATE_UNKNOWN,
BATTERY_STATE_UNPLUGGED: typeof Titanium$Platform$BATTERY_STATE_UNPLUGGED,
address: typeof Titanium$Platform$address,
architecture: typeof Titanium$Platform$architecture,
availableMemory: typeof Titanium$Platform$availableMemory,
batteryLevel: typeof Titanium$Platform$batteryLevel,
batteryMonitoring: typeof Titanium$Platform$batteryMonitoring,
batteryState: typeof Titanium$Platform$batteryState,
displayCaps: typeof Titanium$Platform$displayCaps,
id: typeof Titanium$Platform$id,
identifierForVendor: typeof Titanium$Platform$identifierForVendor,
identifierForAdvertising: typeof Titanium$Platform$identifierForAdvertising,
isAdvertisingTrackingEnabled: typeof Titanium$Platform$isAdvertisingTrackingEnabled,
locale: typeof Titanium$Platform$locale,
macaddress: typeof Titanium$Platform$macaddress,
manufacturer: typeof Titanium$Platform$manufacturer,
model: typeof Titanium$Platform$model,
name: typeof Titanium$Platform$name,
netmask: typeof Titanium$Platform$netmask,
osname: typeof Titanium$Platform$osname,
ostype: typeof Titanium$Platform$ostype,
processorCount: typeof Titanium$Platform$processorCount,
runtime: typeof Titanium$Platform$runtime,
totalMemory: typeof Titanium$Platform$totalMemory,
uptime: typeof Titanium$Platform$uptime,
username: typeof Titanium$Platform$username,
version: typeof Titanium$Platform$version,
        
        
        Android: typeof npm$namespace$Titanium$Platform$Android,
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Platform$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Platform$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Platform$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Constant to indicate that the system is plugged in and currently being charged.
 */
declare var Titanium$Platform$BATTERY_STATE_CHARGING: number;


/**
 * Constant to indicate that the battery is fully charged.
 */
declare var Titanium$Platform$BATTERY_STATE_FULL: number;


/**
 * Constant to indicate that the battery state is not known or monitoring is disabled.
 */
declare var Titanium$Platform$BATTERY_STATE_UNKNOWN: number;


/**
 * Constant to indicate that the system is unplugged.
 */
declare var Titanium$Platform$BATTERY_STATE_UNPLUGGED: number;


/**
 * System's WIFI IP address. No other network types are supported.
 */
declare var Titanium$Platform$address: string;


/**
 * System's processor architecture.
 */
declare var Titanium$Platform$architecture: string;


/**
 * System's unused memory, measured in bytes.
 */
declare var Titanium$Platform$availableMemory: number;


/**
 * Battery level in percent, accessible only when `batteryMonitoring` is enabled. Measured
 * in 5% increments on iPhone/iPad.
 */
declare var Titanium$Platform$batteryLevel: number;


/**
 * Determines whether battery monitoring is enabled.
 */
declare var Titanium$Platform$batteryMonitoring: boolean;


/**
 * Indicates the state of the battery. Accessible only when `batteryMonitoring` is enabled.
 */
declare var Titanium$Platform$batteryState: number;


/**
 * Returns the DisplayCaps object.
 */
declare var Titanium$Platform$displayCaps: Titanium$Platform$DisplayCaps;


/**
 * Applications's globally-unique ID (UUID).
 */
declare var Titanium$Platform$id: string;


/**
 * An alphanumeric string that uniquely identifies a device to the app's vendor.
 */
declare var Titanium$Platform$identifierForVendor: string;


/**
 * An alphanumeric string unique to each device, used only for serving advertisements.
 */
declare var Titanium$Platform$identifierForAdvertising: string;


/**
 * A Boolean value that indicates whether the user has limited ad tracking.
 */
declare var Titanium$Platform$isAdvertisingTrackingEnabled: boolean;


/**
 * System's default language.
 */
declare var Titanium$Platform$locale: string;


/**
 * System's network interface mac address, or app UUID.
 */
declare var Titanium$Platform$macaddress: string;


/**
 * Manufacturer of the device.
 */
declare var Titanium$Platform$manufacturer: string;


/**
 * Model of the device.
 */
declare var Titanium$Platform$model: string;


/**
 * Name of the platform. Returns `android` for the Android platform, `iPhone OS` for the iOS
 * platform (iPhone, iPad, or iPod Touch), and `windows` for the Windows platform.
 * Since iOS 10 this property returns `iOS` for for the iOS platform (iPhone, iPad, or iPod Touch).
 */
declare var Titanium$Platform$name: string;


/**
 * System's WIFI network mask. No other network types are supported.
 */
declare var Titanium$Platform$netmask: string;


/**
 * Short name of the system's Operating System. Returns `android` for the Android platfrom,
 * `iphone` for the iPhone or iPod Touch, `ipad` for the iPad, `windowsphone` for Windows Phone, and `windowsstore` for Windows Store
 * platform.
 */
declare var Titanium$Platform$osname: string;


/**
 * Operating System architecture. On Android, this is `32bit`.
 */
declare var Titanium$Platform$ostype: string;


/**
 * Number of logical processing cores.
 */
declare var Titanium$Platform$processorCount: number;


/**
 * Short name of the JavaScript runtime in use.
 */
declare var Titanium$Platform$runtime: string;


/**
 * System's total memory, measured in bytes.
 */
declare var Titanium$Platform$totalMemory: number;


/**
 * System uptime since last boot in seconds.
 */
declare var Titanium$Platform$uptime: number;


/**
 * System name, if set. On iOS, this can be found in Settings > General > About > Name.
 */
declare var Titanium$Platform$username: string;


/**
 * System's OS version.
 */
declare var Titanium$Platform$version: string;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Platform$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Platform$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Platform$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Platform$applyProperties(props: any): void



/**
 * Returns whether the system is configured with a default application to handle the URL's protocol.
 */
declare function Titanium$Platform$canOpenURL(url: string): boolean



/**
 * Returns an array of basic cpu information for all logical processors
 */
declare function Titanium$Platform$cpus(): CPU[]



/**
 * Creates a globally-unique identifier.
 */
declare function Titanium$Platform$createUUID(): string



/**
 * Opens this URL using the system's default application for its protocol.
 */
declare function Titanium$Platform$openURL(url: string, options: any, callback: () => any): boolean



/**
 * Returns whether the system settings are configured to show times in 24-hour format.
 */
declare function Titanium$Platform$is24HourTimeFormat(): boolean



/**
 * Gets the value of the <Titanium.Platform.bubbleParent> property.
 */
declare function Titanium$Platform$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Platform.bubbleParent> property.
 */
declare function Titanium$Platform$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Platform.apiName> property.
 */
declare function Titanium$Platform$getApiName(): string



/**
 * Gets the value of the <Titanium.Platform.lifecycleContainer> property.
 */
declare function Titanium$Platform$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Platform.lifecycleContainer> property.
 */
declare function Titanium$Platform$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Platform.lifecycleContainer> property.
 */
declare function Titanium$Platform$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.Platform.address> property.
 */
declare function Titanium$Platform$getAddress(): string



/**
 * Gets the value of the <Titanium.Platform.architecture> property.
 */
declare function Titanium$Platform$getArchitecture(): string



/**
 * Gets the value of the <Titanium.Platform.availableMemory> property.
 */
declare function Titanium$Platform$getAvailableMemory(): number



/**
 * Gets the value of the <Titanium.Platform.batteryLevel> property.
 */
declare function Titanium$Platform$getBatteryLevel(): number



/**
 * Gets the value of the <Titanium.Platform.batteryMonitoring> property.
 */
declare function Titanium$Platform$getBatteryMonitoring(): boolean



/**
 * Sets the value of the <Titanium.Platform.batteryMonitoring> property.
 */
declare function Titanium$Platform$setBatteryMonitoring(batteryMonitoring: boolean): void



/**
 * Gets the value of the <Titanium.Platform.batteryState> property.
 */
declare function Titanium$Platform$getBatteryState(): number



/**
 * Gets the value of the <Titanium.Platform.displayCaps> property.
 */
declare function Titanium$Platform$getDisplayCaps(): Titanium$Platform$DisplayCaps



/**
 * Gets the value of the <Titanium.Platform.id> property.
 */
declare function Titanium$Platform$getId(): string



/**
 * Gets the value of the <Titanium.Platform.identifierForVendor> property.
 */
declare function Titanium$Platform$getIdentifierForVendor(): string



/**
 * Gets the value of the <Titanium.Platform.identifierForAdvertising> property.
 */
declare function Titanium$Platform$getIdentifierForAdvertising(): string



/**
 * Sets the value of the <Titanium.Platform.identifierForAdvertising> property.
 */
declare function Titanium$Platform$setIdentifierForAdvertising(identifierForAdvertising: string): void



/**
 * Gets the value of the <Titanium.Platform.isAdvertisingTrackingEnabled> property.
 */
declare function Titanium$Platform$getIsAdvertisingTrackingEnabled(): boolean



/**
 * Gets the value of the <Titanium.Platform.locale> property.
 */
declare function Titanium$Platform$getLocale(): string



/**
 * Gets the value of the <Titanium.Platform.macaddress> property.
 */
declare function Titanium$Platform$getMacaddress(): string



/**
 * Gets the value of the <Titanium.Platform.manufacturer> property.
 */
declare function Titanium$Platform$getManufacturer(): string



/**
 * Gets the value of the <Titanium.Platform.model> property.
 */
declare function Titanium$Platform$getModel(): string



/**
 * Gets the value of the <Titanium.Platform.name> property.
 */
declare function Titanium$Platform$getName(): string



/**
 * Gets the value of the <Titanium.Platform.netmask> property.
 */
declare function Titanium$Platform$getNetmask(): string



/**
 * Gets the value of the <Titanium.Platform.osname> property.
 */
declare function Titanium$Platform$getOsname(): string



/**
 * Gets the value of the <Titanium.Platform.ostype> property.
 */
declare function Titanium$Platform$getOstype(): string



/**
 * Gets the value of the <Titanium.Platform.processorCount> property.
 */
declare function Titanium$Platform$getProcessorCount(): number



/**
 * Gets the value of the <Titanium.Platform.runtime> property.
 */
declare function Titanium$Platform$getRuntime(): string



/**
 * Gets the value of the <Titanium.Platform.totalMemory> property.
 */
declare function Titanium$Platform$getTotalMemory(): number



/**
 * Gets the value of the <Titanium.Platform.uptime> property.
 */
declare function Titanium$Platform$getUptime(): number



/**
 * Gets the value of the <Titanium.Platform.username> property.
 */
declare function Titanium$Platform$getUsername(): string



/**
 * Gets the value of the <Titanium.Platform.version> property.
 */
declare function Titanium$Platform$getVersion(): string



/**
 * The Display Caps object returned by the <Titanium.Platform.displayCaps> property.
 */
declare type Titanium$Platform$DisplayCaps = {

/**
 * Logical density of the display.
 */
+density: string,

/**
 * Display density expressed as dots-per-inch.
 */
+dpi: number,

/**
 * Logical density of the display, as a scaling factor for the Density Independent Pixel (dip)
 * unit.
 */
+logicalDensityFactor: number,

/**
 * Absolute height of the display in relation to UI orientation. Measured in platform-specific
 * units; pixels on Android and density-independent pixels (dip) on iOS.
 */
+platformHeight: number,

/**
 * Absolute width of the display in relation to UI orientation. Measured in platform-specific
 * units; pixels on Android and density-independent pixels (dip) on iOS.
 */
+platformWidth: number,

/**
 * Physical pixels per inch of the display in the X dimension.
 */
+xdpi: number,

/**
 * Physical pixels per inch of the display in the Y dimension.
 */
+ydpi: number,

/**
 * Gets the value of the <Titanium.Platform.DisplayCaps.density> property.
 */
getDensity(): string,

/**
 * Gets the value of the <Titanium.Platform.DisplayCaps.dpi> property.
 */
getDpi(): number,

/**
 * Gets the value of the <Titanium.Platform.DisplayCaps.logicalDensityFactor> property.
 */
getLogicalDensityFactor(): number,

/**
 * Gets the value of the <Titanium.Platform.DisplayCaps.platformHeight> property.
 */
getPlatformHeight(): number,

/**
 * Gets the value of the <Titanium.Platform.DisplayCaps.platformWidth> property.
 */
getPlatformWidth(): number,

/**
 * Gets the value of the <Titanium.Platform.DisplayCaps.xdpi> property.
 */
getXdpi(): number,

/**
 * Gets the value of the <Titanium.Platform.DisplayCaps.ydpi> property.
 */
getYdpi(): number
} & Titanium$Proxy



      declare var npm$namespace$Titanium$Platform$Android: {
        addEventListener: typeof Titanium$Platform$Android$addEventListener,
removeEventListener: typeof Titanium$Platform$Android$removeEventListener,
fireEvent: typeof Titanium$Platform$Android$fireEvent,
applyProperties: typeof Titanium$Platform$Android$applyProperties,
getBubbleParent: typeof Titanium$Platform$Android$getBubbleParent,
setBubbleParent: typeof Titanium$Platform$Android$setBubbleParent,
getApiName: typeof Titanium$Platform$Android$getApiName,
getLifecycleContainer: typeof Titanium$Platform$Android$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Platform$Android$setLifecycleContainer,
getPhysicalSizeCategory: typeof Titanium$Platform$Android$getPhysicalSizeCategory,
        bubbleParent: typeof Titanium$Platform$Android$bubbleParent,
apiName: typeof Titanium$Platform$Android$apiName,
lifecycleContainer: typeof Titanium$Platform$Android$lifecycleContainer,
API_LEVEL: typeof Titanium$Platform$Android$API_LEVEL,
PHYSICAL_SIZE_CATEGORY_LARGE: typeof Titanium$Platform$Android$PHYSICAL_SIZE_CATEGORY_LARGE,
PHYSICAL_SIZE_CATEGORY_NORMAL: typeof Titanium$Platform$Android$PHYSICAL_SIZE_CATEGORY_NORMAL,
PHYSICAL_SIZE_CATEGORY_SMALL: typeof Titanium$Platform$Android$PHYSICAL_SIZE_CATEGORY_SMALL,
PHYSICAL_SIZE_CATEGORY_UNDEFINED: typeof Titanium$Platform$Android$PHYSICAL_SIZE_CATEGORY_UNDEFINED,
PHYSICAL_SIZE_CATEGORY_XLARGE: typeof Titanium$Platform$Android$PHYSICAL_SIZE_CATEGORY_XLARGE,
physicalSizeCategory: typeof Titanium$Platform$Android$physicalSizeCategory,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Platform$Android$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Platform$Android$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Platform$Android$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Android API level identifier of the Operating System.
 */
declare var Titanium$Platform$Android$API_LEVEL: number;


/**
 * Constant to indicate that the physical size category of the current device/emulator is large
 */
declare var Titanium$Platform$Android$PHYSICAL_SIZE_CATEGORY_LARGE: number;


/**
 * Constant to indicate that the physical size category of the current device/emulator is normal
 */
declare var Titanium$Platform$Android$PHYSICAL_SIZE_CATEGORY_NORMAL: number;


/**
 * Constant to indicate that the physical size category of the current device/emulator is small
 */
declare var Titanium$Platform$Android$PHYSICAL_SIZE_CATEGORY_SMALL: number;


/**
 * Constant to indicate that the physical size category of the current device/emulator is undefined
 */
declare var Titanium$Platform$Android$PHYSICAL_SIZE_CATEGORY_UNDEFINED: number;


/**
 * Constant to indicate that the physical size category of the current device/emulator is extra large
 */
declare var Titanium$Platform$Android$PHYSICAL_SIZE_CATEGORY_XLARGE: number;


/**
 * The physical size category of the Android device or emulator.
 */
declare var Titanium$Platform$Android$physicalSizeCategory: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Platform$Android$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Platform$Android$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Platform$Android$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Platform$Android$applyProperties(props: any): void



/**
 * Gets the value of the <Titanium.Platform.Android.bubbleParent> property.
 */
declare function Titanium$Platform$Android$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Platform.Android.bubbleParent> property.
 */
declare function Titanium$Platform$Android$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Platform.Android.apiName> property.
 */
declare function Titanium$Platform$Android$getApiName(): string



/**
 * Gets the value of the <Titanium.Platform.Android.lifecycleContainer> property.
 */
declare function Titanium$Platform$Android$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Platform.Android.lifecycleContainer> property.
 */
declare function Titanium$Platform$Android$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Platform.Android.lifecycleContainer> property.
 */
declare function Titanium$Platform$Android$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Gets the value of the <Titanium.Platform.Android.physicalSizeCategory> property.
 */
declare function Titanium$Platform$Android$getPhysicalSizeCategory(): number



      declare var npm$namespace$Titanium$Stream: {
        addEventListener: typeof Titanium$Stream$addEventListener,
removeEventListener: typeof Titanium$Stream$removeEventListener,
fireEvent: typeof Titanium$Stream$fireEvent,
applyProperties: typeof Titanium$Stream$applyProperties,
createStream: typeof Titanium$Stream$createStream,
read: typeof Titanium$Stream$read,
readAll: typeof Titanium$Stream$readAll,
write: typeof Titanium$Stream$write,
writeStream: typeof Titanium$Stream$writeStream,
pump: typeof Titanium$Stream$pump,
getBubbleParent: typeof Titanium$Stream$getBubbleParent,
setBubbleParent: typeof Titanium$Stream$setBubbleParent,
getApiName: typeof Titanium$Stream$getApiName,
getLifecycleContainer: typeof Titanium$Stream$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Stream$setLifecycleContainer,
        bubbleParent: typeof Titanium$Stream$bubbleParent,
apiName: typeof Titanium$Stream$apiName,
lifecycleContainer: typeof Titanium$Stream$lifecycleContainer,
MODE_READ: typeof Titanium$Stream$MODE_READ,
MODE_WRITE: typeof Titanium$Stream$MODE_WRITE,
MODE_APPEND: typeof Titanium$Stream$MODE_APPEND,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Stream$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Stream$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Stream$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Use with [createStream](Titanium.Stream.createStream) to open a stream in read
 * mode.
 */
declare var Titanium$Stream$MODE_READ: number;


/**
 * Use with [createStream](Titanium.Stream.createStream) to open a stream in write
 * mode.
 */
declare var Titanium$Stream$MODE_WRITE: number;


/**
 * Use with [createStream](Titanium.Stream.createStream) to open a stream in append
 * mode.
 */
declare var Titanium$Stream$MODE_APPEND: number;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Stream$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Stream$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Stream$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Stream$applyProperties(props: any): void



/**
 * Creates stream from a `Buffer` or `Blob` object.
 */
declare function Titanium$Stream$createStream(params: CreateStreamArgs): Titanium$IOStream



/**
 * Asynchronously reads data from an [IOStream](Titanium.IOStream) into a buffer.
 */
declare function Titanium$Stream$read(
sourceStream: Titanium$IOStream,
buffer: Titanium$Buffer,
offset?: number,
length?: number,
resultsCallback?: (param0: ReadCallbackArgs) => any): void



/**
 * Reads all data from the specified [IOStream](Titanium.IOStream).
 */
declare function Titanium$Stream$readAll(
sourceStream: Titanium$IOStream,
buffer?: Titanium$Buffer,
resultsCallback?: (param0: ReadCallbackArgs) => any): Titanium$Buffer | void



/**
 * Asynchronously writes data from a buffer to an [IOStream](Titanium.IOStream).
 */
declare function Titanium$Stream$write(
outputStream: Titanium$IOStream,
buffer: Titanium$Buffer,
offset?: number,
length?: number,
resultsCallback?: (param0: WriteCallbackArgs) => any): void



/**
 * Writes all data from an input stream to an output stream.
 */
declare function Titanium$Stream$writeStream(
inputStream: Titanium$IOStream,
outputStream: Titanium$IOStream,
maxChunkSize: number,
resultsCallback?: (param0: WriteStreamCallbackArgs) => any): void



/**
 * Reads data from input stream and passes it to a handler method.
 */
declare function Titanium$Stream$pump(
inputStream: Titanium$IOStream,
handler: (param0: PumpCallbackArgs) => any,
maxChunkSize: number,
isAsync?: boolean): void



/**
 * Gets the value of the <Titanium.Stream.bubbleParent> property.
 */
declare function Titanium$Stream$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Stream.bubbleParent> property.
 */
declare function Titanium$Stream$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Stream.apiName> property.
 */
declare function Titanium$Stream$getApiName(): string



/**
 * Gets the value of the <Titanium.Stream.lifecycleContainer> property.
 */
declare function Titanium$Stream$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Stream.lifecycleContainer> property.
 */
declare function Titanium$Stream$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Stream.lifecycleContainer> property.
 */
declare function Titanium$Stream$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



      declare var npm$namespace$Titanium$Utils: {
        addEventListener: typeof Titanium$Utils$addEventListener,
removeEventListener: typeof Titanium$Utils$removeEventListener,
fireEvent: typeof Titanium$Utils$fireEvent,
applyProperties: typeof Titanium$Utils$applyProperties,
base64decode: typeof Titanium$Utils$base64decode,
base64encode: typeof Titanium$Utils$base64encode,
md5HexDigest: typeof Titanium$Utils$md5HexDigest,
sha1: typeof Titanium$Utils$sha1,
sha256: typeof Titanium$Utils$sha256,
getBubbleParent: typeof Titanium$Utils$getBubbleParent,
setBubbleParent: typeof Titanium$Utils$setBubbleParent,
getApiName: typeof Titanium$Utils$getApiName,
getLifecycleContainer: typeof Titanium$Utils$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Utils$setLifecycleContainer,
        bubbleParent: typeof Titanium$Utils$bubbleParent,
apiName: typeof Titanium$Utils$apiName,
lifecycleContainer: typeof Titanium$Utils$lifecycleContainer,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Utils$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Utils$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Utils$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Utils$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Utils$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Utils$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Utils$applyProperties(props: any): void



/**
 * Returns the specified data decoded from Base64.
 */
declare function Titanium$Utils$base64decode(obj: string): Titanium$Blob



/**
 * Returns the specified data decoded from Base64.
 */
declare function Titanium$Utils$base64decode(obj: Titanium$Blob): Titanium$Blob



/**
 * Returns the specified data decoded from Base64.
 */
declare function Titanium$Utils$base64decode(obj: Titanium$Filesystem$File): Titanium$Blob



/**
 * Returns the specified data encoded to Base64.
 */
declare function Titanium$Utils$base64encode(obj: string): Titanium$Blob



/**
 * Returns the specified data encoded to Base64.
 */
declare function Titanium$Utils$base64encode(obj: Titanium$Blob): Titanium$Blob



/**
 * Returns the specified data encoded to Base64.
 */
declare function Titanium$Utils$base64encode(obj: Titanium$Filesystem$File): Titanium$Blob



/**
 * Returns a MD5 digest of the specified data as a hex-based String.
 */
declare function Titanium$Utils$md5HexDigest(obj: string): string



/**
 * Returns a MD5 digest of the specified data as a hex-based String.
 */
declare function Titanium$Utils$md5HexDigest(obj: Titanium$Blob): string



/**
 * Returns a SHA-1 hash of the specified data as a hex-based String.
 */
declare function Titanium$Utils$sha1(obj: string): string



/**
 * Returns a SHA-1 hash of the specified data as a hex-based String.
 */
declare function Titanium$Utils$sha1(obj: Titanium$Blob): string



/**
 * Returns a SHA-256 hash of the specified data as a hex-based String.
 */
declare function Titanium$Utils$sha256(obj: string): string



/**
 * Returns a SHA-256 hash of the specified data as a hex-based String.
 */
declare function Titanium$Utils$sha256(obj: Titanium$Blob): string



/**
 * Gets the value of the <Titanium.Utils.bubbleParent> property.
 */
declare function Titanium$Utils$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Utils.bubbleParent> property.
 */
declare function Titanium$Utils$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Utils.apiName> property.
 */
declare function Titanium$Utils$getApiName(): string



/**
 * Gets the value of the <Titanium.Utils.lifecycleContainer> property.
 */
declare function Titanium$Utils$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Utils.lifecycleContainer> property.
 */
declare function Titanium$Utils$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Utils.lifecycleContainer> property.
 */
declare function Titanium$Utils$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



      declare var npm$namespace$Titanium$WatchSession: {
        addEventListener: typeof Titanium$WatchSession$addEventListener,
removeEventListener: typeof Titanium$WatchSession$removeEventListener,
fireEvent: typeof Titanium$WatchSession$fireEvent,
applyProperties: typeof Titanium$WatchSession$applyProperties,
activateSession: typeof Titanium$WatchSession$activateSession,
sendMessage: typeof Titanium$WatchSession$sendMessage,
updateApplicationContext: typeof Titanium$WatchSession$updateApplicationContext,
transferUserInfo: typeof Titanium$WatchSession$transferUserInfo,
transferFile: typeof Titanium$WatchSession$transferFile,
transferCurrentComplication: typeof Titanium$WatchSession$transferCurrentComplication,
cancelAllUserInfoTransfers: typeof Titanium$WatchSession$cancelAllUserInfoTransfers,
cancelAllFileTransfers: typeof Titanium$WatchSession$cancelAllFileTransfers,
cancelAllTransfers: typeof Titanium$WatchSession$cancelAllTransfers,
getBubbleParent: typeof Titanium$WatchSession$getBubbleParent,
setBubbleParent: typeof Titanium$WatchSession$setBubbleParent,
getApiName: typeof Titanium$WatchSession$getApiName,
getActivationState: typeof Titanium$WatchSession$getActivationState,
getHasContentPending: typeof Titanium$WatchSession$getHasContentPending,
getRemainingComplicationUserInfoTransfers: typeof Titanium$WatchSession$getRemainingComplicationUserInfoTransfers,
getIsSupported: typeof Titanium$WatchSession$getIsSupported,
getIsPaired: typeof Titanium$WatchSession$getIsPaired,
getIsWatchAppInstalled: typeof Titanium$WatchSession$getIsWatchAppInstalled,
getIsComplicationEnabled: typeof Titanium$WatchSession$getIsComplicationEnabled,
getIsReachable: typeof Titanium$WatchSession$getIsReachable,
getIsActivated: typeof Titanium$WatchSession$getIsActivated,
getRecentApplicationContext: typeof Titanium$WatchSession$getRecentApplicationContext,
        bubbleParent: typeof Titanium$WatchSession$bubbleParent,
apiName: typeof Titanium$WatchSession$apiName,
activationState: typeof Titanium$WatchSession$activationState,
ACTIVATION_STATE_NOT_ACTIVATED: typeof Titanium$WatchSession$ACTIVATION_STATE_NOT_ACTIVATED,
ACTIVATION_STATE_INACTIVE: typeof Titanium$WatchSession$ACTIVATION_STATE_INACTIVE,
ACTIVATION_STATE_ACTIVATED: typeof Titanium$WatchSession$ACTIVATION_STATE_ACTIVATED,
hasContentPending: typeof Titanium$WatchSession$hasContentPending,
remainingComplicationUserInfoTransfers: typeof Titanium$WatchSession$remainingComplicationUserInfoTransfers,
isSupported: typeof Titanium$WatchSession$isSupported,
isPaired: typeof Titanium$WatchSession$isPaired,
isWatchAppInstalled: typeof Titanium$WatchSession$isWatchAppInstalled,
isComplicationEnabled: typeof Titanium$WatchSession$isComplicationEnabled,
isReachable: typeof Titanium$WatchSession$isReachable,
isActivated: typeof Titanium$WatchSession$isActivated,
recentApplicationContext: typeof Titanium$WatchSession$recentApplicationContext,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$WatchSession$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$WatchSession$apiName: string;


/**
 * Returns the current activation state of the watch.
 */
declare var Titanium$WatchSession$activationState: number;


/**
 * The watch is currently not activated.
 */
declare var Titanium$WatchSession$ACTIVATION_STATE_NOT_ACTIVATED: number;


/**
 * The watch is currently inactive.
 */
declare var Titanium$WatchSession$ACTIVATION_STATE_INACTIVE: number;


/**
 * The watch is currently activated.
 */
declare var Titanium$WatchSession$ACTIVATION_STATE_ACTIVATED: number;


/**
 * Returns `true` if there is more content for the session to deliver.
 */
declare var Titanium$WatchSession$hasContentPending: boolean;


/**
 * The number of calls remaining to `transferCurrentComplication` before the system starts
 * transferring the complicationUserInfo as regular userInfos.
 */
declare var Titanium$WatchSession$remainingComplicationUserInfoTransfers: number;


/**
 * Returns `true` if the device supports watch connectivity.
 */
declare var Titanium$WatchSession$isSupported: boolean;


/**
 * Returns `true` if the device is paired with a watch.
 */
declare var Titanium$WatchSession$isPaired: boolean;


/**
 * Returns `true` if the accompanying watch app is installed.
 */
declare var Titanium$WatchSession$isWatchAppInstalled: boolean;


/**
 * Returns `true` if complication is enabled on the installed watch app.
 */
declare var Titanium$WatchSession$isComplicationEnabled: boolean;


/**
 * Returns `true` if the watch is currently reachable.
 */
declare var Titanium$WatchSession$isReachable: boolean;


/**
 * Returns `true` if the watch is currently activated.
 */
declare var Titanium$WatchSession$isActivated: boolean;


/**
 * The most recent application context sent to the watch app.
 */
declare var Titanium$WatchSession$recentApplicationContext: any;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$WatchSession$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$WatchSession$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$WatchSession$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$WatchSession$applyProperties(props: any): void



/**
 * Activates the watch session
 */
declare function Titanium$WatchSession$activateSession(): void



/**
 * Sends a message to the apple watch.
 */
declare function Titanium$WatchSession$sendMessage(message: any, reply?: (param0: MessageReply) => any): void



/**
 * Sends an app context update to the apple watch.
 */
declare function Titanium$WatchSession$updateApplicationContext(params: any): void



/**
 * Transfers an user info to the apple watch.
 */
declare function Titanium$WatchSession$transferUserInfo(params: any): void



/**
 * Transfers a file to the apple watch.
 */
declare function Titanium$WatchSession$transferFile(params: any): void



/**
 * Transfers complication data to the watch application.
 */
declare function Titanium$WatchSession$transferCurrentComplication(params: any): void



/**
 * Cancels all incomplete user info and complication transfers to the apple watch.
 */
declare function Titanium$WatchSession$cancelAllUserInfoTransfers(): void



/**
 * Cancels all incomplete file transfers to the apple watch.
 */
declare function Titanium$WatchSession$cancelAllFileTransfers(): void



/**
 * Cancels all incomplete transfers to the apple watch.
 */
declare function Titanium$WatchSession$cancelAllTransfers(): void



/**
 * Gets the value of the <Titanium.WatchSession.bubbleParent> property.
 */
declare function Titanium$WatchSession$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.WatchSession.bubbleParent> property.
 */
declare function Titanium$WatchSession$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.WatchSession.apiName> property.
 */
declare function Titanium$WatchSession$getApiName(): string



/**
 * Gets the value of the <Titanium.WatchSession.activationState> property.
 */
declare function Titanium$WatchSession$getActivationState(): number



/**
 * Gets the value of the <Titanium.WatchSession.hasContentPending> property.
 */
declare function Titanium$WatchSession$getHasContentPending(): boolean



/**
 * Gets the value of the <Titanium.WatchSession.remainingComplicationUserInfoTransfers> property.
 */
declare function Titanium$WatchSession$getRemainingComplicationUserInfoTransfers(): number



/**
 * Gets the value of the <Titanium.WatchSession.isSupported> property.
 */
declare function Titanium$WatchSession$getIsSupported(): boolean



/**
 * Gets the value of the <Titanium.WatchSession.isPaired> property.
 */
declare function Titanium$WatchSession$getIsPaired(): boolean



/**
 * Gets the value of the <Titanium.WatchSession.isWatchAppInstalled> property.
 */
declare function Titanium$WatchSession$getIsWatchAppInstalled(): boolean



/**
 * Gets the value of the <Titanium.WatchSession.isComplicationEnabled> property.
 */
declare function Titanium$WatchSession$getIsComplicationEnabled(): boolean



/**
 * Gets the value of the <Titanium.WatchSession.isReachable> property.
 */
declare function Titanium$WatchSession$getIsReachable(): boolean



/**
 * Gets the value of the <Titanium.WatchSession.isActivated> property.
 */
declare function Titanium$WatchSession$getIsActivated(): boolean



/**
 * Gets the value of the <Titanium.WatchSession.recentApplicationContext> property.
 */
declare function Titanium$WatchSession$getRecentApplicationContext(): any



      declare var npm$namespace$Titanium$XML: {
        addEventListener: typeof Titanium$XML$addEventListener,
removeEventListener: typeof Titanium$XML$removeEventListener,
fireEvent: typeof Titanium$XML$fireEvent,
applyProperties: typeof Titanium$XML$applyProperties,
parseString: typeof Titanium$XML$parseString,
serializeToString: typeof Titanium$XML$serializeToString,
getBubbleParent: typeof Titanium$XML$getBubbleParent,
setBubbleParent: typeof Titanium$XML$setBubbleParent,
getApiName: typeof Titanium$XML$getApiName,
getLifecycleContainer: typeof Titanium$XML$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$XML$setLifecycleContainer,
        bubbleParent: typeof Titanium$XML$bubbleParent,
apiName: typeof Titanium$XML$apiName,
lifecycleContainer: typeof Titanium$XML$lifecycleContainer,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$XML$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$XML$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$XML$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$XML$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$XML$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$XML$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$XML$applyProperties(props: any): void



/**
 * Parses an XML string into a <Titanium.XML.Document> object.
 */
declare function Titanium$XML$parseString(xml: string): Titanium$XML$Document



/**
 * Serializes a [Node](Titanium.XML.Node) object into a string.
 */
declare function Titanium$XML$serializeToString(node: Titanium$XML$Node): string



/**
 * Gets the value of the <Titanium.XML.bubbleParent> property.
 */
declare function Titanium$XML$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.XML.bubbleParent> property.
 */
declare function Titanium$XML$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.XML.apiName> property.
 */
declare function Titanium$XML$getApiName(): string



/**
 * Gets the value of the <Titanium.XML.lifecycleContainer> property.
 */
declare function Titanium$XML$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.XML.lifecycleContainer> property.
 */
declare function Titanium$XML$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.XML.lifecycleContainer> property.
 */
declare function Titanium$XML$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void



/**
 * Represents an attribute of an [Element](Titanium.XML.Element).
 */
declare type Titanium$XML$Attr = {

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Element](Titanium.XML.Element) node.
 */
+ELEMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Attr](Titanium.XML.Attr) node.
 */
+ATTRIBUTE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Text](Titanium.XML.Text) node.
 */
+TEXT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [CDATASection](Titanium.XML.CDATASection) node.
 */
+CDATA_SECTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [EntityReference](Titanium.XML.EntityReference) node.
 */
+ENTITY_REFERENCE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Entity](Titanium.XML.Entity) node.
 */
+ENTITY_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
 */
+PROCESSING_INSTRUCTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Comment](Titanium.XML.Comment) node.
 */
+COMMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Document](Titanium.XML.Document) node.
 */
+DOCUMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentType](Titanium.XML.DocumentType) node.
 */
+DOCUMENT_TYPE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
 */
+DOCUMENT_FRAGMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Notation](Titanium.XML.Notation) node.
 */
+NOTATION_NODE: number,

/**
 * Name of this node.
 */
+nodeName: string,

/**
 * Content (value) of this node.
 */
nodeValue: string,

/**
 * Content (value) of all text nodes within this node.
 */
+textContent: string,

/**
 * Content (value) of all text nodes within this node.
 */
+text: string,

/**
 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
 */
+nodeType: number,

/**
 * This node's parent node.
 */
+parentNode: Titanium$XML$Node,

/**
 * A <Titanium.XML.NodeList> of this node's children.
 */
+childNodes: Titanium$XML$NodeList,

/**
 * This node's first child.
 */
+firstChild: Titanium$XML$Node,

/**
 * This node's last child.
 */
+lastChild: Titanium$XML$Node,

/**
 * This node's previous sibling.
 */
+previousSibling: Titanium$XML$Node,

/**
 * This node's next sibling.
 */
+nextSibling: Titanium$XML$Node,

/**
 * A map of this node's attributes.
 */
+attributes: Titanium$XML$NamedNodeMap,

/**
 * This node's owning document.
 */
+ownerDocument: Titanium$XML$Document,

/**
 * Namespace URI of this node.
 */
+namespaceURI: string,

/**
 * Namespace prefix of this node.
 */
prefix: string,

/**
 * Local part of the qualified name of this node.
 */
localName: string,

/**
 * Attribute name
 */
+name: string,

/**
 * The <Titanium.XML.Element> to which the attribute belongs.
 */
+ownerElement: Titanium$XML$Element,

/**
 * True if this attribute was explicitly given a value in the instance document, false otherwise.
 */
+specified: boolean,

/**
 * The attribute value as a string.
 */
value: string,

/**
 * Appends the node `newChild` as a child of this node.
 */
appendChild(newChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Returns a duplicate of this node.
 */
cloneNode(deep: boolean): Titanium$XML$Node,

/**
 * Returns `true` if this node has attributes.
 */
hasAttributes(): boolean,

/**
 * Returns `true` if this node has child nodes.
 */
hasChildNodes(): boolean,

/**
 * Inserts the node `newChild` before the node `refChild`.
 */
insertBefore(newChild: Titanium$XML$Node, refChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Tests whether the DOM implementation supports a specific feature.
 */
isSupported(feature: string, version: string): boolean,

/**
 * Normalizes text and attribute nodes in this node's child hierarchy.
 */
normalize(): void,

/**
 * Removes a child node from this node.
 */
removeChild(oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Replaces the node `oldChild` with the node `newChild`.
 */
replaceChild(newChild: Titanium$XML$Node, oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Gets the value of the <Titanium.XML.Attr.attributes> property.
 */
getAttributes(): Titanium$XML$NamedNodeMap,

/**
 * Gets the value of the <Titanium.XML.Attr.name> property.
 */
getName(): string,

/**
 * Gets the value of the <Titanium.XML.Attr.ownerElement> property.
 */
getOwnerElement(): Titanium$XML$Element,

/**
 * Gets the value of the <Titanium.XML.Attr.specified> property.
 */
getSpecified(): boolean,

/**
 * Gets the value of the <Titanium.XML.Attr.value> property.
 */
getValue(): string,

/**
 * Sets the value of the <Titanium.XML.Attr.value> property.
 */
setValue(value: string): void
} & Titanium$Proxy



/**
 * Used to include blocks of literal text containing characters that would otherwise need
 * to be escaped.
 */
declare type Titanium$XML$CDATASection = {

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Element](Titanium.XML.Element) node.
 */
+ELEMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Attr](Titanium.XML.Attr) node.
 */
+ATTRIBUTE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Text](Titanium.XML.Text) node.
 */
+TEXT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [CDATASection](Titanium.XML.CDATASection) node.
 */
+CDATA_SECTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [EntityReference](Titanium.XML.EntityReference) node.
 */
+ENTITY_REFERENCE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Entity](Titanium.XML.Entity) node.
 */
+ENTITY_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
 */
+PROCESSING_INSTRUCTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Comment](Titanium.XML.Comment) node.
 */
+COMMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Document](Titanium.XML.Document) node.
 */
+DOCUMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentType](Titanium.XML.DocumentType) node.
 */
+DOCUMENT_TYPE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
 */
+DOCUMENT_FRAGMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Notation](Titanium.XML.Notation) node.
 */
+NOTATION_NODE: number,

/**
 * Name of this node.
 */
+nodeName: string,

/**
 * Content (value) of this node.
 */
nodeValue: string,

/**
 * Content (value) of all text nodes within this node.
 */
+textContent: string,

/**
 * Content (value) of all text nodes within this node.
 */
+text: string,

/**
 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
 */
+nodeType: number,

/**
 * This node's parent node.
 */
+parentNode: Titanium$XML$Node,

/**
 * A <Titanium.XML.NodeList> of this node's children.
 */
+childNodes: Titanium$XML$NodeList,

/**
 * This node's first child.
 */
+firstChild: Titanium$XML$Node,

/**
 * This node's last child.
 */
+lastChild: Titanium$XML$Node,

/**
 * This node's previous sibling.
 */
+previousSibling: Titanium$XML$Node,

/**
 * This node's next sibling.
 */
+nextSibling: Titanium$XML$Node,

/**
 * A map of this node's attributes.
 */
+attributes: Titanium$XML$NamedNodeMap,

/**
 * This node's owning document.
 */
+ownerDocument: Titanium$XML$Document,

/**
 * Namespace URI of this node.
 */
+namespaceURI: string,

/**
 * Namespace prefix of this node.
 */
prefix: string,

/**
 * Local part of the qualified name of this node.
 */
localName: string,

/**
 * The character data of the node that implements this interface. Throws an exception during setting if this node is readonly.
 */
data: string,

/**
 * The number of characters that are available through data and the substringData method. This may have the value zero, i.e., <Titanium.XML.CharacterData> may be empty.
 */
+length: number,

/**
 * Appends the node `newChild` as a child of this node.
 */
appendChild(newChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Returns a duplicate of this node.
 */
cloneNode(deep: boolean): Titanium$XML$Node,

/**
 * Returns `true` if this node has attributes.
 */
hasAttributes(): boolean,

/**
 * Returns `true` if this node has child nodes.
 */
hasChildNodes(): boolean,

/**
 * Inserts the node `newChild` before the node `refChild`.
 */
insertBefore(newChild: Titanium$XML$Node, refChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Tests whether the DOM implementation supports a specific feature.
 */
isSupported(feature: string, version: string): boolean,

/**
 * Normalizes text and attribute nodes in this node's child hierarchy.
 */
normalize(): void,

/**
 * Removes a child node from this node.
 */
removeChild(oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Replaces the node `oldChild` with the node `newChild`.
 */
replaceChild(newChild: Titanium$XML$Node, oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Append the string to the end of the character data of the node. Upon success, data provides access to the concatenation of data and the string specified. Throws an exception if this node is readonly.
 */
appendData(arg: string): void,

/**
 * Remove a range of characters from the node. Upon success, data and length reflect the change. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
 */
deleteData(offset: number, count: number): void,

/**
 * Insert a string at the specified offset. Throws an exception if this node is readonly, if offset is negative, or if offset is beyond the data's length.
 */
insertData(offset: number, arg: string): void,

/**
 * Replace the characters starting at the specified offset with the specified string. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
 */
replaceData(offset: number, count: number, arg: string): void,

/**
 * Extracts a range of data from the node. Throws an exception if offset is negative, offset is beyond the data's length, or if count is negative.
 */
substringData(offset: number, count: number): string,

/**
 * Breaks this node into two nodes at the specified by offset, and returns a new node of the same type, which contains all the content at and after the offset point. Throws an exception if the specified offset is negative or if this node is read only.
 */
splitText(offset: number): Titanium$XML$Text,

/**
 * Gets the value of the <Titanium.XML.CDATASection.attributes> property.
 */
getAttributes(): Titanium$XML$NamedNodeMap,

/**
 * Gets the value of the <Titanium.XML.CDATASection.data> property.
 */
getData(): string,

/**
 * Sets the value of the <Titanium.XML.CDATASection.data> property.
 */
setData(data: string): void,

/**
 * Gets the value of the <Titanium.XML.CDATASection.length> property.
 */
getLength(): number
} & Titanium$Proxy



/**
 * An interface extending <Titanium.XML.Node> with a set of attributes and methods for accessing character data in the DOM.
 * Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-FF21A306) on Android and iOS. For reasons of compatibility with the javascript engine, text is represented by UTF-8 instead of UTF-16 on Android and iOS.
 */
declare type Titanium$XML$CharacterData = {

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Element](Titanium.XML.Element) node.
 */
+ELEMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Attr](Titanium.XML.Attr) node.
 */
+ATTRIBUTE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Text](Titanium.XML.Text) node.
 */
+TEXT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [CDATASection](Titanium.XML.CDATASection) node.
 */
+CDATA_SECTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [EntityReference](Titanium.XML.EntityReference) node.
 */
+ENTITY_REFERENCE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Entity](Titanium.XML.Entity) node.
 */
+ENTITY_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
 */
+PROCESSING_INSTRUCTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Comment](Titanium.XML.Comment) node.
 */
+COMMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Document](Titanium.XML.Document) node.
 */
+DOCUMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentType](Titanium.XML.DocumentType) node.
 */
+DOCUMENT_TYPE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
 */
+DOCUMENT_FRAGMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Notation](Titanium.XML.Notation) node.
 */
+NOTATION_NODE: number,

/**
 * Name of this node.
 */
+nodeName: string,

/**
 * Content (value) of this node.
 */
nodeValue: string,

/**
 * Content (value) of all text nodes within this node.
 */
+textContent: string,

/**
 * Content (value) of all text nodes within this node.
 */
+text: string,

/**
 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
 */
+nodeType: number,

/**
 * This node's parent node.
 */
+parentNode: Titanium$XML$Node,

/**
 * A <Titanium.XML.NodeList> of this node's children.
 */
+childNodes: Titanium$XML$NodeList,

/**
 * This node's first child.
 */
+firstChild: Titanium$XML$Node,

/**
 * This node's last child.
 */
+lastChild: Titanium$XML$Node,

/**
 * This node's previous sibling.
 */
+previousSibling: Titanium$XML$Node,

/**
 * This node's next sibling.
 */
+nextSibling: Titanium$XML$Node,

/**
 * A map of this node's attributes.
 */
+attributes: Titanium$XML$NamedNodeMap,

/**
 * This node's owning document.
 */
+ownerDocument: Titanium$XML$Document,

/**
 * Namespace URI of this node.
 */
+namespaceURI: string,

/**
 * Namespace prefix of this node.
 */
prefix: string,

/**
 * Local part of the qualified name of this node.
 */
localName: string,

/**
 * The character data of the node that implements this interface. Throws an exception during setting if this node is readonly.
 */
data: string,

/**
 * The number of characters that are available through data and the substringData method. This may have the value zero, i.e., <Titanium.XML.CharacterData> may be empty.
 */
+length: number,

/**
 * Appends the node `newChild` as a child of this node.
 */
appendChild(newChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Returns a duplicate of this node.
 */
cloneNode(deep: boolean): Titanium$XML$Node,

/**
 * Returns `true` if this node has attributes.
 */
hasAttributes(): boolean,

/**
 * Returns `true` if this node has child nodes.
 */
hasChildNodes(): boolean,

/**
 * Inserts the node `newChild` before the node `refChild`.
 */
insertBefore(newChild: Titanium$XML$Node, refChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Tests whether the DOM implementation supports a specific feature.
 */
isSupported(feature: string, version: string): boolean,

/**
 * Normalizes text and attribute nodes in this node's child hierarchy.
 */
normalize(): void,

/**
 * Removes a child node from this node.
 */
removeChild(oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Replaces the node `oldChild` with the node `newChild`.
 */
replaceChild(newChild: Titanium$XML$Node, oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Append the string to the end of the character data of the node. Upon success, data provides access to the concatenation of data and the string specified. Throws an exception if this node is readonly.
 */
appendData(arg: string): void,

/**
 * Remove a range of characters from the node. Upon success, data and length reflect the change. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
 */
deleteData(offset: number, count: number): void,

/**
 * Insert a string at the specified offset. Throws an exception if this node is readonly, if offset is negative, or if offset is beyond the data's length.
 */
insertData(offset: number, arg: string): void,

/**
 * Replace the characters starting at the specified offset with the specified string. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
 */
replaceData(offset: number, count: number, arg: string): void,

/**
 * Extracts a range of data from the node. Throws an exception if offset is negative, offset is beyond the data's length, or if count is negative.
 */
substringData(offset: number, count: number): string,

/**
 * Gets the value of the <Titanium.XML.CharacterData.attributes> property.
 */
getAttributes(): Titanium$XML$NamedNodeMap,

/**
 * Gets the value of the <Titanium.XML.CharacterData.data> property.
 */
getData(): string,

/**
 * Sets the value of the <Titanium.XML.CharacterData.data> property.
 */
setData(data: string): void,

/**
 * Gets the value of the <Titanium.XML.CharacterData.length> property.
 */
getLength(): number
} & Titanium$Proxy



/**
 * Represents the contents of an XML comment.
 */
declare type Titanium$XML$Comment = {

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Element](Titanium.XML.Element) node.
 */
+ELEMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Attr](Titanium.XML.Attr) node.
 */
+ATTRIBUTE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Text](Titanium.XML.Text) node.
 */
+TEXT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [CDATASection](Titanium.XML.CDATASection) node.
 */
+CDATA_SECTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [EntityReference](Titanium.XML.EntityReference) node.
 */
+ENTITY_REFERENCE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Entity](Titanium.XML.Entity) node.
 */
+ENTITY_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
 */
+PROCESSING_INSTRUCTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Comment](Titanium.XML.Comment) node.
 */
+COMMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Document](Titanium.XML.Document) node.
 */
+DOCUMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentType](Titanium.XML.DocumentType) node.
 */
+DOCUMENT_TYPE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
 */
+DOCUMENT_FRAGMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Notation](Titanium.XML.Notation) node.
 */
+NOTATION_NODE: number,

/**
 * Name of this node.
 */
+nodeName: string,

/**
 * Content (value) of this node.
 */
nodeValue: string,

/**
 * Content (value) of all text nodes within this node.
 */
+textContent: string,

/**
 * Content (value) of all text nodes within this node.
 */
+text: string,

/**
 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
 */
+nodeType: number,

/**
 * This node's parent node.
 */
+parentNode: Titanium$XML$Node,

/**
 * A <Titanium.XML.NodeList> of this node's children.
 */
+childNodes: Titanium$XML$NodeList,

/**
 * This node's first child.
 */
+firstChild: Titanium$XML$Node,

/**
 * This node's last child.
 */
+lastChild: Titanium$XML$Node,

/**
 * This node's previous sibling.
 */
+previousSibling: Titanium$XML$Node,

/**
 * This node's next sibling.
 */
+nextSibling: Titanium$XML$Node,

/**
 * A map of this node's attributes.
 */
+attributes: Titanium$XML$NamedNodeMap,

/**
 * This node's owning document.
 */
+ownerDocument: Titanium$XML$Document,

/**
 * Namespace URI of this node.
 */
+namespaceURI: string,

/**
 * Namespace prefix of this node.
 */
prefix: string,

/**
 * Local part of the qualified name of this node.
 */
localName: string,

/**
 * The character data of the node that implements this interface. Throws an exception during setting if this node is readonly.
 */
data: string,

/**
 * The number of characters that are available through data and the substringData method. This may have the value zero, i.e., <Titanium.XML.CharacterData> may be empty.
 */
+length: number,

/**
 * Appends the node `newChild` as a child of this node.
 */
appendChild(newChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Returns a duplicate of this node.
 */
cloneNode(deep: boolean): Titanium$XML$Node,

/**
 * Returns `true` if this node has attributes.
 */
hasAttributes(): boolean,

/**
 * Returns `true` if this node has child nodes.
 */
hasChildNodes(): boolean,

/**
 * Inserts the node `newChild` before the node `refChild`.
 */
insertBefore(newChild: Titanium$XML$Node, refChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Tests whether the DOM implementation supports a specific feature.
 */
isSupported(feature: string, version: string): boolean,

/**
 * Normalizes text and attribute nodes in this node's child hierarchy.
 */
normalize(): void,

/**
 * Removes a child node from this node.
 */
removeChild(oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Replaces the node `oldChild` with the node `newChild`.
 */
replaceChild(newChild: Titanium$XML$Node, oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Append the string to the end of the character data of the node. Upon success, data provides access to the concatenation of data and the string specified. Throws an exception if this node is readonly.
 */
appendData(arg: string): void,

/**
 * Remove a range of characters from the node. Upon success, data and length reflect the change. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
 */
deleteData(offset: number, count: number): void,

/**
 * Insert a string at the specified offset. Throws an exception if this node is readonly, if offset is negative, or if offset is beyond the data's length.
 */
insertData(offset: number, arg: string): void,

/**
 * Replace the characters starting at the specified offset with the specified string. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
 */
replaceData(offset: number, count: number, arg: string): void,

/**
 * Extracts a range of data from the node. Throws an exception if offset is negative, offset is beyond the data's length, or if count is negative.
 */
substringData(offset: number, count: number): string,

/**
 * Gets the value of the <Titanium.XML.Comment.attributes> property.
 */
getAttributes(): Titanium$XML$NamedNodeMap,

/**
 * Gets the value of the <Titanium.XML.Comment.data> property.
 */
getData(): string,

/**
 * Sets the value of the <Titanium.XML.Comment.data> property.
 */
setData(data: string): void,

/**
 * Gets the value of the <Titanium.XML.Comment.length> property.
 */
getLength(): number
} & Titanium$Proxy



/**
 * The <Titanium.XML.DOMImplementation> interface provides a number of methods for performing operations that are independent of any particular instance of the document object model.Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490) on Android and iOS.
 */
declare type Titanium$XML$DOMImplementation = {

/**
 * Creates an <Titanium.XML.Document> object of the specified type with its document element. Raises an exception if qualifiedName is malformed, contains an illegal character, or is inconsistent with namespaceURI. Also raises an exception if doctype has already been used with a different document.
 */
createDocument(
namespaceURI: string,
qualifiedName: string,
doctype: Titanium$XML$DocumentType): Titanium$XML$Document,

/**
 * Creates an empty <Titanium.XML.DocumentType> node. Entity declarations and notations are not made available. Entity reference expansions and default attribute additions do not occur. Raises an exception if qualifiedName is malformed or contains an illegal character.
 */
createDocumentType(
qualifiedName: string,
publicId: string,
systemId: string): Titanium$XML$DocumentType,

/**
 * Test if the <Titanium.XML.DOMImplementation> implements a specific feature.
 */
hasFeature(feature: string, version: string): boolean
} & Titanium$Proxy



/**
 * The DOM Document returned from <Titanium.XML.parseString>.
 */
declare type Titanium$XML$Document = {

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Element](Titanium.XML.Element) node.
 */
+ELEMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Attr](Titanium.XML.Attr) node.
 */
+ATTRIBUTE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Text](Titanium.XML.Text) node.
 */
+TEXT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [CDATASection](Titanium.XML.CDATASection) node.
 */
+CDATA_SECTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [EntityReference](Titanium.XML.EntityReference) node.
 */
+ENTITY_REFERENCE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Entity](Titanium.XML.Entity) node.
 */
+ENTITY_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
 */
+PROCESSING_INSTRUCTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Comment](Titanium.XML.Comment) node.
 */
+COMMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Document](Titanium.XML.Document) node.
 */
+DOCUMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentType](Titanium.XML.DocumentType) node.
 */
+DOCUMENT_TYPE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
 */
+DOCUMENT_FRAGMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Notation](Titanium.XML.Notation) node.
 */
+NOTATION_NODE: number,

/**
 * Name of this node.
 */
+nodeName: string,

/**
 * Content (value) of this node.
 */
nodeValue: string,

/**
 * Content (value) of all text nodes within this node.
 */
+textContent: string,

/**
 * Content (value) of all text nodes within this node.
 */
+text: string,

/**
 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
 */
+nodeType: number,

/**
 * This node's parent node.
 */
+parentNode: Titanium$XML$Node,

/**
 * A <Titanium.XML.NodeList> of this node's children.
 */
+childNodes: Titanium$XML$NodeList,

/**
 * This node's first child.
 */
+firstChild: Titanium$XML$Node,

/**
 * This node's last child.
 */
+lastChild: Titanium$XML$Node,

/**
 * This node's previous sibling.
 */
+previousSibling: Titanium$XML$Node,

/**
 * This node's next sibling.
 */
+nextSibling: Titanium$XML$Node,

/**
 * A map of this node's attributes.
 */
+attributes: Titanium$XML$NamedNodeMap,

/**
 * This node's owning document.
 */
+ownerDocument: Titanium$XML$Document,

/**
 * Namespace URI of this node.
 */
+namespaceURI: string,

/**
 * Namespace prefix of this node.
 */
prefix: string,

/**
 * Local part of the qualified name of this node.
 */
localName: string,

/**
 * An interface to the list of entities that are defined for the document, such as via a Document Type Definition (DTD).
 */
+doctype: Titanium$XML$DocumentType,

/**
 * Root element of this document.
 */
+documentElement: Titanium$XML$Element,

/**
 * [DOMImplementation](Titanium.XML.DOMImplementation) object associated with this
 * document.
 */
+implementation: Titanium$XML$DOMImplementation,

/**
 * Appends the node `newChild` as a child of this node.
 */
appendChild(newChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Returns a duplicate of this node.
 */
cloneNode(deep: boolean): Titanium$XML$Node,

/**
 * Returns `true` if this node has attributes.
 */
hasAttributes(): boolean,

/**
 * Returns `true` if this node has child nodes.
 */
hasChildNodes(): boolean,

/**
 * Inserts the node `newChild` before the node `refChild`.
 */
insertBefore(newChild: Titanium$XML$Node, refChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Tests whether the DOM implementation supports a specific feature.
 */
isSupported(feature: string, version: string): boolean,

/**
 * Normalizes text and attribute nodes in this node's child hierarchy.
 */
normalize(): void,

/**
 * Removes a child node from this node.
 */
removeChild(oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Replaces the node `oldChild` with the node `newChild`.
 */
replaceChild(newChild: Titanium$XML$Node, oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Creates an attribute with the given name.
 */
createAttribute(name: string): Titanium$XML$Attr,

/**
 * Creates an attribute with the given name and namespace.
 */
createAttributeNS(namespaceURI: string, name: string): Titanium$XML$Attr,

/**
 * Creates and returns a [CDATASection](Titanium.XML.CDATASection).
 */
createCDATASection(data: string): Titanium$XML$CDATASection,

/**
 * Creates a [Comment](Titanium.XML.Comment) with the supplied string data.
 */
createComment(data: string): Titanium$XML$Comment,

/**
 * Creates an empty [DocumentFragment](Titanium.XML.DocumentFragment).
 */
createDocumentFragment(): Titanium$XML$DocumentFragment,

/**
 * Creates an element with the given tag name.
 */
createElement(tagName: string): Titanium$XML$Element,

/**
 * Create a new element with the given namespace and name.
 */
createElementNS(namespaceURI: string, name: string): Titanium$XML$Element,

/**
 * Creates an [EntityReference](Titanium.XML.EntityReference) with the given name.
 */
createEntityReference(name: string): Titanium$XML$EntityReference,

/**
 * Creates a processing instruction for inserting into the DOM tree.
 */
createProcessingInstruction(target: string, data: string): Titanium$XML$ProcessingInstruction,

/**
 * Creates a text node.
 */
createTextNode(data: string): Titanium$XML$Text,

/**
 * Returns an [Element](Titanium.XML.Element) that has an ID attribute with the given value.
 */
getElementById(elementId: string): Titanium$XML$Element,

/**
 * Returns a node list of elements in the document which have the given tag.
 */
getElementsByTagName(tagname: string): Titanium$XML$NodeList,

/**
 * Returns a node list of elements in the document which belong to the given namespace and have the given tag name.
 */
getElementsByTagNameNS(namespaceURI: string, localname: string): Titanium$XML$NodeList,

/**
 * Imports a node from another document to this document,
 * without altering or removing the source node from the original document.
 */
importNode(importedNode: Titanium$XML$Node, deep: boolean): Titanium$XML$Node,

/**
 * Gets the value of the <Titanium.XML.Document.attributes> property.
 */
getAttributes(): Titanium$XML$NamedNodeMap,

/**
 * Gets the value of the <Titanium.XML.Document.doctype> property.
 */
getDoctype(): Titanium$XML$DocumentType,

/**
 * Gets the value of the <Titanium.XML.Document.documentElement> property.
 */
getDocumentElement(): Titanium$XML$Element,

/**
 * Gets the value of the <Titanium.XML.Document.implementation> property.
 */
getImplementation(): Titanium$XML$DOMImplementation
} & Titanium$Proxy



/**
 * A lightweight document object used as a container for a group of nodes.
 */
declare type Titanium$XML$DocumentFragment = {

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Element](Titanium.XML.Element) node.
 */
+ELEMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Attr](Titanium.XML.Attr) node.
 */
+ATTRIBUTE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Text](Titanium.XML.Text) node.
 */
+TEXT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [CDATASection](Titanium.XML.CDATASection) node.
 */
+CDATA_SECTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [EntityReference](Titanium.XML.EntityReference) node.
 */
+ENTITY_REFERENCE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Entity](Titanium.XML.Entity) node.
 */
+ENTITY_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
 */
+PROCESSING_INSTRUCTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Comment](Titanium.XML.Comment) node.
 */
+COMMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Document](Titanium.XML.Document) node.
 */
+DOCUMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentType](Titanium.XML.DocumentType) node.
 */
+DOCUMENT_TYPE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
 */
+DOCUMENT_FRAGMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Notation](Titanium.XML.Notation) node.
 */
+NOTATION_NODE: number,

/**
 * Name of this node.
 */
+nodeName: string,

/**
 * Content (value) of this node.
 */
nodeValue: string,

/**
 * Content (value) of all text nodes within this node.
 */
+textContent: string,

/**
 * Content (value) of all text nodes within this node.
 */
+text: string,

/**
 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
 */
+nodeType: number,

/**
 * This node's parent node.
 */
+parentNode: Titanium$XML$Node,

/**
 * A <Titanium.XML.NodeList> of this node's children.
 */
+childNodes: Titanium$XML$NodeList,

/**
 * This node's first child.
 */
+firstChild: Titanium$XML$Node,

/**
 * This node's last child.
 */
+lastChild: Titanium$XML$Node,

/**
 * This node's previous sibling.
 */
+previousSibling: Titanium$XML$Node,

/**
 * This node's next sibling.
 */
+nextSibling: Titanium$XML$Node,

/**
 * A map of this node's attributes.
 */
+attributes: Titanium$XML$NamedNodeMap,

/**
 * This node's owning document.
 */
+ownerDocument: Titanium$XML$Document,

/**
 * Namespace URI of this node.
 */
+namespaceURI: string,

/**
 * Namespace prefix of this node.
 */
prefix: string,

/**
 * Local part of the qualified name of this node.
 */
localName: string,

/**
 * Appends the node `newChild` as a child of this node.
 */
appendChild(newChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Returns a duplicate of this node.
 */
cloneNode(deep: boolean): Titanium$XML$Node,

/**
 * Returns `true` if this node has attributes.
 */
hasAttributes(): boolean,

/**
 * Returns `true` if this node has child nodes.
 */
hasChildNodes(): boolean,

/**
 * Inserts the node `newChild` before the node `refChild`.
 */
insertBefore(newChild: Titanium$XML$Node, refChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Tests whether the DOM implementation supports a specific feature.
 */
isSupported(feature: string, version: string): boolean,

/**
 * Normalizes text and attribute nodes in this node's child hierarchy.
 */
normalize(): void,

/**
 * Removes a child node from this node.
 */
removeChild(oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Replaces the node `oldChild` with the node `newChild`.
 */
replaceChild(newChild: Titanium$XML$Node, oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Gets the value of the <Titanium.XML.DocumentFragment.attributes> property.
 */
getAttributes(): Titanium$XML$NamedNodeMap
} & Titanium$Proxy



/**
 * Each <Titanium.XML.Document> has a `doctype` attribute whose value is either 'null' or a <Titanium.XML.DocumentType> object.
 */
declare type Titanium$XML$DocumentType = {

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Element](Titanium.XML.Element) node.
 */
+ELEMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Attr](Titanium.XML.Attr) node.
 */
+ATTRIBUTE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Text](Titanium.XML.Text) node.
 */
+TEXT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [CDATASection](Titanium.XML.CDATASection) node.
 */
+CDATA_SECTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [EntityReference](Titanium.XML.EntityReference) node.
 */
+ENTITY_REFERENCE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Entity](Titanium.XML.Entity) node.
 */
+ENTITY_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
 */
+PROCESSING_INSTRUCTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Comment](Titanium.XML.Comment) node.
 */
+COMMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Document](Titanium.XML.Document) node.
 */
+DOCUMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentType](Titanium.XML.DocumentType) node.
 */
+DOCUMENT_TYPE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
 */
+DOCUMENT_FRAGMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Notation](Titanium.XML.Notation) node.
 */
+NOTATION_NODE: number,

/**
 * Name of this node.
 */
+nodeName: string,

/**
 * Content (value) of this node.
 */
nodeValue: string,

/**
 * Content (value) of all text nodes within this node.
 */
+textContent: string,

/**
 * Content (value) of all text nodes within this node.
 */
+text: string,

/**
 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
 */
+nodeType: number,

/**
 * This node's parent node.
 */
+parentNode: Titanium$XML$Node,

/**
 * A <Titanium.XML.NodeList> of this node's children.
 */
+childNodes: Titanium$XML$NodeList,

/**
 * This node's first child.
 */
+firstChild: Titanium$XML$Node,

/**
 * This node's last child.
 */
+lastChild: Titanium$XML$Node,

/**
 * This node's previous sibling.
 */
+previousSibling: Titanium$XML$Node,

/**
 * This node's next sibling.
 */
+nextSibling: Titanium$XML$Node,

/**
 * A map of this node's attributes.
 */
+attributes: Titanium$XML$NamedNodeMap,

/**
 * This node's owning document.
 */
+ownerDocument: Titanium$XML$Document,

/**
 * Namespace URI of this node.
 */
+namespaceURI: string,

/**
 * Namespace prefix of this node.
 */
prefix: string,

/**
 * Local part of the qualified name of this node.
 */
localName: string,

/**
 * A <Titanium.XML.NamedNodeMap> containing the general entities, both external and internal, declared in the DTD. Parameter entities are not contained. Duplicates are discarded.
 */
+entities: Titanium$XML$NamedNodeMap,

/**
 * The internal subset as a string.
 */
+internalSubset: string,

/**
 * The name of DTD; i.e., the name immediately following the `DOCTYPE` keyword.
 */
+name: string,

/**
 * A <Titanium.XML.NamedNodeMap> containing the notations declared in the DTD. Duplicates are discarded. Every node in this map also implements the <Titanium.XML.Notation> interface.
 */
+notations: Titanium$XML$NamedNodeMap,

/**
 * The public identifier of the external subset.
 */
+publicId: string,

/**
 * The system identifier of the external subset.
 */
+systemId: string,

/**
 * Appends the node `newChild` as a child of this node.
 */
appendChild(newChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Returns a duplicate of this node.
 */
cloneNode(deep: boolean): Titanium$XML$Node,

/**
 * Returns `true` if this node has attributes.
 */
hasAttributes(): boolean,

/**
 * Returns `true` if this node has child nodes.
 */
hasChildNodes(): boolean,

/**
 * Inserts the node `newChild` before the node `refChild`.
 */
insertBefore(newChild: Titanium$XML$Node, refChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Tests whether the DOM implementation supports a specific feature.
 */
isSupported(feature: string, version: string): boolean,

/**
 * Normalizes text and attribute nodes in this node's child hierarchy.
 */
normalize(): void,

/**
 * Removes a child node from this node.
 */
removeChild(oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Replaces the node `oldChild` with the node `newChild`.
 */
replaceChild(newChild: Titanium$XML$Node, oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Gets the value of the <Titanium.XML.DocumentType.attributes> property.
 */
getAttributes(): Titanium$XML$NamedNodeMap,

/**
 * Gets the value of the <Titanium.XML.DocumentType.entities> property.
 */
getEntities(): Titanium$XML$NamedNodeMap,

/**
 * Gets the value of the <Titanium.XML.DocumentType.internalSubset> property.
 */
getInternalSubset(): string,

/**
 * Gets the value of the <Titanium.XML.DocumentType.name> property.
 */
getName(): string,

/**
 * Gets the value of the <Titanium.XML.DocumentType.notations> property.
 */
getNotations(): Titanium$XML$NamedNodeMap,

/**
 * Gets the value of the <Titanium.XML.DocumentType.publicId> property.
 */
getPublicId(): string,

/**
 * Gets the value of the <Titanium.XML.DocumentType.systemId> property.
 */
getSystemId(): string
} & Titanium$Proxy



/**
 * Represents an element in a DOM document, a <Titanium.XML.Node> defined by a start-tag and end-tag (or an empty tag). Elements may have [attributes](Titanium.XML.Attr) associated with them.
 * Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-745549614) on Android and iOS with some non-standard extensions.
 */
declare type Titanium$XML$Element = {

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Element](Titanium.XML.Element) node.
 */
+ELEMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Attr](Titanium.XML.Attr) node.
 */
+ATTRIBUTE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Text](Titanium.XML.Text) node.
 */
+TEXT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [CDATASection](Titanium.XML.CDATASection) node.
 */
+CDATA_SECTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [EntityReference](Titanium.XML.EntityReference) node.
 */
+ENTITY_REFERENCE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Entity](Titanium.XML.Entity) node.
 */
+ENTITY_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
 */
+PROCESSING_INSTRUCTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Comment](Titanium.XML.Comment) node.
 */
+COMMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Document](Titanium.XML.Document) node.
 */
+DOCUMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentType](Titanium.XML.DocumentType) node.
 */
+DOCUMENT_TYPE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
 */
+DOCUMENT_FRAGMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Notation](Titanium.XML.Notation) node.
 */
+NOTATION_NODE: number,

/**
 * Name of this node.
 */
+nodeName: string,

/**
 * Content (value) of this node.
 */
nodeValue: string,

/**
 * Content (value) of all text nodes within this node.
 */
+textContent: string,

/**
 * Content (value) of all text nodes within this node.
 */
+text: string,

/**
 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
 */
+nodeType: number,

/**
 * This node's parent node.
 */
+parentNode: Titanium$XML$Node,

/**
 * A <Titanium.XML.NodeList> of this node's children.
 */
+childNodes: Titanium$XML$NodeList,

/**
 * This node's first child.
 */
+firstChild: Titanium$XML$Node,

/**
 * This node's last child.
 */
+lastChild: Titanium$XML$Node,

/**
 * This node's previous sibling.
 */
+previousSibling: Titanium$XML$Node,

/**
 * This node's next sibling.
 */
+nextSibling: Titanium$XML$Node,

/**
 * A map of this node's attributes.
 */
+attributes: Titanium$XML$NamedNodeMap,

/**
 * This node's owning document.
 */
+ownerDocument: Titanium$XML$Document,

/**
 * Namespace URI of this node.
 */
+namespaceURI: string,

/**
 * Namespace prefix of this node.
 */
prefix: string,

/**
 * Local part of the qualified name of this node.
 */
localName: string,

/**
 * The name of the element, as defined by its tag.
 */
+tagName: string,

/**
 * Appends the node `newChild` as a child of this node.
 */
appendChild(newChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Returns a duplicate of this node.
 */
cloneNode(deep: boolean): Titanium$XML$Node,

/**
 * Returns `true` if this node has attributes.
 */
hasAttributes(): boolean,

/**
 * Returns `true` if this node has child nodes.
 */
hasChildNodes(): boolean,

/**
 * Inserts the node `newChild` before the node `refChild`.
 */
insertBefore(newChild: Titanium$XML$Node, refChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Tests whether the DOM implementation supports a specific feature.
 */
isSupported(feature: string, version: string): boolean,

/**
 * Normalizes text and attribute nodes in this node's child hierarchy.
 */
normalize(): void,

/**
 * Removes a child node from this node.
 */
removeChild(oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Replaces the node `oldChild` with the node `newChild`.
 */
replaceChild(newChild: Titanium$XML$Node, oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Retrieves an attribute value by name, returning it as a string.
 */
getAttribute(name: string): string,

/**
 * Adds a new attribute. Any attribute with the same name is replaced. Throws an exception if the element is read-only, or if the name contains an illegal character.
 */
setAttribute(name: string, value: string): void,

/**
 * Removes an attribute by name. If the attribute has a default value, it is immediately replaced with this default, including namespace URI and local name. Throws an exception if the element is read-only.
 */
removeAttribute(name: string): void,

/**
 * Retrieves an attribute value by name, returning it as a <Titanium.XML.Attr> object.
 */
getAttributeNode(name: string): Titanium$XML$Attr,

/**
 * Adds a new attribute. Any attribute with the same `nodeName` as the argument is replaced. Throws an exception if the element is read-only, if `newAttr` is from a different document, or if `newAttr` is already an attribute of another element.
 */
setAttributeNode(newAttr: Titanium$XML$Attr): Titanium$XML$Attr,

/**
 * Removes the specified attribute node. If the removed attribute has a default value, it is replaced immediately, with the same namespace and local name as the removed attribute, if applicable. Throws an exception if the element is read-only, or the attribute is not an attribute of the element.
 */
removeAttributeNode(oldAttr: Titanium$XML$Attr): void,

/**
 * Retrieves a <Titanium.XML.NodeList> of all descendant elements with a given tag name, in preorder traversal.
 */
getElementsByTagName(name: string): Titanium$XML$NodeList,

/**
 * Retrieves an attribute value by local name and namespace URI, returning it as a string.
 */
getAttributeNS(namespaceURI: string, localName: string): string,

/**
 * Adds a new attribute. Any attribute with the same local name and namespace URI is present on the element is replaced, with its prefix changed to that of the `qualifiedName` parameter. Throws an exception if the element is read-only, if the name contains an illegal character, or if the qualified name contains an error.
 */
setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void,

/**
 * Removes an attribute by local name and namespace URI. If the attribute has a default value, it is immediately replaced with this default, including namespace URI and local name. Throws an exception if the element is read-only.
 */
removeAttributeNS(namespaceURI: string, localName: string): void,

/**
 * Retrieves an attribute value by local name and namespace URI, returning it as a <Titanium.XML.Attr> object.
 */
getAttributeNodeNS(namespaceURI: string, localName: string): Titanium$XML$Attr,

/**
 * Adds a new attribute. Any attribute with the same local name and namespace URI is replaced. Throws an exception if the element is read-only, if `newAttr` is from a different document, or if `newAttr` is already an attribute of another element.
 */
setAttributeNodeNS(newAttr: Titanium$XML$Attr): Titanium$XML$Attr,

/**
 * Retrieves a <Titanium.XML.NodeList> of all descendant elements with a given local name and namespace URI, in preorder traversal.
 */
getElementsByTagNameNS(namespaceURI: string, localName: string): Titanium$XML$NodeList,

/**
 * Determines whether or not an attribute with the given name is available in the element, or has a default value.
 */
hasAttribute(name: string): boolean,

/**
 * Determines whether or not an attribute with the given name is available in the element, or has a default value.
 */
hasAttributeNS(namespaceURI: string, localName: string): boolean,

/**
 * Gets the value of the <Titanium.XML.Element.attributes> property.
 */
getAttributes(): Titanium$XML$NamedNodeMap,

/**
 * Gets the value of the <Titanium.XML.Element.tagName> property.
 */
getTagName(): string
} & Titanium$Proxy



/**
 * This interface represents an entity, either parsed or unparsed, in an XML document. Note that this models the entity itself not the entity declaration. The nodeName attribute that is inherited from Node contains the name of the entity. An Entity node does not have any parent.
 * Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-527DCFF2) on Android and iOS.
 */
declare type Titanium$XML$Entity = {

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Element](Titanium.XML.Element) node.
 */
+ELEMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Attr](Titanium.XML.Attr) node.
 */
+ATTRIBUTE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Text](Titanium.XML.Text) node.
 */
+TEXT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [CDATASection](Titanium.XML.CDATASection) node.
 */
+CDATA_SECTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [EntityReference](Titanium.XML.EntityReference) node.
 */
+ENTITY_REFERENCE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Entity](Titanium.XML.Entity) node.
 */
+ENTITY_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
 */
+PROCESSING_INSTRUCTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Comment](Titanium.XML.Comment) node.
 */
+COMMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Document](Titanium.XML.Document) node.
 */
+DOCUMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentType](Titanium.XML.DocumentType) node.
 */
+DOCUMENT_TYPE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
 */
+DOCUMENT_FRAGMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Notation](Titanium.XML.Notation) node.
 */
+NOTATION_NODE: number,

/**
 * Name of this node.
 */
+nodeName: string,

/**
 * Content (value) of this node.
 */
nodeValue: string,

/**
 * Content (value) of all text nodes within this node.
 */
+textContent: string,

/**
 * Content (value) of all text nodes within this node.
 */
+text: string,

/**
 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
 */
+nodeType: number,

/**
 * This node's parent node.
 */
+parentNode: Titanium$XML$Node,

/**
 * A <Titanium.XML.NodeList> of this node's children.
 */
+childNodes: Titanium$XML$NodeList,

/**
 * This node's first child.
 */
+firstChild: Titanium$XML$Node,

/**
 * This node's last child.
 */
+lastChild: Titanium$XML$Node,

/**
 * This node's previous sibling.
 */
+previousSibling: Titanium$XML$Node,

/**
 * This node's next sibling.
 */
+nextSibling: Titanium$XML$Node,

/**
 * A map of this node's attributes.
 */
+attributes: Titanium$XML$NamedNodeMap,

/**
 * This node's owning document.
 */
+ownerDocument: Titanium$XML$Document,

/**
 * Namespace URI of this node.
 */
+namespaceURI: string,

/**
 * Namespace prefix of this node.
 */
prefix: string,

/**
 * Local part of the qualified name of this node.
 */
localName: string,

/**
 * For unparsed entities, the name of the notation for the entity. For parsed entities, this is `null`.
 */
+notationName: string,

/**
 * The public identifier associated with the entity, if specified. If the public identifier was not specified, this is `null`.
 */
+publicId: string,

/**
 * The system identifier associated with the entity, if specified. If the system identifier was not specified, this is null.
 */
+systemId: string,

/**
 * Appends the node `newChild` as a child of this node.
 */
appendChild(newChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Returns a duplicate of this node.
 */
cloneNode(deep: boolean): Titanium$XML$Node,

/**
 * Returns `true` if this node has attributes.
 */
hasAttributes(): boolean,

/**
 * Returns `true` if this node has child nodes.
 */
hasChildNodes(): boolean,

/**
 * Inserts the node `newChild` before the node `refChild`.
 */
insertBefore(newChild: Titanium$XML$Node, refChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Tests whether the DOM implementation supports a specific feature.
 */
isSupported(feature: string, version: string): boolean,

/**
 * Normalizes text and attribute nodes in this node's child hierarchy.
 */
normalize(): void,

/**
 * Removes a child node from this node.
 */
removeChild(oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Replaces the node `oldChild` with the node `newChild`.
 */
replaceChild(newChild: Titanium$XML$Node, oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Gets the value of the <Titanium.XML.Entity.attributes> property.
 */
getAttributes(): Titanium$XML$NamedNodeMap,

/**
 * Gets the value of the <Titanium.XML.Entity.notationName> property.
 */
getNotationName(): string,

/**
 * Gets the value of the <Titanium.XML.Entity.publicId> property.
 */
getPublicId(): string,

/**
 * Gets the value of the <Titanium.XML.Entity.systemId> property.
 */
getSystemId(): string
} & Titanium$Proxy



/**
 * Represents an XML entity reference.
 */
declare type Titanium$XML$EntityReference = {

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Element](Titanium.XML.Element) node.
 */
+ELEMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Attr](Titanium.XML.Attr) node.
 */
+ATTRIBUTE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Text](Titanium.XML.Text) node.
 */
+TEXT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [CDATASection](Titanium.XML.CDATASection) node.
 */
+CDATA_SECTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [EntityReference](Titanium.XML.EntityReference) node.
 */
+ENTITY_REFERENCE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Entity](Titanium.XML.Entity) node.
 */
+ENTITY_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
 */
+PROCESSING_INSTRUCTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Comment](Titanium.XML.Comment) node.
 */
+COMMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Document](Titanium.XML.Document) node.
 */
+DOCUMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentType](Titanium.XML.DocumentType) node.
 */
+DOCUMENT_TYPE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
 */
+DOCUMENT_FRAGMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Notation](Titanium.XML.Notation) node.
 */
+NOTATION_NODE: number,

/**
 * Name of this node.
 */
+nodeName: string,

/**
 * Content (value) of this node.
 */
nodeValue: string,

/**
 * Content (value) of all text nodes within this node.
 */
+textContent: string,

/**
 * Content (value) of all text nodes within this node.
 */
+text: string,

/**
 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
 */
+nodeType: number,

/**
 * This node's parent node.
 */
+parentNode: Titanium$XML$Node,

/**
 * A <Titanium.XML.NodeList> of this node's children.
 */
+childNodes: Titanium$XML$NodeList,

/**
 * This node's first child.
 */
+firstChild: Titanium$XML$Node,

/**
 * This node's last child.
 */
+lastChild: Titanium$XML$Node,

/**
 * This node's previous sibling.
 */
+previousSibling: Titanium$XML$Node,

/**
 * This node's next sibling.
 */
+nextSibling: Titanium$XML$Node,

/**
 * A map of this node's attributes.
 */
+attributes: Titanium$XML$NamedNodeMap,

/**
 * This node's owning document.
 */
+ownerDocument: Titanium$XML$Document,

/**
 * Namespace URI of this node.
 */
+namespaceURI: string,

/**
 * Namespace prefix of this node.
 */
prefix: string,

/**
 * Local part of the qualified name of this node.
 */
localName: string,

/**
 * Appends the node `newChild` as a child of this node.
 */
appendChild(newChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Returns a duplicate of this node.
 */
cloneNode(deep: boolean): Titanium$XML$Node,

/**
 * Returns `true` if this node has attributes.
 */
hasAttributes(): boolean,

/**
 * Returns `true` if this node has child nodes.
 */
hasChildNodes(): boolean,

/**
 * Inserts the node `newChild` before the node `refChild`.
 */
insertBefore(newChild: Titanium$XML$Node, refChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Tests whether the DOM implementation supports a specific feature.
 */
isSupported(feature: string, version: string): boolean,

/**
 * Normalizes text and attribute nodes in this node's child hierarchy.
 */
normalize(): void,

/**
 * Removes a child node from this node.
 */
removeChild(oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Replaces the node `oldChild` with the node `newChild`.
 */
replaceChild(newChild: Titanium$XML$Node, oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Gets the value of the <Titanium.XML.EntityReference.attributes> property.
 */
getAttributes(): Titanium$XML$NamedNodeMap
} & Titanium$Proxy



/**
 * A key-value paired map that maps String objects to <Titanium.XML.Node> objects.
 * Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1780488922) on Android and iOS.
 */
declare type Titanium$XML$NamedNodeMap = {

/**
 * The number of nodes in the map. The valid range of child node indices is 0-`length`-1, inclusive.
 */
+length: number,

/**
 * Retrieves a node specified by name.
 */
getNamedItem(name: string): Titanium$XML$Node,

/**
 * Adds a node using its `nodeName` attribute. If a node with that name is already present, it is replaced. Throws an exception if the argument is from a different document, the map is read-only, or the argument is an attribute of another element.
 */
setNamedItem(node: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Removes a node from the map specified by name. When this map contains attributes attached to an element, if the removed attribtue is known to have a default, it is replaced with that value.
 */
removeNamedItem(name: string): Titanium$XML$Node,

/**
 * Retrieves the node at the specified index of the map. Note that NamedNodeMaps are not ordered.
 */
item(index: number): Titanium$XML$Node,

/**
 * Retrieves a node specified by name and namespace. Returns `null` if no matching node is in the map.
 */
getNamedItemNS(namespaceURI: string, localName: string): Titanium$XML$Node,

/**
 * Adds a node using its `namespaceURI` and `localName` attributes. If a node with that name is already present, it is replaced. Throws an exception if the argument is from a different document, the map is read-only, or the argument is an attribute of another element.
 */
setNamedItemNS(node: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Removes a node from the map specified by local name and namespace URI. When this map contains attributes attached to an element, if the removed attribtue is known to have a default, it is replaced with that value. Returns the node removed from the map, or `null` if there is no corresponding node.
 */
removeNamedItemNS(namespaceURI: string, localName: string): Titanium$XML$Node,

/**
 * Gets the value of the <Titanium.XML.NamedNodeMap.length> property.
 */
getLength(): number
} & Titanium$Proxy



/**
 * A single node in the [Document](Titanium.XML.Document) tree.
 */
declare type Titanium$XML$Node = {

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Element](Titanium.XML.Element) node.
 */
+ELEMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Attr](Titanium.XML.Attr) node.
 */
+ATTRIBUTE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Text](Titanium.XML.Text) node.
 */
+TEXT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [CDATASection](Titanium.XML.CDATASection) node.
 */
+CDATA_SECTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [EntityReference](Titanium.XML.EntityReference) node.
 */
+ENTITY_REFERENCE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Entity](Titanium.XML.Entity) node.
 */
+ENTITY_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
 */
+PROCESSING_INSTRUCTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Comment](Titanium.XML.Comment) node.
 */
+COMMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Document](Titanium.XML.Document) node.
 */
+DOCUMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentType](Titanium.XML.DocumentType) node.
 */
+DOCUMENT_TYPE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
 */
+DOCUMENT_FRAGMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Notation](Titanium.XML.Notation) node.
 */
+NOTATION_NODE: number,

/**
 * Name of this node.
 */
+nodeName: string,

/**
 * Content (value) of this node.
 */
nodeValue: string,

/**
 * Content (value) of all text nodes within this node.
 */
+textContent: string,

/**
 * Content (value) of all text nodes within this node.
 */
+text: string,

/**
 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
 */
+nodeType: number,

/**
 * This node's parent node.
 */
+parentNode: Titanium$XML$Node,

/**
 * A <Titanium.XML.NodeList> of this node's children.
 */
+childNodes: Titanium$XML$NodeList,

/**
 * This node's first child.
 */
+firstChild: Titanium$XML$Node,

/**
 * This node's last child.
 */
+lastChild: Titanium$XML$Node,

/**
 * This node's previous sibling.
 */
+previousSibling: Titanium$XML$Node,

/**
 * This node's next sibling.
 */
+nextSibling: Titanium$XML$Node,

/**
 * A map of this node's attributes.
 */
+attributes: Titanium$XML$NamedNodeMap,

/**
 * This node's owning document.
 */
+ownerDocument: Titanium$XML$Document,

/**
 * Namespace URI of this node.
 */
+namespaceURI: string,

/**
 * Namespace prefix of this node.
 */
prefix: string,

/**
 * Local part of the qualified name of this node.
 */
localName: string,

/**
 * Appends the node `newChild` as a child of this node.
 */
appendChild(newChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Returns a duplicate of this node.
 */
cloneNode(deep: boolean): Titanium$XML$Node,

/**
 * Returns `true` if this node has attributes.
 */
hasAttributes(): boolean,

/**
 * Returns `true` if this node has child nodes.
 */
hasChildNodes(): boolean,

/**
 * Inserts the node `newChild` before the node `refChild`.
 */
insertBefore(newChild: Titanium$XML$Node, refChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Tests whether the DOM implementation supports a specific feature.
 */
isSupported(feature: string, version: string): boolean,

/**
 * Normalizes text and attribute nodes in this node's child hierarchy.
 */
normalize(): void,

/**
 * Removes a child node from this node.
 */
removeChild(oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Replaces the node `oldChild` with the node `newChild`.
 */
replaceChild(newChild: Titanium$XML$Node, oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Gets the value of the <Titanium.XML.Node.attributes> property.
 */
getAttributes(): Titanium$XML$NamedNodeMap
} & Titanium$Proxy



/**
 * A list of <Titanium.XML.Node> objects. Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-536297177) on Android and iOS.
 */
declare type Titanium$XML$NodeList = {

/**
 * The length of the node list.
 */
+length: number,

/**
 * Returns the <Titanium.XML.Node> object at the specified index.
 */
item(index: number): Titanium$XML$Node,

/**
 * Gets the value of the <Titanium.XML.NodeList.length> property.
 */
getLength(): number
} & Titanium$Proxy



/**
 * Represents a notation declared in the DTD.  Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-5431D1B9) on Android and iOS.
 */
declare type Titanium$XML$Notation = {

/**
 * The public identifier of this notation. If the public identifier was not specified, this is `null`.
 */
+publicId: string,

/**
 * The system identifier of this notation. If the system identifier was not specified, this is `null`.
 */
+systemId: string,

/**
 * Gets the value of the <Titanium.XML.Notation.publicId> property.
 */
getPublicId(): string,

/**
 * Gets the value of the <Titanium.XML.Notation.systemId> property.
 */
getSystemId(): string
} & Titanium$Proxy



/**
 * A way to keep processor-specific information in the text of the document. Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1004215813) on Android and iOS.
 */
declare type Titanium$XML$ProcessingInstruction = {

/**
 * Retrieve the content of this processing instruction. This from the first non white space character after the target to the character immediatly preceding the ?>. When setting a processing instruction, a DOMException may be thrown on an invalid instruction.
 */
data: string,

/**
 * Retrieve the target of this processing instruction. XML defines this as being the first token following the markup that begins the processing instruction.
 */
+target: string,

/**
 * Gets the value of the <Titanium.XML.ProcessingInstruction.data> property.
 */
getData(): string,

/**
 * Sets the value of the <Titanium.XML.ProcessingInstruction.data> property.
 */
setData(data: string): void,

/**
 * Gets the value of the <Titanium.XML.ProcessingInstruction.target> property.
 */
getTarget(): string
} & Titanium$Proxy



/**
 * Represents the textual content of an <Titanium.XML.Element> or <Titanium.XML.Attr> Implements the [DOM Level 2 API](https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1312295772) on Android and iOS.
 */
declare type Titanium$XML$Text = {

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Element](Titanium.XML.Element) node.
 */
+ELEMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Attr](Titanium.XML.Attr) node.
 */
+ATTRIBUTE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Text](Titanium.XML.Text) node.
 */
+TEXT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [CDATASection](Titanium.XML.CDATASection) node.
 */
+CDATA_SECTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [EntityReference](Titanium.XML.EntityReference) node.
 */
+ENTITY_REFERENCE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify an
 * [Entity](Titanium.XML.Entity) node.
 */
+ENTITY_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [ProcessingInstruction](Titanium.XML.ProcessingInstruction) node.
 */
+PROCESSING_INSTRUCTION_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Comment](Titanium.XML.Comment) node.
 */
+COMMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Document](Titanium.XML.Document) node.
 */
+DOCUMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentType](Titanium.XML.DocumentType) node.
 */
+DOCUMENT_TYPE_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [DocumentFragment](Titanium.XML.DocumentFragment) node.
 */
+DOCUMENT_FRAGMENT_NODE: number,

/**
 * Used with [nodeType](Titanium.XML.Node.nodeType) to identify a
 * [Notation](Titanium.XML.Notation) node.
 */
+NOTATION_NODE: number,

/**
 * Name of this node.
 */
+nodeName: string,

/**
 * Content (value) of this node.
 */
nodeValue: string,

/**
 * Content (value) of all text nodes within this node.
 */
+textContent: string,

/**
 * Content (value) of all text nodes within this node.
 */
+text: string,

/**
 * This node's type. One of `ELEMENT_NODE`, `ATTRIBUTE_NODE`, `TEXT_NODE`, `CDATA_SECTION_NODE`,
 * `ENTITY_REFERENCE_NODE`, `ENTITY_NODE`, `PROCESSING_INSTRUCTION_NODE`, `COMMENT_NODE`,
 * `DOCUMENT_NODE`, `DOCUMENT_TYPE_NODE`, `DOCUMENT_FRAGMENT_NODE`, `NOTATION_NODE`.
 */
+nodeType: number,

/**
 * This node's parent node.
 */
+parentNode: Titanium$XML$Node,

/**
 * A <Titanium.XML.NodeList> of this node's children.
 */
+childNodes: Titanium$XML$NodeList,

/**
 * This node's first child.
 */
+firstChild: Titanium$XML$Node,

/**
 * This node's last child.
 */
+lastChild: Titanium$XML$Node,

/**
 * This node's previous sibling.
 */
+previousSibling: Titanium$XML$Node,

/**
 * This node's next sibling.
 */
+nextSibling: Titanium$XML$Node,

/**
 * A map of this node's attributes.
 */
+attributes: Titanium$XML$NamedNodeMap,

/**
 * This node's owning document.
 */
+ownerDocument: Titanium$XML$Document,

/**
 * Namespace URI of this node.
 */
+namespaceURI: string,

/**
 * Namespace prefix of this node.
 */
prefix: string,

/**
 * Local part of the qualified name of this node.
 */
localName: string,

/**
 * The character data of the node that implements this interface. Throws an exception during setting if this node is readonly.
 */
data: string,

/**
 * The number of characters that are available through data and the substringData method. This may have the value zero, i.e., <Titanium.XML.CharacterData> may be empty.
 */
+length: number,

/**
 * Appends the node `newChild` as a child of this node.
 */
appendChild(newChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Returns a duplicate of this node.
 */
cloneNode(deep: boolean): Titanium$XML$Node,

/**
 * Returns `true` if this node has attributes.
 */
hasAttributes(): boolean,

/**
 * Returns `true` if this node has child nodes.
 */
hasChildNodes(): boolean,

/**
 * Inserts the node `newChild` before the node `refChild`.
 */
insertBefore(newChild: Titanium$XML$Node, refChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Tests whether the DOM implementation supports a specific feature.
 */
isSupported(feature: string, version: string): boolean,

/**
 * Normalizes text and attribute nodes in this node's child hierarchy.
 */
normalize(): void,

/**
 * Removes a child node from this node.
 */
removeChild(oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Replaces the node `oldChild` with the node `newChild`.
 */
replaceChild(newChild: Titanium$XML$Node, oldChild: Titanium$XML$Node): Titanium$XML$Node,

/**
 * Append the string to the end of the character data of the node. Upon success, data provides access to the concatenation of data and the string specified. Throws an exception if this node is readonly.
 */
appendData(arg: string): void,

/**
 * Remove a range of characters from the node. Upon success, data and length reflect the change. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
 */
deleteData(offset: number, count: number): void,

/**
 * Insert a string at the specified offset. Throws an exception if this node is readonly, if offset is negative, or if offset is beyond the data's length.
 */
insertData(offset: number, arg: string): void,

/**
 * Replace the characters starting at the specified offset with the specified string. Throws an exception if this node is readonly, if offset is negative, offset is beyond the data's length, or if count is negative.
 */
replaceData(offset: number, count: number, arg: string): void,

/**
 * Extracts a range of data from the node. Throws an exception if offset is negative, offset is beyond the data's length, or if count is negative.
 */
substringData(offset: number, count: number): string,

/**
 * Breaks this node into two nodes at the specified by offset, and returns a new node of the same type, which contains all the content at and after the offset point. Throws an exception if the specified offset is negative or if this node is read only.
 */
splitText(offset: number): Titanium$XML$Text,

/**
 * Gets the value of the <Titanium.XML.Text.attributes> property.
 */
getAttributes(): Titanium$XML$NamedNodeMap,

/**
 * Gets the value of the <Titanium.XML.Text.data> property.
 */
getData(): string,

/**
 * Sets the value of the <Titanium.XML.Text.data> property.
 */
setData(data: string): void,

/**
 * Gets the value of the <Titanium.XML.Text.length> property.
 */
getLength(): number
} & Titanium$Proxy



      declare var npm$namespace$Titanium$Yahoo: {
        addEventListener: typeof Titanium$Yahoo$addEventListener,
removeEventListener: typeof Titanium$Yahoo$removeEventListener,
fireEvent: typeof Titanium$Yahoo$fireEvent,
applyProperties: typeof Titanium$Yahoo$applyProperties,
yql: typeof Titanium$Yahoo$yql,
getBubbleParent: typeof Titanium$Yahoo$getBubbleParent,
setBubbleParent: typeof Titanium$Yahoo$setBubbleParent,
getApiName: typeof Titanium$Yahoo$getApiName,
getLifecycleContainer: typeof Titanium$Yahoo$getLifecycleContainer,
setLifecycleContainer: typeof Titanium$Yahoo$setLifecycleContainer,
        bubbleParent: typeof Titanium$Yahoo$bubbleParent,
apiName: typeof Titanium$Yahoo$apiName,
lifecycleContainer: typeof Titanium$Yahoo$lifecycleContainer,
        
        
        
      }

/**
 * Indicates if the proxy will bubble an event to its parent.
 */
declare var Titanium$Yahoo$bubbleParent: boolean;


/**
 * The name of the API that this proxy corresponds to.
 */
declare var Titanium$Yahoo$apiName: string;


/**
 * The Window or TabGroup whose Activity lifecycle should be triggered on the proxy.
 */
declare var Titanium$Yahoo$lifecycleContainer: Titanium$UI$Window | Titanium$UI$TabGroup;


/**
 * Adds the specified callback as an event listener for the named event.
 */
declare function Titanium$Yahoo$addEventListener(name: string, callback: (param0: any) => any): void



/**
 * Removes the specified callback as an event listener for the named event.
 */
declare function Titanium$Yahoo$removeEventListener(name: string, callback: (param0: any) => any): void



/**
 * Fires a synthesized event to any registered listeners.
 */
declare function Titanium$Yahoo$fireEvent(name: string, event: any): void



/**
 * Applies the properties to the proxy.
 */
declare function Titanium$Yahoo$applyProperties(props: any): void



/**
 * invoke a Yahoo YQL query
 */
declare function Titanium$Yahoo$yql(yql: string, callback: (param0: YQLResponse) => any): void



/**
 * Gets the value of the <Titanium.Yahoo.bubbleParent> property.
 */
declare function Titanium$Yahoo$getBubbleParent(): boolean



/**
 * Sets the value of the <Titanium.Yahoo.bubbleParent> property.
 */
declare function Titanium$Yahoo$setBubbleParent(bubbleParent: boolean): void



/**
 * Gets the value of the <Titanium.Yahoo.apiName> property.
 */
declare function Titanium$Yahoo$getApiName(): string



/**
 * Gets the value of the <Titanium.Yahoo.lifecycleContainer> property.
 */
declare function Titanium$Yahoo$getLifecycleContainer(): Titanium$UI$Window | Titanium$UI$TabGroup



/**
 * Sets the value of the <Titanium.Yahoo.lifecycleContainer> property.
 */
declare function Titanium$Yahoo$setLifecycleContainer(lifecycleContainer: Titanium$UI$Window): void



/**
 * Sets the value of the <Titanium.Yahoo.lifecycleContainer> property.
 */
declare function Titanium$Yahoo$setLifecycleContainer(lifecycleContainer: Titanium$UI$TabGroup): void

	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudACLsResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of ACL objects, if any exist.
 */
acls?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudACLsCheckResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Dictionary of permissions.
 */
permission?: any
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudChatsResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `chats` objects, if any exist.
 */
chats?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudChatGroupsResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `chat_groups` objects, if any exist.
 */
chat_groups?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudCheckinsResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `checkins` objects, if any exist.
 */
checkins?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudClientsResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * IP address of client.
 */
ip_address?: string,

/**
 * Location of client.
 */
location?: any
} 
	
/**
 * Argument passed to the callback as a request is transmitted or received.
 */
declare interface CloudStreamProgress {

/**
 * A value from 0.0-1.0 with the progress of the exchange.
 */
progress?: number,

/**
 * The URL for the request, to help identify it.
 */
url?: string
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudEmailsResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudEventsResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `event` objects, if any exist.
 */
events?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudEventOccurrencesResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `event` objects, if any exist.
 */
event_occurrences?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudFilesResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `file` objects, if any exist.
 */
files?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudFriendsResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `user` objects, if any exist.
 */
users?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudFriendRequestsResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `user` objects, if any exist.
 */
friend_requests?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudGeoFenceResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of geo-fence objects, if any exist.
 */
geo_fences?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudKeyValuesResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `keyvalues` objects, if any exist.
 */
keyvalues?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudLikesResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `like` objects, if any exist.
 */
likes?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudMessagesResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `message` objects, if any exist.
 */
messages?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudObjectsResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `classname` objects, if any exist.
 */
classname?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudPhotoCollectionsResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `collections` objects, if any exist.
 */
collections?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudPhotoCollectionsPhotosResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `photos` objects, if any exist.
 */
photos?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudPhotosResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `photos` objects, if any exist.
 */
photos?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudPlacesResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `places` objects, if any exist.
 */
places?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudPostsResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `posts` objects, if any exist.
 */
posts?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudPushNotificationsResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string
} 
	
/**
 * Argument passed to the callback when a request finishes successfully.
 */
declare interface CloudPushNotificationsQueryChannelResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Array of `push_channel` names, if any exist.
 */
push_channels?: string[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully.
 */
declare interface CloudPushNotificationsShowChannelResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Dictionary containing counts of devices subscribed to a push channel, grouped by platform.
 */
devices?: any
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudPushNotificationsQueryResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `subscription` objects, if any exist.
 */
subscriptions?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully.
 */
declare interface CloudPushSchedulesResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Array of [schedules push notifications](https://docs.appcelerator.com/arrowdb/latest/#!/api/PushSchedules), if any exist.
 */
push_schedules?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudReviewsResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `reviews` objects, if any exist.
 */
reviews?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudSocialIntegrationsResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `users` objects, if any exist.
 */
users?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudStatusesResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `statuses` objects, if any exist.
 */
statuses?: any[]
} 
	
/**
 * Properties for the modal dialog used in 3-Legged OAuth
 */
declare interface CloudUsersSecureDialog {

/**
 * Defines the title for the dialog.
 */
title?: string
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudUsersResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Set of `user` objects, if any exist.
 */
users?: any[]
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CloudUsersSecureResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Indicates whether the request failed.
 */
error?: boolean,

/**
 * Meta data, if any returned.
 */
meta?: any,

/**
 * Error code, if any returned.
 */
code?: number,

/**
 * Error message, if any returned.
 */
message?: string,

/**
 * Identifies the current access token when using 3-Legged OAuth.
 */
accessToken?: string,

/**
 * Indicates the number of seconds before the access token expires.
 */
expiresIn?: number
} 
	
/**
 * Simple object for specifying token retrieval options to [retrieveDeviceToken](Modules.CloudPush.retrieveDeviceToken).
 */
declare interface CloudPushNotificationConfig {

/**
 * Callback function called when the push registration is successfully completed.
 */
success?: (param0: CloudPushNotificationSuccessArg) => any,

/**
 * Callback function called when an error occurs during registration.
 */
error?: (param0: CloudPushNotificationErrorArg) => any
} 
	
/**
 * A simple object passed to the [retrieveDeviceToken](Modules.CloudPush.retrieveDeviceToken) success callback.
 */
declare interface CloudPushNotificationSuccessArg {

/**
 * The device token which this device was registered for.
 */
deviceToken?: string
} 
	
/**
 * A simple object passed to the [retrieveDeviceToken](Modules.CloudPush.retrieveDeviceToken) error callback.
 */
declare interface CloudPushNotificationErrorArg {

/**
 * Description of the error.
 */
error?: string
} 
	
/**
 * Optional Titanium modules.
 */
declare interface Modules {} 
	
/**
 * Simple object passed to the
 * [startActivityForResult](Titanium.Android.Activity.startActivityForResult) callback.
 */
declare interface ActivityResult {

/**
 * Unique, automatically generated integer request code.
 */
requestCode?: number,

/**
 * Integer result code that the started activity passed to
 * [setResult](Titanium.Android.Activity.setResult).
 */
resultCode?: number,

/**
 * Intent that can contain data returned to the caller. Data can be attached to
 * the intent as "extras").
 */
intent?: Titanium$Android$Intent
} 
	
/**
 * Options passed to <Titanium.Android.createServiceIntent>.
 */
declare interface ServiceIntentOptions {

/**
 * URL for the service's JavaScript.
 */
url?: string,

/**
 * One of the `START_*` constants from <Titanium.Android> to specify the "stickiness" of the Service when Android shuts down the host application.
 */
startMode?: number
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface RequestPermissionAccessResult {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface CalendarPermissionResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code, if any returned.
 */
code?: number
} 
	
/**
 * Parameter for wakeLock
 */
declare interface wakeLockOptions {

/**
 * Minimum time the device will be switched on (plus device switch-off time)
 */
time?: number,

/**
 * Wake lock level and flag. See [PowerManager.newWakeLock in the Android API Reference](https://developer.android.com/reference/android/os/PowerManager.html#newWakeLock(int,%20java.lang.String))
 */
flags?: number
} 
	
/**
 * Dictionary of options for the <Titanium.UI.OptionDialog.show> method.
 */
declare interface showParams {

/**
 * String to be used as title for the dialog.
 */
title?: string,

/**
 * String to be used as a message for the dialog.
 */
message?: string,

/**
 * Array of String instances.
 */
buttonNames?: string[],

/**
 * Array of String instances.
 */
options?: string[],

/**
 * Determines whether to animate the dialog as it is shown.
 */
animated?: boolean,

/**
 * View to which to attach the dialog.
 */
view?: Titanium$UI$View,

/**
 * Positions the arrow of the option dialog relative to the attached view's dimensions.
 */
rect?: Dimension
} 
	
/**
 * Dictionary describing the arguments passed to the application on startup.
 * Use the [getArguments](Titanium.App.getArguments) method to retrieve the launch options.
 */
declare interface launchOptions {

/**
 * This key indicates that the application was launched in order to open
 * the specified URL.
 */
url?: string,

/**
 * This key indicates that the application was launched by another
 * application with the specified bundle ID.
 */
source?: string,

/**
 * If set to `true`, this key indicates that the application was launched in response to an
 * incoming location event.
 */
launchOptionsLocationKey?: boolean
} 
	
/**
 * Response when receiving pending or local notifications
 * in <Titanium.App.iOS.UserNotificationCenter.getPendingNotifications> and
 * <Titanium.App.iOS.UserNotificationCenter.getDeliveredNotifications>.
 */
declare interface UserNotificationCallbackResponse {

/**
 * An array of identifiers used to create notifications.
 */
notifications?: UserNotificationDictionary[]
} 
	
/**
 * Dictionary of notification data used in the array of `notifications`
 * when receiving pending or local notifications in
 * <Titanium.App.iOS.UserNotificationCenter.getPendingNotifications> and
 * <Titanium.App.iOS.UserNotificationCenter.getDeliveredNotifications>.
 */
declare interface UserNotificationDictionary {

/**
 * Title of the notification.
 */
alertTitle?: string,

/**
 * Subtitle of the notification.
 */
alertSubtitle?: string,

/**
 * Alert button text ('Open', by default) or home text ('Press Home to unlock', by default)
 * type: String
 */
alertAction?: string,

/**
 * Alert message.
 */
alertBody?: string,

/**
 * Image displayed instead of `Default.png` when launching the application.
 */
alertLaunchImage?: string,

/**
 * Application badge value.
 */
badge?: number,

/**
 * Date and time when the notification was configured to fire.
 */
date?: Date,

/**
 * Path to the sound file configured to play when the notification was fired.
 */
sound?: string,

/**
 * Timezone of the date when the notification was configured to fire.
 */
timezone?: string,

/**
 * Custom data object.
 */
userInfo?: any,

/**
 * Category identifier of the notification.
 */
category?: string,

/**
 * The notification identifier.
 */
identifier: string,

/**
 * Region of the notification.
 */
region?: any
} 
	
/**
 * Dictionary object of parameters used to register the application with local notifications using
 * the <Titanium.App.iOS.registerUserNotificationSettings> method.
 */
declare interface GetUserNotificationSettings {

/**
 * Notification types to use.
 */
types?: number[],

/**
 * Set of categories of user notification actions required by the applicaiton to use.
 */
categories?: Titanium$App$iOS$UserNotificationCategory[],

/**
 * The current authorization status for using notifications.
 */
authorizationStatus?: number,

/**
 * The current sound settings.
 */
soundSetting?: number,

/**
 * The current badge settings.
 */
badgeSetting?: number,

/**
 * The current alert settings.
 */
alertSetting?: number,

/**
 * The current notication-center settings.
 */
notificationCenterSetting?: number,

/**
 * The current lock-screen settings.
 */
lockScreenSetting?: number,

/**
 * The current CarPlay settings.
 */
carPlaySetting?: number,

/**
 * The authorization status to play sounds for critical alerts.
 * Available in Titanium SDK 7.4.0 and later.
 */
criticalAlertSetting?: number,

/**
 * A Boolean value indicating the system displays a button for in-app notification settings.
 * Available in Titanium SDK 7.4.0 and later.
 */
providesAppNotificationSettings?: number,

/**
 * The current alert style used to display notifications.
 */
alertStyle?: number
} 
	
/**
 * Dictionary object of parameters used to create a notification using
 * <Titanium.App.iOS.scheduleLocalNotification>.
 */
declare interface NotificationParams {

/**
 * The notification identifier.
 */
identifier: string,

/**
 * Alert button text ('Open', by default) or home text ('Press Home to unlock', by default)
 * to display.
 */
alertAction?: string,

/**
 * Alert message to display.
 */
alertBody?: string,

/**
 * Alert title to display.
 */
alertTitle?: string,

/**
 * Alert subtitle to display.
 */
alertSubtitle?: string,

/**
 * Image to display instead of `Default.png` when launching the application.
 */
alertLaunchImage?: string,

/**
 * Notification attachments to display.
 */
attachments?: UserNotificationAttachment[],

/**
 * Application badge value.
 */
badge?: number,

/**
 * String identifier of category of actions to be displayed for an interactive notification.
 */
category?: string,

/**
 * Date and time for the notification to occur.
 */
date?: Date,

/**
 * Interval to repeat the notification. One of `weekly`, `daily`, `yearly,` `monthly`.
 */
repeat?: string,

/**
 * Path to the sound file to play when notification occurs, relative to the `Resources` folder.
 */
sound?: string,

/**
 * Timezone of the date configured for the notification. If not set, the system timezone is used.
 */
timezone?: string,

/**
 * Data to pass to the application with the notification event.
 */
userInfo?: any,

/**
 * Region the notification will be triggered in. Allowed parameter are:
 * - `latitude`: Latitude of the location center, in decimal degrees (required).
 * - `longitude`: Longitude of the location center, in decimal degrees (required).
 * - `triggersOnce`: Whether or not the notification will only fire once (optional, default: true).
 */
region?: any,

/**
 * The string the notification adds to the category's summary format string.
 */
summaryArgument?: string,

/**
 * The number of items the notification adds to the category's summary format string.
 */
summaryArgumentCount?: string
} 
	
/**
 * Provide at least the property `identifier` and `url` property to identify a local
 * image, sound or video. If your media is invalid, the API will throw an error log and
 * skip the invalid attachment.
 */
declare interface UserNotificationAttachment {

/**
 * The identifier of this attachment.
 */
identifier: string,

/**
 * The URL to the attachment's data. If you have obtained this attachment from
 * the notification-center then the URL will be security-scoped.
 */
url: string,

/**
 * An additional dictionary of options to provide.
 */
options?: any
} 
	
/**
 * Dictionary object of parameters used to identify an incoming URL that is handled
 * by the application.
 */
declare interface LaunchOptionsType {

/**
 * The application or service that triggered the handled URL.
 */
source?: string,

/**
 * The url that was triggered by the application or service.
 */
url?: string
} 
	
/**
 * Dictionary object of parameters used to register the application with local notifications using
 * the <Titanium.App.iOS.registerUserNotificationSettings> method.
 * To retrieve the current notification settings, use the
 * <Titanium.App.iOS.UserNotificationCenter.requestUserNotificationSettings> method.
 */
declare interface UserNotificationSettings {

/**
 * Notification types to use.
 */
types?: number[],

/**
 * Set of categories of user notification actions required by the applicaiton to use.
 */
categories?: Titanium$App$iOS$UserNotificationCategory[]
} 
	
/**
 * Simple object used to specify options for [imageAsCropped](Titanium.Blob.imageAsCropped).
 */
declare interface ImageAsCroppedDict {

/**
 * Width to crop this image to.
 */
width?: number,

/**
 * Height to crop this image to.
 */
height?: number,

/**
 * Left coordinate of the cropped rectangle within the source image.
 */
x?: number,

/**
 * Top coordinate of the cropped rectangle within the source image.
 */
y?: number
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface EventsAuthorizationResponse {

/**
 * Indicates whether the request succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code, if any returned.
 */
code?: number
} 
	
/**
 * Dictionary containing `daysOfWeek` and `week`.
 */
declare interface daysOfTheWeekDictionary {

/**
 * The day of the week. Values are from 1 to 7, with Sunday being 1.
 */
daysOfWeek?: number,

/**
 * The week number of the day of the week.
 * Values range from -53 to 53. A negative value indicates a value from the end of
 * the range. 0 indicates the week number is irrelevant.
 */
week?: number
} 
	
/**
 * Dictionary containing either `endDate` or `occurrenceCount` property.
 */
declare interface recurrenceEndDictionary {

/**
 * End date of the recurrence end, or undefined if the recurrence end is count-based.
 */
endDate?: Date,

/**
 * Occurrence count of the recurrence end, or 0 if the recurrence end is date-based.
 */
occurrenceCount?: number
} 
	
/**
 * Named parameters for <Titanium.Codec.encodeNumber>.
 */
declare interface EncodeNumberDict {

/**
 * Number to encode.
 */
source: number,

/**
 * Destination buffer.
 */
dest: Titanium$Buffer,

/**
 * Encoding type to use.
 */
type: string,

/**
 * Index in the `dest` buffer of the first byte of encoded data.
 */
position?: number,

/**
 * Byte order to encode with.
 */
byteOrder?: number
} 
	
/**
 * Named parameters for <Titanium.Codec.decodeNumber>.
 */
declare interface DecodeNumberDict {

/**
 * Buffer to decode.
 */
source: Titanium$Buffer,

/**
 * The encoding type to use.
 */
type: string,

/**
 * Index in the `source` buffer of the first byte of data to decode.
 */
position?: number,

/**
 * byte order to decode with.
 */
byteOrder?: number
} 
	
/**
 * Named parameters for <Titanium.Codec.encodeString>.
 */
declare interface EncodeStringDict {

/**
 * Source string to encode.
 */
source: string,

/**
 * Destination buffer.
 */
dest: Titanium$Buffer,

/**
 * Index in the `dest` buffer of the first byte of the encoded string.
 */
destPosition?: number,

/**
 * Position in `source` to start encoding.
 */
sourcePosition?: number,

/**
 * Number of characters in `source` to encode.
 */
sourceLength?: number,

/**
 * Character encoding to use when encoding this string to bytes.
 */
charset?: string
} 
	
/**
 * Named parameters for <Titanium.Codec.decodeString>.
 */
declare interface DecodeStringDict {

/**
 * Buffer to decode.
 */
source: Titanium$Buffer,

/**
 * Index in the `source` buffer of the first byte of data to decode.
 */
position?: number,

/**
 * Number of bytes to decode.
 */
length?: number,

/**
 * Character set to use when encoding this string to bytes.
 */
charset?: string
} 
	
/**
 * Dictionary of options for the <Titanium.Contacts.showContacts> method.
 */
declare interface showContactsParams {

/**
 * Determines whether to animate the show/hide of the contacts picker (iPhone, iPad only.)
 */
animated?: boolean,

/**
 * Field names to show when selecting properties. By default, shows all available.
 */
fields?: string[],

/**
 * Function to call when selection is canceled.
 */
cancel?: (param0: any) => any,

/**
 * Function to call when a person is selected. Must not be used with `selectedProperty` property.
 */
selectedPerson?: (param0: any) => any,

/**
 * Function to call when a property is selected. Must not be used with `selectedPerson`
 * property.
 * Note: If ringtone or texttone is selected, null values are returned, since these are unsupported
 * by Apple.
 * Since iOS 9.0, there is a native apple issue whereby it may return null if the birthday property
 * is selected on certain device models.
 * The callback contains the selected property and a 'person' object of type <Titanium.Contacts.Person>.
 * Since iOS 9.0, apple only returns the person object with partial information. Currently it is known to
 * at least contain the selected property and fullName.
 */
selectedProperty?: (param0: any) => any
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface ContactsAuthorizationResponse {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number
} 
	
/**
 * Properties used in any event or callback which needs to report a success or failure.
 */
declare interface ErrorResponse {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number
} 
	
/**
 * Properties used in any event or callback which needs to report a success.
 */
declare interface SuccessResponse {

/**
 * Indicates if the operation succeeded. Returns `true`.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0.
 */
code?: number
} 
	
/**
 * Properties used in any event or callback which needs to report a failure.
 */
declare interface FailureResponse {

/**
 * Indicates if the operation succeeded. Returns `false`.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns a non-zero value.
 */
code?: number
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface RequestStorageAccessResult {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number
} 
	
/**
 * Argument passed to the [getCurrentPosition](Titanium.Geolocation.getCurrentPosition) callback.
 */
declare interface LocationResults {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number,

/**
 * If `success` is true, object describing the location provider generating this update.
 */
provider?: LocationProviderDict,

/**
 * If `success` is true, actual location data for this update.
 */
coords?: LocationCoordinates
} 
	
/**
 * Simple object holding the data for a location update.
 */
declare interface LocationCoordinates {

/**
 * Latitude of the location update, in decimal degrees.
 */
latitude?: number,

/**
 * Longitude of the location update, in decimal degrees.
 */
longitude?: number,

/**
 * Altitude of the location update, in meters.
 */
altitude?: number,

/**
 * Accuracy of the location update, in meters.
 */
accuracy?: number,

/**
 * Vertical accuracy of the location update, in meters.
 */
altitudeAccuracy?: number,

/**
 * Compass heading, in degrees. May be unknown if device is not moving. On
 * iOS, a negative value indicates that the heading data is not valid.
 */
heading?: number,

/**
 * Current speed in meters/second. On iOS, a negative value indicates that the
 * heading data is not valid or the accuracy is configured incorrectly.
 * Note: Due to the Apple Geolocation API, set the <Titanium.Geolocation.accuracy>
 * property to <Titanium.Geolocation.ACCURACY_BEST_FOR_NAVIGATION> in order to properly
 * measure speed changes and prevent the app from returning negative values.
 */
speed?: number,

/**
 * Timestamp for this location update, in milliseconds.
 */
timestamp?: number,

/**
 * The floor of the building on which the user is located.
 */
floor?: LocationCoordinatesFloor
} 
	
/**
 * Simple object holding floor of the building on which the user is located.
 */
declare interface LocationCoordinatesFloor {

/**
 * The logical floor of the building.
 */
level?: number
} 
	
/**
 * Simple object returned in the callback from the
 * [forwardGeocoder](Titanium.Geolocation.forwardGeocoder) method.
 * Note that Android includes a number of extra fields.
 */
declare interface ForwardGeocodeResponse {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number,

/**
 * Estimated accuracy of the geocoding, in meters.
 */
accuracy?: number,

/**
 * Longitude of the geocoded address.
 */
longitude?: string,

/**
 * Latitude of the geocoded address.
 */
latitude?: string,

/**
 * Street name, without street address.
 */
street?: string,

/**
 * Street name.
 */
street1?: string,

/**
 * City name.
 */
city?: string,

/**
 * First line of region.
 */
region1?: string,

/**
 * Not used.
 */
region2?: string,

/**
 * Postal code.
 */
postalCode?: string,

/**
 * Country name.
 */
country?: string,

/**
 * Country code.
 */
countryCode?: string,

/**
 * Country code. Same as `countryCode`.
 */
country_code?: string,

/**
 * Display address. Identical to `address`.
 */
displayAddress?: string,

/**
 * Full address.
 */
address?: string
} 
	
/**
 * Argument passed to the [getCurrentHeading](Titanium.Geolocation.getCurrentHeading) callback.
 */
declare interface HeadingResponse {

/**
 * Indicates a successful operation.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code.
 */
code?: number,

/**
 * If `success` is true, the actual heading data.
 */
heading?: HeadingData
} 
	
/**
 * Simple object holding compass heading data.
 */
declare interface HeadingData {

/**
 * Accuracy of the compass heading, in platform-specific units.
 */
accuracy?: number,

/**
 * Declination in degrees from magnetic North.
 */
magneticHeading?: number,

/**
 * Declination in degrees from true North.
 */
trueHeading?: number,

/**
 * Timestamp for the heading data, in milliseconds.
 */
timestamp?: number,

/**
 * Raw geomagnetic data for the X axis.
 */
x?: number,

/**
 * Raw geomagnetic data for the Y axis.
 */
y?: number,

/**
 * Raw geomagnetic data for the Z axis.
 */
z?: number
} 
	
/**
 * Simple object describing a location provider.
 */
declare interface LocationProviderDict {

/**
 * Accuracy of the location provider, either fine (1) or coarse (2).
 */
accuracy?: number,

/**
 * Name of the location provider.
 */
name?: string,

/**
 * Power consumption for this provider, either low (1), medium (2), or high (3).
 */
power?: number
} 
	
/**
 * Simple object returned in the callback from the
 * [reverseGeocoder](Titanium.Geolocation.reverseGeocoder) method.
 */
declare interface ReverseGeocodeResponse {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number,

/**
 * An array of reverse-geocoded addresses matching the requested location.
 */
places?: GeocodedAddress[]
} 
	
/**
 * Simple object representing a place, returned in the callback from the
 * [reverseGeocoder](Titanium.Geolocation.reverseGeocoder) method.
 */
declare interface GeocodedAddress {

/**
 * Street name, without street address.
 */
street?: string,

/**
 * Street name.
 */
street1?: string,

/**
 * City name.
 */
city?: string,

/**
 * First line of region.
 */
region1?: string,

/**
 * Not used.
 */
region2?: string,

/**
 * Postal code
 */
postalCode?: string,

/**
 * Postal code. To be replaced by `postalCode`
 */
zipcode?: string,

/**
 * Country name.
 */
country?: string,

/**
 * Country code.
 */
countryCode?: string,

/**
 * Country code. To be replaced by `countryCode`.
 */
country_code?: string,

/**
 * Longitude of the geocoded point.
 */
longitude?: number,

/**
 * Latitude of the geocoded point.
 */
latitude?: number,

/**
 * Display address. Identical to `address`.
 */
displayAddress?: string,

/**
 * Full address.
 */
address?: string
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface LocationAuthorizationResponse {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number
} 
	
/**
 * Simple object passed to the [scanMediaFiles](Titanium.Media.Android.scanMediaFiles) callback.
 */
declare interface MediaScannerResponse {

/**
 * Path to the media file that was scanned.
 */
path?: string,

/**
 * URI to the file if it was scanned and added to the media library, or `null`
 * if the file was not added.
 */
uri?: string
} 
	
/**
 * An abstract type to represent a metadata item inside the `metadata` event (iOS only).
 */
declare interface TiMetadataItemType {

/**
 * The key of the metadata item, e.g. "title".
 */
key?: string,

/**
 * The key-path of the metadata item.
 */
keySpace?: string,

/**
 * The value of the metadata item. Can be represented as various types.
 */
value?: string | number | boolean,

/**
 * A dictionary of the additional attributes.
 */
extraAttributes?: any
} 
	
/**
 * Simple object for specifying options to [openMusicLibrary](Titanium.Media.openMusicLibrary).
 */
declare interface MusicLibraryOptionsType {

/**
 * Function to call when the music library selection is made.
 */
success?: (param0: MusicLibraryResponseType) => any,

/**
 * Function to call upon receiving an error.
 */
error?: (param0: FailureResponse) => any,

/**
 * Function to call if the user presses the cancel button.
 */
cancel?: (param0: FailureResponse) => any,

/**
 * Specifies that the library should be hidden automatically after media selection is completed.
 */
autohide?: boolean,

/**
 * Boolean if the dialog should be animated when showing and hiding.
 */
animated?: boolean,

/**
 * An array of media type constants defining selectable media.
 */
mediaTypes?: number | number[],

/**
 * Set to `true` to allow the user to select multiple items from the library.
 */
allowMultipleSelections?: boolean
} 
	
/**
 * Simple object passed to the [openMusicLibrary](Titanium.Media.openMusicLibrary)
 * `success` callback function.
 */
declare interface MusicLibraryResponseType {

/**
 * A single representative of the selected items.
 */
representative?: Titanium$Media$Item,

/**
 * A list of all the items chosen by the user.
 */
items?: Titanium$Media$Item[],

/**
 * Media types in this collection, represented as the bitwise OR of the media type
 * values for all media types represented in `items`.
 */
types?: number
} 
	
/**
 * A specifier for a media library query. By default, filters perform an exact match.
 */
declare interface MediaQueryType {

/**
 * A constant that specifies the ordering of the result array.
 */
grouping?: number,

/**
 * The media type to filter on.
 */
mediaType?: MediaQueryInfoType | number,

/**
 * The title to filter on. Value should be a String.
 */
title?: MediaQueryInfoType | string,

/**
 * The album title to filter on. Value should be a String.
 */
albumTitle?: MediaQueryInfoType | string,

/**
 * The artist to filter on. Value should be a String.
 */
artist?: MediaQueryInfoType | string,

/**
 * The album artist to filter on. Value should be a String.
 */
albumArtist?: MediaQueryInfoType | string,

/**
 * The genre to filter on. Value should be a String.
 */
genre?: MediaQueryInfoType | string,

/**
 * The composer to filter on. Value should be a String.
 */
composer?: MediaQueryInfoType | string,

/**
 * Filter by whether or not the item is a compilation.
 * The value should be a Boolean.
 */
isCompilation?: MediaQueryInfoType | boolean,

/**
 * The play count to filter on. Value should be a Number.
 */
playCount?: MediaQueryInfoType | number,

/**
 * The persistent ID to filter on. Value should be a Number.
 */
persistentID?: MediaQueryInfoType | number,

/**
 * The album persistent ID to filter on. Value should be a Number.
 */
albumPersistentID?: MediaQueryInfoType | number,

/**
 * The album artist persistent ID to filter on. Value should be a Number.
 */
albumArtistPersistentID?: MediaQueryInfoType | number,

/**
 * The genre persistent ID to filter on. Value should be a Number.
 */
genrePersistentID?: MediaQueryInfoType | number,

/**
 * The composer persistent ID to filter on. Value should be a Number.
 */
composerPersistentID?: MediaQueryInfoType | number,

/**
 * Filter by whether or not the item is a cloud item.
 * Value should be a Boolean.
 */
isCloudItem?: MediaQueryInfoType | boolean,

/**
 * Filter by whether or not the item is a protected asset.
 * Value should be a Boolean.
 */
hasProtectedAsset?: MediaQueryInfoType | boolean,

/**
 * The podcast title to filter on. Value should be a String.
 */
podcastTitle?: MediaQueryInfoType | string,

/**
 * The podcast persistent ID to filter on. Value should be a Number.
 */
podcastPersistentID?: MediaQueryInfoType | number
} 
	
/**
 * A full query descriptor for a filtering predicate.
 */
declare interface MediaQueryInfoType {

/**
 * The value for the given predicate. See the descriptions in <MediaQueryType> for information about which properties require which values.
 */
value?: number | string | boolean,

/**
 * Whether or not the predicate is for an exact match.  The default is `true`.
 */
exact?: boolean
} 
	
/**
 * Simple object for specifying options to [showCamera](Titanium.Media.showCamera).
 */
declare interface CameraOptionsType {

/**
 * Function to call when the camera is closed after a successful capture/selection.
 */
success?: (param0: CameraMediaItemType) => any,

/**
 * Function to call upon receiving an error.
 */
error?: (param0: FailureResponse) => any,

/**
 * Function to call if the user presses the cancel button.
 */
cancel?: (param0: FailureResponse) => any,

/**
 * Specifies if the camera should be hidden automatically after the media capture is completed.
 */
autohide?: boolean,

/**
 * Specifies if the dialog should be animated upon showing and hiding.
 */
animated?: boolean,

/**
 * Specifies if the media should be saved to the photo gallery upon successful capture.
 */
saveToPhotoGallery?: boolean,

/**
 * Specifies if the media should be editable after capture/selection.
 */
allowEditing?: boolean,

/**
 * Array of media type constants to allow. Note: If you want to select live photos, iOS only  allows
 * you to select existing live photos from the gallery, capturing new live photos is not supported by
 * iOS public API, yet.
 */
mediaTypes?: string[],

/**
 * Maximum duration (in milliseconds) to allow video capture before completing.
 */
videoMaximumDuration?: number,

/**
 * Constant to indicate the video quality during capture.
 */
videoQuality?: number,

/**
 * Opens the camera with the specified camera direction.
 */
whichCamera?: number,

/**
 * Indicates if the built-in camera controls should be displayed.
 */
showControls?: boolean,

/**
 * View to added as an overlay to the camera UI (on top).
 */
overlay?: Titanium$UI$View,

/**
 * Transformation matrix to apply to the camera or photogallery view.
 */
transform?: Titanium$UI$Matrix2D,

/**
 * Show the camera in a popover.
 */
inPopOver?: boolean,

/**
 * View to position the camera or photo gallery popover on top of.
 */
popoverView?: Titanium$UI$View,

/**
 * Controls the type of arrow and position of the popover.
 */
arrowDirection?: number,

/**
 * Determines if the camera preview should rotate or not.
 */
autorotate?: boolean
} 
	
/**
 * Simple object for specifying options to
 * [openPhotoGallery](Titanium.Media.openPhotoGallery).
 */
declare interface PhotoGalleryOptionsType {

/**
 * Function to call when the photo gallery is closed after a successful selection.
 */
success?: (param0: CameraMediaItemType) => any,

/**
 * Function to call upon receiving an error.
 */
error?: (param0: FailureResponse) => any,

/**
 * Function to call if the user presses the cancel button.
 */
cancel?: (param0: FailureResponse) => any,

/**
 * Specifies if the photo gallery should be hidden automatically after the media
 * selection is completed.
 */
autohide?: boolean,

/**
 * Specifies if the dialog should be animated upon showing and hiding.
 */
animated?: boolean,

/**
 * Specifies if the media should be editable after capture/selection.
 */
allowEditing?: boolean,

/**
 * Array of media type constants to allow.
 * Live photos is only supported on the iOS platform, starting with iOS 9.1. If you want
 * to allow live photos with <Titanium.Media.MEDIA_TYPE_LIVEPHOTO>, you also need to specify
 * at least <Titanium.Media.MEDIA_TYPE_PHOTO> as a fallback. If you do not allow live
 * photos, they still can be selected, but will be represented as a normal static photo.
 */
mediaTypes?: string[],

/**
 * View to position the photo gallery popover on top of.
 */
popoverView?: Titanium$UI$View,

/**
 * Controls the type of arrow and position of the popover.
 */
arrowDirection?: number,

/**
 * Specifies if the user should be able to select multiple photos.
 */
allowMultiple?: boolean
} 
	
/**
 * A media object from the camera or photo gallery.
 */
declare interface CameraMediaItemType {

/**
 * Indicates if the operation succeeded. Returns `true`.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0.
 */
code?: number,

/**
 * The media object, as a [Blob](Titanium.Blob).
 */
media?: Titanium$Blob,

/**
 * The type of media, either `MEDIA_TYPE_PHOTO`, `MEDIA_TYPE_LIVEPHOTO` or `MEDIA_TYPE_VIDEO` defined in <Titanium.Media>.
 */
mediaType?: string,

/**
 * Simple object defining the user's selected crop rectangle, or `null` if the user has not edited the photo.
 */
cropRect?: CropRectType,

/**
 * Simple object defining the preview image size.
 */
previewRect?: PreviewRectType,

/**
 * The live photo object, as a <Titanium.UI.iOS.LivePhoto> and
 * `undefined` if no live photo is selected.
 */
livePhoto?: Titanium$UI$iOS$LivePhoto
} 
	
/**
 * Simple object for describing the crop rectangle for an image.
 */
declare interface CropRectType {

/**
 * X coordinate of the crop rectangle's upper-left corner.
 */
x?: number,

/**
 * Y coordinate of the crop rectangle's upper-left corner.
 */
y?: number,

/**
 * Width of the crop rectangle, in pixels.
 */
width?: number,

/**
 * Height of the crop rectangle, in pixels.
 */
height?: number
} 
	
/**
 * Simple object for describing the preview image rectangle. This will be undefined when custom camera overlay is not used.
 */
declare interface PreviewRectType {

/**
 * Width preview image, in pixels.
 */
width?: number,

/**
 * Height preview image, in pixels.
 */
height?: number
} 
	
/**
 * Options passed to <Titanium.Media.previewImage>.
 */
declare interface PreviewImageOptions {

/**
 * The image to preview. Must be a blob based on a file, such as from <Titanium.Filesystem.File.read>.
 */
image?: Titanium$Blob,

/**
 * Function to be called back if the preview succeeds. No info is passed.
 */
success?: (param0: any) => any,

/**
 * Function called back if the preview fails. Check the `message` property of passed back parameter.
 */
error?: (param0: PreviewImageError) => any
} 
	
/**
 * The parameter passed to the `error` callback of <PreviewImageOptions>.
 */
declare interface PreviewImageError {

/**
 * Indicates if the operation succeeded. Returns `false`.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code, if applicable.
 */
code?: number,

/**
 * Description of the error.
 */
message?: string
} 
	
/**
 * The parameter passed to the <Titanium.Media.takeScreenshot> callback.
 */
declare interface ScreenshotResult {

/**
 * The screenshot image.
 */
media?: Titanium$Blob
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface MediaAuthorizationResponse {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface RequestCameraAccessResult {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface RequestMusicLibraryAccessResult {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number
} 
	
/**
 * Argument passed to the callback when a request finishes successfully or erroneously.
 */
declare interface RequestPhotoGalleryAccessResult {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number
} 
	
/**
 * An Object describing the current audio route.
 */
declare interface RouteDescription {

/**
 * An Array of current input ports for the session. See the `AUDIO_SESSION_PORT` constants.
 */
inputs?: any[],

/**
 * An Array of current output ports for the session. See the `AUDIO_SESSION_PORT` constants.
 */
outputs?: any[]
} 
	
/**
 * Simple object passed to the thumbnail callback in response to the
 * [requestThumbnailImagesAtTimes](Titanium.Media.VideoPlayer.requestThumbnailImagesAtTimes)
 * method.
 */
declare interface ThumbnailResponse {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number,

/**
 * Thumbnail image, as a `Blob`.
 */
image?: Titanium$Blob,

/**
 * Time offset for the thumbnail, in seconds.
 */
time?: number
} 
	
/**
 * Simple object used to describe the size of a movie.
 */
declare interface MovieSize {

/**
 * Width of the movie.
 */
width?: number,

/**
 * Height of the movie.
 */
height?: number
} 
	
/**
 * The protocol that the <Titanium.Network.HTTPClient.securityManager> must implement.
 */
declare interface SecurityManagerProtocol {

/**
 * Returns if the security manager will participate in authentication of this end point.
 */
willHandleURL(url: any): boolean,

/**
 * The <APSConnectionDelegate> for this connection.
 */
connectionDelegateForUrl(url: any): APSConnectionDelegate,

/**
 * Returns an array of objects implementing the [X509TrustManager](https://developer.android.com/reference/javax/net/ssl/X509TrustManager.html) protocol for the SSL Context.
 */
getTrustManagers(proxy: any): any[],

/**
 * Returns an array of objects implementing the [X509KeyManager](https://developer.android.com/reference/javax/net/ssl/X509KeyManager.html) protocol for the SSL Context.
 */
getKeyManagers(proxy: any): any[]
} 
	
/**
 * An extension of the [NSURLConnectionDelegate](https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intf/NSURLConnectionDelegate) protocol to allow users to participate in authentication and resource management for this HTTPClient.
 */
declare interface APSConnectionDelegate {} 
	
/**
 * An Object describing the current ready state. See [onreadystatechange](Titanium.Network.HTTPClient.onreadystatechange) for more information.
 */
declare interface ReadyStatePayload {

/**
 * The state for which `onreadystatechange` was invoked. Set to one of `Titanium.Network.HTTPClient` ready-state constants
 */
readyState?: number
} 
	
/**
 * Simple object for specifying push notification options to
 * [registerForPushNotifications](Titanium.Network.registerForPushNotifications).
 */
declare interface PushNotificationConfig {

/**
 * Array of `NOTIFICATION_TYPE` constants that the application would like to receive.
 */
types?: number[],

/**
 * Callback function called when the push registration is successfully completed.
 */
success?: (param0: PushNotificationSuccessArg) => any,

/**
 * Callback function called when an error occurs during registration.
 */
error?: (param0: PushNotificationErrorArg) => any,

/**
 * Callback function invoked upon receiving a new push notification.
 */
callback?: (param0: PushNotificationData) => any
} 
	
/**
 * A simple object passed to the
 * [registerForPushNotifications](Titanium.Network.registerForPushNotifications) success callback.
 */
declare interface PushNotificationSuccessArg {

/**
 * Indicates if the operation succeeded. Returns `true`.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0.
 */
code?: number,

/**
 * The value of this string is always "remote".
 */
type?: string,

/**
 * The device token which this device was registered for.
 */
deviceToken?: string
} 
	
/**
 * A simple object passed to the
 * [registerForPushNotifications](Titanium.Network.registerForPushNotifications) error callback.
 */
declare interface PushNotificationErrorArg {

/**
 * Indicates if the operation succeeded. Returns `false`.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns a non-zero value.
 */
code?: number,

/**
 * The value of this string is always "remote".
 */
type?: string
} 
	
/**
 * A simple object representing a push notification.
 */
declare interface PushNotificationData {

/**
 * The `userinfo` dictionary passed to the Apple Push Notification Service.
 */
data?: any,

/**
 * Boolean indicating if notification was received while app was in background.
 * This property became available in Titanium Mobile 3.1.0 for iOS.
 */
inBackground?: boolean
} 
	
/**
 * Argument object passed to the [connected](Titanium.Network.Socket.TCP.connected) callback when the socket connects.
 */
declare interface ConnectedCallbackArgs {

/**
 * Socket instance that has been connected.
 */
socket?: Titanium$Network$Socket$TCP
} 
	
/**
 * Object passed to the error callback when the socket enters the [ERROR](Titanium.Network.Socket.ERROR) state.
 */
declare interface ErrorCallbackArgs {

/**
 * Indicates if the operation succeeded. Returns `false`.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns a non-zero value.
 */
code?: number,

/**
 * Socket that experienced the error.
 */
socket?: Titanium$Network$Socket$TCP,

/**
 * The error code of the error (potentially system-dependent).
 */
errorCode?: number
} 
	
/**
 * Argument object passed to the [accepted](Titanium.Network.Socket.TCP.accepted)
 * callback when a listener accepts a connection.
 */
declare interface AcceptedCallbackArgs {

/**
 * Socket which received the connection.
 */
socket?: Titanium$Network$Socket$TCP,

/**
 * Socket which represents the inbound connection.
 */
inbound?: Titanium$Network$Socket$TCP
} 
	
/**
 * Options object for the [accept](Titanium.Network.Socket.TCP.accept) method.
 */
declare interface AcceptDict {

/**
 * Timeout, in milliseconds, for all `write` operations.
 */
timeout?: number,

/**
 * Callback to be fired when the socket enters the [ERROR](Titanium.Network.Socket.ERROR) state.
 */
error?: (param0: ErrorCallbackArgs) => any
} 
	
/**
 * Simple object holding the data for a logical cpu.
 */
declare interface CPU {

/**
 * General description of the CPU
 */
model?: string,

/**
 * Speed of the CPU in MHz
 */
speed?: number,

/**
 * A collection of timings for this logical CPU.
 */
times?: CPUTimes
} 
	
/**
 * Simple object holding the data for a logical cpu execution times.
 */
declare interface CPUTimes {

/**
 * The number of milliseconds the CPU has spent in user mode.
 */
user?: number,

/**
 * The number of milliseconds the CPU has spent in nice mode.
 */
nice?: number,

/**
 * The number of milliseconds the CPU has spent in sys mode.
 */
sys?: number,

/**
 * The number of milliseconds the CPU has spent in idle mode.
 */
idle?: number,

/**
 * The number of milliseconds the CPU has spent in irq mode.
 */
irq?: number
} 
	
/**
 * Argument passed to [createStream](Titanium.Stream.createStream).
 */
declare interface CreateStreamArgs {

/**
 * Object that the stream will read from or write to.
 */
source?: Titanium$Blob | Titanium$Buffer,

/**
 * Mode to open the stream in.
 */
mode?: number
} 
	
/**
 * Argument passed to the read callback when an asynchronous [read](Titanium.Stream.read) operation
 * finishes.
 */
declare interface ReadCallbackArgs {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number,

/**
 * Stream being read.
 */
source?: Titanium$IOStream,

/**
 * Number of bytes processed, or -1 in the event of an error or end of stream.
 */
bytesProcessed?: number,

/**
 * Whether an error was encountered. Set to 1 in the case of an error, 0
 * otherwise.
 */
errorState?: number,

/**
 * Text description of the error.
 */
errorDescription?: string
} 
	
/**
 * Argument passed to the write callback when an asynchronous
 * [write](Titanium.Stream.write) operation
 * finishes.
 */
declare interface WriteCallbackArgs {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number,

/**
 * Stream being written to.
 */
source?: Titanium$IOStream,

/**
 * Number of bytes processed, or -1 in the event of an error or end of stream.
 */
bytesProcessed?: number,

/**
 * Whether an error was encountered. Set to 1 in the case of an error, 0
 * otherwise.
 */
errorState?: number,

/**
 * Text description of the error.
 */
errorDescription?: string
} 
	
/**
 * Argument passed to the callback when an asynchronous
 * [writeStream](Titanium.Stream.writeStream) operation finishes.
 */
declare interface WriteStreamCallbackArgs {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number,

/**
 * Stream being read from.
 */
fromStream?: Titanium$IOStream,

/**
 * Stream being written to.
 */
toStream?: Titanium$IOStream,

/**
 * Number of bytes processed, or -1 in the event of an error or end of stream.
 */
bytesProcessed?: number,

/**
 * Whether an error was encountered. Set to 1 in the case of an error, 0
 * otherwise.
 */
errorState?: number,

/**
 * Text description of the error.
 */
errorDescription?: string
} 
	
/**
 * Argument passed to the callback each time the
 * [pump](Titanium.Stream.pump) operation has new data to deliver.
 */
declare interface PumpCallbackArgs {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number,

/**
 * Stream being read from.
 */
source?: Titanium$IOStream,

/**
 * Buffer object holding the data currently being pumped to the handler method.
 */
buffer?: Titanium$Buffer,

/**
 * Number of bytes being passed to this invocation of the handler, or
 * -1 in the event of an error or end of stream.
 */
bytesProcessed?: number,

/**
 * Total number of bytes read from the stream so far,
 * including the data passed to this current invocation of the handler.
 */
totalBytesProcessed?: number,

/**
 * Whether an error was encountered. Set to 1 in the case of an error, 0
 * otherwise.
 */
errorState?: number,

/**
 * Text description of the error.
 */
errorDescription?: string
} 
	
/**
 * Arguments to be passed to createBuffer
 */
declare interface CreateBufferArgs {

/**
 * An initial value which will be encoded and placed in the buffer. If value is a Number, type must also be set. (this is simply a convenient way of calling <Titanium.Codec.encodeString> or <Titanium.Codec.encodeNumber> and placing the encoded value in the returned buffer.)
 */
value?: string | number,

/**
 * The length of the buffer.
 */
length?: number,

/**
 * The type of data encoding to use with `value`.
 */
type?: string,

/**
 * The byte order of this buffer.
 */
byteOrder?: number
} 
	
/**
 * Simple object passed to <Titanium.UI.create2DMatrix> to initialize a matrix.
 */
declare interface MatrixCreationDict {

/**
 * Scale the matrix by the specified scaling factor. The same scaling factor is used
 * for both horizontal and vertical scaling.
 */
scale?: number,

/**
 * Rotation angle, in degrees. See the [rotate](Titanium.UI.2DMatrix.rotate) method
 * for a discussion of rotation.
 */
rotate?: number,

/**
 * Point to rotate around, specified as a dictionary object with `x` and `y`
 * properties, where { x: 0.5, y: 0.5 } represents the center of whatever is being
 * rotated.
 */
anchorPoint?: any
} 
	
/**
 * An abstract datatype for specifying an attributed string attribute.
 */
declare interface Attribute {

/**
 * Attribute to apply to the text.
 */
type: number,

/**
 * Attribute value.
 */
value: number,

/**
 * Attribute range.
 */
range: number[]
} 
	
/**
 * An abstract datatype for specifying an Paragraph style attribute.
 */
declare interface ParagraphAttribute {

/**
 * The text alignment of the receiver.
 */
alignment?: number,

/**
 * The indentation of the first line of the receiver.
 */
firstLineHeadIndent?: number | string,

/**
 * The indentation of the lines of lines other than the first.
 */
headIndent?: number | string,

/**
 * The trailing indentation of the receiver.
 */
tailIndent?: number | string,

/**
 * The mode that should be used to break lines in the receiver.
 */
lineBreakMode?: number,

/**
 * The maximum line height of receiver.
 */
maximumLineHeight?: number | string,

/**
 * The minimum height of receiver.
 */
minimumLineHeight?: number | string,

/**
 * The distance in points between the bottom of one line fragment and the top of the next.
 */
lineSpacing?: number | string,

/**
 * The space after the end of the paragraph.
 */
paragraphSpacingAfter?: number | string,

/**
 * The distance between the top of paragraph and the beginning of its text content.
 */
paragraphSpacingBefore?: number | string,

/**
 * The line height multiple.
 */
lineHeightMultiple?: number,

/**
 * The threshold of paragraph for hyphenation.
 */
hyphenationFactor?: number,

/**
 * A Boolean value indicating whether the system may tighten inter-character spacing
 * before truncating text.
 */
allowsDefaultTighteningForTruncation?: boolean
} 
	
/**
 * Dictionary describing the items for <Titanium.UI.Clipboard.setItems>.
 */
declare interface ClipboardItemsType {

/**
 * An array of key-value items to add to the clipboard. The key must a valid mime-type
 * matching the mime-type of the value.
 */
items?: any[],

/**
 * The privacy options to apply to all the items on the clipboard. The available options are
 * described in `Ti.UI.CLIPBOARD_OPTION_*`. Depending on the key, the value can be a Date or
 * Boolean.
 */
options?: any
} 
	
/**
 * An abstract datatype for specifying a text font.
 */
declare interface Font {

/**
 * Specifies the font family or specific font to use.
 */
fontFamily?: string,

/**
 * Font size, in platform-dependent units.
 */
fontSize?: number | string,

/**
 * Font weight. Valid values are "bold", "semibold", "normal", "thin",
 * "light" and "ultralight".
 */
fontWeight?: string,

/**
 * Font style. Valid values are "italic" or "normal".
 */
fontStyle?: string,

/**
 * The text style for the font.
 */
textStyle?: string
} 
	
/**
 * Template that represents the basic appearance of a list item.
 */
declare interface ItemTemplate {

/**
 * Contains key-value pairs of view properties and their values that are applied to the ListItem.
 */
properties?: any,

/**
 * Contains key-value pairs of view events and their listeners that are applied to the ListItem.
 */
events?: any,

/**
 * Contains an array of subview templates to be added (in order) as children to this view.
 */
childTemplates?: ViewTemplate[]
} 
	
/**
 * Template that represents a view subcomponent of an <ItemTemplate>.
 */
declare interface ViewTemplate {

/**
 * View's class name, for example, `Ti.UI.Button`.
 */
type: string,

/**
 * View's ID (or set of IDs) used for data binding. This value must be unique.
 */
bindId?: string,

/**
 * Contains key-value pairs of view properties and their values that are applied to this view component.
 */
properties?: any,

/**
 * Contains key-value pairs of view events and their listeners that are applied to this view component.
 */
events?: any,

/**
 * Contains an array of subview templates to be added (in order) as children to this view.
 */
childTemplates?: ViewTemplate[]
} 
	
/**
 * Represents displayed item data.
 */
declare interface ListDataItem {

/**
 * Template ID configured with the <Titanium.UI.ListView.templates> property or
 * <Titanium.UI.LIST_ITEM_TEMPLATE_DEFAULT>.
 */
template?: string | number,

/**
 * Contains key-value pairs of view properties and their values that are applied to the
 * `ListItem`.
 */
properties?: any
} 
	
/**
 * Represents the custom edit action for a ListItem.
 */
declare interface RowActionType {

/**
 * The title of the row action.
 */
title: string,

/**
 * The [identifier](RowActionType. identifier) of the row action. Only included in the event
 * if previously defined. Available in Titanium 6.0.0 and later.
 */
identifier?: string,

/**
 * The style of the row action.
 */
style: number,

/**
 * The background color of the row action.
 */
color?: string
} 
	
/**
 * A simple object for specifying the animation properties to use when inserting or deleting
 * sections or cells, or scrolling the list.
 */
declare interface ListViewAnimationProperties {

/**
 * Whether this list change should be animated. Ignored if any `animationStyle` value is specified.
 */
animated?: boolean,

/**
 * Type of animation to use for cell insertions and deletions.
 */
animationStyle?: number,

/**
 * Specifies what position to scroll the selected cell to.
 */
position?: number
} 
	
/**
 * A simple object that represents an index entry in a `ListView`.
 */
declare interface ListViewIndexEntry {

/**
 * Title to display in the index bar.
 */
title?: string,

/**
 * Section index associated with this title.
 */
index?: number
} 
	
/**
 * Optional parameter for [setContentInsets](Titanium.UI.ListView.setContentInsets) method.
 */
declare interface ListViewContentInsetOption {

/**
 * Determines whether the list view's content inset change is animated.
 */
animated?: boolean,

/**
 * The duration in `milliseconds` for animation while the content inset is  being changed.
 */
duration?: number
} 
	
/**
 * The parameter for [setMarker](Titanium.UI.ListView.setMarker) and [addMarker](Titanium.UI.ListView.addMarker) methods.
 */
declare interface ListViewMarkerProps {

/**
 * The sectionIndex of the reference item.
 */
sectionIndex?: number,

/**
 * The itemIndex of the reference item.
 */
itemIndex?: number
} 
	
/**
 * The parameter for [setContentInsets](Titanium.UI.TableView.setContentInsets) method.
 */
declare interface ListViewEdgeInsets {

/**
 * Value specifying the top insets for the enclosing scroll view of the list view.
 */
top?: number,

/**
 * Value specifying the left insets for the enclosing scroll view of the list view.
 */
left?: number,

/**
 * Value specifying the right insets for the enclosing scroll view of the list view.
 */
right?: number,

/**
 * Value specifying the bottom insets for the enclosing scroll view of the list view.
 */
bottom?: number
} 
	
/**
 * The arguments for the <Titanium.UI.ListView.prefetch> and <Titanium.UI.ListView.cancelprefetch> events.
 */
declare interface ListItemEventType {

/**
 * List section if the item is contained in a list section.
 */
section?: Titanium$UI$ListSection,

/**
 * Section index.
 */
sectionIndex?: number,

/**
 * Item index.
 */
itemIndex?: number,

/**
 * The item ID bound to the list item that generated the event.
 */
itemId?: string
} 
	
/**
 * Simple object passed to <Titanium.UI.createMatrix2D> to initialize a matrix.
 */
declare interface Matrix2DCreationDict {

/**
 * Scale the matrix by the specified scaling factor. The same scaling factor is used
 * for both horizontal and vertical scaling.
 */
scale?: number,

/**
 * Rotation angle, in degrees. See the [rotate](Titanium.UI.Matrix2D.rotate) method
 * for a discussion of rotation.
 */
rotate?: number,

/**
 * Point to rotate around, specified as a dictionary object with `x` and `y`
 * properties, where { x: 0.5, y: 0.5 } represents the center of whatever is being
 * rotated.
 */
anchorPoint?: any
} 
	
/**
 * Dictionary of options for the <Titanium.UI.OptionDialog.hide> method.
 */
declare interface hideParams {

/**
 * Determines whether to animate the dialog as it is dismissed.
 */
animated?: boolean
} 
	
/**
 * Optional parameter for [setContentOffset](Titanium.UI.ScrollView.setContentOffset) method.
 */
declare interface contentOffsetOption {

/**
 * Determines whether the scroll view's content area change is animated.
 */
animated?: boolean
} 
	
/**
 * Optional parameter for [setZoomScale](Titanium.UI.ScrollView.setZoomScale) method.
 */
declare interface zoomScaleOption {

/**
 * Determines whether the scroll view's zooming is animated.
 */
animated?: boolean
} 
	
/**
 * A simple object for specifying the animation properties when scrolling the view.
 */
declare interface ScrollViewAnimationProperties {

/**
 * When set to `true` it will scroll smoothly to the destination.
 */
animated?: boolean
} 
	
/**
 * Dictionary to specify edge insets for <Titanium.UI.Tab.iconInsets>.
 */
declare interface TabIconInsets {

/**
 * Top inset.
 */
top?: number,

/**
 * Left inset.
 */
left?: number
} 
	
/**
 * A simple object for specifying the animation properties to use when inserting or deleting rows, or scrolling the table.
 */
declare interface TableViewAnimationProperties {

/**
 * Whether this table change should be animated. Ignored if any `animationStyle` value is specified.
 */
animated?: boolean,

/**
 * Type of animation to use for row insertions and deletions.
 */
animationStyle?: number,

/**
 * Specifies what position to scroll the selected row to.
 */
position?: number
} 
	
/**
 * A simple object that represents an index entry in a `TableView`.
 */
declare interface TableViewIndexEntry {

/**
 * Title to display in the index bar for this item.
 */
title?: string,

/**
 * Row index associated with this item.
 */
index?: number
} 
	
/**
 * Optional parameter for [setContentInsets](Titanium.UI.TableView.setContentInsets) method.
 */
declare interface TableViewContentInsetOption {

/**
 * Determines whether the table view's content inset change is animated.
 */
animated?: boolean,

/**
 * The duration in `milleseconds` for animation while the content inset is  being changed.
 */
duration?: number
} 
	
/**
 * The parameter for [setContentInsets](Titanium.UI.TableView.setContentInsets) method.
 */
declare interface TableViewEdgeInsets {

/**
 * Value specifying the top insets for the enclosing scroll view of the table.
 */
top?: number,

/**
 * Value specifying the left insets for the enclosing scroll view of the table.
 */
left?: number,

/**
 * Value specifying the right insets for the enclosing scroll view of the table.
 */
right?: number,

/**
 * Value specifying the bottom insets for the enclosing scroll view of the table.
 */
bottom?: number
} 
	
/**
 * Dictionary object of parameters for the <Titanium.UI.TextArea.selected> event and <Titanium.UI.TextArea.selection> property that describes
 * position and length of the selected text.
 */
declare interface textAreaSelectedParams {

/**
 * Starting position of selected text.
 */
location?: number,

/**
 * Number of characters selected.
 */
length?: number
} 
	
/**
 * Dictionary object of parameters for the <Titanium.UI.TextField.selection> property that describes
 * position and length of the selected text.
 */
declare interface textFieldSelectedParams {

/**
 * Starting position of selected text.
 */
location?: number,

/**
 * Number of characters selected.
 */
length?: number
} 
	
/**
 * Dictionary object of parameters for the <Titanium.UI.TextField.padding>  that describes the padding
 */
declare interface TextFieldPadding {

/**
 * Left padding
 */
left?: number,

/**
 * Right padding
 */
right?: number,

/**
 * Top padding (Android only, since 6.1.0)
 */
top?: number,

/**
 * Bottom padding (Android only, since 6.1.0)
 */
bottom?: number
} 
	
/**
 * A pair of coordinates used to describe the location of a <Titanium.UI.View>.
 */
declare interface Point {

/**
 * The x-axis coordinate of this point.
 */
x?: number | string,

/**
 * The y-axis coordinate of this point.
 */
y?: number | string
} 
	
/**
 * A simple object defining a color gradient.
 */
declare interface Gradient {

/**
 * Type of gradient, either 'linear' or 'radial'.
 */
type?: string,

/**
 * Start point for the gradient.
 */
startPoint?: Point,

/**
 * End point for the gradient.
 */
endPoint?: Point,

/**
 * For a radial gradient, the radius at the `startPoint`.
 */
startRadius?: number,

/**
 * For a radial gradient, the radius at the `endPoint`.
 */
endRadius?: number,

/**
 * An array of colors, as a color name or hex triplet.
 */
colors?: string[] | GradientColorRef[],

/**
 * Set to `true` to continue filling with the starting color beyond the `startPoint`.
 */
backfillStart?: boolean,

/**
 * Set to `true` to continue filling with the final color beyond the `endPoint`.
 */
backfillEnd?: boolean
} 
	
/**
 * A simple object consisting of a color and an offset.
 */
declare interface GradientColorRef {

/**
 * Color value at this point in the gradient, as a color name or hex triplet.
 */
color?: string,

/**
 * The color's normalized position within the gradient, ranging from 0 (start) to 1 (end).
 */
offset?: number
} 
	
/**
 * A simple object consisting of the position and size measurements.
 */
declare interface Dimension {

/**
 * The height measurement.
 */
height?: number,

/**
 * The width measurement.
 */
width?: number,

/**
 * The x-axis coordinate of the position.
 */
x?: number,

/**
 * The y-axis coordinate of the position.
 */
y?: number
} 
	
/**
 * Optional parameter to enable animation to [hide](Titanium.UI.View.hide) and [show](Titanium.UI.View.show).
 */
declare interface AnimationOption {

/**
 * Determines whether to enable a circular reveal animation.
 */
animated?: boolean
} 
	
/**
 * Dictionary object of parameters for the padding applied to all kinds of views.
 */
declare interface ViewPadding {

/**
 * Left padding
 */
left?: number,

/**
 * Right padding
 */
right?: number,

/**
 * Top padding
 */
top?: number,

/**
 * Bottom padding
 */
bottom?: number
} 
	
/**
 * The parameter passed to the <Titanium.UI.WebView.takeSnapshot> callback.
 */
declare interface SnapshotResult {

/**
 * The snapshot image.
 */
snapshot?: Titanium$Blob,

/**
 * Indicates if the snapshot taken.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string
} 
	
/**
 * The object returned to the <Titanium.UI.WebView.backForwardList> method.
 */
declare interface BackForwardList {

/**
 * The current item.
 */
currentItem?: BackForwardListItem,

/**
 * The item immediately preceding the current item.
 */
backItem?: BackForwardListItem,

/**
 * The item immediately following the current item.
 */
forwardItem?: BackForwardListItem,

/**
 * The portion of the list preceding the current item.
 */
backList?: BackForwardListItem[],

/**
 * The portion of the list following the current item.
 */
forwardList?: BackForwardListItem[]
} 
	
/**
 * The object represents a webpage in the back-forward of a web view.
 */
declare interface BackForwardListItem {

/**
 * The URL of the webpage represented by this item.
 */
url?: string,

/**
 * The URL of the initial request that created this item.
 */
initialUrl?: string,

/**
 * The title of the webpage represented by this item.
 */
title?: string
} 
	
/**
 * An object returned when the <Titanium.UI.WebView.onlink> callback is fired.
 */
declare interface OnLinkURLResponse {

/**
 * The url of the link that should be navigated to.
 */
url?: string
} 
	
/**
 * Dictionary of options for the <Titanium.UI.Window.open> method.
 */
declare interface openWindowParams {

/**
 * Determines whether to use an animated effect when the window is shown.
 */
animated?: boolean,

/**
 * Window's bottom position, in platform-specific units.
 */
bottom?: number | string,

/**
 * Determines if the window is fullscreen.
 */
fullscreen?: boolean,

/**
 * Window's height, in platform-specific units.
 */
height?: number | string,

/**
 * Window's left position, in platform-specific units.
 */
left?: number | string,

/**
 * Determines whether to open the window modal in front of other windows.
 */
modal?: boolean,

/**
 * Presentation style of this modal window.
 */
modalStyle?: number,

/**
 * Transition style of this modal window.
 */
modalTransitionStyle?: number,

/**
 * For modal windows, hides the nav bar (`true`) or shows the nav bar (`false`).
 */
navBarHidden?: boolean,

/**
 * Window's right position, in platform-specific units.
 */
right?: number | string,

/**
 * Window's top position, in platform-specific units.
 */
top?: number | string,

/**
 * Transition style of this non-modal window.
 */
transition?: number,

/**
 * Window's width, in platform-specific units.
 */
width?: number | string,

/**
 * Animation resource to run on the activity (heavyweight window) being opened.
 */
activityEnterAnimation?: number,

/**
 * Animation resource to run on the activity that is being put in background as a heavyweight window is being opened above it.
 */
activityExitAnimation?: number
} 
	
/**
 * Dictionary of options for the <Titanium.UI.Window.setToolbar> method.
 */
declare interface windowToolbarParam {

/**
 * Defines if the toolbar is translucent.
 */
translucent?: boolean,

/**
 * Defines if the toolbar appearance is animated.
 */
animated?: boolean,

/**
 * Background color for the toolbar, as a color name or hex triplet.
 */
barColor?: string,

/**
 * The tintColor to apply to the tool bar.
 */
tintColor?: string
} 
	
/**
 * Dictionary of options for the <Titanium.UI.Window.close> method.
 */
declare interface closeWindowParams {

/**
 * Determines whether to use an animated effect when the window is closed.
 */
animated?: boolean,

/**
 * Animation resource to use for the incoming activity.
 */
activityEnterAnimation?: number,

/**
 * Animation resource to use for the outgoing activity (heavyweight window).
 */
activityExitAnimation?: number
} 
	
/**
 * Dictionary of options for the <Titanium.UI.Window.titleAttributes> property.
 */
declare interface titleAttributesParams {

/**
 * Color of the window title, as a color name or hex triplet.
 */
color?: string,

/**
 * Font to use for the window title.
 */
font?: Font,

/**
 * Shadow color and offset for the window title.
 */
shadow?: shadowDict
} 
	
/**
 * Dictionary describing the shadow effect for text.
 */
declare interface shadowDict {

/**
 * Specifies the blur radius of the shadow.
 */
blurRadius?: number,

/**
 * Color name or hex triplet specifying the color of the shadow.
 */
color?: string,

/**
 * Dictionary with the properties `width` and `height` used as the horizontal
 * and vertical offset of the shadow, respectively.
 */
offset?: any
} 
	
/**
 * Object of options for <Titanium.UI.iOS.ApplicationShortcuts.addDynamicShortcut>.
 */
declare interface ShortcutParams {

/**
 * The unique key for the application shortcut.
 */
itemtype: string,

/**
 * The title of the application shortcut.
 */
title: string,

/**
 * The subtitle displayed on the application shortcut.
 */
subtitle?: string,

/**
 * The icon to be displayed on the application shortcut. You can either use one of the constants like
 * <Titanium.UI.iOS.SHORTCUT_ICON_TYPE_COMPOSE>, a local image specified by the image path or a reference to a
 * <Titanium.Contacts.Person>.
 */
icon?: number | string | Titanium$Contacts$Person,

/**
 * The userInfo of the application shortcut.
 */
userInfo?: any
} 
	
/**
 * Dictionary to specify a boundary identifier for <Titanium.UI.iOS.CollisionBehavior.addBoundary>.
 */
declare interface BoundaryIdentifier {

/**
 * Arbitrary identifier for the boundary
 */
identifier?: string,

/**
 * Start point for the boundary
 */
point1?: Point,

/**
 * End point for the boundary
 */
point2?: Point
} 
	
/**
 * Dictionary to specify edge insets for <Titanium.UI.iOS.CollisionBehavior.referenceInsets>.
 */
declare interface ReferenceInsets {

/**
 * Top inset.
 */
top?: number,

/**
 * Left inset.
 */
left?: number,

/**
 * Right inset.
 */
right?: number,

/**
 * Bottom inset.
 */
bottom?: number
} 
	
/**
 * Simple object for defining a single image in a cover flow view.
 */
declare interface CoverFlowImageType {

/**
 * Image to use, as a local file URL, `Blob`, or `File`.
 */
image?: string | Titanium$Blob | Titanium$Filesystem$File,

/**
 * Display width for the image, in Apple points.
 */
width?: number,

/**
 * Display height of the image, in Apple points.
 */
height?: number
} 
	
/**
 * A simple object for specifying options when showing or dismissing a <Titanium.UI.iOS.DocumentViewer>.
 */
declare interface DocumentViewerOptions {

/**
 * Indicates whether to animate the transition.
 */
animated?: boolean,

/**
 * Anchors the options menu to the specified view.
 */
view?: Titanium$UI$View
} 
	
/**
 * Dictionary of options for showing a menu popup with <Titanium.UI.iOS.MenuPopup.show>.
 */
declare interface MenuPopupShowParams {

/**
 * The view where the menu pop is shown at.
 */
view: Titanium$UI$View,

/**
 * Determines whether the menu popup should be opened or closed animated.
 */
animated?: boolean,

/**
 * Indicates the arrow direction of the menu popup.
 */
arrowDirection?: number
} 
	
/**
 * Dictionary of options for hiding a menu popup with <Titanium.UI.iOS.MenuPopup.hide>.
 */
declare interface MenuPopupHideParams {

/**
 * Determines whether the menu popup should be opened or closed animated.
 */
animated?: boolean
} 
	
/**
 * Optional parameter for [setShowMasterInPortrait](Titanium.UI.iOS.SplitWindow.setShowMasterInPortrait) and
 * [setMasterIsOverlayed](Titanium.UI.iOS.SplitWindow.setMasterIsOverlayed) methods.
 */
declare interface animationOption {

/**
 * Determines whether the change is animated.
 */
animated?: boolean
} 
	
/**
 * Object describing a button bar or tabbed bar item.
 */
declare interface BarItemType {

/**
 * Button title, used if no `image` is specified.
 */
title?: string,

/**
 * Button icon. If specified, takes precedence over `title`.
 */
image?: string | Titanium$Blob | Titanium$Filesystem$File,

/**
 * Width for this button.
 */
width?: number,

/**
 * Whether the button is enabled initially.
 */
enabled?: boolean,

/**
 * A succint label associated with the bar item for the device's accessibility service.
 */
accessibilityLabel?: string
} 
	
/**
 * The parameter passed to the <Titanium.UI.iOS.WebViewConfiguration.preferences> method.
 */
declare interface WebViewPreferencesObject {

/**
 * The minimum font size in points.
 */
minimumFontSize?: number,

/**
 * A Boolean value indicating whether JavaScript is enabled.
 */
javaScriptEnabled?: boolean,

/**
 * A Boolean value indicating whether JavaScript can open windows without user interaction.
 */
javaScriptCanOpenWindowsAutomatically?: boolean
} 
	
/**
 * Dictionary specifying the transition animation used with the <Titanium.UI.iOS.createTransitionAnimation> method.
 */
declare interface transitionAnimationParam {

/**
 * Length of the transition in milliseconds.
 */
duration?: number,

/**
 * Animation to hide the current window.
 */
transitionFrom?: Titanium$UI$Animation,

/**
 * Animation to show the new window.
 */
transitionTo?: Titanium$UI$Animation
} 
	
/**
 * Dictionary of options for <Titanium.UI.iPad.Popover.show> and <Titanium.UI.iPad.Popover.hide>.
 */
declare interface PopoverParams {

/**
 * Indicates whether to animate showing or hiding the popover.
 */
animated?: boolean,

/**
 * Sets the arrow position of the popover relative to the attached view object's dimensions
 * when showing the popover.
 */
rect?: Dimension,

/**
 * Attaches the popover to the specified view when showing the popover.
 */
view: Titanium$UI$View
} 
	
/**
 * Reply message received from watch app.
 */
declare interface MessageReply {

/**
 * Reply message from watchapp.
 */
message?: any,

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number
} 
	
/**
 * Properties passed to a yql callback to report a success or failure.
 */
declare interface YQLResponse {

/**
 * Indicates if the operation succeeded.
 */
success?: boolean,

/**
 * Error message, if any returned.
 */
error?: string,

/**
 * Error code. Returns 0 if `success` is `true`.
 */
code?: number,

/**
 * Error message, if any returned. Use `error` instead
 */
message?: string,

/**
 * The data payload received from the YQL.
 */
data?: any
} 
    }
